// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/artifact/artifacts.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fartifact_2fartifacts_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fartifact_2fartifacts_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/literals.pb.h"
#include "flyteidl/core/types.pb.h"
#include "flyteidl/core/identifier.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fartifact_2fartifacts_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fartifact_2fartifacts_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fartifact_2fartifacts_2eproto();
namespace flyteidl {
namespace artifact {
class AddTagsRequest;
class AddTagsRequestDefaultTypeInternal;
extern AddTagsRequestDefaultTypeInternal _AddTagsRequest_default_instance_;
class AddTagsResponse;
class AddTagsResponseDefaultTypeInternal;
extern AddTagsResponseDefaultTypeInternal _AddTagsResponse_default_instance_;
class Artifact;
class ArtifactDefaultTypeInternal;
extern ArtifactDefaultTypeInternal _Artifact_default_instance_;
class ArtifactSpec;
class ArtifactSpecDefaultTypeInternal;
extern ArtifactSpecDefaultTypeInternal _ArtifactSpec_default_instance_;
class CreateAliasRequest;
class CreateAliasRequestDefaultTypeInternal;
extern CreateAliasRequestDefaultTypeInternal _CreateAliasRequest_default_instance_;
class CreateAliasResponse;
class CreateAliasResponseDefaultTypeInternal;
extern CreateAliasResponseDefaultTypeInternal _CreateAliasResponse_default_instance_;
class CreateArtifactRequest;
class CreateArtifactRequestDefaultTypeInternal;
extern CreateArtifactRequestDefaultTypeInternal _CreateArtifactRequest_default_instance_;
class CreateArtifactResponse;
class CreateArtifactResponseDefaultTypeInternal;
extern CreateArtifactResponseDefaultTypeInternal _CreateArtifactResponse_default_instance_;
class GetArtifactRequest;
class GetArtifactRequestDefaultTypeInternal;
extern GetArtifactRequestDefaultTypeInternal _GetArtifactRequest_default_instance_;
class GetArtifactResponse;
class GetArtifactResponseDefaultTypeInternal;
extern GetArtifactResponseDefaultTypeInternal _GetArtifactResponse_default_instance_;
class ListArtifactNamesRequest;
class ListArtifactNamesRequestDefaultTypeInternal;
extern ListArtifactNamesRequestDefaultTypeInternal _ListArtifactNamesRequest_default_instance_;
class ListArtifactNamesResponse;
class ListArtifactNamesResponseDefaultTypeInternal;
extern ListArtifactNamesResponseDefaultTypeInternal _ListArtifactNamesResponse_default_instance_;
class ListArtifactsRequest;
class ListArtifactsRequestDefaultTypeInternal;
extern ListArtifactsRequestDefaultTypeInternal _ListArtifactsRequest_default_instance_;
class ListArtifactsResponse;
class ListArtifactsResponseDefaultTypeInternal;
extern ListArtifactsResponseDefaultTypeInternal _ListArtifactsResponse_default_instance_;
class RemoveAliasRequest;
class RemoveAliasRequestDefaultTypeInternal;
extern RemoveAliasRequestDefaultTypeInternal _RemoveAliasRequest_default_instance_;
class RemoveAliasResponse;
class RemoveAliasResponseDefaultTypeInternal;
extern RemoveAliasResponseDefaultTypeInternal _RemoveAliasResponse_default_instance_;
class RemoveTagsRequest;
class RemoveTagsRequestDefaultTypeInternal;
extern RemoveTagsRequestDefaultTypeInternal _RemoveTagsRequest_default_instance_;
class RemoveTagsResponse;
class RemoveTagsResponseDefaultTypeInternal;
extern RemoveTagsResponseDefaultTypeInternal _RemoveTagsResponse_default_instance_;
class Tag;
class TagDefaultTypeInternal;
extern TagDefaultTypeInternal _Tag_default_instance_;
}  // namespace artifact
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::artifact::AddTagsRequest* Arena::CreateMaybeMessage<::flyteidl::artifact::AddTagsRequest>(Arena*);
template<> ::flyteidl::artifact::AddTagsResponse* Arena::CreateMaybeMessage<::flyteidl::artifact::AddTagsResponse>(Arena*);
template<> ::flyteidl::artifact::Artifact* Arena::CreateMaybeMessage<::flyteidl::artifact::Artifact>(Arena*);
template<> ::flyteidl::artifact::ArtifactSpec* Arena::CreateMaybeMessage<::flyteidl::artifact::ArtifactSpec>(Arena*);
template<> ::flyteidl::artifact::CreateAliasRequest* Arena::CreateMaybeMessage<::flyteidl::artifact::CreateAliasRequest>(Arena*);
template<> ::flyteidl::artifact::CreateAliasResponse* Arena::CreateMaybeMessage<::flyteidl::artifact::CreateAliasResponse>(Arena*);
template<> ::flyteidl::artifact::CreateArtifactRequest* Arena::CreateMaybeMessage<::flyteidl::artifact::CreateArtifactRequest>(Arena*);
template<> ::flyteidl::artifact::CreateArtifactResponse* Arena::CreateMaybeMessage<::flyteidl::artifact::CreateArtifactResponse>(Arena*);
template<> ::flyteidl::artifact::GetArtifactRequest* Arena::CreateMaybeMessage<::flyteidl::artifact::GetArtifactRequest>(Arena*);
template<> ::flyteidl::artifact::GetArtifactResponse* Arena::CreateMaybeMessage<::flyteidl::artifact::GetArtifactResponse>(Arena*);
template<> ::flyteidl::artifact::ListArtifactNamesRequest* Arena::CreateMaybeMessage<::flyteidl::artifact::ListArtifactNamesRequest>(Arena*);
template<> ::flyteidl::artifact::ListArtifactNamesResponse* Arena::CreateMaybeMessage<::flyteidl::artifact::ListArtifactNamesResponse>(Arena*);
template<> ::flyteidl::artifact::ListArtifactsRequest* Arena::CreateMaybeMessage<::flyteidl::artifact::ListArtifactsRequest>(Arena*);
template<> ::flyteidl::artifact::ListArtifactsResponse* Arena::CreateMaybeMessage<::flyteidl::artifact::ListArtifactsResponse>(Arena*);
template<> ::flyteidl::artifact::RemoveAliasRequest* Arena::CreateMaybeMessage<::flyteidl::artifact::RemoveAliasRequest>(Arena*);
template<> ::flyteidl::artifact::RemoveAliasResponse* Arena::CreateMaybeMessage<::flyteidl::artifact::RemoveAliasResponse>(Arena*);
template<> ::flyteidl::artifact::RemoveTagsRequest* Arena::CreateMaybeMessage<::flyteidl::artifact::RemoveTagsRequest>(Arena*);
template<> ::flyteidl::artifact::RemoveTagsResponse* Arena::CreateMaybeMessage<::flyteidl::artifact::RemoveTagsResponse>(Arena*);
template<> ::flyteidl::artifact::Tag* Arena::CreateMaybeMessage<::flyteidl::artifact::Tag>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace artifact {

// ===================================================================

class Artifact final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.artifact.Artifact) */ {
 public:
  Artifact();
  virtual ~Artifact();

  Artifact(const Artifact& from);

  inline Artifact& operator=(const Artifact& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Artifact(Artifact&& from) noexcept
    : Artifact() {
    *this = ::std::move(from);
  }

  inline Artifact& operator=(Artifact&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Artifact& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Artifact* internal_default_instance() {
    return reinterpret_cast<const Artifact*>(
               &_Artifact_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Artifact* other);
  friend void swap(Artifact& a, Artifact& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Artifact* New() const final {
    return CreateMaybeMessage<Artifact>(nullptr);
  }

  Artifact* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Artifact>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Artifact& from);
  void MergeFrom(const Artifact& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Artifact* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uri = 2;
  void clear_uri();
  static const int kUriFieldNumber = 2;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // .flyteidl.core.ArtifactID artifact_id = 1;
  bool has_artifact_id() const;
  void clear_artifact_id();
  static const int kArtifactIdFieldNumber = 1;
  const ::flyteidl::core::ArtifactID& artifact_id() const;
  ::flyteidl::core::ArtifactID* release_artifact_id();
  ::flyteidl::core::ArtifactID* mutable_artifact_id();
  void set_allocated_artifact_id(::flyteidl::core::ArtifactID* artifact_id);

  // .flyteidl.artifact.ArtifactSpec spec = 3;
  bool has_spec() const;
  void clear_spec();
  static const int kSpecFieldNumber = 3;
  const ::flyteidl::artifact::ArtifactSpec& spec() const;
  ::flyteidl::artifact::ArtifactSpec* release_spec();
  ::flyteidl::artifact::ArtifactSpec* mutable_spec();
  void set_allocated_spec(::flyteidl::artifact::ArtifactSpec* spec);

  // @@protoc_insertion_point(class_scope:flyteidl.artifact.Artifact)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::flyteidl::core::ArtifactID* artifact_id_;
  ::flyteidl::artifact::ArtifactSpec* spec_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fartifact_2fartifacts_2eproto;
};
// -------------------------------------------------------------------

class CreateArtifactRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.artifact.CreateArtifactRequest) */ {
 public:
  CreateArtifactRequest();
  virtual ~CreateArtifactRequest();

  CreateArtifactRequest(const CreateArtifactRequest& from);

  inline CreateArtifactRequest& operator=(const CreateArtifactRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateArtifactRequest(CreateArtifactRequest&& from) noexcept
    : CreateArtifactRequest() {
    *this = ::std::move(from);
  }

  inline CreateArtifactRequest& operator=(CreateArtifactRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateArtifactRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateArtifactRequest* internal_default_instance() {
    return reinterpret_cast<const CreateArtifactRequest*>(
               &_CreateArtifactRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CreateArtifactRequest* other);
  friend void swap(CreateArtifactRequest& a, CreateArtifactRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateArtifactRequest* New() const final {
    return CreateMaybeMessage<CreateArtifactRequest>(nullptr);
  }

  CreateArtifactRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateArtifactRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateArtifactRequest& from);
  void MergeFrom(const CreateArtifactRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateArtifactRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  bool has_artifact_key() const;
  void clear_artifact_key();
  static const int kArtifactKeyFieldNumber = 1;
  const ::flyteidl::core::ArtifactKey& artifact_key() const;
  ::flyteidl::core::ArtifactKey* release_artifact_key();
  ::flyteidl::core::ArtifactKey* mutable_artifact_key();
  void set_allocated_artifact_key(::flyteidl::core::ArtifactKey* artifact_key);

  // .flyteidl.artifact.ArtifactSpec spec = 2;
  bool has_spec() const;
  void clear_spec();
  static const int kSpecFieldNumber = 2;
  const ::flyteidl::artifact::ArtifactSpec& spec() const;
  ::flyteidl::artifact::ArtifactSpec* release_spec();
  ::flyteidl::artifact::ArtifactSpec* mutable_spec();
  void set_allocated_spec(::flyteidl::artifact::ArtifactSpec* spec);

  // @@protoc_insertion_point(class_scope:flyteidl.artifact.CreateArtifactRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::ArtifactKey* artifact_key_;
  ::flyteidl::artifact::ArtifactSpec* spec_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fartifact_2fartifacts_2eproto;
};
// -------------------------------------------------------------------

class ArtifactSpec final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.artifact.ArtifactSpec) */ {
 public:
  ArtifactSpec();
  virtual ~ArtifactSpec();

  ArtifactSpec(const ArtifactSpec& from);

  inline ArtifactSpec& operator=(const ArtifactSpec& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArtifactSpec(ArtifactSpec&& from) noexcept
    : ArtifactSpec() {
    *this = ::std::move(from);
  }

  inline ArtifactSpec& operator=(ArtifactSpec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ArtifactSpec& default_instance();

  enum SourceCase {
    kTaskExecution = 5,
    kExecution = 6,
    kPrincipal = 7,
    SOURCE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArtifactSpec* internal_default_instance() {
    return reinterpret_cast<const ArtifactSpec*>(
               &_ArtifactSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ArtifactSpec* other);
  friend void swap(ArtifactSpec& a, ArtifactSpec& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArtifactSpec* New() const final {
    return CreateMaybeMessage<ArtifactSpec>(nullptr);
  }

  ArtifactSpec* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ArtifactSpec>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ArtifactSpec& from);
  void MergeFrom(const ArtifactSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArtifactSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.artifact.Tag tags = 3;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 3;
  ::flyteidl::artifact::Tag* mutable_tags(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::artifact::Tag >*
      mutable_tags();
  const ::flyteidl::artifact::Tag& tags(int index) const;
  ::flyteidl::artifact::Tag* add_tags();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::artifact::Tag >&
      tags() const;

  // repeated .flyteidl.core.ArtifactAlias aliases = 4;
  int aliases_size() const;
  void clear_aliases();
  static const int kAliasesFieldNumber = 4;
  ::flyteidl::core::ArtifactAlias* mutable_aliases(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactAlias >*
      mutable_aliases();
  const ::flyteidl::core::ArtifactAlias& aliases(int index) const;
  ::flyteidl::core::ArtifactAlias* add_aliases();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactAlias >&
      aliases() const;

  // string short_description = 8;
  void clear_short_description();
  static const int kShortDescriptionFieldNumber = 8;
  const ::std::string& short_description() const;
  void set_short_description(const ::std::string& value);
  #if LANG_CXX11
  void set_short_description(::std::string&& value);
  #endif
  void set_short_description(const char* value);
  void set_short_description(const char* value, size_t size);
  ::std::string* mutable_short_description();
  ::std::string* release_short_description();
  void set_allocated_short_description(::std::string* short_description);

  // string long_description = 9;
  void clear_long_description();
  static const int kLongDescriptionFieldNumber = 9;
  const ::std::string& long_description() const;
  void set_long_description(const ::std::string& value);
  #if LANG_CXX11
  void set_long_description(::std::string&& value);
  #endif
  void set_long_description(const char* value);
  void set_long_description(const char* value, size_t size);
  ::std::string* mutable_long_description();
  ::std::string* release_long_description();
  void set_allocated_long_description(::std::string* long_description);

  // .flyteidl.core.Literal value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::flyteidl::core::Literal& value() const;
  ::flyteidl::core::Literal* release_value();
  ::flyteidl::core::Literal* mutable_value();
  void set_allocated_value(::flyteidl::core::Literal* value);

  // .flyteidl.core.LiteralType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::flyteidl::core::LiteralType& type() const;
  ::flyteidl::core::LiteralType* release_type();
  ::flyteidl::core::LiteralType* mutable_type();
  void set_allocated_type(::flyteidl::core::LiteralType* type);

  // .flyteidl.core.TaskExecutionIdentifier task_execution = 5;
  bool has_task_execution() const;
  void clear_task_execution();
  static const int kTaskExecutionFieldNumber = 5;
  const ::flyteidl::core::TaskExecutionIdentifier& task_execution() const;
  ::flyteidl::core::TaskExecutionIdentifier* release_task_execution();
  ::flyteidl::core::TaskExecutionIdentifier* mutable_task_execution();
  void set_allocated_task_execution(::flyteidl::core::TaskExecutionIdentifier* task_execution);

  // .flyteidl.core.WorkflowExecutionIdentifier execution = 6;
  bool has_execution() const;
  void clear_execution();
  static const int kExecutionFieldNumber = 6;
  const ::flyteidl::core::WorkflowExecutionIdentifier& execution() const;
  ::flyteidl::core::WorkflowExecutionIdentifier* release_execution();
  ::flyteidl::core::WorkflowExecutionIdentifier* mutable_execution();
  void set_allocated_execution(::flyteidl::core::WorkflowExecutionIdentifier* execution);

  // string principal = 7;
  private:
  bool has_principal() const;
  public:
  void clear_principal();
  static const int kPrincipalFieldNumber = 7;
  const ::std::string& principal() const;
  void set_principal(const ::std::string& value);
  #if LANG_CXX11
  void set_principal(::std::string&& value);
  #endif
  void set_principal(const char* value);
  void set_principal(const char* value, size_t size);
  ::std::string* mutable_principal();
  ::std::string* release_principal();
  void set_allocated_principal(::std::string* principal);

  void clear_source();
  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.artifact.ArtifactSpec)
 private:
  class HasBitSetters;
  void set_has_task_execution();
  void set_has_execution();
  void set_has_principal();

  inline bool has_source() const;
  inline void clear_has_source();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::artifact::Tag > tags_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactAlias > aliases_;
  ::google::protobuf::internal::ArenaStringPtr short_description_;
  ::google::protobuf::internal::ArenaStringPtr long_description_;
  ::flyteidl::core::Literal* value_;
  ::flyteidl::core::LiteralType* type_;
  union SourceUnion {
    SourceUnion() {}
    ::flyteidl::core::TaskExecutionIdentifier* task_execution_;
    ::flyteidl::core::WorkflowExecutionIdentifier* execution_;
    ::google::protobuf::internal::ArenaStringPtr principal_;
  } source_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fartifact_2fartifacts_2eproto;
};
// -------------------------------------------------------------------

class CreateArtifactResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.artifact.CreateArtifactResponse) */ {
 public:
  CreateArtifactResponse();
  virtual ~CreateArtifactResponse();

  CreateArtifactResponse(const CreateArtifactResponse& from);

  inline CreateArtifactResponse& operator=(const CreateArtifactResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateArtifactResponse(CreateArtifactResponse&& from) noexcept
    : CreateArtifactResponse() {
    *this = ::std::move(from);
  }

  inline CreateArtifactResponse& operator=(CreateArtifactResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateArtifactResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateArtifactResponse* internal_default_instance() {
    return reinterpret_cast<const CreateArtifactResponse*>(
               &_CreateArtifactResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CreateArtifactResponse* other);
  friend void swap(CreateArtifactResponse& a, CreateArtifactResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateArtifactResponse* New() const final {
    return CreateMaybeMessage<CreateArtifactResponse>(nullptr);
  }

  CreateArtifactResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateArtifactResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateArtifactResponse& from);
  void MergeFrom(const CreateArtifactResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateArtifactResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.artifact.Artifact artifact = 1;
  bool has_artifact() const;
  void clear_artifact();
  static const int kArtifactFieldNumber = 1;
  const ::flyteidl::artifact::Artifact& artifact() const;
  ::flyteidl::artifact::Artifact* release_artifact();
  ::flyteidl::artifact::Artifact* mutable_artifact();
  void set_allocated_artifact(::flyteidl::artifact::Artifact* artifact);

  // @@protoc_insertion_point(class_scope:flyteidl.artifact.CreateArtifactResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::artifact::Artifact* artifact_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fartifact_2fartifacts_2eproto;
};
// -------------------------------------------------------------------

class GetArtifactRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.artifact.GetArtifactRequest) */ {
 public:
  GetArtifactRequest();
  virtual ~GetArtifactRequest();

  GetArtifactRequest(const GetArtifactRequest& from);

  inline GetArtifactRequest& operator=(const GetArtifactRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetArtifactRequest(GetArtifactRequest&& from) noexcept
    : GetArtifactRequest() {
    *this = ::std::move(from);
  }

  inline GetArtifactRequest& operator=(GetArtifactRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetArtifactRequest& default_instance();

  enum IdentifierCase {
    kArtifactKey = 1,
    kArtifactId = 2,
    kUri = 3,
    kQuery = 4,
    IDENTIFIER_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetArtifactRequest* internal_default_instance() {
    return reinterpret_cast<const GetArtifactRequest*>(
               &_GetArtifactRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GetArtifactRequest* other);
  friend void swap(GetArtifactRequest& a, GetArtifactRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetArtifactRequest* New() const final {
    return CreateMaybeMessage<GetArtifactRequest>(nullptr);
  }

  GetArtifactRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetArtifactRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetArtifactRequest& from);
  void MergeFrom(const GetArtifactRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetArtifactRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool details = 5;
  void clear_details();
  static const int kDetailsFieldNumber = 5;
  bool details() const;
  void set_details(bool value);

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  bool has_artifact_key() const;
  void clear_artifact_key();
  static const int kArtifactKeyFieldNumber = 1;
  const ::flyteidl::core::ArtifactKey& artifact_key() const;
  ::flyteidl::core::ArtifactKey* release_artifact_key();
  ::flyteidl::core::ArtifactKey* mutable_artifact_key();
  void set_allocated_artifact_key(::flyteidl::core::ArtifactKey* artifact_key);

  // .flyteidl.core.ArtifactID artifact_id = 2;
  bool has_artifact_id() const;
  void clear_artifact_id();
  static const int kArtifactIdFieldNumber = 2;
  const ::flyteidl::core::ArtifactID& artifact_id() const;
  ::flyteidl::core::ArtifactID* release_artifact_id();
  ::flyteidl::core::ArtifactID* mutable_artifact_id();
  void set_allocated_artifact_id(::flyteidl::core::ArtifactID* artifact_id);

  // string uri = 3;
  private:
  bool has_uri() const;
  public:
  void clear_uri();
  static const int kUriFieldNumber = 3;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // .flyteidl.core.ArtifactQuery query = 4;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 4;
  const ::flyteidl::core::ArtifactQuery& query() const;
  ::flyteidl::core::ArtifactQuery* release_query();
  ::flyteidl::core::ArtifactQuery* mutable_query();
  void set_allocated_query(::flyteidl::core::ArtifactQuery* query);

  void clear_identifier();
  IdentifierCase identifier_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.artifact.GetArtifactRequest)
 private:
  class HasBitSetters;
  void set_has_artifact_key();
  void set_has_artifact_id();
  void set_has_uri();
  void set_has_query();

  inline bool has_identifier() const;
  inline void clear_has_identifier();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool details_;
  union IdentifierUnion {
    IdentifierUnion() {}
    ::flyteidl::core::ArtifactKey* artifact_key_;
    ::flyteidl::core::ArtifactID* artifact_id_;
    ::google::protobuf::internal::ArenaStringPtr uri_;
    ::flyteidl::core::ArtifactQuery* query_;
  } identifier_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fartifact_2fartifacts_2eproto;
};
// -------------------------------------------------------------------

class GetArtifactResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.artifact.GetArtifactResponse) */ {
 public:
  GetArtifactResponse();
  virtual ~GetArtifactResponse();

  GetArtifactResponse(const GetArtifactResponse& from);

  inline GetArtifactResponse& operator=(const GetArtifactResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetArtifactResponse(GetArtifactResponse&& from) noexcept
    : GetArtifactResponse() {
    *this = ::std::move(from);
  }

  inline GetArtifactResponse& operator=(GetArtifactResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetArtifactResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetArtifactResponse* internal_default_instance() {
    return reinterpret_cast<const GetArtifactResponse*>(
               &_GetArtifactResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GetArtifactResponse* other);
  friend void swap(GetArtifactResponse& a, GetArtifactResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetArtifactResponse* New() const final {
    return CreateMaybeMessage<GetArtifactResponse>(nullptr);
  }

  GetArtifactResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetArtifactResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetArtifactResponse& from);
  void MergeFrom(const GetArtifactResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetArtifactResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.artifact.Artifact artifact = 1;
  bool has_artifact() const;
  void clear_artifact();
  static const int kArtifactFieldNumber = 1;
  const ::flyteidl::artifact::Artifact& artifact() const;
  ::flyteidl::artifact::Artifact* release_artifact();
  ::flyteidl::artifact::Artifact* mutable_artifact();
  void set_allocated_artifact(::flyteidl::artifact::Artifact* artifact);

  // @@protoc_insertion_point(class_scope:flyteidl.artifact.GetArtifactResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::artifact::Artifact* artifact_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fartifact_2fartifacts_2eproto;
};
// -------------------------------------------------------------------

class Tag final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.artifact.Tag) */ {
 public:
  Tag();
  virtual ~Tag();

  Tag(const Tag& from);

  inline Tag& operator=(const Tag& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Tag(Tag&& from) noexcept
    : Tag() {
    *this = ::std::move(from);
  }

  inline Tag& operator=(Tag&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Tag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tag* internal_default_instance() {
    return reinterpret_cast<const Tag*>(
               &_Tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Tag* other);
  friend void swap(Tag& a, Tag& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tag* New() const final {
    return CreateMaybeMessage<Tag>(nullptr);
  }

  Tag* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Tag>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Tag& from);
  void MergeFrom(const Tag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tag* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:flyteidl.artifact.Tag)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fartifact_2fartifacts_2eproto;
};
// -------------------------------------------------------------------

class AddTagsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.artifact.AddTagsRequest) */ {
 public:
  AddTagsRequest();
  virtual ~AddTagsRequest();

  AddTagsRequest(const AddTagsRequest& from);

  inline AddTagsRequest& operator=(const AddTagsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddTagsRequest(AddTagsRequest&& from) noexcept
    : AddTagsRequest() {
    *this = ::std::move(from);
  }

  inline AddTagsRequest& operator=(AddTagsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AddTagsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddTagsRequest* internal_default_instance() {
    return reinterpret_cast<const AddTagsRequest*>(
               &_AddTagsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(AddTagsRequest* other);
  friend void swap(AddTagsRequest& a, AddTagsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddTagsRequest* New() const final {
    return CreateMaybeMessage<AddTagsRequest>(nullptr);
  }

  AddTagsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddTagsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddTagsRequest& from);
  void MergeFrom(const AddTagsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddTagsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.artifact.Tag tags = 2;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 2;
  ::flyteidl::artifact::Tag* mutable_tags(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::artifact::Tag >*
      mutable_tags();
  const ::flyteidl::artifact::Tag& tags(int index) const;
  ::flyteidl::artifact::Tag* add_tags();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::artifact::Tag >&
      tags() const;

  // .flyteidl.core.ArtifactID artifact_id = 1;
  bool has_artifact_id() const;
  void clear_artifact_id();
  static const int kArtifactIdFieldNumber = 1;
  const ::flyteidl::core::ArtifactID& artifact_id() const;
  ::flyteidl::core::ArtifactID* release_artifact_id();
  ::flyteidl::core::ArtifactID* mutable_artifact_id();
  void set_allocated_artifact_id(::flyteidl::core::ArtifactID* artifact_id);

  // @@protoc_insertion_point(class_scope:flyteidl.artifact.AddTagsRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::artifact::Tag > tags_;
  ::flyteidl::core::ArtifactID* artifact_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fartifact_2fartifacts_2eproto;
};
// -------------------------------------------------------------------

class AddTagsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.artifact.AddTagsResponse) */ {
 public:
  AddTagsResponse();
  virtual ~AddTagsResponse();

  AddTagsResponse(const AddTagsResponse& from);

  inline AddTagsResponse& operator=(const AddTagsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddTagsResponse(AddTagsResponse&& from) noexcept
    : AddTagsResponse() {
    *this = ::std::move(from);
  }

  inline AddTagsResponse& operator=(AddTagsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AddTagsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddTagsResponse* internal_default_instance() {
    return reinterpret_cast<const AddTagsResponse*>(
               &_AddTagsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(AddTagsResponse* other);
  friend void swap(AddTagsResponse& a, AddTagsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddTagsResponse* New() const final {
    return CreateMaybeMessage<AddTagsResponse>(nullptr);
  }

  AddTagsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddTagsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddTagsResponse& from);
  void MergeFrom(const AddTagsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddTagsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.artifact.AddTagsResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fartifact_2fartifacts_2eproto;
};
// -------------------------------------------------------------------

class RemoveTagsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.artifact.RemoveTagsRequest) */ {
 public:
  RemoveTagsRequest();
  virtual ~RemoveTagsRequest();

  RemoveTagsRequest(const RemoveTagsRequest& from);

  inline RemoveTagsRequest& operator=(const RemoveTagsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveTagsRequest(RemoveTagsRequest&& from) noexcept
    : RemoveTagsRequest() {
    *this = ::std::move(from);
  }

  inline RemoveTagsRequest& operator=(RemoveTagsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RemoveTagsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveTagsRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveTagsRequest*>(
               &_RemoveTagsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(RemoveTagsRequest* other);
  friend void swap(RemoveTagsRequest& a, RemoveTagsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveTagsRequest* New() const final {
    return CreateMaybeMessage<RemoveTagsRequest>(nullptr);
  }

  RemoveTagsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveTagsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveTagsRequest& from);
  void MergeFrom(const RemoveTagsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveTagsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.artifact.Tag tags = 2;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 2;
  ::flyteidl::artifact::Tag* mutable_tags(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::artifact::Tag >*
      mutable_tags();
  const ::flyteidl::artifact::Tag& tags(int index) const;
  ::flyteidl::artifact::Tag* add_tags();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::artifact::Tag >&
      tags() const;

  // .flyteidl.core.ArtifactID artifact_id = 1;
  bool has_artifact_id() const;
  void clear_artifact_id();
  static const int kArtifactIdFieldNumber = 1;
  const ::flyteidl::core::ArtifactID& artifact_id() const;
  ::flyteidl::core::ArtifactID* release_artifact_id();
  ::flyteidl::core::ArtifactID* mutable_artifact_id();
  void set_allocated_artifact_id(::flyteidl::core::ArtifactID* artifact_id);

  // @@protoc_insertion_point(class_scope:flyteidl.artifact.RemoveTagsRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::artifact::Tag > tags_;
  ::flyteidl::core::ArtifactID* artifact_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fartifact_2fartifacts_2eproto;
};
// -------------------------------------------------------------------

class RemoveTagsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.artifact.RemoveTagsResponse) */ {
 public:
  RemoveTagsResponse();
  virtual ~RemoveTagsResponse();

  RemoveTagsResponse(const RemoveTagsResponse& from);

  inline RemoveTagsResponse& operator=(const RemoveTagsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveTagsResponse(RemoveTagsResponse&& from) noexcept
    : RemoveTagsResponse() {
    *this = ::std::move(from);
  }

  inline RemoveTagsResponse& operator=(RemoveTagsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RemoveTagsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveTagsResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveTagsResponse*>(
               &_RemoveTagsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(RemoveTagsResponse* other);
  friend void swap(RemoveTagsResponse& a, RemoveTagsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveTagsResponse* New() const final {
    return CreateMaybeMessage<RemoveTagsResponse>(nullptr);
  }

  RemoveTagsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveTagsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveTagsResponse& from);
  void MergeFrom(const RemoveTagsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveTagsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.artifact.RemoveTagsResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fartifact_2fartifacts_2eproto;
};
// -------------------------------------------------------------------

class ListArtifactNamesRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.artifact.ListArtifactNamesRequest) */ {
 public:
  ListArtifactNamesRequest();
  virtual ~ListArtifactNamesRequest();

  ListArtifactNamesRequest(const ListArtifactNamesRequest& from);

  inline ListArtifactNamesRequest& operator=(const ListArtifactNamesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListArtifactNamesRequest(ListArtifactNamesRequest&& from) noexcept
    : ListArtifactNamesRequest() {
    *this = ::std::move(from);
  }

  inline ListArtifactNamesRequest& operator=(ListArtifactNamesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListArtifactNamesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListArtifactNamesRequest* internal_default_instance() {
    return reinterpret_cast<const ListArtifactNamesRequest*>(
               &_ListArtifactNamesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ListArtifactNamesRequest* other);
  friend void swap(ListArtifactNamesRequest& a, ListArtifactNamesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListArtifactNamesRequest* New() const final {
    return CreateMaybeMessage<ListArtifactNamesRequest>(nullptr);
  }

  ListArtifactNamesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListArtifactNamesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListArtifactNamesRequest& from);
  void MergeFrom(const ListArtifactNamesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListArtifactNamesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project = 1;
  void clear_project();
  static const int kProjectFieldNumber = 1;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  #if LANG_CXX11
  void set_project(::std::string&& value);
  #endif
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);

  // string domain = 2;
  void clear_domain();
  static const int kDomainFieldNumber = 2;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // @@protoc_insertion_point(class_scope:flyteidl.artifact.ListArtifactNamesRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fartifact_2fartifacts_2eproto;
};
// -------------------------------------------------------------------

class ListArtifactNamesResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.artifact.ListArtifactNamesResponse) */ {
 public:
  ListArtifactNamesResponse();
  virtual ~ListArtifactNamesResponse();

  ListArtifactNamesResponse(const ListArtifactNamesResponse& from);

  inline ListArtifactNamesResponse& operator=(const ListArtifactNamesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListArtifactNamesResponse(ListArtifactNamesResponse&& from) noexcept
    : ListArtifactNamesResponse() {
    *this = ::std::move(from);
  }

  inline ListArtifactNamesResponse& operator=(ListArtifactNamesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListArtifactNamesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListArtifactNamesResponse* internal_default_instance() {
    return reinterpret_cast<const ListArtifactNamesResponse*>(
               &_ListArtifactNamesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(ListArtifactNamesResponse* other);
  friend void swap(ListArtifactNamesResponse& a, ListArtifactNamesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListArtifactNamesResponse* New() const final {
    return CreateMaybeMessage<ListArtifactNamesResponse>(nullptr);
  }

  ListArtifactNamesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListArtifactNamesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListArtifactNamesResponse& from);
  void MergeFrom(const ListArtifactNamesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListArtifactNamesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.core.ArtifactKey artifact_keys = 1;
  int artifact_keys_size() const;
  void clear_artifact_keys();
  static const int kArtifactKeysFieldNumber = 1;
  ::flyteidl::core::ArtifactKey* mutable_artifact_keys(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactKey >*
      mutable_artifact_keys();
  const ::flyteidl::core::ArtifactKey& artifact_keys(int index) const;
  ::flyteidl::core::ArtifactKey* add_artifact_keys();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactKey >&
      artifact_keys() const;

  // @@protoc_insertion_point(class_scope:flyteidl.artifact.ListArtifactNamesResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactKey > artifact_keys_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fartifact_2fartifacts_2eproto;
};
// -------------------------------------------------------------------

class ListArtifactsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.artifact.ListArtifactsRequest) */ {
 public:
  ListArtifactsRequest();
  virtual ~ListArtifactsRequest();

  ListArtifactsRequest(const ListArtifactsRequest& from);

  inline ListArtifactsRequest& operator=(const ListArtifactsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListArtifactsRequest(ListArtifactsRequest&& from) noexcept
    : ListArtifactsRequest() {
    *this = ::std::move(from);
  }

  inline ListArtifactsRequest& operator=(ListArtifactsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListArtifactsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListArtifactsRequest* internal_default_instance() {
    return reinterpret_cast<const ListArtifactsRequest*>(
               &_ListArtifactsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(ListArtifactsRequest* other);
  friend void swap(ListArtifactsRequest& a, ListArtifactsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListArtifactsRequest* New() const final {
    return CreateMaybeMessage<ListArtifactsRequest>(nullptr);
  }

  ListArtifactsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListArtifactsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListArtifactsRequest& from);
  void MergeFrom(const ListArtifactsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListArtifactsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  bool has_artifact_key() const;
  void clear_artifact_key();
  static const int kArtifactKeyFieldNumber = 1;
  const ::flyteidl::core::ArtifactKey& artifact_key() const;
  ::flyteidl::core::ArtifactKey* release_artifact_key();
  ::flyteidl::core::ArtifactKey* mutable_artifact_key();
  void set_allocated_artifact_key(::flyteidl::core::ArtifactKey* artifact_key);

  // @@protoc_insertion_point(class_scope:flyteidl.artifact.ListArtifactsRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::ArtifactKey* artifact_key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fartifact_2fartifacts_2eproto;
};
// -------------------------------------------------------------------

class ListArtifactsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.artifact.ListArtifactsResponse) */ {
 public:
  ListArtifactsResponse();
  virtual ~ListArtifactsResponse();

  ListArtifactsResponse(const ListArtifactsResponse& from);

  inline ListArtifactsResponse& operator=(const ListArtifactsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListArtifactsResponse(ListArtifactsResponse&& from) noexcept
    : ListArtifactsResponse() {
    *this = ::std::move(from);
  }

  inline ListArtifactsResponse& operator=(ListArtifactsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListArtifactsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListArtifactsResponse* internal_default_instance() {
    return reinterpret_cast<const ListArtifactsResponse*>(
               &_ListArtifactsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(ListArtifactsResponse* other);
  friend void swap(ListArtifactsResponse& a, ListArtifactsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListArtifactsResponse* New() const final {
    return CreateMaybeMessage<ListArtifactsResponse>(nullptr);
  }

  ListArtifactsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListArtifactsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListArtifactsResponse& from);
  void MergeFrom(const ListArtifactsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListArtifactsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.artifact.Artifact artifacts = 1;
  int artifacts_size() const;
  void clear_artifacts();
  static const int kArtifactsFieldNumber = 1;
  ::flyteidl::artifact::Artifact* mutable_artifacts(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::artifact::Artifact >*
      mutable_artifacts();
  const ::flyteidl::artifact::Artifact& artifacts(int index) const;
  ::flyteidl::artifact::Artifact* add_artifacts();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::artifact::Artifact >&
      artifacts() const;

  // @@protoc_insertion_point(class_scope:flyteidl.artifact.ListArtifactsResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::artifact::Artifact > artifacts_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fartifact_2fartifacts_2eproto;
};
// -------------------------------------------------------------------

class CreateAliasRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.artifact.CreateAliasRequest) */ {
 public:
  CreateAliasRequest();
  virtual ~CreateAliasRequest();

  CreateAliasRequest(const CreateAliasRequest& from);

  inline CreateAliasRequest& operator=(const CreateAliasRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateAliasRequest(CreateAliasRequest&& from) noexcept
    : CreateAliasRequest() {
    *this = ::std::move(from);
  }

  inline CreateAliasRequest& operator=(CreateAliasRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateAliasRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateAliasRequest* internal_default_instance() {
    return reinterpret_cast<const CreateAliasRequest*>(
               &_CreateAliasRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(CreateAliasRequest* other);
  friend void swap(CreateAliasRequest& a, CreateAliasRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateAliasRequest* New() const final {
    return CreateMaybeMessage<CreateAliasRequest>(nullptr);
  }

  CreateAliasRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateAliasRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateAliasRequest& from);
  void MergeFrom(const CreateAliasRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAliasRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  bool has_artifact_key() const;
  void clear_artifact_key();
  static const int kArtifactKeyFieldNumber = 1;
  const ::flyteidl::core::ArtifactKey& artifact_key() const;
  ::flyteidl::core::ArtifactKey* release_artifact_key();
  ::flyteidl::core::ArtifactKey* mutable_artifact_key();
  void set_allocated_artifact_key(::flyteidl::core::ArtifactKey* artifact_key);

  // .flyteidl.core.ArtifactAlias alias = 2;
  bool has_alias() const;
  void clear_alias();
  static const int kAliasFieldNumber = 2;
  const ::flyteidl::core::ArtifactAlias& alias() const;
  ::flyteidl::core::ArtifactAlias* release_alias();
  ::flyteidl::core::ArtifactAlias* mutable_alias();
  void set_allocated_alias(::flyteidl::core::ArtifactAlias* alias);

  // bool overwrite = 3;
  void clear_overwrite();
  static const int kOverwriteFieldNumber = 3;
  bool overwrite() const;
  void set_overwrite(bool value);

  // @@protoc_insertion_point(class_scope:flyteidl.artifact.CreateAliasRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::ArtifactKey* artifact_key_;
  ::flyteidl::core::ArtifactAlias* alias_;
  bool overwrite_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fartifact_2fartifacts_2eproto;
};
// -------------------------------------------------------------------

class CreateAliasResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.artifact.CreateAliasResponse) */ {
 public:
  CreateAliasResponse();
  virtual ~CreateAliasResponse();

  CreateAliasResponse(const CreateAliasResponse& from);

  inline CreateAliasResponse& operator=(const CreateAliasResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateAliasResponse(CreateAliasResponse&& from) noexcept
    : CreateAliasResponse() {
    *this = ::std::move(from);
  }

  inline CreateAliasResponse& operator=(CreateAliasResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateAliasResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateAliasResponse* internal_default_instance() {
    return reinterpret_cast<const CreateAliasResponse*>(
               &_CreateAliasResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(CreateAliasResponse* other);
  friend void swap(CreateAliasResponse& a, CreateAliasResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateAliasResponse* New() const final {
    return CreateMaybeMessage<CreateAliasResponse>(nullptr);
  }

  CreateAliasResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateAliasResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateAliasResponse& from);
  void MergeFrom(const CreateAliasResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAliasResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.artifact.CreateAliasResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fartifact_2fartifacts_2eproto;
};
// -------------------------------------------------------------------

class RemoveAliasRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.artifact.RemoveAliasRequest) */ {
 public:
  RemoveAliasRequest();
  virtual ~RemoveAliasRequest();

  RemoveAliasRequest(const RemoveAliasRequest& from);

  inline RemoveAliasRequest& operator=(const RemoveAliasRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveAliasRequest(RemoveAliasRequest&& from) noexcept
    : RemoveAliasRequest() {
    *this = ::std::move(from);
  }

  inline RemoveAliasRequest& operator=(RemoveAliasRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RemoveAliasRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveAliasRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveAliasRequest*>(
               &_RemoveAliasRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(RemoveAliasRequest* other);
  friend void swap(RemoveAliasRequest& a, RemoveAliasRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveAliasRequest* New() const final {
    return CreateMaybeMessage<RemoveAliasRequest>(nullptr);
  }

  RemoveAliasRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveAliasRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveAliasRequest& from);
  void MergeFrom(const RemoveAliasRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveAliasRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  bool has_artifact_key() const;
  void clear_artifact_key();
  static const int kArtifactKeyFieldNumber = 1;
  const ::flyteidl::core::ArtifactKey& artifact_key() const;
  ::flyteidl::core::ArtifactKey* release_artifact_key();
  ::flyteidl::core::ArtifactKey* mutable_artifact_key();
  void set_allocated_artifact_key(::flyteidl::core::ArtifactKey* artifact_key);

  // .flyteidl.core.ArtifactAlias alias = 2;
  bool has_alias() const;
  void clear_alias();
  static const int kAliasFieldNumber = 2;
  const ::flyteidl::core::ArtifactAlias& alias() const;
  ::flyteidl::core::ArtifactAlias* release_alias();
  ::flyteidl::core::ArtifactAlias* mutable_alias();
  void set_allocated_alias(::flyteidl::core::ArtifactAlias* alias);

  // @@protoc_insertion_point(class_scope:flyteidl.artifact.RemoveAliasRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::ArtifactKey* artifact_key_;
  ::flyteidl::core::ArtifactAlias* alias_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fartifact_2fartifacts_2eproto;
};
// -------------------------------------------------------------------

class RemoveAliasResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.artifact.RemoveAliasResponse) */ {
 public:
  RemoveAliasResponse();
  virtual ~RemoveAliasResponse();

  RemoveAliasResponse(const RemoveAliasResponse& from);

  inline RemoveAliasResponse& operator=(const RemoveAliasResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveAliasResponse(RemoveAliasResponse&& from) noexcept
    : RemoveAliasResponse() {
    *this = ::std::move(from);
  }

  inline RemoveAliasResponse& operator=(RemoveAliasResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RemoveAliasResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveAliasResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveAliasResponse*>(
               &_RemoveAliasResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(RemoveAliasResponse* other);
  friend void swap(RemoveAliasResponse& a, RemoveAliasResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveAliasResponse* New() const final {
    return CreateMaybeMessage<RemoveAliasResponse>(nullptr);
  }

  RemoveAliasResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveAliasResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveAliasResponse& from);
  void MergeFrom(const RemoveAliasResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveAliasResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.artifact.RemoveAliasResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fartifact_2fartifacts_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Artifact

// .flyteidl.core.ArtifactID artifact_id = 1;
inline bool Artifact::has_artifact_id() const {
  return this != internal_default_instance() && artifact_id_ != nullptr;
}
inline const ::flyteidl::core::ArtifactID& Artifact::artifact_id() const {
  const ::flyteidl::core::ArtifactID* p = artifact_id_;
  // @@protoc_insertion_point(field_get:flyteidl.artifact.Artifact.artifact_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::ArtifactID*>(
      &::flyteidl::core::_ArtifactID_default_instance_);
}
inline ::flyteidl::core::ArtifactID* Artifact::release_artifact_id() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.Artifact.artifact_id)
  
  ::flyteidl::core::ArtifactID* temp = artifact_id_;
  artifact_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::ArtifactID* Artifact::mutable_artifact_id() {
  
  if (artifact_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::ArtifactID>(GetArenaNoVirtual());
    artifact_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.Artifact.artifact_id)
  return artifact_id_;
}
inline void Artifact::set_allocated_artifact_id(::flyteidl::core::ArtifactID* artifact_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(artifact_id_);
  }
  if (artifact_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      artifact_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, artifact_id, submessage_arena);
    }
    
  } else {
    
  }
  artifact_id_ = artifact_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.Artifact.artifact_id)
}

// string uri = 2;
inline void Artifact::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Artifact::uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.artifact.Artifact.uri)
  return uri_.GetNoArena();
}
inline void Artifact::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.artifact.Artifact.uri)
}
#if LANG_CXX11
inline void Artifact::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.artifact.Artifact.uri)
}
#endif
inline void Artifact::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.artifact.Artifact.uri)
}
inline void Artifact::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.artifact.Artifact.uri)
}
inline ::std::string* Artifact::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.Artifact.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Artifact::release_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.Artifact.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Artifact::set_allocated_uri(::std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.Artifact.uri)
}

// .flyteidl.artifact.ArtifactSpec spec = 3;
inline bool Artifact::has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline void Artifact::clear_spec() {
  if (GetArenaNoVirtual() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::flyteidl::artifact::ArtifactSpec& Artifact::spec() const {
  const ::flyteidl::artifact::ArtifactSpec* p = spec_;
  // @@protoc_insertion_point(field_get:flyteidl.artifact.Artifact.spec)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::artifact::ArtifactSpec*>(
      &::flyteidl::artifact::_ArtifactSpec_default_instance_);
}
inline ::flyteidl::artifact::ArtifactSpec* Artifact::release_spec() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.Artifact.spec)
  
  ::flyteidl::artifact::ArtifactSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::flyteidl::artifact::ArtifactSpec* Artifact::mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::artifact::ArtifactSpec>(GetArenaNoVirtual());
    spec_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.Artifact.spec)
  return spec_;
}
inline void Artifact::set_allocated_spec(::flyteidl::artifact::ArtifactSpec* spec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      spec = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.Artifact.spec)
}

// -------------------------------------------------------------------

// CreateArtifactRequest

// .flyteidl.core.ArtifactKey artifact_key = 1;
inline bool CreateArtifactRequest::has_artifact_key() const {
  return this != internal_default_instance() && artifact_key_ != nullptr;
}
inline const ::flyteidl::core::ArtifactKey& CreateArtifactRequest::artifact_key() const {
  const ::flyteidl::core::ArtifactKey* p = artifact_key_;
  // @@protoc_insertion_point(field_get:flyteidl.artifact.CreateArtifactRequest.artifact_key)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::ArtifactKey*>(
      &::flyteidl::core::_ArtifactKey_default_instance_);
}
inline ::flyteidl::core::ArtifactKey* CreateArtifactRequest::release_artifact_key() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.CreateArtifactRequest.artifact_key)
  
  ::flyteidl::core::ArtifactKey* temp = artifact_key_;
  artifact_key_ = nullptr;
  return temp;
}
inline ::flyteidl::core::ArtifactKey* CreateArtifactRequest::mutable_artifact_key() {
  
  if (artifact_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::ArtifactKey>(GetArenaNoVirtual());
    artifact_key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.CreateArtifactRequest.artifact_key)
  return artifact_key_;
}
inline void CreateArtifactRequest::set_allocated_artifact_key(::flyteidl::core::ArtifactKey* artifact_key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(artifact_key_);
  }
  if (artifact_key) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      artifact_key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, artifact_key, submessage_arena);
    }
    
  } else {
    
  }
  artifact_key_ = artifact_key;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.CreateArtifactRequest.artifact_key)
}

// .flyteidl.artifact.ArtifactSpec spec = 2;
inline bool CreateArtifactRequest::has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline void CreateArtifactRequest::clear_spec() {
  if (GetArenaNoVirtual() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::flyteidl::artifact::ArtifactSpec& CreateArtifactRequest::spec() const {
  const ::flyteidl::artifact::ArtifactSpec* p = spec_;
  // @@protoc_insertion_point(field_get:flyteidl.artifact.CreateArtifactRequest.spec)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::artifact::ArtifactSpec*>(
      &::flyteidl::artifact::_ArtifactSpec_default_instance_);
}
inline ::flyteidl::artifact::ArtifactSpec* CreateArtifactRequest::release_spec() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.CreateArtifactRequest.spec)
  
  ::flyteidl::artifact::ArtifactSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::flyteidl::artifact::ArtifactSpec* CreateArtifactRequest::mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::artifact::ArtifactSpec>(GetArenaNoVirtual());
    spec_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.CreateArtifactRequest.spec)
  return spec_;
}
inline void CreateArtifactRequest::set_allocated_spec(::flyteidl::artifact::ArtifactSpec* spec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      spec = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.CreateArtifactRequest.spec)
}

// -------------------------------------------------------------------

// ArtifactSpec

// .flyteidl.core.Literal value = 1;
inline bool ArtifactSpec::has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline const ::flyteidl::core::Literal& ArtifactSpec::value() const {
  const ::flyteidl::core::Literal* p = value_;
  // @@protoc_insertion_point(field_get:flyteidl.artifact.ArtifactSpec.value)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Literal*>(
      &::flyteidl::core::_Literal_default_instance_);
}
inline ::flyteidl::core::Literal* ArtifactSpec::release_value() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.ArtifactSpec.value)
  
  ::flyteidl::core::Literal* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Literal* ArtifactSpec::mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Literal>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.ArtifactSpec.value)
  return value_;
}
inline void ArtifactSpec::set_allocated_value(::flyteidl::core::Literal* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_);
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.ArtifactSpec.value)
}

// .flyteidl.core.LiteralType type = 2;
inline bool ArtifactSpec::has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline const ::flyteidl::core::LiteralType& ArtifactSpec::type() const {
  const ::flyteidl::core::LiteralType* p = type_;
  // @@protoc_insertion_point(field_get:flyteidl.artifact.ArtifactSpec.type)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::LiteralType*>(
      &::flyteidl::core::_LiteralType_default_instance_);
}
inline ::flyteidl::core::LiteralType* ArtifactSpec::release_type() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.ArtifactSpec.type)
  
  ::flyteidl::core::LiteralType* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::flyteidl::core::LiteralType* ArtifactSpec::mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::LiteralType>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.ArtifactSpec.type)
  return type_;
}
inline void ArtifactSpec::set_allocated_type(::flyteidl::core::LiteralType* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_);
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.ArtifactSpec.type)
}

// repeated .flyteidl.artifact.Tag tags = 3;
inline int ArtifactSpec::tags_size() const {
  return tags_.size();
}
inline void ArtifactSpec::clear_tags() {
  tags_.Clear();
}
inline ::flyteidl::artifact::Tag* ArtifactSpec::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.ArtifactSpec.tags)
  return tags_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::artifact::Tag >*
ArtifactSpec::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.artifact.ArtifactSpec.tags)
  return &tags_;
}
inline const ::flyteidl::artifact::Tag& ArtifactSpec::tags(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.artifact.ArtifactSpec.tags)
  return tags_.Get(index);
}
inline ::flyteidl::artifact::Tag* ArtifactSpec::add_tags() {
  // @@protoc_insertion_point(field_add:flyteidl.artifact.ArtifactSpec.tags)
  return tags_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::artifact::Tag >&
ArtifactSpec::tags() const {
  // @@protoc_insertion_point(field_list:flyteidl.artifact.ArtifactSpec.tags)
  return tags_;
}

// repeated .flyteidl.core.ArtifactAlias aliases = 4;
inline int ArtifactSpec::aliases_size() const {
  return aliases_.size();
}
inline ::flyteidl::core::ArtifactAlias* ArtifactSpec::mutable_aliases(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.ArtifactSpec.aliases)
  return aliases_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactAlias >*
ArtifactSpec::mutable_aliases() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.artifact.ArtifactSpec.aliases)
  return &aliases_;
}
inline const ::flyteidl::core::ArtifactAlias& ArtifactSpec::aliases(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.artifact.ArtifactSpec.aliases)
  return aliases_.Get(index);
}
inline ::flyteidl::core::ArtifactAlias* ArtifactSpec::add_aliases() {
  // @@protoc_insertion_point(field_add:flyteidl.artifact.ArtifactSpec.aliases)
  return aliases_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactAlias >&
ArtifactSpec::aliases() const {
  // @@protoc_insertion_point(field_list:flyteidl.artifact.ArtifactSpec.aliases)
  return aliases_;
}

// .flyteidl.core.TaskExecutionIdentifier task_execution = 5;
inline bool ArtifactSpec::has_task_execution() const {
  return source_case() == kTaskExecution;
}
inline void ArtifactSpec::set_has_task_execution() {
  _oneof_case_[0] = kTaskExecution;
}
inline ::flyteidl::core::TaskExecutionIdentifier* ArtifactSpec::release_task_execution() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.ArtifactSpec.task_execution)
  if (has_task_execution()) {
    clear_has_source();
      ::flyteidl::core::TaskExecutionIdentifier* temp = source_.task_execution_;
    source_.task_execution_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::TaskExecutionIdentifier& ArtifactSpec::task_execution() const {
  // @@protoc_insertion_point(field_get:flyteidl.artifact.ArtifactSpec.task_execution)
  return has_task_execution()
      ? *source_.task_execution_
      : *reinterpret_cast< ::flyteidl::core::TaskExecutionIdentifier*>(&::flyteidl::core::_TaskExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::TaskExecutionIdentifier* ArtifactSpec::mutable_task_execution() {
  if (!has_task_execution()) {
    clear_source();
    set_has_task_execution();
    source_.task_execution_ = CreateMaybeMessage< ::flyteidl::core::TaskExecutionIdentifier >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.ArtifactSpec.task_execution)
  return source_.task_execution_;
}

// .flyteidl.core.WorkflowExecutionIdentifier execution = 6;
inline bool ArtifactSpec::has_execution() const {
  return source_case() == kExecution;
}
inline void ArtifactSpec::set_has_execution() {
  _oneof_case_[0] = kExecution;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* ArtifactSpec::release_execution() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.ArtifactSpec.execution)
  if (has_execution()) {
    clear_has_source();
      ::flyteidl::core::WorkflowExecutionIdentifier* temp = source_.execution_;
    source_.execution_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::WorkflowExecutionIdentifier& ArtifactSpec::execution() const {
  // @@protoc_insertion_point(field_get:flyteidl.artifact.ArtifactSpec.execution)
  return has_execution()
      ? *source_.execution_
      : *reinterpret_cast< ::flyteidl::core::WorkflowExecutionIdentifier*>(&::flyteidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* ArtifactSpec::mutable_execution() {
  if (!has_execution()) {
    clear_source();
    set_has_execution();
    source_.execution_ = CreateMaybeMessage< ::flyteidl::core::WorkflowExecutionIdentifier >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.ArtifactSpec.execution)
  return source_.execution_;
}

// string principal = 7;
inline bool ArtifactSpec::has_principal() const {
  return source_case() == kPrincipal;
}
inline void ArtifactSpec::set_has_principal() {
  _oneof_case_[0] = kPrincipal;
}
inline void ArtifactSpec::clear_principal() {
  if (has_principal()) {
    source_.principal_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_source();
  }
}
inline const ::std::string& ArtifactSpec::principal() const {
  // @@protoc_insertion_point(field_get:flyteidl.artifact.ArtifactSpec.principal)
  if (has_principal()) {
    return source_.principal_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ArtifactSpec::set_principal(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.artifact.ArtifactSpec.principal)
  if (!has_principal()) {
    clear_source();
    set_has_principal();
    source_.principal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_.principal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.artifact.ArtifactSpec.principal)
}
#if LANG_CXX11
inline void ArtifactSpec::set_principal(::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.artifact.ArtifactSpec.principal)
  if (!has_principal()) {
    clear_source();
    set_has_principal();
    source_.principal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_.principal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.artifact.ArtifactSpec.principal)
}
#endif
inline void ArtifactSpec::set_principal(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_principal()) {
    clear_source();
    set_has_principal();
    source_.principal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_.principal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.artifact.ArtifactSpec.principal)
}
inline void ArtifactSpec::set_principal(const char* value, size_t size) {
  if (!has_principal()) {
    clear_source();
    set_has_principal();
    source_.principal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  source_.principal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.artifact.ArtifactSpec.principal)
}
inline ::std::string* ArtifactSpec::mutable_principal() {
  if (!has_principal()) {
    clear_source();
    set_has_principal();
    source_.principal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.ArtifactSpec.principal)
  return source_.principal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArtifactSpec::release_principal() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.ArtifactSpec.principal)
  if (has_principal()) {
    clear_has_source();
    return source_.principal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void ArtifactSpec::set_allocated_principal(::std::string* principal) {
  if (has_source()) {
    clear_source();
  }
  if (principal != nullptr) {
    set_has_principal();
    source_.principal_.UnsafeSetDefault(principal);
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.ArtifactSpec.principal)
}

// string short_description = 8;
inline void ArtifactSpec::clear_short_description() {
  short_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ArtifactSpec::short_description() const {
  // @@protoc_insertion_point(field_get:flyteidl.artifact.ArtifactSpec.short_description)
  return short_description_.GetNoArena();
}
inline void ArtifactSpec::set_short_description(const ::std::string& value) {
  
  short_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.artifact.ArtifactSpec.short_description)
}
#if LANG_CXX11
inline void ArtifactSpec::set_short_description(::std::string&& value) {
  
  short_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.artifact.ArtifactSpec.short_description)
}
#endif
inline void ArtifactSpec::set_short_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  short_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.artifact.ArtifactSpec.short_description)
}
inline void ArtifactSpec::set_short_description(const char* value, size_t size) {
  
  short_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.artifact.ArtifactSpec.short_description)
}
inline ::std::string* ArtifactSpec::mutable_short_description() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.ArtifactSpec.short_description)
  return short_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArtifactSpec::release_short_description() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.ArtifactSpec.short_description)
  
  return short_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArtifactSpec::set_allocated_short_description(::std::string* short_description) {
  if (short_description != nullptr) {
    
  } else {
    
  }
  short_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), short_description);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.ArtifactSpec.short_description)
}

// string long_description = 9;
inline void ArtifactSpec::clear_long_description() {
  long_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ArtifactSpec::long_description() const {
  // @@protoc_insertion_point(field_get:flyteidl.artifact.ArtifactSpec.long_description)
  return long_description_.GetNoArena();
}
inline void ArtifactSpec::set_long_description(const ::std::string& value) {
  
  long_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.artifact.ArtifactSpec.long_description)
}
#if LANG_CXX11
inline void ArtifactSpec::set_long_description(::std::string&& value) {
  
  long_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.artifact.ArtifactSpec.long_description)
}
#endif
inline void ArtifactSpec::set_long_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  long_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.artifact.ArtifactSpec.long_description)
}
inline void ArtifactSpec::set_long_description(const char* value, size_t size) {
  
  long_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.artifact.ArtifactSpec.long_description)
}
inline ::std::string* ArtifactSpec::mutable_long_description() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.ArtifactSpec.long_description)
  return long_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArtifactSpec::release_long_description() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.ArtifactSpec.long_description)
  
  return long_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArtifactSpec::set_allocated_long_description(::std::string* long_description) {
  if (long_description != nullptr) {
    
  } else {
    
  }
  long_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), long_description);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.ArtifactSpec.long_description)
}

inline bool ArtifactSpec::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void ArtifactSpec::clear_has_source() {
  _oneof_case_[0] = SOURCE_NOT_SET;
}
inline ArtifactSpec::SourceCase ArtifactSpec::source_case() const {
  return ArtifactSpec::SourceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CreateArtifactResponse

// .flyteidl.artifact.Artifact artifact = 1;
inline bool CreateArtifactResponse::has_artifact() const {
  return this != internal_default_instance() && artifact_ != nullptr;
}
inline void CreateArtifactResponse::clear_artifact() {
  if (GetArenaNoVirtual() == nullptr && artifact_ != nullptr) {
    delete artifact_;
  }
  artifact_ = nullptr;
}
inline const ::flyteidl::artifact::Artifact& CreateArtifactResponse::artifact() const {
  const ::flyteidl::artifact::Artifact* p = artifact_;
  // @@protoc_insertion_point(field_get:flyteidl.artifact.CreateArtifactResponse.artifact)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::artifact::Artifact*>(
      &::flyteidl::artifact::_Artifact_default_instance_);
}
inline ::flyteidl::artifact::Artifact* CreateArtifactResponse::release_artifact() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.CreateArtifactResponse.artifact)
  
  ::flyteidl::artifact::Artifact* temp = artifact_;
  artifact_ = nullptr;
  return temp;
}
inline ::flyteidl::artifact::Artifact* CreateArtifactResponse::mutable_artifact() {
  
  if (artifact_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::artifact::Artifact>(GetArenaNoVirtual());
    artifact_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.CreateArtifactResponse.artifact)
  return artifact_;
}
inline void CreateArtifactResponse::set_allocated_artifact(::flyteidl::artifact::Artifact* artifact) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete artifact_;
  }
  if (artifact) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      artifact = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, artifact, submessage_arena);
    }
    
  } else {
    
  }
  artifact_ = artifact;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.CreateArtifactResponse.artifact)
}

// -------------------------------------------------------------------

// GetArtifactRequest

// .flyteidl.core.ArtifactKey artifact_key = 1;
inline bool GetArtifactRequest::has_artifact_key() const {
  return identifier_case() == kArtifactKey;
}
inline void GetArtifactRequest::set_has_artifact_key() {
  _oneof_case_[0] = kArtifactKey;
}
inline ::flyteidl::core::ArtifactKey* GetArtifactRequest::release_artifact_key() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.GetArtifactRequest.artifact_key)
  if (has_artifact_key()) {
    clear_has_identifier();
      ::flyteidl::core::ArtifactKey* temp = identifier_.artifact_key_;
    identifier_.artifact_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::ArtifactKey& GetArtifactRequest::artifact_key() const {
  // @@protoc_insertion_point(field_get:flyteidl.artifact.GetArtifactRequest.artifact_key)
  return has_artifact_key()
      ? *identifier_.artifact_key_
      : *reinterpret_cast< ::flyteidl::core::ArtifactKey*>(&::flyteidl::core::_ArtifactKey_default_instance_);
}
inline ::flyteidl::core::ArtifactKey* GetArtifactRequest::mutable_artifact_key() {
  if (!has_artifact_key()) {
    clear_identifier();
    set_has_artifact_key();
    identifier_.artifact_key_ = CreateMaybeMessage< ::flyteidl::core::ArtifactKey >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.GetArtifactRequest.artifact_key)
  return identifier_.artifact_key_;
}

// .flyteidl.core.ArtifactID artifact_id = 2;
inline bool GetArtifactRequest::has_artifact_id() const {
  return identifier_case() == kArtifactId;
}
inline void GetArtifactRequest::set_has_artifact_id() {
  _oneof_case_[0] = kArtifactId;
}
inline ::flyteidl::core::ArtifactID* GetArtifactRequest::release_artifact_id() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.GetArtifactRequest.artifact_id)
  if (has_artifact_id()) {
    clear_has_identifier();
      ::flyteidl::core::ArtifactID* temp = identifier_.artifact_id_;
    identifier_.artifact_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::ArtifactID& GetArtifactRequest::artifact_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.artifact.GetArtifactRequest.artifact_id)
  return has_artifact_id()
      ? *identifier_.artifact_id_
      : *reinterpret_cast< ::flyteidl::core::ArtifactID*>(&::flyteidl::core::_ArtifactID_default_instance_);
}
inline ::flyteidl::core::ArtifactID* GetArtifactRequest::mutable_artifact_id() {
  if (!has_artifact_id()) {
    clear_identifier();
    set_has_artifact_id();
    identifier_.artifact_id_ = CreateMaybeMessage< ::flyteidl::core::ArtifactID >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.GetArtifactRequest.artifact_id)
  return identifier_.artifact_id_;
}

// string uri = 3;
inline bool GetArtifactRequest::has_uri() const {
  return identifier_case() == kUri;
}
inline void GetArtifactRequest::set_has_uri() {
  _oneof_case_[0] = kUri;
}
inline void GetArtifactRequest::clear_uri() {
  if (has_uri()) {
    identifier_.uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_identifier();
  }
}
inline const ::std::string& GetArtifactRequest::uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.artifact.GetArtifactRequest.uri)
  if (has_uri()) {
    return identifier_.uri_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void GetArtifactRequest::set_uri(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.artifact.GetArtifactRequest.uri)
  if (!has_uri()) {
    clear_identifier();
    set_has_uri();
    identifier_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  identifier_.uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.artifact.GetArtifactRequest.uri)
}
#if LANG_CXX11
inline void GetArtifactRequest::set_uri(::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.artifact.GetArtifactRequest.uri)
  if (!has_uri()) {
    clear_identifier();
    set_has_uri();
    identifier_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  identifier_.uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.artifact.GetArtifactRequest.uri)
}
#endif
inline void GetArtifactRequest::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_uri()) {
    clear_identifier();
    set_has_uri();
    identifier_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  identifier_.uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.artifact.GetArtifactRequest.uri)
}
inline void GetArtifactRequest::set_uri(const char* value, size_t size) {
  if (!has_uri()) {
    clear_identifier();
    set_has_uri();
    identifier_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  identifier_.uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.artifact.GetArtifactRequest.uri)
}
inline ::std::string* GetArtifactRequest::mutable_uri() {
  if (!has_uri()) {
    clear_identifier();
    set_has_uri();
    identifier_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.GetArtifactRequest.uri)
  return identifier_.uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetArtifactRequest::release_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.GetArtifactRequest.uri)
  if (has_uri()) {
    clear_has_identifier();
    return identifier_.uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void GetArtifactRequest::set_allocated_uri(::std::string* uri) {
  if (has_identifier()) {
    clear_identifier();
  }
  if (uri != nullptr) {
    set_has_uri();
    identifier_.uri_.UnsafeSetDefault(uri);
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.GetArtifactRequest.uri)
}

// .flyteidl.core.ArtifactQuery query = 4;
inline bool GetArtifactRequest::has_query() const {
  return identifier_case() == kQuery;
}
inline void GetArtifactRequest::set_has_query() {
  _oneof_case_[0] = kQuery;
}
inline ::flyteidl::core::ArtifactQuery* GetArtifactRequest::release_query() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.GetArtifactRequest.query)
  if (has_query()) {
    clear_has_identifier();
      ::flyteidl::core::ArtifactQuery* temp = identifier_.query_;
    identifier_.query_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::ArtifactQuery& GetArtifactRequest::query() const {
  // @@protoc_insertion_point(field_get:flyteidl.artifact.GetArtifactRequest.query)
  return has_query()
      ? *identifier_.query_
      : *reinterpret_cast< ::flyteidl::core::ArtifactQuery*>(&::flyteidl::core::_ArtifactQuery_default_instance_);
}
inline ::flyteidl::core::ArtifactQuery* GetArtifactRequest::mutable_query() {
  if (!has_query()) {
    clear_identifier();
    set_has_query();
    identifier_.query_ = CreateMaybeMessage< ::flyteidl::core::ArtifactQuery >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.GetArtifactRequest.query)
  return identifier_.query_;
}

// bool details = 5;
inline void GetArtifactRequest::clear_details() {
  details_ = false;
}
inline bool GetArtifactRequest::details() const {
  // @@protoc_insertion_point(field_get:flyteidl.artifact.GetArtifactRequest.details)
  return details_;
}
inline void GetArtifactRequest::set_details(bool value) {
  
  details_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.artifact.GetArtifactRequest.details)
}

inline bool GetArtifactRequest::has_identifier() const {
  return identifier_case() != IDENTIFIER_NOT_SET;
}
inline void GetArtifactRequest::clear_has_identifier() {
  _oneof_case_[0] = IDENTIFIER_NOT_SET;
}
inline GetArtifactRequest::IdentifierCase GetArtifactRequest::identifier_case() const {
  return GetArtifactRequest::IdentifierCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetArtifactResponse

// .flyteidl.artifact.Artifact artifact = 1;
inline bool GetArtifactResponse::has_artifact() const {
  return this != internal_default_instance() && artifact_ != nullptr;
}
inline void GetArtifactResponse::clear_artifact() {
  if (GetArenaNoVirtual() == nullptr && artifact_ != nullptr) {
    delete artifact_;
  }
  artifact_ = nullptr;
}
inline const ::flyteidl::artifact::Artifact& GetArtifactResponse::artifact() const {
  const ::flyteidl::artifact::Artifact* p = artifact_;
  // @@protoc_insertion_point(field_get:flyteidl.artifact.GetArtifactResponse.artifact)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::artifact::Artifact*>(
      &::flyteidl::artifact::_Artifact_default_instance_);
}
inline ::flyteidl::artifact::Artifact* GetArtifactResponse::release_artifact() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.GetArtifactResponse.artifact)
  
  ::flyteidl::artifact::Artifact* temp = artifact_;
  artifact_ = nullptr;
  return temp;
}
inline ::flyteidl::artifact::Artifact* GetArtifactResponse::mutable_artifact() {
  
  if (artifact_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::artifact::Artifact>(GetArenaNoVirtual());
    artifact_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.GetArtifactResponse.artifact)
  return artifact_;
}
inline void GetArtifactResponse::set_allocated_artifact(::flyteidl::artifact::Artifact* artifact) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete artifact_;
  }
  if (artifact) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      artifact = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, artifact, submessage_arena);
    }
    
  } else {
    
  }
  artifact_ = artifact;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.GetArtifactResponse.artifact)
}

// -------------------------------------------------------------------

// Tag

// string key = 1;
inline void Tag::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Tag::key() const {
  // @@protoc_insertion_point(field_get:flyteidl.artifact.Tag.key)
  return key_.GetNoArena();
}
inline void Tag::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.artifact.Tag.key)
}
#if LANG_CXX11
inline void Tag::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.artifact.Tag.key)
}
#endif
inline void Tag::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.artifact.Tag.key)
}
inline void Tag::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.artifact.Tag.key)
}
inline ::std::string* Tag::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.Tag.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Tag::release_key() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.Tag.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tag::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.Tag.key)
}

// string value = 2;
inline void Tag::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Tag::value() const {
  // @@protoc_insertion_point(field_get:flyteidl.artifact.Tag.value)
  return value_.GetNoArena();
}
inline void Tag::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.artifact.Tag.value)
}
#if LANG_CXX11
inline void Tag::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.artifact.Tag.value)
}
#endif
inline void Tag::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.artifact.Tag.value)
}
inline void Tag::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.artifact.Tag.value)
}
inline ::std::string* Tag::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.Tag.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Tag::release_value() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.Tag.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tag::set_allocated_value(::std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.Tag.value)
}

// -------------------------------------------------------------------

// AddTagsRequest

// .flyteidl.core.ArtifactID artifact_id = 1;
inline bool AddTagsRequest::has_artifact_id() const {
  return this != internal_default_instance() && artifact_id_ != nullptr;
}
inline const ::flyteidl::core::ArtifactID& AddTagsRequest::artifact_id() const {
  const ::flyteidl::core::ArtifactID* p = artifact_id_;
  // @@protoc_insertion_point(field_get:flyteidl.artifact.AddTagsRequest.artifact_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::ArtifactID*>(
      &::flyteidl::core::_ArtifactID_default_instance_);
}
inline ::flyteidl::core::ArtifactID* AddTagsRequest::release_artifact_id() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.AddTagsRequest.artifact_id)
  
  ::flyteidl::core::ArtifactID* temp = artifact_id_;
  artifact_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::ArtifactID* AddTagsRequest::mutable_artifact_id() {
  
  if (artifact_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::ArtifactID>(GetArenaNoVirtual());
    artifact_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.AddTagsRequest.artifact_id)
  return artifact_id_;
}
inline void AddTagsRequest::set_allocated_artifact_id(::flyteidl::core::ArtifactID* artifact_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(artifact_id_);
  }
  if (artifact_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      artifact_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, artifact_id, submessage_arena);
    }
    
  } else {
    
  }
  artifact_id_ = artifact_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.AddTagsRequest.artifact_id)
}

// repeated .flyteidl.artifact.Tag tags = 2;
inline int AddTagsRequest::tags_size() const {
  return tags_.size();
}
inline void AddTagsRequest::clear_tags() {
  tags_.Clear();
}
inline ::flyteidl::artifact::Tag* AddTagsRequest::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.AddTagsRequest.tags)
  return tags_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::artifact::Tag >*
AddTagsRequest::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.artifact.AddTagsRequest.tags)
  return &tags_;
}
inline const ::flyteidl::artifact::Tag& AddTagsRequest::tags(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.artifact.AddTagsRequest.tags)
  return tags_.Get(index);
}
inline ::flyteidl::artifact::Tag* AddTagsRequest::add_tags() {
  // @@protoc_insertion_point(field_add:flyteidl.artifact.AddTagsRequest.tags)
  return tags_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::artifact::Tag >&
AddTagsRequest::tags() const {
  // @@protoc_insertion_point(field_list:flyteidl.artifact.AddTagsRequest.tags)
  return tags_;
}

// -------------------------------------------------------------------

// AddTagsResponse

// -------------------------------------------------------------------

// RemoveTagsRequest

// .flyteidl.core.ArtifactID artifact_id = 1;
inline bool RemoveTagsRequest::has_artifact_id() const {
  return this != internal_default_instance() && artifact_id_ != nullptr;
}
inline const ::flyteidl::core::ArtifactID& RemoveTagsRequest::artifact_id() const {
  const ::flyteidl::core::ArtifactID* p = artifact_id_;
  // @@protoc_insertion_point(field_get:flyteidl.artifact.RemoveTagsRequest.artifact_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::ArtifactID*>(
      &::flyteidl::core::_ArtifactID_default_instance_);
}
inline ::flyteidl::core::ArtifactID* RemoveTagsRequest::release_artifact_id() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.RemoveTagsRequest.artifact_id)
  
  ::flyteidl::core::ArtifactID* temp = artifact_id_;
  artifact_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::ArtifactID* RemoveTagsRequest::mutable_artifact_id() {
  
  if (artifact_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::ArtifactID>(GetArenaNoVirtual());
    artifact_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.RemoveTagsRequest.artifact_id)
  return artifact_id_;
}
inline void RemoveTagsRequest::set_allocated_artifact_id(::flyteidl::core::ArtifactID* artifact_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(artifact_id_);
  }
  if (artifact_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      artifact_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, artifact_id, submessage_arena);
    }
    
  } else {
    
  }
  artifact_id_ = artifact_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.RemoveTagsRequest.artifact_id)
}

// repeated .flyteidl.artifact.Tag tags = 2;
inline int RemoveTagsRequest::tags_size() const {
  return tags_.size();
}
inline void RemoveTagsRequest::clear_tags() {
  tags_.Clear();
}
inline ::flyteidl::artifact::Tag* RemoveTagsRequest::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.RemoveTagsRequest.tags)
  return tags_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::artifact::Tag >*
RemoveTagsRequest::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.artifact.RemoveTagsRequest.tags)
  return &tags_;
}
inline const ::flyteidl::artifact::Tag& RemoveTagsRequest::tags(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.artifact.RemoveTagsRequest.tags)
  return tags_.Get(index);
}
inline ::flyteidl::artifact::Tag* RemoveTagsRequest::add_tags() {
  // @@protoc_insertion_point(field_add:flyteidl.artifact.RemoveTagsRequest.tags)
  return tags_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::artifact::Tag >&
RemoveTagsRequest::tags() const {
  // @@protoc_insertion_point(field_list:flyteidl.artifact.RemoveTagsRequest.tags)
  return tags_;
}

// -------------------------------------------------------------------

// RemoveTagsResponse

// -------------------------------------------------------------------

// ListArtifactNamesRequest

// string project = 1;
inline void ListArtifactNamesRequest::clear_project() {
  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListArtifactNamesRequest::project() const {
  // @@protoc_insertion_point(field_get:flyteidl.artifact.ListArtifactNamesRequest.project)
  return project_.GetNoArena();
}
inline void ListArtifactNamesRequest::set_project(const ::std::string& value) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.artifact.ListArtifactNamesRequest.project)
}
#if LANG_CXX11
inline void ListArtifactNamesRequest::set_project(::std::string&& value) {
  
  project_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.artifact.ListArtifactNamesRequest.project)
}
#endif
inline void ListArtifactNamesRequest::set_project(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.artifact.ListArtifactNamesRequest.project)
}
inline void ListArtifactNamesRequest::set_project(const char* value, size_t size) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.artifact.ListArtifactNamesRequest.project)
}
inline ::std::string* ListArtifactNamesRequest::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.ListArtifactNamesRequest.project)
  return project_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListArtifactNamesRequest::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.ListArtifactNamesRequest.project)
  
  return project_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListArtifactNamesRequest::set_allocated_project(::std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.ListArtifactNamesRequest.project)
}

// string domain = 2;
inline void ListArtifactNamesRequest::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListArtifactNamesRequest::domain() const {
  // @@protoc_insertion_point(field_get:flyteidl.artifact.ListArtifactNamesRequest.domain)
  return domain_.GetNoArena();
}
inline void ListArtifactNamesRequest::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.artifact.ListArtifactNamesRequest.domain)
}
#if LANG_CXX11
inline void ListArtifactNamesRequest::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.artifact.ListArtifactNamesRequest.domain)
}
#endif
inline void ListArtifactNamesRequest::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.artifact.ListArtifactNamesRequest.domain)
}
inline void ListArtifactNamesRequest::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.artifact.ListArtifactNamesRequest.domain)
}
inline ::std::string* ListArtifactNamesRequest::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.ListArtifactNamesRequest.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListArtifactNamesRequest::release_domain() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.ListArtifactNamesRequest.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListArtifactNamesRequest::set_allocated_domain(::std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.ListArtifactNamesRequest.domain)
}

// -------------------------------------------------------------------

// ListArtifactNamesResponse

// repeated .flyteidl.core.ArtifactKey artifact_keys = 1;
inline int ListArtifactNamesResponse::artifact_keys_size() const {
  return artifact_keys_.size();
}
inline ::flyteidl::core::ArtifactKey* ListArtifactNamesResponse::mutable_artifact_keys(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.ListArtifactNamesResponse.artifact_keys)
  return artifact_keys_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactKey >*
ListArtifactNamesResponse::mutable_artifact_keys() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.artifact.ListArtifactNamesResponse.artifact_keys)
  return &artifact_keys_;
}
inline const ::flyteidl::core::ArtifactKey& ListArtifactNamesResponse::artifact_keys(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.artifact.ListArtifactNamesResponse.artifact_keys)
  return artifact_keys_.Get(index);
}
inline ::flyteidl::core::ArtifactKey* ListArtifactNamesResponse::add_artifact_keys() {
  // @@protoc_insertion_point(field_add:flyteidl.artifact.ListArtifactNamesResponse.artifact_keys)
  return artifact_keys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactKey >&
ListArtifactNamesResponse::artifact_keys() const {
  // @@protoc_insertion_point(field_list:flyteidl.artifact.ListArtifactNamesResponse.artifact_keys)
  return artifact_keys_;
}

// -------------------------------------------------------------------

// ListArtifactsRequest

// .flyteidl.core.ArtifactKey artifact_key = 1;
inline bool ListArtifactsRequest::has_artifact_key() const {
  return this != internal_default_instance() && artifact_key_ != nullptr;
}
inline const ::flyteidl::core::ArtifactKey& ListArtifactsRequest::artifact_key() const {
  const ::flyteidl::core::ArtifactKey* p = artifact_key_;
  // @@protoc_insertion_point(field_get:flyteidl.artifact.ListArtifactsRequest.artifact_key)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::ArtifactKey*>(
      &::flyteidl::core::_ArtifactKey_default_instance_);
}
inline ::flyteidl::core::ArtifactKey* ListArtifactsRequest::release_artifact_key() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.ListArtifactsRequest.artifact_key)
  
  ::flyteidl::core::ArtifactKey* temp = artifact_key_;
  artifact_key_ = nullptr;
  return temp;
}
inline ::flyteidl::core::ArtifactKey* ListArtifactsRequest::mutable_artifact_key() {
  
  if (artifact_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::ArtifactKey>(GetArenaNoVirtual());
    artifact_key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.ListArtifactsRequest.artifact_key)
  return artifact_key_;
}
inline void ListArtifactsRequest::set_allocated_artifact_key(::flyteidl::core::ArtifactKey* artifact_key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(artifact_key_);
  }
  if (artifact_key) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      artifact_key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, artifact_key, submessage_arena);
    }
    
  } else {
    
  }
  artifact_key_ = artifact_key;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.ListArtifactsRequest.artifact_key)
}

// -------------------------------------------------------------------

// ListArtifactsResponse

// repeated .flyteidl.artifact.Artifact artifacts = 1;
inline int ListArtifactsResponse::artifacts_size() const {
  return artifacts_.size();
}
inline void ListArtifactsResponse::clear_artifacts() {
  artifacts_.Clear();
}
inline ::flyteidl::artifact::Artifact* ListArtifactsResponse::mutable_artifacts(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.ListArtifactsResponse.artifacts)
  return artifacts_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::artifact::Artifact >*
ListArtifactsResponse::mutable_artifacts() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.artifact.ListArtifactsResponse.artifacts)
  return &artifacts_;
}
inline const ::flyteidl::artifact::Artifact& ListArtifactsResponse::artifacts(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.artifact.ListArtifactsResponse.artifacts)
  return artifacts_.Get(index);
}
inline ::flyteidl::artifact::Artifact* ListArtifactsResponse::add_artifacts() {
  // @@protoc_insertion_point(field_add:flyteidl.artifact.ListArtifactsResponse.artifacts)
  return artifacts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::artifact::Artifact >&
ListArtifactsResponse::artifacts() const {
  // @@protoc_insertion_point(field_list:flyteidl.artifact.ListArtifactsResponse.artifacts)
  return artifacts_;
}

// -------------------------------------------------------------------

// CreateAliasRequest

// .flyteidl.core.ArtifactKey artifact_key = 1;
inline bool CreateAliasRequest::has_artifact_key() const {
  return this != internal_default_instance() && artifact_key_ != nullptr;
}
inline const ::flyteidl::core::ArtifactKey& CreateAliasRequest::artifact_key() const {
  const ::flyteidl::core::ArtifactKey* p = artifact_key_;
  // @@protoc_insertion_point(field_get:flyteidl.artifact.CreateAliasRequest.artifact_key)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::ArtifactKey*>(
      &::flyteidl::core::_ArtifactKey_default_instance_);
}
inline ::flyteidl::core::ArtifactKey* CreateAliasRequest::release_artifact_key() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.CreateAliasRequest.artifact_key)
  
  ::flyteidl::core::ArtifactKey* temp = artifact_key_;
  artifact_key_ = nullptr;
  return temp;
}
inline ::flyteidl::core::ArtifactKey* CreateAliasRequest::mutable_artifact_key() {
  
  if (artifact_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::ArtifactKey>(GetArenaNoVirtual());
    artifact_key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.CreateAliasRequest.artifact_key)
  return artifact_key_;
}
inline void CreateAliasRequest::set_allocated_artifact_key(::flyteidl::core::ArtifactKey* artifact_key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(artifact_key_);
  }
  if (artifact_key) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      artifact_key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, artifact_key, submessage_arena);
    }
    
  } else {
    
  }
  artifact_key_ = artifact_key;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.CreateAliasRequest.artifact_key)
}

// .flyteidl.core.ArtifactAlias alias = 2;
inline bool CreateAliasRequest::has_alias() const {
  return this != internal_default_instance() && alias_ != nullptr;
}
inline const ::flyteidl::core::ArtifactAlias& CreateAliasRequest::alias() const {
  const ::flyteidl::core::ArtifactAlias* p = alias_;
  // @@protoc_insertion_point(field_get:flyteidl.artifact.CreateAliasRequest.alias)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::ArtifactAlias*>(
      &::flyteidl::core::_ArtifactAlias_default_instance_);
}
inline ::flyteidl::core::ArtifactAlias* CreateAliasRequest::release_alias() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.CreateAliasRequest.alias)
  
  ::flyteidl::core::ArtifactAlias* temp = alias_;
  alias_ = nullptr;
  return temp;
}
inline ::flyteidl::core::ArtifactAlias* CreateAliasRequest::mutable_alias() {
  
  if (alias_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::ArtifactAlias>(GetArenaNoVirtual());
    alias_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.CreateAliasRequest.alias)
  return alias_;
}
inline void CreateAliasRequest::set_allocated_alias(::flyteidl::core::ArtifactAlias* alias) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(alias_);
  }
  if (alias) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      alias = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, alias, submessage_arena);
    }
    
  } else {
    
  }
  alias_ = alias;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.CreateAliasRequest.alias)
}

// bool overwrite = 3;
inline void CreateAliasRequest::clear_overwrite() {
  overwrite_ = false;
}
inline bool CreateAliasRequest::overwrite() const {
  // @@protoc_insertion_point(field_get:flyteidl.artifact.CreateAliasRequest.overwrite)
  return overwrite_;
}
inline void CreateAliasRequest::set_overwrite(bool value) {
  
  overwrite_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.artifact.CreateAliasRequest.overwrite)
}

// -------------------------------------------------------------------

// CreateAliasResponse

// -------------------------------------------------------------------

// RemoveAliasRequest

// .flyteidl.core.ArtifactKey artifact_key = 1;
inline bool RemoveAliasRequest::has_artifact_key() const {
  return this != internal_default_instance() && artifact_key_ != nullptr;
}
inline const ::flyteidl::core::ArtifactKey& RemoveAliasRequest::artifact_key() const {
  const ::flyteidl::core::ArtifactKey* p = artifact_key_;
  // @@protoc_insertion_point(field_get:flyteidl.artifact.RemoveAliasRequest.artifact_key)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::ArtifactKey*>(
      &::flyteidl::core::_ArtifactKey_default_instance_);
}
inline ::flyteidl::core::ArtifactKey* RemoveAliasRequest::release_artifact_key() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.RemoveAliasRequest.artifact_key)
  
  ::flyteidl::core::ArtifactKey* temp = artifact_key_;
  artifact_key_ = nullptr;
  return temp;
}
inline ::flyteidl::core::ArtifactKey* RemoveAliasRequest::mutable_artifact_key() {
  
  if (artifact_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::ArtifactKey>(GetArenaNoVirtual());
    artifact_key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.RemoveAliasRequest.artifact_key)
  return artifact_key_;
}
inline void RemoveAliasRequest::set_allocated_artifact_key(::flyteidl::core::ArtifactKey* artifact_key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(artifact_key_);
  }
  if (artifact_key) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      artifact_key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, artifact_key, submessage_arena);
    }
    
  } else {
    
  }
  artifact_key_ = artifact_key;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.RemoveAliasRequest.artifact_key)
}

// .flyteidl.core.ArtifactAlias alias = 2;
inline bool RemoveAliasRequest::has_alias() const {
  return this != internal_default_instance() && alias_ != nullptr;
}
inline const ::flyteidl::core::ArtifactAlias& RemoveAliasRequest::alias() const {
  const ::flyteidl::core::ArtifactAlias* p = alias_;
  // @@protoc_insertion_point(field_get:flyteidl.artifact.RemoveAliasRequest.alias)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::ArtifactAlias*>(
      &::flyteidl::core::_ArtifactAlias_default_instance_);
}
inline ::flyteidl::core::ArtifactAlias* RemoveAliasRequest::release_alias() {
  // @@protoc_insertion_point(field_release:flyteidl.artifact.RemoveAliasRequest.alias)
  
  ::flyteidl::core::ArtifactAlias* temp = alias_;
  alias_ = nullptr;
  return temp;
}
inline ::flyteidl::core::ArtifactAlias* RemoveAliasRequest::mutable_alias() {
  
  if (alias_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::ArtifactAlias>(GetArenaNoVirtual());
    alias_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.artifact.RemoveAliasRequest.alias)
  return alias_;
}
inline void RemoveAliasRequest::set_allocated_alias(::flyteidl::core::ArtifactAlias* alias) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(alias_);
  }
  if (alias) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      alias = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, alias, submessage_arena);
    }
    
  } else {
    
  }
  alias_ = alias;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.RemoveAliasRequest.alias)
}

// -------------------------------------------------------------------

// RemoveAliasResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace artifact
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fartifact_2fartifacts_2eproto
