// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/plugins/kubeflow/mpi.proto

package plugins

import (
	fmt "fmt"
	core "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Proto for plugin that enables distributed training using https://github.com/kubeflow/mpi-operator
type DistributedMPITrainingTask struct {
	// Worker replicas spec
	WorkerReplicas *DistributedMPITrainingReplicaSpec `protobuf:"bytes,1,opt,name=worker_replicas,json=workerReplicas,proto3" json:"worker_replicas,omitempty"`
	// Master replicas spec
	LauncherReplicas *DistributedMPITrainingReplicaSpec `protobuf:"bytes,2,opt,name=launcher_replicas,json=launcherReplicas,proto3" json:"launcher_replicas,omitempty"`
	// RunPolicy encapsulates various runtime policies of the distributed training
	// job, for example how to clean up resources and how long the job can stay
	// active.
	RunPolicy            *RunPolicy `protobuf:"bytes,3,opt,name=run_policy,json=runPolicy,proto3" json:"run_policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DistributedMPITrainingTask) Reset()         { *m = DistributedMPITrainingTask{} }
func (m *DistributedMPITrainingTask) String() string { return proto.CompactTextString(m) }
func (*DistributedMPITrainingTask) ProtoMessage()    {}
func (*DistributedMPITrainingTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_298b02c608b0cddf, []int{0}
}

func (m *DistributedMPITrainingTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributedMPITrainingTask.Unmarshal(m, b)
}
func (m *DistributedMPITrainingTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributedMPITrainingTask.Marshal(b, m, deterministic)
}
func (m *DistributedMPITrainingTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributedMPITrainingTask.Merge(m, src)
}
func (m *DistributedMPITrainingTask) XXX_Size() int {
	return xxx_messageInfo_DistributedMPITrainingTask.Size(m)
}
func (m *DistributedMPITrainingTask) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributedMPITrainingTask.DiscardUnknown(m)
}

var xxx_messageInfo_DistributedMPITrainingTask proto.InternalMessageInfo

func (m *DistributedMPITrainingTask) GetWorkerReplicas() *DistributedMPITrainingReplicaSpec {
	if m != nil {
		return m.WorkerReplicas
	}
	return nil
}

func (m *DistributedMPITrainingTask) GetLauncherReplicas() *DistributedMPITrainingReplicaSpec {
	if m != nil {
		return m.LauncherReplicas
	}
	return nil
}

func (m *DistributedMPITrainingTask) GetRunPolicy() *RunPolicy {
	if m != nil {
		return m.RunPolicy
	}
	return nil
}

// Replica specification for distributed MPI training
type DistributedMPITrainingReplicaSpec struct {
	// Number of replicas
	Replicas int32 `protobuf:"varint,1,opt,name=replicas,proto3" json:"replicas,omitempty"`
	// Image used for the replica group
	Image string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// Resources required for the replica group
	Resources *core.Resources `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
	// Restart policy determines whether pods will be restarted when they exit
	RestartPolicy RestartPolicy `protobuf:"varint,4,opt,name=restart_policy,json=restartPolicy,proto3,enum=flyteidl.plugins.kubeflow.RestartPolicy" json:"restart_policy,omitempty"`
	// MPI sometimes requires different command set for different replica groups
	Command              []string `protobuf:"bytes,5,rep,name=command,proto3" json:"command,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DistributedMPITrainingReplicaSpec) Reset()         { *m = DistributedMPITrainingReplicaSpec{} }
func (m *DistributedMPITrainingReplicaSpec) String() string { return proto.CompactTextString(m) }
func (*DistributedMPITrainingReplicaSpec) ProtoMessage()    {}
func (*DistributedMPITrainingReplicaSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_298b02c608b0cddf, []int{1}
}

func (m *DistributedMPITrainingReplicaSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributedMPITrainingReplicaSpec.Unmarshal(m, b)
}
func (m *DistributedMPITrainingReplicaSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributedMPITrainingReplicaSpec.Marshal(b, m, deterministic)
}
func (m *DistributedMPITrainingReplicaSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributedMPITrainingReplicaSpec.Merge(m, src)
}
func (m *DistributedMPITrainingReplicaSpec) XXX_Size() int {
	return xxx_messageInfo_DistributedMPITrainingReplicaSpec.Size(m)
}
func (m *DistributedMPITrainingReplicaSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributedMPITrainingReplicaSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DistributedMPITrainingReplicaSpec proto.InternalMessageInfo

func (m *DistributedMPITrainingReplicaSpec) GetReplicas() int32 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

func (m *DistributedMPITrainingReplicaSpec) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *DistributedMPITrainingReplicaSpec) GetResources() *core.Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *DistributedMPITrainingReplicaSpec) GetRestartPolicy() RestartPolicy {
	if m != nil {
		return m.RestartPolicy
	}
	return RestartPolicy_RESTART_POLICY_NEVER
}

func (m *DistributedMPITrainingReplicaSpec) GetCommand() []string {
	if m != nil {
		return m.Command
	}
	return nil
}

func init() {
	proto.RegisterType((*DistributedMPITrainingTask)(nil), "flyteidl.plugins.kubeflow.DistributedMPITrainingTask")
	proto.RegisterType((*DistributedMPITrainingReplicaSpec)(nil), "flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec")
}

func init() {
	proto.RegisterFile("flyteidl/plugins/kubeflow/mpi.proto", fileDescriptor_298b02c608b0cddf)
}

var fileDescriptor_298b02c608b0cddf = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0x3d, 0x4f, 0xf3, 0x30,
	0x18, 0x54, 0xda, 0xb7, 0x2f, 0xc4, 0x88, 0x02, 0x16, 0x43, 0xc8, 0x54, 0x0a, 0x42, 0x59, 0x88,
	0xa5, 0x22, 0x81, 0x90, 0x98, 0x80, 0x85, 0x01, 0x51, 0x99, 0x4e, 0x2c, 0x95, 0xe3, 0xba, 0xa9,
	0x95, 0xc4, 0x8e, 0xfc, 0xa1, 0xaa, 0xbf, 0x8b, 0x3f, 0xc7, 0x88, 0x9a, 0xaf, 0x16, 0x44, 0xcb,
	0xc2, 0x96, 0xcb, 0x73, 0xcf, 0xdd, 0x73, 0xc9, 0x81, 0xb3, 0x69, 0xba, 0x30, 0x8c, 0x4f, 0x52,
	0x94, 0xa7, 0x36, 0xe6, 0x42, 0xa3, 0xc4, 0x46, 0x6c, 0x9a, 0xca, 0x39, 0xca, 0x72, 0x1e, 0xe6,
	0x4a, 0x1a, 0x09, 0x4f, 0x6a, 0x52, 0x58, 0x91, 0xc2, 0x9a, 0xe4, 0x37, 0x23, 0x44, 0xa5, 0x62,
	0xc8, 0x10, 0x9d, 0xe8, 0x72, 0xcb, 0xbf, 0xd8, 0x2c, 0x4d, 0x65, 0x96, 0x49, 0x51, 0xf2, 0xfa,
	0xef, 0x2d, 0xe0, 0x3f, 0x72, 0x6d, 0x14, 0x8f, 0xac, 0x61, 0x93, 0xe7, 0xe1, 0xd3, 0x48, 0x11,
	0x2e, 0xb8, 0x88, 0x47, 0x44, 0x27, 0x90, 0x81, 0x83, 0xb9, 0x54, 0x09, 0x53, 0x63, 0xc5, 0xf2,
	0x94, 0x53, 0xa2, 0x3d, 0xa7, 0xe7, 0x04, 0x7b, 0x83, 0xbb, 0x70, 0xe3, 0x59, 0xe1, 0xcf, 0x7a,
	0xb8, 0x14, 0x78, 0xcd, 0x19, 0xc5, 0xdd, 0x52, 0xb4, 0x7a, 0xa5, 0x21, 0x07, 0x47, 0x29, 0xb1,
	0x82, 0xce, 0xd6, 0x8d, 0x5a, 0x7f, 0x60, 0x74, 0x58, 0xcb, 0x36, 0x56, 0x0f, 0x00, 0x28, 0x2b,
	0xc6, 0xb9, 0x4c, 0x39, 0x5d, 0x78, 0xed, 0xc2, 0xe3, 0x7c, 0x8b, 0x07, 0xb6, 0x62, 0x58, 0x70,
	0xb1, 0xab, 0xea, 0xc7, 0xfe, 0x87, 0x03, 0x4e, 0x7f, 0x35, 0x87, 0x3e, 0xd8, 0xfd, 0xf2, 0xd5,
	0x3a, 0xb8, 0xc1, 0xf0, 0x18, 0x74, 0x78, 0x46, 0x62, 0x56, 0xa4, 0x74, 0x71, 0x09, 0xe0, 0x35,
	0x70, 0x15, 0xd3, 0xd2, 0x2a, 0xca, 0x74, 0x75, 0x9b, 0xb7, 0xba, 0x6d, 0xf9, 0x93, 0x43, 0x5c,
	0xcf, 0xf1, 0x8a, 0x0a, 0x5f, 0x40, 0x57, 0x31, 0x6d, 0x88, 0x32, 0x75, 0xb0, 0x7f, 0x3d, 0x27,
	0xe8, 0x0e, 0x82, 0x6d, 0xc1, 0xca, 0x85, 0x2a, 0xdc, 0xbe, 0x5a, 0x87, 0xd0, 0x03, 0x3b, 0xcb,
	0x9a, 0x10, 0x31, 0xf1, 0x3a, 0xbd, 0x76, 0xe0, 0xe2, 0x1a, 0xde, 0xdf, 0xbe, 0xdd, 0xc4, 0xdc,
	0xcc, 0x6c, 0x14, 0x52, 0x99, 0xa1, 0x42, 0x5e, 0xaa, 0x18, 0x35, 0x75, 0x8b, 0x99, 0x40, 0x79,
	0x74, 0x19, 0x4b, 0xf4, 0xbd, 0x81, 0xd1, 0xff, 0xa2, 0x72, 0x57, 0x9f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x1b, 0xe5, 0x26, 0xdc, 0xf7, 0x02, 0x00, 0x00,
}
