// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/array_job.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fplugins_2farray_5fjob_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fplugins_2farray_5fjob_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2farray_5fjob_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fplugins_2farray_5fjob_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fplugins_2farray_5fjob_2eproto;
namespace flyteidl {
namespace plugins {
class ArrayJob;
struct ArrayJobDefaultTypeInternal;
extern ArrayJobDefaultTypeInternal _ArrayJob_default_instance_;
}  // namespace plugins
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::plugins::ArrayJob* Arena::CreateMaybeMessage<::flyteidl::plugins::ArrayJob>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace plugins {

// ===================================================================

class ArrayJob final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.ArrayJob) */ {
 public:
  inline ArrayJob() : ArrayJob(nullptr) {}
  ~ArrayJob() override;
  explicit constexpr ArrayJob(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArrayJob(const ArrayJob& from);
  ArrayJob(ArrayJob&& from) noexcept
    : ArrayJob() {
    *this = ::std::move(from);
  }

  inline ArrayJob& operator=(const ArrayJob& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayJob& operator=(ArrayJob&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArrayJob& default_instance() {
    return *internal_default_instance();
  }
  enum SuccessCriteriaCase {
    kMinSuccesses = 3,
    kMinSuccessRatio = 4,
    SUCCESS_CRITERIA_NOT_SET = 0,
  };

  static inline const ArrayJob* internal_default_instance() {
    return reinterpret_cast<const ArrayJob*>(
               &_ArrayJob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ArrayJob& a, ArrayJob& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayJob* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayJob* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArrayJob* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArrayJob>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayJob* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.plugins.ArrayJob";
  }
  protected:
  explicit ArrayJob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParallelismFieldNumber = 1,
    kSizeFieldNumber = 2,
    kMinSuccessesFieldNumber = 3,
    kMinSuccessRatioFieldNumber = 4,
  };
  // int64 parallelism = 1 [json_name = "parallelism"];
  void clear_parallelism();
  int64_t parallelism() const;
  void set_parallelism(int64_t value);
  private:
  int64_t _internal_parallelism() const;
  void _internal_set_parallelism(int64_t value);
  public:

  // int64 size = 2 [json_name = "size"];
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // int64 min_successes = 3 [json_name = "minSuccesses"];
  bool has_min_successes() const;
  private:
  bool _internal_has_min_successes() const;
  public:
  void clear_min_successes();
  int64_t min_successes() const;
  void set_min_successes(int64_t value);
  private:
  int64_t _internal_min_successes() const;
  void _internal_set_min_successes(int64_t value);
  public:

  // float min_success_ratio = 4 [json_name = "minSuccessRatio"];
  bool has_min_success_ratio() const;
  private:
  bool _internal_has_min_success_ratio() const;
  public:
  void clear_min_success_ratio();
  float min_success_ratio() const;
  void set_min_success_ratio(float value);
  private:
  float _internal_min_success_ratio() const;
  void _internal_set_min_success_ratio(float value);
  public:

  void clear_success_criteria();
  SuccessCriteriaCase success_criteria_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.plugins.ArrayJob)
 private:
  class _Internal;
  void set_has_min_successes();
  void set_has_min_success_ratio();

  inline bool has_success_criteria() const;
  inline void clear_has_success_criteria();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t parallelism_;
  int64_t size_;
  union SuccessCriteriaUnion {
    constexpr SuccessCriteriaUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    int64_t min_successes_;
    float min_success_ratio_;
  } success_criteria_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fplugins_2farray_5fjob_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ArrayJob

// int64 parallelism = 1 [json_name = "parallelism"];
inline void ArrayJob::clear_parallelism() {
  parallelism_ = int64_t{0};
}
inline int64_t ArrayJob::_internal_parallelism() const {
  return parallelism_;
}
inline int64_t ArrayJob::parallelism() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.ArrayJob.parallelism)
  return _internal_parallelism();
}
inline void ArrayJob::_internal_set_parallelism(int64_t value) {
  
  parallelism_ = value;
}
inline void ArrayJob::set_parallelism(int64_t value) {
  _internal_set_parallelism(value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.ArrayJob.parallelism)
}

// int64 size = 2 [json_name = "size"];
inline void ArrayJob::clear_size() {
  size_ = int64_t{0};
}
inline int64_t ArrayJob::_internal_size() const {
  return size_;
}
inline int64_t ArrayJob::size() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.ArrayJob.size)
  return _internal_size();
}
inline void ArrayJob::_internal_set_size(int64_t value) {
  
  size_ = value;
}
inline void ArrayJob::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.ArrayJob.size)
}

// int64 min_successes = 3 [json_name = "minSuccesses"];
inline bool ArrayJob::_internal_has_min_successes() const {
  return success_criteria_case() == kMinSuccesses;
}
inline bool ArrayJob::has_min_successes() const {
  return _internal_has_min_successes();
}
inline void ArrayJob::set_has_min_successes() {
  _oneof_case_[0] = kMinSuccesses;
}
inline void ArrayJob::clear_min_successes() {
  if (_internal_has_min_successes()) {
    success_criteria_.min_successes_ = int64_t{0};
    clear_has_success_criteria();
  }
}
inline int64_t ArrayJob::_internal_min_successes() const {
  if (_internal_has_min_successes()) {
    return success_criteria_.min_successes_;
  }
  return int64_t{0};
}
inline void ArrayJob::_internal_set_min_successes(int64_t value) {
  if (!_internal_has_min_successes()) {
    clear_success_criteria();
    set_has_min_successes();
  }
  success_criteria_.min_successes_ = value;
}
inline int64_t ArrayJob::min_successes() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.ArrayJob.min_successes)
  return _internal_min_successes();
}
inline void ArrayJob::set_min_successes(int64_t value) {
  _internal_set_min_successes(value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.ArrayJob.min_successes)
}

// float min_success_ratio = 4 [json_name = "minSuccessRatio"];
inline bool ArrayJob::_internal_has_min_success_ratio() const {
  return success_criteria_case() == kMinSuccessRatio;
}
inline bool ArrayJob::has_min_success_ratio() const {
  return _internal_has_min_success_ratio();
}
inline void ArrayJob::set_has_min_success_ratio() {
  _oneof_case_[0] = kMinSuccessRatio;
}
inline void ArrayJob::clear_min_success_ratio() {
  if (_internal_has_min_success_ratio()) {
    success_criteria_.min_success_ratio_ = 0;
    clear_has_success_criteria();
  }
}
inline float ArrayJob::_internal_min_success_ratio() const {
  if (_internal_has_min_success_ratio()) {
    return success_criteria_.min_success_ratio_;
  }
  return 0;
}
inline void ArrayJob::_internal_set_min_success_ratio(float value) {
  if (!_internal_has_min_success_ratio()) {
    clear_success_criteria();
    set_has_min_success_ratio();
  }
  success_criteria_.min_success_ratio_ = value;
}
inline float ArrayJob::min_success_ratio() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.ArrayJob.min_success_ratio)
  return _internal_min_success_ratio();
}
inline void ArrayJob::set_min_success_ratio(float value) {
  _internal_set_min_success_ratio(value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.ArrayJob.min_success_ratio)
}

inline bool ArrayJob::has_success_criteria() const {
  return success_criteria_case() != SUCCESS_CRITERIA_NOT_SET;
}
inline void ArrayJob::clear_has_success_criteria() {
  _oneof_case_[0] = SUCCESS_CRITERIA_NOT_SET;
}
inline ArrayJob::SuccessCriteriaCase ArrayJob::success_criteria_case() const {
  return ArrayJob::SuccessCriteriaCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace plugins
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fplugins_2farray_5fjob_2eproto
