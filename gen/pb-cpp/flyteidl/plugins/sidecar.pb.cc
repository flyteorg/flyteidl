// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/sidecar.proto

#include "flyteidl/plugins/sidecar.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace plugins {
constexpr SidecarJob_AnnotationsEntry_DoNotUse::SidecarJob_AnnotationsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SidecarJob_AnnotationsEntry_DoNotUseDefaultTypeInternal {
  constexpr SidecarJob_AnnotationsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SidecarJob_AnnotationsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SidecarJob_AnnotationsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SidecarJob_AnnotationsEntry_DoNotUseDefaultTypeInternal _SidecarJob_AnnotationsEntry_DoNotUse_default_instance_;
constexpr SidecarJob_LabelsEntry_DoNotUse::SidecarJob_LabelsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SidecarJob_LabelsEntry_DoNotUseDefaultTypeInternal {
  constexpr SidecarJob_LabelsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SidecarJob_LabelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SidecarJob_LabelsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SidecarJob_LabelsEntry_DoNotUseDefaultTypeInternal _SidecarJob_LabelsEntry_DoNotUse_default_instance_;
constexpr SidecarJob::SidecarJob(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotations_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , labels_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , primary_container_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pod_spec_(nullptr){}
struct SidecarJobDefaultTypeInternal {
  constexpr SidecarJobDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SidecarJobDefaultTypeInternal() {}
  union {
    SidecarJob _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SidecarJobDefaultTypeInternal _SidecarJob_default_instance_;
}  // namespace plugins
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fplugins_2fsidecar_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fplugins_2fsidecar_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fplugins_2fsidecar_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fplugins_2fsidecar_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::SidecarJob_AnnotationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::SidecarJob_AnnotationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::SidecarJob_AnnotationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::SidecarJob_AnnotationsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::SidecarJob_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::SidecarJob_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::SidecarJob_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::SidecarJob_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::SidecarJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::SidecarJob, pod_spec_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::SidecarJob, primary_container_name_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::SidecarJob, annotations_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::SidecarJob, labels_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::flyteidl::plugins::SidecarJob_AnnotationsEntry_DoNotUse)},
  { 10, 18, -1, sizeof(::flyteidl::plugins::SidecarJob_LabelsEntry_DoNotUse)},
  { 20, -1, -1, sizeof(::flyteidl::plugins::SidecarJob)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::plugins::_SidecarJob_AnnotationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::plugins::_SidecarJob_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::plugins::_SidecarJob_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fplugins_2fsidecar_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036flyteidl/plugins/sidecar.proto\022\020flytei"
  "dl.plugins\032\"k8s.io/api/core/v1/generated"
  ".proto\"\210\003\n\nSidecarJob\0226\n\010pod_spec\030\001 \001(\0132"
  "\033.k8s.io.api.core.v1.PodSpecR\007podSpec\0224\n"
  "\026primary_container_name\030\002 \001(\tR\024primaryCo"
  "ntainerName\022O\n\013annotations\030\003 \003(\0132-.flyte"
  "idl.plugins.SidecarJob.AnnotationsEntryR"
  "\013annotations\022@\n\006labels\030\004 \003(\0132(.flyteidl."
  "plugins.SidecarJob.LabelsEntryR\006labels\032>"
  "\n\020AnnotationsEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005"
  "value\030\002 \001(\tR\005value:\0028\001\0329\n\013LabelsEntry\022\020\n"
  "\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028"
  "\001B\301\001\n\024com.flyteidl.pluginsB\014SidecarProto"
  "H\002Z7github.com/flyteorg/flyteidl/gen/pb-"
  "go/flyteidl/plugins\370\001\000\242\002\003FPX\252\002\020Flyteidl."
  "Plugins\312\002\020Flyteidl\\Plugins\342\002\034Flyteidl\\Pl"
  "ugins\\GPBMetadata\352\002\021Flyteidl::Pluginsb\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flyteidl_2fplugins_2fsidecar_2eproto_deps[1] = {
  &::descriptor_table_k8s_2eio_2fapi_2fcore_2fv1_2fgenerated_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fplugins_2fsidecar_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fplugins_2fsidecar_2eproto = {
  false, false, 685, descriptor_table_protodef_flyteidl_2fplugins_2fsidecar_2eproto, "flyteidl/plugins/sidecar.proto", 
  &descriptor_table_flyteidl_2fplugins_2fsidecar_2eproto_once, descriptor_table_flyteidl_2fplugins_2fsidecar_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_flyteidl_2fplugins_2fsidecar_2eproto::offsets,
  file_level_metadata_flyteidl_2fplugins_2fsidecar_2eproto, file_level_enum_descriptors_flyteidl_2fplugins_2fsidecar_2eproto, file_level_service_descriptors_flyteidl_2fplugins_2fsidecar_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fplugins_2fsidecar_2eproto_getter() {
  return &descriptor_table_flyteidl_2fplugins_2fsidecar_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fplugins_2fsidecar_2eproto(&descriptor_table_flyteidl_2fplugins_2fsidecar_2eproto);
namespace flyteidl {
namespace plugins {

// ===================================================================

SidecarJob_AnnotationsEntry_DoNotUse::SidecarJob_AnnotationsEntry_DoNotUse() {}
SidecarJob_AnnotationsEntry_DoNotUse::SidecarJob_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SidecarJob_AnnotationsEntry_DoNotUse::MergeFrom(const SidecarJob_AnnotationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SidecarJob_AnnotationsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fplugins_2fsidecar_2eproto_getter, &descriptor_table_flyteidl_2fplugins_2fsidecar_2eproto_once,
      file_level_metadata_flyteidl_2fplugins_2fsidecar_2eproto[0]);
}

// ===================================================================

SidecarJob_LabelsEntry_DoNotUse::SidecarJob_LabelsEntry_DoNotUse() {}
SidecarJob_LabelsEntry_DoNotUse::SidecarJob_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SidecarJob_LabelsEntry_DoNotUse::MergeFrom(const SidecarJob_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SidecarJob_LabelsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fplugins_2fsidecar_2eproto_getter, &descriptor_table_flyteidl_2fplugins_2fsidecar_2eproto_once,
      file_level_metadata_flyteidl_2fplugins_2fsidecar_2eproto[1]);
}

// ===================================================================

class SidecarJob::_Internal {
 public:
  static const ::k8s::io::api::core::v1::PodSpec& pod_spec(const SidecarJob* msg);
};

const ::k8s::io::api::core::v1::PodSpec&
SidecarJob::_Internal::pod_spec(const SidecarJob* msg) {
  return *msg->pod_spec_;
}
void SidecarJob::clear_pod_spec() {
  if (GetArenaForAllocation() == nullptr && pod_spec_ != nullptr) {
    delete pod_spec_;
  }
  pod_spec_ = nullptr;
}
SidecarJob::SidecarJob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  annotations_(arena),
  labels_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.plugins.SidecarJob)
}
SidecarJob::SidecarJob(const SidecarJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  annotations_.MergeFrom(from.annotations_);
  labels_.MergeFrom(from.labels_);
  primary_container_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    primary_container_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_primary_container_name().empty()) {
    primary_container_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_primary_container_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pod_spec()) {
    pod_spec_ = new ::k8s::io::api::core::v1::PodSpec(*from.pod_spec_);
  } else {
    pod_spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.SidecarJob)
}

inline void SidecarJob::SharedCtor() {
primary_container_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  primary_container_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pod_spec_ = nullptr;
}

SidecarJob::~SidecarJob() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.SidecarJob)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SidecarJob::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  primary_container_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pod_spec_;
}

void SidecarJob::ArenaDtor(void* object) {
  SidecarJob* _this = reinterpret_cast< SidecarJob* >(object);
  (void)_this;
  _this->annotations_. ~MapField();
  _this->labels_. ~MapField();
}
inline void SidecarJob::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &SidecarJob::ArenaDtor);
  }
}
void SidecarJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SidecarJob::InternalSwap(SidecarJob* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata SidecarJob::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fplugins_2fsidecar_2eproto_getter, &descriptor_table_flyteidl_2fplugins_2fsidecar_2eproto_once,
      file_level_metadata_flyteidl_2fplugins_2fsidecar_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace plugins
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::SidecarJob_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage< ::flyteidl::plugins::SidecarJob_AnnotationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::plugins::SidecarJob_AnnotationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::SidecarJob_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::flyteidl::plugins::SidecarJob_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::plugins::SidecarJob_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::SidecarJob* Arena::CreateMaybeMessage< ::flyteidl::plugins::SidecarJob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::plugins::SidecarJob >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
