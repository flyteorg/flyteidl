// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/service/admin.proto

package flyteidl.service;

public final class Admin {
  private Admin() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\034flyteidl/service/admin.proto\022\020flyteidl" +
      ".service\032\034google/api/annotations.proto\032\034" +
      "flyteidl/admin/project.proto\032.flyteidl/a" +
      "dmin/project_domain_attributes.proto\032\'fl" +
      "yteidl/admin/project_attributes.proto\032\031f" +
      "lyteidl/admin/task.proto\032\035flyteidl/admin" +
      "/workflow.proto\032(flyteidl/admin/workflow" +
      "_attributes.proto\032 flyteidl/admin/launch" +
      "_plan.proto\032\032flyteidl/admin/event.proto\032" +
      "\036flyteidl/admin/execution.proto\032\'flyteid" +
      "l/admin/matchable_resource.proto\032#flytei" +
      "dl/admin/node_execution.proto\032#flyteidl/" +
      "admin/task_execution.proto\032\034flyteidl/adm" +
      "in/version.proto\032\033flyteidl/admin/common." +
      "proto\032\'flyteidl/admin/description_entity" +
      ".proto\032,protoc-gen-swagger/options/annot" +
      "ations.proto2\256r\n\014AdminService\022\305\002\n\nCreate" +
      "Task\022!.flyteidl.admin.TaskCreateRequest\032" +
      "\".flyteidl.admin.TaskCreateResponse\"\357\001\202\323" +
      "\344\223\002\022\"\r/api/v1/tasks:\001*\222A\323\001\032&Create and r" +
      "egister a task definition.JB\n\003400\022;\n9Ret" +
      "urned for bad request that may have fail" +
      "ed validation.Je\n\003409\022^\n\\Returned for a " +
      "request that references an identical ent" +
      "ity that has already been registered.\022\262\001" +
      "\n\007GetTask\022 .flyteidl.admin.ObjectGetRequ" +
      "est\032\024.flyteidl.admin.Task\"o\202\323\344\223\002?\022=/api/" +
      "v1/tasks/{id.project}/{id.domain}/{id.na" +
      "me}/{id.version}\222A\'\032%Retrieve an existin" +
      "g task definition.\022\336\001\n\013ListTaskIds\0220.fly" +
      "teidl.admin.NamedEntityIdentifierListReq" +
      "uest\032).flyteidl.admin.NamedEntityIdentif" +
      "ierList\"r\202\323\344\223\002%\022#/api/v1/task_ids/{proje" +
      "ct}/{domain}\222AD\032BFetch existing task def" +
      "inition identifiers matching input filte" +
      "rs.\022\353\001\n\tListTasks\022#.flyteidl.admin.Resou" +
      "rceListRequest\032\030.flyteidl.admin.TaskList" +
      "\"\236\001\202\323\344\223\002\\\0220/api/v1/tasks/{id.project}/{i" +
      "d.domain}/{id.name}Z(\022&/api/v1/tasks/{id" +
      ".project}/{id.domain}\222A9\0327Fetch existing" +
      " task definitions matching input filters" +
      ".\022\331\002\n\016CreateWorkflow\022%.flyteidl.admin.Wo" +
      "rkflowCreateRequest\032&.flyteidl.admin.Wor" +
      "kflowCreateResponse\"\367\001\202\323\344\223\002\026\"\021/api/v1/wo" +
      "rkflows:\001*\222A\327\001\032*Create and register a wo" +
      "rkflow definition.JB\n\003400\022;\n9Returned fo" +
      "r bad request that may have failed valid" +
      "ation.Je\n\003409\022^\n\\Returned for a request " +
      "that references an identical entity that" +
      " has already been registered.\022\302\001\n\013GetWor" +
      "kflow\022 .flyteidl.admin.ObjectGetRequest\032" +
      "\030.flyteidl.admin.Workflow\"w\202\323\344\223\002C\022A/api/" +
      "v1/workflows/{id.project}/{id.domain}/{i" +
      "d.name}/{id.version}\222A+\032)Retrieve an exi" +
      "sting workflow definition.\022\355\001\n\017ListWorkf" +
      "lowIds\0220.flyteidl.admin.NamedEntityIdent" +
      "ifierListRequest\032).flyteidl.admin.NamedE" +
      "ntityIdentifierList\"}\202\323\344\223\002)\022\'/api/v1/wor" +
      "kflow_ids/{project}/{domain}\222AK\032IFetch a" +
      "n existing workflow definition identifie" +
      "rs matching input filters.\022\377\001\n\rListWorkf" +
      "lows\022#.flyteidl.admin.ResourceListReques" +
      "t\032\034.flyteidl.admin.WorkflowList\"\252\001\202\323\344\223\002d" +
      "\0224/api/v1/workflows/{id.project}/{id.dom" +
      "ain}/{id.name}Z,\022*/api/v1/workflows/{id." +
      "project}/{id.domain}\222A=\032;Fetch existing " +
      "workflow definitions matching input filt" +
      "ers.\022\345\002\n\020CreateLaunchPlan\022\'.flyteidl.adm" +
      "in.LaunchPlanCreateRequest\032(.flyteidl.ad" +
      "min.LaunchPlanCreateResponse\"\375\001\202\323\344\223\002\031\"\024/" +
      "api/v1/launch_plans:\001*\222A\332\001\032-Create and r" +
      "egister a launch plan definition.JB\n\003400" +
      "\022;\n9Returned for bad request that may ha" +
      "ve failed validation.Je\n\003409\022^\n\\Returned" +
      " for a request that references an identi" +
      "cal entity that has already been registe" +
      "red.\022\314\001\n\rGetLaunchPlan\022 .flyteidl.admin." +
      "ObjectGetRequest\032\032.flyteidl.admin.Launch" +
      "Plan\"}\202\323\344\223\002F\022D/api/v1/launch_plans/{id.p" +
      "roject}/{id.domain}/{id.name}/{id.versio" +
      "n}\222A.\032,Retrieve an existing launch plan " +
      "definition.\022\363\001\n\023GetActiveLaunchPlan\022\'.fl" +
      "yteidl.admin.ActiveLaunchPlanRequest\032\032.f" +
      "lyteidl.admin.LaunchPlan\"\226\001\202\323\344\223\002@\022>/api/" +
      "v1/active_launch_plans/{id.project}/{id." +
      "domain}/{id.name}\222AM\032KRetrieve the activ" +
      "e launch plan version specified by input" +
      " request filters.\022\353\001\n\025ListActiveLaunchPl" +
      "ans\022+.flyteidl.admin.ActiveLaunchPlanLis" +
      "tRequest\032\036.flyteidl.admin.LaunchPlanList" +
      "\"\204\001\202\323\344\223\0020\022./api/v1/active_launch_plans/{" +
      "project}/{domain}\222AK\032IFetch the active l" +
      "aunch plan versions specified by input r" +
      "equest filters.\022\363\001\n\021ListLaunchPlanIds\0220." +
      "flyteidl.admin.NamedEntityIdentifierList" +
      "Request\032).flyteidl.admin.NamedEntityIden" +
      "tifierList\"\200\001\202\323\344\223\002,\022*/api/v1/launch_plan" +
      "_ids/{project}/{domain}\222AK\032IFetch existi" +
      "ng launch plan definition identifiers ma" +
      "tching input filters.\022\214\002\n\017ListLaunchPlan" +
      "s\022#.flyteidl.admin.ResourceListRequest\032\036" +
      ".flyteidl.admin.LaunchPlanList\"\263\001\202\323\344\223\002j\022" +
      "7/api/v1/launch_plans/{id.project}/{id.d" +
      "omain}/{id.name}Z/\022-/api/v1/launch_plans" +
      "/{id.project}/{id.domain}\222A@\032>Fetch exis" +
      "ting launch plan definitions matching in" +
      "put filters.\022\300\006\n\020UpdateLaunchPlan\022\'.flyt" +
      "eidl.admin.LaunchPlanUpdateRequest\032(.fly" +
      "teidl.admin.LaunchPlanUpdateResponse\"\330\005\202" +
      "\323\344\223\002I\032D/api/v1/launch_plans/{id.project}" +
      "/{id.domain}/{id.name}/{id.version}:\001*\222A" +
      "\205\005\032\202\005Update the status of an existing la" +
      "unch plan definition. At most one launch" +
      " plan version for a given {project, doma" +
      "in, name} can be active at a time. If th" +
      "is call sets a launch plan to active and" +
      " existing version is already active, the" +
      " result of this call will be that the fo" +
      "rmerly active launch plan will be made i" +
      "nactive and specified launch plan in thi" +
      "s request will be made active. In the ev" +
      "ent that the formerly active launch plan" +
      " had a schedule associated it with it, t" +
      "his schedule will be disabled. If the re" +
      "ference launch plan in this request is b" +
      "eing set to active and has a schedule as" +
      "sociated with it, the schedule will be e" +
      "nabled.\022\242\001\n\017CreateExecution\022&.flyteidl.a" +
      "dmin.ExecutionCreateRequest\032\'.flyteidl.a" +
      "dmin.ExecutionCreateResponse\">\202\323\344\223\002\027\"\022/a" +
      "pi/v1/executions:\001*\222A\036\032\034Create a workflo" +
      "w execution.\022\261\001\n\021RelaunchExecution\022(.fly" +
      "teidl.admin.ExecutionRelaunchRequest\032\'.f" +
      "lyteidl.admin.ExecutionCreateResponse\"I\202" +
      "\323\344\223\002 \"\033/api/v1/executions/relaunch:\001*\222A " +
      "\032\036Relaunch a workflow execution.\022\235\005\n\020Rec" +
      "overExecution\022\'.flyteidl.admin.Execution" +
      "RecoverRequest\032\'.flyteidl.admin.Executio" +
      "nCreateResponse\"\266\004\202\323\344\223\002\037\"\032/api/v1/execut" +
      "ions/recover:\001*\222A\215\004\032\212\004Recreates a previo" +
      "usly-run workflow execution that will on" +
      "ly start executing from the last known f" +
      "ailure point. In Recover mode, users can" +
      "not change any input parameters or updat" +
      "e the version of the execution. This is " +
      "extremely useful to recover from system " +
      "errors and byzantine faults like - Loss " +
      "of K8s cluster, bugs in platform or inst" +
      "ability, machine failures, downstream sy" +
      "stem failures (downstream services), or " +
      "simply to recover executions that failed" +
      " because of retry exhaustion and should " +
      "complete if tried again.\022\302\001\n\014GetExecutio" +
      "n\022+.flyteidl.admin.WorkflowExecutionGetR" +
      "equest\032\031.flyteidl.admin.Execution\"j\202\323\344\223\002" +
      "7\0225/api/v1/executions/{id.project}/{id.d" +
      "omain}/{id.name}\222A*\032(Retrieve an existin" +
      "g workflow execution.\022\326\001\n\017UpdateExecutio" +
      "n\022&.flyteidl.admin.ExecutionUpdateReques" +
      "t\032\'.flyteidl.admin.ExecutionUpdateRespon" +
      "se\"r\202\323\344\223\002:\0325/api/v1/executions/{id.proje" +
      "ct}/{id.domain}/{id.name}:\001*\222A/\032-Update " +
      "execution belonging to project domain.\022\202" +
      "\002\n\020GetExecutionData\022/.flyteidl.admin.Wor" +
      "kflowExecutionGetDataRequest\0320.flyteidl." +
      "admin.WorkflowExecutionGetDataResponse\"\212" +
      "\001\202\323\344\223\002<\022:/api/v1/data/executions/{id.pro" +
      "ject}/{id.domain}/{id.name}\222AE\032CRetrieve" +
      " input and output data from an existing " +
      "workflow execution.\022\310\001\n\016ListExecutions\022#" +
      ".flyteidl.admin.ResourceListRequest\032\035.fl" +
      "yteidl.admin.ExecutionList\"r\202\323\344\223\002-\022+/api" +
      "/v1/executions/{id.project}/{id.domain}\222" +
      "A<\032:Fetch existing workflow executions m" +
      "atching input filters.\022\364\001\n\022TerminateExec" +
      "ution\022).flyteidl.admin.ExecutionTerminat" +
      "eRequest\032*.flyteidl.admin.ExecutionTermi" +
      "nateResponse\"\206\001\202\323\344\223\002:*5/api/v1/execution" +
      "s/{id.project}/{id.domain}/{id.name}:\001*\222" +
      "AC\032ATerminate the active workflow execut" +
      "ion specified in the request.\022\374\001\n\020GetNod" +
      "eExecution\022\'.flyteidl.admin.NodeExecutio" +
      "nGetRequest\032\035.flyteidl.admin.NodeExecuti" +
      "on\"\237\001\202\323\344\223\002p\022n/api/v1/node_executions/{id" +
      ".execution_id.project}/{id.execution_id." +
      "domain}/{id.execution_id.name}/{id.node_" +
      "id}\222A&\032$Retrieve an existing node execut" +
      "ion.\022\232\002\n\022ListNodeExecutions\022(.flyteidl.a" +
      "dmin.NodeExecutionListRequest\032!.flyteidl" +
      ".admin.NodeExecutionList\"\266\001\202\323\344\223\002u\022s/api/" +
      "v1/node_executions/{workflow_execution_i" +
      "d.project}/{workflow_execution_id.domain" +
      "}/{workflow_execution_id.name}\222A8\0326Fetch" +
      " existing node executions matching input" +
      " filters.\022\357\004\n\031ListNodeExecutionsForTask\022" +
      "/.flyteidl.admin.NodeExecutionForTaskLis" +
      "tRequest\032!.flyteidl.admin.NodeExecutionL" +
      "ist\"\375\003\202\323\344\223\002\254\003\022\251\003/api/v1/children/task_ex" +
      "ecutions/{task_execution_id.node_executi" +
      "on_id.execution_id.project}/{task_execut" +
      "ion_id.node_execution_id.execution_id.do" +
      "main}/{task_execution_id.node_execution_" +
      "id.execution_id.name}/{task_execution_id" +
      ".node_execution_id.node_id}/{task_execut" +
      "ion_id.task_id.project}/{task_execution_" +
      "id.task_id.domain}/{task_execution_id.ta" +
      "sk_id.name}/{task_execution_id.task_id.v" +
      "ersion}/{task_execution_id.retry_attempt" +
      "}\222AG\032EFetch child node executions launch" +
      "ed by the specified task execution.\022\263\002\n\024" +
      "GetNodeExecutionData\022+.flyteidl.admin.No" +
      "deExecutionGetDataRequest\032,.flyteidl.adm" +
      "in.NodeExecutionGetDataResponse\"\277\001\202\323\344\223\002u" +
      "\022s/api/v1/data/node_executions/{id.execu" +
      "tion_id.project}/{id.execution_id.domain" +
      "}/{id.execution_id.name}/{id.node_id}\222AA" +
      "\032?Retrieve input and output data from an" +
      " existing node execution.\022\227\001\n\017RegisterPr" +
      "oject\022&.flyteidl.admin.ProjectRegisterRe" +
      "quest\032\'.flyteidl.admin.ProjectRegisterRe" +
      "sponse\"3\202\323\344\223\002\025\"\020/api/v1/projects:\001*\222A\025\032\023" +
      "Register a project.\022\207\001\n\rUpdateProject\022\027." +
      "flyteidl.admin.Project\032%.flyteidl.admin." +
      "ProjectUpdateResponse\"6\202\323\344\223\002\032\032\025/api/v1/p" +
      "rojects/{id}:\001*\222A\023\032\021Update a project.\022\205\001" +
      "\n\014ListProjects\022\".flyteidl.admin.ProjectL" +
      "istRequest\032\030.flyteidl.admin.Projects\"7\202\323" +
      "\344\223\002\022\022\020/api/v1/projects\222A\034\032\032Fetch registe" +
      "red projects.\022\335\001\n\023CreateWorkflowEvent\022-." +
      "flyteidl.admin.WorkflowExecutionEventReq" +
      "uest\032..flyteidl.admin.WorkflowExecutionE" +
      "ventResponse\"g\202\323\344\223\002\035\"\030/api/v1/events/wor" +
      "kflows:\001*\222AA\032?Create a workflow executio" +
      "n event recording a phase transition.\022\311\001" +
      "\n\017CreateNodeEvent\022).flyteidl.admin.NodeE" +
      "xecutionEventRequest\032*.flyteidl.admin.No" +
      "deExecutionEventResponse\"_\202\323\344\223\002\031\"\024/api/v" +
      "1/events/nodes:\001*\222A=\032;Create a node exec" +
      "ution event recording a phase transition" +
      ".\022\311\001\n\017CreateTaskEvent\022).flyteidl.admin.T" +
      "askExecutionEventRequest\032*.flyteidl.admi" +
      "n.TaskExecutionEventResponse\"_\202\323\344\223\002\031\"\024/a" +
      "pi/v1/events/tasks:\001*\222A=\032;Create a task " +
      "execution event recording a phase transi" +
      "tion.\022\251\003\n\020GetTaskExecution\022\'.flyteidl.ad" +
      "min.TaskExecutionGetRequest\032\035.flyteidl.a" +
      "dmin.TaskExecution\"\314\002\202\323\344\223\002\234\002\022\231\002/api/v1/t" +
      "ask_executions/{id.node_execution_id.exe" +
      "cution_id.project}/{id.node_execution_id" +
      ".execution_id.domain}/{id.node_execution" +
      "_id.execution_id.name}/{id.node_executio" +
      "n_id.node_id}/{id.task_id.project}/{id.t" +
      "ask_id.domain}/{id.task_id.name}/{id.tas" +
      "k_id.version}/{id.retry_attempt}\222A&\032$Ret" +
      "rieve an existing task execution.\022\323\002\n\022Li" +
      "stTaskExecutions\022(.flyteidl.admin.TaskEx" +
      "ecutionListRequest\032!.flyteidl.admin.Task" +
      "ExecutionList\"\357\001\202\323\344\223\002\255\001\022\252\001/api/v1/task_e" +
      "xecutions/{node_execution_id.execution_i" +
      "d.project}/{node_execution_id.execution_" +
      "id.domain}/{node_execution_id.execution_" +
      "id.name}/{node_execution_id.node_id}\222A8\032" +
      "6Fetch existing task executions matching" +
      " input filters.\022\340\003\n\024GetTaskExecutionData" +
      "\022+.flyteidl.admin.TaskExecutionGetDataRe" +
      "quest\032,.flyteidl.admin.TaskExecutionGetD" +
      "ataResponse\"\354\002\202\323\344\223\002\241\002\022\236\002/api/v1/data/tas" +
      "k_executions/{id.node_execution_id.execu" +
      "tion_id.project}/{id.node_execution_id.e" +
      "xecution_id.domain}/{id.node_execution_i" +
      "d.execution_id.name}/{id.node_execution_" +
      "id.node_id}/{id.task_id.project}/{id.tas" +
      "k_id.domain}/{id.task_id.name}/{id.task_" +
      "id.version}/{id.retry_attempt}\222AA\032?Retri" +
      "eve input and output data from an existi" +
      "ng task execution.\022\277\002\n\035UpdateProjectDoma" +
      "inAttributes\0224.flyteidl.admin.ProjectDom" +
      "ainAttributesUpdateRequest\0325.flyteidl.ad" +
      "min.ProjectDomainAttributesUpdateRespons" +
      "e\"\260\001\202\323\344\223\002O\032J/api/v1/project_domain_attri" +
      "butes/{attributes.project}/{attributes.d" +
      "omain}:\001*\222AX\032VUpdate the customized reso" +
      "urce attributes associated with a projec" +
      "t-domain combination\022\237\002\n\032GetProjectDomai" +
      "nAttributes\0221.flyteidl.admin.ProjectDoma" +
      "inAttributesGetRequest\0322.flyteidl.admin." +
      "ProjectDomainAttributesGetResponse\"\231\001\202\323\344" +
      "\223\0026\0224/api/v1/project_domain_attributes/{" +
      "project}/{domain}\222AZ\032XRetrieve the custo" +
      "mized resource attributes associated wit" +
      "h a project-domain combination\022\251\002\n\035Delet" +
      "eProjectDomainAttributes\0224.flyteidl.admi" +
      "n.ProjectDomainAttributesDeleteRequest\0325" +
      ".flyteidl.admin.ProjectDomainAttributesD" +
      "eleteResponse\"\232\001\202\323\344\223\0029*4/api/v1/project_" +
      "domain_attributes/{project}/{domain}:\001*\222" +
      "AX\032VDelete the customized resource attri" +
      "butes associated with a project-domain c" +
      "ombination\022\377\001\n\027UpdateProjectAttributes\022." +
      ".flyteidl.admin.ProjectAttributesUpdateR" +
      "equest\032/.flyteidl.admin.ProjectAttribute" +
      "sUpdateResponse\"\202\001\202\323\344\223\0024\032//api/v1/projec" +
      "t_attributes/{attributes.project}:\001*\222AE\032" +
      "CUpdate the customized resource attribut" +
      "es associated with a project\022\351\001\n\024GetProj" +
      "ectAttributes\022+.flyteidl.admin.ProjectAt" +
      "tributesGetRequest\032,.flyteidl.admin.Proj" +
      "ectAttributesGetResponse\"v\202\323\344\223\002&\022$/api/v" +
      "1/project_attributes/{project}\222AG\032ERetri" +
      "eve the customized resource attributes a" +
      "ssociated with a project\022\363\001\n\027DeleteProje" +
      "ctAttributes\022..flyteidl.admin.ProjectAtt" +
      "ributesDeleteRequest\032/.flyteidl.admin.Pr" +
      "ojectAttributesDeleteResponse\"w\202\323\344\223\002)*$/" +
      "api/v1/project_attributes/{project}:\001*\222A" +
      "E\032CDelete the customized resource attrib" +
      "utes associated with a project\022\316\002\n\030Updat" +
      "eWorkflowAttributes\022/.flyteidl.admin.Wor" +
      "kflowAttributesUpdateRequest\0320.flyteidl." +
      "admin.WorkflowAttributesUpdateResponse\"\316" +
      "\001\202\323\344\223\002_\032Z/api/v1/workflow_attributes/{at" +
      "tributes.project}/{attributes.domain}/{a" +
      "ttributes.workflow}:\001*\222Af\032dUpdate the cu" +
      "stomized resource attributes associated " +
      "with a project, domain and workflow comb" +
      "ination\022\243\002\n\025GetWorkflowAttributes\022,.flyt" +
      "eidl.admin.WorkflowAttributesGetRequest\032" +
      "-.flyteidl.admin.WorkflowAttributesGetRe" +
      "sponse\"\254\001\202\323\344\223\002;\0229/api/v1/workflow_attrib" +
      "utes/{project}/{domain}/{workflow}\222Ah\032fR" +
      "etrieve the customized resource attribut" +
      "es associated with a project, domain and" +
      " workflow combination\022\255\002\n\030DeleteWorkflow" +
      "Attributes\022/.flyteidl.admin.WorkflowAttr" +
      "ibutesDeleteRequest\0320.flyteidl.admin.Wor" +
      "kflowAttributesDeleteResponse\"\255\001\202\323\344\223\002>*9" +
      "/api/v1/workflow_attributes/{project}/{d" +
      "omain}/{workflow}:\001*\222Af\032dDelete the cust" +
      "omized resource attributes associated wi" +
      "th a project, domain and workflow combin" +
      "ation\022\341\001\n\027ListMatchableAttributes\022..flyt" +
      "eidl.admin.ListMatchableAttributesReques" +
      "t\032/.flyteidl.admin.ListMatchableAttribut" +
      "esResponse\"e\202\323\344\223\002\036\022\034/api/v1/matchable_at" +
      "tributes\222A>\032<Retrieve a list of Matchabl" +
      "eAttributesConfiguration objects.\022\200\002\n\021Li" +
      "stNamedEntities\022&.flyteidl.admin.NamedEn" +
      "tityListRequest\032\037.flyteidl.admin.NamedEn" +
      "tityList\"\241\001\202\323\344\223\002;\0229/api/v1/named_entitie" +
      "s/{resource_type}/{project}/{domain}\222A]\032" +
      "[Retrieve a list of NamedEntity objects " +
      "sharing a common resource type, project," +
      " and domain.\022\312\001\n\016GetNamedEntity\022%.flytei" +
      "dl.admin.NamedEntityGetRequest\032\033.flyteid" +
      "l.admin.NamedEntity\"t\202\323\344\223\002K\022I/api/v1/nam" +
      "ed_entities/{resource_type}/{id.project}" +
      "/{id.domain}/{id.name}\222A \032\036Retrieve a Na" +
      "medEntity object.\022\363\001\n\021UpdateNamedEntity\022" +
      "(.flyteidl.admin.NamedEntityUpdateReques" +
      "t\032).flyteidl.admin.NamedEntityUpdateResp" +
      "onse\"\210\001\202\323\344\223\002N\032I/api/v1/named_entities/{r" +
      "esource_type}/{id.project}/{id.domain}/{" +
      "id.name}:\001*\222A1\032/Update the fields associ" +
      "ated with a NamedEntity\022\277\001\n\nGetVersion\022!" +
      ".flyteidl.admin.GetVersionRequest\032\".flyt" +
      "eidl.admin.GetVersionResponse\"j\202\323\344\223\002\021\022\017/" +
      "api/v1/version\222AP\032NRetrieve the Version " +
      "(including the Build  information) for F" +
      "lyteAdmin service\022\353\001\n\024GetDescriptionEnti" +
      "ty\022 .flyteidl.admin.ObjectGetRequest\032!.f" +
      "lyteidl.admin.DescriptionEntity\"\215\001\202\323\344\223\002N" +
      "\022L/api/v1/description_entities/{id.proje" +
      "ct}/{id.domain}/{id.name}/{id.version}\222A" +
      "6\0324Retrieve an existing description enti" +
      "ty description.\022\273\002\n\027ListDescriptionEntit" +
      "ies\022,.flyteidl.admin.DescriptionEntityLi" +
      "stRequest\032%.flyteidl.admin.DescriptionEn" +
      "tityList\"\312\001\202\323\344\223\002z\022?/api/v1/description_e" +
      "ntities/{id.project}/{id.domain}/{id.nam" +
      "e}Z7\0225/api/v1/description_entities/{id.p" +
      "roject}/{id.domain}\222AG\032EFetch existing d" +
      "escription entity definitions matching i" +
      "nput filters.B9Z7github.com/flyteorg/fly" +
      "teidl/gen/pb-go/flyteidl/serviceb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.api.AnnotationsProto.getDescriptor(),
          flyteidl.admin.ProjectOuterClass.getDescriptor(),
          flyteidl.admin.ProjectDomainAttributesOuterClass.getDescriptor(),
          flyteidl.admin.ProjectAttributesOuterClass.getDescriptor(),
          flyteidl.admin.TaskOuterClass.getDescriptor(),
          flyteidl.admin.WorkflowOuterClass.getDescriptor(),
          flyteidl.admin.WorkflowAttributesOuterClass.getDescriptor(),
          flyteidl.admin.LaunchPlanOuterClass.getDescriptor(),
          flyteidl.admin.Event.getDescriptor(),
          flyteidl.admin.ExecutionOuterClass.getDescriptor(),
          flyteidl.admin.MatchableResourceOuterClass.getDescriptor(),
          flyteidl.admin.NodeExecutionOuterClass.getDescriptor(),
          flyteidl.admin.TaskExecutionOuterClass.getDescriptor(),
          flyteidl.admin.VersionOuterClass.getDescriptor(),
          flyteidl.admin.Common.getDescriptor(),
          flyteidl.admin.DescriptionEntityOuterClass.getDescriptor(),
          grpc.gateway.protoc_gen_swagger.options.Annotations.getDescriptor(),
        }, assigner);
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.google.api.AnnotationsProto.http);
    registry.add(grpc.gateway.protoc_gen_swagger.options.Annotations.openapiv2Operation);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.google.api.AnnotationsProto.getDescriptor();
    flyteidl.admin.ProjectOuterClass.getDescriptor();
    flyteidl.admin.ProjectDomainAttributesOuterClass.getDescriptor();
    flyteidl.admin.ProjectAttributesOuterClass.getDescriptor();
    flyteidl.admin.TaskOuterClass.getDescriptor();
    flyteidl.admin.WorkflowOuterClass.getDescriptor();
    flyteidl.admin.WorkflowAttributesOuterClass.getDescriptor();
    flyteidl.admin.LaunchPlanOuterClass.getDescriptor();
    flyteidl.admin.Event.getDescriptor();
    flyteidl.admin.ExecutionOuterClass.getDescriptor();
    flyteidl.admin.MatchableResourceOuterClass.getDescriptor();
    flyteidl.admin.NodeExecutionOuterClass.getDescriptor();
    flyteidl.admin.TaskExecutionOuterClass.getDescriptor();
    flyteidl.admin.VersionOuterClass.getDescriptor();
    flyteidl.admin.Common.getDescriptor();
    flyteidl.admin.DescriptionEntityOuterClass.getDescriptor();
    grpc.gateway.protoc_gen_swagger.options.Annotations.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
