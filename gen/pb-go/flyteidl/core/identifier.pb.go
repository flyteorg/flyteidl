// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/core/identifier.proto

package core

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Indicates a resource type within Flyte.
type ResourceType int32

const (
	ResourceType_UNSPECIFIED ResourceType = 0
	ResourceType_TASK        ResourceType = 1
	ResourceType_WORKFLOW    ResourceType = 2
	ResourceType_LAUNCH_PLAN ResourceType = 3
	// A dataset represents an entity modeled in Flyte DataCatalog. A Dataset is also a versioned entity and can be a compilation of multiple individual objects.
	// Eventually all Catalog objects should be modeled similar to Flyte Objects. The Dataset entities makes it possible for the UI  and CLI to act on the objects
	// in a similar manner to other Flyte objects
	ResourceType_DATASET ResourceType = 4
)

var ResourceType_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "TASK",
	2: "WORKFLOW",
	3: "LAUNCH_PLAN",
	4: "DATASET",
}

var ResourceType_value = map[string]int32{
	"UNSPECIFIED": 0,
	"TASK":        1,
	"WORKFLOW":    2,
	"LAUNCH_PLAN": 3,
	"DATASET":     4,
}

func (x ResourceType) String() string {
	return proto.EnumName(ResourceType_name, int32(x))
}

func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_adfa846a86e1fa0c, []int{0}
}

// Encapsulation of fields that uniquely identifies a Flyte resource.
type Identifier struct {
	// Identifies the specific type of resource that this identifier corresponds to.
	ResourceType ResourceType `protobuf:"varint,1,opt,name=resource_type,json=resourceType,proto3,enum=flyteidl.core.ResourceType" json:"resource_type,omitempty"`
	// Name of the project the resource belongs to.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Name of the domain the resource belongs to.
	// A domain can be considered as a subset within a specific project.
	Domain string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	// User provided value for the resource.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Specific version of the resource.
	Version              string   `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Identifier) Reset()         { *m = Identifier{} }
func (m *Identifier) String() string { return proto.CompactTextString(m) }
func (*Identifier) ProtoMessage()    {}
func (*Identifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_adfa846a86e1fa0c, []int{0}
}

func (m *Identifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Identifier.Unmarshal(m, b)
}
func (m *Identifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Identifier.Marshal(b, m, deterministic)
}
func (m *Identifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Identifier.Merge(m, src)
}
func (m *Identifier) XXX_Size() int {
	return xxx_messageInfo_Identifier.Size(m)
}
func (m *Identifier) XXX_DiscardUnknown() {
	xxx_messageInfo_Identifier.DiscardUnknown(m)
}

var xxx_messageInfo_Identifier proto.InternalMessageInfo

func (m *Identifier) GetResourceType() ResourceType {
	if m != nil {
		return m.ResourceType
	}
	return ResourceType_UNSPECIFIED
}

func (m *Identifier) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *Identifier) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Identifier) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Identifier) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// Encapsulation of fields that uniquely identifies a Flyte workflow execution
type WorkflowExecutionIdentifier struct {
	// Name of the project the resource belongs to.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Name of the domain the resource belongs to.
	// A domain can be considered as a subset within a specific project.
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	// User or system provided value for the resource.
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkflowExecutionIdentifier) Reset()         { *m = WorkflowExecutionIdentifier{} }
func (m *WorkflowExecutionIdentifier) String() string { return proto.CompactTextString(m) }
func (*WorkflowExecutionIdentifier) ProtoMessage()    {}
func (*WorkflowExecutionIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_adfa846a86e1fa0c, []int{1}
}

func (m *WorkflowExecutionIdentifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkflowExecutionIdentifier.Unmarshal(m, b)
}
func (m *WorkflowExecutionIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkflowExecutionIdentifier.Marshal(b, m, deterministic)
}
func (m *WorkflowExecutionIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionIdentifier.Merge(m, src)
}
func (m *WorkflowExecutionIdentifier) XXX_Size() int {
	return xxx_messageInfo_WorkflowExecutionIdentifier.Size(m)
}
func (m *WorkflowExecutionIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionIdentifier proto.InternalMessageInfo

func (m *WorkflowExecutionIdentifier) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *WorkflowExecutionIdentifier) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *WorkflowExecutionIdentifier) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Encapsulation of fields that identify a Flyte node execution entity.
type NodeExecutionIdentifier struct {
	NodeId               string                       `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	ExecutionId          *WorkflowExecutionIdentifier `protobuf:"bytes,2,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *NodeExecutionIdentifier) Reset()         { *m = NodeExecutionIdentifier{} }
func (m *NodeExecutionIdentifier) String() string { return proto.CompactTextString(m) }
func (*NodeExecutionIdentifier) ProtoMessage()    {}
func (*NodeExecutionIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_adfa846a86e1fa0c, []int{2}
}

func (m *NodeExecutionIdentifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeExecutionIdentifier.Unmarshal(m, b)
}
func (m *NodeExecutionIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeExecutionIdentifier.Marshal(b, m, deterministic)
}
func (m *NodeExecutionIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeExecutionIdentifier.Merge(m, src)
}
func (m *NodeExecutionIdentifier) XXX_Size() int {
	return xxx_messageInfo_NodeExecutionIdentifier.Size(m)
}
func (m *NodeExecutionIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeExecutionIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_NodeExecutionIdentifier proto.InternalMessageInfo

func (m *NodeExecutionIdentifier) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *NodeExecutionIdentifier) GetExecutionId() *WorkflowExecutionIdentifier {
	if m != nil {
		return m.ExecutionId
	}
	return nil
}

// Encapsulation of fields that identify a Flyte task execution entity.
type TaskExecutionIdentifier struct {
	TaskId               *Identifier              `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	NodeExecutionId      *NodeExecutionIdentifier `protobuf:"bytes,2,opt,name=node_execution_id,json=nodeExecutionId,proto3" json:"node_execution_id,omitempty"`
	RetryAttempt         uint32                   `protobuf:"varint,3,opt,name=retry_attempt,json=retryAttempt,proto3" json:"retry_attempt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *TaskExecutionIdentifier) Reset()         { *m = TaskExecutionIdentifier{} }
func (m *TaskExecutionIdentifier) String() string { return proto.CompactTextString(m) }
func (*TaskExecutionIdentifier) ProtoMessage()    {}
func (*TaskExecutionIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_adfa846a86e1fa0c, []int{3}
}

func (m *TaskExecutionIdentifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskExecutionIdentifier.Unmarshal(m, b)
}
func (m *TaskExecutionIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskExecutionIdentifier.Marshal(b, m, deterministic)
}
func (m *TaskExecutionIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskExecutionIdentifier.Merge(m, src)
}
func (m *TaskExecutionIdentifier) XXX_Size() int {
	return xxx_messageInfo_TaskExecutionIdentifier.Size(m)
}
func (m *TaskExecutionIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskExecutionIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_TaskExecutionIdentifier proto.InternalMessageInfo

func (m *TaskExecutionIdentifier) GetTaskId() *Identifier {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *TaskExecutionIdentifier) GetNodeExecutionId() *NodeExecutionIdentifier {
	if m != nil {
		return m.NodeExecutionId
	}
	return nil
}

func (m *TaskExecutionIdentifier) GetRetryAttempt() uint32 {
	if m != nil {
		return m.RetryAttempt
	}
	return 0
}

// Encapsulation of fields the uniquely identify a signal.
type SignalIdentifier struct {
	// Unique identifier for a signal.
	SignalId string `protobuf:"bytes,1,opt,name=signal_id,json=signalId,proto3" json:"signal_id,omitempty"`
	// Identifies the Flyte workflow execution this signal belongs to.
	ExecutionId          *WorkflowExecutionIdentifier `protobuf:"bytes,2,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *SignalIdentifier) Reset()         { *m = SignalIdentifier{} }
func (m *SignalIdentifier) String() string { return proto.CompactTextString(m) }
func (*SignalIdentifier) ProtoMessage()    {}
func (*SignalIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_adfa846a86e1fa0c, []int{4}
}

func (m *SignalIdentifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignalIdentifier.Unmarshal(m, b)
}
func (m *SignalIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignalIdentifier.Marshal(b, m, deterministic)
}
func (m *SignalIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalIdentifier.Merge(m, src)
}
func (m *SignalIdentifier) XXX_Size() int {
	return xxx_messageInfo_SignalIdentifier.Size(m)
}
func (m *SignalIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_SignalIdentifier proto.InternalMessageInfo

func (m *SignalIdentifier) GetSignalId() string {
	if m != nil {
		return m.SignalId
	}
	return ""
}

func (m *SignalIdentifier) GetExecutionId() *WorkflowExecutionIdentifier {
	if m != nil {
		return m.ExecutionId
	}
	return nil
}

type ArtifactKey struct {
	// Project and domain and suffix needs to be unique across a given artifact store.
	Project              string   `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Domain               string   `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArtifactKey) Reset()         { *m = ArtifactKey{} }
func (m *ArtifactKey) String() string { return proto.CompactTextString(m) }
func (*ArtifactKey) ProtoMessage()    {}
func (*ArtifactKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_adfa846a86e1fa0c, []int{5}
}

func (m *ArtifactKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArtifactKey.Unmarshal(m, b)
}
func (m *ArtifactKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArtifactKey.Marshal(b, m, deterministic)
}
func (m *ArtifactKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArtifactKey.Merge(m, src)
}
func (m *ArtifactKey) XXX_Size() int {
	return xxx_messageInfo_ArtifactKey.Size(m)
}
func (m *ArtifactKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ArtifactKey.DiscardUnknown(m)
}

var xxx_messageInfo_ArtifactKey proto.InternalMessageInfo

func (m *ArtifactKey) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ArtifactKey) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ArtifactKey) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ArtifactID struct {
	ArtifactKey *ArtifactKey `protobuf:"bytes,1,opt,name=artifact_key,json=artifactKey,proto3" json:"artifact_key,omitempty"`
	Version     string       `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// here for ds popularity
	Partitions           map[string]string `protobuf:"bytes,3,rep,name=partitions,proto3" json:"partitions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ArtifactID) Reset()         { *m = ArtifactID{} }
func (m *ArtifactID) String() string { return proto.CompactTextString(m) }
func (*ArtifactID) ProtoMessage()    {}
func (*ArtifactID) Descriptor() ([]byte, []int) {
	return fileDescriptor_adfa846a86e1fa0c, []int{6}
}

func (m *ArtifactID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArtifactID.Unmarshal(m, b)
}
func (m *ArtifactID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArtifactID.Marshal(b, m, deterministic)
}
func (m *ArtifactID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArtifactID.Merge(m, src)
}
func (m *ArtifactID) XXX_Size() int {
	return xxx_messageInfo_ArtifactID.Size(m)
}
func (m *ArtifactID) XXX_DiscardUnknown() {
	xxx_messageInfo_ArtifactID.DiscardUnknown(m)
}

var xxx_messageInfo_ArtifactID proto.InternalMessageInfo

func (m *ArtifactID) GetArtifactKey() *ArtifactKey {
	if m != nil {
		return m.ArtifactKey
	}
	return nil
}

func (m *ArtifactID) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ArtifactID) GetPartitions() map[string]string {
	if m != nil {
		return m.Partitions
	}
	return nil
}

type ArtifactTag struct {
	ArtifactKey          *ArtifactKey `protobuf:"bytes,1,opt,name=artifact_key,json=artifactKey,proto3" json:"artifact_key,omitempty"`
	Value                string       `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ArtifactTag) Reset()         { *m = ArtifactTag{} }
func (m *ArtifactTag) String() string { return proto.CompactTextString(m) }
func (*ArtifactTag) ProtoMessage()    {}
func (*ArtifactTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_adfa846a86e1fa0c, []int{7}
}

func (m *ArtifactTag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArtifactTag.Unmarshal(m, b)
}
func (m *ArtifactTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArtifactTag.Marshal(b, m, deterministic)
}
func (m *ArtifactTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArtifactTag.Merge(m, src)
}
func (m *ArtifactTag) XXX_Size() int {
	return xxx_messageInfo_ArtifactTag.Size(m)
}
func (m *ArtifactTag) XXX_DiscardUnknown() {
	xxx_messageInfo_ArtifactTag.DiscardUnknown(m)
}

var xxx_messageInfo_ArtifactTag proto.InternalMessageInfo

func (m *ArtifactTag) GetArtifactKey() *ArtifactKey {
	if m != nil {
		return m.ArtifactKey
	}
	return nil
}

func (m *ArtifactTag) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Uniqueness constraints for Artifacts
//  - project, domain, name, version, partitions
// Option 2 (tags are standalone, point to an individual artifact id):
//  - project, domain, name, alias (points to one partition if partitioned)
//  - project, domain, name, partition key, partition value
type ArtifactQuery struct {
	// Types that are valid to be assigned to Identifier:
	//	*ArtifactQuery_ArtifactId
	//	*ArtifactQuery_ArtifactTag
	//	*ArtifactQuery_Uri
	Identifier           isArtifactQuery_Identifier `protobuf_oneof:"identifier"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ArtifactQuery) Reset()         { *m = ArtifactQuery{} }
func (m *ArtifactQuery) String() string { return proto.CompactTextString(m) }
func (*ArtifactQuery) ProtoMessage()    {}
func (*ArtifactQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_adfa846a86e1fa0c, []int{8}
}

func (m *ArtifactQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArtifactQuery.Unmarshal(m, b)
}
func (m *ArtifactQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArtifactQuery.Marshal(b, m, deterministic)
}
func (m *ArtifactQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArtifactQuery.Merge(m, src)
}
func (m *ArtifactQuery) XXX_Size() int {
	return xxx_messageInfo_ArtifactQuery.Size(m)
}
func (m *ArtifactQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ArtifactQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ArtifactQuery proto.InternalMessageInfo

type isArtifactQuery_Identifier interface {
	isArtifactQuery_Identifier()
}

type ArtifactQuery_ArtifactId struct {
	ArtifactId *ArtifactID `protobuf:"bytes,1,opt,name=artifact_id,json=artifactId,proto3,oneof"`
}

type ArtifactQuery_ArtifactTag struct {
	ArtifactTag *ArtifactTag `protobuf:"bytes,2,opt,name=artifact_tag,json=artifactTag,proto3,oneof"`
}

type ArtifactQuery_Uri struct {
	Uri string `protobuf:"bytes,3,opt,name=uri,proto3,oneof"`
}

func (*ArtifactQuery_ArtifactId) isArtifactQuery_Identifier() {}

func (*ArtifactQuery_ArtifactTag) isArtifactQuery_Identifier() {}

func (*ArtifactQuery_Uri) isArtifactQuery_Identifier() {}

func (m *ArtifactQuery) GetIdentifier() isArtifactQuery_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *ArtifactQuery) GetArtifactId() *ArtifactID {
	if x, ok := m.GetIdentifier().(*ArtifactQuery_ArtifactId); ok {
		return x.ArtifactId
	}
	return nil
}

func (m *ArtifactQuery) GetArtifactTag() *ArtifactTag {
	if x, ok := m.GetIdentifier().(*ArtifactQuery_ArtifactTag); ok {
		return x.ArtifactTag
	}
	return nil
}

func (m *ArtifactQuery) GetUri() string {
	if x, ok := m.GetIdentifier().(*ArtifactQuery_Uri); ok {
		return x.Uri
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ArtifactQuery) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ArtifactQuery_ArtifactId)(nil),
		(*ArtifactQuery_ArtifactTag)(nil),
		(*ArtifactQuery_Uri)(nil),
	}
}

func init() {
	proto.RegisterEnum("flyteidl.core.ResourceType", ResourceType_name, ResourceType_value)
	proto.RegisterType((*Identifier)(nil), "flyteidl.core.Identifier")
	proto.RegisterType((*WorkflowExecutionIdentifier)(nil), "flyteidl.core.WorkflowExecutionIdentifier")
	proto.RegisterType((*NodeExecutionIdentifier)(nil), "flyteidl.core.NodeExecutionIdentifier")
	proto.RegisterType((*TaskExecutionIdentifier)(nil), "flyteidl.core.TaskExecutionIdentifier")
	proto.RegisterType((*SignalIdentifier)(nil), "flyteidl.core.SignalIdentifier")
	proto.RegisterType((*ArtifactKey)(nil), "flyteidl.core.ArtifactKey")
	proto.RegisterType((*ArtifactID)(nil), "flyteidl.core.ArtifactID")
	proto.RegisterMapType((map[string]string)(nil), "flyteidl.core.ArtifactID.PartitionsEntry")
	proto.RegisterType((*ArtifactTag)(nil), "flyteidl.core.ArtifactTag")
	proto.RegisterType((*ArtifactQuery)(nil), "flyteidl.core.ArtifactQuery")
}

func init() { proto.RegisterFile("flyteidl/core/identifier.proto", fileDescriptor_adfa846a86e1fa0c) }

var fileDescriptor_adfa846a86e1fa0c = []byte{
	// 651 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xd1, 0x6a, 0xdb, 0x4a,
	0x10, 0xb5, 0x2c, 0xc7, 0x4e, 0x46, 0xf6, 0x8d, 0xee, 0x72, 0xb9, 0xd1, 0x4d, 0xe0, 0x12, 0x54,
	0x28, 0x69, 0xa0, 0x36, 0xb8, 0xa5, 0x94, 0xd2, 0xd0, 0x2a, 0xb1, 0x83, 0x45, 0x52, 0x27, 0x95,
	0x15, 0x02, 0x7d, 0x31, 0x6b, 0x69, 0xad, 0xaa, 0xb6, 0xb5, 0x62, 0xb5, 0x4e, 0xab, 0x97, 0x42,
	0x7f, 0xa8, 0xf4, 0x2b, 0xfa, 0x3b, 0xfd, 0x85, 0xb2, 0xb2, 0x64, 0xcb, 0xc6, 0x6e, 0x1f, 0xd2,
	0xb7, 0x9d, 0x99, 0x33, 0x33, 0x67, 0x66, 0x0f, 0x03, 0xff, 0x0f, 0xc7, 0x31, 0x27, 0xbe, 0x3b,
	0x6e, 0x38, 0x94, 0x91, 0x86, 0xef, 0x92, 0x80, 0xfb, 0x43, 0x9f, 0xb0, 0x7a, 0xc8, 0x28, 0xa7,
	0xa8, 0x96, 0xc5, 0xeb, 0x22, 0xae, 0x7f, 0x95, 0x00, 0xcc, 0x39, 0x06, 0xbd, 0x86, 0x1a, 0x23,
	0x11, 0x9d, 0x32, 0x87, 0xf4, 0x79, 0x1c, 0x12, 0x4d, 0x3a, 0x94, 0x8e, 0xfe, 0x6a, 0x1e, 0xd4,
	0x97, 0xb2, 0xea, 0x56, 0x8a, 0xb1, 0xe3, 0x90, 0x58, 0x55, 0x96, 0xb3, 0x90, 0x06, 0x95, 0x90,
	0xd1, 0x0f, 0xc4, 0xe1, 0x5a, 0xf1, 0x50, 0x3a, 0xda, 0xb1, 0x32, 0x13, 0xfd, 0x0b, 0x65, 0x97,
	0x4e, 0xb0, 0x1f, 0x68, 0x72, 0x12, 0x48, 0x2d, 0x84, 0xa0, 0x14, 0xe0, 0x09, 0xd1, 0x4a, 0x89,
	0x37, 0x79, 0x8b, 0x2a, 0x77, 0x84, 0x45, 0x3e, 0x0d, 0xb4, 0xad, 0x59, 0x95, 0xd4, 0xd4, 0x1d,
	0x38, 0xb8, 0xa5, 0x6c, 0x34, 0x1c, 0xd3, 0x8f, 0xed, 0x4f, 0xc4, 0x99, 0x72, 0x9f, 0x06, 0xb9,
	0x01, 0x72, 0xed, 0xa5, 0x4d, 0xed, 0x8b, 0xbf, 0x6b, 0xaf, 0x7f, 0x91, 0x60, 0xaf, 0x4b, 0x5d,
	0xb2, 0xae, 0xc3, 0x1e, 0x54, 0x02, 0xea, 0x92, 0xbe, 0xef, 0xa6, 0x1d, 0xca, 0xc2, 0x34, 0x5d,
	0xf4, 0x06, 0xaa, 0x24, 0xc3, 0x8b, 0xa8, 0x68, 0xa3, 0x34, 0x8f, 0x57, 0x56, 0xf7, 0x0b, 0xf2,
	0x96, 0x42, 0x16, 0x4e, 0xfd, 0xbb, 0x04, 0x7b, 0x36, 0x8e, 0x46, 0xeb, 0x38, 0x34, 0xa1, 0xc2,
	0x71, 0x34, 0xca, 0x38, 0x28, 0xcd, 0xff, 0x56, 0xba, 0xe4, 0x8a, 0x96, 0x05, 0xd2, 0x74, 0x91,
	0x05, 0x7f, 0x27, 0xbc, 0xd7, 0x70, 0x7c, 0xb8, 0x92, 0xbd, 0x61, 0x74, 0x6b, 0x37, 0x58, 0x0e,
	0xa0, 0x07, 0x42, 0x2e, 0x9c, 0xc5, 0x7d, 0xcc, 0x39, 0x99, 0x84, 0x3c, 0xf9, 0xd9, 0x9a, 0x50,
	0x04, 0x67, 0xb1, 0x31, 0xf3, 0xe9, 0x9f, 0x41, 0xed, 0xf9, 0x5e, 0x80, 0xc7, 0xb9, 0x01, 0x0e,
	0x60, 0x27, 0x4a, 0x7c, 0x8b, 0x35, 0x6e, 0x47, 0x29, 0xe8, 0x4f, 0x2f, 0xb2, 0x07, 0x8a, 0xc1,
	0xb8, 0x3f, 0xc4, 0x0e, 0xbf, 0x20, 0xf1, 0x3d, 0x14, 0x22, 0xe7, 0x14, 0xf2, 0x43, 0x02, 0xc8,
	0xaa, 0x9a, 0x2d, 0x74, 0x02, 0x55, 0x9c, 0x5a, 0xfd, 0x11, 0x89, 0xd3, 0x5f, 0xd9, 0x5f, 0xa1,
	0x9c, 0xa3, 0x61, 0x29, 0x78, 0x99, 0x53, 0x26, 0xf7, 0xe2, 0x92, 0xdc, 0x91, 0x09, 0x10, 0x0a,
	0xa4, 0x98, 0x25, 0xd2, 0xe4, 0x43, 0xf9, 0x48, 0x69, 0x3e, 0xda, 0x50, 0xd6, 0x6c, 0xd5, 0xaf,
	0xe7, 0xd8, 0x76, 0xc0, 0x59, 0x6c, 0xe5, 0x92, 0xf7, 0x4f, 0x60, 0x77, 0x25, 0x8c, 0x54, 0x90,
	0x33, 0xb6, 0x3b, 0x96, 0x78, 0xa2, 0x7f, 0x60, 0xeb, 0x0e, 0x8f, 0xa7, 0x24, 0xe5, 0x31, 0x33,
	0x5e, 0x14, 0x9f, 0x4b, 0xfa, 0x60, 0xb1, 0x46, 0x1b, 0x7b, 0xf7, 0x9d, 0x78, 0x6d, 0x1f, 0xfd,
	0x9b, 0x04, 0xb5, 0x2c, 0xe5, 0xed, 0x94, 0xb0, 0x18, 0xbd, 0x84, 0x79, 0xda, 0x66, 0xb5, 0x2f,
	0x16, 0xd0, 0x29, 0x58, 0x90, 0xe1, 0x4d, 0x17, 0xbd, 0xca, 0x91, 0xe4, 0xd8, 0x4b, 0x95, 0xb4,
	0x89, 0xa4, 0x8d, 0xbd, 0x4e, 0x61, 0x41, 0x53, 0x4c, 0x89, 0x40, 0x9e, 0x32, 0x7f, 0xf6, 0xf3,
	0x9d, 0x82, 0x25, 0x8c, 0xd3, 0x2a, 0xc0, 0xe2, 0xaa, 0x1e, 0xdf, 0x40, 0x35, 0x7f, 0x0d, 0xd1,
	0x2e, 0x28, 0x37, 0xdd, 0xde, 0x75, 0xfb, 0xcc, 0x3c, 0x37, 0xdb, 0x2d, 0xb5, 0x80, 0xb6, 0xa1,
	0x64, 0x1b, 0xbd, 0x0b, 0x55, 0x42, 0x55, 0xd8, 0xbe, 0xbd, 0xb2, 0x2e, 0xce, 0x2f, 0xaf, 0x6e,
	0xd5, 0xa2, 0x00, 0x5e, 0x1a, 0x37, 0xdd, 0xb3, 0x4e, 0xff, 0xfa, 0xd2, 0xe8, 0xaa, 0x32, 0x52,
	0xa0, 0xd2, 0x32, 0x6c, 0xa3, 0xd7, 0xb6, 0xd5, 0xd2, 0xe9, 0xb3, 0x77, 0x4f, 0x3d, 0x9f, 0xbf,
	0x9f, 0x0e, 0xea, 0x0e, 0x9d, 0x34, 0x12, 0xbe, 0x94, 0x79, 0x8d, 0xf9, 0x71, 0xf7, 0x48, 0xd0,
	0x08, 0x07, 0x8f, 0x3d, 0xda, 0x58, 0xba, 0xf7, 0x83, 0x72, 0x72, 0xe5, 0x9f, 0xfc, 0x0c, 0x00,
	0x00, 0xff, 0xff, 0x71, 0x6c, 0xb2, 0xbc, 0x07, 0x06, 0x00, 0x00,
}
