// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/signal.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fadmin_2fsignal_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fadmin_2fsignal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/identifier.pb.h"
#include "flyteidl/core/literals.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fsignal_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fadmin_2fsignal_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fadmin_2fsignal_2eproto();
namespace flyteidl {
namespace admin {
class Signal;
class SignalDefaultTypeInternal;
extern SignalDefaultTypeInternal _Signal_default_instance_;
class SignalCreateRequest;
class SignalCreateRequestDefaultTypeInternal;
extern SignalCreateRequestDefaultTypeInternal _SignalCreateRequest_default_instance_;
class SignalCreateResponse;
class SignalCreateResponseDefaultTypeInternal;
extern SignalCreateResponseDefaultTypeInternal _SignalCreateResponse_default_instance_;
class SignalGetRequest;
class SignalGetRequestDefaultTypeInternal;
extern SignalGetRequestDefaultTypeInternal _SignalGetRequest_default_instance_;
}  // namespace admin
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::admin::Signal* Arena::CreateMaybeMessage<::flyteidl::admin::Signal>(Arena*);
template<> ::flyteidl::admin::SignalCreateRequest* Arena::CreateMaybeMessage<::flyteidl::admin::SignalCreateRequest>(Arena*);
template<> ::flyteidl::admin::SignalCreateResponse* Arena::CreateMaybeMessage<::flyteidl::admin::SignalCreateResponse>(Arena*);
template<> ::flyteidl::admin::SignalGetRequest* Arena::CreateMaybeMessage<::flyteidl::admin::SignalGetRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace admin {

// ===================================================================

class SignalCreateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.SignalCreateRequest) */ {
 public:
  SignalCreateRequest();
  virtual ~SignalCreateRequest();

  SignalCreateRequest(const SignalCreateRequest& from);

  inline SignalCreateRequest& operator=(const SignalCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignalCreateRequest(SignalCreateRequest&& from) noexcept
    : SignalCreateRequest() {
    *this = ::std::move(from);
  }

  inline SignalCreateRequest& operator=(SignalCreateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SignalCreateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignalCreateRequest* internal_default_instance() {
    return reinterpret_cast<const SignalCreateRequest*>(
               &_SignalCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SignalCreateRequest* other);
  friend void swap(SignalCreateRequest& a, SignalCreateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignalCreateRequest* New() const final {
    return CreateMaybeMessage<SignalCreateRequest>(nullptr);
  }

  SignalCreateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SignalCreateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SignalCreateRequest& from);
  void MergeFrom(const SignalCreateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalCreateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.SignalIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::SignalIdentifier& id() const;
  ::flyteidl::core::SignalIdentifier* release_id();
  ::flyteidl::core::SignalIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::core::SignalIdentifier* id);

  // .flyteidl.core.Literal value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::flyteidl::core::Literal& value() const;
  ::flyteidl::core::Literal* release_value();
  ::flyteidl::core::Literal* mutable_value();
  void set_allocated_value(::flyteidl::core::Literal* value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.SignalCreateRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::SignalIdentifier* id_;
  ::flyteidl::core::Literal* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fsignal_2eproto;
};
// -------------------------------------------------------------------

class SignalCreateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.SignalCreateResponse) */ {
 public:
  SignalCreateResponse();
  virtual ~SignalCreateResponse();

  SignalCreateResponse(const SignalCreateResponse& from);

  inline SignalCreateResponse& operator=(const SignalCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignalCreateResponse(SignalCreateResponse&& from) noexcept
    : SignalCreateResponse() {
    *this = ::std::move(from);
  }

  inline SignalCreateResponse& operator=(SignalCreateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SignalCreateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignalCreateResponse* internal_default_instance() {
    return reinterpret_cast<const SignalCreateResponse*>(
               &_SignalCreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SignalCreateResponse* other);
  friend void swap(SignalCreateResponse& a, SignalCreateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignalCreateResponse* New() const final {
    return CreateMaybeMessage<SignalCreateResponse>(nullptr);
  }

  SignalCreateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SignalCreateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SignalCreateResponse& from);
  void MergeFrom(const SignalCreateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalCreateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.SignalCreateResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fsignal_2eproto;
};
// -------------------------------------------------------------------

class SignalGetRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.SignalGetRequest) */ {
 public:
  SignalGetRequest();
  virtual ~SignalGetRequest();

  SignalGetRequest(const SignalGetRequest& from);

  inline SignalGetRequest& operator=(const SignalGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignalGetRequest(SignalGetRequest&& from) noexcept
    : SignalGetRequest() {
    *this = ::std::move(from);
  }

  inline SignalGetRequest& operator=(SignalGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SignalGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignalGetRequest* internal_default_instance() {
    return reinterpret_cast<const SignalGetRequest*>(
               &_SignalGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SignalGetRequest* other);
  friend void swap(SignalGetRequest& a, SignalGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignalGetRequest* New() const final {
    return CreateMaybeMessage<SignalGetRequest>(nullptr);
  }

  SignalGetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SignalGetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SignalGetRequest& from);
  void MergeFrom(const SignalGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalGetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.SignalIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::SignalIdentifier& id() const;
  ::flyteidl::core::SignalIdentifier* release_id();
  ::flyteidl::core::SignalIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::core::SignalIdentifier* id);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.SignalGetRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::SignalIdentifier* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fsignal_2eproto;
};
// -------------------------------------------------------------------

class Signal final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Signal) */ {
 public:
  Signal();
  virtual ~Signal();

  Signal(const Signal& from);

  inline Signal& operator=(const Signal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Signal(Signal&& from) noexcept
    : Signal() {
    *this = ::std::move(from);
  }

  inline Signal& operator=(Signal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Signal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Signal* internal_default_instance() {
    return reinterpret_cast<const Signal*>(
               &_Signal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Signal* other);
  friend void swap(Signal& a, Signal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Signal* New() const final {
    return CreateMaybeMessage<Signal>(nullptr);
  }

  Signal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Signal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Signal& from);
  void MergeFrom(const Signal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.SignalIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::SignalIdentifier& id() const;
  ::flyteidl::core::SignalIdentifier* release_id();
  ::flyteidl::core::SignalIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::core::SignalIdentifier* id);

  // .flyteidl.core.Literal value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::flyteidl::core::Literal& value() const;
  ::flyteidl::core::Literal* release_value();
  ::flyteidl::core::Literal* mutable_value();
  void set_allocated_value(::flyteidl::core::Literal* value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Signal)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::SignalIdentifier* id_;
  ::flyteidl::core::Literal* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fsignal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SignalCreateRequest

// .flyteidl.core.SignalIdentifier id = 1;
inline bool SignalCreateRequest::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::flyteidl::core::SignalIdentifier& SignalCreateRequest::id() const {
  const ::flyteidl::core::SignalIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.SignalCreateRequest.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::SignalIdentifier*>(
      &::flyteidl::core::_SignalIdentifier_default_instance_);
}
inline ::flyteidl::core::SignalIdentifier* SignalCreateRequest::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SignalCreateRequest.id)
  
  ::flyteidl::core::SignalIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::SignalIdentifier* SignalCreateRequest::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::SignalIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SignalCreateRequest.id)
  return id_;
}
inline void SignalCreateRequest::set_allocated_id(::flyteidl::core::SignalIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SignalCreateRequest.id)
}

// .flyteidl.core.Literal value = 2;
inline bool SignalCreateRequest::has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline const ::flyteidl::core::Literal& SignalCreateRequest::value() const {
  const ::flyteidl::core::Literal* p = value_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.SignalCreateRequest.value)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Literal*>(
      &::flyteidl::core::_Literal_default_instance_);
}
inline ::flyteidl::core::Literal* SignalCreateRequest::release_value() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SignalCreateRequest.value)
  
  ::flyteidl::core::Literal* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Literal* SignalCreateRequest::mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Literal>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SignalCreateRequest.value)
  return value_;
}
inline void SignalCreateRequest::set_allocated_value(::flyteidl::core::Literal* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_);
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SignalCreateRequest.value)
}

// -------------------------------------------------------------------

// SignalCreateResponse

// -------------------------------------------------------------------

// SignalGetRequest

// .flyteidl.core.SignalIdentifier id = 1;
inline bool SignalGetRequest::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::flyteidl::core::SignalIdentifier& SignalGetRequest::id() const {
  const ::flyteidl::core::SignalIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.SignalGetRequest.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::SignalIdentifier*>(
      &::flyteidl::core::_SignalIdentifier_default_instance_);
}
inline ::flyteidl::core::SignalIdentifier* SignalGetRequest::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SignalGetRequest.id)
  
  ::flyteidl::core::SignalIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::SignalIdentifier* SignalGetRequest::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::SignalIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SignalGetRequest.id)
  return id_;
}
inline void SignalGetRequest::set_allocated_id(::flyteidl::core::SignalIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SignalGetRequest.id)
}

// -------------------------------------------------------------------

// Signal

// .flyteidl.core.SignalIdentifier id = 1;
inline bool Signal::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::flyteidl::core::SignalIdentifier& Signal::id() const {
  const ::flyteidl::core::SignalIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.Signal.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::SignalIdentifier*>(
      &::flyteidl::core::_SignalIdentifier_default_instance_);
}
inline ::flyteidl::core::SignalIdentifier* Signal::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Signal.id)
  
  ::flyteidl::core::SignalIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::SignalIdentifier* Signal::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::SignalIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Signal.id)
  return id_;
}
inline void Signal::set_allocated_id(::flyteidl::core::SignalIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Signal.id)
}

// .flyteidl.core.Literal value = 2;
inline bool Signal::has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline const ::flyteidl::core::Literal& Signal::value() const {
  const ::flyteidl::core::Literal* p = value_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.Signal.value)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Literal*>(
      &::flyteidl::core::_Literal_default_instance_);
}
inline ::flyteidl::core::Literal* Signal::release_value() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Signal.value)
  
  ::flyteidl::core::Literal* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Literal* Signal::mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Literal>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Signal.value)
  return value_;
}
inline void Signal::set_allocated_value(::flyteidl::core::Literal* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_);
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Signal.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fadmin_2fsignal_2eproto
