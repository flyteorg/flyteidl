// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/datacatalog/datacatalog.proto

#include "flyteidl/datacatalog/datacatalog.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace datacatalog {
constexpr CreateDatasetRequest::CreateDatasetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dataset_(nullptr){}
struct CreateDatasetRequestDefaultTypeInternal {
  constexpr CreateDatasetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateDatasetRequestDefaultTypeInternal() {}
  union {
    CreateDatasetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateDatasetRequestDefaultTypeInternal _CreateDatasetRequest_default_instance_;
constexpr CreateDatasetResponse::CreateDatasetResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CreateDatasetResponseDefaultTypeInternal {
  constexpr CreateDatasetResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateDatasetResponseDefaultTypeInternal() {}
  union {
    CreateDatasetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateDatasetResponseDefaultTypeInternal _CreateDatasetResponse_default_instance_;
constexpr GetDatasetRequest::GetDatasetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dataset_(nullptr){}
struct GetDatasetRequestDefaultTypeInternal {
  constexpr GetDatasetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDatasetRequestDefaultTypeInternal() {}
  union {
    GetDatasetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDatasetRequestDefaultTypeInternal _GetDatasetRequest_default_instance_;
constexpr GetDatasetResponse::GetDatasetResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dataset_(nullptr){}
struct GetDatasetResponseDefaultTypeInternal {
  constexpr GetDatasetResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDatasetResponseDefaultTypeInternal() {}
  union {
    GetDatasetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDatasetResponseDefaultTypeInternal _GetDatasetResponse_default_instance_;
constexpr GetArtifactRequest::GetArtifactRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dataset_(nullptr)
  , _oneof_case_{}{}
struct GetArtifactRequestDefaultTypeInternal {
  constexpr GetArtifactRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetArtifactRequestDefaultTypeInternal() {}
  union {
    GetArtifactRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetArtifactRequestDefaultTypeInternal _GetArtifactRequest_default_instance_;
constexpr GetArtifactResponse::GetArtifactResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : artifact_(nullptr){}
struct GetArtifactResponseDefaultTypeInternal {
  constexpr GetArtifactResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetArtifactResponseDefaultTypeInternal() {}
  union {
    GetArtifactResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetArtifactResponseDefaultTypeInternal _GetArtifactResponse_default_instance_;
constexpr CreateArtifactRequest::CreateArtifactRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : artifact_(nullptr){}
struct CreateArtifactRequestDefaultTypeInternal {
  constexpr CreateArtifactRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateArtifactRequestDefaultTypeInternal() {}
  union {
    CreateArtifactRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateArtifactRequestDefaultTypeInternal _CreateArtifactRequest_default_instance_;
constexpr CreateArtifactResponse::CreateArtifactResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CreateArtifactResponseDefaultTypeInternal {
  constexpr CreateArtifactResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateArtifactResponseDefaultTypeInternal() {}
  union {
    CreateArtifactResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateArtifactResponseDefaultTypeInternal _CreateArtifactResponse_default_instance_;
constexpr AddTagRequest::AddTagRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tag_(nullptr){}
struct AddTagRequestDefaultTypeInternal {
  constexpr AddTagRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddTagRequestDefaultTypeInternal() {}
  union {
    AddTagRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddTagRequestDefaultTypeInternal _AddTagRequest_default_instance_;
constexpr AddTagResponse::AddTagResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AddTagResponseDefaultTypeInternal {
  constexpr AddTagResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddTagResponseDefaultTypeInternal() {}
  union {
    AddTagResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddTagResponseDefaultTypeInternal _AddTagResponse_default_instance_;
constexpr ListArtifactsRequest::ListArtifactsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dataset_(nullptr)
  , filter_(nullptr)
  , pagination_(nullptr){}
struct ListArtifactsRequestDefaultTypeInternal {
  constexpr ListArtifactsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListArtifactsRequestDefaultTypeInternal() {}
  union {
    ListArtifactsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListArtifactsRequestDefaultTypeInternal _ListArtifactsRequest_default_instance_;
constexpr ListArtifactsResponse::ListArtifactsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : artifacts_()
  , next_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListArtifactsResponseDefaultTypeInternal {
  constexpr ListArtifactsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListArtifactsResponseDefaultTypeInternal() {}
  union {
    ListArtifactsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListArtifactsResponseDefaultTypeInternal _ListArtifactsResponse_default_instance_;
constexpr ListDatasetsRequest::ListDatasetsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filter_(nullptr)
  , pagination_(nullptr){}
struct ListDatasetsRequestDefaultTypeInternal {
  constexpr ListDatasetsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListDatasetsRequestDefaultTypeInternal() {}
  union {
    ListDatasetsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListDatasetsRequestDefaultTypeInternal _ListDatasetsRequest_default_instance_;
constexpr ListDatasetsResponse::ListDatasetsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : datasets_()
  , next_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListDatasetsResponseDefaultTypeInternal {
  constexpr ListDatasetsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListDatasetsResponseDefaultTypeInternal() {}
  union {
    ListDatasetsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListDatasetsResponseDefaultTypeInternal _ListDatasetsResponse_default_instance_;
constexpr ReservationID::ReservationID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tag_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dataset_id_(nullptr){}
struct ReservationIDDefaultTypeInternal {
  constexpr ReservationIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReservationIDDefaultTypeInternal() {}
  union {
    ReservationID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReservationIDDefaultTypeInternal _ReservationID_default_instance_;
constexpr GetOrExtendReservationRequest::GetOrExtendReservationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reservation_id_(nullptr)
  , heartbeat_interval_(nullptr){}
struct GetOrExtendReservationRequestDefaultTypeInternal {
  constexpr GetOrExtendReservationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOrExtendReservationRequestDefaultTypeInternal() {}
  union {
    GetOrExtendReservationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOrExtendReservationRequestDefaultTypeInternal _GetOrExtendReservationRequest_default_instance_;
constexpr Reservation::Reservation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reservation_id_(nullptr)
  , heartbeat_interval_(nullptr)
  , expires_at_(nullptr)
  , metadata_(nullptr){}
struct ReservationDefaultTypeInternal {
  constexpr ReservationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReservationDefaultTypeInternal() {}
  union {
    Reservation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReservationDefaultTypeInternal _Reservation_default_instance_;
constexpr GetOrExtendReservationResponse::GetOrExtendReservationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reservation_(nullptr){}
struct GetOrExtendReservationResponseDefaultTypeInternal {
  constexpr GetOrExtendReservationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetOrExtendReservationResponseDefaultTypeInternal() {}
  union {
    GetOrExtendReservationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetOrExtendReservationResponseDefaultTypeInternal _GetOrExtendReservationResponse_default_instance_;
constexpr ReleaseReservationRequest::ReleaseReservationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reservation_id_(nullptr){}
struct ReleaseReservationRequestDefaultTypeInternal {
  constexpr ReleaseReservationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReleaseReservationRequestDefaultTypeInternal() {}
  union {
    ReleaseReservationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReleaseReservationRequestDefaultTypeInternal _ReleaseReservationRequest_default_instance_;
constexpr ReleaseReservationResponse::ReleaseReservationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ReleaseReservationResponseDefaultTypeInternal {
  constexpr ReleaseReservationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReleaseReservationResponseDefaultTypeInternal() {}
  union {
    ReleaseReservationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReleaseReservationResponseDefaultTypeInternal _ReleaseReservationResponse_default_instance_;
constexpr Dataset::Dataset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : partitionkeys_()
  , id_(nullptr)
  , metadata_(nullptr){}
struct DatasetDefaultTypeInternal {
  constexpr DatasetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DatasetDefaultTypeInternal() {}
  union {
    Dataset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DatasetDefaultTypeInternal _Dataset_default_instance_;
constexpr Partition::Partition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PartitionDefaultTypeInternal {
  constexpr PartitionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PartitionDefaultTypeInternal() {}
  union {
    Partition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PartitionDefaultTypeInternal _Partition_default_instance_;
constexpr DatasetID::DatasetID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : project_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , domain_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , uuid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DatasetIDDefaultTypeInternal {
  constexpr DatasetIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DatasetIDDefaultTypeInternal() {}
  union {
    DatasetID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DatasetIDDefaultTypeInternal _DatasetID_default_instance_;
constexpr Artifact::Artifact(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_()
  , partitions_()
  , tags_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dataset_(nullptr)
  , metadata_(nullptr)
  , created_at_(nullptr){}
struct ArtifactDefaultTypeInternal {
  constexpr ArtifactDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ArtifactDefaultTypeInternal() {}
  union {
    Artifact _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ArtifactDefaultTypeInternal _Artifact_default_instance_;
constexpr ArtifactData::ArtifactData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr){}
struct ArtifactDataDefaultTypeInternal {
  constexpr ArtifactDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ArtifactDataDefaultTypeInternal() {}
  union {
    ArtifactData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ArtifactDataDefaultTypeInternal _ArtifactData_default_instance_;
constexpr Tag::Tag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , artifact_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dataset_(nullptr){}
struct TagDefaultTypeInternal {
  constexpr TagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagDefaultTypeInternal() {}
  union {
    Tag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagDefaultTypeInternal _Tag_default_instance_;
constexpr Metadata_KeyMapEntry_DoNotUse::Metadata_KeyMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Metadata_KeyMapEntry_DoNotUseDefaultTypeInternal {
  constexpr Metadata_KeyMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Metadata_KeyMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Metadata_KeyMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Metadata_KeyMapEntry_DoNotUseDefaultTypeInternal _Metadata_KeyMapEntry_DoNotUse_default_instance_;
constexpr Metadata::Metadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct MetadataDefaultTypeInternal {
  constexpr MetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetadataDefaultTypeInternal() {}
  union {
    Metadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetadataDefaultTypeInternal _Metadata_default_instance_;
constexpr FilterExpression::FilterExpression(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filters_(){}
struct FilterExpressionDefaultTypeInternal {
  constexpr FilterExpressionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FilterExpressionDefaultTypeInternal() {}
  union {
    FilterExpression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FilterExpressionDefaultTypeInternal _FilterExpression_default_instance_;
constexpr SinglePropertyFilter::SinglePropertyFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : operator__(0)

  , _oneof_case_{}{}
struct SinglePropertyFilterDefaultTypeInternal {
  constexpr SinglePropertyFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SinglePropertyFilterDefaultTypeInternal() {}
  union {
    SinglePropertyFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SinglePropertyFilterDefaultTypeInternal _SinglePropertyFilter_default_instance_;
constexpr ArtifactPropertyFilter::ArtifactPropertyFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ArtifactPropertyFilterDefaultTypeInternal {
  constexpr ArtifactPropertyFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ArtifactPropertyFilterDefaultTypeInternal() {}
  union {
    ArtifactPropertyFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ArtifactPropertyFilterDefaultTypeInternal _ArtifactPropertyFilter_default_instance_;
constexpr TagPropertyFilter::TagPropertyFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct TagPropertyFilterDefaultTypeInternal {
  constexpr TagPropertyFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagPropertyFilterDefaultTypeInternal() {}
  union {
    TagPropertyFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagPropertyFilterDefaultTypeInternal _TagPropertyFilter_default_instance_;
constexpr PartitionPropertyFilter::PartitionPropertyFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct PartitionPropertyFilterDefaultTypeInternal {
  constexpr PartitionPropertyFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PartitionPropertyFilterDefaultTypeInternal() {}
  union {
    PartitionPropertyFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PartitionPropertyFilterDefaultTypeInternal _PartitionPropertyFilter_default_instance_;
constexpr KeyValuePair::KeyValuePair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct KeyValuePairDefaultTypeInternal {
  constexpr KeyValuePairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeyValuePairDefaultTypeInternal() {}
  union {
    KeyValuePair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeyValuePairDefaultTypeInternal _KeyValuePair_default_instance_;
constexpr DatasetPropertyFilter::DatasetPropertyFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct DatasetPropertyFilterDefaultTypeInternal {
  constexpr DatasetPropertyFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DatasetPropertyFilterDefaultTypeInternal() {}
  union {
    DatasetPropertyFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DatasetPropertyFilterDefaultTypeInternal _DatasetPropertyFilter_default_instance_;
constexpr PaginationOptions::PaginationOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , limit_(0u)
  , sortkey_(0)

  , sortorder_(0)
{}
struct PaginationOptionsDefaultTypeInternal {
  constexpr PaginationOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PaginationOptionsDefaultTypeInternal() {}
  union {
    PaginationOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PaginationOptionsDefaultTypeInternal _PaginationOptions_default_instance_;
}  // namespace datacatalog
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[36];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fdatacatalog_2fdatacatalog_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fdatacatalog_2fdatacatalog_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::CreateDatasetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datacatalog::CreateDatasetRequest, dataset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::CreateDatasetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetDatasetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetDatasetRequest, dataset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetDatasetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetDatasetResponse, dataset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetArtifactRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetArtifactRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetArtifactRequest, dataset_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetArtifactRequest, query_handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetArtifactResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetArtifactResponse, artifact_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::CreateArtifactRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datacatalog::CreateArtifactRequest, artifact_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::CreateArtifactResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::AddTagRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datacatalog::AddTagRequest, tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::AddTagResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ListArtifactsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ListArtifactsRequest, dataset_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::ListArtifactsRequest, filter_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::ListArtifactsRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ListArtifactsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ListArtifactsResponse, artifacts_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::ListArtifactsResponse, next_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ListDatasetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ListDatasetsRequest, filter_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::ListDatasetsRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ListDatasetsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ListDatasetsResponse, datasets_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::ListDatasetsResponse, next_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ReservationID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ReservationID, dataset_id_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::ReservationID, tag_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetOrExtendReservationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetOrExtendReservationRequest, reservation_id_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetOrExtendReservationRequest, owner_id_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetOrExtendReservationRequest, heartbeat_interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::Reservation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datacatalog::Reservation, reservation_id_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Reservation, owner_id_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Reservation, heartbeat_interval_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Reservation, expires_at_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Reservation, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetOrExtendReservationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetOrExtendReservationResponse, reservation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ReleaseReservationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ReleaseReservationRequest, reservation_id_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::ReleaseReservationRequest, owner_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ReleaseReservationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::Dataset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datacatalog::Dataset, id_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Dataset, metadata_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Dataset, partitionkeys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::Partition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datacatalog::Partition, key_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Partition, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::DatasetID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datacatalog::DatasetID, project_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::DatasetID, name_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::DatasetID, domain_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::DatasetID, version_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::DatasetID, uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::Artifact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datacatalog::Artifact, id_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Artifact, dataset_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Artifact, data_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Artifact, metadata_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Artifact, partitions_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Artifact, tags_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Artifact, created_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ArtifactData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ArtifactData, name_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::ArtifactData, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::Tag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datacatalog::Tag, name_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Tag, artifact_id_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Tag, dataset_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Metadata_KeyMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Metadata_KeyMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datacatalog::Metadata_KeyMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Metadata_KeyMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datacatalog::Metadata, key_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::FilterExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datacatalog::FilterExpression, filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::SinglePropertyFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::datacatalog::SinglePropertyFilter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::datacatalog::SinglePropertyFilter, operator__),
  PROTOBUF_FIELD_OFFSET(::datacatalog::SinglePropertyFilter, property_filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ArtifactPropertyFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ArtifactPropertyFilter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::datacatalog::ArtifactPropertyFilter, property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::TagPropertyFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::datacatalog::TagPropertyFilter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::datacatalog::TagPropertyFilter, property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::PartitionPropertyFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::datacatalog::PartitionPropertyFilter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::datacatalog::PartitionPropertyFilter, property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::KeyValuePair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datacatalog::KeyValuePair, key_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::KeyValuePair, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::DatasetPropertyFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::datacatalog::DatasetPropertyFilter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::datacatalog::DatasetPropertyFilter, property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::PaginationOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datacatalog::PaginationOptions, limit_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::PaginationOptions, token_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::PaginationOptions, sortkey_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::PaginationOptions, sortorder_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::datacatalog::CreateDatasetRequest)},
  { 7, -1, -1, sizeof(::datacatalog::CreateDatasetResponse)},
  { 13, -1, -1, sizeof(::datacatalog::GetDatasetRequest)},
  { 20, -1, -1, sizeof(::datacatalog::GetDatasetResponse)},
  { 27, -1, -1, sizeof(::datacatalog::GetArtifactRequest)},
  { 37, -1, -1, sizeof(::datacatalog::GetArtifactResponse)},
  { 44, -1, -1, sizeof(::datacatalog::CreateArtifactRequest)},
  { 51, -1, -1, sizeof(::datacatalog::CreateArtifactResponse)},
  { 57, -1, -1, sizeof(::datacatalog::AddTagRequest)},
  { 64, -1, -1, sizeof(::datacatalog::AddTagResponse)},
  { 70, -1, -1, sizeof(::datacatalog::ListArtifactsRequest)},
  { 79, -1, -1, sizeof(::datacatalog::ListArtifactsResponse)},
  { 87, -1, -1, sizeof(::datacatalog::ListDatasetsRequest)},
  { 95, -1, -1, sizeof(::datacatalog::ListDatasetsResponse)},
  { 103, -1, -1, sizeof(::datacatalog::ReservationID)},
  { 111, -1, -1, sizeof(::datacatalog::GetOrExtendReservationRequest)},
  { 120, -1, -1, sizeof(::datacatalog::Reservation)},
  { 131, -1, -1, sizeof(::datacatalog::GetOrExtendReservationResponse)},
  { 138, -1, -1, sizeof(::datacatalog::ReleaseReservationRequest)},
  { 146, -1, -1, sizeof(::datacatalog::ReleaseReservationResponse)},
  { 152, -1, -1, sizeof(::datacatalog::Dataset)},
  { 161, -1, -1, sizeof(::datacatalog::Partition)},
  { 169, -1, -1, sizeof(::datacatalog::DatasetID)},
  { 180, -1, -1, sizeof(::datacatalog::Artifact)},
  { 193, -1, -1, sizeof(::datacatalog::ArtifactData)},
  { 201, -1, -1, sizeof(::datacatalog::Tag)},
  { 210, 218, -1, sizeof(::datacatalog::Metadata_KeyMapEntry_DoNotUse)},
  { 220, -1, -1, sizeof(::datacatalog::Metadata)},
  { 227, -1, -1, sizeof(::datacatalog::FilterExpression)},
  { 234, -1, -1, sizeof(::datacatalog::SinglePropertyFilter)},
  { 246, -1, -1, sizeof(::datacatalog::ArtifactPropertyFilter)},
  { 254, -1, -1, sizeof(::datacatalog::TagPropertyFilter)},
  { 262, -1, -1, sizeof(::datacatalog::PartitionPropertyFilter)},
  { 270, -1, -1, sizeof(::datacatalog::KeyValuePair)},
  { 278, -1, -1, sizeof(::datacatalog::DatasetPropertyFilter)},
  { 289, -1, -1, sizeof(::datacatalog::PaginationOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_CreateDatasetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_CreateDatasetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_GetDatasetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_GetDatasetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_GetArtifactRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_GetArtifactResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_CreateArtifactRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_CreateArtifactResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_AddTagRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_AddTagResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_ListArtifactsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_ListArtifactsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_ListDatasetsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_ListDatasetsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_ReservationID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_GetOrExtendReservationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_Reservation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_GetOrExtendReservationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_ReleaseReservationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_ReleaseReservationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_Dataset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_Partition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_DatasetID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_Artifact_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_ArtifactData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_Tag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_Metadata_KeyMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_Metadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_FilterExpression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_SinglePropertyFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_ArtifactPropertyFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_TagPropertyFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_PartitionPropertyFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_KeyValuePair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_DatasetPropertyFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datacatalog::_PaginationOptions_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&flyteidl/datacatalog/datacatalog.proto"
  "\022\013datacatalog\032\034flyteidl/core/literals.pr"
  "oto\032\036google/protobuf/duration.proto\032\037goo"
  "gle/protobuf/timestamp.proto\"F\n\024CreateDa"
  "tasetRequest\022.\n\007dataset\030\001 \001(\0132\024.datacata"
  "log.DatasetR\007dataset\"\027\n\025CreateDatasetRes"
  "ponse\"E\n\021GetDatasetRequest\0220\n\007dataset\030\001 "
  "\001(\0132\026.datacatalog.DatasetIDR\007dataset\"D\n\022"
  "GetDatasetResponse\022.\n\007dataset\030\001 \001(\0132\024.da"
  "tacatalog.DatasetR\007dataset\"\226\001\n\022GetArtifa"
  "ctRequest\0220\n\007dataset\030\001 \001(\0132\026.datacatalog"
  ".DatasetIDR\007dataset\022!\n\013artifact_id\030\002 \001(\t"
  "H\000R\nartifactId\022\033\n\010tag_name\030\003 \001(\tH\000R\007tagN"
  "ameB\016\n\014query_handle\"H\n\023GetArtifactRespon"
  "se\0221\n\010artifact\030\001 \001(\0132\025.datacatalog.Artif"
  "actR\010artifact\"J\n\025CreateArtifactRequest\0221"
  "\n\010artifact\030\001 \001(\0132\025.datacatalog.ArtifactR"
  "\010artifact\"\030\n\026CreateArtifactResponse\"3\n\rA"
  "ddTagRequest\022\"\n\003tag\030\001 \001(\0132\020.datacatalog."
  "TagR\003tag\"\020\n\016AddTagResponse\"\277\001\n\024ListArtif"
  "actsRequest\0220\n\007dataset\030\001 \001(\0132\026.datacatal"
  "og.DatasetIDR\007dataset\0225\n\006filter\030\002 \001(\0132\035."
  "datacatalog.FilterExpressionR\006filter\022>\n\n"
  "pagination\030\003 \001(\0132\036.datacatalog.Paginatio"
  "nOptionsR\npagination\"k\n\025ListArtifactsRes"
  "ponse\0223\n\tartifacts\030\001 \003(\0132\025.datacatalog.A"
  "rtifactR\tartifacts\022\035\n\nnext_token\030\002 \001(\tR\t"
  "nextToken\"\214\001\n\023ListDatasetsRequest\0225\n\006fil"
  "ter\030\001 \001(\0132\035.datacatalog.FilterExpression"
  "R\006filter\022>\n\npagination\030\002 \001(\0132\036.datacatal"
  "og.PaginationOptionsR\npagination\"g\n\024List"
  "DatasetsResponse\0220\n\010datasets\030\001 \003(\0132\024.dat"
  "acatalog.DatasetR\010datasets\022\035\n\nnext_token"
  "\030\002 \001(\tR\tnextToken\"a\n\rReservationID\0225\n\nda"
  "taset_id\030\001 \001(\0132\026.datacatalog.DatasetIDR\t"
  "datasetId\022\031\n\010tag_name\030\002 \001(\tR\007tagName\"\307\001\n"
  "\035GetOrExtendReservationRequest\022A\n\016reserv"
  "ation_id\030\001 \001(\0132\032.datacatalog.Reservation"
  "IDR\rreservationId\022\031\n\010owner_id\030\002 \001(\tR\007own"
  "erId\022H\n\022heartbeat_interval\030\003 \001(\0132\031.googl"
  "e.protobuf.DurationR\021heartbeatInterval\"\243"
  "\002\n\013Reservation\022A\n\016reservation_id\030\001 \001(\0132\032"
  ".datacatalog.ReservationIDR\rreservationI"
  "d\022\031\n\010owner_id\030\002 \001(\tR\007ownerId\022H\n\022heartbea"
  "t_interval\030\003 \001(\0132\031.google.protobuf.Durat"
  "ionR\021heartbeatInterval\0229\n\nexpires_at\030\004 \001"
  "(\0132\032.google.protobuf.TimestampR\texpiresA"
  "t\0221\n\010metadata\030\006 \001(\0132\025.datacatalog.Metada"
  "taR\010metadata\"\\\n\036GetOrExtendReservationRe"
  "sponse\022:\n\013reservation\030\001 \001(\0132\030.datacatalo"
  "g.ReservationR\013reservation\"y\n\031ReleaseRes"
  "ervationRequest\022A\n\016reservation_id\030\001 \001(\0132"
  "\032.datacatalog.ReservationIDR\rreservation"
  "Id\022\031\n\010owner_id\030\002 \001(\tR\007ownerId\"\034\n\032Release"
  "ReservationResponse\"\212\001\n\007Dataset\022&\n\002id\030\001 "
  "\001(\0132\026.datacatalog.DatasetIDR\002id\0221\n\010metad"
  "ata\030\002 \001(\0132\025.datacatalog.MetadataR\010metada"
  "ta\022$\n\rpartitionKeys\030\003 \003(\tR\rpartitionKeys"
  "\"3\n\tPartition\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value"
  "\030\002 \001(\tR\005value\"\177\n\tDatasetID\022\030\n\007project\030\001 "
  "\001(\tR\007project\022\022\n\004name\030\002 \001(\tR\004name\022\026\n\006doma"
  "in\030\003 \001(\tR\006domain\022\030\n\007version\030\004 \001(\tR\007versi"
  "on\022\022\n\004UUID\030\005 \001(\tR\004UUID\"\307\002\n\010Artifact\022\016\n\002i"
  "d\030\001 \001(\tR\002id\0220\n\007dataset\030\002 \001(\0132\026.datacatal"
  "og.DatasetIDR\007dataset\022-\n\004data\030\003 \003(\0132\031.da"
  "tacatalog.ArtifactDataR\004data\0221\n\010metadata"
  "\030\004 \001(\0132\025.datacatalog.MetadataR\010metadata\022"
  "6\n\npartitions\030\005 \003(\0132\026.datacatalog.Partit"
  "ionR\npartitions\022$\n\004tags\030\006 \003(\0132\020.datacata"
  "log.TagR\004tags\0229\n\ncreated_at\030\007 \001(\0132\032.goog"
  "le.protobuf.TimestampR\tcreatedAt\"P\n\014Arti"
  "factData\022\022\n\004name\030\001 \001(\tR\004name\022,\n\005value\030\002 "
  "\001(\0132\026.flyteidl.core.LiteralR\005value\"l\n\003Ta"
  "g\022\022\n\004name\030\001 \001(\tR\004name\022\037\n\013artifact_id\030\002 \001"
  "(\tR\nartifactId\0220\n\007dataset\030\003 \001(\0132\026.dataca"
  "talog.DatasetIDR\007dataset\"\201\001\n\010Metadata\022:\n"
  "\007key_map\030\001 \003(\0132!.datacatalog.Metadata.Ke"
  "yMapEntryR\006keyMap\0329\n\013KeyMapEntry\022\020\n\003key\030"
  "\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028\001\"O\n\020"
  "FilterExpression\022;\n\007filters\030\001 \003(\0132!.data"
  "catalog.SinglePropertyFilterR\007filters\"\316\003"
  "\n\024SinglePropertyFilter\022\?\n\ntag_filter\030\001 \001"
  "(\0132\036.datacatalog.TagPropertyFilterH\000R\tta"
  "gFilter\022Q\n\020partition_filter\030\002 \001(\0132$.data"
  "catalog.PartitionPropertyFilterH\000R\017parti"
  "tionFilter\022N\n\017artifact_filter\030\003 \001(\0132#.da"
  "tacatalog.ArtifactPropertyFilterH\000R\016arti"
  "factFilter\022K\n\016dataset_filter\030\004 \001(\0132\".dat"
  "acatalog.DatasetPropertyFilterH\000R\rdatase"
  "tFilter\022P\n\010operator\030\n \001(\01624.datacatalog."
  "SinglePropertyFilter.ComparisonOperatorR"
  "\010operator\" \n\022ComparisonOperator\022\n\n\006EQUAL"
  "S\020\000B\021\n\017property_filter\"G\n\026ArtifactProper"
  "tyFilter\022!\n\013artifact_id\030\001 \001(\tH\000R\nartifac"
  "tIdB\n\n\010property\"<\n\021TagPropertyFilter\022\033\n\010"
  "tag_name\030\001 \001(\tH\000R\007tagNameB\n\n\010property\"[\n"
  "\027PartitionPropertyFilter\0224\n\007key_val\030\001 \001("
  "\0132\031.datacatalog.KeyValuePairH\000R\006keyValB\n"
  "\n\010property\"6\n\014KeyValuePair\022\020\n\003key\030\001 \001(\tR"
  "\003key\022\024\n\005value\030\002 \001(\tR\005value\"\213\001\n\025DatasetPr"
  "opertyFilter\022\032\n\007project\030\001 \001(\tH\000R\007project"
  "\022\024\n\004name\030\002 \001(\tH\000R\004name\022\030\n\006domain\030\003 \001(\tH\000"
  "R\006domain\022\032\n\007version\030\004 \001(\tH\000R\007versionB\n\n\010"
  "property\"\223\002\n\021PaginationOptions\022\024\n\005limit\030"
  "\001 \001(\rR\005limit\022\024\n\005token\030\002 \001(\tR\005token\022@\n\007so"
  "rtKey\030\003 \001(\0162&.datacatalog.PaginationOpti"
  "ons.SortKeyR\007sortKey\022F\n\tsortOrder\030\004 \001(\0162"
  "(.datacatalog.PaginationOptions.SortOrde"
  "rR\tsortOrder\"*\n\tSortOrder\022\016\n\nDESCENDING\020"
  "\000\022\r\n\tASCENDING\020\001\"\034\n\007SortKey\022\021\n\rCREATION_"
  "TIME\020\0002\253\006\n\013DataCatalog\022V\n\rCreateDataset\022"
  "!.datacatalog.CreateDatasetRequest\032\".dat"
  "acatalog.CreateDatasetResponse\022M\n\nGetDat"
  "aset\022\036.datacatalog.GetDatasetRequest\032\037.d"
  "atacatalog.GetDatasetResponse\022Y\n\016CreateA"
  "rtifact\022\".datacatalog.CreateArtifactRequ"
  "est\032#.datacatalog.CreateArtifactResponse"
  "\022P\n\013GetArtifact\022\037.datacatalog.GetArtifac"
  "tRequest\032 .datacatalog.GetArtifactRespon"
  "se\022A\n\006AddTag\022\032.datacatalog.AddTagRequest"
  "\032\033.datacatalog.AddTagResponse\022V\n\rListArt"
  "ifacts\022!.datacatalog.ListArtifactsReques"
  "t\032\".datacatalog.ListArtifactsResponse\022S\n"
  "\014ListDatasets\022 .datacatalog.ListDatasets"
  "Request\032!.datacatalog.ListDatasetsRespon"
  "se\022q\n\026GetOrExtendReservation\022*.datacatal"
  "og.GetOrExtendReservationRequest\032+.datac"
  "atalog.GetOrExtendReservationResponse\022e\n"
  "\022ReleaseReservation\022&.datacatalog.Releas"
  "eReservationRequest\032\'.datacatalog.Releas"
  "eReservationResponseB\257\001\n\017com.datacatalog"
  "B\020DatacatalogProtoH\002Z;github.com/flyteor"
  "g/flyteidl/gen/pb-go/flyteidl/datacatalo"
  "g\370\001\000\242\002\003DXX\252\002\013Datacatalog\312\002\013Datacatalog\342\002"
  "\027Datacatalog\\GPBMetadata\352\002\013Datacatalogb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_deps[3] = {
  &::descriptor_table_flyteidl_2fcore_2fliterals_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto = {
  false, false, 5406, descriptor_table_protodef_flyteidl_2fdatacatalog_2fdatacatalog_2eproto, "flyteidl/datacatalog/datacatalog.proto", 
  &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once, descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_deps, 3, 36,
  schemas, file_default_instances, TableStruct_flyteidl_2fdatacatalog_2fdatacatalog_2eproto::offsets,
  file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto, file_level_enum_descriptors_flyteidl_2fdatacatalog_2fdatacatalog_2eproto, file_level_service_descriptors_flyteidl_2fdatacatalog_2fdatacatalog_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter() {
  return &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fdatacatalog_2fdatacatalog_2eproto(&descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
namespace datacatalog {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SinglePropertyFilter_ComparisonOperator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return file_level_enum_descriptors_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[0];
}
bool SinglePropertyFilter_ComparisonOperator_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SinglePropertyFilter_ComparisonOperator SinglePropertyFilter::EQUALS;
constexpr SinglePropertyFilter_ComparisonOperator SinglePropertyFilter::ComparisonOperator_MIN;
constexpr SinglePropertyFilter_ComparisonOperator SinglePropertyFilter::ComparisonOperator_MAX;
constexpr int SinglePropertyFilter::ComparisonOperator_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PaginationOptions_SortOrder_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return file_level_enum_descriptors_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[1];
}
bool PaginationOptions_SortOrder_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PaginationOptions_SortOrder PaginationOptions::DESCENDING;
constexpr PaginationOptions_SortOrder PaginationOptions::ASCENDING;
constexpr PaginationOptions_SortOrder PaginationOptions::SortOrder_MIN;
constexpr PaginationOptions_SortOrder PaginationOptions::SortOrder_MAX;
constexpr int PaginationOptions::SortOrder_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PaginationOptions_SortKey_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return file_level_enum_descriptors_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[2];
}
bool PaginationOptions_SortKey_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PaginationOptions_SortKey PaginationOptions::CREATION_TIME;
constexpr PaginationOptions_SortKey PaginationOptions::SortKey_MIN;
constexpr PaginationOptions_SortKey PaginationOptions::SortKey_MAX;
constexpr int PaginationOptions::SortKey_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class CreateDatasetRequest::_Internal {
 public:
  static const ::datacatalog::Dataset& dataset(const CreateDatasetRequest* msg);
};

const ::datacatalog::Dataset&
CreateDatasetRequest::_Internal::dataset(const CreateDatasetRequest* msg) {
  return *msg->dataset_;
}
CreateDatasetRequest::CreateDatasetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.CreateDatasetRequest)
}
CreateDatasetRequest::CreateDatasetRequest(const CreateDatasetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dataset()) {
    dataset_ = new ::datacatalog::Dataset(*from.dataset_);
  } else {
    dataset_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.CreateDatasetRequest)
}

inline void CreateDatasetRequest::SharedCtor() {
dataset_ = nullptr;
}

CreateDatasetRequest::~CreateDatasetRequest() {
  // @@protoc_insertion_point(destructor:datacatalog.CreateDatasetRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateDatasetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete dataset_;
}

void CreateDatasetRequest::ArenaDtor(void* object) {
  CreateDatasetRequest* _this = reinterpret_cast< CreateDatasetRequest* >(object);
  (void)_this;
}
void CreateDatasetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateDatasetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateDatasetRequest::InternalSwap(CreateDatasetRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata CreateDatasetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[0]);
}

// ===================================================================

class CreateDatasetResponse::_Internal {
 public:
};

CreateDatasetResponse::CreateDatasetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:datacatalog.CreateDatasetResponse)
}
CreateDatasetResponse::CreateDatasetResponse(const CreateDatasetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:datacatalog.CreateDatasetResponse)
}



::PROTOBUF_NAMESPACE_ID::Metadata CreateDatasetResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[1]);
}

// ===================================================================

class GetDatasetRequest::_Internal {
 public:
  static const ::datacatalog::DatasetID& dataset(const GetDatasetRequest* msg);
};

const ::datacatalog::DatasetID&
GetDatasetRequest::_Internal::dataset(const GetDatasetRequest* msg) {
  return *msg->dataset_;
}
GetDatasetRequest::GetDatasetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.GetDatasetRequest)
}
GetDatasetRequest::GetDatasetRequest(const GetDatasetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dataset()) {
    dataset_ = new ::datacatalog::DatasetID(*from.dataset_);
  } else {
    dataset_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.GetDatasetRequest)
}

inline void GetDatasetRequest::SharedCtor() {
dataset_ = nullptr;
}

GetDatasetRequest::~GetDatasetRequest() {
  // @@protoc_insertion_point(destructor:datacatalog.GetDatasetRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetDatasetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete dataset_;
}

void GetDatasetRequest::ArenaDtor(void* object) {
  GetDatasetRequest* _this = reinterpret_cast< GetDatasetRequest* >(object);
  (void)_this;
}
void GetDatasetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDatasetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDatasetRequest::InternalSwap(GetDatasetRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata GetDatasetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[2]);
}

// ===================================================================

class GetDatasetResponse::_Internal {
 public:
  static const ::datacatalog::Dataset& dataset(const GetDatasetResponse* msg);
};

const ::datacatalog::Dataset&
GetDatasetResponse::_Internal::dataset(const GetDatasetResponse* msg) {
  return *msg->dataset_;
}
GetDatasetResponse::GetDatasetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.GetDatasetResponse)
}
GetDatasetResponse::GetDatasetResponse(const GetDatasetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dataset()) {
    dataset_ = new ::datacatalog::Dataset(*from.dataset_);
  } else {
    dataset_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.GetDatasetResponse)
}

inline void GetDatasetResponse::SharedCtor() {
dataset_ = nullptr;
}

GetDatasetResponse::~GetDatasetResponse() {
  // @@protoc_insertion_point(destructor:datacatalog.GetDatasetResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetDatasetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete dataset_;
}

void GetDatasetResponse::ArenaDtor(void* object) {
  GetDatasetResponse* _this = reinterpret_cast< GetDatasetResponse* >(object);
  (void)_this;
}
void GetDatasetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDatasetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDatasetResponse::InternalSwap(GetDatasetResponse* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata GetDatasetResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[3]);
}

// ===================================================================

class GetArtifactRequest::_Internal {
 public:
  static const ::datacatalog::DatasetID& dataset(const GetArtifactRequest* msg);
};

const ::datacatalog::DatasetID&
GetArtifactRequest::_Internal::dataset(const GetArtifactRequest* msg) {
  return *msg->dataset_;
}
GetArtifactRequest::GetArtifactRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.GetArtifactRequest)
}
GetArtifactRequest::GetArtifactRequest(const GetArtifactRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dataset()) {
    dataset_ = new ::datacatalog::DatasetID(*from.dataset_);
  } else {
    dataset_ = nullptr;
  }
  clear_has_query_handle();
  switch (from.query_handle_case()) {
    case kArtifactId: {
      _internal_set_artifact_id(from._internal_artifact_id());
      break;
    }
    case kTagName: {
      _internal_set_tag_name(from._internal_tag_name());
      break;
    }
    case QUERY_HANDLE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.GetArtifactRequest)
}

inline void GetArtifactRequest::SharedCtor() {
dataset_ = nullptr;
clear_has_query_handle();
}

GetArtifactRequest::~GetArtifactRequest() {
  // @@protoc_insertion_point(destructor:datacatalog.GetArtifactRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetArtifactRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete dataset_;
  if (has_query_handle()) {
    clear_query_handle();
  }
}

void GetArtifactRequest::ArenaDtor(void* object) {
  GetArtifactRequest* _this = reinterpret_cast< GetArtifactRequest* >(object);
  (void)_this;
}
void GetArtifactRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetArtifactRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetArtifactRequest::clear_query_handle() {
// @@protoc_insertion_point(one_of_clear_start:datacatalog.GetArtifactRequest)
  switch (query_handle_case()) {
    case kArtifactId: {
      query_handle_.artifact_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kTagName: {
      query_handle_.tag_name_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case QUERY_HANDLE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = QUERY_HANDLE_NOT_SET;
}


void GetArtifactRequest::InternalSwap(GetArtifactRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata GetArtifactRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[4]);
}

// ===================================================================

class GetArtifactResponse::_Internal {
 public:
  static const ::datacatalog::Artifact& artifact(const GetArtifactResponse* msg);
};

const ::datacatalog::Artifact&
GetArtifactResponse::_Internal::artifact(const GetArtifactResponse* msg) {
  return *msg->artifact_;
}
GetArtifactResponse::GetArtifactResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.GetArtifactResponse)
}
GetArtifactResponse::GetArtifactResponse(const GetArtifactResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_artifact()) {
    artifact_ = new ::datacatalog::Artifact(*from.artifact_);
  } else {
    artifact_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.GetArtifactResponse)
}

inline void GetArtifactResponse::SharedCtor() {
artifact_ = nullptr;
}

GetArtifactResponse::~GetArtifactResponse() {
  // @@protoc_insertion_point(destructor:datacatalog.GetArtifactResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetArtifactResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete artifact_;
}

void GetArtifactResponse::ArenaDtor(void* object) {
  GetArtifactResponse* _this = reinterpret_cast< GetArtifactResponse* >(object);
  (void)_this;
}
void GetArtifactResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetArtifactResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetArtifactResponse::InternalSwap(GetArtifactResponse* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata GetArtifactResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[5]);
}

// ===================================================================

class CreateArtifactRequest::_Internal {
 public:
  static const ::datacatalog::Artifact& artifact(const CreateArtifactRequest* msg);
};

const ::datacatalog::Artifact&
CreateArtifactRequest::_Internal::artifact(const CreateArtifactRequest* msg) {
  return *msg->artifact_;
}
CreateArtifactRequest::CreateArtifactRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.CreateArtifactRequest)
}
CreateArtifactRequest::CreateArtifactRequest(const CreateArtifactRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_artifact()) {
    artifact_ = new ::datacatalog::Artifact(*from.artifact_);
  } else {
    artifact_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.CreateArtifactRequest)
}

inline void CreateArtifactRequest::SharedCtor() {
artifact_ = nullptr;
}

CreateArtifactRequest::~CreateArtifactRequest() {
  // @@protoc_insertion_point(destructor:datacatalog.CreateArtifactRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateArtifactRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete artifact_;
}

void CreateArtifactRequest::ArenaDtor(void* object) {
  CreateArtifactRequest* _this = reinterpret_cast< CreateArtifactRequest* >(object);
  (void)_this;
}
void CreateArtifactRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateArtifactRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateArtifactRequest::InternalSwap(CreateArtifactRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata CreateArtifactRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[6]);
}

// ===================================================================

class CreateArtifactResponse::_Internal {
 public:
};

CreateArtifactResponse::CreateArtifactResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:datacatalog.CreateArtifactResponse)
}
CreateArtifactResponse::CreateArtifactResponse(const CreateArtifactResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:datacatalog.CreateArtifactResponse)
}



::PROTOBUF_NAMESPACE_ID::Metadata CreateArtifactResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[7]);
}

// ===================================================================

class AddTagRequest::_Internal {
 public:
  static const ::datacatalog::Tag& tag(const AddTagRequest* msg);
};

const ::datacatalog::Tag&
AddTagRequest::_Internal::tag(const AddTagRequest* msg) {
  return *msg->tag_;
}
AddTagRequest::AddTagRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.AddTagRequest)
}
AddTagRequest::AddTagRequest(const AddTagRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tag()) {
    tag_ = new ::datacatalog::Tag(*from.tag_);
  } else {
    tag_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.AddTagRequest)
}

inline void AddTagRequest::SharedCtor() {
tag_ = nullptr;
}

AddTagRequest::~AddTagRequest() {
  // @@protoc_insertion_point(destructor:datacatalog.AddTagRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddTagRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete tag_;
}

void AddTagRequest::ArenaDtor(void* object) {
  AddTagRequest* _this = reinterpret_cast< AddTagRequest* >(object);
  (void)_this;
}
void AddTagRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddTagRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddTagRequest::InternalSwap(AddTagRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AddTagRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[8]);
}

// ===================================================================

class AddTagResponse::_Internal {
 public:
};

AddTagResponse::AddTagResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:datacatalog.AddTagResponse)
}
AddTagResponse::AddTagResponse(const AddTagResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:datacatalog.AddTagResponse)
}



::PROTOBUF_NAMESPACE_ID::Metadata AddTagResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[9]);
}

// ===================================================================

class ListArtifactsRequest::_Internal {
 public:
  static const ::datacatalog::DatasetID& dataset(const ListArtifactsRequest* msg);
  static const ::datacatalog::FilterExpression& filter(const ListArtifactsRequest* msg);
  static const ::datacatalog::PaginationOptions& pagination(const ListArtifactsRequest* msg);
};

const ::datacatalog::DatasetID&
ListArtifactsRequest::_Internal::dataset(const ListArtifactsRequest* msg) {
  return *msg->dataset_;
}
const ::datacatalog::FilterExpression&
ListArtifactsRequest::_Internal::filter(const ListArtifactsRequest* msg) {
  return *msg->filter_;
}
const ::datacatalog::PaginationOptions&
ListArtifactsRequest::_Internal::pagination(const ListArtifactsRequest* msg) {
  return *msg->pagination_;
}
ListArtifactsRequest::ListArtifactsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.ListArtifactsRequest)
}
ListArtifactsRequest::ListArtifactsRequest(const ListArtifactsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dataset()) {
    dataset_ = new ::datacatalog::DatasetID(*from.dataset_);
  } else {
    dataset_ = nullptr;
  }
  if (from._internal_has_filter()) {
    filter_ = new ::datacatalog::FilterExpression(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::datacatalog::PaginationOptions(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.ListArtifactsRequest)
}

inline void ListArtifactsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dataset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pagination_) -
    reinterpret_cast<char*>(&dataset_)) + sizeof(pagination_));
}

ListArtifactsRequest::~ListArtifactsRequest() {
  // @@protoc_insertion_point(destructor:datacatalog.ListArtifactsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListArtifactsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete dataset_;
  if (this != internal_default_instance()) delete filter_;
  if (this != internal_default_instance()) delete pagination_;
}

void ListArtifactsRequest::ArenaDtor(void* object) {
  ListArtifactsRequest* _this = reinterpret_cast< ListArtifactsRequest* >(object);
  (void)_this;
}
void ListArtifactsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListArtifactsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListArtifactsRequest::InternalSwap(ListArtifactsRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ListArtifactsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[10]);
}

// ===================================================================

class ListArtifactsResponse::_Internal {
 public:
};

ListArtifactsResponse::ListArtifactsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  artifacts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.ListArtifactsResponse)
}
ListArtifactsResponse::ListArtifactsResponse(const ListArtifactsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      artifacts_(from.artifacts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    next_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_token().empty()) {
    next_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.ListArtifactsResponse)
}

inline void ListArtifactsResponse::SharedCtor() {
next_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  next_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListArtifactsResponse::~ListArtifactsResponse() {
  // @@protoc_insertion_point(destructor:datacatalog.ListArtifactsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListArtifactsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListArtifactsResponse::ArenaDtor(void* object) {
  ListArtifactsResponse* _this = reinterpret_cast< ListArtifactsResponse* >(object);
  (void)_this;
}
void ListArtifactsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListArtifactsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListArtifactsResponse::InternalSwap(ListArtifactsResponse* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ListArtifactsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[11]);
}

// ===================================================================

class ListDatasetsRequest::_Internal {
 public:
  static const ::datacatalog::FilterExpression& filter(const ListDatasetsRequest* msg);
  static const ::datacatalog::PaginationOptions& pagination(const ListDatasetsRequest* msg);
};

const ::datacatalog::FilterExpression&
ListDatasetsRequest::_Internal::filter(const ListDatasetsRequest* msg) {
  return *msg->filter_;
}
const ::datacatalog::PaginationOptions&
ListDatasetsRequest::_Internal::pagination(const ListDatasetsRequest* msg) {
  return *msg->pagination_;
}
ListDatasetsRequest::ListDatasetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.ListDatasetsRequest)
}
ListDatasetsRequest::ListDatasetsRequest(const ListDatasetsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filter()) {
    filter_ = new ::datacatalog::FilterExpression(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  if (from._internal_has_pagination()) {
    pagination_ = new ::datacatalog::PaginationOptions(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.ListDatasetsRequest)
}

inline void ListDatasetsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&filter_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pagination_) -
    reinterpret_cast<char*>(&filter_)) + sizeof(pagination_));
}

ListDatasetsRequest::~ListDatasetsRequest() {
  // @@protoc_insertion_point(destructor:datacatalog.ListDatasetsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListDatasetsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete filter_;
  if (this != internal_default_instance()) delete pagination_;
}

void ListDatasetsRequest::ArenaDtor(void* object) {
  ListDatasetsRequest* _this = reinterpret_cast< ListDatasetsRequest* >(object);
  (void)_this;
}
void ListDatasetsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListDatasetsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListDatasetsRequest::InternalSwap(ListDatasetsRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ListDatasetsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[12]);
}

// ===================================================================

class ListDatasetsResponse::_Internal {
 public:
};

ListDatasetsResponse::ListDatasetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  datasets_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.ListDatasetsResponse)
}
ListDatasetsResponse::ListDatasetsResponse(const ListDatasetsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      datasets_(from.datasets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    next_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_token().empty()) {
    next_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.ListDatasetsResponse)
}

inline void ListDatasetsResponse::SharedCtor() {
next_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  next_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListDatasetsResponse::~ListDatasetsResponse() {
  // @@protoc_insertion_point(destructor:datacatalog.ListDatasetsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListDatasetsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListDatasetsResponse::ArenaDtor(void* object) {
  ListDatasetsResponse* _this = reinterpret_cast< ListDatasetsResponse* >(object);
  (void)_this;
}
void ListDatasetsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListDatasetsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListDatasetsResponse::InternalSwap(ListDatasetsResponse* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ListDatasetsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[13]);
}

// ===================================================================

class ReservationID::_Internal {
 public:
  static const ::datacatalog::DatasetID& dataset_id(const ReservationID* msg);
};

const ::datacatalog::DatasetID&
ReservationID::_Internal::dataset_id(const ReservationID* msg) {
  return *msg->dataset_id_;
}
ReservationID::ReservationID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.ReservationID)
}
ReservationID::ReservationID(const ReservationID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tag_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag_name().empty()) {
    tag_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_dataset_id()) {
    dataset_id_ = new ::datacatalog::DatasetID(*from.dataset_id_);
  } else {
    dataset_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.ReservationID)
}

inline void ReservationID::SharedCtor() {
tag_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tag_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dataset_id_ = nullptr;
}

ReservationID::~ReservationID() {
  // @@protoc_insertion_point(destructor:datacatalog.ReservationID)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReservationID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tag_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dataset_id_;
}

void ReservationID::ArenaDtor(void* object) {
  ReservationID* _this = reinterpret_cast< ReservationID* >(object);
  (void)_this;
}
void ReservationID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReservationID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReservationID::InternalSwap(ReservationID* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ReservationID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[14]);
}

// ===================================================================

class GetOrExtendReservationRequest::_Internal {
 public:
  static const ::datacatalog::ReservationID& reservation_id(const GetOrExtendReservationRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& heartbeat_interval(const GetOrExtendReservationRequest* msg);
};

const ::datacatalog::ReservationID&
GetOrExtendReservationRequest::_Internal::reservation_id(const GetOrExtendReservationRequest* msg) {
  return *msg->reservation_id_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
GetOrExtendReservationRequest::_Internal::heartbeat_interval(const GetOrExtendReservationRequest* msg) {
  return *msg->heartbeat_interval_;
}
void GetOrExtendReservationRequest::clear_heartbeat_interval() {
  if (GetArenaForAllocation() == nullptr && heartbeat_interval_ != nullptr) {
    delete heartbeat_interval_;
  }
  heartbeat_interval_ = nullptr;
}
GetOrExtendReservationRequest::GetOrExtendReservationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.GetOrExtendReservationRequest)
}
GetOrExtendReservationRequest::GetOrExtendReservationRequest(const GetOrExtendReservationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    owner_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_id().empty()) {
    owner_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_reservation_id()) {
    reservation_id_ = new ::datacatalog::ReservationID(*from.reservation_id_);
  } else {
    reservation_id_ = nullptr;
  }
  if (from._internal_has_heartbeat_interval()) {
    heartbeat_interval_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.heartbeat_interval_);
  } else {
    heartbeat_interval_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.GetOrExtendReservationRequest)
}

inline void GetOrExtendReservationRequest::SharedCtor() {
owner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  owner_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reservation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&heartbeat_interval_) -
    reinterpret_cast<char*>(&reservation_id_)) + sizeof(heartbeat_interval_));
}

GetOrExtendReservationRequest::~GetOrExtendReservationRequest() {
  // @@protoc_insertion_point(destructor:datacatalog.GetOrExtendReservationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetOrExtendReservationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reservation_id_;
  if (this != internal_default_instance()) delete heartbeat_interval_;
}

void GetOrExtendReservationRequest::ArenaDtor(void* object) {
  GetOrExtendReservationRequest* _this = reinterpret_cast< GetOrExtendReservationRequest* >(object);
  (void)_this;
}
void GetOrExtendReservationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOrExtendReservationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOrExtendReservationRequest::InternalSwap(GetOrExtendReservationRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata GetOrExtendReservationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[15]);
}

// ===================================================================

class Reservation::_Internal {
 public:
  static const ::datacatalog::ReservationID& reservation_id(const Reservation* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& heartbeat_interval(const Reservation* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& expires_at(const Reservation* msg);
  static const ::datacatalog::Metadata& metadata(const Reservation* msg);
};

const ::datacatalog::ReservationID&
Reservation::_Internal::reservation_id(const Reservation* msg) {
  return *msg->reservation_id_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
Reservation::_Internal::heartbeat_interval(const Reservation* msg) {
  return *msg->heartbeat_interval_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Reservation::_Internal::expires_at(const Reservation* msg) {
  return *msg->expires_at_;
}
const ::datacatalog::Metadata&
Reservation::_Internal::metadata(const Reservation* msg) {
  return *msg->metadata_;
}
void Reservation::clear_heartbeat_interval() {
  if (GetArenaForAllocation() == nullptr && heartbeat_interval_ != nullptr) {
    delete heartbeat_interval_;
  }
  heartbeat_interval_ = nullptr;
}
void Reservation::clear_expires_at() {
  if (GetArenaForAllocation() == nullptr && expires_at_ != nullptr) {
    delete expires_at_;
  }
  expires_at_ = nullptr;
}
Reservation::Reservation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.Reservation)
}
Reservation::Reservation(const Reservation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    owner_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_id().empty()) {
    owner_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_reservation_id()) {
    reservation_id_ = new ::datacatalog::ReservationID(*from.reservation_id_);
  } else {
    reservation_id_ = nullptr;
  }
  if (from._internal_has_heartbeat_interval()) {
    heartbeat_interval_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.heartbeat_interval_);
  } else {
    heartbeat_interval_ = nullptr;
  }
  if (from._internal_has_expires_at()) {
    expires_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.expires_at_);
  } else {
    expires_at_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::datacatalog::Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.Reservation)
}

inline void Reservation::SharedCtor() {
owner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  owner_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reservation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&metadata_) -
    reinterpret_cast<char*>(&reservation_id_)) + sizeof(metadata_));
}

Reservation::~Reservation() {
  // @@protoc_insertion_point(destructor:datacatalog.Reservation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Reservation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reservation_id_;
  if (this != internal_default_instance()) delete heartbeat_interval_;
  if (this != internal_default_instance()) delete expires_at_;
  if (this != internal_default_instance()) delete metadata_;
}

void Reservation::ArenaDtor(void* object) {
  Reservation* _this = reinterpret_cast< Reservation* >(object);
  (void)_this;
}
void Reservation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Reservation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Reservation::InternalSwap(Reservation* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Reservation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[16]);
}

// ===================================================================

class GetOrExtendReservationResponse::_Internal {
 public:
  static const ::datacatalog::Reservation& reservation(const GetOrExtendReservationResponse* msg);
};

const ::datacatalog::Reservation&
GetOrExtendReservationResponse::_Internal::reservation(const GetOrExtendReservationResponse* msg) {
  return *msg->reservation_;
}
GetOrExtendReservationResponse::GetOrExtendReservationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.GetOrExtendReservationResponse)
}
GetOrExtendReservationResponse::GetOrExtendReservationResponse(const GetOrExtendReservationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reservation()) {
    reservation_ = new ::datacatalog::Reservation(*from.reservation_);
  } else {
    reservation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.GetOrExtendReservationResponse)
}

inline void GetOrExtendReservationResponse::SharedCtor() {
reservation_ = nullptr;
}

GetOrExtendReservationResponse::~GetOrExtendReservationResponse() {
  // @@protoc_insertion_point(destructor:datacatalog.GetOrExtendReservationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetOrExtendReservationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete reservation_;
}

void GetOrExtendReservationResponse::ArenaDtor(void* object) {
  GetOrExtendReservationResponse* _this = reinterpret_cast< GetOrExtendReservationResponse* >(object);
  (void)_this;
}
void GetOrExtendReservationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOrExtendReservationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOrExtendReservationResponse::InternalSwap(GetOrExtendReservationResponse* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata GetOrExtendReservationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[17]);
}

// ===================================================================

class ReleaseReservationRequest::_Internal {
 public:
  static const ::datacatalog::ReservationID& reservation_id(const ReleaseReservationRequest* msg);
};

const ::datacatalog::ReservationID&
ReleaseReservationRequest::_Internal::reservation_id(const ReleaseReservationRequest* msg) {
  return *msg->reservation_id_;
}
ReleaseReservationRequest::ReleaseReservationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.ReleaseReservationRequest)
}
ReleaseReservationRequest::ReleaseReservationRequest(const ReleaseReservationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    owner_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_id().empty()) {
    owner_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_reservation_id()) {
    reservation_id_ = new ::datacatalog::ReservationID(*from.reservation_id_);
  } else {
    reservation_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.ReleaseReservationRequest)
}

inline void ReleaseReservationRequest::SharedCtor() {
owner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  owner_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
reservation_id_ = nullptr;
}

ReleaseReservationRequest::~ReleaseReservationRequest() {
  // @@protoc_insertion_point(destructor:datacatalog.ReleaseReservationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReleaseReservationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reservation_id_;
}

void ReleaseReservationRequest::ArenaDtor(void* object) {
  ReleaseReservationRequest* _this = reinterpret_cast< ReleaseReservationRequest* >(object);
  (void)_this;
}
void ReleaseReservationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleaseReservationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReleaseReservationRequest::InternalSwap(ReleaseReservationRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseReservationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[18]);
}

// ===================================================================

class ReleaseReservationResponse::_Internal {
 public:
};

ReleaseReservationResponse::ReleaseReservationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:datacatalog.ReleaseReservationResponse)
}
ReleaseReservationResponse::ReleaseReservationResponse(const ReleaseReservationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:datacatalog.ReleaseReservationResponse)
}



::PROTOBUF_NAMESPACE_ID::Metadata ReleaseReservationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[19]);
}

// ===================================================================

class Dataset::_Internal {
 public:
  static const ::datacatalog::DatasetID& id(const Dataset* msg);
  static const ::datacatalog::Metadata& metadata(const Dataset* msg);
};

const ::datacatalog::DatasetID&
Dataset::_Internal::id(const Dataset* msg) {
  return *msg->id_;
}
const ::datacatalog::Metadata&
Dataset::_Internal::metadata(const Dataset* msg) {
  return *msg->metadata_;
}
Dataset::Dataset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  partitionkeys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.Dataset)
}
Dataset::Dataset(const Dataset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      partitionkeys_(from.partitionkeys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::datacatalog::DatasetID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::datacatalog::Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.Dataset)
}

inline void Dataset::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&metadata_) -
    reinterpret_cast<char*>(&id_)) + sizeof(metadata_));
}

Dataset::~Dataset() {
  // @@protoc_insertion_point(destructor:datacatalog.Dataset)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Dataset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete metadata_;
}

void Dataset::ArenaDtor(void* object) {
  Dataset* _this = reinterpret_cast< Dataset* >(object);
  (void)_this;
}
void Dataset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Dataset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Dataset::InternalSwap(Dataset* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Dataset::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[20]);
}

// ===================================================================

class Partition::_Internal {
 public:
};

Partition::Partition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.Partition)
}
Partition::Partition(const Partition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.Partition)
}

inline void Partition::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Partition::~Partition() {
  // @@protoc_insertion_point(destructor:datacatalog.Partition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Partition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Partition::ArenaDtor(void* object) {
  Partition* _this = reinterpret_cast< Partition* >(object);
  (void)_this;
}
void Partition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Partition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Partition::InternalSwap(Partition* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Partition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[21]);
}

// ===================================================================

class DatasetID::_Internal {
 public:
};

DatasetID::DatasetID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.DatasetID)
}
DatasetID::DatasetID(const DatasetID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    project_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_project().empty()) {
    project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_domain().empty()) {
    domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_domain(), 
      GetArenaForAllocation());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uuid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.DatasetID)
}

inline void DatasetID::SharedCtor() {
project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  project_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DatasetID::~DatasetID() {
  // @@protoc_insertion_point(destructor:datacatalog.DatasetID)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DatasetID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  project_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DatasetID::ArenaDtor(void* object) {
  DatasetID* _this = reinterpret_cast< DatasetID* >(object);
  (void)_this;
}
void DatasetID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DatasetID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DatasetID::InternalSwap(DatasetID* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata DatasetID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[22]);
}

// ===================================================================

class Artifact::_Internal {
 public:
  static const ::datacatalog::DatasetID& dataset(const Artifact* msg);
  static const ::datacatalog::Metadata& metadata(const Artifact* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Artifact* msg);
};

const ::datacatalog::DatasetID&
Artifact::_Internal::dataset(const Artifact* msg) {
  return *msg->dataset_;
}
const ::datacatalog::Metadata&
Artifact::_Internal::metadata(const Artifact* msg) {
  return *msg->metadata_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Artifact::_Internal::created_at(const Artifact* msg) {
  return *msg->created_at_;
}
void Artifact::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
Artifact::Artifact(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena),
  partitions_(arena),
  tags_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.Artifact)
}
Artifact::Artifact(const Artifact& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_),
      partitions_(from.partitions_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_dataset()) {
    dataset_ = new ::datacatalog::DatasetID(*from.dataset_);
  } else {
    dataset_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::datacatalog::Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.Artifact)
}

inline void Artifact::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dataset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&created_at_) -
    reinterpret_cast<char*>(&dataset_)) + sizeof(created_at_));
}

Artifact::~Artifact() {
  // @@protoc_insertion_point(destructor:datacatalog.Artifact)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Artifact::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dataset_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete created_at_;
}

void Artifact::ArenaDtor(void* object) {
  Artifact* _this = reinterpret_cast< Artifact* >(object);
  (void)_this;
}
void Artifact::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Artifact::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Artifact::InternalSwap(Artifact* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Artifact::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[23]);
}

// ===================================================================

class ArtifactData::_Internal {
 public:
  static const ::flyteidl::core::Literal& value(const ArtifactData* msg);
};

const ::flyteidl::core::Literal&
ArtifactData::_Internal::value(const ArtifactData* msg) {
  return *msg->value_;
}
void ArtifactData::clear_value() {
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
ArtifactData::ArtifactData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.ArtifactData)
}
ArtifactData::ArtifactData(const ArtifactData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::flyteidl::core::Literal(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.ArtifactData)
}

inline void ArtifactData::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_ = nullptr;
}

ArtifactData::~ArtifactData() {
  // @@protoc_insertion_point(destructor:datacatalog.ArtifactData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ArtifactData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void ArtifactData::ArenaDtor(void* object) {
  ArtifactData* _this = reinterpret_cast< ArtifactData* >(object);
  (void)_this;
}
void ArtifactData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArtifactData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ArtifactData::InternalSwap(ArtifactData* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ArtifactData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[24]);
}

// ===================================================================

class Tag::_Internal {
 public:
  static const ::datacatalog::DatasetID& dataset(const Tag* msg);
};

const ::datacatalog::DatasetID&
Tag::_Internal::dataset(const Tag* msg) {
  return *msg->dataset_;
}
Tag::Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.Tag)
}
Tag::Tag(const Tag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  artifact_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    artifact_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_artifact_id().empty()) {
    artifact_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_artifact_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_dataset()) {
    dataset_ = new ::datacatalog::DatasetID(*from.dataset_);
  } else {
    dataset_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.Tag)
}

inline void Tag::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
artifact_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  artifact_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dataset_ = nullptr;
}

Tag::~Tag() {
  // @@protoc_insertion_point(destructor:datacatalog.Tag)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Tag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  artifact_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dataset_;
}

void Tag::ArenaDtor(void* object) {
  Tag* _this = reinterpret_cast< Tag* >(object);
  (void)_this;
}
void Tag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Tag::InternalSwap(Tag* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Tag::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[25]);
}

// ===================================================================

Metadata_KeyMapEntry_DoNotUse::Metadata_KeyMapEntry_DoNotUse() {}
Metadata_KeyMapEntry_DoNotUse::Metadata_KeyMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Metadata_KeyMapEntry_DoNotUse::MergeFrom(const Metadata_KeyMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Metadata_KeyMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[26]);
}

// ===================================================================

class Metadata::_Internal {
 public:
};

Metadata::Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  key_map_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.Metadata)
}
Metadata::Metadata(const Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_map_.MergeFrom(from.key_map_);
  // @@protoc_insertion_point(copy_constructor:datacatalog.Metadata)
}

inline void Metadata::SharedCtor() {
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:datacatalog.Metadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Metadata::ArenaDtor(void* object) {
  Metadata* _this = reinterpret_cast< Metadata* >(object);
  (void)_this;
  _this->key_map_. ~MapField();
}
inline void Metadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Metadata::ArenaDtor);
  }
}
void Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Metadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[27]);
}

// ===================================================================

class FilterExpression::_Internal {
 public:
};

FilterExpression::FilterExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  filters_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.FilterExpression)
}
FilterExpression::FilterExpression(const FilterExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filters_(from.filters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:datacatalog.FilterExpression)
}

inline void FilterExpression::SharedCtor() {
}

FilterExpression::~FilterExpression() {
  // @@protoc_insertion_point(destructor:datacatalog.FilterExpression)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FilterExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FilterExpression::ArenaDtor(void* object) {
  FilterExpression* _this = reinterpret_cast< FilterExpression* >(object);
  (void)_this;
}
void FilterExpression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilterExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FilterExpression::InternalSwap(FilterExpression* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata FilterExpression::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[28]);
}

// ===================================================================

class SinglePropertyFilter::_Internal {
 public:
  static const ::datacatalog::TagPropertyFilter& tag_filter(const SinglePropertyFilter* msg);
  static const ::datacatalog::PartitionPropertyFilter& partition_filter(const SinglePropertyFilter* msg);
  static const ::datacatalog::ArtifactPropertyFilter& artifact_filter(const SinglePropertyFilter* msg);
  static const ::datacatalog::DatasetPropertyFilter& dataset_filter(const SinglePropertyFilter* msg);
};

const ::datacatalog::TagPropertyFilter&
SinglePropertyFilter::_Internal::tag_filter(const SinglePropertyFilter* msg) {
  return *msg->property_filter_.tag_filter_;
}
const ::datacatalog::PartitionPropertyFilter&
SinglePropertyFilter::_Internal::partition_filter(const SinglePropertyFilter* msg) {
  return *msg->property_filter_.partition_filter_;
}
const ::datacatalog::ArtifactPropertyFilter&
SinglePropertyFilter::_Internal::artifact_filter(const SinglePropertyFilter* msg) {
  return *msg->property_filter_.artifact_filter_;
}
const ::datacatalog::DatasetPropertyFilter&
SinglePropertyFilter::_Internal::dataset_filter(const SinglePropertyFilter* msg) {
  return *msg->property_filter_.dataset_filter_;
}
void SinglePropertyFilter::set_allocated_tag_filter(::datacatalog::TagPropertyFilter* tag_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_property_filter();
  if (tag_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::datacatalog::TagPropertyFilter>::GetOwningArena(tag_filter);
    if (message_arena != submessage_arena) {
      tag_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tag_filter, submessage_arena);
    }
    set_has_tag_filter();
    property_filter_.tag_filter_ = tag_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:datacatalog.SinglePropertyFilter.tag_filter)
}
void SinglePropertyFilter::set_allocated_partition_filter(::datacatalog::PartitionPropertyFilter* partition_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_property_filter();
  if (partition_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::datacatalog::PartitionPropertyFilter>::GetOwningArena(partition_filter);
    if (message_arena != submessage_arena) {
      partition_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partition_filter, submessage_arena);
    }
    set_has_partition_filter();
    property_filter_.partition_filter_ = partition_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:datacatalog.SinglePropertyFilter.partition_filter)
}
void SinglePropertyFilter::set_allocated_artifact_filter(::datacatalog::ArtifactPropertyFilter* artifact_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_property_filter();
  if (artifact_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::datacatalog::ArtifactPropertyFilter>::GetOwningArena(artifact_filter);
    if (message_arena != submessage_arena) {
      artifact_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, artifact_filter, submessage_arena);
    }
    set_has_artifact_filter();
    property_filter_.artifact_filter_ = artifact_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:datacatalog.SinglePropertyFilter.artifact_filter)
}
void SinglePropertyFilter::set_allocated_dataset_filter(::datacatalog::DatasetPropertyFilter* dataset_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_property_filter();
  if (dataset_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::datacatalog::DatasetPropertyFilter>::GetOwningArena(dataset_filter);
    if (message_arena != submessage_arena) {
      dataset_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dataset_filter, submessage_arena);
    }
    set_has_dataset_filter();
    property_filter_.dataset_filter_ = dataset_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:datacatalog.SinglePropertyFilter.dataset_filter)
}
SinglePropertyFilter::SinglePropertyFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.SinglePropertyFilter)
}
SinglePropertyFilter::SinglePropertyFilter(const SinglePropertyFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  operator__ = from.operator__;
  clear_has_property_filter();
  switch (from.property_filter_case()) {
    case kTagFilter: {
      _internal_mutable_tag_filter()->::datacatalog::TagPropertyFilter::MergeFrom(from._internal_tag_filter());
      break;
    }
    case kPartitionFilter: {
      _internal_mutable_partition_filter()->::datacatalog::PartitionPropertyFilter::MergeFrom(from._internal_partition_filter());
      break;
    }
    case kArtifactFilter: {
      _internal_mutable_artifact_filter()->::datacatalog::ArtifactPropertyFilter::MergeFrom(from._internal_artifact_filter());
      break;
    }
    case kDatasetFilter: {
      _internal_mutable_dataset_filter()->::datacatalog::DatasetPropertyFilter::MergeFrom(from._internal_dataset_filter());
      break;
    }
    case PROPERTY_FILTER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.SinglePropertyFilter)
}

inline void SinglePropertyFilter::SharedCtor() {
operator__ = 0;
clear_has_property_filter();
}

SinglePropertyFilter::~SinglePropertyFilter() {
  // @@protoc_insertion_point(destructor:datacatalog.SinglePropertyFilter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SinglePropertyFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_property_filter()) {
    clear_property_filter();
  }
}

void SinglePropertyFilter::ArenaDtor(void* object) {
  SinglePropertyFilter* _this = reinterpret_cast< SinglePropertyFilter* >(object);
  (void)_this;
}
void SinglePropertyFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SinglePropertyFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SinglePropertyFilter::clear_property_filter() {
// @@protoc_insertion_point(one_of_clear_start:datacatalog.SinglePropertyFilter)
  switch (property_filter_case()) {
    case kTagFilter: {
      if (GetArenaForAllocation() == nullptr) {
        delete property_filter_.tag_filter_;
      }
      break;
    }
    case kPartitionFilter: {
      if (GetArenaForAllocation() == nullptr) {
        delete property_filter_.partition_filter_;
      }
      break;
    }
    case kArtifactFilter: {
      if (GetArenaForAllocation() == nullptr) {
        delete property_filter_.artifact_filter_;
      }
      break;
    }
    case kDatasetFilter: {
      if (GetArenaForAllocation() == nullptr) {
        delete property_filter_.dataset_filter_;
      }
      break;
    }
    case PROPERTY_FILTER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROPERTY_FILTER_NOT_SET;
}


void SinglePropertyFilter::InternalSwap(SinglePropertyFilter* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata SinglePropertyFilter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[29]);
}

// ===================================================================

class ArtifactPropertyFilter::_Internal {
 public:
};

ArtifactPropertyFilter::ArtifactPropertyFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.ArtifactPropertyFilter)
}
ArtifactPropertyFilter::ArtifactPropertyFilter(const ArtifactPropertyFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_property();
  switch (from.property_case()) {
    case kArtifactId: {
      _internal_set_artifact_id(from._internal_artifact_id());
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.ArtifactPropertyFilter)
}

inline void ArtifactPropertyFilter::SharedCtor() {
clear_has_property();
}

ArtifactPropertyFilter::~ArtifactPropertyFilter() {
  // @@protoc_insertion_point(destructor:datacatalog.ArtifactPropertyFilter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ArtifactPropertyFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_property()) {
    clear_property();
  }
}

void ArtifactPropertyFilter::ArenaDtor(void* object) {
  ArtifactPropertyFilter* _this = reinterpret_cast< ArtifactPropertyFilter* >(object);
  (void)_this;
}
void ArtifactPropertyFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArtifactPropertyFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ArtifactPropertyFilter::clear_property() {
// @@protoc_insertion_point(one_of_clear_start:datacatalog.ArtifactPropertyFilter)
  switch (property_case()) {
    case kArtifactId: {
      property_.artifact_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROPERTY_NOT_SET;
}


void ArtifactPropertyFilter::InternalSwap(ArtifactPropertyFilter* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ArtifactPropertyFilter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[30]);
}

// ===================================================================

class TagPropertyFilter::_Internal {
 public:
};

TagPropertyFilter::TagPropertyFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.TagPropertyFilter)
}
TagPropertyFilter::TagPropertyFilter(const TagPropertyFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_property();
  switch (from.property_case()) {
    case kTagName: {
      _internal_set_tag_name(from._internal_tag_name());
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.TagPropertyFilter)
}

inline void TagPropertyFilter::SharedCtor() {
clear_has_property();
}

TagPropertyFilter::~TagPropertyFilter() {
  // @@protoc_insertion_point(destructor:datacatalog.TagPropertyFilter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TagPropertyFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_property()) {
    clear_property();
  }
}

void TagPropertyFilter::ArenaDtor(void* object) {
  TagPropertyFilter* _this = reinterpret_cast< TagPropertyFilter* >(object);
  (void)_this;
}
void TagPropertyFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TagPropertyFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TagPropertyFilter::clear_property() {
// @@protoc_insertion_point(one_of_clear_start:datacatalog.TagPropertyFilter)
  switch (property_case()) {
    case kTagName: {
      property_.tag_name_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROPERTY_NOT_SET;
}


void TagPropertyFilter::InternalSwap(TagPropertyFilter* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata TagPropertyFilter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[31]);
}

// ===================================================================

class PartitionPropertyFilter::_Internal {
 public:
  static const ::datacatalog::KeyValuePair& key_val(const PartitionPropertyFilter* msg);
};

const ::datacatalog::KeyValuePair&
PartitionPropertyFilter::_Internal::key_val(const PartitionPropertyFilter* msg) {
  return *msg->property_.key_val_;
}
void PartitionPropertyFilter::set_allocated_key_val(::datacatalog::KeyValuePair* key_val) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_property();
  if (key_val) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::datacatalog::KeyValuePair>::GetOwningArena(key_val);
    if (message_arena != submessage_arena) {
      key_val = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key_val, submessage_arena);
    }
    set_has_key_val();
    property_.key_val_ = key_val;
  }
  // @@protoc_insertion_point(field_set_allocated:datacatalog.PartitionPropertyFilter.key_val)
}
PartitionPropertyFilter::PartitionPropertyFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.PartitionPropertyFilter)
}
PartitionPropertyFilter::PartitionPropertyFilter(const PartitionPropertyFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_property();
  switch (from.property_case()) {
    case kKeyVal: {
      _internal_mutable_key_val()->::datacatalog::KeyValuePair::MergeFrom(from._internal_key_val());
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.PartitionPropertyFilter)
}

inline void PartitionPropertyFilter::SharedCtor() {
clear_has_property();
}

PartitionPropertyFilter::~PartitionPropertyFilter() {
  // @@protoc_insertion_point(destructor:datacatalog.PartitionPropertyFilter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PartitionPropertyFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_property()) {
    clear_property();
  }
}

void PartitionPropertyFilter::ArenaDtor(void* object) {
  PartitionPropertyFilter* _this = reinterpret_cast< PartitionPropertyFilter* >(object);
  (void)_this;
}
void PartitionPropertyFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartitionPropertyFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PartitionPropertyFilter::clear_property() {
// @@protoc_insertion_point(one_of_clear_start:datacatalog.PartitionPropertyFilter)
  switch (property_case()) {
    case kKeyVal: {
      if (GetArenaForAllocation() == nullptr) {
        delete property_.key_val_;
      }
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROPERTY_NOT_SET;
}


void PartitionPropertyFilter::InternalSwap(PartitionPropertyFilter* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata PartitionPropertyFilter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[32]);
}

// ===================================================================

class KeyValuePair::_Internal {
 public:
};

KeyValuePair::KeyValuePair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.KeyValuePair)
}
KeyValuePair::KeyValuePair(const KeyValuePair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.KeyValuePair)
}

inline void KeyValuePair::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KeyValuePair::~KeyValuePair() {
  // @@protoc_insertion_point(destructor:datacatalog.KeyValuePair)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KeyValuePair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeyValuePair::ArenaDtor(void* object) {
  KeyValuePair* _this = reinterpret_cast< KeyValuePair* >(object);
  (void)_this;
}
void KeyValuePair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyValuePair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeyValuePair::InternalSwap(KeyValuePair* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata KeyValuePair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[33]);
}

// ===================================================================

class DatasetPropertyFilter::_Internal {
 public:
};

DatasetPropertyFilter::DatasetPropertyFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.DatasetPropertyFilter)
}
DatasetPropertyFilter::DatasetPropertyFilter(const DatasetPropertyFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_property();
  switch (from.property_case()) {
    case kProject: {
      _internal_set_project(from._internal_project());
      break;
    }
    case kName: {
      _internal_set_name(from._internal_name());
      break;
    }
    case kDomain: {
      _internal_set_domain(from._internal_domain());
      break;
    }
    case kVersion: {
      _internal_set_version(from._internal_version());
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.DatasetPropertyFilter)
}

inline void DatasetPropertyFilter::SharedCtor() {
clear_has_property();
}

DatasetPropertyFilter::~DatasetPropertyFilter() {
  // @@protoc_insertion_point(destructor:datacatalog.DatasetPropertyFilter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DatasetPropertyFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_property()) {
    clear_property();
  }
}

void DatasetPropertyFilter::ArenaDtor(void* object) {
  DatasetPropertyFilter* _this = reinterpret_cast< DatasetPropertyFilter* >(object);
  (void)_this;
}
void DatasetPropertyFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DatasetPropertyFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DatasetPropertyFilter::clear_property() {
// @@protoc_insertion_point(one_of_clear_start:datacatalog.DatasetPropertyFilter)
  switch (property_case()) {
    case kProject: {
      property_.project_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kName: {
      property_.name_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kDomain: {
      property_.domain_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kVersion: {
      property_.version_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROPERTY_NOT_SET;
}


void DatasetPropertyFilter::InternalSwap(DatasetPropertyFilter* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata DatasetPropertyFilter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[34]);
}

// ===================================================================

class PaginationOptions::_Internal {
 public:
};

PaginationOptions::PaginationOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:datacatalog.PaginationOptions)
}
PaginationOptions::PaginationOptions(const PaginationOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  ::memcpy(&limit_, &from.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&sortorder_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(sortorder_));
  // @@protoc_insertion_point(copy_constructor:datacatalog.PaginationOptions)
}

inline void PaginationOptions::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&limit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sortorder_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(sortorder_));
}

PaginationOptions::~PaginationOptions() {
  // @@protoc_insertion_point(destructor:datacatalog.PaginationOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PaginationOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PaginationOptions::ArenaDtor(void* object) {
  PaginationOptions* _this = reinterpret_cast< PaginationOptions* >(object);
  (void)_this;
}
void PaginationOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PaginationOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PaginationOptions::InternalSwap(PaginationOptions* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata PaginationOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_getter, &descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto_once,
      file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[35]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace datacatalog
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::datacatalog::CreateDatasetRequest* Arena::CreateMaybeMessage< ::datacatalog::CreateDatasetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::CreateDatasetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::CreateDatasetResponse* Arena::CreateMaybeMessage< ::datacatalog::CreateDatasetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::CreateDatasetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::GetDatasetRequest* Arena::CreateMaybeMessage< ::datacatalog::GetDatasetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::GetDatasetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::GetDatasetResponse* Arena::CreateMaybeMessage< ::datacatalog::GetDatasetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::GetDatasetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::GetArtifactRequest* Arena::CreateMaybeMessage< ::datacatalog::GetArtifactRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::GetArtifactRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::GetArtifactResponse* Arena::CreateMaybeMessage< ::datacatalog::GetArtifactResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::GetArtifactResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::CreateArtifactRequest* Arena::CreateMaybeMessage< ::datacatalog::CreateArtifactRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::CreateArtifactRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::CreateArtifactResponse* Arena::CreateMaybeMessage< ::datacatalog::CreateArtifactResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::CreateArtifactResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::AddTagRequest* Arena::CreateMaybeMessage< ::datacatalog::AddTagRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::AddTagRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::AddTagResponse* Arena::CreateMaybeMessage< ::datacatalog::AddTagResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::AddTagResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::ListArtifactsRequest* Arena::CreateMaybeMessage< ::datacatalog::ListArtifactsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::ListArtifactsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::ListArtifactsResponse* Arena::CreateMaybeMessage< ::datacatalog::ListArtifactsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::ListArtifactsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::ListDatasetsRequest* Arena::CreateMaybeMessage< ::datacatalog::ListDatasetsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::ListDatasetsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::ListDatasetsResponse* Arena::CreateMaybeMessage< ::datacatalog::ListDatasetsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::ListDatasetsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::ReservationID* Arena::CreateMaybeMessage< ::datacatalog::ReservationID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::ReservationID >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::GetOrExtendReservationRequest* Arena::CreateMaybeMessage< ::datacatalog::GetOrExtendReservationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::GetOrExtendReservationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::Reservation* Arena::CreateMaybeMessage< ::datacatalog::Reservation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::Reservation >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::GetOrExtendReservationResponse* Arena::CreateMaybeMessage< ::datacatalog::GetOrExtendReservationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::GetOrExtendReservationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::ReleaseReservationRequest* Arena::CreateMaybeMessage< ::datacatalog::ReleaseReservationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::ReleaseReservationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::ReleaseReservationResponse* Arena::CreateMaybeMessage< ::datacatalog::ReleaseReservationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::ReleaseReservationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::Dataset* Arena::CreateMaybeMessage< ::datacatalog::Dataset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::Dataset >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::Partition* Arena::CreateMaybeMessage< ::datacatalog::Partition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::Partition >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::DatasetID* Arena::CreateMaybeMessage< ::datacatalog::DatasetID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::DatasetID >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::Artifact* Arena::CreateMaybeMessage< ::datacatalog::Artifact >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::Artifact >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::ArtifactData* Arena::CreateMaybeMessage< ::datacatalog::ArtifactData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::ArtifactData >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::Tag* Arena::CreateMaybeMessage< ::datacatalog::Tag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::Tag >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::Metadata_KeyMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::datacatalog::Metadata_KeyMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::Metadata_KeyMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::Metadata* Arena::CreateMaybeMessage< ::datacatalog::Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::FilterExpression* Arena::CreateMaybeMessage< ::datacatalog::FilterExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::FilterExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::SinglePropertyFilter* Arena::CreateMaybeMessage< ::datacatalog::SinglePropertyFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::SinglePropertyFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::ArtifactPropertyFilter* Arena::CreateMaybeMessage< ::datacatalog::ArtifactPropertyFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::ArtifactPropertyFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::TagPropertyFilter* Arena::CreateMaybeMessage< ::datacatalog::TagPropertyFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::TagPropertyFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::PartitionPropertyFilter* Arena::CreateMaybeMessage< ::datacatalog::PartitionPropertyFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::PartitionPropertyFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::KeyValuePair* Arena::CreateMaybeMessage< ::datacatalog::KeyValuePair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::KeyValuePair >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::DatasetPropertyFilter* Arena::CreateMaybeMessage< ::datacatalog::DatasetPropertyFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::DatasetPropertyFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::PaginationOptions* Arena::CreateMaybeMessage< ::datacatalog::PaginationOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datacatalog::PaginationOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
