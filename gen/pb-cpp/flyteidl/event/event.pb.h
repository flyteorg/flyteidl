// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/event/event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fevent_2fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fevent_2fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/literals.pb.h"
#include "flyteidl/core/compiler.pb.h"
#include "flyteidl/core/execution.pb.h"
#include "flyteidl/core/identifier.pb.h"
#include "flyteidl/core/catalog.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fevent_2fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fevent_2fevent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fevent_2fevent_2eproto;
namespace flyteidl {
namespace event {
class DynamicWorkflowNodeMetadata;
struct DynamicWorkflowNodeMetadataDefaultTypeInternal;
extern DynamicWorkflowNodeMetadataDefaultTypeInternal _DynamicWorkflowNodeMetadata_default_instance_;
class ExternalResourceInfo;
struct ExternalResourceInfoDefaultTypeInternal;
extern ExternalResourceInfoDefaultTypeInternal _ExternalResourceInfo_default_instance_;
class NodeExecutionEvent;
struct NodeExecutionEventDefaultTypeInternal;
extern NodeExecutionEventDefaultTypeInternal _NodeExecutionEvent_default_instance_;
class ParentNodeExecutionMetadata;
struct ParentNodeExecutionMetadataDefaultTypeInternal;
extern ParentNodeExecutionMetadataDefaultTypeInternal _ParentNodeExecutionMetadata_default_instance_;
class ParentTaskExecutionMetadata;
struct ParentTaskExecutionMetadataDefaultTypeInternal;
extern ParentTaskExecutionMetadataDefaultTypeInternal _ParentTaskExecutionMetadata_default_instance_;
class ResourcePoolInfo;
struct ResourcePoolInfoDefaultTypeInternal;
extern ResourcePoolInfoDefaultTypeInternal _ResourcePoolInfo_default_instance_;
class TaskExecutionEvent;
struct TaskExecutionEventDefaultTypeInternal;
extern TaskExecutionEventDefaultTypeInternal _TaskExecutionEvent_default_instance_;
class TaskExecutionMetadata;
struct TaskExecutionMetadataDefaultTypeInternal;
extern TaskExecutionMetadataDefaultTypeInternal _TaskExecutionMetadata_default_instance_;
class TaskNodeMetadata;
struct TaskNodeMetadataDefaultTypeInternal;
extern TaskNodeMetadataDefaultTypeInternal _TaskNodeMetadata_default_instance_;
class WorkflowExecutionEvent;
struct WorkflowExecutionEventDefaultTypeInternal;
extern WorkflowExecutionEventDefaultTypeInternal _WorkflowExecutionEvent_default_instance_;
class WorkflowNodeMetadata;
struct WorkflowNodeMetadataDefaultTypeInternal;
extern WorkflowNodeMetadataDefaultTypeInternal _WorkflowNodeMetadata_default_instance_;
}  // namespace event
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::event::DynamicWorkflowNodeMetadata* Arena::CreateMaybeMessage<::flyteidl::event::DynamicWorkflowNodeMetadata>(Arena*);
template<> ::flyteidl::event::ExternalResourceInfo* Arena::CreateMaybeMessage<::flyteidl::event::ExternalResourceInfo>(Arena*);
template<> ::flyteidl::event::NodeExecutionEvent* Arena::CreateMaybeMessage<::flyteidl::event::NodeExecutionEvent>(Arena*);
template<> ::flyteidl::event::ParentNodeExecutionMetadata* Arena::CreateMaybeMessage<::flyteidl::event::ParentNodeExecutionMetadata>(Arena*);
template<> ::flyteidl::event::ParentTaskExecutionMetadata* Arena::CreateMaybeMessage<::flyteidl::event::ParentTaskExecutionMetadata>(Arena*);
template<> ::flyteidl::event::ResourcePoolInfo* Arena::CreateMaybeMessage<::flyteidl::event::ResourcePoolInfo>(Arena*);
template<> ::flyteidl::event::TaskExecutionEvent* Arena::CreateMaybeMessage<::flyteidl::event::TaskExecutionEvent>(Arena*);
template<> ::flyteidl::event::TaskExecutionMetadata* Arena::CreateMaybeMessage<::flyteidl::event::TaskExecutionMetadata>(Arena*);
template<> ::flyteidl::event::TaskNodeMetadata* Arena::CreateMaybeMessage<::flyteidl::event::TaskNodeMetadata>(Arena*);
template<> ::flyteidl::event::WorkflowExecutionEvent* Arena::CreateMaybeMessage<::flyteidl::event::WorkflowExecutionEvent>(Arena*);
template<> ::flyteidl::event::WorkflowNodeMetadata* Arena::CreateMaybeMessage<::flyteidl::event::WorkflowNodeMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace event {

enum TaskExecutionMetadata_InstanceClass : int {
  TaskExecutionMetadata_InstanceClass_DEFAULT = 0,
  TaskExecutionMetadata_InstanceClass_INTERRUPTIBLE = 1,
  TaskExecutionMetadata_InstanceClass_TaskExecutionMetadata_InstanceClass_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TaskExecutionMetadata_InstanceClass_TaskExecutionMetadata_InstanceClass_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TaskExecutionMetadata_InstanceClass_IsValid(int value);
constexpr TaskExecutionMetadata_InstanceClass TaskExecutionMetadata_InstanceClass_InstanceClass_MIN = TaskExecutionMetadata_InstanceClass_DEFAULT;
constexpr TaskExecutionMetadata_InstanceClass TaskExecutionMetadata_InstanceClass_InstanceClass_MAX = TaskExecutionMetadata_InstanceClass_INTERRUPTIBLE;
constexpr int TaskExecutionMetadata_InstanceClass_InstanceClass_ARRAYSIZE = TaskExecutionMetadata_InstanceClass_InstanceClass_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskExecutionMetadata_InstanceClass_descriptor();
template<typename T>
inline const std::string& TaskExecutionMetadata_InstanceClass_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TaskExecutionMetadata_InstanceClass>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TaskExecutionMetadata_InstanceClass_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TaskExecutionMetadata_InstanceClass_descriptor(), enum_t_value);
}
inline bool TaskExecutionMetadata_InstanceClass_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TaskExecutionMetadata_InstanceClass* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TaskExecutionMetadata_InstanceClass>(
    TaskExecutionMetadata_InstanceClass_descriptor(), name, value);
}
// ===================================================================

class WorkflowExecutionEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.WorkflowExecutionEvent) */ {
 public:
  inline WorkflowExecutionEvent() : WorkflowExecutionEvent(nullptr) {}
  ~WorkflowExecutionEvent() override;
  explicit constexpr WorkflowExecutionEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowExecutionEvent(const WorkflowExecutionEvent& from);
  WorkflowExecutionEvent(WorkflowExecutionEvent&& from) noexcept
    : WorkflowExecutionEvent() {
    *this = ::std::move(from);
  }

  inline WorkflowExecutionEvent& operator=(const WorkflowExecutionEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowExecutionEvent& operator=(WorkflowExecutionEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowExecutionEvent& default_instance() {
    return *internal_default_instance();
  }
  enum OutputResultCase {
    kOutputUri = 5,
    kError = 6,
    kOutputData = 7,
    OUTPUT_RESULT_NOT_SET = 0,
  };

  static inline const WorkflowExecutionEvent* internal_default_instance() {
    return reinterpret_cast<const WorkflowExecutionEvent*>(
               &_WorkflowExecutionEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WorkflowExecutionEvent& a, WorkflowExecutionEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowExecutionEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowExecutionEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkflowExecutionEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkflowExecutionEvent>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowExecutionEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.event.WorkflowExecutionEvent";
  }
  protected:
  explicit WorkflowExecutionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProducerIdFieldNumber = 2,
    kExecutionIdFieldNumber = 1,
    kOccurredAtFieldNumber = 4,
    kPhaseFieldNumber = 3,
    kOutputUriFieldNumber = 5,
    kErrorFieldNumber = 6,
    kOutputDataFieldNumber = 7,
  };
  // string producer_id = 2 [json_name = "producerId"];
  void clear_producer_id();
  const std::string& producer_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_producer_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_producer_id();
  PROTOBUF_NODISCARD std::string* release_producer_id();
  void set_allocated_producer_id(std::string* producer_id);
  private:
  const std::string& _internal_producer_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_producer_id(const std::string& value);
  std::string* _internal_mutable_producer_id();
  public:

  // .flyteidl.core.WorkflowExecutionIdentifier execution_id = 1 [json_name = "executionId"];
  bool has_execution_id() const;
  private:
  bool _internal_has_execution_id() const;
  public:
  void clear_execution_id();
  const ::flyteidl::core::WorkflowExecutionIdentifier& execution_id() const;
  PROTOBUF_NODISCARD ::flyteidl::core::WorkflowExecutionIdentifier* release_execution_id();
  ::flyteidl::core::WorkflowExecutionIdentifier* mutable_execution_id();
  void set_allocated_execution_id(::flyteidl::core::WorkflowExecutionIdentifier* execution_id);
  private:
  const ::flyteidl::core::WorkflowExecutionIdentifier& _internal_execution_id() const;
  ::flyteidl::core::WorkflowExecutionIdentifier* _internal_mutable_execution_id();
  public:
  void unsafe_arena_set_allocated_execution_id(
      ::flyteidl::core::WorkflowExecutionIdentifier* execution_id);
  ::flyteidl::core::WorkflowExecutionIdentifier* unsafe_arena_release_execution_id();

  // .google.protobuf.Timestamp occurred_at = 4 [json_name = "occurredAt"];
  bool has_occurred_at() const;
  private:
  bool _internal_has_occurred_at() const;
  public:
  void clear_occurred_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& occurred_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_occurred_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_occurred_at();
  void set_allocated_occurred_at(::PROTOBUF_NAMESPACE_ID::Timestamp* occurred_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_occurred_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_occurred_at();
  public:
  void unsafe_arena_set_allocated_occurred_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* occurred_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_occurred_at();

  // .flyteidl.core.WorkflowExecution.Phase phase = 3 [json_name = "phase"];
  void clear_phase();
  ::flyteidl::core::WorkflowExecution_Phase phase() const;
  void set_phase(::flyteidl::core::WorkflowExecution_Phase value);
  private:
  ::flyteidl::core::WorkflowExecution_Phase _internal_phase() const;
  void _internal_set_phase(::flyteidl::core::WorkflowExecution_Phase value);
  public:

  // string output_uri = 5 [json_name = "outputUri"];
  bool has_output_uri() const;
  private:
  bool _internal_has_output_uri() const;
  public:
  void clear_output_uri();
  const std::string& output_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_uri();
  PROTOBUF_NODISCARD std::string* release_output_uri();
  void set_allocated_output_uri(std::string* output_uri);
  private:
  const std::string& _internal_output_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_uri(const std::string& value);
  std::string* _internal_mutable_output_uri();
  public:

  // .flyteidl.core.ExecutionError error = 6 [json_name = "error"];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::flyteidl::core::ExecutionError& error() const;
  PROTOBUF_NODISCARD ::flyteidl::core::ExecutionError* release_error();
  ::flyteidl::core::ExecutionError* mutable_error();
  void set_allocated_error(::flyteidl::core::ExecutionError* error);
  private:
  const ::flyteidl::core::ExecutionError& _internal_error() const;
  ::flyteidl::core::ExecutionError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::flyteidl::core::ExecutionError* error);
  ::flyteidl::core::ExecutionError* unsafe_arena_release_error();

  // .flyteidl.core.LiteralMap output_data = 7 [json_name = "outputData"];
  bool has_output_data() const;
  private:
  bool _internal_has_output_data() const;
  public:
  void clear_output_data();
  const ::flyteidl::core::LiteralMap& output_data() const;
  PROTOBUF_NODISCARD ::flyteidl::core::LiteralMap* release_output_data();
  ::flyteidl::core::LiteralMap* mutable_output_data();
  void set_allocated_output_data(::flyteidl::core::LiteralMap* output_data);
  private:
  const ::flyteidl::core::LiteralMap& _internal_output_data() const;
  ::flyteidl::core::LiteralMap* _internal_mutable_output_data();
  public:
  void unsafe_arena_set_allocated_output_data(
      ::flyteidl::core::LiteralMap* output_data);
  ::flyteidl::core::LiteralMap* unsafe_arena_release_output_data();

  void clear_output_result();
  OutputResultCase output_result_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.event.WorkflowExecutionEvent)
 private:
  class _Internal;
  void set_has_output_uri();
  void set_has_error();
  void set_has_output_data();

  inline bool has_output_result() const;
  inline void clear_has_output_result();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr producer_id_;
  ::flyteidl::core::WorkflowExecutionIdentifier* execution_id_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* occurred_at_;
  int phase_;
  union OutputResultUnion {
    constexpr OutputResultUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_uri_;
    ::flyteidl::core::ExecutionError* error_;
    ::flyteidl::core::LiteralMap* output_data_;
  } output_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class NodeExecutionEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.NodeExecutionEvent) */ {
 public:
  inline NodeExecutionEvent() : NodeExecutionEvent(nullptr) {}
  ~NodeExecutionEvent() override;
  explicit constexpr NodeExecutionEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeExecutionEvent(const NodeExecutionEvent& from);
  NodeExecutionEvent(NodeExecutionEvent&& from) noexcept
    : NodeExecutionEvent() {
    *this = ::std::move(from);
  }

  inline NodeExecutionEvent& operator=(const NodeExecutionEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeExecutionEvent& operator=(NodeExecutionEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeExecutionEvent& default_instance() {
    return *internal_default_instance();
  }
  enum OutputResultCase {
    kOutputUri = 6,
    kError = 7,
    kOutputData = 15,
    OUTPUT_RESULT_NOT_SET = 0,
  };

  enum TargetMetadataCase {
    kWorkflowNodeMetadata = 8,
    kTaskNodeMetadata = 14,
    TARGET_METADATA_NOT_SET = 0,
  };

  static inline const NodeExecutionEvent* internal_default_instance() {
    return reinterpret_cast<const NodeExecutionEvent*>(
               &_NodeExecutionEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NodeExecutionEvent& a, NodeExecutionEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeExecutionEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeExecutionEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeExecutionEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeExecutionEvent>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeExecutionEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.event.NodeExecutionEvent";
  }
  protected:
  explicit NodeExecutionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProducerIdFieldNumber = 2,
    kInputUriFieldNumber = 5,
    kRetryGroupFieldNumber = 11,
    kSpecNodeIdFieldNumber = 12,
    kNodeNameFieldNumber = 13,
    kIdFieldNumber = 1,
    kOccurredAtFieldNumber = 4,
    kParentTaskMetadataFieldNumber = 9,
    kParentNodeMetadataFieldNumber = 10,
    kPhaseFieldNumber = 3,
    kEventVersionFieldNumber = 16,
    kIsParentFieldNumber = 17,
    kIsDynamicFieldNumber = 18,
    kOutputUriFieldNumber = 6,
    kErrorFieldNumber = 7,
    kOutputDataFieldNumber = 15,
    kWorkflowNodeMetadataFieldNumber = 8,
    kTaskNodeMetadataFieldNumber = 14,
  };
  // string producer_id = 2 [json_name = "producerId"];
  void clear_producer_id();
  const std::string& producer_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_producer_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_producer_id();
  PROTOBUF_NODISCARD std::string* release_producer_id();
  void set_allocated_producer_id(std::string* producer_id);
  private:
  const std::string& _internal_producer_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_producer_id(const std::string& value);
  std::string* _internal_mutable_producer_id();
  public:

  // string input_uri = 5 [json_name = "inputUri"];
  void clear_input_uri();
  const std::string& input_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_uri();
  PROTOBUF_NODISCARD std::string* release_input_uri();
  void set_allocated_input_uri(std::string* input_uri);
  private:
  const std::string& _internal_input_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_uri(const std::string& value);
  std::string* _internal_mutable_input_uri();
  public:

  // string retry_group = 11 [json_name = "retryGroup"];
  void clear_retry_group();
  const std::string& retry_group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_retry_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_retry_group();
  PROTOBUF_NODISCARD std::string* release_retry_group();
  void set_allocated_retry_group(std::string* retry_group);
  private:
  const std::string& _internal_retry_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_retry_group(const std::string& value);
  std::string* _internal_mutable_retry_group();
  public:

  // string spec_node_id = 12 [json_name = "specNodeId"];
  void clear_spec_node_id();
  const std::string& spec_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_spec_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_spec_node_id();
  PROTOBUF_NODISCARD std::string* release_spec_node_id();
  void set_allocated_spec_node_id(std::string* spec_node_id);
  private:
  const std::string& _internal_spec_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spec_node_id(const std::string& value);
  std::string* _internal_mutable_spec_node_id();
  public:

  // string node_name = 13 [json_name = "nodeName"];
  void clear_node_name();
  const std::string& node_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node_name();
  PROTOBUF_NODISCARD std::string* release_node_name();
  void set_allocated_node_name(std::string* node_name);
  private:
  const std::string& _internal_node_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_name(const std::string& value);
  std::string* _internal_mutable_node_name();
  public:

  // .flyteidl.core.NodeExecutionIdentifier id = 1 [json_name = "id"];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::flyteidl::core::NodeExecutionIdentifier& id() const;
  PROTOBUF_NODISCARD ::flyteidl::core::NodeExecutionIdentifier* release_id();
  ::flyteidl::core::NodeExecutionIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::core::NodeExecutionIdentifier* id);
  private:
  const ::flyteidl::core::NodeExecutionIdentifier& _internal_id() const;
  ::flyteidl::core::NodeExecutionIdentifier* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::flyteidl::core::NodeExecutionIdentifier* id);
  ::flyteidl::core::NodeExecutionIdentifier* unsafe_arena_release_id();

  // .google.protobuf.Timestamp occurred_at = 4 [json_name = "occurredAt"];
  bool has_occurred_at() const;
  private:
  bool _internal_has_occurred_at() const;
  public:
  void clear_occurred_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& occurred_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_occurred_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_occurred_at();
  void set_allocated_occurred_at(::PROTOBUF_NAMESPACE_ID::Timestamp* occurred_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_occurred_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_occurred_at();
  public:
  void unsafe_arena_set_allocated_occurred_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* occurred_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_occurred_at();

  // .flyteidl.event.ParentTaskExecutionMetadata parent_task_metadata = 9 [json_name = "parentTaskMetadata"];
  bool has_parent_task_metadata() const;
  private:
  bool _internal_has_parent_task_metadata() const;
  public:
  void clear_parent_task_metadata();
  const ::flyteidl::event::ParentTaskExecutionMetadata& parent_task_metadata() const;
  PROTOBUF_NODISCARD ::flyteidl::event::ParentTaskExecutionMetadata* release_parent_task_metadata();
  ::flyteidl::event::ParentTaskExecutionMetadata* mutable_parent_task_metadata();
  void set_allocated_parent_task_metadata(::flyteidl::event::ParentTaskExecutionMetadata* parent_task_metadata);
  private:
  const ::flyteidl::event::ParentTaskExecutionMetadata& _internal_parent_task_metadata() const;
  ::flyteidl::event::ParentTaskExecutionMetadata* _internal_mutable_parent_task_metadata();
  public:
  void unsafe_arena_set_allocated_parent_task_metadata(
      ::flyteidl::event::ParentTaskExecutionMetadata* parent_task_metadata);
  ::flyteidl::event::ParentTaskExecutionMetadata* unsafe_arena_release_parent_task_metadata();

  // .flyteidl.event.ParentNodeExecutionMetadata parent_node_metadata = 10 [json_name = "parentNodeMetadata"];
  bool has_parent_node_metadata() const;
  private:
  bool _internal_has_parent_node_metadata() const;
  public:
  void clear_parent_node_metadata();
  const ::flyteidl::event::ParentNodeExecutionMetadata& parent_node_metadata() const;
  PROTOBUF_NODISCARD ::flyteidl::event::ParentNodeExecutionMetadata* release_parent_node_metadata();
  ::flyteidl::event::ParentNodeExecutionMetadata* mutable_parent_node_metadata();
  void set_allocated_parent_node_metadata(::flyteidl::event::ParentNodeExecutionMetadata* parent_node_metadata);
  private:
  const ::flyteidl::event::ParentNodeExecutionMetadata& _internal_parent_node_metadata() const;
  ::flyteidl::event::ParentNodeExecutionMetadata* _internal_mutable_parent_node_metadata();
  public:
  void unsafe_arena_set_allocated_parent_node_metadata(
      ::flyteidl::event::ParentNodeExecutionMetadata* parent_node_metadata);
  ::flyteidl::event::ParentNodeExecutionMetadata* unsafe_arena_release_parent_node_metadata();

  // .flyteidl.core.NodeExecution.Phase phase = 3 [json_name = "phase"];
  void clear_phase();
  ::flyteidl::core::NodeExecution_Phase phase() const;
  void set_phase(::flyteidl::core::NodeExecution_Phase value);
  private:
  ::flyteidl::core::NodeExecution_Phase _internal_phase() const;
  void _internal_set_phase(::flyteidl::core::NodeExecution_Phase value);
  public:

  // int32 event_version = 16 [json_name = "eventVersion"];
  void clear_event_version();
  int32_t event_version() const;
  void set_event_version(int32_t value);
  private:
  int32_t _internal_event_version() const;
  void _internal_set_event_version(int32_t value);
  public:

  // bool is_parent = 17 [json_name = "isParent"];
  void clear_is_parent();
  bool is_parent() const;
  void set_is_parent(bool value);
  private:
  bool _internal_is_parent() const;
  void _internal_set_is_parent(bool value);
  public:

  // bool is_dynamic = 18 [json_name = "isDynamic"];
  void clear_is_dynamic();
  bool is_dynamic() const;
  void set_is_dynamic(bool value);
  private:
  bool _internal_is_dynamic() const;
  void _internal_set_is_dynamic(bool value);
  public:

  // string output_uri = 6 [json_name = "outputUri"];
  bool has_output_uri() const;
  private:
  bool _internal_has_output_uri() const;
  public:
  void clear_output_uri();
  const std::string& output_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_uri();
  PROTOBUF_NODISCARD std::string* release_output_uri();
  void set_allocated_output_uri(std::string* output_uri);
  private:
  const std::string& _internal_output_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_uri(const std::string& value);
  std::string* _internal_mutable_output_uri();
  public:

  // .flyteidl.core.ExecutionError error = 7 [json_name = "error"];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::flyteidl::core::ExecutionError& error() const;
  PROTOBUF_NODISCARD ::flyteidl::core::ExecutionError* release_error();
  ::flyteidl::core::ExecutionError* mutable_error();
  void set_allocated_error(::flyteidl::core::ExecutionError* error);
  private:
  const ::flyteidl::core::ExecutionError& _internal_error() const;
  ::flyteidl::core::ExecutionError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::flyteidl::core::ExecutionError* error);
  ::flyteidl::core::ExecutionError* unsafe_arena_release_error();

  // .flyteidl.core.LiteralMap output_data = 15 [json_name = "outputData"];
  bool has_output_data() const;
  private:
  bool _internal_has_output_data() const;
  public:
  void clear_output_data();
  const ::flyteidl::core::LiteralMap& output_data() const;
  PROTOBUF_NODISCARD ::flyteidl::core::LiteralMap* release_output_data();
  ::flyteidl::core::LiteralMap* mutable_output_data();
  void set_allocated_output_data(::flyteidl::core::LiteralMap* output_data);
  private:
  const ::flyteidl::core::LiteralMap& _internal_output_data() const;
  ::flyteidl::core::LiteralMap* _internal_mutable_output_data();
  public:
  void unsafe_arena_set_allocated_output_data(
      ::flyteidl::core::LiteralMap* output_data);
  ::flyteidl::core::LiteralMap* unsafe_arena_release_output_data();

  // .flyteidl.event.WorkflowNodeMetadata workflow_node_metadata = 8 [json_name = "workflowNodeMetadata"];
  bool has_workflow_node_metadata() const;
  private:
  bool _internal_has_workflow_node_metadata() const;
  public:
  void clear_workflow_node_metadata();
  const ::flyteidl::event::WorkflowNodeMetadata& workflow_node_metadata() const;
  PROTOBUF_NODISCARD ::flyteidl::event::WorkflowNodeMetadata* release_workflow_node_metadata();
  ::flyteidl::event::WorkflowNodeMetadata* mutable_workflow_node_metadata();
  void set_allocated_workflow_node_metadata(::flyteidl::event::WorkflowNodeMetadata* workflow_node_metadata);
  private:
  const ::flyteidl::event::WorkflowNodeMetadata& _internal_workflow_node_metadata() const;
  ::flyteidl::event::WorkflowNodeMetadata* _internal_mutable_workflow_node_metadata();
  public:
  void unsafe_arena_set_allocated_workflow_node_metadata(
      ::flyteidl::event::WorkflowNodeMetadata* workflow_node_metadata);
  ::flyteidl::event::WorkflowNodeMetadata* unsafe_arena_release_workflow_node_metadata();

  // .flyteidl.event.TaskNodeMetadata task_node_metadata = 14 [json_name = "taskNodeMetadata"];
  bool has_task_node_metadata() const;
  private:
  bool _internal_has_task_node_metadata() const;
  public:
  void clear_task_node_metadata();
  const ::flyteidl::event::TaskNodeMetadata& task_node_metadata() const;
  PROTOBUF_NODISCARD ::flyteidl::event::TaskNodeMetadata* release_task_node_metadata();
  ::flyteidl::event::TaskNodeMetadata* mutable_task_node_metadata();
  void set_allocated_task_node_metadata(::flyteidl::event::TaskNodeMetadata* task_node_metadata);
  private:
  const ::flyteidl::event::TaskNodeMetadata& _internal_task_node_metadata() const;
  ::flyteidl::event::TaskNodeMetadata* _internal_mutable_task_node_metadata();
  public:
  void unsafe_arena_set_allocated_task_node_metadata(
      ::flyteidl::event::TaskNodeMetadata* task_node_metadata);
  ::flyteidl::event::TaskNodeMetadata* unsafe_arena_release_task_node_metadata();

  void clear_output_result();
  OutputResultCase output_result_case() const;
  void clear_target_metadata();
  TargetMetadataCase target_metadata_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.event.NodeExecutionEvent)
 private:
  class _Internal;
  void set_has_output_uri();
  void set_has_error();
  void set_has_output_data();
  void set_has_workflow_node_metadata();
  void set_has_task_node_metadata();

  inline bool has_output_result() const;
  inline void clear_has_output_result();

  inline bool has_target_metadata() const;
  inline void clear_has_target_metadata();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr producer_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr retry_group_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spec_node_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_name_;
  ::flyteidl::core::NodeExecutionIdentifier* id_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* occurred_at_;
  ::flyteidl::event::ParentTaskExecutionMetadata* parent_task_metadata_;
  ::flyteidl::event::ParentNodeExecutionMetadata* parent_node_metadata_;
  int phase_;
  int32_t event_version_;
  bool is_parent_;
  bool is_dynamic_;
  union OutputResultUnion {
    constexpr OutputResultUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_uri_;
    ::flyteidl::core::ExecutionError* error_;
    ::flyteidl::core::LiteralMap* output_data_;
  } output_result_;
  union TargetMetadataUnion {
    constexpr TargetMetadataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::flyteidl::event::WorkflowNodeMetadata* workflow_node_metadata_;
    ::flyteidl::event::TaskNodeMetadata* task_node_metadata_;
  } target_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[2];

  friend struct ::TableStruct_flyteidl_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class WorkflowNodeMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.WorkflowNodeMetadata) */ {
 public:
  inline WorkflowNodeMetadata() : WorkflowNodeMetadata(nullptr) {}
  ~WorkflowNodeMetadata() override;
  explicit constexpr WorkflowNodeMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowNodeMetadata(const WorkflowNodeMetadata& from);
  WorkflowNodeMetadata(WorkflowNodeMetadata&& from) noexcept
    : WorkflowNodeMetadata() {
    *this = ::std::move(from);
  }

  inline WorkflowNodeMetadata& operator=(const WorkflowNodeMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowNodeMetadata& operator=(WorkflowNodeMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowNodeMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowNodeMetadata* internal_default_instance() {
    return reinterpret_cast<const WorkflowNodeMetadata*>(
               &_WorkflowNodeMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WorkflowNodeMetadata& a, WorkflowNodeMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowNodeMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowNodeMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkflowNodeMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkflowNodeMetadata>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowNodeMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.event.WorkflowNodeMetadata";
  }
  protected:
  explicit WorkflowNodeMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExecutionIdFieldNumber = 1,
  };
  // .flyteidl.core.WorkflowExecutionIdentifier execution_id = 1 [json_name = "executionId"];
  bool has_execution_id() const;
  private:
  bool _internal_has_execution_id() const;
  public:
  void clear_execution_id();
  const ::flyteidl::core::WorkflowExecutionIdentifier& execution_id() const;
  PROTOBUF_NODISCARD ::flyteidl::core::WorkflowExecutionIdentifier* release_execution_id();
  ::flyteidl::core::WorkflowExecutionIdentifier* mutable_execution_id();
  void set_allocated_execution_id(::flyteidl::core::WorkflowExecutionIdentifier* execution_id);
  private:
  const ::flyteidl::core::WorkflowExecutionIdentifier& _internal_execution_id() const;
  ::flyteidl::core::WorkflowExecutionIdentifier* _internal_mutable_execution_id();
  public:
  void unsafe_arena_set_allocated_execution_id(
      ::flyteidl::core::WorkflowExecutionIdentifier* execution_id);
  ::flyteidl::core::WorkflowExecutionIdentifier* unsafe_arena_release_execution_id();

  // @@protoc_insertion_point(class_scope:flyteidl.event.WorkflowNodeMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::WorkflowExecutionIdentifier* execution_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class TaskNodeMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.TaskNodeMetadata) */ {
 public:
  inline TaskNodeMetadata() : TaskNodeMetadata(nullptr) {}
  ~TaskNodeMetadata() override;
  explicit constexpr TaskNodeMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskNodeMetadata(const TaskNodeMetadata& from);
  TaskNodeMetadata(TaskNodeMetadata&& from) noexcept
    : TaskNodeMetadata() {
    *this = ::std::move(from);
  }

  inline TaskNodeMetadata& operator=(const TaskNodeMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskNodeMetadata& operator=(TaskNodeMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskNodeMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskNodeMetadata* internal_default_instance() {
    return reinterpret_cast<const TaskNodeMetadata*>(
               &_TaskNodeMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TaskNodeMetadata& a, TaskNodeMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskNodeMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskNodeMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskNodeMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskNodeMetadata>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskNodeMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.event.TaskNodeMetadata";
  }
  protected:
  explicit TaskNodeMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCatalogKeyFieldNumber = 2,
    kDynamicWorkflowFieldNumber = 16,
    kCacheStatusFieldNumber = 1,
    kReservationStatusFieldNumber = 3,
  };
  // .flyteidl.core.CatalogMetadata catalog_key = 2 [json_name = "catalogKey"];
  bool has_catalog_key() const;
  private:
  bool _internal_has_catalog_key() const;
  public:
  void clear_catalog_key();
  const ::flyteidl::core::CatalogMetadata& catalog_key() const;
  PROTOBUF_NODISCARD ::flyteidl::core::CatalogMetadata* release_catalog_key();
  ::flyteidl::core::CatalogMetadata* mutable_catalog_key();
  void set_allocated_catalog_key(::flyteidl::core::CatalogMetadata* catalog_key);
  private:
  const ::flyteidl::core::CatalogMetadata& _internal_catalog_key() const;
  ::flyteidl::core::CatalogMetadata* _internal_mutable_catalog_key();
  public:
  void unsafe_arena_set_allocated_catalog_key(
      ::flyteidl::core::CatalogMetadata* catalog_key);
  ::flyteidl::core::CatalogMetadata* unsafe_arena_release_catalog_key();

  // .flyteidl.event.DynamicWorkflowNodeMetadata dynamic_workflow = 16 [json_name = "dynamicWorkflow"];
  bool has_dynamic_workflow() const;
  private:
  bool _internal_has_dynamic_workflow() const;
  public:
  void clear_dynamic_workflow();
  const ::flyteidl::event::DynamicWorkflowNodeMetadata& dynamic_workflow() const;
  PROTOBUF_NODISCARD ::flyteidl::event::DynamicWorkflowNodeMetadata* release_dynamic_workflow();
  ::flyteidl::event::DynamicWorkflowNodeMetadata* mutable_dynamic_workflow();
  void set_allocated_dynamic_workflow(::flyteidl::event::DynamicWorkflowNodeMetadata* dynamic_workflow);
  private:
  const ::flyteidl::event::DynamicWorkflowNodeMetadata& _internal_dynamic_workflow() const;
  ::flyteidl::event::DynamicWorkflowNodeMetadata* _internal_mutable_dynamic_workflow();
  public:
  void unsafe_arena_set_allocated_dynamic_workflow(
      ::flyteidl::event::DynamicWorkflowNodeMetadata* dynamic_workflow);
  ::flyteidl::event::DynamicWorkflowNodeMetadata* unsafe_arena_release_dynamic_workflow();

  // .flyteidl.core.CatalogCacheStatus cache_status = 1 [json_name = "cacheStatus"];
  void clear_cache_status();
  ::flyteidl::core::CatalogCacheStatus cache_status() const;
  void set_cache_status(::flyteidl::core::CatalogCacheStatus value);
  private:
  ::flyteidl::core::CatalogCacheStatus _internal_cache_status() const;
  void _internal_set_cache_status(::flyteidl::core::CatalogCacheStatus value);
  public:

  // .flyteidl.core.CatalogReservation.Status reservation_status = 3 [json_name = "reservationStatus"];
  void clear_reservation_status();
  ::flyteidl::core::CatalogReservation_Status reservation_status() const;
  void set_reservation_status(::flyteidl::core::CatalogReservation_Status value);
  private:
  ::flyteidl::core::CatalogReservation_Status _internal_reservation_status() const;
  void _internal_set_reservation_status(::flyteidl::core::CatalogReservation_Status value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.event.TaskNodeMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::CatalogMetadata* catalog_key_;
  ::flyteidl::event::DynamicWorkflowNodeMetadata* dynamic_workflow_;
  int cache_status_;
  int reservation_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class DynamicWorkflowNodeMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.DynamicWorkflowNodeMetadata) */ {
 public:
  inline DynamicWorkflowNodeMetadata() : DynamicWorkflowNodeMetadata(nullptr) {}
  ~DynamicWorkflowNodeMetadata() override;
  explicit constexpr DynamicWorkflowNodeMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DynamicWorkflowNodeMetadata(const DynamicWorkflowNodeMetadata& from);
  DynamicWorkflowNodeMetadata(DynamicWorkflowNodeMetadata&& from) noexcept
    : DynamicWorkflowNodeMetadata() {
    *this = ::std::move(from);
  }

  inline DynamicWorkflowNodeMetadata& operator=(const DynamicWorkflowNodeMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline DynamicWorkflowNodeMetadata& operator=(DynamicWorkflowNodeMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DynamicWorkflowNodeMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const DynamicWorkflowNodeMetadata* internal_default_instance() {
    return reinterpret_cast<const DynamicWorkflowNodeMetadata*>(
               &_DynamicWorkflowNodeMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DynamicWorkflowNodeMetadata& a, DynamicWorkflowNodeMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(DynamicWorkflowNodeMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DynamicWorkflowNodeMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DynamicWorkflowNodeMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DynamicWorkflowNodeMetadata>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynamicWorkflowNodeMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.event.DynamicWorkflowNodeMetadata";
  }
  protected:
  explicit DynamicWorkflowNodeMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCompiledWorkflowFieldNumber = 2,
  };
  // .flyteidl.core.Identifier id = 1 [json_name = "id"];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::flyteidl::core::Identifier& id() const;
  PROTOBUF_NODISCARD ::flyteidl::core::Identifier* release_id();
  ::flyteidl::core::Identifier* mutable_id();
  void set_allocated_id(::flyteidl::core::Identifier* id);
  private:
  const ::flyteidl::core::Identifier& _internal_id() const;
  ::flyteidl::core::Identifier* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::flyteidl::core::Identifier* id);
  ::flyteidl::core::Identifier* unsafe_arena_release_id();

  // .flyteidl.core.CompiledWorkflowClosure compiled_workflow = 2 [json_name = "compiledWorkflow"];
  bool has_compiled_workflow() const;
  private:
  bool _internal_has_compiled_workflow() const;
  public:
  void clear_compiled_workflow();
  const ::flyteidl::core::CompiledWorkflowClosure& compiled_workflow() const;
  PROTOBUF_NODISCARD ::flyteidl::core::CompiledWorkflowClosure* release_compiled_workflow();
  ::flyteidl::core::CompiledWorkflowClosure* mutable_compiled_workflow();
  void set_allocated_compiled_workflow(::flyteidl::core::CompiledWorkflowClosure* compiled_workflow);
  private:
  const ::flyteidl::core::CompiledWorkflowClosure& _internal_compiled_workflow() const;
  ::flyteidl::core::CompiledWorkflowClosure* _internal_mutable_compiled_workflow();
  public:
  void unsafe_arena_set_allocated_compiled_workflow(
      ::flyteidl::core::CompiledWorkflowClosure* compiled_workflow);
  ::flyteidl::core::CompiledWorkflowClosure* unsafe_arena_release_compiled_workflow();

  // @@protoc_insertion_point(class_scope:flyteidl.event.DynamicWorkflowNodeMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::Identifier* id_;
  ::flyteidl::core::CompiledWorkflowClosure* compiled_workflow_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class ParentTaskExecutionMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.ParentTaskExecutionMetadata) */ {
 public:
  inline ParentTaskExecutionMetadata() : ParentTaskExecutionMetadata(nullptr) {}
  ~ParentTaskExecutionMetadata() override;
  explicit constexpr ParentTaskExecutionMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParentTaskExecutionMetadata(const ParentTaskExecutionMetadata& from);
  ParentTaskExecutionMetadata(ParentTaskExecutionMetadata&& from) noexcept
    : ParentTaskExecutionMetadata() {
    *this = ::std::move(from);
  }

  inline ParentTaskExecutionMetadata& operator=(const ParentTaskExecutionMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParentTaskExecutionMetadata& operator=(ParentTaskExecutionMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParentTaskExecutionMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParentTaskExecutionMetadata* internal_default_instance() {
    return reinterpret_cast<const ParentTaskExecutionMetadata*>(
               &_ParentTaskExecutionMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ParentTaskExecutionMetadata& a, ParentTaskExecutionMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ParentTaskExecutionMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParentTaskExecutionMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParentTaskExecutionMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParentTaskExecutionMetadata>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParentTaskExecutionMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.event.ParentTaskExecutionMetadata";
  }
  protected:
  explicit ParentTaskExecutionMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // .flyteidl.core.TaskExecutionIdentifier id = 1 [json_name = "id"];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::flyteidl::core::TaskExecutionIdentifier& id() const;
  PROTOBUF_NODISCARD ::flyteidl::core::TaskExecutionIdentifier* release_id();
  ::flyteidl::core::TaskExecutionIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::core::TaskExecutionIdentifier* id);
  private:
  const ::flyteidl::core::TaskExecutionIdentifier& _internal_id() const;
  ::flyteidl::core::TaskExecutionIdentifier* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::flyteidl::core::TaskExecutionIdentifier* id);
  ::flyteidl::core::TaskExecutionIdentifier* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:flyteidl.event.ParentTaskExecutionMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::TaskExecutionIdentifier* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class ParentNodeExecutionMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.ParentNodeExecutionMetadata) */ {
 public:
  inline ParentNodeExecutionMetadata() : ParentNodeExecutionMetadata(nullptr) {}
  ~ParentNodeExecutionMetadata() override;
  explicit constexpr ParentNodeExecutionMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParentNodeExecutionMetadata(const ParentNodeExecutionMetadata& from);
  ParentNodeExecutionMetadata(ParentNodeExecutionMetadata&& from) noexcept
    : ParentNodeExecutionMetadata() {
    *this = ::std::move(from);
  }

  inline ParentNodeExecutionMetadata& operator=(const ParentNodeExecutionMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParentNodeExecutionMetadata& operator=(ParentNodeExecutionMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParentNodeExecutionMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParentNodeExecutionMetadata* internal_default_instance() {
    return reinterpret_cast<const ParentNodeExecutionMetadata*>(
               &_ParentNodeExecutionMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ParentNodeExecutionMetadata& a, ParentNodeExecutionMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ParentNodeExecutionMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParentNodeExecutionMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParentNodeExecutionMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParentNodeExecutionMetadata>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParentNodeExecutionMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.event.ParentNodeExecutionMetadata";
  }
  protected:
  explicit ParentNodeExecutionMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdFieldNumber = 1,
  };
  // string node_id = 1 [json_name = "nodeId"];
  void clear_node_id();
  const std::string& node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node_id();
  PROTOBUF_NODISCARD std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.event.ParentNodeExecutionMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class TaskExecutionEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.TaskExecutionEvent) */ {
 public:
  inline TaskExecutionEvent() : TaskExecutionEvent(nullptr) {}
  ~TaskExecutionEvent() override;
  explicit constexpr TaskExecutionEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskExecutionEvent(const TaskExecutionEvent& from);
  TaskExecutionEvent(TaskExecutionEvent&& from) noexcept
    : TaskExecutionEvent() {
    *this = ::std::move(from);
  }

  inline TaskExecutionEvent& operator=(const TaskExecutionEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskExecutionEvent& operator=(TaskExecutionEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskExecutionEvent& default_instance() {
    return *internal_default_instance();
  }
  enum OutputResultCase {
    kOutputUri = 9,
    kError = 10,
    kOutputData = 17,
    OUTPUT_RESULT_NOT_SET = 0,
  };

  static inline const TaskExecutionEvent* internal_default_instance() {
    return reinterpret_cast<const TaskExecutionEvent*>(
               &_TaskExecutionEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TaskExecutionEvent& a, TaskExecutionEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskExecutionEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskExecutionEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskExecutionEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskExecutionEvent>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskExecutionEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.event.TaskExecutionEvent";
  }
  protected:
  explicit TaskExecutionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogsFieldNumber = 6,
    kProducerIdFieldNumber = 5,
    kInputUriFieldNumber = 8,
    kReasonFieldNumber = 13,
    kTaskTypeFieldNumber = 14,
    kTaskIdFieldNumber = 1,
    kParentNodeExecutionIdFieldNumber = 2,
    kOccurredAtFieldNumber = 7,
    kCustomInfoFieldNumber = 11,
    kMetadataFieldNumber = 16,
    kRetryAttemptFieldNumber = 3,
    kPhaseFieldNumber = 4,
    kPhaseVersionFieldNumber = 12,
    kEventVersionFieldNumber = 18,
    kOutputUriFieldNumber = 9,
    kErrorFieldNumber = 10,
    kOutputDataFieldNumber = 17,
  };
  // repeated .flyteidl.core.TaskLog logs = 6 [json_name = "logs"];
  int logs_size() const;
  private:
  int _internal_logs_size() const;
  public:
  void clear_logs();
  ::flyteidl::core::TaskLog* mutable_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::TaskLog >*
      mutable_logs();
  private:
  const ::flyteidl::core::TaskLog& _internal_logs(int index) const;
  ::flyteidl::core::TaskLog* _internal_add_logs();
  public:
  const ::flyteidl::core::TaskLog& logs(int index) const;
  ::flyteidl::core::TaskLog* add_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::TaskLog >&
      logs() const;

  // string producer_id = 5 [json_name = "producerId"];
  void clear_producer_id();
  const std::string& producer_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_producer_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_producer_id();
  PROTOBUF_NODISCARD std::string* release_producer_id();
  void set_allocated_producer_id(std::string* producer_id);
  private:
  const std::string& _internal_producer_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_producer_id(const std::string& value);
  std::string* _internal_mutable_producer_id();
  public:

  // string input_uri = 8 [json_name = "inputUri"];
  void clear_input_uri();
  const std::string& input_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_uri();
  PROTOBUF_NODISCARD std::string* release_input_uri();
  void set_allocated_input_uri(std::string* input_uri);
  private:
  const std::string& _internal_input_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_uri(const std::string& value);
  std::string* _internal_mutable_input_uri();
  public:

  // string reason = 13 [json_name = "reason"];
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // string task_type = 14 [json_name = "taskType"];
  void clear_task_type();
  const std::string& task_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_type();
  PROTOBUF_NODISCARD std::string* release_task_type();
  void set_allocated_task_type(std::string* task_type);
  private:
  const std::string& _internal_task_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_type(const std::string& value);
  std::string* _internal_mutable_task_type();
  public:

  // .flyteidl.core.Identifier task_id = 1 [json_name = "taskId"];
  bool has_task_id() const;
  private:
  bool _internal_has_task_id() const;
  public:
  void clear_task_id();
  const ::flyteidl::core::Identifier& task_id() const;
  PROTOBUF_NODISCARD ::flyteidl::core::Identifier* release_task_id();
  ::flyteidl::core::Identifier* mutable_task_id();
  void set_allocated_task_id(::flyteidl::core::Identifier* task_id);
  private:
  const ::flyteidl::core::Identifier& _internal_task_id() const;
  ::flyteidl::core::Identifier* _internal_mutable_task_id();
  public:
  void unsafe_arena_set_allocated_task_id(
      ::flyteidl::core::Identifier* task_id);
  ::flyteidl::core::Identifier* unsafe_arena_release_task_id();

  // .flyteidl.core.NodeExecutionIdentifier parent_node_execution_id = 2 [json_name = "parentNodeExecutionId"];
  bool has_parent_node_execution_id() const;
  private:
  bool _internal_has_parent_node_execution_id() const;
  public:
  void clear_parent_node_execution_id();
  const ::flyteidl::core::NodeExecutionIdentifier& parent_node_execution_id() const;
  PROTOBUF_NODISCARD ::flyteidl::core::NodeExecutionIdentifier* release_parent_node_execution_id();
  ::flyteidl::core::NodeExecutionIdentifier* mutable_parent_node_execution_id();
  void set_allocated_parent_node_execution_id(::flyteidl::core::NodeExecutionIdentifier* parent_node_execution_id);
  private:
  const ::flyteidl::core::NodeExecutionIdentifier& _internal_parent_node_execution_id() const;
  ::flyteidl::core::NodeExecutionIdentifier* _internal_mutable_parent_node_execution_id();
  public:
  void unsafe_arena_set_allocated_parent_node_execution_id(
      ::flyteidl::core::NodeExecutionIdentifier* parent_node_execution_id);
  ::flyteidl::core::NodeExecutionIdentifier* unsafe_arena_release_parent_node_execution_id();

  // .google.protobuf.Timestamp occurred_at = 7 [json_name = "occurredAt"];
  bool has_occurred_at() const;
  private:
  bool _internal_has_occurred_at() const;
  public:
  void clear_occurred_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& occurred_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_occurred_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_occurred_at();
  void set_allocated_occurred_at(::PROTOBUF_NAMESPACE_ID::Timestamp* occurred_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_occurred_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_occurred_at();
  public:
  void unsafe_arena_set_allocated_occurred_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* occurred_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_occurred_at();

  // .google.protobuf.Struct custom_info = 11 [json_name = "customInfo"];
  bool has_custom_info() const;
  private:
  bool _internal_has_custom_info() const;
  public:
  void clear_custom_info();
  const ::PROTOBUF_NAMESPACE_ID::Struct& custom_info() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_custom_info();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_custom_info();
  void set_allocated_custom_info(::PROTOBUF_NAMESPACE_ID::Struct* custom_info);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_custom_info() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_custom_info();
  public:
  void unsafe_arena_set_allocated_custom_info(
      ::PROTOBUF_NAMESPACE_ID::Struct* custom_info);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_custom_info();

  // .flyteidl.event.TaskExecutionMetadata metadata = 16 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::flyteidl::event::TaskExecutionMetadata& metadata() const;
  PROTOBUF_NODISCARD ::flyteidl::event::TaskExecutionMetadata* release_metadata();
  ::flyteidl::event::TaskExecutionMetadata* mutable_metadata();
  void set_allocated_metadata(::flyteidl::event::TaskExecutionMetadata* metadata);
  private:
  const ::flyteidl::event::TaskExecutionMetadata& _internal_metadata() const;
  ::flyteidl::event::TaskExecutionMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::flyteidl::event::TaskExecutionMetadata* metadata);
  ::flyteidl::event::TaskExecutionMetadata* unsafe_arena_release_metadata();

  // uint32 retry_attempt = 3 [json_name = "retryAttempt"];
  void clear_retry_attempt();
  uint32_t retry_attempt() const;
  void set_retry_attempt(uint32_t value);
  private:
  uint32_t _internal_retry_attempt() const;
  void _internal_set_retry_attempt(uint32_t value);
  public:

  // .flyteidl.core.TaskExecution.Phase phase = 4 [json_name = "phase"];
  void clear_phase();
  ::flyteidl::core::TaskExecution_Phase phase() const;
  void set_phase(::flyteidl::core::TaskExecution_Phase value);
  private:
  ::flyteidl::core::TaskExecution_Phase _internal_phase() const;
  void _internal_set_phase(::flyteidl::core::TaskExecution_Phase value);
  public:

  // uint32 phase_version = 12 [json_name = "phaseVersion"];
  void clear_phase_version();
  uint32_t phase_version() const;
  void set_phase_version(uint32_t value);
  private:
  uint32_t _internal_phase_version() const;
  void _internal_set_phase_version(uint32_t value);
  public:

  // int32 event_version = 18 [json_name = "eventVersion"];
  void clear_event_version();
  int32_t event_version() const;
  void set_event_version(int32_t value);
  private:
  int32_t _internal_event_version() const;
  void _internal_set_event_version(int32_t value);
  public:

  // string output_uri = 9 [json_name = "outputUri"];
  bool has_output_uri() const;
  private:
  bool _internal_has_output_uri() const;
  public:
  void clear_output_uri();
  const std::string& output_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_uri();
  PROTOBUF_NODISCARD std::string* release_output_uri();
  void set_allocated_output_uri(std::string* output_uri);
  private:
  const std::string& _internal_output_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_uri(const std::string& value);
  std::string* _internal_mutable_output_uri();
  public:

  // .flyteidl.core.ExecutionError error = 10 [json_name = "error"];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::flyteidl::core::ExecutionError& error() const;
  PROTOBUF_NODISCARD ::flyteidl::core::ExecutionError* release_error();
  ::flyteidl::core::ExecutionError* mutable_error();
  void set_allocated_error(::flyteidl::core::ExecutionError* error);
  private:
  const ::flyteidl::core::ExecutionError& _internal_error() const;
  ::flyteidl::core::ExecutionError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::flyteidl::core::ExecutionError* error);
  ::flyteidl::core::ExecutionError* unsafe_arena_release_error();

  // .flyteidl.core.LiteralMap output_data = 17 [json_name = "outputData"];
  bool has_output_data() const;
  private:
  bool _internal_has_output_data() const;
  public:
  void clear_output_data();
  const ::flyteidl::core::LiteralMap& output_data() const;
  PROTOBUF_NODISCARD ::flyteidl::core::LiteralMap* release_output_data();
  ::flyteidl::core::LiteralMap* mutable_output_data();
  void set_allocated_output_data(::flyteidl::core::LiteralMap* output_data);
  private:
  const ::flyteidl::core::LiteralMap& _internal_output_data() const;
  ::flyteidl::core::LiteralMap* _internal_mutable_output_data();
  public:
  void unsafe_arena_set_allocated_output_data(
      ::flyteidl::core::LiteralMap* output_data);
  ::flyteidl::core::LiteralMap* unsafe_arena_release_output_data();

  void clear_output_result();
  OutputResultCase output_result_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.event.TaskExecutionEvent)
 private:
  class _Internal;
  void set_has_output_uri();
  void set_has_error();
  void set_has_output_data();

  inline bool has_output_result() const;
  inline void clear_has_output_result();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::TaskLog > logs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr producer_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_type_;
  ::flyteidl::core::Identifier* task_id_;
  ::flyteidl::core::NodeExecutionIdentifier* parent_node_execution_id_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* occurred_at_;
  ::PROTOBUF_NAMESPACE_ID::Struct* custom_info_;
  ::flyteidl::event::TaskExecutionMetadata* metadata_;
  uint32_t retry_attempt_;
  int phase_;
  uint32_t phase_version_;
  int32_t event_version_;
  union OutputResultUnion {
    constexpr OutputResultUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_uri_;
    ::flyteidl::core::ExecutionError* error_;
    ::flyteidl::core::LiteralMap* output_data_;
  } output_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class ExternalResourceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.ExternalResourceInfo) */ {
 public:
  inline ExternalResourceInfo() : ExternalResourceInfo(nullptr) {}
  ~ExternalResourceInfo() override;
  explicit constexpr ExternalResourceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExternalResourceInfo(const ExternalResourceInfo& from);
  ExternalResourceInfo(ExternalResourceInfo&& from) noexcept
    : ExternalResourceInfo() {
    *this = ::std::move(from);
  }

  inline ExternalResourceInfo& operator=(const ExternalResourceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExternalResourceInfo& operator=(ExternalResourceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExternalResourceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExternalResourceInfo* internal_default_instance() {
    return reinterpret_cast<const ExternalResourceInfo*>(
               &_ExternalResourceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ExternalResourceInfo& a, ExternalResourceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ExternalResourceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExternalResourceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExternalResourceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExternalResourceInfo>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExternalResourceInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.event.ExternalResourceInfo";
  }
  protected:
  explicit ExternalResourceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogsFieldNumber = 6,
    kExternalIdFieldNumber = 1,
    kIndexFieldNumber = 2,
    kRetryAttemptFieldNumber = 3,
    kPhaseFieldNumber = 4,
    kCacheStatusFieldNumber = 5,
  };
  // repeated .flyteidl.core.TaskLog logs = 6 [json_name = "logs"];
  int logs_size() const;
  private:
  int _internal_logs_size() const;
  public:
  void clear_logs();
  ::flyteidl::core::TaskLog* mutable_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::TaskLog >*
      mutable_logs();
  private:
  const ::flyteidl::core::TaskLog& _internal_logs(int index) const;
  ::flyteidl::core::TaskLog* _internal_add_logs();
  public:
  const ::flyteidl::core::TaskLog& logs(int index) const;
  ::flyteidl::core::TaskLog* add_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::TaskLog >&
      logs() const;

  // string external_id = 1 [json_name = "externalId"];
  void clear_external_id();
  const std::string& external_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_external_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_external_id();
  PROTOBUF_NODISCARD std::string* release_external_id();
  void set_allocated_external_id(std::string* external_id);
  private:
  const std::string& _internal_external_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_external_id(const std::string& value);
  std::string* _internal_mutable_external_id();
  public:

  // uint32 index = 2 [json_name = "index"];
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // uint32 retry_attempt = 3 [json_name = "retryAttempt"];
  void clear_retry_attempt();
  uint32_t retry_attempt() const;
  void set_retry_attempt(uint32_t value);
  private:
  uint32_t _internal_retry_attempt() const;
  void _internal_set_retry_attempt(uint32_t value);
  public:

  // .flyteidl.core.TaskExecution.Phase phase = 4 [json_name = "phase"];
  void clear_phase();
  ::flyteidl::core::TaskExecution_Phase phase() const;
  void set_phase(::flyteidl::core::TaskExecution_Phase value);
  private:
  ::flyteidl::core::TaskExecution_Phase _internal_phase() const;
  void _internal_set_phase(::flyteidl::core::TaskExecution_Phase value);
  public:

  // .flyteidl.core.CatalogCacheStatus cache_status = 5 [json_name = "cacheStatus"];
  void clear_cache_status();
  ::flyteidl::core::CatalogCacheStatus cache_status() const;
  void set_cache_status(::flyteidl::core::CatalogCacheStatus value);
  private:
  ::flyteidl::core::CatalogCacheStatus _internal_cache_status() const;
  void _internal_set_cache_status(::flyteidl::core::CatalogCacheStatus value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.event.ExternalResourceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::TaskLog > logs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr external_id_;
  uint32_t index_;
  uint32_t retry_attempt_;
  int phase_;
  int cache_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class ResourcePoolInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.ResourcePoolInfo) */ {
 public:
  inline ResourcePoolInfo() : ResourcePoolInfo(nullptr) {}
  ~ResourcePoolInfo() override;
  explicit constexpr ResourcePoolInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourcePoolInfo(const ResourcePoolInfo& from);
  ResourcePoolInfo(ResourcePoolInfo&& from) noexcept
    : ResourcePoolInfo() {
    *this = ::std::move(from);
  }

  inline ResourcePoolInfo& operator=(const ResourcePoolInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourcePoolInfo& operator=(ResourcePoolInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourcePoolInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourcePoolInfo* internal_default_instance() {
    return reinterpret_cast<const ResourcePoolInfo*>(
               &_ResourcePoolInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ResourcePoolInfo& a, ResourcePoolInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourcePoolInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourcePoolInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourcePoolInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourcePoolInfo>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourcePoolInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.event.ResourcePoolInfo";
  }
  protected:
  explicit ResourcePoolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllocationTokenFieldNumber = 1,
    kNamespaceFieldNumber = 2,
  };
  // string allocation_token = 1 [json_name = "allocationToken"];
  void clear_allocation_token();
  const std::string& allocation_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_allocation_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_allocation_token();
  PROTOBUF_NODISCARD std::string* release_allocation_token();
  void set_allocated_allocation_token(std::string* allocation_token);
  private:
  const std::string& _internal_allocation_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_allocation_token(const std::string& value);
  std::string* _internal_mutable_allocation_token();
  public:

  // string namespace = 2 [json_name = "namespace"];
  void clear_namespace_();
  const std::string& namespace_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_namespace_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_namespace_();
  PROTOBUF_NODISCARD std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.event.ResourcePoolInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr allocation_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class TaskExecutionMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.TaskExecutionMetadata) */ {
 public:
  inline TaskExecutionMetadata() : TaskExecutionMetadata(nullptr) {}
  ~TaskExecutionMetadata() override;
  explicit constexpr TaskExecutionMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskExecutionMetadata(const TaskExecutionMetadata& from);
  TaskExecutionMetadata(TaskExecutionMetadata&& from) noexcept
    : TaskExecutionMetadata() {
    *this = ::std::move(from);
  }

  inline TaskExecutionMetadata& operator=(const TaskExecutionMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskExecutionMetadata& operator=(TaskExecutionMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskExecutionMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskExecutionMetadata* internal_default_instance() {
    return reinterpret_cast<const TaskExecutionMetadata*>(
               &_TaskExecutionMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TaskExecutionMetadata& a, TaskExecutionMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskExecutionMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskExecutionMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskExecutionMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskExecutionMetadata>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskExecutionMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.event.TaskExecutionMetadata";
  }
  protected:
  explicit TaskExecutionMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TaskExecutionMetadata_InstanceClass InstanceClass;
  static constexpr InstanceClass DEFAULT =
    TaskExecutionMetadata_InstanceClass_DEFAULT;
  static constexpr InstanceClass INTERRUPTIBLE =
    TaskExecutionMetadata_InstanceClass_INTERRUPTIBLE;
  static inline bool InstanceClass_IsValid(int value) {
    return TaskExecutionMetadata_InstanceClass_IsValid(value);
  }
  static constexpr InstanceClass InstanceClass_MIN =
    TaskExecutionMetadata_InstanceClass_InstanceClass_MIN;
  static constexpr InstanceClass InstanceClass_MAX =
    TaskExecutionMetadata_InstanceClass_InstanceClass_MAX;
  static constexpr int InstanceClass_ARRAYSIZE =
    TaskExecutionMetadata_InstanceClass_InstanceClass_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  InstanceClass_descriptor() {
    return TaskExecutionMetadata_InstanceClass_descriptor();
  }
  template<typename T>
  static inline const std::string& InstanceClass_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InstanceClass>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InstanceClass_Name.");
    return TaskExecutionMetadata_InstanceClass_Name(enum_t_value);
  }
  static inline bool InstanceClass_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      InstanceClass* value) {
    return TaskExecutionMetadata_InstanceClass_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kExternalResourcesFieldNumber = 2,
    kResourcePoolInfoFieldNumber = 3,
    kGeneratedNameFieldNumber = 1,
    kPluginIdentifierFieldNumber = 4,
    kInstanceClassFieldNumber = 16,
  };
  // repeated .flyteidl.event.ExternalResourceInfo external_resources = 2 [json_name = "externalResources"];
  int external_resources_size() const;
  private:
  int _internal_external_resources_size() const;
  public:
  void clear_external_resources();
  ::flyteidl::event::ExternalResourceInfo* mutable_external_resources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::event::ExternalResourceInfo >*
      mutable_external_resources();
  private:
  const ::flyteidl::event::ExternalResourceInfo& _internal_external_resources(int index) const;
  ::flyteidl::event::ExternalResourceInfo* _internal_add_external_resources();
  public:
  const ::flyteidl::event::ExternalResourceInfo& external_resources(int index) const;
  ::flyteidl::event::ExternalResourceInfo* add_external_resources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::event::ExternalResourceInfo >&
      external_resources() const;

  // repeated .flyteidl.event.ResourcePoolInfo resource_pool_info = 3 [json_name = "resourcePoolInfo"];
  int resource_pool_info_size() const;
  private:
  int _internal_resource_pool_info_size() const;
  public:
  void clear_resource_pool_info();
  ::flyteidl::event::ResourcePoolInfo* mutable_resource_pool_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::event::ResourcePoolInfo >*
      mutable_resource_pool_info();
  private:
  const ::flyteidl::event::ResourcePoolInfo& _internal_resource_pool_info(int index) const;
  ::flyteidl::event::ResourcePoolInfo* _internal_add_resource_pool_info();
  public:
  const ::flyteidl::event::ResourcePoolInfo& resource_pool_info(int index) const;
  ::flyteidl::event::ResourcePoolInfo* add_resource_pool_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::event::ResourcePoolInfo >&
      resource_pool_info() const;

  // string generated_name = 1 [json_name = "generatedName"];
  void clear_generated_name();
  const std::string& generated_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_generated_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_generated_name();
  PROTOBUF_NODISCARD std::string* release_generated_name();
  void set_allocated_generated_name(std::string* generated_name);
  private:
  const std::string& _internal_generated_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_generated_name(const std::string& value);
  std::string* _internal_mutable_generated_name();
  public:

  // string plugin_identifier = 4 [json_name = "pluginIdentifier"];
  void clear_plugin_identifier();
  const std::string& plugin_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_plugin_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_plugin_identifier();
  PROTOBUF_NODISCARD std::string* release_plugin_identifier();
  void set_allocated_plugin_identifier(std::string* plugin_identifier);
  private:
  const std::string& _internal_plugin_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_plugin_identifier(const std::string& value);
  std::string* _internal_mutable_plugin_identifier();
  public:

  // .flyteidl.event.TaskExecutionMetadata.InstanceClass instance_class = 16 [json_name = "instanceClass"];
  void clear_instance_class();
  ::flyteidl::event::TaskExecutionMetadata_InstanceClass instance_class() const;
  void set_instance_class(::flyteidl::event::TaskExecutionMetadata_InstanceClass value);
  private:
  ::flyteidl::event::TaskExecutionMetadata_InstanceClass _internal_instance_class() const;
  void _internal_set_instance_class(::flyteidl::event::TaskExecutionMetadata_InstanceClass value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.event.TaskExecutionMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::event::ExternalResourceInfo > external_resources_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::event::ResourcePoolInfo > resource_pool_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr generated_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plugin_identifier_;
  int instance_class_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorkflowExecutionEvent

// .flyteidl.core.WorkflowExecutionIdentifier execution_id = 1 [json_name = "executionId"];
inline bool WorkflowExecutionEvent::_internal_has_execution_id() const {
  return this != internal_default_instance() && execution_id_ != nullptr;
}
inline bool WorkflowExecutionEvent::has_execution_id() const {
  return _internal_has_execution_id();
}
inline const ::flyteidl::core::WorkflowExecutionIdentifier& WorkflowExecutionEvent::_internal_execution_id() const {
  const ::flyteidl::core::WorkflowExecutionIdentifier* p = execution_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::WorkflowExecutionIdentifier&>(
      ::flyteidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline const ::flyteidl::core::WorkflowExecutionIdentifier& WorkflowExecutionEvent::execution_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.WorkflowExecutionEvent.execution_id)
  return _internal_execution_id();
}
inline void WorkflowExecutionEvent::unsafe_arena_set_allocated_execution_id(
    ::flyteidl::core::WorkflowExecutionIdentifier* execution_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_id_);
  }
  execution_id_ = execution_id;
  if (execution_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.event.WorkflowExecutionEvent.execution_id)
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* WorkflowExecutionEvent::release_execution_id() {
  
  ::flyteidl::core::WorkflowExecutionIdentifier* temp = execution_id_;
  execution_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* WorkflowExecutionEvent::unsafe_arena_release_execution_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.WorkflowExecutionEvent.execution_id)
  
  ::flyteidl::core::WorkflowExecutionIdentifier* temp = execution_id_;
  execution_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* WorkflowExecutionEvent::_internal_mutable_execution_id() {
  
  if (execution_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::WorkflowExecutionIdentifier>(GetArenaForAllocation());
    execution_id_ = p;
  }
  return execution_id_;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* WorkflowExecutionEvent::mutable_execution_id() {
  ::flyteidl::core::WorkflowExecutionIdentifier* _msg = _internal_mutable_execution_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.WorkflowExecutionEvent.execution_id)
  return _msg;
}
inline void WorkflowExecutionEvent::set_allocated_execution_id(::flyteidl::core::WorkflowExecutionIdentifier* execution_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_id_);
  }
  if (execution_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_id));
    if (message_arena != submessage_arena) {
      execution_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execution_id, submessage_arena);
    }
    
  } else {
    
  }
  execution_id_ = execution_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.WorkflowExecutionEvent.execution_id)
}

// string producer_id = 2 [json_name = "producerId"];
inline void WorkflowExecutionEvent::clear_producer_id() {
  producer_id_.ClearToEmpty();
}
inline const std::string& WorkflowExecutionEvent::producer_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.WorkflowExecutionEvent.producer_id)
  return _internal_producer_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkflowExecutionEvent::set_producer_id(ArgT0&& arg0, ArgT... args) {
 
 producer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.event.WorkflowExecutionEvent.producer_id)
}
inline std::string* WorkflowExecutionEvent::mutable_producer_id() {
  std::string* _s = _internal_mutable_producer_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.WorkflowExecutionEvent.producer_id)
  return _s;
}
inline const std::string& WorkflowExecutionEvent::_internal_producer_id() const {
  return producer_id_.Get();
}
inline void WorkflowExecutionEvent::_internal_set_producer_id(const std::string& value) {
  
  producer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorkflowExecutionEvent::_internal_mutable_producer_id() {
  
  return producer_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorkflowExecutionEvent::release_producer_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.WorkflowExecutionEvent.producer_id)
  return producer_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WorkflowExecutionEvent::set_allocated_producer_id(std::string* producer_id) {
  if (producer_id != nullptr) {
    
  } else {
    
  }
  producer_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), producer_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (producer_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    producer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.WorkflowExecutionEvent.producer_id)
}

// .flyteidl.core.WorkflowExecution.Phase phase = 3 [json_name = "phase"];
inline void WorkflowExecutionEvent::clear_phase() {
  phase_ = 0;
}
inline ::flyteidl::core::WorkflowExecution_Phase WorkflowExecutionEvent::_internal_phase() const {
  return static_cast< ::flyteidl::core::WorkflowExecution_Phase >(phase_);
}
inline ::flyteidl::core::WorkflowExecution_Phase WorkflowExecutionEvent::phase() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.WorkflowExecutionEvent.phase)
  return _internal_phase();
}
inline void WorkflowExecutionEvent::_internal_set_phase(::flyteidl::core::WorkflowExecution_Phase value) {
  
  phase_ = value;
}
inline void WorkflowExecutionEvent::set_phase(::flyteidl::core::WorkflowExecution_Phase value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:flyteidl.event.WorkflowExecutionEvent.phase)
}

// .google.protobuf.Timestamp occurred_at = 4 [json_name = "occurredAt"];
inline bool WorkflowExecutionEvent::_internal_has_occurred_at() const {
  return this != internal_default_instance() && occurred_at_ != nullptr;
}
inline bool WorkflowExecutionEvent::has_occurred_at() const {
  return _internal_has_occurred_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& WorkflowExecutionEvent::_internal_occurred_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = occurred_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& WorkflowExecutionEvent::occurred_at() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.WorkflowExecutionEvent.occurred_at)
  return _internal_occurred_at();
}
inline void WorkflowExecutionEvent::unsafe_arena_set_allocated_occurred_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* occurred_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(occurred_at_);
  }
  occurred_at_ = occurred_at;
  if (occurred_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.event.WorkflowExecutionEvent.occurred_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* WorkflowExecutionEvent::release_occurred_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = occurred_at_;
  occurred_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* WorkflowExecutionEvent::unsafe_arena_release_occurred_at() {
  // @@protoc_insertion_point(field_release:flyteidl.event.WorkflowExecutionEvent.occurred_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = occurred_at_;
  occurred_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* WorkflowExecutionEvent::_internal_mutable_occurred_at() {
  
  if (occurred_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    occurred_at_ = p;
  }
  return occurred_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* WorkflowExecutionEvent::mutable_occurred_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_occurred_at();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.WorkflowExecutionEvent.occurred_at)
  return _msg;
}
inline void WorkflowExecutionEvent::set_allocated_occurred_at(::PROTOBUF_NAMESPACE_ID::Timestamp* occurred_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(occurred_at_);
  }
  if (occurred_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(occurred_at));
    if (message_arena != submessage_arena) {
      occurred_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, occurred_at, submessage_arena);
    }
    
  } else {
    
  }
  occurred_at_ = occurred_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.WorkflowExecutionEvent.occurred_at)
}

// string output_uri = 5 [json_name = "outputUri"];
inline bool WorkflowExecutionEvent::_internal_has_output_uri() const {
  return output_result_case() == kOutputUri;
}
inline bool WorkflowExecutionEvent::has_output_uri() const {
  return _internal_has_output_uri();
}
inline void WorkflowExecutionEvent::set_has_output_uri() {
  _oneof_case_[0] = kOutputUri;
}
inline void WorkflowExecutionEvent::clear_output_uri() {
  if (_internal_has_output_uri()) {
    output_result_.output_uri_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_output_result();
  }
}
inline const std::string& WorkflowExecutionEvent::output_uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.WorkflowExecutionEvent.output_uri)
  return _internal_output_uri();
}
template <typename ArgT0, typename... ArgT>
inline void WorkflowExecutionEvent::set_output_uri(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.event.WorkflowExecutionEvent.output_uri)
}
inline std::string* WorkflowExecutionEvent::mutable_output_uri() {
  std::string* _s = _internal_mutable_output_uri();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.WorkflowExecutionEvent.output_uri)
  return _s;
}
inline const std::string& WorkflowExecutionEvent::_internal_output_uri() const {
  if (_internal_has_output_uri()) {
    return output_result_.output_uri_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void WorkflowExecutionEvent::_internal_set_output_uri(const std::string& value) {
  if (!_internal_has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorkflowExecutionEvent::_internal_mutable_output_uri() {
  if (!_internal_has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return output_result_.output_uri_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorkflowExecutionEvent::release_output_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.event.WorkflowExecutionEvent.output_uri)
  if (_internal_has_output_uri()) {
    clear_has_output_result();
    return output_result_.output_uri_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void WorkflowExecutionEvent::set_allocated_output_uri(std::string* output_uri) {
  if (has_output_result()) {
    clear_output_result();
  }
  if (output_uri != nullptr) {
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(output_uri);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(output_uri);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.WorkflowExecutionEvent.output_uri)
}

// .flyteidl.core.ExecutionError error = 6 [json_name = "error"];
inline bool WorkflowExecutionEvent::_internal_has_error() const {
  return output_result_case() == kError;
}
inline bool WorkflowExecutionEvent::has_error() const {
  return _internal_has_error();
}
inline void WorkflowExecutionEvent::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::flyteidl::core::ExecutionError* WorkflowExecutionEvent::release_error() {
  // @@protoc_insertion_point(field_release:flyteidl.event.WorkflowExecutionEvent.error)
  if (_internal_has_error()) {
    clear_has_output_result();
      ::flyteidl::core::ExecutionError* temp = output_result_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    output_result_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::ExecutionError& WorkflowExecutionEvent::_internal_error() const {
  return _internal_has_error()
      ? *output_result_.error_
      : reinterpret_cast< ::flyteidl::core::ExecutionError&>(::flyteidl::core::_ExecutionError_default_instance_);
}
inline const ::flyteidl::core::ExecutionError& WorkflowExecutionEvent::error() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.WorkflowExecutionEvent.error)
  return _internal_error();
}
inline ::flyteidl::core::ExecutionError* WorkflowExecutionEvent::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.event.WorkflowExecutionEvent.error)
  if (_internal_has_error()) {
    clear_has_output_result();
    ::flyteidl::core::ExecutionError* temp = output_result_.error_;
    output_result_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WorkflowExecutionEvent::unsafe_arena_set_allocated_error(::flyteidl::core::ExecutionError* error) {
  clear_output_result();
  if (error) {
    set_has_error();
    output_result_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.event.WorkflowExecutionEvent.error)
}
inline ::flyteidl::core::ExecutionError* WorkflowExecutionEvent::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_output_result();
    set_has_error();
    output_result_.error_ = CreateMaybeMessage< ::flyteidl::core::ExecutionError >(GetArenaForAllocation());
  }
  return output_result_.error_;
}
inline ::flyteidl::core::ExecutionError* WorkflowExecutionEvent::mutable_error() {
  ::flyteidl::core::ExecutionError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.WorkflowExecutionEvent.error)
  return _msg;
}

// .flyteidl.core.LiteralMap output_data = 7 [json_name = "outputData"];
inline bool WorkflowExecutionEvent::_internal_has_output_data() const {
  return output_result_case() == kOutputData;
}
inline bool WorkflowExecutionEvent::has_output_data() const {
  return _internal_has_output_data();
}
inline void WorkflowExecutionEvent::set_has_output_data() {
  _oneof_case_[0] = kOutputData;
}
inline ::flyteidl::core::LiteralMap* WorkflowExecutionEvent::release_output_data() {
  // @@protoc_insertion_point(field_release:flyteidl.event.WorkflowExecutionEvent.output_data)
  if (_internal_has_output_data()) {
    clear_has_output_result();
      ::flyteidl::core::LiteralMap* temp = output_result_.output_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    output_result_.output_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::LiteralMap& WorkflowExecutionEvent::_internal_output_data() const {
  return _internal_has_output_data()
      ? *output_result_.output_data_
      : reinterpret_cast< ::flyteidl::core::LiteralMap&>(::flyteidl::core::_LiteralMap_default_instance_);
}
inline const ::flyteidl::core::LiteralMap& WorkflowExecutionEvent::output_data() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.WorkflowExecutionEvent.output_data)
  return _internal_output_data();
}
inline ::flyteidl::core::LiteralMap* WorkflowExecutionEvent::unsafe_arena_release_output_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.event.WorkflowExecutionEvent.output_data)
  if (_internal_has_output_data()) {
    clear_has_output_result();
    ::flyteidl::core::LiteralMap* temp = output_result_.output_data_;
    output_result_.output_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WorkflowExecutionEvent::unsafe_arena_set_allocated_output_data(::flyteidl::core::LiteralMap* output_data) {
  clear_output_result();
  if (output_data) {
    set_has_output_data();
    output_result_.output_data_ = output_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.event.WorkflowExecutionEvent.output_data)
}
inline ::flyteidl::core::LiteralMap* WorkflowExecutionEvent::_internal_mutable_output_data() {
  if (!_internal_has_output_data()) {
    clear_output_result();
    set_has_output_data();
    output_result_.output_data_ = CreateMaybeMessage< ::flyteidl::core::LiteralMap >(GetArenaForAllocation());
  }
  return output_result_.output_data_;
}
inline ::flyteidl::core::LiteralMap* WorkflowExecutionEvent::mutable_output_data() {
  ::flyteidl::core::LiteralMap* _msg = _internal_mutable_output_data();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.WorkflowExecutionEvent.output_data)
  return _msg;
}

inline bool WorkflowExecutionEvent::has_output_result() const {
  return output_result_case() != OUTPUT_RESULT_NOT_SET;
}
inline void WorkflowExecutionEvent::clear_has_output_result() {
  _oneof_case_[0] = OUTPUT_RESULT_NOT_SET;
}
inline WorkflowExecutionEvent::OutputResultCase WorkflowExecutionEvent::output_result_case() const {
  return WorkflowExecutionEvent::OutputResultCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NodeExecutionEvent

// .flyteidl.core.NodeExecutionIdentifier id = 1 [json_name = "id"];
inline bool NodeExecutionEvent::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool NodeExecutionEvent::has_id() const {
  return _internal_has_id();
}
inline const ::flyteidl::core::NodeExecutionIdentifier& NodeExecutionEvent::_internal_id() const {
  const ::flyteidl::core::NodeExecutionIdentifier* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::NodeExecutionIdentifier&>(
      ::flyteidl::core::_NodeExecutionIdentifier_default_instance_);
}
inline const ::flyteidl::core::NodeExecutionIdentifier& NodeExecutionEvent::id() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.id)
  return _internal_id();
}
inline void NodeExecutionEvent::unsafe_arena_set_allocated_id(
    ::flyteidl::core::NodeExecutionIdentifier* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.event.NodeExecutionEvent.id)
}
inline ::flyteidl::core::NodeExecutionIdentifier* NodeExecutionEvent::release_id() {
  
  ::flyteidl::core::NodeExecutionIdentifier* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::NodeExecutionIdentifier* NodeExecutionEvent::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.id)
  
  ::flyteidl::core::NodeExecutionIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::NodeExecutionIdentifier* NodeExecutionEvent::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::NodeExecutionIdentifier>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::flyteidl::core::NodeExecutionIdentifier* NodeExecutionEvent::mutable_id() {
  ::flyteidl::core::NodeExecutionIdentifier* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.id)
  return _msg;
}
inline void NodeExecutionEvent::set_allocated_id(::flyteidl::core::NodeExecutionIdentifier* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.id)
}

// string producer_id = 2 [json_name = "producerId"];
inline void NodeExecutionEvent::clear_producer_id() {
  producer_id_.ClearToEmpty();
}
inline const std::string& NodeExecutionEvent::producer_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.producer_id)
  return _internal_producer_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeExecutionEvent::set_producer_id(ArgT0&& arg0, ArgT... args) {
 
 producer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.producer_id)
}
inline std::string* NodeExecutionEvent::mutable_producer_id() {
  std::string* _s = _internal_mutable_producer_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.producer_id)
  return _s;
}
inline const std::string& NodeExecutionEvent::_internal_producer_id() const {
  return producer_id_.Get();
}
inline void NodeExecutionEvent::_internal_set_producer_id(const std::string& value) {
  
  producer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NodeExecutionEvent::_internal_mutable_producer_id() {
  
  return producer_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NodeExecutionEvent::release_producer_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.producer_id)
  return producer_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NodeExecutionEvent::set_allocated_producer_id(std::string* producer_id) {
  if (producer_id != nullptr) {
    
  } else {
    
  }
  producer_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), producer_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (producer_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    producer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.producer_id)
}

// .flyteidl.core.NodeExecution.Phase phase = 3 [json_name = "phase"];
inline void NodeExecutionEvent::clear_phase() {
  phase_ = 0;
}
inline ::flyteidl::core::NodeExecution_Phase NodeExecutionEvent::_internal_phase() const {
  return static_cast< ::flyteidl::core::NodeExecution_Phase >(phase_);
}
inline ::flyteidl::core::NodeExecution_Phase NodeExecutionEvent::phase() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.phase)
  return _internal_phase();
}
inline void NodeExecutionEvent::_internal_set_phase(::flyteidl::core::NodeExecution_Phase value) {
  
  phase_ = value;
}
inline void NodeExecutionEvent::set_phase(::flyteidl::core::NodeExecution_Phase value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.phase)
}

// .google.protobuf.Timestamp occurred_at = 4 [json_name = "occurredAt"];
inline bool NodeExecutionEvent::_internal_has_occurred_at() const {
  return this != internal_default_instance() && occurred_at_ != nullptr;
}
inline bool NodeExecutionEvent::has_occurred_at() const {
  return _internal_has_occurred_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& NodeExecutionEvent::_internal_occurred_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = occurred_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& NodeExecutionEvent::occurred_at() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.occurred_at)
  return _internal_occurred_at();
}
inline void NodeExecutionEvent::unsafe_arena_set_allocated_occurred_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* occurred_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(occurred_at_);
  }
  occurred_at_ = occurred_at;
  if (occurred_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.event.NodeExecutionEvent.occurred_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* NodeExecutionEvent::release_occurred_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = occurred_at_;
  occurred_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* NodeExecutionEvent::unsafe_arena_release_occurred_at() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.occurred_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = occurred_at_;
  occurred_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* NodeExecutionEvent::_internal_mutable_occurred_at() {
  
  if (occurred_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    occurred_at_ = p;
  }
  return occurred_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* NodeExecutionEvent::mutable_occurred_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_occurred_at();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.occurred_at)
  return _msg;
}
inline void NodeExecutionEvent::set_allocated_occurred_at(::PROTOBUF_NAMESPACE_ID::Timestamp* occurred_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(occurred_at_);
  }
  if (occurred_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(occurred_at));
    if (message_arena != submessage_arena) {
      occurred_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, occurred_at, submessage_arena);
    }
    
  } else {
    
  }
  occurred_at_ = occurred_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.occurred_at)
}

// string input_uri = 5 [json_name = "inputUri"];
inline void NodeExecutionEvent::clear_input_uri() {
  input_uri_.ClearToEmpty();
}
inline const std::string& NodeExecutionEvent::input_uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.input_uri)
  return _internal_input_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeExecutionEvent::set_input_uri(ArgT0&& arg0, ArgT... args) {
 
 input_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.input_uri)
}
inline std::string* NodeExecutionEvent::mutable_input_uri() {
  std::string* _s = _internal_mutable_input_uri();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.input_uri)
  return _s;
}
inline const std::string& NodeExecutionEvent::_internal_input_uri() const {
  return input_uri_.Get();
}
inline void NodeExecutionEvent::_internal_set_input_uri(const std::string& value) {
  
  input_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NodeExecutionEvent::_internal_mutable_input_uri() {
  
  return input_uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NodeExecutionEvent::release_input_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.input_uri)
  return input_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NodeExecutionEvent::set_allocated_input_uri(std::string* input_uri) {
  if (input_uri != nullptr) {
    
  } else {
    
  }
  input_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_uri,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (input_uri_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    input_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.input_uri)
}

// string output_uri = 6 [json_name = "outputUri"];
inline bool NodeExecutionEvent::_internal_has_output_uri() const {
  return output_result_case() == kOutputUri;
}
inline bool NodeExecutionEvent::has_output_uri() const {
  return _internal_has_output_uri();
}
inline void NodeExecutionEvent::set_has_output_uri() {
  _oneof_case_[0] = kOutputUri;
}
inline void NodeExecutionEvent::clear_output_uri() {
  if (_internal_has_output_uri()) {
    output_result_.output_uri_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_output_result();
  }
}
inline const std::string& NodeExecutionEvent::output_uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.output_uri)
  return _internal_output_uri();
}
template <typename ArgT0, typename... ArgT>
inline void NodeExecutionEvent::set_output_uri(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.output_uri)
}
inline std::string* NodeExecutionEvent::mutable_output_uri() {
  std::string* _s = _internal_mutable_output_uri();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.output_uri)
  return _s;
}
inline const std::string& NodeExecutionEvent::_internal_output_uri() const {
  if (_internal_has_output_uri()) {
    return output_result_.output_uri_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void NodeExecutionEvent::_internal_set_output_uri(const std::string& value) {
  if (!_internal_has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NodeExecutionEvent::_internal_mutable_output_uri() {
  if (!_internal_has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return output_result_.output_uri_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NodeExecutionEvent::release_output_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.output_uri)
  if (_internal_has_output_uri()) {
    clear_has_output_result();
    return output_result_.output_uri_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void NodeExecutionEvent::set_allocated_output_uri(std::string* output_uri) {
  if (has_output_result()) {
    clear_output_result();
  }
  if (output_uri != nullptr) {
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(output_uri);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(output_uri);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.output_uri)
}

// .flyteidl.core.ExecutionError error = 7 [json_name = "error"];
inline bool NodeExecutionEvent::_internal_has_error() const {
  return output_result_case() == kError;
}
inline bool NodeExecutionEvent::has_error() const {
  return _internal_has_error();
}
inline void NodeExecutionEvent::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::flyteidl::core::ExecutionError* NodeExecutionEvent::release_error() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.error)
  if (_internal_has_error()) {
    clear_has_output_result();
      ::flyteidl::core::ExecutionError* temp = output_result_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    output_result_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::ExecutionError& NodeExecutionEvent::_internal_error() const {
  return _internal_has_error()
      ? *output_result_.error_
      : reinterpret_cast< ::flyteidl::core::ExecutionError&>(::flyteidl::core::_ExecutionError_default_instance_);
}
inline const ::flyteidl::core::ExecutionError& NodeExecutionEvent::error() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.error)
  return _internal_error();
}
inline ::flyteidl::core::ExecutionError* NodeExecutionEvent::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.event.NodeExecutionEvent.error)
  if (_internal_has_error()) {
    clear_has_output_result();
    ::flyteidl::core::ExecutionError* temp = output_result_.error_;
    output_result_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NodeExecutionEvent::unsafe_arena_set_allocated_error(::flyteidl::core::ExecutionError* error) {
  clear_output_result();
  if (error) {
    set_has_error();
    output_result_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.event.NodeExecutionEvent.error)
}
inline ::flyteidl::core::ExecutionError* NodeExecutionEvent::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_output_result();
    set_has_error();
    output_result_.error_ = CreateMaybeMessage< ::flyteidl::core::ExecutionError >(GetArenaForAllocation());
  }
  return output_result_.error_;
}
inline ::flyteidl::core::ExecutionError* NodeExecutionEvent::mutable_error() {
  ::flyteidl::core::ExecutionError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.error)
  return _msg;
}

// .flyteidl.core.LiteralMap output_data = 15 [json_name = "outputData"];
inline bool NodeExecutionEvent::_internal_has_output_data() const {
  return output_result_case() == kOutputData;
}
inline bool NodeExecutionEvent::has_output_data() const {
  return _internal_has_output_data();
}
inline void NodeExecutionEvent::set_has_output_data() {
  _oneof_case_[0] = kOutputData;
}
inline ::flyteidl::core::LiteralMap* NodeExecutionEvent::release_output_data() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.output_data)
  if (_internal_has_output_data()) {
    clear_has_output_result();
      ::flyteidl::core::LiteralMap* temp = output_result_.output_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    output_result_.output_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::LiteralMap& NodeExecutionEvent::_internal_output_data() const {
  return _internal_has_output_data()
      ? *output_result_.output_data_
      : reinterpret_cast< ::flyteidl::core::LiteralMap&>(::flyteidl::core::_LiteralMap_default_instance_);
}
inline const ::flyteidl::core::LiteralMap& NodeExecutionEvent::output_data() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.output_data)
  return _internal_output_data();
}
inline ::flyteidl::core::LiteralMap* NodeExecutionEvent::unsafe_arena_release_output_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.event.NodeExecutionEvent.output_data)
  if (_internal_has_output_data()) {
    clear_has_output_result();
    ::flyteidl::core::LiteralMap* temp = output_result_.output_data_;
    output_result_.output_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NodeExecutionEvent::unsafe_arena_set_allocated_output_data(::flyteidl::core::LiteralMap* output_data) {
  clear_output_result();
  if (output_data) {
    set_has_output_data();
    output_result_.output_data_ = output_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.event.NodeExecutionEvent.output_data)
}
inline ::flyteidl::core::LiteralMap* NodeExecutionEvent::_internal_mutable_output_data() {
  if (!_internal_has_output_data()) {
    clear_output_result();
    set_has_output_data();
    output_result_.output_data_ = CreateMaybeMessage< ::flyteidl::core::LiteralMap >(GetArenaForAllocation());
  }
  return output_result_.output_data_;
}
inline ::flyteidl::core::LiteralMap* NodeExecutionEvent::mutable_output_data() {
  ::flyteidl::core::LiteralMap* _msg = _internal_mutable_output_data();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.output_data)
  return _msg;
}

// .flyteidl.event.WorkflowNodeMetadata workflow_node_metadata = 8 [json_name = "workflowNodeMetadata"];
inline bool NodeExecutionEvent::_internal_has_workflow_node_metadata() const {
  return target_metadata_case() == kWorkflowNodeMetadata;
}
inline bool NodeExecutionEvent::has_workflow_node_metadata() const {
  return _internal_has_workflow_node_metadata();
}
inline void NodeExecutionEvent::set_has_workflow_node_metadata() {
  _oneof_case_[1] = kWorkflowNodeMetadata;
}
inline void NodeExecutionEvent::clear_workflow_node_metadata() {
  if (_internal_has_workflow_node_metadata()) {
    if (GetArenaForAllocation() == nullptr) {
      delete target_metadata_.workflow_node_metadata_;
    }
    clear_has_target_metadata();
  }
}
inline ::flyteidl::event::WorkflowNodeMetadata* NodeExecutionEvent::release_workflow_node_metadata() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.workflow_node_metadata)
  if (_internal_has_workflow_node_metadata()) {
    clear_has_target_metadata();
      ::flyteidl::event::WorkflowNodeMetadata* temp = target_metadata_.workflow_node_metadata_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    target_metadata_.workflow_node_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::event::WorkflowNodeMetadata& NodeExecutionEvent::_internal_workflow_node_metadata() const {
  return _internal_has_workflow_node_metadata()
      ? *target_metadata_.workflow_node_metadata_
      : reinterpret_cast< ::flyteidl::event::WorkflowNodeMetadata&>(::flyteidl::event::_WorkflowNodeMetadata_default_instance_);
}
inline const ::flyteidl::event::WorkflowNodeMetadata& NodeExecutionEvent::workflow_node_metadata() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.workflow_node_metadata)
  return _internal_workflow_node_metadata();
}
inline ::flyteidl::event::WorkflowNodeMetadata* NodeExecutionEvent::unsafe_arena_release_workflow_node_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.event.NodeExecutionEvent.workflow_node_metadata)
  if (_internal_has_workflow_node_metadata()) {
    clear_has_target_metadata();
    ::flyteidl::event::WorkflowNodeMetadata* temp = target_metadata_.workflow_node_metadata_;
    target_metadata_.workflow_node_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NodeExecutionEvent::unsafe_arena_set_allocated_workflow_node_metadata(::flyteidl::event::WorkflowNodeMetadata* workflow_node_metadata) {
  clear_target_metadata();
  if (workflow_node_metadata) {
    set_has_workflow_node_metadata();
    target_metadata_.workflow_node_metadata_ = workflow_node_metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.event.NodeExecutionEvent.workflow_node_metadata)
}
inline ::flyteidl::event::WorkflowNodeMetadata* NodeExecutionEvent::_internal_mutable_workflow_node_metadata() {
  if (!_internal_has_workflow_node_metadata()) {
    clear_target_metadata();
    set_has_workflow_node_metadata();
    target_metadata_.workflow_node_metadata_ = CreateMaybeMessage< ::flyteidl::event::WorkflowNodeMetadata >(GetArenaForAllocation());
  }
  return target_metadata_.workflow_node_metadata_;
}
inline ::flyteidl::event::WorkflowNodeMetadata* NodeExecutionEvent::mutable_workflow_node_metadata() {
  ::flyteidl::event::WorkflowNodeMetadata* _msg = _internal_mutable_workflow_node_metadata();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.workflow_node_metadata)
  return _msg;
}

// .flyteidl.event.TaskNodeMetadata task_node_metadata = 14 [json_name = "taskNodeMetadata"];
inline bool NodeExecutionEvent::_internal_has_task_node_metadata() const {
  return target_metadata_case() == kTaskNodeMetadata;
}
inline bool NodeExecutionEvent::has_task_node_metadata() const {
  return _internal_has_task_node_metadata();
}
inline void NodeExecutionEvent::set_has_task_node_metadata() {
  _oneof_case_[1] = kTaskNodeMetadata;
}
inline void NodeExecutionEvent::clear_task_node_metadata() {
  if (_internal_has_task_node_metadata()) {
    if (GetArenaForAllocation() == nullptr) {
      delete target_metadata_.task_node_metadata_;
    }
    clear_has_target_metadata();
  }
}
inline ::flyteidl::event::TaskNodeMetadata* NodeExecutionEvent::release_task_node_metadata() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.task_node_metadata)
  if (_internal_has_task_node_metadata()) {
    clear_has_target_metadata();
      ::flyteidl::event::TaskNodeMetadata* temp = target_metadata_.task_node_metadata_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    target_metadata_.task_node_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::event::TaskNodeMetadata& NodeExecutionEvent::_internal_task_node_metadata() const {
  return _internal_has_task_node_metadata()
      ? *target_metadata_.task_node_metadata_
      : reinterpret_cast< ::flyteidl::event::TaskNodeMetadata&>(::flyteidl::event::_TaskNodeMetadata_default_instance_);
}
inline const ::flyteidl::event::TaskNodeMetadata& NodeExecutionEvent::task_node_metadata() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.task_node_metadata)
  return _internal_task_node_metadata();
}
inline ::flyteidl::event::TaskNodeMetadata* NodeExecutionEvent::unsafe_arena_release_task_node_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.event.NodeExecutionEvent.task_node_metadata)
  if (_internal_has_task_node_metadata()) {
    clear_has_target_metadata();
    ::flyteidl::event::TaskNodeMetadata* temp = target_metadata_.task_node_metadata_;
    target_metadata_.task_node_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NodeExecutionEvent::unsafe_arena_set_allocated_task_node_metadata(::flyteidl::event::TaskNodeMetadata* task_node_metadata) {
  clear_target_metadata();
  if (task_node_metadata) {
    set_has_task_node_metadata();
    target_metadata_.task_node_metadata_ = task_node_metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.event.NodeExecutionEvent.task_node_metadata)
}
inline ::flyteidl::event::TaskNodeMetadata* NodeExecutionEvent::_internal_mutable_task_node_metadata() {
  if (!_internal_has_task_node_metadata()) {
    clear_target_metadata();
    set_has_task_node_metadata();
    target_metadata_.task_node_metadata_ = CreateMaybeMessage< ::flyteidl::event::TaskNodeMetadata >(GetArenaForAllocation());
  }
  return target_metadata_.task_node_metadata_;
}
inline ::flyteidl::event::TaskNodeMetadata* NodeExecutionEvent::mutable_task_node_metadata() {
  ::flyteidl::event::TaskNodeMetadata* _msg = _internal_mutable_task_node_metadata();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.task_node_metadata)
  return _msg;
}

// .flyteidl.event.ParentTaskExecutionMetadata parent_task_metadata = 9 [json_name = "parentTaskMetadata"];
inline bool NodeExecutionEvent::_internal_has_parent_task_metadata() const {
  return this != internal_default_instance() && parent_task_metadata_ != nullptr;
}
inline bool NodeExecutionEvent::has_parent_task_metadata() const {
  return _internal_has_parent_task_metadata();
}
inline void NodeExecutionEvent::clear_parent_task_metadata() {
  if (GetArenaForAllocation() == nullptr && parent_task_metadata_ != nullptr) {
    delete parent_task_metadata_;
  }
  parent_task_metadata_ = nullptr;
}
inline const ::flyteidl::event::ParentTaskExecutionMetadata& NodeExecutionEvent::_internal_parent_task_metadata() const {
  const ::flyteidl::event::ParentTaskExecutionMetadata* p = parent_task_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::event::ParentTaskExecutionMetadata&>(
      ::flyteidl::event::_ParentTaskExecutionMetadata_default_instance_);
}
inline const ::flyteidl::event::ParentTaskExecutionMetadata& NodeExecutionEvent::parent_task_metadata() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.parent_task_metadata)
  return _internal_parent_task_metadata();
}
inline void NodeExecutionEvent::unsafe_arena_set_allocated_parent_task_metadata(
    ::flyteidl::event::ParentTaskExecutionMetadata* parent_task_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent_task_metadata_);
  }
  parent_task_metadata_ = parent_task_metadata;
  if (parent_task_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.event.NodeExecutionEvent.parent_task_metadata)
}
inline ::flyteidl::event::ParentTaskExecutionMetadata* NodeExecutionEvent::release_parent_task_metadata() {
  
  ::flyteidl::event::ParentTaskExecutionMetadata* temp = parent_task_metadata_;
  parent_task_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::event::ParentTaskExecutionMetadata* NodeExecutionEvent::unsafe_arena_release_parent_task_metadata() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.parent_task_metadata)
  
  ::flyteidl::event::ParentTaskExecutionMetadata* temp = parent_task_metadata_;
  parent_task_metadata_ = nullptr;
  return temp;
}
inline ::flyteidl::event::ParentTaskExecutionMetadata* NodeExecutionEvent::_internal_mutable_parent_task_metadata() {
  
  if (parent_task_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::event::ParentTaskExecutionMetadata>(GetArenaForAllocation());
    parent_task_metadata_ = p;
  }
  return parent_task_metadata_;
}
inline ::flyteidl::event::ParentTaskExecutionMetadata* NodeExecutionEvent::mutable_parent_task_metadata() {
  ::flyteidl::event::ParentTaskExecutionMetadata* _msg = _internal_mutable_parent_task_metadata();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.parent_task_metadata)
  return _msg;
}
inline void NodeExecutionEvent::set_allocated_parent_task_metadata(::flyteidl::event::ParentTaskExecutionMetadata* parent_task_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete parent_task_metadata_;
  }
  if (parent_task_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::event::ParentTaskExecutionMetadata>::GetOwningArena(parent_task_metadata);
    if (message_arena != submessage_arena) {
      parent_task_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parent_task_metadata, submessage_arena);
    }
    
  } else {
    
  }
  parent_task_metadata_ = parent_task_metadata;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.parent_task_metadata)
}

// .flyteidl.event.ParentNodeExecutionMetadata parent_node_metadata = 10 [json_name = "parentNodeMetadata"];
inline bool NodeExecutionEvent::_internal_has_parent_node_metadata() const {
  return this != internal_default_instance() && parent_node_metadata_ != nullptr;
}
inline bool NodeExecutionEvent::has_parent_node_metadata() const {
  return _internal_has_parent_node_metadata();
}
inline void NodeExecutionEvent::clear_parent_node_metadata() {
  if (GetArenaForAllocation() == nullptr && parent_node_metadata_ != nullptr) {
    delete parent_node_metadata_;
  }
  parent_node_metadata_ = nullptr;
}
inline const ::flyteidl::event::ParentNodeExecutionMetadata& NodeExecutionEvent::_internal_parent_node_metadata() const {
  const ::flyteidl::event::ParentNodeExecutionMetadata* p = parent_node_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::event::ParentNodeExecutionMetadata&>(
      ::flyteidl::event::_ParentNodeExecutionMetadata_default_instance_);
}
inline const ::flyteidl::event::ParentNodeExecutionMetadata& NodeExecutionEvent::parent_node_metadata() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.parent_node_metadata)
  return _internal_parent_node_metadata();
}
inline void NodeExecutionEvent::unsafe_arena_set_allocated_parent_node_metadata(
    ::flyteidl::event::ParentNodeExecutionMetadata* parent_node_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent_node_metadata_);
  }
  parent_node_metadata_ = parent_node_metadata;
  if (parent_node_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.event.NodeExecutionEvent.parent_node_metadata)
}
inline ::flyteidl::event::ParentNodeExecutionMetadata* NodeExecutionEvent::release_parent_node_metadata() {
  
  ::flyteidl::event::ParentNodeExecutionMetadata* temp = parent_node_metadata_;
  parent_node_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::event::ParentNodeExecutionMetadata* NodeExecutionEvent::unsafe_arena_release_parent_node_metadata() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.parent_node_metadata)
  
  ::flyteidl::event::ParentNodeExecutionMetadata* temp = parent_node_metadata_;
  parent_node_metadata_ = nullptr;
  return temp;
}
inline ::flyteidl::event::ParentNodeExecutionMetadata* NodeExecutionEvent::_internal_mutable_parent_node_metadata() {
  
  if (parent_node_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::event::ParentNodeExecutionMetadata>(GetArenaForAllocation());
    parent_node_metadata_ = p;
  }
  return parent_node_metadata_;
}
inline ::flyteidl::event::ParentNodeExecutionMetadata* NodeExecutionEvent::mutable_parent_node_metadata() {
  ::flyteidl::event::ParentNodeExecutionMetadata* _msg = _internal_mutable_parent_node_metadata();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.parent_node_metadata)
  return _msg;
}
inline void NodeExecutionEvent::set_allocated_parent_node_metadata(::flyteidl::event::ParentNodeExecutionMetadata* parent_node_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete parent_node_metadata_;
  }
  if (parent_node_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::event::ParentNodeExecutionMetadata>::GetOwningArena(parent_node_metadata);
    if (message_arena != submessage_arena) {
      parent_node_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parent_node_metadata, submessage_arena);
    }
    
  } else {
    
  }
  parent_node_metadata_ = parent_node_metadata;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.parent_node_metadata)
}

// string retry_group = 11 [json_name = "retryGroup"];
inline void NodeExecutionEvent::clear_retry_group() {
  retry_group_.ClearToEmpty();
}
inline const std::string& NodeExecutionEvent::retry_group() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.retry_group)
  return _internal_retry_group();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeExecutionEvent::set_retry_group(ArgT0&& arg0, ArgT... args) {
 
 retry_group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.retry_group)
}
inline std::string* NodeExecutionEvent::mutable_retry_group() {
  std::string* _s = _internal_mutable_retry_group();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.retry_group)
  return _s;
}
inline const std::string& NodeExecutionEvent::_internal_retry_group() const {
  return retry_group_.Get();
}
inline void NodeExecutionEvent::_internal_set_retry_group(const std::string& value) {
  
  retry_group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NodeExecutionEvent::_internal_mutable_retry_group() {
  
  return retry_group_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NodeExecutionEvent::release_retry_group() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.retry_group)
  return retry_group_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NodeExecutionEvent::set_allocated_retry_group(std::string* retry_group) {
  if (retry_group != nullptr) {
    
  } else {
    
  }
  retry_group_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), retry_group,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (retry_group_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    retry_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.retry_group)
}

// string spec_node_id = 12 [json_name = "specNodeId"];
inline void NodeExecutionEvent::clear_spec_node_id() {
  spec_node_id_.ClearToEmpty();
}
inline const std::string& NodeExecutionEvent::spec_node_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.spec_node_id)
  return _internal_spec_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeExecutionEvent::set_spec_node_id(ArgT0&& arg0, ArgT... args) {
 
 spec_node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.spec_node_id)
}
inline std::string* NodeExecutionEvent::mutable_spec_node_id() {
  std::string* _s = _internal_mutable_spec_node_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.spec_node_id)
  return _s;
}
inline const std::string& NodeExecutionEvent::_internal_spec_node_id() const {
  return spec_node_id_.Get();
}
inline void NodeExecutionEvent::_internal_set_spec_node_id(const std::string& value) {
  
  spec_node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NodeExecutionEvent::_internal_mutable_spec_node_id() {
  
  return spec_node_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NodeExecutionEvent::release_spec_node_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.spec_node_id)
  return spec_node_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NodeExecutionEvent::set_allocated_spec_node_id(std::string* spec_node_id) {
  if (spec_node_id != nullptr) {
    
  } else {
    
  }
  spec_node_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spec_node_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (spec_node_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    spec_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.spec_node_id)
}

// string node_name = 13 [json_name = "nodeName"];
inline void NodeExecutionEvent::clear_node_name() {
  node_name_.ClearToEmpty();
}
inline const std::string& NodeExecutionEvent::node_name() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.node_name)
  return _internal_node_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeExecutionEvent::set_node_name(ArgT0&& arg0, ArgT... args) {
 
 node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.node_name)
}
inline std::string* NodeExecutionEvent::mutable_node_name() {
  std::string* _s = _internal_mutable_node_name();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.node_name)
  return _s;
}
inline const std::string& NodeExecutionEvent::_internal_node_name() const {
  return node_name_.Get();
}
inline void NodeExecutionEvent::_internal_set_node_name(const std::string& value) {
  
  node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NodeExecutionEvent::_internal_mutable_node_name() {
  
  return node_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NodeExecutionEvent::release_node_name() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.node_name)
  return node_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NodeExecutionEvent::set_allocated_node_name(std::string* node_name) {
  if (node_name != nullptr) {
    
  } else {
    
  }
  node_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (node_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    node_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.node_name)
}

// int32 event_version = 16 [json_name = "eventVersion"];
inline void NodeExecutionEvent::clear_event_version() {
  event_version_ = 0;
}
inline int32_t NodeExecutionEvent::_internal_event_version() const {
  return event_version_;
}
inline int32_t NodeExecutionEvent::event_version() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.event_version)
  return _internal_event_version();
}
inline void NodeExecutionEvent::_internal_set_event_version(int32_t value) {
  
  event_version_ = value;
}
inline void NodeExecutionEvent::set_event_version(int32_t value) {
  _internal_set_event_version(value);
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.event_version)
}

// bool is_parent = 17 [json_name = "isParent"];
inline void NodeExecutionEvent::clear_is_parent() {
  is_parent_ = false;
}
inline bool NodeExecutionEvent::_internal_is_parent() const {
  return is_parent_;
}
inline bool NodeExecutionEvent::is_parent() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.is_parent)
  return _internal_is_parent();
}
inline void NodeExecutionEvent::_internal_set_is_parent(bool value) {
  
  is_parent_ = value;
}
inline void NodeExecutionEvent::set_is_parent(bool value) {
  _internal_set_is_parent(value);
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.is_parent)
}

// bool is_dynamic = 18 [json_name = "isDynamic"];
inline void NodeExecutionEvent::clear_is_dynamic() {
  is_dynamic_ = false;
}
inline bool NodeExecutionEvent::_internal_is_dynamic() const {
  return is_dynamic_;
}
inline bool NodeExecutionEvent::is_dynamic() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.is_dynamic)
  return _internal_is_dynamic();
}
inline void NodeExecutionEvent::_internal_set_is_dynamic(bool value) {
  
  is_dynamic_ = value;
}
inline void NodeExecutionEvent::set_is_dynamic(bool value) {
  _internal_set_is_dynamic(value);
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.is_dynamic)
}

inline bool NodeExecutionEvent::has_output_result() const {
  return output_result_case() != OUTPUT_RESULT_NOT_SET;
}
inline void NodeExecutionEvent::clear_has_output_result() {
  _oneof_case_[0] = OUTPUT_RESULT_NOT_SET;
}
inline bool NodeExecutionEvent::has_target_metadata() const {
  return target_metadata_case() != TARGET_METADATA_NOT_SET;
}
inline void NodeExecutionEvent::clear_has_target_metadata() {
  _oneof_case_[1] = TARGET_METADATA_NOT_SET;
}
inline NodeExecutionEvent::OutputResultCase NodeExecutionEvent::output_result_case() const {
  return NodeExecutionEvent::OutputResultCase(_oneof_case_[0]);
}
inline NodeExecutionEvent::TargetMetadataCase NodeExecutionEvent::target_metadata_case() const {
  return NodeExecutionEvent::TargetMetadataCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// WorkflowNodeMetadata

// .flyteidl.core.WorkflowExecutionIdentifier execution_id = 1 [json_name = "executionId"];
inline bool WorkflowNodeMetadata::_internal_has_execution_id() const {
  return this != internal_default_instance() && execution_id_ != nullptr;
}
inline bool WorkflowNodeMetadata::has_execution_id() const {
  return _internal_has_execution_id();
}
inline const ::flyteidl::core::WorkflowExecutionIdentifier& WorkflowNodeMetadata::_internal_execution_id() const {
  const ::flyteidl::core::WorkflowExecutionIdentifier* p = execution_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::WorkflowExecutionIdentifier&>(
      ::flyteidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline const ::flyteidl::core::WorkflowExecutionIdentifier& WorkflowNodeMetadata::execution_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.WorkflowNodeMetadata.execution_id)
  return _internal_execution_id();
}
inline void WorkflowNodeMetadata::unsafe_arena_set_allocated_execution_id(
    ::flyteidl::core::WorkflowExecutionIdentifier* execution_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_id_);
  }
  execution_id_ = execution_id;
  if (execution_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.event.WorkflowNodeMetadata.execution_id)
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* WorkflowNodeMetadata::release_execution_id() {
  
  ::flyteidl::core::WorkflowExecutionIdentifier* temp = execution_id_;
  execution_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* WorkflowNodeMetadata::unsafe_arena_release_execution_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.WorkflowNodeMetadata.execution_id)
  
  ::flyteidl::core::WorkflowExecutionIdentifier* temp = execution_id_;
  execution_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* WorkflowNodeMetadata::_internal_mutable_execution_id() {
  
  if (execution_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::WorkflowExecutionIdentifier>(GetArenaForAllocation());
    execution_id_ = p;
  }
  return execution_id_;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* WorkflowNodeMetadata::mutable_execution_id() {
  ::flyteidl::core::WorkflowExecutionIdentifier* _msg = _internal_mutable_execution_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.WorkflowNodeMetadata.execution_id)
  return _msg;
}
inline void WorkflowNodeMetadata::set_allocated_execution_id(::flyteidl::core::WorkflowExecutionIdentifier* execution_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_id_);
  }
  if (execution_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_id));
    if (message_arena != submessage_arena) {
      execution_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execution_id, submessage_arena);
    }
    
  } else {
    
  }
  execution_id_ = execution_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.WorkflowNodeMetadata.execution_id)
}

// -------------------------------------------------------------------

// TaskNodeMetadata

// .flyteidl.core.CatalogCacheStatus cache_status = 1 [json_name = "cacheStatus"];
inline void TaskNodeMetadata::clear_cache_status() {
  cache_status_ = 0;
}
inline ::flyteidl::core::CatalogCacheStatus TaskNodeMetadata::_internal_cache_status() const {
  return static_cast< ::flyteidl::core::CatalogCacheStatus >(cache_status_);
}
inline ::flyteidl::core::CatalogCacheStatus TaskNodeMetadata::cache_status() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskNodeMetadata.cache_status)
  return _internal_cache_status();
}
inline void TaskNodeMetadata::_internal_set_cache_status(::flyteidl::core::CatalogCacheStatus value) {
  
  cache_status_ = value;
}
inline void TaskNodeMetadata::set_cache_status(::flyteidl::core::CatalogCacheStatus value) {
  _internal_set_cache_status(value);
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskNodeMetadata.cache_status)
}

// .flyteidl.core.CatalogMetadata catalog_key = 2 [json_name = "catalogKey"];
inline bool TaskNodeMetadata::_internal_has_catalog_key() const {
  return this != internal_default_instance() && catalog_key_ != nullptr;
}
inline bool TaskNodeMetadata::has_catalog_key() const {
  return _internal_has_catalog_key();
}
inline const ::flyteidl::core::CatalogMetadata& TaskNodeMetadata::_internal_catalog_key() const {
  const ::flyteidl::core::CatalogMetadata* p = catalog_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::CatalogMetadata&>(
      ::flyteidl::core::_CatalogMetadata_default_instance_);
}
inline const ::flyteidl::core::CatalogMetadata& TaskNodeMetadata::catalog_key() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskNodeMetadata.catalog_key)
  return _internal_catalog_key();
}
inline void TaskNodeMetadata::unsafe_arena_set_allocated_catalog_key(
    ::flyteidl::core::CatalogMetadata* catalog_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(catalog_key_);
  }
  catalog_key_ = catalog_key;
  if (catalog_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.event.TaskNodeMetadata.catalog_key)
}
inline ::flyteidl::core::CatalogMetadata* TaskNodeMetadata::release_catalog_key() {
  
  ::flyteidl::core::CatalogMetadata* temp = catalog_key_;
  catalog_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::CatalogMetadata* TaskNodeMetadata::unsafe_arena_release_catalog_key() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskNodeMetadata.catalog_key)
  
  ::flyteidl::core::CatalogMetadata* temp = catalog_key_;
  catalog_key_ = nullptr;
  return temp;
}
inline ::flyteidl::core::CatalogMetadata* TaskNodeMetadata::_internal_mutable_catalog_key() {
  
  if (catalog_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::CatalogMetadata>(GetArenaForAllocation());
    catalog_key_ = p;
  }
  return catalog_key_;
}
inline ::flyteidl::core::CatalogMetadata* TaskNodeMetadata::mutable_catalog_key() {
  ::flyteidl::core::CatalogMetadata* _msg = _internal_mutable_catalog_key();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskNodeMetadata.catalog_key)
  return _msg;
}
inline void TaskNodeMetadata::set_allocated_catalog_key(::flyteidl::core::CatalogMetadata* catalog_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(catalog_key_);
  }
  if (catalog_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(catalog_key));
    if (message_arena != submessage_arena) {
      catalog_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, catalog_key, submessage_arena);
    }
    
  } else {
    
  }
  catalog_key_ = catalog_key;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskNodeMetadata.catalog_key)
}

// .flyteidl.core.CatalogReservation.Status reservation_status = 3 [json_name = "reservationStatus"];
inline void TaskNodeMetadata::clear_reservation_status() {
  reservation_status_ = 0;
}
inline ::flyteidl::core::CatalogReservation_Status TaskNodeMetadata::_internal_reservation_status() const {
  return static_cast< ::flyteidl::core::CatalogReservation_Status >(reservation_status_);
}
inline ::flyteidl::core::CatalogReservation_Status TaskNodeMetadata::reservation_status() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskNodeMetadata.reservation_status)
  return _internal_reservation_status();
}
inline void TaskNodeMetadata::_internal_set_reservation_status(::flyteidl::core::CatalogReservation_Status value) {
  
  reservation_status_ = value;
}
inline void TaskNodeMetadata::set_reservation_status(::flyteidl::core::CatalogReservation_Status value) {
  _internal_set_reservation_status(value);
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskNodeMetadata.reservation_status)
}

// .flyteidl.event.DynamicWorkflowNodeMetadata dynamic_workflow = 16 [json_name = "dynamicWorkflow"];
inline bool TaskNodeMetadata::_internal_has_dynamic_workflow() const {
  return this != internal_default_instance() && dynamic_workflow_ != nullptr;
}
inline bool TaskNodeMetadata::has_dynamic_workflow() const {
  return _internal_has_dynamic_workflow();
}
inline void TaskNodeMetadata::clear_dynamic_workflow() {
  if (GetArenaForAllocation() == nullptr && dynamic_workflow_ != nullptr) {
    delete dynamic_workflow_;
  }
  dynamic_workflow_ = nullptr;
}
inline const ::flyteidl::event::DynamicWorkflowNodeMetadata& TaskNodeMetadata::_internal_dynamic_workflow() const {
  const ::flyteidl::event::DynamicWorkflowNodeMetadata* p = dynamic_workflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::event::DynamicWorkflowNodeMetadata&>(
      ::flyteidl::event::_DynamicWorkflowNodeMetadata_default_instance_);
}
inline const ::flyteidl::event::DynamicWorkflowNodeMetadata& TaskNodeMetadata::dynamic_workflow() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskNodeMetadata.dynamic_workflow)
  return _internal_dynamic_workflow();
}
inline void TaskNodeMetadata::unsafe_arena_set_allocated_dynamic_workflow(
    ::flyteidl::event::DynamicWorkflowNodeMetadata* dynamic_workflow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dynamic_workflow_);
  }
  dynamic_workflow_ = dynamic_workflow;
  if (dynamic_workflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.event.TaskNodeMetadata.dynamic_workflow)
}
inline ::flyteidl::event::DynamicWorkflowNodeMetadata* TaskNodeMetadata::release_dynamic_workflow() {
  
  ::flyteidl::event::DynamicWorkflowNodeMetadata* temp = dynamic_workflow_;
  dynamic_workflow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::event::DynamicWorkflowNodeMetadata* TaskNodeMetadata::unsafe_arena_release_dynamic_workflow() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskNodeMetadata.dynamic_workflow)
  
  ::flyteidl::event::DynamicWorkflowNodeMetadata* temp = dynamic_workflow_;
  dynamic_workflow_ = nullptr;
  return temp;
}
inline ::flyteidl::event::DynamicWorkflowNodeMetadata* TaskNodeMetadata::_internal_mutable_dynamic_workflow() {
  
  if (dynamic_workflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::event::DynamicWorkflowNodeMetadata>(GetArenaForAllocation());
    dynamic_workflow_ = p;
  }
  return dynamic_workflow_;
}
inline ::flyteidl::event::DynamicWorkflowNodeMetadata* TaskNodeMetadata::mutable_dynamic_workflow() {
  ::flyteidl::event::DynamicWorkflowNodeMetadata* _msg = _internal_mutable_dynamic_workflow();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskNodeMetadata.dynamic_workflow)
  return _msg;
}
inline void TaskNodeMetadata::set_allocated_dynamic_workflow(::flyteidl::event::DynamicWorkflowNodeMetadata* dynamic_workflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete dynamic_workflow_;
  }
  if (dynamic_workflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::event::DynamicWorkflowNodeMetadata>::GetOwningArena(dynamic_workflow);
    if (message_arena != submessage_arena) {
      dynamic_workflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dynamic_workflow, submessage_arena);
    }
    
  } else {
    
  }
  dynamic_workflow_ = dynamic_workflow;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskNodeMetadata.dynamic_workflow)
}

// -------------------------------------------------------------------

// DynamicWorkflowNodeMetadata

// .flyteidl.core.Identifier id = 1 [json_name = "id"];
inline bool DynamicWorkflowNodeMetadata::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool DynamicWorkflowNodeMetadata::has_id() const {
  return _internal_has_id();
}
inline const ::flyteidl::core::Identifier& DynamicWorkflowNodeMetadata::_internal_id() const {
  const ::flyteidl::core::Identifier* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::Identifier&>(
      ::flyteidl::core::_Identifier_default_instance_);
}
inline const ::flyteidl::core::Identifier& DynamicWorkflowNodeMetadata::id() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.DynamicWorkflowNodeMetadata.id)
  return _internal_id();
}
inline void DynamicWorkflowNodeMetadata::unsafe_arena_set_allocated_id(
    ::flyteidl::core::Identifier* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.event.DynamicWorkflowNodeMetadata.id)
}
inline ::flyteidl::core::Identifier* DynamicWorkflowNodeMetadata::release_id() {
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::Identifier* DynamicWorkflowNodeMetadata::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.DynamicWorkflowNodeMetadata.id)
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identifier* DynamicWorkflowNodeMetadata::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identifier>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::flyteidl::core::Identifier* DynamicWorkflowNodeMetadata::mutable_id() {
  ::flyteidl::core::Identifier* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.DynamicWorkflowNodeMetadata.id)
  return _msg;
}
inline void DynamicWorkflowNodeMetadata::set_allocated_id(::flyteidl::core::Identifier* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.DynamicWorkflowNodeMetadata.id)
}

// .flyteidl.core.CompiledWorkflowClosure compiled_workflow = 2 [json_name = "compiledWorkflow"];
inline bool DynamicWorkflowNodeMetadata::_internal_has_compiled_workflow() const {
  return this != internal_default_instance() && compiled_workflow_ != nullptr;
}
inline bool DynamicWorkflowNodeMetadata::has_compiled_workflow() const {
  return _internal_has_compiled_workflow();
}
inline const ::flyteidl::core::CompiledWorkflowClosure& DynamicWorkflowNodeMetadata::_internal_compiled_workflow() const {
  const ::flyteidl::core::CompiledWorkflowClosure* p = compiled_workflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::CompiledWorkflowClosure&>(
      ::flyteidl::core::_CompiledWorkflowClosure_default_instance_);
}
inline const ::flyteidl::core::CompiledWorkflowClosure& DynamicWorkflowNodeMetadata::compiled_workflow() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.DynamicWorkflowNodeMetadata.compiled_workflow)
  return _internal_compiled_workflow();
}
inline void DynamicWorkflowNodeMetadata::unsafe_arena_set_allocated_compiled_workflow(
    ::flyteidl::core::CompiledWorkflowClosure* compiled_workflow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(compiled_workflow_);
  }
  compiled_workflow_ = compiled_workflow;
  if (compiled_workflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.event.DynamicWorkflowNodeMetadata.compiled_workflow)
}
inline ::flyteidl::core::CompiledWorkflowClosure* DynamicWorkflowNodeMetadata::release_compiled_workflow() {
  
  ::flyteidl::core::CompiledWorkflowClosure* temp = compiled_workflow_;
  compiled_workflow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::CompiledWorkflowClosure* DynamicWorkflowNodeMetadata::unsafe_arena_release_compiled_workflow() {
  // @@protoc_insertion_point(field_release:flyteidl.event.DynamicWorkflowNodeMetadata.compiled_workflow)
  
  ::flyteidl::core::CompiledWorkflowClosure* temp = compiled_workflow_;
  compiled_workflow_ = nullptr;
  return temp;
}
inline ::flyteidl::core::CompiledWorkflowClosure* DynamicWorkflowNodeMetadata::_internal_mutable_compiled_workflow() {
  
  if (compiled_workflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::CompiledWorkflowClosure>(GetArenaForAllocation());
    compiled_workflow_ = p;
  }
  return compiled_workflow_;
}
inline ::flyteidl::core::CompiledWorkflowClosure* DynamicWorkflowNodeMetadata::mutable_compiled_workflow() {
  ::flyteidl::core::CompiledWorkflowClosure* _msg = _internal_mutable_compiled_workflow();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.DynamicWorkflowNodeMetadata.compiled_workflow)
  return _msg;
}
inline void DynamicWorkflowNodeMetadata::set_allocated_compiled_workflow(::flyteidl::core::CompiledWorkflowClosure* compiled_workflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(compiled_workflow_);
  }
  if (compiled_workflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(compiled_workflow));
    if (message_arena != submessage_arena) {
      compiled_workflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compiled_workflow, submessage_arena);
    }
    
  } else {
    
  }
  compiled_workflow_ = compiled_workflow;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.DynamicWorkflowNodeMetadata.compiled_workflow)
}

// -------------------------------------------------------------------

// ParentTaskExecutionMetadata

// .flyteidl.core.TaskExecutionIdentifier id = 1 [json_name = "id"];
inline bool ParentTaskExecutionMetadata::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool ParentTaskExecutionMetadata::has_id() const {
  return _internal_has_id();
}
inline const ::flyteidl::core::TaskExecutionIdentifier& ParentTaskExecutionMetadata::_internal_id() const {
  const ::flyteidl::core::TaskExecutionIdentifier* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::TaskExecutionIdentifier&>(
      ::flyteidl::core::_TaskExecutionIdentifier_default_instance_);
}
inline const ::flyteidl::core::TaskExecutionIdentifier& ParentTaskExecutionMetadata::id() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.ParentTaskExecutionMetadata.id)
  return _internal_id();
}
inline void ParentTaskExecutionMetadata::unsafe_arena_set_allocated_id(
    ::flyteidl::core::TaskExecutionIdentifier* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.event.ParentTaskExecutionMetadata.id)
}
inline ::flyteidl::core::TaskExecutionIdentifier* ParentTaskExecutionMetadata::release_id() {
  
  ::flyteidl::core::TaskExecutionIdentifier* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::TaskExecutionIdentifier* ParentTaskExecutionMetadata::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.ParentTaskExecutionMetadata.id)
  
  ::flyteidl::core::TaskExecutionIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::TaskExecutionIdentifier* ParentTaskExecutionMetadata::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::TaskExecutionIdentifier>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::flyteidl::core::TaskExecutionIdentifier* ParentTaskExecutionMetadata::mutable_id() {
  ::flyteidl::core::TaskExecutionIdentifier* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.ParentTaskExecutionMetadata.id)
  return _msg;
}
inline void ParentTaskExecutionMetadata::set_allocated_id(::flyteidl::core::TaskExecutionIdentifier* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.ParentTaskExecutionMetadata.id)
}

// -------------------------------------------------------------------

// ParentNodeExecutionMetadata

// string node_id = 1 [json_name = "nodeId"];
inline void ParentNodeExecutionMetadata::clear_node_id() {
  node_id_.ClearToEmpty();
}
inline const std::string& ParentNodeExecutionMetadata::node_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.ParentNodeExecutionMetadata.node_id)
  return _internal_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParentNodeExecutionMetadata::set_node_id(ArgT0&& arg0, ArgT... args) {
 
 node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.event.ParentNodeExecutionMetadata.node_id)
}
inline std::string* ParentNodeExecutionMetadata::mutable_node_id() {
  std::string* _s = _internal_mutable_node_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.ParentNodeExecutionMetadata.node_id)
  return _s;
}
inline const std::string& ParentNodeExecutionMetadata::_internal_node_id() const {
  return node_id_.Get();
}
inline void ParentNodeExecutionMetadata::_internal_set_node_id(const std::string& value) {
  
  node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ParentNodeExecutionMetadata::_internal_mutable_node_id() {
  
  return node_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ParentNodeExecutionMetadata::release_node_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.ParentNodeExecutionMetadata.node_id)
  return node_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ParentNodeExecutionMetadata::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (node_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.ParentNodeExecutionMetadata.node_id)
}

// -------------------------------------------------------------------

// TaskExecutionEvent

// .flyteidl.core.Identifier task_id = 1 [json_name = "taskId"];
inline bool TaskExecutionEvent::_internal_has_task_id() const {
  return this != internal_default_instance() && task_id_ != nullptr;
}
inline bool TaskExecutionEvent::has_task_id() const {
  return _internal_has_task_id();
}
inline const ::flyteidl::core::Identifier& TaskExecutionEvent::_internal_task_id() const {
  const ::flyteidl::core::Identifier* p = task_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::Identifier&>(
      ::flyteidl::core::_Identifier_default_instance_);
}
inline const ::flyteidl::core::Identifier& TaskExecutionEvent::task_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.task_id)
  return _internal_task_id();
}
inline void TaskExecutionEvent::unsafe_arena_set_allocated_task_id(
    ::flyteidl::core::Identifier* task_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_id_);
  }
  task_id_ = task_id;
  if (task_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.event.TaskExecutionEvent.task_id)
}
inline ::flyteidl::core::Identifier* TaskExecutionEvent::release_task_id() {
  
  ::flyteidl::core::Identifier* temp = task_id_;
  task_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::Identifier* TaskExecutionEvent::unsafe_arena_release_task_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.task_id)
  
  ::flyteidl::core::Identifier* temp = task_id_;
  task_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identifier* TaskExecutionEvent::_internal_mutable_task_id() {
  
  if (task_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identifier>(GetArenaForAllocation());
    task_id_ = p;
  }
  return task_id_;
}
inline ::flyteidl::core::Identifier* TaskExecutionEvent::mutable_task_id() {
  ::flyteidl::core::Identifier* _msg = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.task_id)
  return _msg;
}
inline void TaskExecutionEvent::set_allocated_task_id(::flyteidl::core::Identifier* task_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_id_);
  }
  if (task_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_id));
    if (message_arena != submessage_arena) {
      task_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_id, submessage_arena);
    }
    
  } else {
    
  }
  task_id_ = task_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.task_id)
}

// .flyteidl.core.NodeExecutionIdentifier parent_node_execution_id = 2 [json_name = "parentNodeExecutionId"];
inline bool TaskExecutionEvent::_internal_has_parent_node_execution_id() const {
  return this != internal_default_instance() && parent_node_execution_id_ != nullptr;
}
inline bool TaskExecutionEvent::has_parent_node_execution_id() const {
  return _internal_has_parent_node_execution_id();
}
inline const ::flyteidl::core::NodeExecutionIdentifier& TaskExecutionEvent::_internal_parent_node_execution_id() const {
  const ::flyteidl::core::NodeExecutionIdentifier* p = parent_node_execution_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::NodeExecutionIdentifier&>(
      ::flyteidl::core::_NodeExecutionIdentifier_default_instance_);
}
inline const ::flyteidl::core::NodeExecutionIdentifier& TaskExecutionEvent::parent_node_execution_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.parent_node_execution_id)
  return _internal_parent_node_execution_id();
}
inline void TaskExecutionEvent::unsafe_arena_set_allocated_parent_node_execution_id(
    ::flyteidl::core::NodeExecutionIdentifier* parent_node_execution_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent_node_execution_id_);
  }
  parent_node_execution_id_ = parent_node_execution_id;
  if (parent_node_execution_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.event.TaskExecutionEvent.parent_node_execution_id)
}
inline ::flyteidl::core::NodeExecutionIdentifier* TaskExecutionEvent::release_parent_node_execution_id() {
  
  ::flyteidl::core::NodeExecutionIdentifier* temp = parent_node_execution_id_;
  parent_node_execution_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::NodeExecutionIdentifier* TaskExecutionEvent::unsafe_arena_release_parent_node_execution_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.parent_node_execution_id)
  
  ::flyteidl::core::NodeExecutionIdentifier* temp = parent_node_execution_id_;
  parent_node_execution_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::NodeExecutionIdentifier* TaskExecutionEvent::_internal_mutable_parent_node_execution_id() {
  
  if (parent_node_execution_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::NodeExecutionIdentifier>(GetArenaForAllocation());
    parent_node_execution_id_ = p;
  }
  return parent_node_execution_id_;
}
inline ::flyteidl::core::NodeExecutionIdentifier* TaskExecutionEvent::mutable_parent_node_execution_id() {
  ::flyteidl::core::NodeExecutionIdentifier* _msg = _internal_mutable_parent_node_execution_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.parent_node_execution_id)
  return _msg;
}
inline void TaskExecutionEvent::set_allocated_parent_node_execution_id(::flyteidl::core::NodeExecutionIdentifier* parent_node_execution_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent_node_execution_id_);
  }
  if (parent_node_execution_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parent_node_execution_id));
    if (message_arena != submessage_arena) {
      parent_node_execution_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parent_node_execution_id, submessage_arena);
    }
    
  } else {
    
  }
  parent_node_execution_id_ = parent_node_execution_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.parent_node_execution_id)
}

// uint32 retry_attempt = 3 [json_name = "retryAttempt"];
inline void TaskExecutionEvent::clear_retry_attempt() {
  retry_attempt_ = 0u;
}
inline uint32_t TaskExecutionEvent::_internal_retry_attempt() const {
  return retry_attempt_;
}
inline uint32_t TaskExecutionEvent::retry_attempt() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.retry_attempt)
  return _internal_retry_attempt();
}
inline void TaskExecutionEvent::_internal_set_retry_attempt(uint32_t value) {
  
  retry_attempt_ = value;
}
inline void TaskExecutionEvent::set_retry_attempt(uint32_t value) {
  _internal_set_retry_attempt(value);
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.retry_attempt)
}

// .flyteidl.core.TaskExecution.Phase phase = 4 [json_name = "phase"];
inline void TaskExecutionEvent::clear_phase() {
  phase_ = 0;
}
inline ::flyteidl::core::TaskExecution_Phase TaskExecutionEvent::_internal_phase() const {
  return static_cast< ::flyteidl::core::TaskExecution_Phase >(phase_);
}
inline ::flyteidl::core::TaskExecution_Phase TaskExecutionEvent::phase() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.phase)
  return _internal_phase();
}
inline void TaskExecutionEvent::_internal_set_phase(::flyteidl::core::TaskExecution_Phase value) {
  
  phase_ = value;
}
inline void TaskExecutionEvent::set_phase(::flyteidl::core::TaskExecution_Phase value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.phase)
}

// string producer_id = 5 [json_name = "producerId"];
inline void TaskExecutionEvent::clear_producer_id() {
  producer_id_.ClearToEmpty();
}
inline const std::string& TaskExecutionEvent::producer_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.producer_id)
  return _internal_producer_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskExecutionEvent::set_producer_id(ArgT0&& arg0, ArgT... args) {
 
 producer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.producer_id)
}
inline std::string* TaskExecutionEvent::mutable_producer_id() {
  std::string* _s = _internal_mutable_producer_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.producer_id)
  return _s;
}
inline const std::string& TaskExecutionEvent::_internal_producer_id() const {
  return producer_id_.Get();
}
inline void TaskExecutionEvent::_internal_set_producer_id(const std::string& value) {
  
  producer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskExecutionEvent::_internal_mutable_producer_id() {
  
  return producer_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskExecutionEvent::release_producer_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.producer_id)
  return producer_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskExecutionEvent::set_allocated_producer_id(std::string* producer_id) {
  if (producer_id != nullptr) {
    
  } else {
    
  }
  producer_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), producer_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (producer_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    producer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.producer_id)
}

// repeated .flyteidl.core.TaskLog logs = 6 [json_name = "logs"];
inline int TaskExecutionEvent::_internal_logs_size() const {
  return logs_.size();
}
inline int TaskExecutionEvent::logs_size() const {
  return _internal_logs_size();
}
inline ::flyteidl::core::TaskLog* TaskExecutionEvent::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.logs)
  return logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::TaskLog >*
TaskExecutionEvent::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.event.TaskExecutionEvent.logs)
  return &logs_;
}
inline const ::flyteidl::core::TaskLog& TaskExecutionEvent::_internal_logs(int index) const {
  return logs_.Get(index);
}
inline const ::flyteidl::core::TaskLog& TaskExecutionEvent::logs(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.logs)
  return _internal_logs(index);
}
inline ::flyteidl::core::TaskLog* TaskExecutionEvent::_internal_add_logs() {
  return logs_.Add();
}
inline ::flyteidl::core::TaskLog* TaskExecutionEvent::add_logs() {
  ::flyteidl::core::TaskLog* _add = _internal_add_logs();
  // @@protoc_insertion_point(field_add:flyteidl.event.TaskExecutionEvent.logs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::TaskLog >&
TaskExecutionEvent::logs() const {
  // @@protoc_insertion_point(field_list:flyteidl.event.TaskExecutionEvent.logs)
  return logs_;
}

// .google.protobuf.Timestamp occurred_at = 7 [json_name = "occurredAt"];
inline bool TaskExecutionEvent::_internal_has_occurred_at() const {
  return this != internal_default_instance() && occurred_at_ != nullptr;
}
inline bool TaskExecutionEvent::has_occurred_at() const {
  return _internal_has_occurred_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TaskExecutionEvent::_internal_occurred_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = occurred_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TaskExecutionEvent::occurred_at() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.occurred_at)
  return _internal_occurred_at();
}
inline void TaskExecutionEvent::unsafe_arena_set_allocated_occurred_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* occurred_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(occurred_at_);
  }
  occurred_at_ = occurred_at;
  if (occurred_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.event.TaskExecutionEvent.occurred_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TaskExecutionEvent::release_occurred_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = occurred_at_;
  occurred_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TaskExecutionEvent::unsafe_arena_release_occurred_at() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.occurred_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = occurred_at_;
  occurred_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TaskExecutionEvent::_internal_mutable_occurred_at() {
  
  if (occurred_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    occurred_at_ = p;
  }
  return occurred_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TaskExecutionEvent::mutable_occurred_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_occurred_at();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.occurred_at)
  return _msg;
}
inline void TaskExecutionEvent::set_allocated_occurred_at(::PROTOBUF_NAMESPACE_ID::Timestamp* occurred_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(occurred_at_);
  }
  if (occurred_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(occurred_at));
    if (message_arena != submessage_arena) {
      occurred_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, occurred_at, submessage_arena);
    }
    
  } else {
    
  }
  occurred_at_ = occurred_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.occurred_at)
}

// string input_uri = 8 [json_name = "inputUri"];
inline void TaskExecutionEvent::clear_input_uri() {
  input_uri_.ClearToEmpty();
}
inline const std::string& TaskExecutionEvent::input_uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.input_uri)
  return _internal_input_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskExecutionEvent::set_input_uri(ArgT0&& arg0, ArgT... args) {
 
 input_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.input_uri)
}
inline std::string* TaskExecutionEvent::mutable_input_uri() {
  std::string* _s = _internal_mutable_input_uri();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.input_uri)
  return _s;
}
inline const std::string& TaskExecutionEvent::_internal_input_uri() const {
  return input_uri_.Get();
}
inline void TaskExecutionEvent::_internal_set_input_uri(const std::string& value) {
  
  input_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskExecutionEvent::_internal_mutable_input_uri() {
  
  return input_uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskExecutionEvent::release_input_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.input_uri)
  return input_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskExecutionEvent::set_allocated_input_uri(std::string* input_uri) {
  if (input_uri != nullptr) {
    
  } else {
    
  }
  input_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_uri,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (input_uri_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    input_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.input_uri)
}

// string output_uri = 9 [json_name = "outputUri"];
inline bool TaskExecutionEvent::_internal_has_output_uri() const {
  return output_result_case() == kOutputUri;
}
inline bool TaskExecutionEvent::has_output_uri() const {
  return _internal_has_output_uri();
}
inline void TaskExecutionEvent::set_has_output_uri() {
  _oneof_case_[0] = kOutputUri;
}
inline void TaskExecutionEvent::clear_output_uri() {
  if (_internal_has_output_uri()) {
    output_result_.output_uri_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_output_result();
  }
}
inline const std::string& TaskExecutionEvent::output_uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.output_uri)
  return _internal_output_uri();
}
template <typename ArgT0, typename... ArgT>
inline void TaskExecutionEvent::set_output_uri(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.output_uri)
}
inline std::string* TaskExecutionEvent::mutable_output_uri() {
  std::string* _s = _internal_mutable_output_uri();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.output_uri)
  return _s;
}
inline const std::string& TaskExecutionEvent::_internal_output_uri() const {
  if (_internal_has_output_uri()) {
    return output_result_.output_uri_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TaskExecutionEvent::_internal_set_output_uri(const std::string& value) {
  if (!_internal_has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskExecutionEvent::_internal_mutable_output_uri() {
  if (!_internal_has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return output_result_.output_uri_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskExecutionEvent::release_output_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.output_uri)
  if (_internal_has_output_uri()) {
    clear_has_output_result();
    return output_result_.output_uri_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void TaskExecutionEvent::set_allocated_output_uri(std::string* output_uri) {
  if (has_output_result()) {
    clear_output_result();
  }
  if (output_uri != nullptr) {
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(output_uri);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(output_uri);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.output_uri)
}

// .flyteidl.core.ExecutionError error = 10 [json_name = "error"];
inline bool TaskExecutionEvent::_internal_has_error() const {
  return output_result_case() == kError;
}
inline bool TaskExecutionEvent::has_error() const {
  return _internal_has_error();
}
inline void TaskExecutionEvent::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::flyteidl::core::ExecutionError* TaskExecutionEvent::release_error() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.error)
  if (_internal_has_error()) {
    clear_has_output_result();
      ::flyteidl::core::ExecutionError* temp = output_result_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    output_result_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::ExecutionError& TaskExecutionEvent::_internal_error() const {
  return _internal_has_error()
      ? *output_result_.error_
      : reinterpret_cast< ::flyteidl::core::ExecutionError&>(::flyteidl::core::_ExecutionError_default_instance_);
}
inline const ::flyteidl::core::ExecutionError& TaskExecutionEvent::error() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.error)
  return _internal_error();
}
inline ::flyteidl::core::ExecutionError* TaskExecutionEvent::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.event.TaskExecutionEvent.error)
  if (_internal_has_error()) {
    clear_has_output_result();
    ::flyteidl::core::ExecutionError* temp = output_result_.error_;
    output_result_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskExecutionEvent::unsafe_arena_set_allocated_error(::flyteidl::core::ExecutionError* error) {
  clear_output_result();
  if (error) {
    set_has_error();
    output_result_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.event.TaskExecutionEvent.error)
}
inline ::flyteidl::core::ExecutionError* TaskExecutionEvent::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_output_result();
    set_has_error();
    output_result_.error_ = CreateMaybeMessage< ::flyteidl::core::ExecutionError >(GetArenaForAllocation());
  }
  return output_result_.error_;
}
inline ::flyteidl::core::ExecutionError* TaskExecutionEvent::mutable_error() {
  ::flyteidl::core::ExecutionError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.error)
  return _msg;
}

// .flyteidl.core.LiteralMap output_data = 17 [json_name = "outputData"];
inline bool TaskExecutionEvent::_internal_has_output_data() const {
  return output_result_case() == kOutputData;
}
inline bool TaskExecutionEvent::has_output_data() const {
  return _internal_has_output_data();
}
inline void TaskExecutionEvent::set_has_output_data() {
  _oneof_case_[0] = kOutputData;
}
inline ::flyteidl::core::LiteralMap* TaskExecutionEvent::release_output_data() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.output_data)
  if (_internal_has_output_data()) {
    clear_has_output_result();
      ::flyteidl::core::LiteralMap* temp = output_result_.output_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    output_result_.output_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::LiteralMap& TaskExecutionEvent::_internal_output_data() const {
  return _internal_has_output_data()
      ? *output_result_.output_data_
      : reinterpret_cast< ::flyteidl::core::LiteralMap&>(::flyteidl::core::_LiteralMap_default_instance_);
}
inline const ::flyteidl::core::LiteralMap& TaskExecutionEvent::output_data() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.output_data)
  return _internal_output_data();
}
inline ::flyteidl::core::LiteralMap* TaskExecutionEvent::unsafe_arena_release_output_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.event.TaskExecutionEvent.output_data)
  if (_internal_has_output_data()) {
    clear_has_output_result();
    ::flyteidl::core::LiteralMap* temp = output_result_.output_data_;
    output_result_.output_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskExecutionEvent::unsafe_arena_set_allocated_output_data(::flyteidl::core::LiteralMap* output_data) {
  clear_output_result();
  if (output_data) {
    set_has_output_data();
    output_result_.output_data_ = output_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.event.TaskExecutionEvent.output_data)
}
inline ::flyteidl::core::LiteralMap* TaskExecutionEvent::_internal_mutable_output_data() {
  if (!_internal_has_output_data()) {
    clear_output_result();
    set_has_output_data();
    output_result_.output_data_ = CreateMaybeMessage< ::flyteidl::core::LiteralMap >(GetArenaForAllocation());
  }
  return output_result_.output_data_;
}
inline ::flyteidl::core::LiteralMap* TaskExecutionEvent::mutable_output_data() {
  ::flyteidl::core::LiteralMap* _msg = _internal_mutable_output_data();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.output_data)
  return _msg;
}

// .google.protobuf.Struct custom_info = 11 [json_name = "customInfo"];
inline bool TaskExecutionEvent::_internal_has_custom_info() const {
  return this != internal_default_instance() && custom_info_ != nullptr;
}
inline bool TaskExecutionEvent::has_custom_info() const {
  return _internal_has_custom_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& TaskExecutionEvent::_internal_custom_info() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = custom_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& TaskExecutionEvent::custom_info() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.custom_info)
  return _internal_custom_info();
}
inline void TaskExecutionEvent::unsafe_arena_set_allocated_custom_info(
    ::PROTOBUF_NAMESPACE_ID::Struct* custom_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_info_);
  }
  custom_info_ = custom_info;
  if (custom_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.event.TaskExecutionEvent.custom_info)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TaskExecutionEvent::release_custom_info() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = custom_info_;
  custom_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TaskExecutionEvent::unsafe_arena_release_custom_info() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.custom_info)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = custom_info_;
  custom_info_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TaskExecutionEvent::_internal_mutable_custom_info() {
  
  if (custom_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    custom_info_ = p;
  }
  return custom_info_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TaskExecutionEvent::mutable_custom_info() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_custom_info();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.custom_info)
  return _msg;
}
inline void TaskExecutionEvent::set_allocated_custom_info(::PROTOBUF_NAMESPACE_ID::Struct* custom_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_info_);
  }
  if (custom_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_info));
    if (message_arena != submessage_arena) {
      custom_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_info, submessage_arena);
    }
    
  } else {
    
  }
  custom_info_ = custom_info;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.custom_info)
}

// uint32 phase_version = 12 [json_name = "phaseVersion"];
inline void TaskExecutionEvent::clear_phase_version() {
  phase_version_ = 0u;
}
inline uint32_t TaskExecutionEvent::_internal_phase_version() const {
  return phase_version_;
}
inline uint32_t TaskExecutionEvent::phase_version() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.phase_version)
  return _internal_phase_version();
}
inline void TaskExecutionEvent::_internal_set_phase_version(uint32_t value) {
  
  phase_version_ = value;
}
inline void TaskExecutionEvent::set_phase_version(uint32_t value) {
  _internal_set_phase_version(value);
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.phase_version)
}

// string reason = 13 [json_name = "reason"];
inline void TaskExecutionEvent::clear_reason() {
  reason_.ClearToEmpty();
}
inline const std::string& TaskExecutionEvent::reason() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskExecutionEvent::set_reason(ArgT0&& arg0, ArgT... args) {
 
 reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.reason)
}
inline std::string* TaskExecutionEvent::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.reason)
  return _s;
}
inline const std::string& TaskExecutionEvent::_internal_reason() const {
  return reason_.Get();
}
inline void TaskExecutionEvent::_internal_set_reason(const std::string& value) {
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskExecutionEvent::_internal_mutable_reason() {
  
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskExecutionEvent::release_reason() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskExecutionEvent::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reason_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.reason)
}

// string task_type = 14 [json_name = "taskType"];
inline void TaskExecutionEvent::clear_task_type() {
  task_type_.ClearToEmpty();
}
inline const std::string& TaskExecutionEvent::task_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.task_type)
  return _internal_task_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskExecutionEvent::set_task_type(ArgT0&& arg0, ArgT... args) {
 
 task_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.task_type)
}
inline std::string* TaskExecutionEvent::mutable_task_type() {
  std::string* _s = _internal_mutable_task_type();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.task_type)
  return _s;
}
inline const std::string& TaskExecutionEvent::_internal_task_type() const {
  return task_type_.Get();
}
inline void TaskExecutionEvent::_internal_set_task_type(const std::string& value) {
  
  task_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskExecutionEvent::_internal_mutable_task_type() {
  
  return task_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskExecutionEvent::release_task_type() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.task_type)
  return task_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskExecutionEvent::set_allocated_task_type(std::string* task_type) {
  if (task_type != nullptr) {
    
  } else {
    
  }
  task_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (task_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    task_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.task_type)
}

// .flyteidl.event.TaskExecutionMetadata metadata = 16 [json_name = "metadata"];
inline bool TaskExecutionEvent::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool TaskExecutionEvent::has_metadata() const {
  return _internal_has_metadata();
}
inline void TaskExecutionEvent::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::flyteidl::event::TaskExecutionMetadata& TaskExecutionEvent::_internal_metadata() const {
  const ::flyteidl::event::TaskExecutionMetadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::event::TaskExecutionMetadata&>(
      ::flyteidl::event::_TaskExecutionMetadata_default_instance_);
}
inline const ::flyteidl::event::TaskExecutionMetadata& TaskExecutionEvent::metadata() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.metadata)
  return _internal_metadata();
}
inline void TaskExecutionEvent::unsafe_arena_set_allocated_metadata(
    ::flyteidl::event::TaskExecutionMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.event.TaskExecutionEvent.metadata)
}
inline ::flyteidl::event::TaskExecutionMetadata* TaskExecutionEvent::release_metadata() {
  
  ::flyteidl::event::TaskExecutionMetadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::event::TaskExecutionMetadata* TaskExecutionEvent::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.metadata)
  
  ::flyteidl::event::TaskExecutionMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::flyteidl::event::TaskExecutionMetadata* TaskExecutionEvent::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::event::TaskExecutionMetadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::flyteidl::event::TaskExecutionMetadata* TaskExecutionEvent::mutable_metadata() {
  ::flyteidl::event::TaskExecutionMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.metadata)
  return _msg;
}
inline void TaskExecutionEvent::set_allocated_metadata(::flyteidl::event::TaskExecutionMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::event::TaskExecutionMetadata>::GetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.metadata)
}

// int32 event_version = 18 [json_name = "eventVersion"];
inline void TaskExecutionEvent::clear_event_version() {
  event_version_ = 0;
}
inline int32_t TaskExecutionEvent::_internal_event_version() const {
  return event_version_;
}
inline int32_t TaskExecutionEvent::event_version() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.event_version)
  return _internal_event_version();
}
inline void TaskExecutionEvent::_internal_set_event_version(int32_t value) {
  
  event_version_ = value;
}
inline void TaskExecutionEvent::set_event_version(int32_t value) {
  _internal_set_event_version(value);
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.event_version)
}

inline bool TaskExecutionEvent::has_output_result() const {
  return output_result_case() != OUTPUT_RESULT_NOT_SET;
}
inline void TaskExecutionEvent::clear_has_output_result() {
  _oneof_case_[0] = OUTPUT_RESULT_NOT_SET;
}
inline TaskExecutionEvent::OutputResultCase TaskExecutionEvent::output_result_case() const {
  return TaskExecutionEvent::OutputResultCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ExternalResourceInfo

// string external_id = 1 [json_name = "externalId"];
inline void ExternalResourceInfo::clear_external_id() {
  external_id_.ClearToEmpty();
}
inline const std::string& ExternalResourceInfo::external_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.ExternalResourceInfo.external_id)
  return _internal_external_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExternalResourceInfo::set_external_id(ArgT0&& arg0, ArgT... args) {
 
 external_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.event.ExternalResourceInfo.external_id)
}
inline std::string* ExternalResourceInfo::mutable_external_id() {
  std::string* _s = _internal_mutable_external_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.ExternalResourceInfo.external_id)
  return _s;
}
inline const std::string& ExternalResourceInfo::_internal_external_id() const {
  return external_id_.Get();
}
inline void ExternalResourceInfo::_internal_set_external_id(const std::string& value) {
  
  external_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExternalResourceInfo::_internal_mutable_external_id() {
  
  return external_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExternalResourceInfo::release_external_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.ExternalResourceInfo.external_id)
  return external_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExternalResourceInfo::set_allocated_external_id(std::string* external_id) {
  if (external_id != nullptr) {
    
  } else {
    
  }
  external_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), external_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (external_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    external_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.ExternalResourceInfo.external_id)
}

// uint32 index = 2 [json_name = "index"];
inline void ExternalResourceInfo::clear_index() {
  index_ = 0u;
}
inline uint32_t ExternalResourceInfo::_internal_index() const {
  return index_;
}
inline uint32_t ExternalResourceInfo::index() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.ExternalResourceInfo.index)
  return _internal_index();
}
inline void ExternalResourceInfo::_internal_set_index(uint32_t value) {
  
  index_ = value;
}
inline void ExternalResourceInfo::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:flyteidl.event.ExternalResourceInfo.index)
}

// uint32 retry_attempt = 3 [json_name = "retryAttempt"];
inline void ExternalResourceInfo::clear_retry_attempt() {
  retry_attempt_ = 0u;
}
inline uint32_t ExternalResourceInfo::_internal_retry_attempt() const {
  return retry_attempt_;
}
inline uint32_t ExternalResourceInfo::retry_attempt() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.ExternalResourceInfo.retry_attempt)
  return _internal_retry_attempt();
}
inline void ExternalResourceInfo::_internal_set_retry_attempt(uint32_t value) {
  
  retry_attempt_ = value;
}
inline void ExternalResourceInfo::set_retry_attempt(uint32_t value) {
  _internal_set_retry_attempt(value);
  // @@protoc_insertion_point(field_set:flyteidl.event.ExternalResourceInfo.retry_attempt)
}

// .flyteidl.core.TaskExecution.Phase phase = 4 [json_name = "phase"];
inline void ExternalResourceInfo::clear_phase() {
  phase_ = 0;
}
inline ::flyteidl::core::TaskExecution_Phase ExternalResourceInfo::_internal_phase() const {
  return static_cast< ::flyteidl::core::TaskExecution_Phase >(phase_);
}
inline ::flyteidl::core::TaskExecution_Phase ExternalResourceInfo::phase() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.ExternalResourceInfo.phase)
  return _internal_phase();
}
inline void ExternalResourceInfo::_internal_set_phase(::flyteidl::core::TaskExecution_Phase value) {
  
  phase_ = value;
}
inline void ExternalResourceInfo::set_phase(::flyteidl::core::TaskExecution_Phase value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:flyteidl.event.ExternalResourceInfo.phase)
}

// .flyteidl.core.CatalogCacheStatus cache_status = 5 [json_name = "cacheStatus"];
inline void ExternalResourceInfo::clear_cache_status() {
  cache_status_ = 0;
}
inline ::flyteidl::core::CatalogCacheStatus ExternalResourceInfo::_internal_cache_status() const {
  return static_cast< ::flyteidl::core::CatalogCacheStatus >(cache_status_);
}
inline ::flyteidl::core::CatalogCacheStatus ExternalResourceInfo::cache_status() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.ExternalResourceInfo.cache_status)
  return _internal_cache_status();
}
inline void ExternalResourceInfo::_internal_set_cache_status(::flyteidl::core::CatalogCacheStatus value) {
  
  cache_status_ = value;
}
inline void ExternalResourceInfo::set_cache_status(::flyteidl::core::CatalogCacheStatus value) {
  _internal_set_cache_status(value);
  // @@protoc_insertion_point(field_set:flyteidl.event.ExternalResourceInfo.cache_status)
}

// repeated .flyteidl.core.TaskLog logs = 6 [json_name = "logs"];
inline int ExternalResourceInfo::_internal_logs_size() const {
  return logs_.size();
}
inline int ExternalResourceInfo::logs_size() const {
  return _internal_logs_size();
}
inline ::flyteidl::core::TaskLog* ExternalResourceInfo::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.event.ExternalResourceInfo.logs)
  return logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::TaskLog >*
ExternalResourceInfo::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.event.ExternalResourceInfo.logs)
  return &logs_;
}
inline const ::flyteidl::core::TaskLog& ExternalResourceInfo::_internal_logs(int index) const {
  return logs_.Get(index);
}
inline const ::flyteidl::core::TaskLog& ExternalResourceInfo::logs(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.event.ExternalResourceInfo.logs)
  return _internal_logs(index);
}
inline ::flyteidl::core::TaskLog* ExternalResourceInfo::_internal_add_logs() {
  return logs_.Add();
}
inline ::flyteidl::core::TaskLog* ExternalResourceInfo::add_logs() {
  ::flyteidl::core::TaskLog* _add = _internal_add_logs();
  // @@protoc_insertion_point(field_add:flyteidl.event.ExternalResourceInfo.logs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::TaskLog >&
ExternalResourceInfo::logs() const {
  // @@protoc_insertion_point(field_list:flyteidl.event.ExternalResourceInfo.logs)
  return logs_;
}

// -------------------------------------------------------------------

// ResourcePoolInfo

// string allocation_token = 1 [json_name = "allocationToken"];
inline void ResourcePoolInfo::clear_allocation_token() {
  allocation_token_.ClearToEmpty();
}
inline const std::string& ResourcePoolInfo::allocation_token() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.ResourcePoolInfo.allocation_token)
  return _internal_allocation_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourcePoolInfo::set_allocation_token(ArgT0&& arg0, ArgT... args) {
 
 allocation_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.event.ResourcePoolInfo.allocation_token)
}
inline std::string* ResourcePoolInfo::mutable_allocation_token() {
  std::string* _s = _internal_mutable_allocation_token();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.ResourcePoolInfo.allocation_token)
  return _s;
}
inline const std::string& ResourcePoolInfo::_internal_allocation_token() const {
  return allocation_token_.Get();
}
inline void ResourcePoolInfo::_internal_set_allocation_token(const std::string& value) {
  
  allocation_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResourcePoolInfo::_internal_mutable_allocation_token() {
  
  return allocation_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResourcePoolInfo::release_allocation_token() {
  // @@protoc_insertion_point(field_release:flyteidl.event.ResourcePoolInfo.allocation_token)
  return allocation_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResourcePoolInfo::set_allocated_allocation_token(std::string* allocation_token) {
  if (allocation_token != nullptr) {
    
  } else {
    
  }
  allocation_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), allocation_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (allocation_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    allocation_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.ResourcePoolInfo.allocation_token)
}

// string namespace = 2 [json_name = "namespace"];
inline void ResourcePoolInfo::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& ResourcePoolInfo::namespace_() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.ResourcePoolInfo.namespace)
  return _internal_namespace_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourcePoolInfo::set_namespace_(ArgT0&& arg0, ArgT... args) {
 
 namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.event.ResourcePoolInfo.namespace)
}
inline std::string* ResourcePoolInfo::mutable_namespace_() {
  std::string* _s = _internal_mutable_namespace_();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.ResourcePoolInfo.namespace)
  return _s;
}
inline const std::string& ResourcePoolInfo::_internal_namespace_() const {
  return namespace__.Get();
}
inline void ResourcePoolInfo::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResourcePoolInfo::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResourcePoolInfo::release_namespace_() {
  // @@protoc_insertion_point(field_release:flyteidl.event.ResourcePoolInfo.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResourcePoolInfo::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (namespace__.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.ResourcePoolInfo.namespace)
}

// -------------------------------------------------------------------

// TaskExecutionMetadata

// string generated_name = 1 [json_name = "generatedName"];
inline void TaskExecutionMetadata::clear_generated_name() {
  generated_name_.ClearToEmpty();
}
inline const std::string& TaskExecutionMetadata::generated_name() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionMetadata.generated_name)
  return _internal_generated_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskExecutionMetadata::set_generated_name(ArgT0&& arg0, ArgT... args) {
 
 generated_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionMetadata.generated_name)
}
inline std::string* TaskExecutionMetadata::mutable_generated_name() {
  std::string* _s = _internal_mutable_generated_name();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionMetadata.generated_name)
  return _s;
}
inline const std::string& TaskExecutionMetadata::_internal_generated_name() const {
  return generated_name_.Get();
}
inline void TaskExecutionMetadata::_internal_set_generated_name(const std::string& value) {
  
  generated_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskExecutionMetadata::_internal_mutable_generated_name() {
  
  return generated_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskExecutionMetadata::release_generated_name() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionMetadata.generated_name)
  return generated_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskExecutionMetadata::set_allocated_generated_name(std::string* generated_name) {
  if (generated_name != nullptr) {
    
  } else {
    
  }
  generated_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), generated_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (generated_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    generated_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionMetadata.generated_name)
}

// repeated .flyteidl.event.ExternalResourceInfo external_resources = 2 [json_name = "externalResources"];
inline int TaskExecutionMetadata::_internal_external_resources_size() const {
  return external_resources_.size();
}
inline int TaskExecutionMetadata::external_resources_size() const {
  return _internal_external_resources_size();
}
inline void TaskExecutionMetadata::clear_external_resources() {
  external_resources_.Clear();
}
inline ::flyteidl::event::ExternalResourceInfo* TaskExecutionMetadata::mutable_external_resources(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionMetadata.external_resources)
  return external_resources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::event::ExternalResourceInfo >*
TaskExecutionMetadata::mutable_external_resources() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.event.TaskExecutionMetadata.external_resources)
  return &external_resources_;
}
inline const ::flyteidl::event::ExternalResourceInfo& TaskExecutionMetadata::_internal_external_resources(int index) const {
  return external_resources_.Get(index);
}
inline const ::flyteidl::event::ExternalResourceInfo& TaskExecutionMetadata::external_resources(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionMetadata.external_resources)
  return _internal_external_resources(index);
}
inline ::flyteidl::event::ExternalResourceInfo* TaskExecutionMetadata::_internal_add_external_resources() {
  return external_resources_.Add();
}
inline ::flyteidl::event::ExternalResourceInfo* TaskExecutionMetadata::add_external_resources() {
  ::flyteidl::event::ExternalResourceInfo* _add = _internal_add_external_resources();
  // @@protoc_insertion_point(field_add:flyteidl.event.TaskExecutionMetadata.external_resources)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::event::ExternalResourceInfo >&
TaskExecutionMetadata::external_resources() const {
  // @@protoc_insertion_point(field_list:flyteidl.event.TaskExecutionMetadata.external_resources)
  return external_resources_;
}

// repeated .flyteidl.event.ResourcePoolInfo resource_pool_info = 3 [json_name = "resourcePoolInfo"];
inline int TaskExecutionMetadata::_internal_resource_pool_info_size() const {
  return resource_pool_info_.size();
}
inline int TaskExecutionMetadata::resource_pool_info_size() const {
  return _internal_resource_pool_info_size();
}
inline void TaskExecutionMetadata::clear_resource_pool_info() {
  resource_pool_info_.Clear();
}
inline ::flyteidl::event::ResourcePoolInfo* TaskExecutionMetadata::mutable_resource_pool_info(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionMetadata.resource_pool_info)
  return resource_pool_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::event::ResourcePoolInfo >*
TaskExecutionMetadata::mutable_resource_pool_info() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.event.TaskExecutionMetadata.resource_pool_info)
  return &resource_pool_info_;
}
inline const ::flyteidl::event::ResourcePoolInfo& TaskExecutionMetadata::_internal_resource_pool_info(int index) const {
  return resource_pool_info_.Get(index);
}
inline const ::flyteidl::event::ResourcePoolInfo& TaskExecutionMetadata::resource_pool_info(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionMetadata.resource_pool_info)
  return _internal_resource_pool_info(index);
}
inline ::flyteidl::event::ResourcePoolInfo* TaskExecutionMetadata::_internal_add_resource_pool_info() {
  return resource_pool_info_.Add();
}
inline ::flyteidl::event::ResourcePoolInfo* TaskExecutionMetadata::add_resource_pool_info() {
  ::flyteidl::event::ResourcePoolInfo* _add = _internal_add_resource_pool_info();
  // @@protoc_insertion_point(field_add:flyteidl.event.TaskExecutionMetadata.resource_pool_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::event::ResourcePoolInfo >&
TaskExecutionMetadata::resource_pool_info() const {
  // @@protoc_insertion_point(field_list:flyteidl.event.TaskExecutionMetadata.resource_pool_info)
  return resource_pool_info_;
}

// string plugin_identifier = 4 [json_name = "pluginIdentifier"];
inline void TaskExecutionMetadata::clear_plugin_identifier() {
  plugin_identifier_.ClearToEmpty();
}
inline const std::string& TaskExecutionMetadata::plugin_identifier() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionMetadata.plugin_identifier)
  return _internal_plugin_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskExecutionMetadata::set_plugin_identifier(ArgT0&& arg0, ArgT... args) {
 
 plugin_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionMetadata.plugin_identifier)
}
inline std::string* TaskExecutionMetadata::mutable_plugin_identifier() {
  std::string* _s = _internal_mutable_plugin_identifier();
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionMetadata.plugin_identifier)
  return _s;
}
inline const std::string& TaskExecutionMetadata::_internal_plugin_identifier() const {
  return plugin_identifier_.Get();
}
inline void TaskExecutionMetadata::_internal_set_plugin_identifier(const std::string& value) {
  
  plugin_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskExecutionMetadata::_internal_mutable_plugin_identifier() {
  
  return plugin_identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskExecutionMetadata::release_plugin_identifier() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionMetadata.plugin_identifier)
  return plugin_identifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskExecutionMetadata::set_allocated_plugin_identifier(std::string* plugin_identifier) {
  if (plugin_identifier != nullptr) {
    
  } else {
    
  }
  plugin_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plugin_identifier,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (plugin_identifier_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    plugin_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionMetadata.plugin_identifier)
}

// .flyteidl.event.TaskExecutionMetadata.InstanceClass instance_class = 16 [json_name = "instanceClass"];
inline void TaskExecutionMetadata::clear_instance_class() {
  instance_class_ = 0;
}
inline ::flyteidl::event::TaskExecutionMetadata_InstanceClass TaskExecutionMetadata::_internal_instance_class() const {
  return static_cast< ::flyteidl::event::TaskExecutionMetadata_InstanceClass >(instance_class_);
}
inline ::flyteidl::event::TaskExecutionMetadata_InstanceClass TaskExecutionMetadata::instance_class() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionMetadata.instance_class)
  return _internal_instance_class();
}
inline void TaskExecutionMetadata::_internal_set_instance_class(::flyteidl::event::TaskExecutionMetadata_InstanceClass value) {
  
  instance_class_ = value;
}
inline void TaskExecutionMetadata::set_instance_class(::flyteidl::event::TaskExecutionMetadata_InstanceClass value) {
  _internal_set_instance_class(value);
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionMetadata.instance_class)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace event
}  // namespace flyteidl

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::flyteidl::event::TaskExecutionMetadata_InstanceClass> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::event::TaskExecutionMetadata_InstanceClass>() {
  return ::flyteidl::event::TaskExecutionMetadata_InstanceClass_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fevent_2fevent_2eproto
