// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/project_domain_attributes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2fproject_5fdomain_5fattributes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2fproject_5fdomain_5fattributes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/admin/matchable_resource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fproject_5fdomain_5fattributes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fadmin_2fproject_5fdomain_5fattributes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2fproject_5fdomain_5fattributes_2eproto;
namespace flyteidl {
namespace admin {
class ProjectDomainAttributes;
struct ProjectDomainAttributesDefaultTypeInternal;
extern ProjectDomainAttributesDefaultTypeInternal _ProjectDomainAttributes_default_instance_;
class ProjectDomainAttributesDeleteRequest;
struct ProjectDomainAttributesDeleteRequestDefaultTypeInternal;
extern ProjectDomainAttributesDeleteRequestDefaultTypeInternal _ProjectDomainAttributesDeleteRequest_default_instance_;
class ProjectDomainAttributesDeleteResponse;
struct ProjectDomainAttributesDeleteResponseDefaultTypeInternal;
extern ProjectDomainAttributesDeleteResponseDefaultTypeInternal _ProjectDomainAttributesDeleteResponse_default_instance_;
class ProjectDomainAttributesGetRequest;
struct ProjectDomainAttributesGetRequestDefaultTypeInternal;
extern ProjectDomainAttributesGetRequestDefaultTypeInternal _ProjectDomainAttributesGetRequest_default_instance_;
class ProjectDomainAttributesGetResponse;
struct ProjectDomainAttributesGetResponseDefaultTypeInternal;
extern ProjectDomainAttributesGetResponseDefaultTypeInternal _ProjectDomainAttributesGetResponse_default_instance_;
class ProjectDomainAttributesUpdateRequest;
struct ProjectDomainAttributesUpdateRequestDefaultTypeInternal;
extern ProjectDomainAttributesUpdateRequestDefaultTypeInternal _ProjectDomainAttributesUpdateRequest_default_instance_;
class ProjectDomainAttributesUpdateResponse;
struct ProjectDomainAttributesUpdateResponseDefaultTypeInternal;
extern ProjectDomainAttributesUpdateResponseDefaultTypeInternal _ProjectDomainAttributesUpdateResponse_default_instance_;
}  // namespace admin
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::admin::ProjectDomainAttributes* Arena::CreateMaybeMessage<::flyteidl::admin::ProjectDomainAttributes>(Arena*);
template<> ::flyteidl::admin::ProjectDomainAttributesDeleteRequest* Arena::CreateMaybeMessage<::flyteidl::admin::ProjectDomainAttributesDeleteRequest>(Arena*);
template<> ::flyteidl::admin::ProjectDomainAttributesDeleteResponse* Arena::CreateMaybeMessage<::flyteidl::admin::ProjectDomainAttributesDeleteResponse>(Arena*);
template<> ::flyteidl::admin::ProjectDomainAttributesGetRequest* Arena::CreateMaybeMessage<::flyteidl::admin::ProjectDomainAttributesGetRequest>(Arena*);
template<> ::flyteidl::admin::ProjectDomainAttributesGetResponse* Arena::CreateMaybeMessage<::flyteidl::admin::ProjectDomainAttributesGetResponse>(Arena*);
template<> ::flyteidl::admin::ProjectDomainAttributesUpdateRequest* Arena::CreateMaybeMessage<::flyteidl::admin::ProjectDomainAttributesUpdateRequest>(Arena*);
template<> ::flyteidl::admin::ProjectDomainAttributesUpdateResponse* Arena::CreateMaybeMessage<::flyteidl::admin::ProjectDomainAttributesUpdateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace admin {

// ===================================================================

class ProjectDomainAttributes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ProjectDomainAttributes) */ {
 public:
  inline ProjectDomainAttributes() : ProjectDomainAttributes(nullptr) {}
  ~ProjectDomainAttributes() override;
  explicit constexpr ProjectDomainAttributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectDomainAttributes(const ProjectDomainAttributes& from);
  ProjectDomainAttributes(ProjectDomainAttributes&& from) noexcept
    : ProjectDomainAttributes() {
    *this = ::std::move(from);
  }

  inline ProjectDomainAttributes& operator=(const ProjectDomainAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectDomainAttributes& operator=(ProjectDomainAttributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectDomainAttributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectDomainAttributes* internal_default_instance() {
    return reinterpret_cast<const ProjectDomainAttributes*>(
               &_ProjectDomainAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProjectDomainAttributes& a, ProjectDomainAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectDomainAttributes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectDomainAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectDomainAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectDomainAttributes>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectDomainAttributes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.ProjectDomainAttributes";
  }
  protected:
  explicit ProjectDomainAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectFieldNumber = 1,
    kDomainFieldNumber = 2,
    kMatchingAttributesFieldNumber = 3,
  };
  // string project = 1 [json_name = "project"];
  void clear_project();
  const std::string& project() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project();
  PROTOBUF_NODISCARD std::string* release_project();
  void set_allocated_project(std::string* project);
  private:
  const std::string& _internal_project() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project(const std::string& value);
  std::string* _internal_mutable_project();
  public:

  // string domain = 2 [json_name = "domain"];
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // .flyteidl.admin.MatchingAttributes matching_attributes = 3 [json_name = "matchingAttributes"];
  bool has_matching_attributes() const;
  private:
  bool _internal_has_matching_attributes() const;
  public:
  void clear_matching_attributes();
  const ::flyteidl::admin::MatchingAttributes& matching_attributes() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::MatchingAttributes* release_matching_attributes();
  ::flyteidl::admin::MatchingAttributes* mutable_matching_attributes();
  void set_allocated_matching_attributes(::flyteidl::admin::MatchingAttributes* matching_attributes);
  private:
  const ::flyteidl::admin::MatchingAttributes& _internal_matching_attributes() const;
  ::flyteidl::admin::MatchingAttributes* _internal_mutable_matching_attributes();
  public:
  void unsafe_arena_set_allocated_matching_attributes(
      ::flyteidl::admin::MatchingAttributes* matching_attributes);
  ::flyteidl::admin::MatchingAttributes* unsafe_arena_release_matching_attributes();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ProjectDomainAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::flyteidl::admin::MatchingAttributes* matching_attributes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fproject_5fdomain_5fattributes_2eproto;
};
// -------------------------------------------------------------------

class ProjectDomainAttributesUpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ProjectDomainAttributesUpdateRequest) */ {
 public:
  inline ProjectDomainAttributesUpdateRequest() : ProjectDomainAttributesUpdateRequest(nullptr) {}
  ~ProjectDomainAttributesUpdateRequest() override;
  explicit constexpr ProjectDomainAttributesUpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectDomainAttributesUpdateRequest(const ProjectDomainAttributesUpdateRequest& from);
  ProjectDomainAttributesUpdateRequest(ProjectDomainAttributesUpdateRequest&& from) noexcept
    : ProjectDomainAttributesUpdateRequest() {
    *this = ::std::move(from);
  }

  inline ProjectDomainAttributesUpdateRequest& operator=(const ProjectDomainAttributesUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectDomainAttributesUpdateRequest& operator=(ProjectDomainAttributesUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectDomainAttributesUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectDomainAttributesUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const ProjectDomainAttributesUpdateRequest*>(
               &_ProjectDomainAttributesUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProjectDomainAttributesUpdateRequest& a, ProjectDomainAttributesUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectDomainAttributesUpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectDomainAttributesUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectDomainAttributesUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectDomainAttributesUpdateRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectDomainAttributesUpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.ProjectDomainAttributesUpdateRequest";
  }
  protected:
  explicit ProjectDomainAttributesUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 1,
  };
  // .flyteidl.admin.ProjectDomainAttributes attributes = 1 [json_name = "attributes"];
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::flyteidl::admin::ProjectDomainAttributes& attributes() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::ProjectDomainAttributes* release_attributes();
  ::flyteidl::admin::ProjectDomainAttributes* mutable_attributes();
  void set_allocated_attributes(::flyteidl::admin::ProjectDomainAttributes* attributes);
  private:
  const ::flyteidl::admin::ProjectDomainAttributes& _internal_attributes() const;
  ::flyteidl::admin::ProjectDomainAttributes* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::flyteidl::admin::ProjectDomainAttributes* attributes);
  ::flyteidl::admin::ProjectDomainAttributes* unsafe_arena_release_attributes();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ProjectDomainAttributesUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::admin::ProjectDomainAttributes* attributes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fproject_5fdomain_5fattributes_2eproto;
};
// -------------------------------------------------------------------

class ProjectDomainAttributesUpdateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:flyteidl.admin.ProjectDomainAttributesUpdateResponse) */ {
 public:
  inline ProjectDomainAttributesUpdateResponse() : ProjectDomainAttributesUpdateResponse(nullptr) {}
  explicit constexpr ProjectDomainAttributesUpdateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectDomainAttributesUpdateResponse(const ProjectDomainAttributesUpdateResponse& from);
  ProjectDomainAttributesUpdateResponse(ProjectDomainAttributesUpdateResponse&& from) noexcept
    : ProjectDomainAttributesUpdateResponse() {
    *this = ::std::move(from);
  }

  inline ProjectDomainAttributesUpdateResponse& operator=(const ProjectDomainAttributesUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectDomainAttributesUpdateResponse& operator=(ProjectDomainAttributesUpdateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectDomainAttributesUpdateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectDomainAttributesUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const ProjectDomainAttributesUpdateResponse*>(
               &_ProjectDomainAttributesUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProjectDomainAttributesUpdateResponse& a, ProjectDomainAttributesUpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectDomainAttributesUpdateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectDomainAttributesUpdateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectDomainAttributesUpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectDomainAttributesUpdateResponse>(arena);
  }

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.ProjectDomainAttributesUpdateResponse";
  }
  protected:
  explicit ProjectDomainAttributesUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ProjectDomainAttributesUpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fproject_5fdomain_5fattributes_2eproto;
};
// -------------------------------------------------------------------

class ProjectDomainAttributesGetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ProjectDomainAttributesGetRequest) */ {
 public:
  inline ProjectDomainAttributesGetRequest() : ProjectDomainAttributesGetRequest(nullptr) {}
  ~ProjectDomainAttributesGetRequest() override;
  explicit constexpr ProjectDomainAttributesGetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectDomainAttributesGetRequest(const ProjectDomainAttributesGetRequest& from);
  ProjectDomainAttributesGetRequest(ProjectDomainAttributesGetRequest&& from) noexcept
    : ProjectDomainAttributesGetRequest() {
    *this = ::std::move(from);
  }

  inline ProjectDomainAttributesGetRequest& operator=(const ProjectDomainAttributesGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectDomainAttributesGetRequest& operator=(ProjectDomainAttributesGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectDomainAttributesGetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectDomainAttributesGetRequest* internal_default_instance() {
    return reinterpret_cast<const ProjectDomainAttributesGetRequest*>(
               &_ProjectDomainAttributesGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProjectDomainAttributesGetRequest& a, ProjectDomainAttributesGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectDomainAttributesGetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectDomainAttributesGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectDomainAttributesGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectDomainAttributesGetRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectDomainAttributesGetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.ProjectDomainAttributesGetRequest";
  }
  protected:
  explicit ProjectDomainAttributesGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectFieldNumber = 1,
    kDomainFieldNumber = 2,
    kResourceTypeFieldNumber = 3,
  };
  // string project = 1 [json_name = "project"];
  void clear_project();
  const std::string& project() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project();
  PROTOBUF_NODISCARD std::string* release_project();
  void set_allocated_project(std::string* project);
  private:
  const std::string& _internal_project() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project(const std::string& value);
  std::string* _internal_mutable_project();
  public:

  // string domain = 2 [json_name = "domain"];
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // .flyteidl.admin.MatchableResource resource_type = 3 [json_name = "resourceType"];
  void clear_resource_type();
  ::flyteidl::admin::MatchableResource resource_type() const;
  void set_resource_type(::flyteidl::admin::MatchableResource value);
  private:
  ::flyteidl::admin::MatchableResource _internal_resource_type() const;
  void _internal_set_resource_type(::flyteidl::admin::MatchableResource value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ProjectDomainAttributesGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  int resource_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fproject_5fdomain_5fattributes_2eproto;
};
// -------------------------------------------------------------------

class ProjectDomainAttributesGetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ProjectDomainAttributesGetResponse) */ {
 public:
  inline ProjectDomainAttributesGetResponse() : ProjectDomainAttributesGetResponse(nullptr) {}
  ~ProjectDomainAttributesGetResponse() override;
  explicit constexpr ProjectDomainAttributesGetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectDomainAttributesGetResponse(const ProjectDomainAttributesGetResponse& from);
  ProjectDomainAttributesGetResponse(ProjectDomainAttributesGetResponse&& from) noexcept
    : ProjectDomainAttributesGetResponse() {
    *this = ::std::move(from);
  }

  inline ProjectDomainAttributesGetResponse& operator=(const ProjectDomainAttributesGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectDomainAttributesGetResponse& operator=(ProjectDomainAttributesGetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectDomainAttributesGetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectDomainAttributesGetResponse* internal_default_instance() {
    return reinterpret_cast<const ProjectDomainAttributesGetResponse*>(
               &_ProjectDomainAttributesGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ProjectDomainAttributesGetResponse& a, ProjectDomainAttributesGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectDomainAttributesGetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectDomainAttributesGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectDomainAttributesGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectDomainAttributesGetResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectDomainAttributesGetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.ProjectDomainAttributesGetResponse";
  }
  protected:
  explicit ProjectDomainAttributesGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 1,
  };
  // .flyteidl.admin.ProjectDomainAttributes attributes = 1 [json_name = "attributes"];
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::flyteidl::admin::ProjectDomainAttributes& attributes() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::ProjectDomainAttributes* release_attributes();
  ::flyteidl::admin::ProjectDomainAttributes* mutable_attributes();
  void set_allocated_attributes(::flyteidl::admin::ProjectDomainAttributes* attributes);
  private:
  const ::flyteidl::admin::ProjectDomainAttributes& _internal_attributes() const;
  ::flyteidl::admin::ProjectDomainAttributes* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::flyteidl::admin::ProjectDomainAttributes* attributes);
  ::flyteidl::admin::ProjectDomainAttributes* unsafe_arena_release_attributes();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ProjectDomainAttributesGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::admin::ProjectDomainAttributes* attributes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fproject_5fdomain_5fattributes_2eproto;
};
// -------------------------------------------------------------------

class ProjectDomainAttributesDeleteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ProjectDomainAttributesDeleteRequest) */ {
 public:
  inline ProjectDomainAttributesDeleteRequest() : ProjectDomainAttributesDeleteRequest(nullptr) {}
  ~ProjectDomainAttributesDeleteRequest() override;
  explicit constexpr ProjectDomainAttributesDeleteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectDomainAttributesDeleteRequest(const ProjectDomainAttributesDeleteRequest& from);
  ProjectDomainAttributesDeleteRequest(ProjectDomainAttributesDeleteRequest&& from) noexcept
    : ProjectDomainAttributesDeleteRequest() {
    *this = ::std::move(from);
  }

  inline ProjectDomainAttributesDeleteRequest& operator=(const ProjectDomainAttributesDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectDomainAttributesDeleteRequest& operator=(ProjectDomainAttributesDeleteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectDomainAttributesDeleteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectDomainAttributesDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const ProjectDomainAttributesDeleteRequest*>(
               &_ProjectDomainAttributesDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProjectDomainAttributesDeleteRequest& a, ProjectDomainAttributesDeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectDomainAttributesDeleteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectDomainAttributesDeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectDomainAttributesDeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectDomainAttributesDeleteRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectDomainAttributesDeleteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.ProjectDomainAttributesDeleteRequest";
  }
  protected:
  explicit ProjectDomainAttributesDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectFieldNumber = 1,
    kDomainFieldNumber = 2,
    kResourceTypeFieldNumber = 3,
  };
  // string project = 1 [json_name = "project"];
  void clear_project();
  const std::string& project() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project();
  PROTOBUF_NODISCARD std::string* release_project();
  void set_allocated_project(std::string* project);
  private:
  const std::string& _internal_project() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project(const std::string& value);
  std::string* _internal_mutable_project();
  public:

  // string domain = 2 [json_name = "domain"];
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // .flyteidl.admin.MatchableResource resource_type = 3 [json_name = "resourceType"];
  void clear_resource_type();
  ::flyteidl::admin::MatchableResource resource_type() const;
  void set_resource_type(::flyteidl::admin::MatchableResource value);
  private:
  ::flyteidl::admin::MatchableResource _internal_resource_type() const;
  void _internal_set_resource_type(::flyteidl::admin::MatchableResource value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ProjectDomainAttributesDeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  int resource_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fproject_5fdomain_5fattributes_2eproto;
};
// -------------------------------------------------------------------

class ProjectDomainAttributesDeleteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:flyteidl.admin.ProjectDomainAttributesDeleteResponse) */ {
 public:
  inline ProjectDomainAttributesDeleteResponse() : ProjectDomainAttributesDeleteResponse(nullptr) {}
  explicit constexpr ProjectDomainAttributesDeleteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectDomainAttributesDeleteResponse(const ProjectDomainAttributesDeleteResponse& from);
  ProjectDomainAttributesDeleteResponse(ProjectDomainAttributesDeleteResponse&& from) noexcept
    : ProjectDomainAttributesDeleteResponse() {
    *this = ::std::move(from);
  }

  inline ProjectDomainAttributesDeleteResponse& operator=(const ProjectDomainAttributesDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectDomainAttributesDeleteResponse& operator=(ProjectDomainAttributesDeleteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectDomainAttributesDeleteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectDomainAttributesDeleteResponse* internal_default_instance() {
    return reinterpret_cast<const ProjectDomainAttributesDeleteResponse*>(
               &_ProjectDomainAttributesDeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ProjectDomainAttributesDeleteResponse& a, ProjectDomainAttributesDeleteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectDomainAttributesDeleteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectDomainAttributesDeleteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectDomainAttributesDeleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectDomainAttributesDeleteResponse>(arena);
  }

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.ProjectDomainAttributesDeleteResponse";
  }
  protected:
  explicit ProjectDomainAttributesDeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ProjectDomainAttributesDeleteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fproject_5fdomain_5fattributes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProjectDomainAttributes

// string project = 1 [json_name = "project"];
inline void ProjectDomainAttributes::clear_project() {
  project_.ClearToEmpty();
}
inline const std::string& ProjectDomainAttributes::project() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ProjectDomainAttributes.project)
  return _internal_project();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectDomainAttributes::set_project(ArgT0&& arg0, ArgT... args) {
 
 project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.ProjectDomainAttributes.project)
}
inline std::string* ProjectDomainAttributes::mutable_project() {
  std::string* _s = _internal_mutable_project();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ProjectDomainAttributes.project)
  return _s;
}
inline const std::string& ProjectDomainAttributes::_internal_project() const {
  return project_.Get();
}
inline void ProjectDomainAttributes::_internal_set_project(const std::string& value) {
  
  project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProjectDomainAttributes::_internal_mutable_project() {
  
  return project_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProjectDomainAttributes::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ProjectDomainAttributes.project)
  return project_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProjectDomainAttributes::set_allocated_project(std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (project_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    project_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ProjectDomainAttributes.project)
}

// string domain = 2 [json_name = "domain"];
inline void ProjectDomainAttributes::clear_domain() {
  domain_.ClearToEmpty();
}
inline const std::string& ProjectDomainAttributes::domain() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ProjectDomainAttributes.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectDomainAttributes::set_domain(ArgT0&& arg0, ArgT... args) {
 
 domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.ProjectDomainAttributes.domain)
}
inline std::string* ProjectDomainAttributes::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ProjectDomainAttributes.domain)
  return _s;
}
inline const std::string& ProjectDomainAttributes::_internal_domain() const {
  return domain_.Get();
}
inline void ProjectDomainAttributes::_internal_set_domain(const std::string& value) {
  
  domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProjectDomainAttributes::_internal_mutable_domain() {
  
  return domain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProjectDomainAttributes::release_domain() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ProjectDomainAttributes.domain)
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProjectDomainAttributes::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (domain_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ProjectDomainAttributes.domain)
}

// .flyteidl.admin.MatchingAttributes matching_attributes = 3 [json_name = "matchingAttributes"];
inline bool ProjectDomainAttributes::_internal_has_matching_attributes() const {
  return this != internal_default_instance() && matching_attributes_ != nullptr;
}
inline bool ProjectDomainAttributes::has_matching_attributes() const {
  return _internal_has_matching_attributes();
}
inline const ::flyteidl::admin::MatchingAttributes& ProjectDomainAttributes::_internal_matching_attributes() const {
  const ::flyteidl::admin::MatchingAttributes* p = matching_attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::MatchingAttributes&>(
      ::flyteidl::admin::_MatchingAttributes_default_instance_);
}
inline const ::flyteidl::admin::MatchingAttributes& ProjectDomainAttributes::matching_attributes() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ProjectDomainAttributes.matching_attributes)
  return _internal_matching_attributes();
}
inline void ProjectDomainAttributes::unsafe_arena_set_allocated_matching_attributes(
    ::flyteidl::admin::MatchingAttributes* matching_attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(matching_attributes_);
  }
  matching_attributes_ = matching_attributes;
  if (matching_attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.ProjectDomainAttributes.matching_attributes)
}
inline ::flyteidl::admin::MatchingAttributes* ProjectDomainAttributes::release_matching_attributes() {
  
  ::flyteidl::admin::MatchingAttributes* temp = matching_attributes_;
  matching_attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::MatchingAttributes* ProjectDomainAttributes::unsafe_arena_release_matching_attributes() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ProjectDomainAttributes.matching_attributes)
  
  ::flyteidl::admin::MatchingAttributes* temp = matching_attributes_;
  matching_attributes_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::MatchingAttributes* ProjectDomainAttributes::_internal_mutable_matching_attributes() {
  
  if (matching_attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::MatchingAttributes>(GetArenaForAllocation());
    matching_attributes_ = p;
  }
  return matching_attributes_;
}
inline ::flyteidl::admin::MatchingAttributes* ProjectDomainAttributes::mutable_matching_attributes() {
  ::flyteidl::admin::MatchingAttributes* _msg = _internal_mutable_matching_attributes();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ProjectDomainAttributes.matching_attributes)
  return _msg;
}
inline void ProjectDomainAttributes::set_allocated_matching_attributes(::flyteidl::admin::MatchingAttributes* matching_attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(matching_attributes_);
  }
  if (matching_attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(matching_attributes));
    if (message_arena != submessage_arena) {
      matching_attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matching_attributes, submessage_arena);
    }
    
  } else {
    
  }
  matching_attributes_ = matching_attributes;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ProjectDomainAttributes.matching_attributes)
}

// -------------------------------------------------------------------

// ProjectDomainAttributesUpdateRequest

// .flyteidl.admin.ProjectDomainAttributes attributes = 1 [json_name = "attributes"];
inline bool ProjectDomainAttributesUpdateRequest::_internal_has_attributes() const {
  return this != internal_default_instance() && attributes_ != nullptr;
}
inline bool ProjectDomainAttributesUpdateRequest::has_attributes() const {
  return _internal_has_attributes();
}
inline void ProjectDomainAttributesUpdateRequest::clear_attributes() {
  if (GetArenaForAllocation() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
}
inline const ::flyteidl::admin::ProjectDomainAttributes& ProjectDomainAttributesUpdateRequest::_internal_attributes() const {
  const ::flyteidl::admin::ProjectDomainAttributes* p = attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::ProjectDomainAttributes&>(
      ::flyteidl::admin::_ProjectDomainAttributes_default_instance_);
}
inline const ::flyteidl::admin::ProjectDomainAttributes& ProjectDomainAttributesUpdateRequest::attributes() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ProjectDomainAttributesUpdateRequest.attributes)
  return _internal_attributes();
}
inline void ProjectDomainAttributesUpdateRequest::unsafe_arena_set_allocated_attributes(
    ::flyteidl::admin::ProjectDomainAttributes* attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes_);
  }
  attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.ProjectDomainAttributesUpdateRequest.attributes)
}
inline ::flyteidl::admin::ProjectDomainAttributes* ProjectDomainAttributesUpdateRequest::release_attributes() {
  
  ::flyteidl::admin::ProjectDomainAttributes* temp = attributes_;
  attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::ProjectDomainAttributes* ProjectDomainAttributesUpdateRequest::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ProjectDomainAttributesUpdateRequest.attributes)
  
  ::flyteidl::admin::ProjectDomainAttributes* temp = attributes_;
  attributes_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::ProjectDomainAttributes* ProjectDomainAttributesUpdateRequest::_internal_mutable_attributes() {
  
  if (attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::ProjectDomainAttributes>(GetArenaForAllocation());
    attributes_ = p;
  }
  return attributes_;
}
inline ::flyteidl::admin::ProjectDomainAttributes* ProjectDomainAttributesUpdateRequest::mutable_attributes() {
  ::flyteidl::admin::ProjectDomainAttributes* _msg = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ProjectDomainAttributesUpdateRequest.attributes)
  return _msg;
}
inline void ProjectDomainAttributesUpdateRequest::set_allocated_attributes(::flyteidl::admin::ProjectDomainAttributes* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attributes_;
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::ProjectDomainAttributes>::GetOwningArena(attributes);
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ProjectDomainAttributesUpdateRequest.attributes)
}

// -------------------------------------------------------------------

// ProjectDomainAttributesUpdateResponse

// -------------------------------------------------------------------

// ProjectDomainAttributesGetRequest

// string project = 1 [json_name = "project"];
inline void ProjectDomainAttributesGetRequest::clear_project() {
  project_.ClearToEmpty();
}
inline const std::string& ProjectDomainAttributesGetRequest::project() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ProjectDomainAttributesGetRequest.project)
  return _internal_project();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectDomainAttributesGetRequest::set_project(ArgT0&& arg0, ArgT... args) {
 
 project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.ProjectDomainAttributesGetRequest.project)
}
inline std::string* ProjectDomainAttributesGetRequest::mutable_project() {
  std::string* _s = _internal_mutable_project();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ProjectDomainAttributesGetRequest.project)
  return _s;
}
inline const std::string& ProjectDomainAttributesGetRequest::_internal_project() const {
  return project_.Get();
}
inline void ProjectDomainAttributesGetRequest::_internal_set_project(const std::string& value) {
  
  project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProjectDomainAttributesGetRequest::_internal_mutable_project() {
  
  return project_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProjectDomainAttributesGetRequest::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ProjectDomainAttributesGetRequest.project)
  return project_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProjectDomainAttributesGetRequest::set_allocated_project(std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (project_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    project_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ProjectDomainAttributesGetRequest.project)
}

// string domain = 2 [json_name = "domain"];
inline void ProjectDomainAttributesGetRequest::clear_domain() {
  domain_.ClearToEmpty();
}
inline const std::string& ProjectDomainAttributesGetRequest::domain() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ProjectDomainAttributesGetRequest.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectDomainAttributesGetRequest::set_domain(ArgT0&& arg0, ArgT... args) {
 
 domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.ProjectDomainAttributesGetRequest.domain)
}
inline std::string* ProjectDomainAttributesGetRequest::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ProjectDomainAttributesGetRequest.domain)
  return _s;
}
inline const std::string& ProjectDomainAttributesGetRequest::_internal_domain() const {
  return domain_.Get();
}
inline void ProjectDomainAttributesGetRequest::_internal_set_domain(const std::string& value) {
  
  domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProjectDomainAttributesGetRequest::_internal_mutable_domain() {
  
  return domain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProjectDomainAttributesGetRequest::release_domain() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ProjectDomainAttributesGetRequest.domain)
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProjectDomainAttributesGetRequest::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (domain_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ProjectDomainAttributesGetRequest.domain)
}

// .flyteidl.admin.MatchableResource resource_type = 3 [json_name = "resourceType"];
inline void ProjectDomainAttributesGetRequest::clear_resource_type() {
  resource_type_ = 0;
}
inline ::flyteidl::admin::MatchableResource ProjectDomainAttributesGetRequest::_internal_resource_type() const {
  return static_cast< ::flyteidl::admin::MatchableResource >(resource_type_);
}
inline ::flyteidl::admin::MatchableResource ProjectDomainAttributesGetRequest::resource_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ProjectDomainAttributesGetRequest.resource_type)
  return _internal_resource_type();
}
inline void ProjectDomainAttributesGetRequest::_internal_set_resource_type(::flyteidl::admin::MatchableResource value) {
  
  resource_type_ = value;
}
inline void ProjectDomainAttributesGetRequest::set_resource_type(::flyteidl::admin::MatchableResource value) {
  _internal_set_resource_type(value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.ProjectDomainAttributesGetRequest.resource_type)
}

// -------------------------------------------------------------------

// ProjectDomainAttributesGetResponse

// .flyteidl.admin.ProjectDomainAttributes attributes = 1 [json_name = "attributes"];
inline bool ProjectDomainAttributesGetResponse::_internal_has_attributes() const {
  return this != internal_default_instance() && attributes_ != nullptr;
}
inline bool ProjectDomainAttributesGetResponse::has_attributes() const {
  return _internal_has_attributes();
}
inline void ProjectDomainAttributesGetResponse::clear_attributes() {
  if (GetArenaForAllocation() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
}
inline const ::flyteidl::admin::ProjectDomainAttributes& ProjectDomainAttributesGetResponse::_internal_attributes() const {
  const ::flyteidl::admin::ProjectDomainAttributes* p = attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::ProjectDomainAttributes&>(
      ::flyteidl::admin::_ProjectDomainAttributes_default_instance_);
}
inline const ::flyteidl::admin::ProjectDomainAttributes& ProjectDomainAttributesGetResponse::attributes() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ProjectDomainAttributesGetResponse.attributes)
  return _internal_attributes();
}
inline void ProjectDomainAttributesGetResponse::unsafe_arena_set_allocated_attributes(
    ::flyteidl::admin::ProjectDomainAttributes* attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes_);
  }
  attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.ProjectDomainAttributesGetResponse.attributes)
}
inline ::flyteidl::admin::ProjectDomainAttributes* ProjectDomainAttributesGetResponse::release_attributes() {
  
  ::flyteidl::admin::ProjectDomainAttributes* temp = attributes_;
  attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::ProjectDomainAttributes* ProjectDomainAttributesGetResponse::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ProjectDomainAttributesGetResponse.attributes)
  
  ::flyteidl::admin::ProjectDomainAttributes* temp = attributes_;
  attributes_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::ProjectDomainAttributes* ProjectDomainAttributesGetResponse::_internal_mutable_attributes() {
  
  if (attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::ProjectDomainAttributes>(GetArenaForAllocation());
    attributes_ = p;
  }
  return attributes_;
}
inline ::flyteidl::admin::ProjectDomainAttributes* ProjectDomainAttributesGetResponse::mutable_attributes() {
  ::flyteidl::admin::ProjectDomainAttributes* _msg = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ProjectDomainAttributesGetResponse.attributes)
  return _msg;
}
inline void ProjectDomainAttributesGetResponse::set_allocated_attributes(::flyteidl::admin::ProjectDomainAttributes* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attributes_;
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::ProjectDomainAttributes>::GetOwningArena(attributes);
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ProjectDomainAttributesGetResponse.attributes)
}

// -------------------------------------------------------------------

// ProjectDomainAttributesDeleteRequest

// string project = 1 [json_name = "project"];
inline void ProjectDomainAttributesDeleteRequest::clear_project() {
  project_.ClearToEmpty();
}
inline const std::string& ProjectDomainAttributesDeleteRequest::project() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ProjectDomainAttributesDeleteRequest.project)
  return _internal_project();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectDomainAttributesDeleteRequest::set_project(ArgT0&& arg0, ArgT... args) {
 
 project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.ProjectDomainAttributesDeleteRequest.project)
}
inline std::string* ProjectDomainAttributesDeleteRequest::mutable_project() {
  std::string* _s = _internal_mutable_project();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ProjectDomainAttributesDeleteRequest.project)
  return _s;
}
inline const std::string& ProjectDomainAttributesDeleteRequest::_internal_project() const {
  return project_.Get();
}
inline void ProjectDomainAttributesDeleteRequest::_internal_set_project(const std::string& value) {
  
  project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProjectDomainAttributesDeleteRequest::_internal_mutable_project() {
  
  return project_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProjectDomainAttributesDeleteRequest::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ProjectDomainAttributesDeleteRequest.project)
  return project_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProjectDomainAttributesDeleteRequest::set_allocated_project(std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (project_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    project_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ProjectDomainAttributesDeleteRequest.project)
}

// string domain = 2 [json_name = "domain"];
inline void ProjectDomainAttributesDeleteRequest::clear_domain() {
  domain_.ClearToEmpty();
}
inline const std::string& ProjectDomainAttributesDeleteRequest::domain() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ProjectDomainAttributesDeleteRequest.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectDomainAttributesDeleteRequest::set_domain(ArgT0&& arg0, ArgT... args) {
 
 domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.ProjectDomainAttributesDeleteRequest.domain)
}
inline std::string* ProjectDomainAttributesDeleteRequest::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ProjectDomainAttributesDeleteRequest.domain)
  return _s;
}
inline const std::string& ProjectDomainAttributesDeleteRequest::_internal_domain() const {
  return domain_.Get();
}
inline void ProjectDomainAttributesDeleteRequest::_internal_set_domain(const std::string& value) {
  
  domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProjectDomainAttributesDeleteRequest::_internal_mutable_domain() {
  
  return domain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProjectDomainAttributesDeleteRequest::release_domain() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ProjectDomainAttributesDeleteRequest.domain)
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProjectDomainAttributesDeleteRequest::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (domain_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ProjectDomainAttributesDeleteRequest.domain)
}

// .flyteidl.admin.MatchableResource resource_type = 3 [json_name = "resourceType"];
inline void ProjectDomainAttributesDeleteRequest::clear_resource_type() {
  resource_type_ = 0;
}
inline ::flyteidl::admin::MatchableResource ProjectDomainAttributesDeleteRequest::_internal_resource_type() const {
  return static_cast< ::flyteidl::admin::MatchableResource >(resource_type_);
}
inline ::flyteidl::admin::MatchableResource ProjectDomainAttributesDeleteRequest::resource_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ProjectDomainAttributesDeleteRequest.resource_type)
  return _internal_resource_type();
}
inline void ProjectDomainAttributesDeleteRequest::_internal_set_resource_type(::flyteidl::admin::MatchableResource value) {
  
  resource_type_ = value;
}
inline void ProjectDomainAttributesDeleteRequest::set_resource_type(::flyteidl::admin::MatchableResource value) {
  _internal_set_resource_type(value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.ProjectDomainAttributesDeleteRequest.resource_type)
}

// -------------------------------------------------------------------

// ProjectDomainAttributesDeleteResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2fproject_5fdomain_5fattributes_2eproto
