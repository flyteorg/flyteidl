// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/schedule.proto

package com.flyteidl.admin;

/**
 * <pre>
 * Options for schedules to run according to a cron expression.
 * </pre>
 *
 * Protobuf type {@code flyteidl.admin.CronSchedule}
 */
public final class CronSchedule extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:flyteidl.admin.CronSchedule)
    CronScheduleOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CronSchedule.newBuilder() to construct.
  private CronSchedule(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CronSchedule() {
    schedule_ = "";
    offset_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new CronSchedule();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private CronSchedule(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            schedule_ = s;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            offset_ = s;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.flyteidl.admin.ScheduleProto.internal_static_flyteidl_admin_CronSchedule_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.flyteidl.admin.ScheduleProto.internal_static_flyteidl_admin_CronSchedule_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.flyteidl.admin.CronSchedule.class, com.flyteidl.admin.CronSchedule.Builder.class);
  }

  public static final int SCHEDULE_FIELD_NUMBER = 1;
  private volatile java.lang.Object schedule_;
  /**
   * <pre>
   * Standard/default cron implementation as described by https://en.wikipedia.org/wiki/Cron#CRON_expression;
   * Also supports nonstandard predefined scheduling definitions
   * as described by https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions
   * except &#64;reboot
   * </pre>
   *
   * <code>string schedule = 1 [json_name = "schedule"];</code>
   * @return The schedule.
   */
  @java.lang.Override
  public java.lang.String getSchedule() {
    java.lang.Object ref = schedule_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      schedule_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Standard/default cron implementation as described by https://en.wikipedia.org/wiki/Cron#CRON_expression;
   * Also supports nonstandard predefined scheduling definitions
   * as described by https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions
   * except &#64;reboot
   * </pre>
   *
   * <code>string schedule = 1 [json_name = "schedule"];</code>
   * @return The bytes for schedule.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getScheduleBytes() {
    java.lang.Object ref = schedule_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      schedule_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int OFFSET_FIELD_NUMBER = 2;
  private volatile java.lang.Object offset_;
  /**
   * <pre>
   * ISO 8601 duration as described by https://en.wikipedia.org/wiki/ISO_8601#Durations
   * </pre>
   *
   * <code>string offset = 2 [json_name = "offset"];</code>
   * @return The offset.
   */
  @java.lang.Override
  public java.lang.String getOffset() {
    java.lang.Object ref = offset_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      offset_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * ISO 8601 duration as described by https://en.wikipedia.org/wiki/ISO_8601#Durations
   * </pre>
   *
   * <code>string offset = 2 [json_name = "offset"];</code>
   * @return The bytes for offset.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getOffsetBytes() {
    java.lang.Object ref = offset_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      offset_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(schedule_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, schedule_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(offset_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, offset_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(schedule_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, schedule_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(offset_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, offset_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.flyteidl.admin.CronSchedule)) {
      return super.equals(obj);
    }
    com.flyteidl.admin.CronSchedule other = (com.flyteidl.admin.CronSchedule) obj;

    if (!getSchedule()
        .equals(other.getSchedule())) return false;
    if (!getOffset()
        .equals(other.getOffset())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + SCHEDULE_FIELD_NUMBER;
    hash = (53 * hash) + getSchedule().hashCode();
    hash = (37 * hash) + OFFSET_FIELD_NUMBER;
    hash = (53 * hash) + getOffset().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.flyteidl.admin.CronSchedule parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.admin.CronSchedule parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.admin.CronSchedule parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.admin.CronSchedule parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.admin.CronSchedule parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.admin.CronSchedule parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.admin.CronSchedule parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.flyteidl.admin.CronSchedule parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.flyteidl.admin.CronSchedule parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.flyteidl.admin.CronSchedule parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.flyteidl.admin.CronSchedule parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.flyteidl.admin.CronSchedule parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.flyteidl.admin.CronSchedule prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Options for schedules to run according to a cron expression.
   * </pre>
   *
   * Protobuf type {@code flyteidl.admin.CronSchedule}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:flyteidl.admin.CronSchedule)
      com.flyteidl.admin.CronScheduleOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.flyteidl.admin.ScheduleProto.internal_static_flyteidl_admin_CronSchedule_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.flyteidl.admin.ScheduleProto.internal_static_flyteidl_admin_CronSchedule_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.flyteidl.admin.CronSchedule.class, com.flyteidl.admin.CronSchedule.Builder.class);
    }

    // Construct using com.flyteidl.admin.CronSchedule.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      schedule_ = "";

      offset_ = "";

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.flyteidl.admin.ScheduleProto.internal_static_flyteidl_admin_CronSchedule_descriptor;
    }

    @java.lang.Override
    public com.flyteidl.admin.CronSchedule getDefaultInstanceForType() {
      return com.flyteidl.admin.CronSchedule.getDefaultInstance();
    }

    @java.lang.Override
    public com.flyteidl.admin.CronSchedule build() {
      com.flyteidl.admin.CronSchedule result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.flyteidl.admin.CronSchedule buildPartial() {
      com.flyteidl.admin.CronSchedule result = new com.flyteidl.admin.CronSchedule(this);
      result.schedule_ = schedule_;
      result.offset_ = offset_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.flyteidl.admin.CronSchedule) {
        return mergeFrom((com.flyteidl.admin.CronSchedule)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.flyteidl.admin.CronSchedule other) {
      if (other == com.flyteidl.admin.CronSchedule.getDefaultInstance()) return this;
      if (!other.getSchedule().isEmpty()) {
        schedule_ = other.schedule_;
        onChanged();
      }
      if (!other.getOffset().isEmpty()) {
        offset_ = other.offset_;
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.flyteidl.admin.CronSchedule parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.flyteidl.admin.CronSchedule) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private java.lang.Object schedule_ = "";
    /**
     * <pre>
     * Standard/default cron implementation as described by https://en.wikipedia.org/wiki/Cron#CRON_expression;
     * Also supports nonstandard predefined scheduling definitions
     * as described by https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions
     * except &#64;reboot
     * </pre>
     *
     * <code>string schedule = 1 [json_name = "schedule"];</code>
     * @return The schedule.
     */
    public java.lang.String getSchedule() {
      java.lang.Object ref = schedule_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        schedule_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Standard/default cron implementation as described by https://en.wikipedia.org/wiki/Cron#CRON_expression;
     * Also supports nonstandard predefined scheduling definitions
     * as described by https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions
     * except &#64;reboot
     * </pre>
     *
     * <code>string schedule = 1 [json_name = "schedule"];</code>
     * @return The bytes for schedule.
     */
    public com.google.protobuf.ByteString
        getScheduleBytes() {
      java.lang.Object ref = schedule_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        schedule_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Standard/default cron implementation as described by https://en.wikipedia.org/wiki/Cron#CRON_expression;
     * Also supports nonstandard predefined scheduling definitions
     * as described by https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions
     * except &#64;reboot
     * </pre>
     *
     * <code>string schedule = 1 [json_name = "schedule"];</code>
     * @param value The schedule to set.
     * @return This builder for chaining.
     */
    public Builder setSchedule(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      schedule_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Standard/default cron implementation as described by https://en.wikipedia.org/wiki/Cron#CRON_expression;
     * Also supports nonstandard predefined scheduling definitions
     * as described by https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions
     * except &#64;reboot
     * </pre>
     *
     * <code>string schedule = 1 [json_name = "schedule"];</code>
     * @return This builder for chaining.
     */
    public Builder clearSchedule() {
      
      schedule_ = getDefaultInstance().getSchedule();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Standard/default cron implementation as described by https://en.wikipedia.org/wiki/Cron#CRON_expression;
     * Also supports nonstandard predefined scheduling definitions
     * as described by https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions
     * except &#64;reboot
     * </pre>
     *
     * <code>string schedule = 1 [json_name = "schedule"];</code>
     * @param value The bytes for schedule to set.
     * @return This builder for chaining.
     */
    public Builder setScheduleBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      schedule_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object offset_ = "";
    /**
     * <pre>
     * ISO 8601 duration as described by https://en.wikipedia.org/wiki/ISO_8601#Durations
     * </pre>
     *
     * <code>string offset = 2 [json_name = "offset"];</code>
     * @return The offset.
     */
    public java.lang.String getOffset() {
      java.lang.Object ref = offset_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        offset_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * ISO 8601 duration as described by https://en.wikipedia.org/wiki/ISO_8601#Durations
     * </pre>
     *
     * <code>string offset = 2 [json_name = "offset"];</code>
     * @return The bytes for offset.
     */
    public com.google.protobuf.ByteString
        getOffsetBytes() {
      java.lang.Object ref = offset_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        offset_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * ISO 8601 duration as described by https://en.wikipedia.org/wiki/ISO_8601#Durations
     * </pre>
     *
     * <code>string offset = 2 [json_name = "offset"];</code>
     * @param value The offset to set.
     * @return This builder for chaining.
     */
    public Builder setOffset(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      offset_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * ISO 8601 duration as described by https://en.wikipedia.org/wiki/ISO_8601#Durations
     * </pre>
     *
     * <code>string offset = 2 [json_name = "offset"];</code>
     * @return This builder for chaining.
     */
    public Builder clearOffset() {
      
      offset_ = getDefaultInstance().getOffset();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * ISO 8601 duration as described by https://en.wikipedia.org/wiki/ISO_8601#Durations
     * </pre>
     *
     * <code>string offset = 2 [json_name = "offset"];</code>
     * @param value The bytes for offset to set.
     * @return This builder for chaining.
     */
    public Builder setOffsetBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      offset_ = value;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:flyteidl.admin.CronSchedule)
  }

  // @@protoc_insertion_point(class_scope:flyteidl.admin.CronSchedule)
  private static final com.flyteidl.admin.CronSchedule DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.flyteidl.admin.CronSchedule();
  }

  public static com.flyteidl.admin.CronSchedule getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CronSchedule>
      PARSER = new com.google.protobuf.AbstractParser<CronSchedule>() {
    @java.lang.Override
    public CronSchedule parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new CronSchedule(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CronSchedule> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CronSchedule> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.flyteidl.admin.CronSchedule getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

