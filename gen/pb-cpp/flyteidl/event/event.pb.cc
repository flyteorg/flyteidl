// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/event/event.proto

#include "flyteidl/event/event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace event {
constexpr WorkflowExecutionEvent::WorkflowExecutionEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : producer_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , execution_id_(nullptr)
  , occurred_at_(nullptr)
  , phase_(0)

  , _oneof_case_{}{}
struct WorkflowExecutionEventDefaultTypeInternal {
  constexpr WorkflowExecutionEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowExecutionEventDefaultTypeInternal() {}
  union {
    WorkflowExecutionEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowExecutionEventDefaultTypeInternal _WorkflowExecutionEvent_default_instance_;
constexpr NodeExecutionEvent::NodeExecutionEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : producer_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , input_uri_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , retry_group_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , spec_node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr)
  , occurred_at_(nullptr)
  , parent_task_metadata_(nullptr)
  , parent_node_metadata_(nullptr)
  , phase_(0)

  , event_version_(0)
  , is_parent_(false)
  , is_dynamic_(false)
  , _oneof_case_{}{}
struct NodeExecutionEventDefaultTypeInternal {
  constexpr NodeExecutionEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeExecutionEventDefaultTypeInternal() {}
  union {
    NodeExecutionEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeExecutionEventDefaultTypeInternal _NodeExecutionEvent_default_instance_;
constexpr WorkflowNodeMetadata::WorkflowNodeMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : execution_id_(nullptr){}
struct WorkflowNodeMetadataDefaultTypeInternal {
  constexpr WorkflowNodeMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowNodeMetadataDefaultTypeInternal() {}
  union {
    WorkflowNodeMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowNodeMetadataDefaultTypeInternal _WorkflowNodeMetadata_default_instance_;
constexpr TaskNodeMetadata::TaskNodeMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : catalog_key_(nullptr)
  , dynamic_workflow_(nullptr)
  , cache_status_(0)

  , reservation_status_(0)
{}
struct TaskNodeMetadataDefaultTypeInternal {
  constexpr TaskNodeMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskNodeMetadataDefaultTypeInternal() {}
  union {
    TaskNodeMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskNodeMetadataDefaultTypeInternal _TaskNodeMetadata_default_instance_;
constexpr DynamicWorkflowNodeMetadata::DynamicWorkflowNodeMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , compiled_workflow_(nullptr){}
struct DynamicWorkflowNodeMetadataDefaultTypeInternal {
  constexpr DynamicWorkflowNodeMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DynamicWorkflowNodeMetadataDefaultTypeInternal() {}
  union {
    DynamicWorkflowNodeMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DynamicWorkflowNodeMetadataDefaultTypeInternal _DynamicWorkflowNodeMetadata_default_instance_;
constexpr ParentTaskExecutionMetadata::ParentTaskExecutionMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr){}
struct ParentTaskExecutionMetadataDefaultTypeInternal {
  constexpr ParentTaskExecutionMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParentTaskExecutionMetadataDefaultTypeInternal() {}
  union {
    ParentTaskExecutionMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParentTaskExecutionMetadataDefaultTypeInternal _ParentTaskExecutionMetadata_default_instance_;
constexpr ParentNodeExecutionMetadata::ParentNodeExecutionMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ParentNodeExecutionMetadataDefaultTypeInternal {
  constexpr ParentNodeExecutionMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParentNodeExecutionMetadataDefaultTypeInternal() {}
  union {
    ParentNodeExecutionMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParentNodeExecutionMetadataDefaultTypeInternal _ParentNodeExecutionMetadata_default_instance_;
constexpr TaskExecutionEvent::TaskExecutionEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logs_()
  , producer_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , input_uri_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , task_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , task_id_(nullptr)
  , parent_node_execution_id_(nullptr)
  , occurred_at_(nullptr)
  , custom_info_(nullptr)
  , metadata_(nullptr)
  , retry_attempt_(0u)
  , phase_(0)

  , phase_version_(0u)
  , event_version_(0)
  , _oneof_case_{}{}
struct TaskExecutionEventDefaultTypeInternal {
  constexpr TaskExecutionEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskExecutionEventDefaultTypeInternal() {}
  union {
    TaskExecutionEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskExecutionEventDefaultTypeInternal _TaskExecutionEvent_default_instance_;
constexpr ExternalResourceInfo::ExternalResourceInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logs_()
  , external_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , index_(0u)
  , retry_attempt_(0u)
  , phase_(0)

  , cache_status_(0)
{}
struct ExternalResourceInfoDefaultTypeInternal {
  constexpr ExternalResourceInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExternalResourceInfoDefaultTypeInternal() {}
  union {
    ExternalResourceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExternalResourceInfoDefaultTypeInternal _ExternalResourceInfo_default_instance_;
constexpr ResourcePoolInfo::ResourcePoolInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : allocation_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , namespace__(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ResourcePoolInfoDefaultTypeInternal {
  constexpr ResourcePoolInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResourcePoolInfoDefaultTypeInternal() {}
  union {
    ResourcePoolInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResourcePoolInfoDefaultTypeInternal _ResourcePoolInfo_default_instance_;
constexpr TaskExecutionMetadata::TaskExecutionMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : external_resources_()
  , resource_pool_info_()
  , generated_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , plugin_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , instance_class_(0)
{}
struct TaskExecutionMetadataDefaultTypeInternal {
  constexpr TaskExecutionMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskExecutionMetadataDefaultTypeInternal() {}
  union {
    TaskExecutionMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskExecutionMetadataDefaultTypeInternal _TaskExecutionMetadata_default_instance_;
}  // namespace event
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fevent_2fevent_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fevent_2fevent_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fevent_2fevent_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fevent_2fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::WorkflowExecutionEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::WorkflowExecutionEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::WorkflowExecutionEvent, execution_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::WorkflowExecutionEvent, producer_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::WorkflowExecutionEvent, phase_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::WorkflowExecutionEvent, occurred_at_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::WorkflowExecutionEvent, output_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::NodeExecutionEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::NodeExecutionEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::NodeExecutionEvent, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::NodeExecutionEvent, producer_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::NodeExecutionEvent, phase_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::NodeExecutionEvent, occurred_at_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::NodeExecutionEvent, input_uri_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::NodeExecutionEvent, parent_task_metadata_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::NodeExecutionEvent, parent_node_metadata_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::NodeExecutionEvent, retry_group_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::NodeExecutionEvent, spec_node_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::NodeExecutionEvent, node_name_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::NodeExecutionEvent, event_version_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::NodeExecutionEvent, is_parent_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::NodeExecutionEvent, is_dynamic_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::NodeExecutionEvent, output_result_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::NodeExecutionEvent, target_metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::WorkflowNodeMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::WorkflowNodeMetadata, execution_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::TaskNodeMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::TaskNodeMetadata, cache_status_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::TaskNodeMetadata, catalog_key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::TaskNodeMetadata, reservation_status_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::TaskNodeMetadata, dynamic_workflow_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::DynamicWorkflowNodeMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::DynamicWorkflowNodeMetadata, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::DynamicWorkflowNodeMetadata, compiled_workflow_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::ParentTaskExecutionMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::ParentTaskExecutionMetadata, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::ParentNodeExecutionMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::ParentNodeExecutionMetadata, node_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, task_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, parent_node_execution_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, retry_attempt_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, phase_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, producer_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, logs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, occurred_at_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, input_uri_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, custom_info_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, phase_version_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, reason_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, task_type_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, metadata_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, event_version_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::TaskExecutionEvent, output_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::ExternalResourceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::ExternalResourceInfo, external_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::ExternalResourceInfo, index_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::ExternalResourceInfo, retry_attempt_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::ExternalResourceInfo, phase_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::ExternalResourceInfo, cache_status_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::ExternalResourceInfo, logs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::ResourcePoolInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::ResourcePoolInfo, allocation_token_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::ResourcePoolInfo, namespace__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::TaskExecutionMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::TaskExecutionMetadata, generated_name_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::TaskExecutionMetadata, external_resources_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::TaskExecutionMetadata, resource_pool_info_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::TaskExecutionMetadata, plugin_identifier_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::TaskExecutionMetadata, instance_class_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::event::WorkflowExecutionEvent)},
  { 14, -1, -1, sizeof(::flyteidl::event::NodeExecutionEvent)},
  { 40, -1, -1, sizeof(::flyteidl::event::WorkflowNodeMetadata)},
  { 47, -1, -1, sizeof(::flyteidl::event::TaskNodeMetadata)},
  { 57, -1, -1, sizeof(::flyteidl::event::DynamicWorkflowNodeMetadata)},
  { 65, -1, -1, sizeof(::flyteidl::event::ParentTaskExecutionMetadata)},
  { 72, -1, -1, sizeof(::flyteidl::event::ParentNodeExecutionMetadata)},
  { 79, -1, -1, sizeof(::flyteidl::event::TaskExecutionEvent)},
  { 103, -1, -1, sizeof(::flyteidl::event::ExternalResourceInfo)},
  { 115, -1, -1, sizeof(::flyteidl::event::ResourcePoolInfo)},
  { 123, -1, -1, sizeof(::flyteidl::event::TaskExecutionMetadata)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::event::_WorkflowExecutionEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::event::_NodeExecutionEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::event::_WorkflowNodeMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::event::_TaskNodeMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::event::_DynamicWorkflowNodeMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::event::_ParentTaskExecutionMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::event::_ParentNodeExecutionMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::event::_TaskExecutionEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::event::_ExternalResourceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::event::_ResourcePoolInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::event::_TaskExecutionMetadata_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fevent_2fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032flyteidl/event/event.proto\022\016flyteidl.e"
  "vent\032\034flyteidl/core/literals.proto\032\034flyt"
  "eidl/core/compiler.proto\032\035flyteidl/core/"
  "execution.proto\032\036flyteidl/core/identifie"
  "r.proto\032\033flyteidl/core/catalog.proto\032\037go"
  "ogle/protobuf/timestamp.proto\032\034google/pr"
  "otobuf/struct.proto\"\252\003\n\026WorkflowExecutio"
  "nEvent\022M\n\014execution_id\030\001 \001(\0132*.flyteidl."
  "core.WorkflowExecutionIdentifierR\013execut"
  "ionId\022\037\n\013producer_id\030\002 \001(\tR\nproducerId\022<"
  "\n\005phase\030\003 \001(\0162&.flyteidl.core.WorkflowEx"
  "ecution.PhaseR\005phase\022;\n\013occurred_at\030\004 \001("
  "\0132\032.google.protobuf.TimestampR\noccurredA"
  "t\022\037\n\noutput_uri\030\005 \001(\tH\000R\toutputUri\0225\n\005er"
  "ror\030\006 \001(\0132\035.flyteidl.core.ExecutionError"
  "H\000R\005error\022<\n\013output_data\030\007 \001(\0132\031.flyteid"
  "l.core.LiteralMapH\000R\noutputDataB\017\n\routpu"
  "t_result\"\352\007\n\022NodeExecutionEvent\0226\n\002id\030\001 "
  "\001(\0132&.flyteidl.core.NodeExecutionIdentif"
  "ierR\002id\022\037\n\013producer_id\030\002 \001(\tR\nproducerId"
  "\0228\n\005phase\030\003 \001(\0162\".flyteidl.core.NodeExec"
  "ution.PhaseR\005phase\022;\n\013occurred_at\030\004 \001(\0132"
  "\032.google.protobuf.TimestampR\noccurredAt\022"
  "\033\n\tinput_uri\030\005 \001(\tR\010inputUri\022\037\n\noutput_u"
  "ri\030\006 \001(\tH\000R\toutputUri\0225\n\005error\030\007 \001(\0132\035.f"
  "lyteidl.core.ExecutionErrorH\000R\005error\022<\n\013"
  "output_data\030\017 \001(\0132\031.flyteidl.core.Litera"
  "lMapH\000R\noutputData\022\\\n\026workflow_node_meta"
  "data\030\010 \001(\0132$.flyteidl.event.WorkflowNode"
  "MetadataH\001R\024workflowNodeMetadata\022P\n\022task"
  "_node_metadata\030\016 \001(\0132 .flyteidl.event.Ta"
  "skNodeMetadataH\001R\020taskNodeMetadata\022]\n\024pa"
  "rent_task_metadata\030\t \001(\0132+.flyteidl.even"
  "t.ParentTaskExecutionMetadataR\022parentTas"
  "kMetadata\022]\n\024parent_node_metadata\030\n \001(\0132"
  "+.flyteidl.event.ParentNodeExecutionMeta"
  "dataR\022parentNodeMetadata\022\037\n\013retry_group\030"
  "\013 \001(\tR\nretryGroup\022 \n\014spec_node_id\030\014 \001(\tR"
  "\nspecNodeId\022\033\n\tnode_name\030\r \001(\tR\010nodeName"
  "\022#\n\revent_version\030\020 \001(\005R\014eventVersion\022\033\n"
  "\tis_parent\030\021 \001(\010R\010isParent\022\035\n\nis_dynamic"
  "\030\022 \001(\010R\tisDynamicB\017\n\routput_resultB\021\n\017ta"
  "rget_metadata\"e\n\024WorkflowNodeMetadata\022M\n"
  "\014execution_id\030\001 \001(\0132*.flyteidl.core.Work"
  "flowExecutionIdentifierR\013executionId\"\312\002\n"
  "\020TaskNodeMetadata\022D\n\014cache_status\030\001 \001(\0162"
  "!.flyteidl.core.CatalogCacheStatusR\013cach"
  "eStatus\022\?\n\013catalog_key\030\002 \001(\0132\036.flyteidl."
  "core.CatalogMetadataR\ncatalogKey\022W\n\022rese"
  "rvation_status\030\003 \001(\0162(.flyteidl.core.Cat"
  "alogReservation.StatusR\021reservationStatu"
  "s\022V\n\020dynamic_workflow\030\020 \001(\0132+.flyteidl.e"
  "vent.DynamicWorkflowNodeMetadataR\017dynami"
  "cWorkflow\"\235\001\n\033DynamicWorkflowNodeMetadat"
  "a\022)\n\002id\030\001 \001(\0132\031.flyteidl.core.Identifier"
  "R\002id\022S\n\021compiled_workflow\030\002 \001(\0132&.flytei"
  "dl.core.CompiledWorkflowClosureR\020compile"
  "dWorkflow\"U\n\033ParentTaskExecutionMetadata"
  "\0226\n\002id\030\001 \001(\0132&.flyteidl.core.TaskExecuti"
  "onIdentifierR\002id\"6\n\033ParentNodeExecutionM"
  "etadata\022\027\n\007node_id\030\001 \001(\tR\006nodeId\"\322\006\n\022Tas"
  "kExecutionEvent\0222\n\007task_id\030\001 \001(\0132\031.flyte"
  "idl.core.IdentifierR\006taskId\022_\n\030parent_no"
  "de_execution_id\030\002 \001(\0132&.flyteidl.core.No"
  "deExecutionIdentifierR\025parentNodeExecuti"
  "onId\022#\n\rretry_attempt\030\003 \001(\rR\014retryAttemp"
  "t\0228\n\005phase\030\004 \001(\0162\".flyteidl.core.TaskExe"
  "cution.PhaseR\005phase\022\037\n\013producer_id\030\005 \001(\t"
  "R\nproducerId\022*\n\004logs\030\006 \003(\0132\026.flyteidl.co"
  "re.TaskLogR\004logs\022;\n\013occurred_at\030\007 \001(\0132\032."
  "google.protobuf.TimestampR\noccurredAt\022\033\n"
  "\tinput_uri\030\010 \001(\tR\010inputUri\022\037\n\noutput_uri"
  "\030\t \001(\tH\000R\toutputUri\0225\n\005error\030\n \001(\0132\035.fly"
  "teidl.core.ExecutionErrorH\000R\005error\022<\n\013ou"
  "tput_data\030\021 \001(\0132\031.flyteidl.core.LiteralM"
  "apH\000R\noutputData\0228\n\013custom_info\030\013 \001(\0132\027."
  "google.protobuf.StructR\ncustomInfo\022#\n\rph"
  "ase_version\030\014 \001(\rR\014phaseVersion\022\026\n\006reaso"
  "n\030\r \001(\tR\006reason\022\033\n\ttask_type\030\016 \001(\tR\010task"
  "Type\022A\n\010metadata\030\020 \001(\0132%.flyteidl.event."
  "TaskExecutionMetadataR\010metadata\022#\n\revent"
  "_version\030\022 \001(\005R\014eventVersionB\017\n\routput_r"
  "esult\"\236\002\n\024ExternalResourceInfo\022\037\n\013extern"
  "al_id\030\001 \001(\tR\nexternalId\022\024\n\005index\030\002 \001(\rR\005"
  "index\022#\n\rretry_attempt\030\003 \001(\rR\014retryAttem"
  "pt\0228\n\005phase\030\004 \001(\0162\".flyteidl.core.TaskEx"
  "ecution.PhaseR\005phase\022D\n\014cache_status\030\005 \001"
  "(\0162!.flyteidl.core.CatalogCacheStatusR\013c"
  "acheStatus\022*\n\004logs\030\006 \003(\0132\026.flyteidl.core"
  ".TaskLogR\004logs\"[\n\020ResourcePoolInfo\022)\n\020al"
  "location_token\030\001 \001(\tR\017allocationToken\022\034\n"
  "\tnamespace\030\002 \001(\tR\tnamespace\"\235\003\n\025TaskExec"
  "utionMetadata\022%\n\016generated_name\030\001 \001(\tR\rg"
  "eneratedName\022S\n\022external_resources\030\002 \003(\013"
  "2$.flyteidl.event.ExternalResourceInfoR\021"
  "externalResources\022N\n\022resource_pool_info\030"
  "\003 \003(\0132 .flyteidl.event.ResourcePoolInfoR"
  "\020resourcePoolInfo\022+\n\021plugin_identifier\030\004"
  " \001(\tR\020pluginIdentifier\022Z\n\016instance_class"
  "\030\020 \001(\01623.flyteidl.event.TaskExecutionMet"
  "adata.InstanceClassR\rinstanceClass\"/\n\rIn"
  "stanceClass\022\013\n\007DEFAULT\020\000\022\021\n\rINTERRUPTIBL"
  "E\020\001B\263\001\n\022com.flyteidl.eventB\nEventProtoH\002"
  "Z5github.com/flyteorg/flyteidl/gen/pb-go"
  "/flyteidl/event\370\001\000\242\002\003FEX\252\002\016Flyteidl.Even"
  "t\312\002\016Flyteidl\\Event\342\002\032Flyteidl\\Event\\GPBM"
  "etadata\352\002\017Flyteidl::Eventb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flyteidl_2fevent_2fevent_2eproto_deps[7] = {
  &::descriptor_table_flyteidl_2fcore_2fcatalog_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fcompiler_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fexecution_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fidentifier_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fliterals_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fevent_2fevent_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fevent_2fevent_2eproto = {
  false, false, 4273, descriptor_table_protodef_flyteidl_2fevent_2fevent_2eproto, "flyteidl/event/event.proto", 
  &descriptor_table_flyteidl_2fevent_2fevent_2eproto_once, descriptor_table_flyteidl_2fevent_2fevent_2eproto_deps, 7, 11,
  schemas, file_default_instances, TableStruct_flyteidl_2fevent_2fevent_2eproto::offsets,
  file_level_metadata_flyteidl_2fevent_2fevent_2eproto, file_level_enum_descriptors_flyteidl_2fevent_2fevent_2eproto, file_level_service_descriptors_flyteidl_2fevent_2fevent_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fevent_2fevent_2eproto_getter() {
  return &descriptor_table_flyteidl_2fevent_2fevent_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fevent_2fevent_2eproto(&descriptor_table_flyteidl_2fevent_2fevent_2eproto);
namespace flyteidl {
namespace event {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskExecutionMetadata_InstanceClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fevent_2fevent_2eproto);
  return file_level_enum_descriptors_flyteidl_2fevent_2fevent_2eproto[0];
}
bool TaskExecutionMetadata_InstanceClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TaskExecutionMetadata_InstanceClass TaskExecutionMetadata::DEFAULT;
constexpr TaskExecutionMetadata_InstanceClass TaskExecutionMetadata::INTERRUPTIBLE;
constexpr TaskExecutionMetadata_InstanceClass TaskExecutionMetadata::InstanceClass_MIN;
constexpr TaskExecutionMetadata_InstanceClass TaskExecutionMetadata::InstanceClass_MAX;
constexpr int TaskExecutionMetadata::InstanceClass_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class WorkflowExecutionEvent::_Internal {
 public:
  static const ::flyteidl::core::WorkflowExecutionIdentifier& execution_id(const WorkflowExecutionEvent* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& occurred_at(const WorkflowExecutionEvent* msg);
  static const ::flyteidl::core::ExecutionError& error(const WorkflowExecutionEvent* msg);
  static const ::flyteidl::core::LiteralMap& output_data(const WorkflowExecutionEvent* msg);
};

const ::flyteidl::core::WorkflowExecutionIdentifier&
WorkflowExecutionEvent::_Internal::execution_id(const WorkflowExecutionEvent* msg) {
  return *msg->execution_id_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
WorkflowExecutionEvent::_Internal::occurred_at(const WorkflowExecutionEvent* msg) {
  return *msg->occurred_at_;
}
const ::flyteidl::core::ExecutionError&
WorkflowExecutionEvent::_Internal::error(const WorkflowExecutionEvent* msg) {
  return *msg->output_result_.error_;
}
const ::flyteidl::core::LiteralMap&
WorkflowExecutionEvent::_Internal::output_data(const WorkflowExecutionEvent* msg) {
  return *msg->output_result_.output_data_;
}
void WorkflowExecutionEvent::clear_execution_id() {
  if (GetArenaForAllocation() == nullptr && execution_id_ != nullptr) {
    delete execution_id_;
  }
  execution_id_ = nullptr;
}
void WorkflowExecutionEvent::clear_occurred_at() {
  if (GetArenaForAllocation() == nullptr && occurred_at_ != nullptr) {
    delete occurred_at_;
  }
  occurred_at_ = nullptr;
}
void WorkflowExecutionEvent::set_allocated_error(::flyteidl::core::ExecutionError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output_result();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    output_result_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.WorkflowExecutionEvent.error)
}
void WorkflowExecutionEvent::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete output_result_.error_;
    }
    clear_has_output_result();
  }
}
void WorkflowExecutionEvent::set_allocated_output_data(::flyteidl::core::LiteralMap* output_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output_result();
  if (output_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_data));
    if (message_arena != submessage_arena) {
      output_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_data, submessage_arena);
    }
    set_has_output_data();
    output_result_.output_data_ = output_data;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.WorkflowExecutionEvent.output_data)
}
void WorkflowExecutionEvent::clear_output_data() {
  if (_internal_has_output_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete output_result_.output_data_;
    }
    clear_has_output_result();
  }
}
WorkflowExecutionEvent::WorkflowExecutionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.event.WorkflowExecutionEvent)
}
WorkflowExecutionEvent::WorkflowExecutionEvent(const WorkflowExecutionEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  producer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    producer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_producer_id().empty()) {
    producer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_producer_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_execution_id()) {
    execution_id_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.execution_id_);
  } else {
    execution_id_ = nullptr;
  }
  if (from._internal_has_occurred_at()) {
    occurred_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.occurred_at_);
  } else {
    occurred_at_ = nullptr;
  }
  phase_ = from.phase_;
  clear_has_output_result();
  switch (from.output_result_case()) {
    case kOutputUri: {
      _internal_set_output_uri(from._internal_output_uri());
      break;
    }
    case kError: {
      _internal_mutable_error()->::flyteidl::core::ExecutionError::MergeFrom(from._internal_error());
      break;
    }
    case kOutputData: {
      _internal_mutable_output_data()->::flyteidl::core::LiteralMap::MergeFrom(from._internal_output_data());
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.WorkflowExecutionEvent)
}

inline void WorkflowExecutionEvent::SharedCtor() {
producer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  producer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&execution_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phase_) -
    reinterpret_cast<char*>(&execution_id_)) + sizeof(phase_));
clear_has_output_result();
}

WorkflowExecutionEvent::~WorkflowExecutionEvent() {
  // @@protoc_insertion_point(destructor:flyteidl.event.WorkflowExecutionEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkflowExecutionEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  producer_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete execution_id_;
  if (this != internal_default_instance()) delete occurred_at_;
  if (has_output_result()) {
    clear_output_result();
  }
}

void WorkflowExecutionEvent::ArenaDtor(void* object) {
  WorkflowExecutionEvent* _this = reinterpret_cast< WorkflowExecutionEvent* >(object);
  (void)_this;
}
void WorkflowExecutionEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkflowExecutionEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkflowExecutionEvent::clear_output_result() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.event.WorkflowExecutionEvent)
  switch (output_result_case()) {
    case kOutputUri: {
      output_result_.output_uri_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete output_result_.error_;
      }
      break;
    }
    case kOutputData: {
      if (GetArenaForAllocation() == nullptr) {
        delete output_result_.output_data_;
      }
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OUTPUT_RESULT_NOT_SET;
}


void WorkflowExecutionEvent::InternalSwap(WorkflowExecutionEvent* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowExecutionEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fevent_2fevent_2eproto_getter, &descriptor_table_flyteidl_2fevent_2fevent_2eproto_once,
      file_level_metadata_flyteidl_2fevent_2fevent_2eproto[0]);
}

// ===================================================================

class NodeExecutionEvent::_Internal {
 public:
  static const ::flyteidl::core::NodeExecutionIdentifier& id(const NodeExecutionEvent* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& occurred_at(const NodeExecutionEvent* msg);
  static const ::flyteidl::core::ExecutionError& error(const NodeExecutionEvent* msg);
  static const ::flyteidl::core::LiteralMap& output_data(const NodeExecutionEvent* msg);
  static const ::flyteidl::event::WorkflowNodeMetadata& workflow_node_metadata(const NodeExecutionEvent* msg);
  static const ::flyteidl::event::TaskNodeMetadata& task_node_metadata(const NodeExecutionEvent* msg);
  static const ::flyteidl::event::ParentTaskExecutionMetadata& parent_task_metadata(const NodeExecutionEvent* msg);
  static const ::flyteidl::event::ParentNodeExecutionMetadata& parent_node_metadata(const NodeExecutionEvent* msg);
};

const ::flyteidl::core::NodeExecutionIdentifier&
NodeExecutionEvent::_Internal::id(const NodeExecutionEvent* msg) {
  return *msg->id_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
NodeExecutionEvent::_Internal::occurred_at(const NodeExecutionEvent* msg) {
  return *msg->occurred_at_;
}
const ::flyteidl::core::ExecutionError&
NodeExecutionEvent::_Internal::error(const NodeExecutionEvent* msg) {
  return *msg->output_result_.error_;
}
const ::flyteidl::core::LiteralMap&
NodeExecutionEvent::_Internal::output_data(const NodeExecutionEvent* msg) {
  return *msg->output_result_.output_data_;
}
const ::flyteidl::event::WorkflowNodeMetadata&
NodeExecutionEvent::_Internal::workflow_node_metadata(const NodeExecutionEvent* msg) {
  return *msg->target_metadata_.workflow_node_metadata_;
}
const ::flyteidl::event::TaskNodeMetadata&
NodeExecutionEvent::_Internal::task_node_metadata(const NodeExecutionEvent* msg) {
  return *msg->target_metadata_.task_node_metadata_;
}
const ::flyteidl::event::ParentTaskExecutionMetadata&
NodeExecutionEvent::_Internal::parent_task_metadata(const NodeExecutionEvent* msg) {
  return *msg->parent_task_metadata_;
}
const ::flyteidl::event::ParentNodeExecutionMetadata&
NodeExecutionEvent::_Internal::parent_node_metadata(const NodeExecutionEvent* msg) {
  return *msg->parent_node_metadata_;
}
void NodeExecutionEvent::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void NodeExecutionEvent::clear_occurred_at() {
  if (GetArenaForAllocation() == nullptr && occurred_at_ != nullptr) {
    delete occurred_at_;
  }
  occurred_at_ = nullptr;
}
void NodeExecutionEvent::set_allocated_error(::flyteidl::core::ExecutionError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output_result();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    output_result_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.error)
}
void NodeExecutionEvent::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete output_result_.error_;
    }
    clear_has_output_result();
  }
}
void NodeExecutionEvent::set_allocated_output_data(::flyteidl::core::LiteralMap* output_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output_result();
  if (output_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_data));
    if (message_arena != submessage_arena) {
      output_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_data, submessage_arena);
    }
    set_has_output_data();
    output_result_.output_data_ = output_data;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.output_data)
}
void NodeExecutionEvent::clear_output_data() {
  if (_internal_has_output_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete output_result_.output_data_;
    }
    clear_has_output_result();
  }
}
void NodeExecutionEvent::set_allocated_workflow_node_metadata(::flyteidl::event::WorkflowNodeMetadata* workflow_node_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target_metadata();
  if (workflow_node_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::event::WorkflowNodeMetadata>::GetOwningArena(workflow_node_metadata);
    if (message_arena != submessage_arena) {
      workflow_node_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workflow_node_metadata, submessage_arena);
    }
    set_has_workflow_node_metadata();
    target_metadata_.workflow_node_metadata_ = workflow_node_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.workflow_node_metadata)
}
void NodeExecutionEvent::set_allocated_task_node_metadata(::flyteidl::event::TaskNodeMetadata* task_node_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target_metadata();
  if (task_node_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::event::TaskNodeMetadata>::GetOwningArena(task_node_metadata);
    if (message_arena != submessage_arena) {
      task_node_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_node_metadata, submessage_arena);
    }
    set_has_task_node_metadata();
    target_metadata_.task_node_metadata_ = task_node_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.task_node_metadata)
}
NodeExecutionEvent::NodeExecutionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.event.NodeExecutionEvent)
}
NodeExecutionEvent::NodeExecutionEvent(const NodeExecutionEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  producer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    producer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_producer_id().empty()) {
    producer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_producer_id(), 
      GetArenaForAllocation());
  }
  input_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    input_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_input_uri().empty()) {
    input_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_input_uri(), 
      GetArenaForAllocation());
  }
  retry_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    retry_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_retry_group().empty()) {
    retry_group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_retry_group(), 
      GetArenaForAllocation());
  }
  spec_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    spec_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_spec_node_id().empty()) {
    spec_node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_spec_node_id(), 
      GetArenaForAllocation());
  }
  node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    node_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    id_ = new ::flyteidl::core::NodeExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_occurred_at()) {
    occurred_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.occurred_at_);
  } else {
    occurred_at_ = nullptr;
  }
  if (from._internal_has_parent_task_metadata()) {
    parent_task_metadata_ = new ::flyteidl::event::ParentTaskExecutionMetadata(*from.parent_task_metadata_);
  } else {
    parent_task_metadata_ = nullptr;
  }
  if (from._internal_has_parent_node_metadata()) {
    parent_node_metadata_ = new ::flyteidl::event::ParentNodeExecutionMetadata(*from.parent_node_metadata_);
  } else {
    parent_node_metadata_ = nullptr;
  }
  ::memcpy(&phase_, &from.phase_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_dynamic_) -
    reinterpret_cast<char*>(&phase_)) + sizeof(is_dynamic_));
  clear_has_output_result();
  switch (from.output_result_case()) {
    case kOutputUri: {
      _internal_set_output_uri(from._internal_output_uri());
      break;
    }
    case kError: {
      _internal_mutable_error()->::flyteidl::core::ExecutionError::MergeFrom(from._internal_error());
      break;
    }
    case kOutputData: {
      _internal_mutable_output_data()->::flyteidl::core::LiteralMap::MergeFrom(from._internal_output_data());
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  clear_has_target_metadata();
  switch (from.target_metadata_case()) {
    case kWorkflowNodeMetadata: {
      _internal_mutable_workflow_node_metadata()->::flyteidl::event::WorkflowNodeMetadata::MergeFrom(from._internal_workflow_node_metadata());
      break;
    }
    case kTaskNodeMetadata: {
      _internal_mutable_task_node_metadata()->::flyteidl::event::TaskNodeMetadata::MergeFrom(from._internal_task_node_metadata());
      break;
    }
    case TARGET_METADATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.NodeExecutionEvent)
}

inline void NodeExecutionEvent::SharedCtor() {
producer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  producer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
input_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  input_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
retry_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  retry_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
spec_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  spec_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  node_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_dynamic_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_dynamic_));
clear_has_output_result();
clear_has_target_metadata();
}

NodeExecutionEvent::~NodeExecutionEvent() {
  // @@protoc_insertion_point(destructor:flyteidl.event.NodeExecutionEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeExecutionEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  producer_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  retry_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spec_node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete occurred_at_;
  if (this != internal_default_instance()) delete parent_task_metadata_;
  if (this != internal_default_instance()) delete parent_node_metadata_;
  if (has_output_result()) {
    clear_output_result();
  }
  if (has_target_metadata()) {
    clear_target_metadata();
  }
}

void NodeExecutionEvent::ArenaDtor(void* object) {
  NodeExecutionEvent* _this = reinterpret_cast< NodeExecutionEvent* >(object);
  (void)_this;
}
void NodeExecutionEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeExecutionEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeExecutionEvent::clear_output_result() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.event.NodeExecutionEvent)
  switch (output_result_case()) {
    case kOutputUri: {
      output_result_.output_uri_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete output_result_.error_;
      }
      break;
    }
    case kOutputData: {
      if (GetArenaForAllocation() == nullptr) {
        delete output_result_.output_data_;
      }
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OUTPUT_RESULT_NOT_SET;
}

void NodeExecutionEvent::clear_target_metadata() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.event.NodeExecutionEvent)
  switch (target_metadata_case()) {
    case kWorkflowNodeMetadata: {
      if (GetArenaForAllocation() == nullptr) {
        delete target_metadata_.workflow_node_metadata_;
      }
      break;
    }
    case kTaskNodeMetadata: {
      if (GetArenaForAllocation() == nullptr) {
        delete target_metadata_.task_node_metadata_;
      }
      break;
    }
    case TARGET_METADATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = TARGET_METADATA_NOT_SET;
}


void NodeExecutionEvent::InternalSwap(NodeExecutionEvent* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata NodeExecutionEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fevent_2fevent_2eproto_getter, &descriptor_table_flyteidl_2fevent_2fevent_2eproto_once,
      file_level_metadata_flyteidl_2fevent_2fevent_2eproto[1]);
}

// ===================================================================

class WorkflowNodeMetadata::_Internal {
 public:
  static const ::flyteidl::core::WorkflowExecutionIdentifier& execution_id(const WorkflowNodeMetadata* msg);
};

const ::flyteidl::core::WorkflowExecutionIdentifier&
WorkflowNodeMetadata::_Internal::execution_id(const WorkflowNodeMetadata* msg) {
  return *msg->execution_id_;
}
void WorkflowNodeMetadata::clear_execution_id() {
  if (GetArenaForAllocation() == nullptr && execution_id_ != nullptr) {
    delete execution_id_;
  }
  execution_id_ = nullptr;
}
WorkflowNodeMetadata::WorkflowNodeMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.event.WorkflowNodeMetadata)
}
WorkflowNodeMetadata::WorkflowNodeMetadata(const WorkflowNodeMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_execution_id()) {
    execution_id_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.execution_id_);
  } else {
    execution_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.WorkflowNodeMetadata)
}

inline void WorkflowNodeMetadata::SharedCtor() {
execution_id_ = nullptr;
}

WorkflowNodeMetadata::~WorkflowNodeMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.event.WorkflowNodeMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkflowNodeMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete execution_id_;
}

void WorkflowNodeMetadata::ArenaDtor(void* object) {
  WorkflowNodeMetadata* _this = reinterpret_cast< WorkflowNodeMetadata* >(object);
  (void)_this;
}
void WorkflowNodeMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkflowNodeMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkflowNodeMetadata::InternalSwap(WorkflowNodeMetadata* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowNodeMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fevent_2fevent_2eproto_getter, &descriptor_table_flyteidl_2fevent_2fevent_2eproto_once,
      file_level_metadata_flyteidl_2fevent_2fevent_2eproto[2]);
}

// ===================================================================

class TaskNodeMetadata::_Internal {
 public:
  static const ::flyteidl::core::CatalogMetadata& catalog_key(const TaskNodeMetadata* msg);
  static const ::flyteidl::event::DynamicWorkflowNodeMetadata& dynamic_workflow(const TaskNodeMetadata* msg);
};

const ::flyteidl::core::CatalogMetadata&
TaskNodeMetadata::_Internal::catalog_key(const TaskNodeMetadata* msg) {
  return *msg->catalog_key_;
}
const ::flyteidl::event::DynamicWorkflowNodeMetadata&
TaskNodeMetadata::_Internal::dynamic_workflow(const TaskNodeMetadata* msg) {
  return *msg->dynamic_workflow_;
}
void TaskNodeMetadata::clear_catalog_key() {
  if (GetArenaForAllocation() == nullptr && catalog_key_ != nullptr) {
    delete catalog_key_;
  }
  catalog_key_ = nullptr;
}
TaskNodeMetadata::TaskNodeMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.event.TaskNodeMetadata)
}
TaskNodeMetadata::TaskNodeMetadata(const TaskNodeMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_catalog_key()) {
    catalog_key_ = new ::flyteidl::core::CatalogMetadata(*from.catalog_key_);
  } else {
    catalog_key_ = nullptr;
  }
  if (from._internal_has_dynamic_workflow()) {
    dynamic_workflow_ = new ::flyteidl::event::DynamicWorkflowNodeMetadata(*from.dynamic_workflow_);
  } else {
    dynamic_workflow_ = nullptr;
  }
  ::memcpy(&cache_status_, &from.cache_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&reservation_status_) -
    reinterpret_cast<char*>(&cache_status_)) + sizeof(reservation_status_));
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.TaskNodeMetadata)
}

inline void TaskNodeMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&catalog_key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reservation_status_) -
    reinterpret_cast<char*>(&catalog_key_)) + sizeof(reservation_status_));
}

TaskNodeMetadata::~TaskNodeMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.event.TaskNodeMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskNodeMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete catalog_key_;
  if (this != internal_default_instance()) delete dynamic_workflow_;
}

void TaskNodeMetadata::ArenaDtor(void* object) {
  TaskNodeMetadata* _this = reinterpret_cast< TaskNodeMetadata* >(object);
  (void)_this;
}
void TaskNodeMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskNodeMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskNodeMetadata::InternalSwap(TaskNodeMetadata* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata TaskNodeMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fevent_2fevent_2eproto_getter, &descriptor_table_flyteidl_2fevent_2fevent_2eproto_once,
      file_level_metadata_flyteidl_2fevent_2fevent_2eproto[3]);
}

// ===================================================================

class DynamicWorkflowNodeMetadata::_Internal {
 public:
  static const ::flyteidl::core::Identifier& id(const DynamicWorkflowNodeMetadata* msg);
  static const ::flyteidl::core::CompiledWorkflowClosure& compiled_workflow(const DynamicWorkflowNodeMetadata* msg);
};

const ::flyteidl::core::Identifier&
DynamicWorkflowNodeMetadata::_Internal::id(const DynamicWorkflowNodeMetadata* msg) {
  return *msg->id_;
}
const ::flyteidl::core::CompiledWorkflowClosure&
DynamicWorkflowNodeMetadata::_Internal::compiled_workflow(const DynamicWorkflowNodeMetadata* msg) {
  return *msg->compiled_workflow_;
}
void DynamicWorkflowNodeMetadata::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void DynamicWorkflowNodeMetadata::clear_compiled_workflow() {
  if (GetArenaForAllocation() == nullptr && compiled_workflow_ != nullptr) {
    delete compiled_workflow_;
  }
  compiled_workflow_ = nullptr;
}
DynamicWorkflowNodeMetadata::DynamicWorkflowNodeMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.event.DynamicWorkflowNodeMetadata)
}
DynamicWorkflowNodeMetadata::DynamicWorkflowNodeMetadata(const DynamicWorkflowNodeMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_compiled_workflow()) {
    compiled_workflow_ = new ::flyteidl::core::CompiledWorkflowClosure(*from.compiled_workflow_);
  } else {
    compiled_workflow_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.DynamicWorkflowNodeMetadata)
}

inline void DynamicWorkflowNodeMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&compiled_workflow_) -
    reinterpret_cast<char*>(&id_)) + sizeof(compiled_workflow_));
}

DynamicWorkflowNodeMetadata::~DynamicWorkflowNodeMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.event.DynamicWorkflowNodeMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DynamicWorkflowNodeMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete compiled_workflow_;
}

void DynamicWorkflowNodeMetadata::ArenaDtor(void* object) {
  DynamicWorkflowNodeMetadata* _this = reinterpret_cast< DynamicWorkflowNodeMetadata* >(object);
  (void)_this;
}
void DynamicWorkflowNodeMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DynamicWorkflowNodeMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DynamicWorkflowNodeMetadata::InternalSwap(DynamicWorkflowNodeMetadata* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata DynamicWorkflowNodeMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fevent_2fevent_2eproto_getter, &descriptor_table_flyteidl_2fevent_2fevent_2eproto_once,
      file_level_metadata_flyteidl_2fevent_2fevent_2eproto[4]);
}

// ===================================================================

class ParentTaskExecutionMetadata::_Internal {
 public:
  static const ::flyteidl::core::TaskExecutionIdentifier& id(const ParentTaskExecutionMetadata* msg);
};

const ::flyteidl::core::TaskExecutionIdentifier&
ParentTaskExecutionMetadata::_Internal::id(const ParentTaskExecutionMetadata* msg) {
  return *msg->id_;
}
void ParentTaskExecutionMetadata::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
ParentTaskExecutionMetadata::ParentTaskExecutionMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.event.ParentTaskExecutionMetadata)
}
ParentTaskExecutionMetadata::ParentTaskExecutionMetadata(const ParentTaskExecutionMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::flyteidl::core::TaskExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.ParentTaskExecutionMetadata)
}

inline void ParentTaskExecutionMetadata::SharedCtor() {
id_ = nullptr;
}

ParentTaskExecutionMetadata::~ParentTaskExecutionMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.event.ParentTaskExecutionMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ParentTaskExecutionMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void ParentTaskExecutionMetadata::ArenaDtor(void* object) {
  ParentTaskExecutionMetadata* _this = reinterpret_cast< ParentTaskExecutionMetadata* >(object);
  (void)_this;
}
void ParentTaskExecutionMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParentTaskExecutionMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParentTaskExecutionMetadata::InternalSwap(ParentTaskExecutionMetadata* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ParentTaskExecutionMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fevent_2fevent_2eproto_getter, &descriptor_table_flyteidl_2fevent_2fevent_2eproto_once,
      file_level_metadata_flyteidl_2fevent_2fevent_2eproto[5]);
}

// ===================================================================

class ParentNodeExecutionMetadata::_Internal {
 public:
};

ParentNodeExecutionMetadata::ParentNodeExecutionMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.event.ParentNodeExecutionMetadata)
}
ParentNodeExecutionMetadata::ParentNodeExecutionMetadata(const ParentNodeExecutionMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_id().empty()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.ParentNodeExecutionMetadata)
}

inline void ParentNodeExecutionMetadata::SharedCtor() {
node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ParentNodeExecutionMetadata::~ParentNodeExecutionMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.event.ParentNodeExecutionMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ParentNodeExecutionMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ParentNodeExecutionMetadata::ArenaDtor(void* object) {
  ParentNodeExecutionMetadata* _this = reinterpret_cast< ParentNodeExecutionMetadata* >(object);
  (void)_this;
}
void ParentNodeExecutionMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParentNodeExecutionMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParentNodeExecutionMetadata::InternalSwap(ParentNodeExecutionMetadata* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ParentNodeExecutionMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fevent_2fevent_2eproto_getter, &descriptor_table_flyteidl_2fevent_2fevent_2eproto_once,
      file_level_metadata_flyteidl_2fevent_2fevent_2eproto[6]);
}

// ===================================================================

class TaskExecutionEvent::_Internal {
 public:
  static const ::flyteidl::core::Identifier& task_id(const TaskExecutionEvent* msg);
  static const ::flyteidl::core::NodeExecutionIdentifier& parent_node_execution_id(const TaskExecutionEvent* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& occurred_at(const TaskExecutionEvent* msg);
  static const ::flyteidl::core::ExecutionError& error(const TaskExecutionEvent* msg);
  static const ::flyteidl::core::LiteralMap& output_data(const TaskExecutionEvent* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& custom_info(const TaskExecutionEvent* msg);
  static const ::flyteidl::event::TaskExecutionMetadata& metadata(const TaskExecutionEvent* msg);
};

const ::flyteidl::core::Identifier&
TaskExecutionEvent::_Internal::task_id(const TaskExecutionEvent* msg) {
  return *msg->task_id_;
}
const ::flyteidl::core::NodeExecutionIdentifier&
TaskExecutionEvent::_Internal::parent_node_execution_id(const TaskExecutionEvent* msg) {
  return *msg->parent_node_execution_id_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TaskExecutionEvent::_Internal::occurred_at(const TaskExecutionEvent* msg) {
  return *msg->occurred_at_;
}
const ::flyteidl::core::ExecutionError&
TaskExecutionEvent::_Internal::error(const TaskExecutionEvent* msg) {
  return *msg->output_result_.error_;
}
const ::flyteidl::core::LiteralMap&
TaskExecutionEvent::_Internal::output_data(const TaskExecutionEvent* msg) {
  return *msg->output_result_.output_data_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
TaskExecutionEvent::_Internal::custom_info(const TaskExecutionEvent* msg) {
  return *msg->custom_info_;
}
const ::flyteidl::event::TaskExecutionMetadata&
TaskExecutionEvent::_Internal::metadata(const TaskExecutionEvent* msg) {
  return *msg->metadata_;
}
void TaskExecutionEvent::clear_task_id() {
  if (GetArenaForAllocation() == nullptr && task_id_ != nullptr) {
    delete task_id_;
  }
  task_id_ = nullptr;
}
void TaskExecutionEvent::clear_parent_node_execution_id() {
  if (GetArenaForAllocation() == nullptr && parent_node_execution_id_ != nullptr) {
    delete parent_node_execution_id_;
  }
  parent_node_execution_id_ = nullptr;
}
void TaskExecutionEvent::clear_logs() {
  logs_.Clear();
}
void TaskExecutionEvent::clear_occurred_at() {
  if (GetArenaForAllocation() == nullptr && occurred_at_ != nullptr) {
    delete occurred_at_;
  }
  occurred_at_ = nullptr;
}
void TaskExecutionEvent::set_allocated_error(::flyteidl::core::ExecutionError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output_result();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    output_result_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.error)
}
void TaskExecutionEvent::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete output_result_.error_;
    }
    clear_has_output_result();
  }
}
void TaskExecutionEvent::set_allocated_output_data(::flyteidl::core::LiteralMap* output_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output_result();
  if (output_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_data));
    if (message_arena != submessage_arena) {
      output_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_data, submessage_arena);
    }
    set_has_output_data();
    output_result_.output_data_ = output_data;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.output_data)
}
void TaskExecutionEvent::clear_output_data() {
  if (_internal_has_output_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete output_result_.output_data_;
    }
    clear_has_output_result();
  }
}
void TaskExecutionEvent::clear_custom_info() {
  if (GetArenaForAllocation() == nullptr && custom_info_ != nullptr) {
    delete custom_info_;
  }
  custom_info_ = nullptr;
}
TaskExecutionEvent::TaskExecutionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  logs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.event.TaskExecutionEvent)
}
TaskExecutionEvent::TaskExecutionEvent(const TaskExecutionEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      logs_(from.logs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  producer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    producer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_producer_id().empty()) {
    producer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_producer_id(), 
      GetArenaForAllocation());
  }
  input_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    input_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_input_uri().empty()) {
    input_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_input_uri(), 
      GetArenaForAllocation());
  }
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reason().empty()) {
    reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reason(), 
      GetArenaForAllocation());
  }
  task_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    task_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_type().empty()) {
    task_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_task_id()) {
    task_id_ = new ::flyteidl::core::Identifier(*from.task_id_);
  } else {
    task_id_ = nullptr;
  }
  if (from._internal_has_parent_node_execution_id()) {
    parent_node_execution_id_ = new ::flyteidl::core::NodeExecutionIdentifier(*from.parent_node_execution_id_);
  } else {
    parent_node_execution_id_ = nullptr;
  }
  if (from._internal_has_occurred_at()) {
    occurred_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.occurred_at_);
  } else {
    occurred_at_ = nullptr;
  }
  if (from._internal_has_custom_info()) {
    custom_info_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.custom_info_);
  } else {
    custom_info_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::flyteidl::event::TaskExecutionMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  ::memcpy(&retry_attempt_, &from.retry_attempt_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_version_) -
    reinterpret_cast<char*>(&retry_attempt_)) + sizeof(event_version_));
  clear_has_output_result();
  switch (from.output_result_case()) {
    case kOutputUri: {
      _internal_set_output_uri(from._internal_output_uri());
      break;
    }
    case kError: {
      _internal_mutable_error()->::flyteidl::core::ExecutionError::MergeFrom(from._internal_error());
      break;
    }
    case kOutputData: {
      _internal_mutable_output_data()->::flyteidl::core::LiteralMap::MergeFrom(from._internal_output_data());
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.TaskExecutionEvent)
}

inline void TaskExecutionEvent::SharedCtor() {
producer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  producer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
input_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  input_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
task_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  task_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&task_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_version_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(event_version_));
clear_has_output_result();
}

TaskExecutionEvent::~TaskExecutionEvent() {
  // @@protoc_insertion_point(destructor:flyteidl.event.TaskExecutionEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskExecutionEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  producer_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete task_id_;
  if (this != internal_default_instance()) delete parent_node_execution_id_;
  if (this != internal_default_instance()) delete occurred_at_;
  if (this != internal_default_instance()) delete custom_info_;
  if (this != internal_default_instance()) delete metadata_;
  if (has_output_result()) {
    clear_output_result();
  }
}

void TaskExecutionEvent::ArenaDtor(void* object) {
  TaskExecutionEvent* _this = reinterpret_cast< TaskExecutionEvent* >(object);
  (void)_this;
}
void TaskExecutionEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskExecutionEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskExecutionEvent::clear_output_result() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.event.TaskExecutionEvent)
  switch (output_result_case()) {
    case kOutputUri: {
      output_result_.output_uri_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete output_result_.error_;
      }
      break;
    }
    case kOutputData: {
      if (GetArenaForAllocation() == nullptr) {
        delete output_result_.output_data_;
      }
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OUTPUT_RESULT_NOT_SET;
}


void TaskExecutionEvent::InternalSwap(TaskExecutionEvent* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata TaskExecutionEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fevent_2fevent_2eproto_getter, &descriptor_table_flyteidl_2fevent_2fevent_2eproto_once,
      file_level_metadata_flyteidl_2fevent_2fevent_2eproto[7]);
}

// ===================================================================

class ExternalResourceInfo::_Internal {
 public:
};

void ExternalResourceInfo::clear_logs() {
  logs_.Clear();
}
ExternalResourceInfo::ExternalResourceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  logs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.event.ExternalResourceInfo)
}
ExternalResourceInfo::ExternalResourceInfo(const ExternalResourceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      logs_(from.logs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  external_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    external_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_external_id().empty()) {
    external_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_external_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&cache_status_) -
    reinterpret_cast<char*>(&index_)) + sizeof(cache_status_));
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.ExternalResourceInfo)
}

inline void ExternalResourceInfo::SharedCtor() {
external_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  external_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cache_status_) -
    reinterpret_cast<char*>(&index_)) + sizeof(cache_status_));
}

ExternalResourceInfo::~ExternalResourceInfo() {
  // @@protoc_insertion_point(destructor:flyteidl.event.ExternalResourceInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExternalResourceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  external_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExternalResourceInfo::ArenaDtor(void* object) {
  ExternalResourceInfo* _this = reinterpret_cast< ExternalResourceInfo* >(object);
  (void)_this;
}
void ExternalResourceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExternalResourceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExternalResourceInfo::InternalSwap(ExternalResourceInfo* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ExternalResourceInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fevent_2fevent_2eproto_getter, &descriptor_table_flyteidl_2fevent_2fevent_2eproto_once,
      file_level_metadata_flyteidl_2fevent_2fevent_2eproto[8]);
}

// ===================================================================

class ResourcePoolInfo::_Internal {
 public:
};

ResourcePoolInfo::ResourcePoolInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.event.ResourcePoolInfo)
}
ResourcePoolInfo::ResourcePoolInfo(const ResourcePoolInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  allocation_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    allocation_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_allocation_token().empty()) {
    allocation_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_allocation_token(), 
      GetArenaForAllocation());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.ResourcePoolInfo)
}

inline void ResourcePoolInfo::SharedCtor() {
allocation_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  allocation_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResourcePoolInfo::~ResourcePoolInfo() {
  // @@protoc_insertion_point(destructor:flyteidl.event.ResourcePoolInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResourcePoolInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  allocation_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResourcePoolInfo::ArenaDtor(void* object) {
  ResourcePoolInfo* _this = reinterpret_cast< ResourcePoolInfo* >(object);
  (void)_this;
}
void ResourcePoolInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourcePoolInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResourcePoolInfo::InternalSwap(ResourcePoolInfo* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResourcePoolInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fevent_2fevent_2eproto_getter, &descriptor_table_flyteidl_2fevent_2fevent_2eproto_once,
      file_level_metadata_flyteidl_2fevent_2fevent_2eproto[9]);
}

// ===================================================================

class TaskExecutionMetadata::_Internal {
 public:
};

TaskExecutionMetadata::TaskExecutionMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  external_resources_(arena),
  resource_pool_info_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.event.TaskExecutionMetadata)
}
TaskExecutionMetadata::TaskExecutionMetadata(const TaskExecutionMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      external_resources_(from.external_resources_),
      resource_pool_info_(from.resource_pool_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  generated_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    generated_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_generated_name().empty()) {
    generated_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_generated_name(), 
      GetArenaForAllocation());
  }
  plugin_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    plugin_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_plugin_identifier().empty()) {
    plugin_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_plugin_identifier(), 
      GetArenaForAllocation());
  }
  instance_class_ = from.instance_class_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.TaskExecutionMetadata)
}

inline void TaskExecutionMetadata::SharedCtor() {
generated_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  generated_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
plugin_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  plugin_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
instance_class_ = 0;
}

TaskExecutionMetadata::~TaskExecutionMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.event.TaskExecutionMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskExecutionMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  generated_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plugin_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskExecutionMetadata::ArenaDtor(void* object) {
  TaskExecutionMetadata* _this = reinterpret_cast< TaskExecutionMetadata* >(object);
  (void)_this;
}
void TaskExecutionMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskExecutionMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskExecutionMetadata::InternalSwap(TaskExecutionMetadata* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata TaskExecutionMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fevent_2fevent_2eproto_getter, &descriptor_table_flyteidl_2fevent_2fevent_2eproto_once,
      file_level_metadata_flyteidl_2fevent_2fevent_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace event
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::event::WorkflowExecutionEvent* Arena::CreateMaybeMessage< ::flyteidl::event::WorkflowExecutionEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::event::WorkflowExecutionEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::event::NodeExecutionEvent* Arena::CreateMaybeMessage< ::flyteidl::event::NodeExecutionEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::event::NodeExecutionEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::event::WorkflowNodeMetadata* Arena::CreateMaybeMessage< ::flyteidl::event::WorkflowNodeMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::event::WorkflowNodeMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::event::TaskNodeMetadata* Arena::CreateMaybeMessage< ::flyteidl::event::TaskNodeMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::event::TaskNodeMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::event::DynamicWorkflowNodeMetadata* Arena::CreateMaybeMessage< ::flyteidl::event::DynamicWorkflowNodeMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::event::DynamicWorkflowNodeMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::event::ParentTaskExecutionMetadata* Arena::CreateMaybeMessage< ::flyteidl::event::ParentTaskExecutionMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::event::ParentTaskExecutionMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::event::ParentNodeExecutionMetadata* Arena::CreateMaybeMessage< ::flyteidl::event::ParentNodeExecutionMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::event::ParentNodeExecutionMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::event::TaskExecutionEvent* Arena::CreateMaybeMessage< ::flyteidl::event::TaskExecutionEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::event::TaskExecutionEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::event::ExternalResourceInfo* Arena::CreateMaybeMessage< ::flyteidl::event::ExternalResourceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::event::ExternalResourceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::event::ResourcePoolInfo* Arena::CreateMaybeMessage< ::flyteidl::event::ResourcePoolInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::event::ResourcePoolInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::event::TaskExecutionMetadata* Arena::CreateMaybeMessage< ::flyteidl::event::TaskExecutionMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::event::TaskExecutionMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
