// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/event/event.proto

package com.flyteidl.event;

public interface TaskNodeMetadataOrBuilder extends
    // @@protoc_insertion_point(interface_extends:flyteidl.event.TaskNodeMetadata)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Captures the status of caching for this execution.
   * </pre>
   *
   * <code>.flyteidl.core.CatalogCacheStatus cache_status = 1 [json_name = "cacheStatus"];</code>
   * @return The enum numeric value on the wire for cacheStatus.
   */
  int getCacheStatusValue();
  /**
   * <pre>
   * Captures the status of caching for this execution.
   * </pre>
   *
   * <code>.flyteidl.core.CatalogCacheStatus cache_status = 1 [json_name = "cacheStatus"];</code>
   * @return The cacheStatus.
   */
  com.flyteidl.core.CatalogCacheStatus getCacheStatus();

  /**
   * <pre>
   * This structure carries the catalog artifact information
   * </pre>
   *
   * <code>.flyteidl.core.CatalogMetadata catalog_key = 2 [json_name = "catalogKey"];</code>
   * @return Whether the catalogKey field is set.
   */
  boolean hasCatalogKey();
  /**
   * <pre>
   * This structure carries the catalog artifact information
   * </pre>
   *
   * <code>.flyteidl.core.CatalogMetadata catalog_key = 2 [json_name = "catalogKey"];</code>
   * @return The catalogKey.
   */
  com.flyteidl.core.CatalogMetadata getCatalogKey();
  /**
   * <pre>
   * This structure carries the catalog artifact information
   * </pre>
   *
   * <code>.flyteidl.core.CatalogMetadata catalog_key = 2 [json_name = "catalogKey"];</code>
   */
  com.flyteidl.core.CatalogMetadataOrBuilder getCatalogKeyOrBuilder();

  /**
   * <pre>
   * Captures the status of cache reservations for this execution.
   * </pre>
   *
   * <code>.flyteidl.core.CatalogReservation.Status reservation_status = 3 [json_name = "reservationStatus"];</code>
   * @return The enum numeric value on the wire for reservationStatus.
   */
  int getReservationStatusValue();
  /**
   * <pre>
   * Captures the status of cache reservations for this execution.
   * </pre>
   *
   * <code>.flyteidl.core.CatalogReservation.Status reservation_status = 3 [json_name = "reservationStatus"];</code>
   * @return The reservationStatus.
   */
  com.flyteidl.core.CatalogReservation.Status getReservationStatus();

  /**
   * <pre>
   * In the case this task launched a dynamic workflow we capture its structure here.
   * </pre>
   *
   * <code>.flyteidl.event.DynamicWorkflowNodeMetadata dynamic_workflow = 16 [json_name = "dynamicWorkflow"];</code>
   * @return Whether the dynamicWorkflow field is set.
   */
  boolean hasDynamicWorkflow();
  /**
   * <pre>
   * In the case this task launched a dynamic workflow we capture its structure here.
   * </pre>
   *
   * <code>.flyteidl.event.DynamicWorkflowNodeMetadata dynamic_workflow = 16 [json_name = "dynamicWorkflow"];</code>
   * @return The dynamicWorkflow.
   */
  com.flyteidl.event.DynamicWorkflowNodeMetadata getDynamicWorkflow();
  /**
   * <pre>
   * In the case this task launched a dynamic workflow we capture its structure here.
   * </pre>
   *
   * <code>.flyteidl.event.DynamicWorkflowNodeMetadata dynamic_workflow = 16 [json_name = "dynamicWorkflow"];</code>
   */
  com.flyteidl.event.DynamicWorkflowNodeMetadataOrBuilder getDynamicWorkflowOrBuilder();
}
