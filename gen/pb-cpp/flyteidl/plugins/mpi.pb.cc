// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/mpi.proto

#include "flyteidl/plugins/mpi.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace plugins {
constexpr DistributedMPITrainingTask::DistributedMPITrainingTask(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : num_workers_(0)
  , num_launcher_replicas_(0)
  , slots_(0){}
struct DistributedMPITrainingTaskDefaultTypeInternal {
  constexpr DistributedMPITrainingTaskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DistributedMPITrainingTaskDefaultTypeInternal() {}
  union {
    DistributedMPITrainingTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DistributedMPITrainingTaskDefaultTypeInternal _DistributedMPITrainingTask_default_instance_;
}  // namespace plugins
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fplugins_2fmpi_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fplugins_2fmpi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fplugins_2fmpi_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fplugins_2fmpi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DistributedMPITrainingTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DistributedMPITrainingTask, num_workers_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DistributedMPITrainingTask, num_launcher_replicas_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DistributedMPITrainingTask, slots_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::plugins::DistributedMPITrainingTask)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::plugins::_DistributedMPITrainingTask_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fplugins_2fmpi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032flyteidl/plugins/mpi.proto\022\020flyteidl.p"
  "lugins\"\207\001\n\032DistributedMPITrainingTask\022\037\n"
  "\013num_workers\030\001 \001(\005R\nnumWorkers\0222\n\025num_la"
  "uncher_replicas\030\002 \001(\005R\023numLauncherReplic"
  "as\022\024\n\005slots\030\003 \001(\005R\005slotsB\275\001\n\024com.flyteid"
  "l.pluginsB\010MpiProtoH\002Z7github.com/flyteo"
  "rg/flyteidl/gen/pb-go/flyteidl/plugins\370\001"
  "\000\242\002\003FPX\252\002\020Flyteidl.Plugins\312\002\020Flyteidl\\Pl"
  "ugins\342\002\034Flyteidl\\Plugins\\GPBMetadata\352\002\021F"
  "lyteidl::Pluginsb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fplugins_2fmpi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fplugins_2fmpi_2eproto = {
  false, false, 384, descriptor_table_protodef_flyteidl_2fplugins_2fmpi_2eproto, "flyteidl/plugins/mpi.proto", 
  &descriptor_table_flyteidl_2fplugins_2fmpi_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_flyteidl_2fplugins_2fmpi_2eproto::offsets,
  file_level_metadata_flyteidl_2fplugins_2fmpi_2eproto, file_level_enum_descriptors_flyteidl_2fplugins_2fmpi_2eproto, file_level_service_descriptors_flyteidl_2fplugins_2fmpi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fplugins_2fmpi_2eproto_getter() {
  return &descriptor_table_flyteidl_2fplugins_2fmpi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fplugins_2fmpi_2eproto(&descriptor_table_flyteidl_2fplugins_2fmpi_2eproto);
namespace flyteidl {
namespace plugins {

// ===================================================================

class DistributedMPITrainingTask::_Internal {
 public:
};

DistributedMPITrainingTask::DistributedMPITrainingTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.plugins.DistributedMPITrainingTask)
}
DistributedMPITrainingTask::DistributedMPITrainingTask(const DistributedMPITrainingTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_workers_, &from.num_workers_,
    static_cast<size_t>(reinterpret_cast<char*>(&slots_) -
    reinterpret_cast<char*>(&num_workers_)) + sizeof(slots_));
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.DistributedMPITrainingTask)
}

inline void DistributedMPITrainingTask::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num_workers_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slots_) -
    reinterpret_cast<char*>(&num_workers_)) + sizeof(slots_));
}

DistributedMPITrainingTask::~DistributedMPITrainingTask() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.DistributedMPITrainingTask)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DistributedMPITrainingTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DistributedMPITrainingTask::ArenaDtor(void* object) {
  DistributedMPITrainingTask* _this = reinterpret_cast< DistributedMPITrainingTask* >(object);
  (void)_this;
}
void DistributedMPITrainingTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DistributedMPITrainingTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DistributedMPITrainingTask::InternalSwap(DistributedMPITrainingTask* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata DistributedMPITrainingTask::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fplugins_2fmpi_2eproto_getter, &descriptor_table_flyteidl_2fplugins_2fmpi_2eproto_once,
      file_level_metadata_flyteidl_2fplugins_2fmpi_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace plugins
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::DistributedMPITrainingTask* Arena::CreateMaybeMessage< ::flyteidl::plugins::DistributedMPITrainingTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::plugins::DistributedMPITrainingTask >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
