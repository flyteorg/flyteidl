// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/execution.proto

#include "flyteidl/admin/execution.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcluster_5fassignment_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ClusterAssignment_flyteidl_2fadmin_2fcluster_5fassignment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AuthRole_flyteidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RawOutputDataConfig_flyteidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UrlBlob_flyteidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Annotations_flyteidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Labels_flyteidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Notification_flyteidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fexecution_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AbortMetadata_flyteidl_2fadmin_2fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fexecution_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SystemMetadata_flyteidl_2fadmin_2fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fexecution_2eproto ::google::protobuf::internal::SCCInfo<12> scc_info_ExecutionSpec_flyteidl_2fadmin_2fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fexecution_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ExecutionStateChangeDetails_flyteidl_2fadmin_2fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fexecution_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LiteralMapBlob_flyteidl_2fadmin_2fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fexecution_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NotificationList_flyteidl_2fadmin_2fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fexecution_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Execution_flyteidl_2fadmin_2fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fexecution_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_ExecutionMetadata_flyteidl_2fadmin_2fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fexecution_2eproto ::google::protobuf::internal::SCCInfo<9> scc_info_ExecutionClosure_flyteidl_2fadmin_2fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fexecution_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ExecutionError_flyteidl_2fcore_2fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fexecution_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_QualityOfService_flyteidl_2fcore_2fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WorkflowExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NodeExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fliterals_2eproto ::google::protobuf::internal::SCCInfo<9> scc_info_Literal_flyteidl_2fcore_2fliterals_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fmetrics_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Span_flyteidl_2fcore_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fsecurity_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_SecurityContext_flyteidl_2fcore_2fsecurity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto;
namespace flyteidl {
namespace admin {
class ExecutionCreateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecutionCreateRequest> _instance;
} _ExecutionCreateRequest_default_instance_;
class ExecutionRelaunchRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecutionRelaunchRequest> _instance;
} _ExecutionRelaunchRequest_default_instance_;
class ExecutionRecoverRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecutionRecoverRequest> _instance;
} _ExecutionRecoverRequest_default_instance_;
class ExecutionCreateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecutionCreateResponse> _instance;
} _ExecutionCreateResponse_default_instance_;
class WorkflowExecutionGetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowExecutionGetRequest> _instance;
} _WorkflowExecutionGetRequest_default_instance_;
class ExecutionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Execution> _instance;
} _Execution_default_instance_;
class ExecutionListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecutionList> _instance;
} _ExecutionList_default_instance_;
class LiteralMapBlobDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LiteralMapBlob> _instance;
  const ::flyteidl::core::LiteralMap* values_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
} _LiteralMapBlob_default_instance_;
class AbortMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AbortMetadata> _instance;
} _AbortMetadata_default_instance_;
class ExecutionClosureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecutionClosure> _instance;
  const ::flyteidl::admin::LiteralMapBlob* outputs_;
  const ::flyteidl::core::ExecutionError* error_;
  ::google::protobuf::internal::ArenaStringPtr abort_cause_;
  const ::flyteidl::admin::AbortMetadata* abort_metadata_;
  const ::flyteidl::core::LiteralMap* output_data_;
} _ExecutionClosure_default_instance_;
class SystemMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemMetadata> _instance;
} _SystemMetadata_default_instance_;
class ExecutionMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecutionMetadata> _instance;
} _ExecutionMetadata_default_instance_;
class NotificationListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NotificationList> _instance;
} _NotificationList_default_instance_;
class ExecutionSpecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecutionSpec> _instance;
  const ::flyteidl::admin::NotificationList* notifications_;
  bool disable_all_;
} _ExecutionSpec_default_instance_;
class ExecutionTerminateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecutionTerminateRequest> _instance;
} _ExecutionTerminateRequest_default_instance_;
class ExecutionTerminateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecutionTerminateResponse> _instance;
} _ExecutionTerminateResponse_default_instance_;
class WorkflowExecutionGetDataRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowExecutionGetDataRequest> _instance;
} _WorkflowExecutionGetDataRequest_default_instance_;
class WorkflowExecutionGetDataResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowExecutionGetDataResponse> _instance;
} _WorkflowExecutionGetDataResponse_default_instance_;
class ExecutionUpdateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecutionUpdateRequest> _instance;
} _ExecutionUpdateRequest_default_instance_;
class ExecutionStateChangeDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecutionStateChangeDetails> _instance;
} _ExecutionStateChangeDetails_default_instance_;
class ExecutionUpdateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecutionUpdateResponse> _instance;
} _ExecutionUpdateResponse_default_instance_;
class WorkflowExecutionGetMetricsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowExecutionGetMetricsRequest> _instance;
} _WorkflowExecutionGetMetricsRequest_default_instance_;
class WorkflowExecutionGetMetricsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowExecutionGetMetricsResponse> _instance;
} _WorkflowExecutionGetMetricsResponse_default_instance_;
}  // namespace admin
}  // namespace flyteidl
static void InitDefaultsExecutionCreateRequest_flyteidl_2fadmin_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_ExecutionCreateRequest_default_instance_;
    new (ptr) ::flyteidl::admin::ExecutionCreateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::ExecutionCreateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ExecutionCreateRequest_flyteidl_2fadmin_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsExecutionCreateRequest_flyteidl_2fadmin_2fexecution_2eproto}, {
      &scc_info_ExecutionSpec_flyteidl_2fadmin_2fexecution_2eproto.base,
      &scc_info_Literal_flyteidl_2fcore_2fliterals_2eproto.base,}};

static void InitDefaultsExecutionRelaunchRequest_flyteidl_2fadmin_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_ExecutionRelaunchRequest_default_instance_;
    new (ptr) ::flyteidl::admin::ExecutionRelaunchRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::ExecutionRelaunchRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ExecutionRelaunchRequest_flyteidl_2fadmin_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsExecutionRelaunchRequest_flyteidl_2fadmin_2fexecution_2eproto}, {
      &scc_info_WorkflowExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsExecutionRecoverRequest_flyteidl_2fadmin_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_ExecutionRecoverRequest_default_instance_;
    new (ptr) ::flyteidl::admin::ExecutionRecoverRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::ExecutionRecoverRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ExecutionRecoverRequest_flyteidl_2fadmin_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsExecutionRecoverRequest_flyteidl_2fadmin_2fexecution_2eproto}, {
      &scc_info_WorkflowExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_ExecutionMetadata_flyteidl_2fadmin_2fexecution_2eproto.base,}};

static void InitDefaultsExecutionCreateResponse_flyteidl_2fadmin_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_ExecutionCreateResponse_default_instance_;
    new (ptr) ::flyteidl::admin::ExecutionCreateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::ExecutionCreateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ExecutionCreateResponse_flyteidl_2fadmin_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsExecutionCreateResponse_flyteidl_2fadmin_2fexecution_2eproto}, {
      &scc_info_WorkflowExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsWorkflowExecutionGetRequest_flyteidl_2fadmin_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_WorkflowExecutionGetRequest_default_instance_;
    new (ptr) ::flyteidl::admin::WorkflowExecutionGetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::WorkflowExecutionGetRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WorkflowExecutionGetRequest_flyteidl_2fadmin_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWorkflowExecutionGetRequest_flyteidl_2fadmin_2fexecution_2eproto}, {
      &scc_info_WorkflowExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsExecution_flyteidl_2fadmin_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_Execution_default_instance_;
    new (ptr) ::flyteidl::admin::Execution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::Execution::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Execution_flyteidl_2fadmin_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsExecution_flyteidl_2fadmin_2fexecution_2eproto}, {
      &scc_info_WorkflowExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_ExecutionSpec_flyteidl_2fadmin_2fexecution_2eproto.base,
      &scc_info_ExecutionClosure_flyteidl_2fadmin_2fexecution_2eproto.base,}};

static void InitDefaultsExecutionList_flyteidl_2fadmin_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_ExecutionList_default_instance_;
    new (ptr) ::flyteidl::admin::ExecutionList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::ExecutionList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ExecutionList_flyteidl_2fadmin_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsExecutionList_flyteidl_2fadmin_2fexecution_2eproto}, {
      &scc_info_Execution_flyteidl_2fadmin_2fexecution_2eproto.base,}};

static void InitDefaultsLiteralMapBlob_flyteidl_2fadmin_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_LiteralMapBlob_default_instance_;
    new (ptr) ::flyteidl::admin::LiteralMapBlob();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::LiteralMapBlob::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LiteralMapBlob_flyteidl_2fadmin_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLiteralMapBlob_flyteidl_2fadmin_2fexecution_2eproto}, {
      &scc_info_Literal_flyteidl_2fcore_2fliterals_2eproto.base,}};

static void InitDefaultsAbortMetadata_flyteidl_2fadmin_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_AbortMetadata_default_instance_;
    new (ptr) ::flyteidl::admin::AbortMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::AbortMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AbortMetadata_flyteidl_2fadmin_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAbortMetadata_flyteidl_2fadmin_2fexecution_2eproto}, {}};

static void InitDefaultsExecutionClosure_flyteidl_2fadmin_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_ExecutionClosure_default_instance_;
    new (ptr) ::flyteidl::admin::ExecutionClosure();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::ExecutionClosure::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<9> scc_info_ExecutionClosure_flyteidl_2fadmin_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 9, InitDefaultsExecutionClosure_flyteidl_2fadmin_2fexecution_2eproto}, {
      &scc_info_LiteralMapBlob_flyteidl_2fadmin_2fexecution_2eproto.base,
      &scc_info_ExecutionError_flyteidl_2fcore_2fexecution_2eproto.base,
      &scc_info_AbortMetadata_flyteidl_2fadmin_2fexecution_2eproto.base,
      &scc_info_Literal_flyteidl_2fcore_2fliterals_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,
      &scc_info_Notification_flyteidl_2fadmin_2fcommon_2eproto.base,
      &scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_ExecutionStateChangeDetails_flyteidl_2fadmin_2fexecution_2eproto.base,}};

static void InitDefaultsSystemMetadata_flyteidl_2fadmin_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_SystemMetadata_default_instance_;
    new (ptr) ::flyteidl::admin::SystemMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::SystemMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SystemMetadata_flyteidl_2fadmin_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSystemMetadata_flyteidl_2fadmin_2fexecution_2eproto}, {}};

static void InitDefaultsExecutionMetadata_flyteidl_2fadmin_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_ExecutionMetadata_default_instance_;
    new (ptr) ::flyteidl::admin::ExecutionMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::ExecutionMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_ExecutionMetadata_flyteidl_2fadmin_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsExecutionMetadata_flyteidl_2fadmin_2fexecution_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_NodeExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_WorkflowExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_SystemMetadata_flyteidl_2fadmin_2fexecution_2eproto.base,}};

static void InitDefaultsNotificationList_flyteidl_2fadmin_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_NotificationList_default_instance_;
    new (ptr) ::flyteidl::admin::NotificationList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::NotificationList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NotificationList_flyteidl_2fadmin_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNotificationList_flyteidl_2fadmin_2fexecution_2eproto}, {
      &scc_info_Notification_flyteidl_2fadmin_2fcommon_2eproto.base,}};

static void InitDefaultsExecutionSpec_flyteidl_2fadmin_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_ExecutionSpec_default_instance_;
    new (ptr) ::flyteidl::admin::ExecutionSpec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::ExecutionSpec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<12> scc_info_ExecutionSpec_flyteidl_2fadmin_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 12, InitDefaultsExecutionSpec_flyteidl_2fadmin_2fexecution_2eproto}, {
      &scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_Literal_flyteidl_2fcore_2fliterals_2eproto.base,
      &scc_info_ExecutionMetadata_flyteidl_2fadmin_2fexecution_2eproto.base,
      &scc_info_NotificationList_flyteidl_2fadmin_2fexecution_2eproto.base,
      &scc_info_Labels_flyteidl_2fadmin_2fcommon_2eproto.base,
      &scc_info_Annotations_flyteidl_2fadmin_2fcommon_2eproto.base,
      &scc_info_SecurityContext_flyteidl_2fcore_2fsecurity_2eproto.base,
      &scc_info_AuthRole_flyteidl_2fadmin_2fcommon_2eproto.base,
      &scc_info_QualityOfService_flyteidl_2fcore_2fexecution_2eproto.base,
      &scc_info_RawOutputDataConfig_flyteidl_2fadmin_2fcommon_2eproto.base,
      &scc_info_ClusterAssignment_flyteidl_2fadmin_2fcluster_5fassignment_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsExecutionTerminateRequest_flyteidl_2fadmin_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_ExecutionTerminateRequest_default_instance_;
    new (ptr) ::flyteidl::admin::ExecutionTerminateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::ExecutionTerminateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ExecutionTerminateRequest_flyteidl_2fadmin_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsExecutionTerminateRequest_flyteidl_2fadmin_2fexecution_2eproto}, {
      &scc_info_WorkflowExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsExecutionTerminateResponse_flyteidl_2fadmin_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_ExecutionTerminateResponse_default_instance_;
    new (ptr) ::flyteidl::admin::ExecutionTerminateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::ExecutionTerminateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExecutionTerminateResponse_flyteidl_2fadmin_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExecutionTerminateResponse_flyteidl_2fadmin_2fexecution_2eproto}, {}};

static void InitDefaultsWorkflowExecutionGetDataRequest_flyteidl_2fadmin_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_WorkflowExecutionGetDataRequest_default_instance_;
    new (ptr) ::flyteidl::admin::WorkflowExecutionGetDataRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::WorkflowExecutionGetDataRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WorkflowExecutionGetDataRequest_flyteidl_2fadmin_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWorkflowExecutionGetDataRequest_flyteidl_2fadmin_2fexecution_2eproto}, {
      &scc_info_WorkflowExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsWorkflowExecutionGetDataResponse_flyteidl_2fadmin_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_WorkflowExecutionGetDataResponse_default_instance_;
    new (ptr) ::flyteidl::admin::WorkflowExecutionGetDataResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::WorkflowExecutionGetDataResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_WorkflowExecutionGetDataResponse_flyteidl_2fadmin_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsWorkflowExecutionGetDataResponse_flyteidl_2fadmin_2fexecution_2eproto}, {
      &scc_info_UrlBlob_flyteidl_2fadmin_2fcommon_2eproto.base,
      &scc_info_Literal_flyteidl_2fcore_2fliterals_2eproto.base,}};

static void InitDefaultsExecutionUpdateRequest_flyteidl_2fadmin_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_ExecutionUpdateRequest_default_instance_;
    new (ptr) ::flyteidl::admin::ExecutionUpdateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::ExecutionUpdateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ExecutionUpdateRequest_flyteidl_2fadmin_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsExecutionUpdateRequest_flyteidl_2fadmin_2fexecution_2eproto}, {
      &scc_info_WorkflowExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsExecutionStateChangeDetails_flyteidl_2fadmin_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_ExecutionStateChangeDetails_default_instance_;
    new (ptr) ::flyteidl::admin::ExecutionStateChangeDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::ExecutionStateChangeDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ExecutionStateChangeDetails_flyteidl_2fadmin_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsExecutionStateChangeDetails_flyteidl_2fadmin_2fexecution_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsExecutionUpdateResponse_flyteidl_2fadmin_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_ExecutionUpdateResponse_default_instance_;
    new (ptr) ::flyteidl::admin::ExecutionUpdateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::ExecutionUpdateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExecutionUpdateResponse_flyteidl_2fadmin_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExecutionUpdateResponse_flyteidl_2fadmin_2fexecution_2eproto}, {}};

static void InitDefaultsWorkflowExecutionGetMetricsRequest_flyteidl_2fadmin_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_WorkflowExecutionGetMetricsRequest_default_instance_;
    new (ptr) ::flyteidl::admin::WorkflowExecutionGetMetricsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::WorkflowExecutionGetMetricsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WorkflowExecutionGetMetricsRequest_flyteidl_2fadmin_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWorkflowExecutionGetMetricsRequest_flyteidl_2fadmin_2fexecution_2eproto}, {
      &scc_info_WorkflowExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsWorkflowExecutionGetMetricsResponse_flyteidl_2fadmin_2fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_WorkflowExecutionGetMetricsResponse_default_instance_;
    new (ptr) ::flyteidl::admin::WorkflowExecutionGetMetricsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::WorkflowExecutionGetMetricsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WorkflowExecutionGetMetricsResponse_flyteidl_2fadmin_2fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWorkflowExecutionGetMetricsResponse_flyteidl_2fadmin_2fexecution_2eproto}, {
      &scc_info_Span_flyteidl_2fcore_2fmetrics_2eproto.base,}};

void InitDefaults_flyteidl_2fadmin_2fexecution_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ExecutionCreateRequest_flyteidl_2fadmin_2fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExecutionRelaunchRequest_flyteidl_2fadmin_2fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExecutionRecoverRequest_flyteidl_2fadmin_2fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExecutionCreateResponse_flyteidl_2fadmin_2fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorkflowExecutionGetRequest_flyteidl_2fadmin_2fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Execution_flyteidl_2fadmin_2fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExecutionList_flyteidl_2fadmin_2fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LiteralMapBlob_flyteidl_2fadmin_2fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AbortMetadata_flyteidl_2fadmin_2fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExecutionClosure_flyteidl_2fadmin_2fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SystemMetadata_flyteidl_2fadmin_2fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExecutionMetadata_flyteidl_2fadmin_2fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NotificationList_flyteidl_2fadmin_2fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExecutionSpec_flyteidl_2fadmin_2fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExecutionTerminateRequest_flyteidl_2fadmin_2fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExecutionTerminateResponse_flyteidl_2fadmin_2fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorkflowExecutionGetDataRequest_flyteidl_2fadmin_2fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorkflowExecutionGetDataResponse_flyteidl_2fadmin_2fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExecutionUpdateRequest_flyteidl_2fadmin_2fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExecutionStateChangeDetails_flyteidl_2fadmin_2fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExecutionUpdateResponse_flyteidl_2fadmin_2fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorkflowExecutionGetMetricsRequest_flyteidl_2fadmin_2fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorkflowExecutionGetMetricsResponse_flyteidl_2fadmin_2fexecution_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[23];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fadmin_2fexecution_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fadmin_2fexecution_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fadmin_2fexecution_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionCreateRequest, project_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionCreateRequest, domain_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionCreateRequest, name_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionCreateRequest, spec_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionCreateRequest, inputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionRelaunchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionRelaunchRequest, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionRelaunchRequest, name_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionRelaunchRequest, overwrite_cache_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionRecoverRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionRecoverRequest, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionRecoverRequest, name_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionRecoverRequest, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionCreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionCreateResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionGetRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Execution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Execution, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Execution, spec_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Execution, closure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionList, executions_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionList, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LiteralMapBlob, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LiteralMapBlob, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::admin::LiteralMapBlobDefaultTypeInternal, values_),
  offsetof(::flyteidl::admin::LiteralMapBlobDefaultTypeInternal, uri_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LiteralMapBlob, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::AbortMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::AbortMetadata, cause_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::AbortMetadata, principal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionClosure, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionClosure, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::admin::ExecutionClosureDefaultTypeInternal, outputs_),
  offsetof(::flyteidl::admin::ExecutionClosureDefaultTypeInternal, error_),
  offsetof(::flyteidl::admin::ExecutionClosureDefaultTypeInternal, abort_cause_),
  offsetof(::flyteidl::admin::ExecutionClosureDefaultTypeInternal, abort_metadata_),
  offsetof(::flyteidl::admin::ExecutionClosureDefaultTypeInternal, output_data_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionClosure, computed_inputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionClosure, phase_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionClosure, started_at_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionClosure, duration_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionClosure, created_at_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionClosure, updated_at_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionClosure, notifications_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionClosure, workflow_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionClosure, state_change_details_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionClosure, output_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SystemMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SystemMetadata, execution_cluster_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionMetadata, mode_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionMetadata, principal_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionMetadata, nesting_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionMetadata, scheduled_at_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionMetadata, parent_node_execution_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionMetadata, reference_execution_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionMetadata, system_metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NotificationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NotificationList, notifications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, launch_plan_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, inputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, metadata_),
  offsetof(::flyteidl::admin::ExecutionSpecDefaultTypeInternal, notifications_),
  offsetof(::flyteidl::admin::ExecutionSpecDefaultTypeInternal, disable_all_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, labels_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, annotations_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, security_context_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, auth_role_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, quality_of_service_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, max_parallelism_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, raw_output_data_config_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, cluster_assignment_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, interruptible_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, overwrite_cache_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, notification_overrides_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionTerminateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionTerminateRequest, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionTerminateRequest, cause_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionTerminateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionGetDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionGetDataRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionGetDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionGetDataResponse, outputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionGetDataResponse, inputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionGetDataResponse, full_inputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionGetDataResponse, full_outputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionUpdateRequest, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionUpdateRequest, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionStateChangeDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionStateChangeDetails, state_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionStateChangeDetails, occurred_at_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionStateChangeDetails, principal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionUpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionGetMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionGetMetricsRequest, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionGetMetricsRequest, depth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionGetMetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionGetMetricsResponse, span_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::admin::ExecutionCreateRequest)},
  { 10, -1, sizeof(::flyteidl::admin::ExecutionRelaunchRequest)},
  { 18, -1, sizeof(::flyteidl::admin::ExecutionRecoverRequest)},
  { 26, -1, sizeof(::flyteidl::admin::ExecutionCreateResponse)},
  { 32, -1, sizeof(::flyteidl::admin::WorkflowExecutionGetRequest)},
  { 38, -1, sizeof(::flyteidl::admin::Execution)},
  { 46, -1, sizeof(::flyteidl::admin::ExecutionList)},
  { 53, -1, sizeof(::flyteidl::admin::LiteralMapBlob)},
  { 61, -1, sizeof(::flyteidl::admin::AbortMetadata)},
  { 68, -1, sizeof(::flyteidl::admin::ExecutionClosure)},
  { 88, -1, sizeof(::flyteidl::admin::SystemMetadata)},
  { 94, -1, sizeof(::flyteidl::admin::ExecutionMetadata)},
  { 106, -1, sizeof(::flyteidl::admin::NotificationList)},
  { 112, -1, sizeof(::flyteidl::admin::ExecutionSpec)},
  { 133, -1, sizeof(::flyteidl::admin::ExecutionTerminateRequest)},
  { 140, -1, sizeof(::flyteidl::admin::ExecutionTerminateResponse)},
  { 145, -1, sizeof(::flyteidl::admin::WorkflowExecutionGetDataRequest)},
  { 151, -1, sizeof(::flyteidl::admin::WorkflowExecutionGetDataResponse)},
  { 160, -1, sizeof(::flyteidl::admin::ExecutionUpdateRequest)},
  { 167, -1, sizeof(::flyteidl::admin::ExecutionStateChangeDetails)},
  { 175, -1, sizeof(::flyteidl::admin::ExecutionUpdateResponse)},
  { 180, -1, sizeof(::flyteidl::admin::WorkflowExecutionGetMetricsRequest)},
  { 187, -1, sizeof(::flyteidl::admin::WorkflowExecutionGetMetricsResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_ExecutionCreateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_ExecutionRelaunchRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_ExecutionRecoverRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_ExecutionCreateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_WorkflowExecutionGetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_Execution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_ExecutionList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_LiteralMapBlob_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_AbortMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_ExecutionClosure_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_SystemMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_ExecutionMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_NotificationList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_ExecutionSpec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_ExecutionTerminateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_ExecutionTerminateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_WorkflowExecutionGetDataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_WorkflowExecutionGetDataResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_ExecutionUpdateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_ExecutionStateChangeDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_ExecutionUpdateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_WorkflowExecutionGetMetricsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_WorkflowExecutionGetMetricsResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fadmin_2fexecution_2eproto = {
  {}, AddDescriptors_flyteidl_2fadmin_2fexecution_2eproto, "flyteidl/admin/execution.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fadmin_2fexecution_2eproto::offsets,
  file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto, 23, file_level_enum_descriptors_flyteidl_2fadmin_2fexecution_2eproto, file_level_service_descriptors_flyteidl_2fadmin_2fexecution_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fadmin_2fexecution_2eproto[] =
  "\n\036flyteidl/admin/execution.proto\022\016flytei"
  "dl.admin\032\'flyteidl/admin/cluster_assignm"
  "ent.proto\032\033flyteidl/admin/common.proto\032\034"
  "flyteidl/core/literals.proto\032\035flyteidl/c"
  "ore/execution.proto\032\036flyteidl/core/ident"
  "ifier.proto\032\033flyteidl/core/metrics.proto"
  "\032\034flyteidl/core/security.proto\032\036google/p"
  "rotobuf/duration.proto\032\037google/protobuf/"
  "timestamp.proto\032\036google/protobuf/wrapper"
  "s.proto\"\237\001\n\026ExecutionCreateRequest\022\017\n\007pr"
  "oject\030\001 \001(\t\022\016\n\006domain\030\002 \001(\t\022\014\n\004name\030\003 \001("
  "\t\022+\n\004spec\030\004 \001(\0132\035.flyteidl.admin.Executi"
  "onSpec\022)\n\006inputs\030\005 \001(\0132\031.flyteidl.core.L"
  "iteralMap\"\177\n\030ExecutionRelaunchRequest\0226\n"
  "\002id\030\001 \001(\0132*.flyteidl.core.WorkflowExecut"
  "ionIdentifier\022\014\n\004name\030\003 \001(\t\022\027\n\017overwrite"
  "_cache\030\004 \001(\010J\004\010\002\020\003\"\224\001\n\027ExecutionRecoverR"
  "equest\0226\n\002id\030\001 \001(\0132*.flyteidl.core.Workf"
  "lowExecutionIdentifier\022\014\n\004name\030\002 \001(\t\0223\n\010"
  "metadata\030\003 \001(\0132!.flyteidl.admin.Executio"
  "nMetadata\"Q\n\027ExecutionCreateResponse\0226\n\002"
  "id\030\001 \001(\0132*.flyteidl.core.WorkflowExecuti"
  "onIdentifier\"U\n\033WorkflowExecutionGetRequ"
  "est\0226\n\002id\030\001 \001(\0132*.flyteidl.core.Workflow"
  "ExecutionIdentifier\"\243\001\n\tExecution\0226\n\002id\030"
  "\001 \001(\0132*.flyteidl.core.WorkflowExecutionI"
  "dentifier\022+\n\004spec\030\002 \001(\0132\035.flyteidl.admin"
  ".ExecutionSpec\0221\n\007closure\030\003 \001(\0132 .flytei"
  "dl.admin.ExecutionClosure\"M\n\rExecutionLi"
  "st\022-\n\nexecutions\030\001 \003(\0132\031.flyteidl.admin."
  "Execution\022\r\n\005token\030\002 \001(\t\"X\n\016LiteralMapBl"
  "ob\022/\n\006values\030\001 \001(\0132\031.flyteidl.core.Liter"
  "alMapB\002\030\001H\000\022\r\n\003uri\030\002 \001(\tH\000B\006\n\004data\"1\n\rAb"
  "ortMetadata\022\r\n\005cause\030\001 \001(\t\022\021\n\tprincipal\030"
  "\002 \001(\t\"\360\005\n\020ExecutionClosure\0225\n\007outputs\030\001 "
  "\001(\0132\036.flyteidl.admin.LiteralMapBlobB\002\030\001H"
  "\000\022.\n\005error\030\002 \001(\0132\035.flyteidl.core.Executi"
  "onErrorH\000\022\031\n\013abort_cause\030\n \001(\tB\002\030\001H\000\0227\n\016"
  "abort_metadata\030\014 \001(\0132\035.flyteidl.admin.Ab"
  "ortMetadataH\000\0224\n\013output_data\030\r \001(\0132\031.fly"
  "teidl.core.LiteralMapB\002\030\001H\000\0226\n\017computed_"
  "inputs\030\003 \001(\0132\031.flyteidl.core.LiteralMapB"
  "\002\030\001\0225\n\005phase\030\004 \001(\0162&.flyteidl.core.Workf"
  "lowExecution.Phase\022.\n\nstarted_at\030\005 \001(\0132\032"
  ".google.protobuf.Timestamp\022+\n\010duration\030\006"
  " \001(\0132\031.google.protobuf.Duration\022.\n\ncreat"
  "ed_at\030\007 \001(\0132\032.google.protobuf.Timestamp\022"
  ".\n\nupdated_at\030\010 \001(\0132\032.google.protobuf.Ti"
  "mestamp\0223\n\rnotifications\030\t \003(\0132\034.flyteid"
  "l.admin.Notification\022.\n\013workflow_id\030\013 \001("
  "\0132\031.flyteidl.core.Identifier\022I\n\024state_ch"
  "ange_details\030\016 \001(\0132+.flyteidl.admin.Exec"
  "utionStateChangeDetailsB\017\n\routput_result"
  "\"+\n\016SystemMetadata\022\031\n\021execution_cluster\030"
  "\001 \001(\t\"\332\003\n\021ExecutionMetadata\022=\n\004mode\030\001 \001("
  "\0162/.flyteidl.admin.ExecutionMetadata.Exe"
  "cutionMode\022\021\n\tprincipal\030\002 \001(\t\022\017\n\007nesting"
  "\030\003 \001(\r\0220\n\014scheduled_at\030\004 \001(\0132\032.google.pr"
  "otobuf.Timestamp\022E\n\025parent_node_executio"
  "n\030\005 \001(\0132&.flyteidl.core.NodeExecutionIde"
  "ntifier\022G\n\023reference_execution\030\020 \001(\0132*.f"
  "lyteidl.core.WorkflowExecutionIdentifier"
  "\0227\n\017system_metadata\030\021 \001(\0132\036.flyteidl.adm"
  "in.SystemMetadata\"g\n\rExecutionMode\022\n\n\006MA"
  "NUAL\020\000\022\r\n\tSCHEDULED\020\001\022\n\n\006SYSTEM\020\002\022\014\n\010REL"
  "AUNCH\020\003\022\022\n\016CHILD_WORKFLOW\020\004\022\r\n\tRECOVERED"
  "\020\005\"G\n\020NotificationList\0223\n\rnotifications\030"
  "\001 \003(\0132\034.flyteidl.admin.Notification\"\200\006\n\r"
  "ExecutionSpec\022.\n\013launch_plan\030\001 \001(\0132\031.fly"
  "teidl.core.Identifier\022-\n\006inputs\030\002 \001(\0132\031."
  "flyteidl.core.LiteralMapB\002\030\001\0223\n\010metadata"
  "\030\003 \001(\0132!.flyteidl.admin.ExecutionMetadat"
  "a\0229\n\rnotifications\030\005 \001(\0132 .flyteidl.admi"
  "n.NotificationListH\000\022\025\n\013disable_all\030\006 \001("
  "\010H\000\022&\n\006labels\030\007 \001(\0132\026.flyteidl.admin.Lab"
  "els\0220\n\013annotations\030\010 \001(\0132\033.flyteidl.admi"
  "n.Annotations\0228\n\020security_context\030\n \001(\0132"
  "\036.flyteidl.core.SecurityContext\022/\n\tauth_"
  "role\030\020 \001(\0132\030.flyteidl.admin.AuthRoleB\002\030\001"
  "\022;\n\022quality_of_service\030\021 \001(\0132\037.flyteidl."
  "core.QualityOfService\022\027\n\017max_parallelism"
  "\030\022 \001(\005\022C\n\026raw_output_data_config\030\023 \001(\0132#"
  ".flyteidl.admin.RawOutputDataConfig\022=\n\022c"
  "luster_assignment\030\024 \001(\0132!.flyteidl.admin"
  ".ClusterAssignment\0221\n\rinterruptible\030\025 \001("
  "\0132\032.google.protobuf.BoolValue\022\027\n\017overwri"
  "te_cache\030\026 \001(\010B\030\n\026notification_overrides"
  "J\004\010\004\020\005\"b\n\031ExecutionTerminateRequest\0226\n\002i"
  "d\030\001 \001(\0132*.flyteidl.core.WorkflowExecutio"
  "nIdentifier\022\r\n\005cause\030\002 \001(\t\"\034\n\032ExecutionT"
  "erminateResponse\"Y\n\037WorkflowExecutionGet"
  "DataRequest\0226\n\002id\030\001 \001(\0132*.flyteidl.core."
  "WorkflowExecutionIdentifier\"\336\001\n Workflow"
  "ExecutionGetDataResponse\022,\n\007outputs\030\001 \001("
  "\0132\027.flyteidl.admin.UrlBlobB\002\030\001\022+\n\006inputs"
  "\030\002 \001(\0132\027.flyteidl.admin.UrlBlobB\002\030\001\022.\n\013f"
  "ull_inputs\030\003 \001(\0132\031.flyteidl.core.Literal"
  "Map\022/\n\014full_outputs\030\004 \001(\0132\031.flyteidl.cor"
  "e.LiteralMap\"\177\n\026ExecutionUpdateRequest\0226"
  "\n\002id\030\001 \001(\0132*.flyteidl.core.WorkflowExecu"
  "tionIdentifier\022-\n\005state\030\002 \001(\0162\036.flyteidl"
  ".admin.ExecutionState\"\220\001\n\033ExecutionState"
  "ChangeDetails\022-\n\005state\030\001 \001(\0162\036.flyteidl."
  "admin.ExecutionState\022/\n\013occurred_at\030\002 \001("
  "\0132\032.google.protobuf.Timestamp\022\021\n\tprincip"
  "al\030\003 \001(\t\"\031\n\027ExecutionUpdateResponse\"k\n\"W"
  "orkflowExecutionGetMetricsRequest\0226\n\002id\030"
  "\001 \001(\0132*.flyteidl.core.WorkflowExecutionI"
  "dentifier\022\r\n\005depth\030\002 \001(\005\"H\n#WorkflowExec"
  "utionGetMetricsResponse\022!\n\004span\030\001 \001(\0132\023."
  "flyteidl.core.Span*>\n\016ExecutionState\022\024\n\020"
  "EXECUTION_ACTIVE\020\000\022\026\n\022EXECUTION_ARCHIVED"
  "\020\001B7Z5github.com/flyteorg/flyteidl/gen/p"
  "b-go/flyteidl/adminb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2fexecution_2eproto = {
  false, InitDefaults_flyteidl_2fadmin_2fexecution_2eproto, 
  descriptor_table_protodef_flyteidl_2fadmin_2fexecution_2eproto,
  "flyteidl/admin/execution.proto", &assign_descriptors_table_flyteidl_2fadmin_2fexecution_2eproto, 4547,
};

void AddDescriptors_flyteidl_2fadmin_2fexecution_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[10] =
  {
    ::AddDescriptors_flyteidl_2fadmin_2fcluster_5fassignment_2eproto,
    ::AddDescriptors_flyteidl_2fadmin_2fcommon_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fliterals_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fexecution_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fidentifier_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fmetrics_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fsecurity_2eproto,
    ::AddDescriptors_google_2fprotobuf_2fduration_2eproto,
    ::AddDescriptors_google_2fprotobuf_2ftimestamp_2eproto,
    ::AddDescriptors_google_2fprotobuf_2fwrappers_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fadmin_2fexecution_2eproto, deps, 10);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fadmin_2fexecution_2eproto = []() { AddDescriptors_flyteidl_2fadmin_2fexecution_2eproto(); return true; }();
namespace flyteidl {
namespace admin {
const ::google::protobuf::EnumDescriptor* ExecutionMetadata_ExecutionMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flyteidl_2fadmin_2fexecution_2eproto);
  return file_level_enum_descriptors_flyteidl_2fadmin_2fexecution_2eproto[0];
}
bool ExecutionMetadata_ExecutionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ExecutionMetadata_ExecutionMode ExecutionMetadata::MANUAL;
const ExecutionMetadata_ExecutionMode ExecutionMetadata::SCHEDULED;
const ExecutionMetadata_ExecutionMode ExecutionMetadata::SYSTEM;
const ExecutionMetadata_ExecutionMode ExecutionMetadata::RELAUNCH;
const ExecutionMetadata_ExecutionMode ExecutionMetadata::CHILD_WORKFLOW;
const ExecutionMetadata_ExecutionMode ExecutionMetadata::RECOVERED;
const ExecutionMetadata_ExecutionMode ExecutionMetadata::ExecutionMode_MIN;
const ExecutionMetadata_ExecutionMode ExecutionMetadata::ExecutionMode_MAX;
const int ExecutionMetadata::ExecutionMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ExecutionState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flyteidl_2fadmin_2fexecution_2eproto);
  return file_level_enum_descriptors_flyteidl_2fadmin_2fexecution_2eproto[1];
}
bool ExecutionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ExecutionCreateRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_ExecutionCreateRequest_default_instance_._instance.get_mutable()->spec_ = const_cast< ::flyteidl::admin::ExecutionSpec*>(
      ::flyteidl::admin::ExecutionSpec::internal_default_instance());
  ::flyteidl::admin::_ExecutionCreateRequest_default_instance_._instance.get_mutable()->inputs_ = const_cast< ::flyteidl::core::LiteralMap*>(
      ::flyteidl::core::LiteralMap::internal_default_instance());
}
class ExecutionCreateRequest::HasBitSetters {
 public:
  static const ::flyteidl::admin::ExecutionSpec& spec(const ExecutionCreateRequest* msg);
  static const ::flyteidl::core::LiteralMap& inputs(const ExecutionCreateRequest* msg);
};

const ::flyteidl::admin::ExecutionSpec&
ExecutionCreateRequest::HasBitSetters::spec(const ExecutionCreateRequest* msg) {
  return *msg->spec_;
}
const ::flyteidl::core::LiteralMap&
ExecutionCreateRequest::HasBitSetters::inputs(const ExecutionCreateRequest* msg) {
  return *msg->inputs_;
}
void ExecutionCreateRequest::clear_inputs() {
  if (GetArenaNoVirtual() == nullptr && inputs_ != nullptr) {
    delete inputs_;
  }
  inputs_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecutionCreateRequest::kProjectFieldNumber;
const int ExecutionCreateRequest::kDomainFieldNumber;
const int ExecutionCreateRequest::kNameFieldNumber;
const int ExecutionCreateRequest::kSpecFieldNumber;
const int ExecutionCreateRequest::kInputsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutionCreateRequest::ExecutionCreateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.ExecutionCreateRequest)
}
ExecutionCreateRequest::ExecutionCreateRequest(const ExecutionCreateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project().size() > 0) {
    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain().size() > 0) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_spec()) {
    spec_ = new ::flyteidl::admin::ExecutionSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from.has_inputs()) {
    inputs_ = new ::flyteidl::core::LiteralMap(*from.inputs_);
  } else {
    inputs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ExecutionCreateRequest)
}

void ExecutionCreateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ExecutionCreateRequest_flyteidl_2fadmin_2fexecution_2eproto.base);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&spec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inputs_) -
      reinterpret_cast<char*>(&spec_)) + sizeof(inputs_));
}

ExecutionCreateRequest::~ExecutionCreateRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ExecutionCreateRequest)
  SharedDtor();
}

void ExecutionCreateRequest::SharedDtor() {
  project_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete inputs_;
}

void ExecutionCreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecutionCreateRequest& ExecutionCreateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExecutionCreateRequest_flyteidl_2fadmin_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void ExecutionCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.ExecutionCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && inputs_ != nullptr) {
    delete inputs_;
  }
  inputs_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExecutionCreateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExecutionCreateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string project = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.ExecutionCreateRequest.project");
        object = msg->mutable_project();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string domain = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.ExecutionCreateRequest.domain");
        object = msg->mutable_domain();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.ExecutionCreateRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.admin.ExecutionSpec spec = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::ExecutionSpec::_InternalParse;
        object = msg->mutable_spec();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.LiteralMap inputs = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::LiteralMap::_InternalParse;
        object = msg->mutable_inputs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExecutionCreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.ExecutionCreateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project().data(), static_cast<int>(this->project().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.ExecutionCreateRequest.project"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), static_cast<int>(this->domain().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.ExecutionCreateRequest.domain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.ExecutionCreateRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.ExecutionSpec spec = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.LiteralMap inputs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.ExecutionCreateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.ExecutionCreateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExecutionCreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.ExecutionCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ExecutionCreateRequest.project");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project(), output);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ExecutionCreateRequest.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ExecutionCreateRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // .flyteidl.admin.ExecutionSpec spec = 4;
  if (this->has_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::spec(this), output);
  }

  // .flyteidl.core.LiteralMap inputs = 5;
  if (this->has_inputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::inputs(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.ExecutionCreateRequest)
}

::google::protobuf::uint8* ExecutionCreateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.ExecutionCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ExecutionCreateRequest.project");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project(), target);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ExecutionCreateRequest.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->domain(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ExecutionCreateRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // .flyteidl.admin.ExecutionSpec spec = 4;
  if (this->has_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::spec(this), target);
  }

  // .flyteidl.core.LiteralMap inputs = 5;
  if (this->has_inputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::inputs(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.ExecutionCreateRequest)
  return target;
}

size_t ExecutionCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.ExecutionCreateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project());
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .flyteidl.admin.ExecutionSpec spec = 4;
  if (this->has_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .flyteidl.core.LiteralMap inputs = 5;
  if (this->has_inputs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *inputs_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutionCreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.ExecutionCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionCreateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ExecutionCreateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.ExecutionCreateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.ExecutionCreateRequest)
    MergeFrom(*source);
  }
}

void ExecutionCreateRequest::MergeFrom(const ExecutionCreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.ExecutionCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {

    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_spec()) {
    mutable_spec()->::flyteidl::admin::ExecutionSpec::MergeFrom(from.spec());
  }
  if (from.has_inputs()) {
    mutable_inputs()->::flyteidl::core::LiteralMap::MergeFrom(from.inputs());
  }
}

void ExecutionCreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.ExecutionCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionCreateRequest::CopyFrom(const ExecutionCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.ExecutionCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionCreateRequest::IsInitialized() const {
  return true;
}

void ExecutionCreateRequest::Swap(ExecutionCreateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecutionCreateRequest::InternalSwap(ExecutionCreateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_.Swap(&other->project_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  domain_.Swap(&other->domain_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(spec_, other->spec_);
  swap(inputs_, other->inputs_);
}

::google::protobuf::Metadata ExecutionCreateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ExecutionRelaunchRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_ExecutionRelaunchRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::WorkflowExecutionIdentifier*>(
      ::flyteidl::core::WorkflowExecutionIdentifier::internal_default_instance());
}
class ExecutionRelaunchRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::WorkflowExecutionIdentifier& id(const ExecutionRelaunchRequest* msg);
};

const ::flyteidl::core::WorkflowExecutionIdentifier&
ExecutionRelaunchRequest::HasBitSetters::id(const ExecutionRelaunchRequest* msg) {
  return *msg->id_;
}
void ExecutionRelaunchRequest::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecutionRelaunchRequest::kIdFieldNumber;
const int ExecutionRelaunchRequest::kNameFieldNumber;
const int ExecutionRelaunchRequest::kOverwriteCacheFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutionRelaunchRequest::ExecutionRelaunchRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.ExecutionRelaunchRequest)
}
ExecutionRelaunchRequest::ExecutionRelaunchRequest(const ExecutionRelaunchRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_id()) {
    id_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  overwrite_cache_ = from.overwrite_cache_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ExecutionRelaunchRequest)
}

void ExecutionRelaunchRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ExecutionRelaunchRequest_flyteidl_2fadmin_2fexecution_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overwrite_cache_) -
      reinterpret_cast<char*>(&id_)) + sizeof(overwrite_cache_));
}

ExecutionRelaunchRequest::~ExecutionRelaunchRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ExecutionRelaunchRequest)
  SharedDtor();
}

void ExecutionRelaunchRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void ExecutionRelaunchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecutionRelaunchRequest& ExecutionRelaunchRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExecutionRelaunchRequest_flyteidl_2fadmin_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void ExecutionRelaunchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.ExecutionRelaunchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  overwrite_cache_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExecutionRelaunchRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExecutionRelaunchRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::WorkflowExecutionIdentifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.ExecutionRelaunchRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool overwrite_cache = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_overwrite_cache(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExecutionRelaunchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.ExecutionRelaunchRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.ExecutionRelaunchRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool overwrite_cache = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &overwrite_cache_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.ExecutionRelaunchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.ExecutionRelaunchRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExecutionRelaunchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.ExecutionRelaunchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ExecutionRelaunchRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // bool overwrite_cache = 4;
  if (this->overwrite_cache() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->overwrite_cache(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.ExecutionRelaunchRequest)
}

::google::protobuf::uint8* ExecutionRelaunchRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.ExecutionRelaunchRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ExecutionRelaunchRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // bool overwrite_cache = 4;
  if (this->overwrite_cache() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->overwrite_cache(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.ExecutionRelaunchRequest)
  return target;
}

size_t ExecutionRelaunchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.ExecutionRelaunchRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // bool overwrite_cache = 4;
  if (this->overwrite_cache() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutionRelaunchRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.ExecutionRelaunchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionRelaunchRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ExecutionRelaunchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.ExecutionRelaunchRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.ExecutionRelaunchRequest)
    MergeFrom(*source);
  }
}

void ExecutionRelaunchRequest::MergeFrom(const ExecutionRelaunchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.ExecutionRelaunchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_id()) {
    mutable_id()->::flyteidl::core::WorkflowExecutionIdentifier::MergeFrom(from.id());
  }
  if (from.overwrite_cache() != 0) {
    set_overwrite_cache(from.overwrite_cache());
  }
}

void ExecutionRelaunchRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.ExecutionRelaunchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionRelaunchRequest::CopyFrom(const ExecutionRelaunchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.ExecutionRelaunchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionRelaunchRequest::IsInitialized() const {
  return true;
}

void ExecutionRelaunchRequest::Swap(ExecutionRelaunchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecutionRelaunchRequest::InternalSwap(ExecutionRelaunchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(overwrite_cache_, other->overwrite_cache_);
}

::google::protobuf::Metadata ExecutionRelaunchRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ExecutionRecoverRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_ExecutionRecoverRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::WorkflowExecutionIdentifier*>(
      ::flyteidl::core::WorkflowExecutionIdentifier::internal_default_instance());
  ::flyteidl::admin::_ExecutionRecoverRequest_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::flyteidl::admin::ExecutionMetadata*>(
      ::flyteidl::admin::ExecutionMetadata::internal_default_instance());
}
class ExecutionRecoverRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::WorkflowExecutionIdentifier& id(const ExecutionRecoverRequest* msg);
  static const ::flyteidl::admin::ExecutionMetadata& metadata(const ExecutionRecoverRequest* msg);
};

const ::flyteidl::core::WorkflowExecutionIdentifier&
ExecutionRecoverRequest::HasBitSetters::id(const ExecutionRecoverRequest* msg) {
  return *msg->id_;
}
const ::flyteidl::admin::ExecutionMetadata&
ExecutionRecoverRequest::HasBitSetters::metadata(const ExecutionRecoverRequest* msg) {
  return *msg->metadata_;
}
void ExecutionRecoverRequest::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecutionRecoverRequest::kIdFieldNumber;
const int ExecutionRecoverRequest::kNameFieldNumber;
const int ExecutionRecoverRequest::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutionRecoverRequest::ExecutionRecoverRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.ExecutionRecoverRequest)
}
ExecutionRecoverRequest::ExecutionRecoverRequest(const ExecutionRecoverRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_id()) {
    id_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_metadata()) {
    metadata_ = new ::flyteidl::admin::ExecutionMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ExecutionRecoverRequest)
}

void ExecutionRecoverRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ExecutionRecoverRequest_flyteidl_2fadmin_2fexecution_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metadata_) -
      reinterpret_cast<char*>(&id_)) + sizeof(metadata_));
}

ExecutionRecoverRequest::~ExecutionRecoverRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ExecutionRecoverRequest)
  SharedDtor();
}

void ExecutionRecoverRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete metadata_;
}

void ExecutionRecoverRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecutionRecoverRequest& ExecutionRecoverRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExecutionRecoverRequest_flyteidl_2fadmin_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void ExecutionRecoverRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.ExecutionRecoverRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExecutionRecoverRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExecutionRecoverRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::WorkflowExecutionIdentifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.ExecutionRecoverRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.admin.ExecutionMetadata metadata = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::ExecutionMetadata::_InternalParse;
        object = msg->mutable_metadata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExecutionRecoverRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.ExecutionRecoverRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.ExecutionRecoverRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.ExecutionMetadata metadata = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.ExecutionRecoverRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.ExecutionRecoverRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExecutionRecoverRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.ExecutionRecoverRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ExecutionRecoverRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .flyteidl.admin.ExecutionMetadata metadata = 3;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::metadata(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.ExecutionRecoverRequest)
}

::google::protobuf::uint8* ExecutionRecoverRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.ExecutionRecoverRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ExecutionRecoverRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .flyteidl.admin.ExecutionMetadata metadata = 3;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::metadata(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.ExecutionRecoverRequest)
  return target;
}

size_t ExecutionRecoverRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.ExecutionRecoverRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .flyteidl.admin.ExecutionMetadata metadata = 3;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutionRecoverRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.ExecutionRecoverRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionRecoverRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ExecutionRecoverRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.ExecutionRecoverRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.ExecutionRecoverRequest)
    MergeFrom(*source);
  }
}

void ExecutionRecoverRequest::MergeFrom(const ExecutionRecoverRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.ExecutionRecoverRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_id()) {
    mutable_id()->::flyteidl::core::WorkflowExecutionIdentifier::MergeFrom(from.id());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::flyteidl::admin::ExecutionMetadata::MergeFrom(from.metadata());
  }
}

void ExecutionRecoverRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.ExecutionRecoverRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionRecoverRequest::CopyFrom(const ExecutionRecoverRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.ExecutionRecoverRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionRecoverRequest::IsInitialized() const {
  return true;
}

void ExecutionRecoverRequest::Swap(ExecutionRecoverRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecutionRecoverRequest::InternalSwap(ExecutionRecoverRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(metadata_, other->metadata_);
}

::google::protobuf::Metadata ExecutionRecoverRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ExecutionCreateResponse::InitAsDefaultInstance() {
  ::flyteidl::admin::_ExecutionCreateResponse_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::WorkflowExecutionIdentifier*>(
      ::flyteidl::core::WorkflowExecutionIdentifier::internal_default_instance());
}
class ExecutionCreateResponse::HasBitSetters {
 public:
  static const ::flyteidl::core::WorkflowExecutionIdentifier& id(const ExecutionCreateResponse* msg);
};

const ::flyteidl::core::WorkflowExecutionIdentifier&
ExecutionCreateResponse::HasBitSetters::id(const ExecutionCreateResponse* msg) {
  return *msg->id_;
}
void ExecutionCreateResponse::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecutionCreateResponse::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutionCreateResponse::ExecutionCreateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.ExecutionCreateResponse)
}
ExecutionCreateResponse::ExecutionCreateResponse(const ExecutionCreateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ExecutionCreateResponse)
}

void ExecutionCreateResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ExecutionCreateResponse_flyteidl_2fadmin_2fexecution_2eproto.base);
  id_ = nullptr;
}

ExecutionCreateResponse::~ExecutionCreateResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ExecutionCreateResponse)
  SharedDtor();
}

void ExecutionCreateResponse::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void ExecutionCreateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecutionCreateResponse& ExecutionCreateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExecutionCreateResponse_flyteidl_2fadmin_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void ExecutionCreateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.ExecutionCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExecutionCreateResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExecutionCreateResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::WorkflowExecutionIdentifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExecutionCreateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.ExecutionCreateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.ExecutionCreateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.ExecutionCreateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExecutionCreateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.ExecutionCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.ExecutionCreateResponse)
}

::google::protobuf::uint8* ExecutionCreateResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.ExecutionCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.ExecutionCreateResponse)
  return target;
}

size_t ExecutionCreateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.ExecutionCreateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutionCreateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.ExecutionCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionCreateResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ExecutionCreateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.ExecutionCreateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.ExecutionCreateResponse)
    MergeFrom(*source);
  }
}

void ExecutionCreateResponse::MergeFrom(const ExecutionCreateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.ExecutionCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::WorkflowExecutionIdentifier::MergeFrom(from.id());
  }
}

void ExecutionCreateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.ExecutionCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionCreateResponse::CopyFrom(const ExecutionCreateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.ExecutionCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionCreateResponse::IsInitialized() const {
  return true;
}

void ExecutionCreateResponse::Swap(ExecutionCreateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecutionCreateResponse::InternalSwap(ExecutionCreateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata ExecutionCreateResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WorkflowExecutionGetRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_WorkflowExecutionGetRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::WorkflowExecutionIdentifier*>(
      ::flyteidl::core::WorkflowExecutionIdentifier::internal_default_instance());
}
class WorkflowExecutionGetRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::WorkflowExecutionIdentifier& id(const WorkflowExecutionGetRequest* msg);
};

const ::flyteidl::core::WorkflowExecutionIdentifier&
WorkflowExecutionGetRequest::HasBitSetters::id(const WorkflowExecutionGetRequest* msg) {
  return *msg->id_;
}
void WorkflowExecutionGetRequest::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowExecutionGetRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowExecutionGetRequest::WorkflowExecutionGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.WorkflowExecutionGetRequest)
}
WorkflowExecutionGetRequest::WorkflowExecutionGetRequest(const WorkflowExecutionGetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowExecutionGetRequest)
}

void WorkflowExecutionGetRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WorkflowExecutionGetRequest_flyteidl_2fadmin_2fexecution_2eproto.base);
  id_ = nullptr;
}

WorkflowExecutionGetRequest::~WorkflowExecutionGetRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowExecutionGetRequest)
  SharedDtor();
}

void WorkflowExecutionGetRequest::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void WorkflowExecutionGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkflowExecutionGetRequest& WorkflowExecutionGetRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WorkflowExecutionGetRequest_flyteidl_2fadmin_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void WorkflowExecutionGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.WorkflowExecutionGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorkflowExecutionGetRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WorkflowExecutionGetRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::WorkflowExecutionIdentifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkflowExecutionGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.WorkflowExecutionGetRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.WorkflowExecutionGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.WorkflowExecutionGetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorkflowExecutionGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.WorkflowExecutionGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.WorkflowExecutionGetRequest)
}

::google::protobuf::uint8* WorkflowExecutionGetRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.WorkflowExecutionGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.WorkflowExecutionGetRequest)
  return target;
}

size_t WorkflowExecutionGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.WorkflowExecutionGetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkflowExecutionGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.WorkflowExecutionGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowExecutionGetRequest* source =
      ::google::protobuf::DynamicCastToGenerated<WorkflowExecutionGetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.WorkflowExecutionGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.WorkflowExecutionGetRequest)
    MergeFrom(*source);
  }
}

void WorkflowExecutionGetRequest::MergeFrom(const WorkflowExecutionGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.WorkflowExecutionGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::WorkflowExecutionIdentifier::MergeFrom(from.id());
  }
}

void WorkflowExecutionGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.WorkflowExecutionGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowExecutionGetRequest::CopyFrom(const WorkflowExecutionGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.WorkflowExecutionGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowExecutionGetRequest::IsInitialized() const {
  return true;
}

void WorkflowExecutionGetRequest::Swap(WorkflowExecutionGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowExecutionGetRequest::InternalSwap(WorkflowExecutionGetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata WorkflowExecutionGetRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Execution::InitAsDefaultInstance() {
  ::flyteidl::admin::_Execution_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::WorkflowExecutionIdentifier*>(
      ::flyteidl::core::WorkflowExecutionIdentifier::internal_default_instance());
  ::flyteidl::admin::_Execution_default_instance_._instance.get_mutable()->spec_ = const_cast< ::flyteidl::admin::ExecutionSpec*>(
      ::flyteidl::admin::ExecutionSpec::internal_default_instance());
  ::flyteidl::admin::_Execution_default_instance_._instance.get_mutable()->closure_ = const_cast< ::flyteidl::admin::ExecutionClosure*>(
      ::flyteidl::admin::ExecutionClosure::internal_default_instance());
}
class Execution::HasBitSetters {
 public:
  static const ::flyteidl::core::WorkflowExecutionIdentifier& id(const Execution* msg);
  static const ::flyteidl::admin::ExecutionSpec& spec(const Execution* msg);
  static const ::flyteidl::admin::ExecutionClosure& closure(const Execution* msg);
};

const ::flyteidl::core::WorkflowExecutionIdentifier&
Execution::HasBitSetters::id(const Execution* msg) {
  return *msg->id_;
}
const ::flyteidl::admin::ExecutionSpec&
Execution::HasBitSetters::spec(const Execution* msg) {
  return *msg->spec_;
}
const ::flyteidl::admin::ExecutionClosure&
Execution::HasBitSetters::closure(const Execution* msg) {
  return *msg->closure_;
}
void Execution::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Execution::kIdFieldNumber;
const int Execution::kSpecFieldNumber;
const int Execution::kClosureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Execution::Execution()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.Execution)
}
Execution::Execution(const Execution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_spec()) {
    spec_ = new ::flyteidl::admin::ExecutionSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from.has_closure()) {
    closure_ = new ::flyteidl::admin::ExecutionClosure(*from.closure_);
  } else {
    closure_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Execution)
}

void Execution::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Execution_flyteidl_2fadmin_2fexecution_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&closure_) -
      reinterpret_cast<char*>(&id_)) + sizeof(closure_));
}

Execution::~Execution() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Execution)
  SharedDtor();
}

void Execution::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete closure_;
}

void Execution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Execution& Execution::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Execution_flyteidl_2fadmin_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void Execution::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.Execution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && closure_ != nullptr) {
    delete closure_;
  }
  closure_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Execution::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Execution*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::WorkflowExecutionIdentifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.ExecutionSpec spec = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::ExecutionSpec::_InternalParse;
        object = msg->mutable_spec();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.ExecutionClosure closure = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::ExecutionClosure::_InternalParse;
        object = msg->mutable_closure();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Execution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.Execution)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.ExecutionSpec spec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.ExecutionClosure closure = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_closure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.Execution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.Execution)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Execution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.Execution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  // .flyteidl.admin.ExecutionSpec spec = 2;
  if (this->has_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::spec(this), output);
  }

  // .flyteidl.admin.ExecutionClosure closure = 3;
  if (this->has_closure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::closure(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.Execution)
}

::google::protobuf::uint8* Execution::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.Execution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  // .flyteidl.admin.ExecutionSpec spec = 2;
  if (this->has_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::spec(this), target);
  }

  // .flyteidl.admin.ExecutionClosure closure = 3;
  if (this->has_closure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::closure(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.Execution)
  return target;
}

size_t Execution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.Execution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .flyteidl.admin.ExecutionSpec spec = 2;
  if (this->has_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .flyteidl.admin.ExecutionClosure closure = 3;
  if (this->has_closure()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *closure_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Execution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.Execution)
  GOOGLE_DCHECK_NE(&from, this);
  const Execution* source =
      ::google::protobuf::DynamicCastToGenerated<Execution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.Execution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.Execution)
    MergeFrom(*source);
  }
}

void Execution::MergeFrom(const Execution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.Execution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::WorkflowExecutionIdentifier::MergeFrom(from.id());
  }
  if (from.has_spec()) {
    mutable_spec()->::flyteidl::admin::ExecutionSpec::MergeFrom(from.spec());
  }
  if (from.has_closure()) {
    mutable_closure()->::flyteidl::admin::ExecutionClosure::MergeFrom(from.closure());
  }
}

void Execution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.Execution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Execution::CopyFrom(const Execution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.Execution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Execution::IsInitialized() const {
  return true;
}

void Execution::Swap(Execution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Execution::InternalSwap(Execution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(spec_, other->spec_);
  swap(closure_, other->closure_);
}

::google::protobuf::Metadata Execution::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ExecutionList::InitAsDefaultInstance() {
}
class ExecutionList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecutionList::kExecutionsFieldNumber;
const int ExecutionList::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutionList::ExecutionList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.ExecutionList)
}
ExecutionList::ExecutionList(const ExecutionList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      executions_(from.executions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ExecutionList)
}

void ExecutionList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ExecutionList_flyteidl_2fadmin_2fexecution_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ExecutionList::~ExecutionList() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ExecutionList)
  SharedDtor();
}

void ExecutionList::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExecutionList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecutionList& ExecutionList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExecutionList_flyteidl_2fadmin_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void ExecutionList::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.ExecutionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  executions_.Clear();
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExecutionList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExecutionList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .flyteidl.admin.Execution executions = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::admin::Execution::_InternalParse;
          object = msg->add_executions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.ExecutionList.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExecutionList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.ExecutionList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .flyteidl.admin.Execution executions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_executions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.ExecutionList.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.ExecutionList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.ExecutionList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExecutionList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.ExecutionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.admin.Execution executions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->executions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->executions(static_cast<int>(i)),
      output);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ExecutionList.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.ExecutionList)
}

::google::protobuf::uint8* ExecutionList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.ExecutionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.admin.Execution executions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->executions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->executions(static_cast<int>(i)), target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ExecutionList.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.ExecutionList)
  return target;
}

size_t ExecutionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.ExecutionList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.admin.Execution executions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->executions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->executions(static_cast<int>(i)));
    }
  }

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutionList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.ExecutionList)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionList* source =
      ::google::protobuf::DynamicCastToGenerated<ExecutionList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.ExecutionList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.ExecutionList)
    MergeFrom(*source);
  }
}

void ExecutionList::MergeFrom(const ExecutionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.ExecutionList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  executions_.MergeFrom(from.executions_);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void ExecutionList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.ExecutionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionList::CopyFrom(const ExecutionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.ExecutionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionList::IsInitialized() const {
  return true;
}

void ExecutionList::Swap(ExecutionList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecutionList::InternalSwap(ExecutionList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&executions_)->InternalSwap(CastToBase(&other->executions_));
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ExecutionList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LiteralMapBlob::InitAsDefaultInstance() {
  ::flyteidl::admin::_LiteralMapBlob_default_instance_.values_ = const_cast< ::flyteidl::core::LiteralMap*>(
      ::flyteidl::core::LiteralMap::internal_default_instance());
  ::flyteidl::admin::_LiteralMapBlob_default_instance_.uri_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
class LiteralMapBlob::HasBitSetters {
 public:
  static const ::flyteidl::core::LiteralMap& values(const LiteralMapBlob* msg);
};

const ::flyteidl::core::LiteralMap&
LiteralMapBlob::HasBitSetters::values(const LiteralMapBlob* msg) {
  return *msg->data_.values_;
}
void LiteralMapBlob::set_allocated_values(::flyteidl::core::LiteralMap* values) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (values) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      values = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, values, submessage_arena);
    }
    set_has_values();
    data_.values_ = values;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LiteralMapBlob.values)
}
void LiteralMapBlob::clear_values() {
  if (has_values()) {
    delete data_.values_;
    clear_has_data();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LiteralMapBlob::kValuesFieldNumber;
const int LiteralMapBlob::kUriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LiteralMapBlob::LiteralMapBlob()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.LiteralMapBlob)
}
LiteralMapBlob::LiteralMapBlob(const LiteralMapBlob& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kValues: {
      mutable_values()->::flyteidl::core::LiteralMap::MergeFrom(from.values());
      break;
    }
    case kUri: {
      set_uri(from.uri());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LiteralMapBlob)
}

void LiteralMapBlob::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LiteralMapBlob_flyteidl_2fadmin_2fexecution_2eproto.base);
  clear_has_data();
}

LiteralMapBlob::~LiteralMapBlob() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LiteralMapBlob)
  SharedDtor();
}

void LiteralMapBlob::SharedDtor() {
  if (has_data()) {
    clear_data();
  }
}

void LiteralMapBlob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiteralMapBlob& LiteralMapBlob::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LiteralMapBlob_flyteidl_2fadmin_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void LiteralMapBlob::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.admin.LiteralMapBlob)
  switch (data_case()) {
    case kValues: {
      delete data_.values_;
      break;
    }
    case kUri: {
      data_.uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void LiteralMapBlob::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.LiteralMapBlob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LiteralMapBlob::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LiteralMapBlob*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.LiteralMap values = 1 [deprecated = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::LiteralMap::_InternalParse;
        object = msg->mutable_values();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string uri = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.LiteralMapBlob.uri");
        object = msg->mutable_uri();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LiteralMapBlob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.LiteralMapBlob)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.LiteralMap values = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uri = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.LiteralMapBlob.uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.LiteralMapBlob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.LiteralMapBlob)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LiteralMapBlob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.LiteralMapBlob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.LiteralMap values = 1 [deprecated = true];
  if (has_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::values(this), output);
  }

  // string uri = 2;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.LiteralMapBlob.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uri(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.LiteralMapBlob)
}

::google::protobuf::uint8* LiteralMapBlob::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.LiteralMapBlob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.LiteralMap values = 1 [deprecated = true];
  if (has_values()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::values(this), target);
  }

  // string uri = 2;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.LiteralMapBlob.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uri(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.LiteralMapBlob)
  return target;
}

size_t LiteralMapBlob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.LiteralMapBlob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .flyteidl.core.LiteralMap values = 1 [deprecated = true];
    case kValues: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_.values_);
      break;
    }
    // string uri = 2;
    case kUri: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiteralMapBlob::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.LiteralMapBlob)
  GOOGLE_DCHECK_NE(&from, this);
  const LiteralMapBlob* source =
      ::google::protobuf::DynamicCastToGenerated<LiteralMapBlob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.LiteralMapBlob)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.LiteralMapBlob)
    MergeFrom(*source);
  }
}

void LiteralMapBlob::MergeFrom(const LiteralMapBlob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.LiteralMapBlob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kValues: {
      mutable_values()->::flyteidl::core::LiteralMap::MergeFrom(from.values());
      break;
    }
    case kUri: {
      set_uri(from.uri());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void LiteralMapBlob::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.LiteralMapBlob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiteralMapBlob::CopyFrom(const LiteralMapBlob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.LiteralMapBlob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiteralMapBlob::IsInitialized() const {
  return true;
}

void LiteralMapBlob::Swap(LiteralMapBlob* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiteralMapBlob::InternalSwap(LiteralMapBlob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata LiteralMapBlob::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AbortMetadata::InitAsDefaultInstance() {
}
class AbortMetadata::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AbortMetadata::kCauseFieldNumber;
const int AbortMetadata::kPrincipalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AbortMetadata::AbortMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.AbortMetadata)
}
AbortMetadata::AbortMetadata(const AbortMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cause_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cause().size() > 0) {
    cause_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cause_);
  }
  principal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.principal().size() > 0) {
    principal_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.principal_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.AbortMetadata)
}

void AbortMetadata::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AbortMetadata_flyteidl_2fadmin_2fexecution_2eproto.base);
  cause_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  principal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AbortMetadata::~AbortMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.AbortMetadata)
  SharedDtor();
}

void AbortMetadata::SharedDtor() {
  cause_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  principal_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AbortMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AbortMetadata& AbortMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AbortMetadata_flyteidl_2fadmin_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void AbortMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.AbortMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cause_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  principal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AbortMetadata::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AbortMetadata*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string cause = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.AbortMetadata.cause");
        object = msg->mutable_cause();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string principal = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.AbortMetadata.principal");
        object = msg->mutable_principal();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AbortMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.AbortMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cause = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cause()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cause().data(), static_cast<int>(this->cause().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.AbortMetadata.cause"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string principal = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_principal()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->principal().data(), static_cast<int>(this->principal().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.AbortMetadata.principal"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.AbortMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.AbortMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AbortMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.AbortMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cause = 1;
  if (this->cause().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cause().data(), static_cast<int>(this->cause().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.AbortMetadata.cause");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cause(), output);
  }

  // string principal = 2;
  if (this->principal().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->principal().data(), static_cast<int>(this->principal().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.AbortMetadata.principal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->principal(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.AbortMetadata)
}

::google::protobuf::uint8* AbortMetadata::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.AbortMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cause = 1;
  if (this->cause().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cause().data(), static_cast<int>(this->cause().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.AbortMetadata.cause");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cause(), target);
  }

  // string principal = 2;
  if (this->principal().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->principal().data(), static_cast<int>(this->principal().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.AbortMetadata.principal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->principal(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.AbortMetadata)
  return target;
}

size_t AbortMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.AbortMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cause = 1;
  if (this->cause().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cause());
  }

  // string principal = 2;
  if (this->principal().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->principal());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AbortMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.AbortMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const AbortMetadata* source =
      ::google::protobuf::DynamicCastToGenerated<AbortMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.AbortMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.AbortMetadata)
    MergeFrom(*source);
  }
}

void AbortMetadata::MergeFrom(const AbortMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.AbortMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cause().size() > 0) {

    cause_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cause_);
  }
  if (from.principal().size() > 0) {

    principal_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.principal_);
  }
}

void AbortMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.AbortMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbortMetadata::CopyFrom(const AbortMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.AbortMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbortMetadata::IsInitialized() const {
  return true;
}

void AbortMetadata::Swap(AbortMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AbortMetadata::InternalSwap(AbortMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cause_.Swap(&other->cause_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  principal_.Swap(&other->principal_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata AbortMetadata::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ExecutionClosure::InitAsDefaultInstance() {
  ::flyteidl::admin::_ExecutionClosure_default_instance_.outputs_ = const_cast< ::flyteidl::admin::LiteralMapBlob*>(
      ::flyteidl::admin::LiteralMapBlob::internal_default_instance());
  ::flyteidl::admin::_ExecutionClosure_default_instance_.error_ = const_cast< ::flyteidl::core::ExecutionError*>(
      ::flyteidl::core::ExecutionError::internal_default_instance());
  ::flyteidl::admin::_ExecutionClosure_default_instance_.abort_cause_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::flyteidl::admin::_ExecutionClosure_default_instance_.abort_metadata_ = const_cast< ::flyteidl::admin::AbortMetadata*>(
      ::flyteidl::admin::AbortMetadata::internal_default_instance());
  ::flyteidl::admin::_ExecutionClosure_default_instance_.output_data_ = const_cast< ::flyteidl::core::LiteralMap*>(
      ::flyteidl::core::LiteralMap::internal_default_instance());
  ::flyteidl::admin::_ExecutionClosure_default_instance_._instance.get_mutable()->computed_inputs_ = const_cast< ::flyteidl::core::LiteralMap*>(
      ::flyteidl::core::LiteralMap::internal_default_instance());
  ::flyteidl::admin::_ExecutionClosure_default_instance_._instance.get_mutable()->started_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::flyteidl::admin::_ExecutionClosure_default_instance_._instance.get_mutable()->duration_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::flyteidl::admin::_ExecutionClosure_default_instance_._instance.get_mutable()->created_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::flyteidl::admin::_ExecutionClosure_default_instance_._instance.get_mutable()->updated_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::flyteidl::admin::_ExecutionClosure_default_instance_._instance.get_mutable()->workflow_id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
  ::flyteidl::admin::_ExecutionClosure_default_instance_._instance.get_mutable()->state_change_details_ = const_cast< ::flyteidl::admin::ExecutionStateChangeDetails*>(
      ::flyteidl::admin::ExecutionStateChangeDetails::internal_default_instance());
}
class ExecutionClosure::HasBitSetters {
 public:
  static const ::flyteidl::admin::LiteralMapBlob& outputs(const ExecutionClosure* msg);
  static const ::flyteidl::core::ExecutionError& error(const ExecutionClosure* msg);
  static const ::flyteidl::admin::AbortMetadata& abort_metadata(const ExecutionClosure* msg);
  static const ::flyteidl::core::LiteralMap& output_data(const ExecutionClosure* msg);
  static const ::flyteidl::core::LiteralMap& computed_inputs(const ExecutionClosure* msg);
  static const ::google::protobuf::Timestamp& started_at(const ExecutionClosure* msg);
  static const ::google::protobuf::Duration& duration(const ExecutionClosure* msg);
  static const ::google::protobuf::Timestamp& created_at(const ExecutionClosure* msg);
  static const ::google::protobuf::Timestamp& updated_at(const ExecutionClosure* msg);
  static const ::flyteidl::core::Identifier& workflow_id(const ExecutionClosure* msg);
  static const ::flyteidl::admin::ExecutionStateChangeDetails& state_change_details(const ExecutionClosure* msg);
};

const ::flyteidl::admin::LiteralMapBlob&
ExecutionClosure::HasBitSetters::outputs(const ExecutionClosure* msg) {
  return *msg->output_result_.outputs_;
}
const ::flyteidl::core::ExecutionError&
ExecutionClosure::HasBitSetters::error(const ExecutionClosure* msg) {
  return *msg->output_result_.error_;
}
const ::flyteidl::admin::AbortMetadata&
ExecutionClosure::HasBitSetters::abort_metadata(const ExecutionClosure* msg) {
  return *msg->output_result_.abort_metadata_;
}
const ::flyteidl::core::LiteralMap&
ExecutionClosure::HasBitSetters::output_data(const ExecutionClosure* msg) {
  return *msg->output_result_.output_data_;
}
const ::flyteidl::core::LiteralMap&
ExecutionClosure::HasBitSetters::computed_inputs(const ExecutionClosure* msg) {
  return *msg->computed_inputs_;
}
const ::google::protobuf::Timestamp&
ExecutionClosure::HasBitSetters::started_at(const ExecutionClosure* msg) {
  return *msg->started_at_;
}
const ::google::protobuf::Duration&
ExecutionClosure::HasBitSetters::duration(const ExecutionClosure* msg) {
  return *msg->duration_;
}
const ::google::protobuf::Timestamp&
ExecutionClosure::HasBitSetters::created_at(const ExecutionClosure* msg) {
  return *msg->created_at_;
}
const ::google::protobuf::Timestamp&
ExecutionClosure::HasBitSetters::updated_at(const ExecutionClosure* msg) {
  return *msg->updated_at_;
}
const ::flyteidl::core::Identifier&
ExecutionClosure::HasBitSetters::workflow_id(const ExecutionClosure* msg) {
  return *msg->workflow_id_;
}
const ::flyteidl::admin::ExecutionStateChangeDetails&
ExecutionClosure::HasBitSetters::state_change_details(const ExecutionClosure* msg) {
  return *msg->state_change_details_;
}
void ExecutionClosure::set_allocated_outputs(::flyteidl::admin::LiteralMapBlob* outputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_output_result();
  if (outputs) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      outputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, outputs, submessage_arena);
    }
    set_has_outputs();
    output_result_.outputs_ = outputs;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionClosure.outputs)
}
void ExecutionClosure::set_allocated_error(::flyteidl::core::ExecutionError* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_output_result();
  if (error) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    output_result_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionClosure.error)
}
void ExecutionClosure::clear_error() {
  if (has_error()) {
    delete output_result_.error_;
    clear_has_output_result();
  }
}
void ExecutionClosure::set_allocated_abort_metadata(::flyteidl::admin::AbortMetadata* abort_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_output_result();
  if (abort_metadata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      abort_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, abort_metadata, submessage_arena);
    }
    set_has_abort_metadata();
    output_result_.abort_metadata_ = abort_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionClosure.abort_metadata)
}
void ExecutionClosure::set_allocated_output_data(::flyteidl::core::LiteralMap* output_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_output_result();
  if (output_data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      output_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, output_data, submessage_arena);
    }
    set_has_output_data();
    output_result_.output_data_ = output_data;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionClosure.output_data)
}
void ExecutionClosure::clear_output_data() {
  if (has_output_data()) {
    delete output_result_.output_data_;
    clear_has_output_result();
  }
}
void ExecutionClosure::clear_computed_inputs() {
  if (GetArenaNoVirtual() == nullptr && computed_inputs_ != nullptr) {
    delete computed_inputs_;
  }
  computed_inputs_ = nullptr;
}
void ExecutionClosure::clear_started_at() {
  if (GetArenaNoVirtual() == nullptr && started_at_ != nullptr) {
    delete started_at_;
  }
  started_at_ = nullptr;
}
void ExecutionClosure::clear_duration() {
  if (GetArenaNoVirtual() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
}
void ExecutionClosure::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void ExecutionClosure::clear_updated_at() {
  if (GetArenaNoVirtual() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
}
void ExecutionClosure::clear_notifications() {
  notifications_.Clear();
}
void ExecutionClosure::clear_workflow_id() {
  if (GetArenaNoVirtual() == nullptr && workflow_id_ != nullptr) {
    delete workflow_id_;
  }
  workflow_id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecutionClosure::kOutputsFieldNumber;
const int ExecutionClosure::kErrorFieldNumber;
const int ExecutionClosure::kAbortCauseFieldNumber;
const int ExecutionClosure::kAbortMetadataFieldNumber;
const int ExecutionClosure::kOutputDataFieldNumber;
const int ExecutionClosure::kComputedInputsFieldNumber;
const int ExecutionClosure::kPhaseFieldNumber;
const int ExecutionClosure::kStartedAtFieldNumber;
const int ExecutionClosure::kDurationFieldNumber;
const int ExecutionClosure::kCreatedAtFieldNumber;
const int ExecutionClosure::kUpdatedAtFieldNumber;
const int ExecutionClosure::kNotificationsFieldNumber;
const int ExecutionClosure::kWorkflowIdFieldNumber;
const int ExecutionClosure::kStateChangeDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutionClosure::ExecutionClosure()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.ExecutionClosure)
}
ExecutionClosure::ExecutionClosure(const ExecutionClosure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_computed_inputs()) {
    computed_inputs_ = new ::flyteidl::core::LiteralMap(*from.computed_inputs_);
  } else {
    computed_inputs_ = nullptr;
  }
  if (from.has_started_at()) {
    started_at_ = new ::google::protobuf::Timestamp(*from.started_at_);
  } else {
    started_at_ = nullptr;
  }
  if (from.has_duration()) {
    duration_ = new ::google::protobuf::Duration(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  if (from.has_created_at()) {
    created_at_ = new ::google::protobuf::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from.has_updated_at()) {
    updated_at_ = new ::google::protobuf::Timestamp(*from.updated_at_);
  } else {
    updated_at_ = nullptr;
  }
  if (from.has_workflow_id()) {
    workflow_id_ = new ::flyteidl::core::Identifier(*from.workflow_id_);
  } else {
    workflow_id_ = nullptr;
  }
  if (from.has_state_change_details()) {
    state_change_details_ = new ::flyteidl::admin::ExecutionStateChangeDetails(*from.state_change_details_);
  } else {
    state_change_details_ = nullptr;
  }
  phase_ = from.phase_;
  clear_has_output_result();
  switch (from.output_result_case()) {
    case kOutputs: {
      mutable_outputs()->::flyteidl::admin::LiteralMapBlob::MergeFrom(from.outputs());
      break;
    }
    case kError: {
      mutable_error()->::flyteidl::core::ExecutionError::MergeFrom(from.error());
      break;
    }
    case kAbortCause: {
      set_abort_cause(from.abort_cause());
      break;
    }
    case kAbortMetadata: {
      mutable_abort_metadata()->::flyteidl::admin::AbortMetadata::MergeFrom(from.abort_metadata());
      break;
    }
    case kOutputData: {
      mutable_output_data()->::flyteidl::core::LiteralMap::MergeFrom(from.output_data());
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ExecutionClosure)
}

void ExecutionClosure::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ExecutionClosure_flyteidl_2fadmin_2fexecution_2eproto.base);
  ::memset(&computed_inputs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_) -
      reinterpret_cast<char*>(&computed_inputs_)) + sizeof(phase_));
  clear_has_output_result();
}

ExecutionClosure::~ExecutionClosure() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ExecutionClosure)
  SharedDtor();
}

void ExecutionClosure::SharedDtor() {
  if (this != internal_default_instance()) delete computed_inputs_;
  if (this != internal_default_instance()) delete started_at_;
  if (this != internal_default_instance()) delete duration_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete updated_at_;
  if (this != internal_default_instance()) delete workflow_id_;
  if (this != internal_default_instance()) delete state_change_details_;
  if (has_output_result()) {
    clear_output_result();
  }
}

void ExecutionClosure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecutionClosure& ExecutionClosure::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExecutionClosure_flyteidl_2fadmin_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void ExecutionClosure::clear_output_result() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.admin.ExecutionClosure)
  switch (output_result_case()) {
    case kOutputs: {
      delete output_result_.outputs_;
      break;
    }
    case kError: {
      delete output_result_.error_;
      break;
    }
    case kAbortCause: {
      output_result_.abort_cause_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kAbortMetadata: {
      delete output_result_.abort_metadata_;
      break;
    }
    case kOutputData: {
      delete output_result_.output_data_;
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OUTPUT_RESULT_NOT_SET;
}


void ExecutionClosure::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.ExecutionClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notifications_.Clear();
  if (GetArenaNoVirtual() == nullptr && computed_inputs_ != nullptr) {
    delete computed_inputs_;
  }
  computed_inputs_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && started_at_ != nullptr) {
    delete started_at_;
  }
  started_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && workflow_id_ != nullptr) {
    delete workflow_id_;
  }
  workflow_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && state_change_details_ != nullptr) {
    delete state_change_details_;
  }
  state_change_details_ = nullptr;
  phase_ = 0;
  clear_output_result();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExecutionClosure::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExecutionClosure*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.admin.LiteralMapBlob outputs = 1 [deprecated = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::LiteralMapBlob::_InternalParse;
        object = msg->mutable_outputs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.ExecutionError error = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ExecutionError::_InternalParse;
        object = msg->mutable_error();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.LiteralMap computed_inputs = 3 [deprecated = true];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::LiteralMap::_InternalParse;
        object = msg->mutable_computed_inputs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.WorkflowExecution.Phase phase = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_phase(static_cast<::flyteidl::core::WorkflowExecution_Phase>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.protobuf.Timestamp started_at = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_started_at();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Duration duration = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Duration::_InternalParse;
        object = msg->mutable_duration();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp created_at = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_created_at();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp updated_at = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_updated_at();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .flyteidl.admin.Notification notifications = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::admin::Notification::_InternalParse;
          object = msg->add_notifications();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 74 && (ptr += 1));
        break;
      }
      // string abort_cause = 10 [deprecated = true];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.ExecutionClosure.abort_cause");
        object = msg->mutable_abort_cause();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.core.Identifier workflow_id = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Identifier::_InternalParse;
        object = msg->mutable_workflow_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.AbortMetadata abort_metadata = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::AbortMetadata::_InternalParse;
        object = msg->mutable_abort_metadata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.LiteralMap output_data = 13 [deprecated = true];
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::LiteralMap::_InternalParse;
        object = msg->mutable_output_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.ExecutionStateChangeDetails state_change_details = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::ExecutionStateChangeDetails::_InternalParse;
        object = msg->mutable_state_change_details();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExecutionClosure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.ExecutionClosure)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.admin.LiteralMapBlob outputs = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.ExecutionError error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.LiteralMap computed_inputs = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_computed_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.WorkflowExecution.Phase phase = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_phase(static_cast< ::flyteidl::core::WorkflowExecution_Phase >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp started_at = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_started_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration duration = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp created_at = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_created_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp updated_at = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_updated_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.admin.Notification notifications = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_notifications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string abort_cause = 10 [deprecated = true];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_abort_cause()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->abort_cause().data(), static_cast<int>(this->abort_cause().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.ExecutionClosure.abort_cause"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Identifier workflow_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_workflow_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.AbortMetadata abort_metadata = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_abort_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.LiteralMap output_data = 13 [deprecated = true];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_output_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.ExecutionStateChangeDetails state_change_details = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state_change_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.ExecutionClosure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.ExecutionClosure)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExecutionClosure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.ExecutionClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.LiteralMapBlob outputs = 1 [deprecated = true];
  if (has_outputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::outputs(this), output);
  }

  // .flyteidl.core.ExecutionError error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::error(this), output);
  }

  // .flyteidl.core.LiteralMap computed_inputs = 3 [deprecated = true];
  if (this->has_computed_inputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::computed_inputs(this), output);
  }

  // .flyteidl.core.WorkflowExecution.Phase phase = 4;
  if (this->phase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->phase(), output);
  }

  // .google.protobuf.Timestamp started_at = 5;
  if (this->has_started_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::started_at(this), output);
  }

  // .google.protobuf.Duration duration = 6;
  if (this->has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::duration(this), output);
  }

  // .google.protobuf.Timestamp created_at = 7;
  if (this->has_created_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::created_at(this), output);
  }

  // .google.protobuf.Timestamp updated_at = 8;
  if (this->has_updated_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::updated_at(this), output);
  }

  // repeated .flyteidl.admin.Notification notifications = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->notifications(static_cast<int>(i)),
      output);
  }

  // string abort_cause = 10 [deprecated = true];
  if (has_abort_cause()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->abort_cause().data(), static_cast<int>(this->abort_cause().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ExecutionClosure.abort_cause");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->abort_cause(), output);
  }

  // .flyteidl.core.Identifier workflow_id = 11;
  if (this->has_workflow_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::workflow_id(this), output);
  }

  // .flyteidl.admin.AbortMetadata abort_metadata = 12;
  if (has_abort_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::abort_metadata(this), output);
  }

  // .flyteidl.core.LiteralMap output_data = 13 [deprecated = true];
  if (has_output_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::output_data(this), output);
  }

  // .flyteidl.admin.ExecutionStateChangeDetails state_change_details = 14;
  if (this->has_state_change_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, HasBitSetters::state_change_details(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.ExecutionClosure)
}

::google::protobuf::uint8* ExecutionClosure::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.ExecutionClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.LiteralMapBlob outputs = 1 [deprecated = true];
  if (has_outputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::outputs(this), target);
  }

  // .flyteidl.core.ExecutionError error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::error(this), target);
  }

  // .flyteidl.core.LiteralMap computed_inputs = 3 [deprecated = true];
  if (this->has_computed_inputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::computed_inputs(this), target);
  }

  // .flyteidl.core.WorkflowExecution.Phase phase = 4;
  if (this->phase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->phase(), target);
  }

  // .google.protobuf.Timestamp started_at = 5;
  if (this->has_started_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::started_at(this), target);
  }

  // .google.protobuf.Duration duration = 6;
  if (this->has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::duration(this), target);
  }

  // .google.protobuf.Timestamp created_at = 7;
  if (this->has_created_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::created_at(this), target);
  }

  // .google.protobuf.Timestamp updated_at = 8;
  if (this->has_updated_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::updated_at(this), target);
  }

  // repeated .flyteidl.admin.Notification notifications = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->notifications(static_cast<int>(i)), target);
  }

  // string abort_cause = 10 [deprecated = true];
  if (has_abort_cause()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->abort_cause().data(), static_cast<int>(this->abort_cause().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ExecutionClosure.abort_cause");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->abort_cause(), target);
  }

  // .flyteidl.core.Identifier workflow_id = 11;
  if (this->has_workflow_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::workflow_id(this), target);
  }

  // .flyteidl.admin.AbortMetadata abort_metadata = 12;
  if (has_abort_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::abort_metadata(this), target);
  }

  // .flyteidl.core.LiteralMap output_data = 13 [deprecated = true];
  if (has_output_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::output_data(this), target);
  }

  // .flyteidl.admin.ExecutionStateChangeDetails state_change_details = 14;
  if (this->has_state_change_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, HasBitSetters::state_change_details(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.ExecutionClosure)
  return target;
}

size_t ExecutionClosure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.ExecutionClosure)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.admin.Notification notifications = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->notifications_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notifications(static_cast<int>(i)));
    }
  }

  // .flyteidl.core.LiteralMap computed_inputs = 3 [deprecated = true];
  if (this->has_computed_inputs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *computed_inputs_);
  }

  // .google.protobuf.Timestamp started_at = 5;
  if (this->has_started_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *started_at_);
  }

  // .google.protobuf.Duration duration = 6;
  if (this->has_duration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  // .google.protobuf.Timestamp created_at = 7;
  if (this->has_created_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp updated_at = 8;
  if (this->has_updated_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *updated_at_);
  }

  // .flyteidl.core.Identifier workflow_id = 11;
  if (this->has_workflow_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *workflow_id_);
  }

  // .flyteidl.admin.ExecutionStateChangeDetails state_change_details = 14;
  if (this->has_state_change_details()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *state_change_details_);
  }

  // .flyteidl.core.WorkflowExecution.Phase phase = 4;
  if (this->phase() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
  }

  switch (output_result_case()) {
    // .flyteidl.admin.LiteralMapBlob outputs = 1 [deprecated = true];
    case kOutputs: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *output_result_.outputs_);
      break;
    }
    // .flyteidl.core.ExecutionError error = 2;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *output_result_.error_);
      break;
    }
    // string abort_cause = 10 [deprecated = true];
    case kAbortCause: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->abort_cause());
      break;
    }
    // .flyteidl.admin.AbortMetadata abort_metadata = 12;
    case kAbortMetadata: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *output_result_.abort_metadata_);
      break;
    }
    // .flyteidl.core.LiteralMap output_data = 13 [deprecated = true];
    case kOutputData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *output_result_.output_data_);
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutionClosure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.ExecutionClosure)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionClosure* source =
      ::google::protobuf::DynamicCastToGenerated<ExecutionClosure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.ExecutionClosure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.ExecutionClosure)
    MergeFrom(*source);
  }
}

void ExecutionClosure::MergeFrom(const ExecutionClosure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.ExecutionClosure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notifications_.MergeFrom(from.notifications_);
  if (from.has_computed_inputs()) {
    mutable_computed_inputs()->::flyteidl::core::LiteralMap::MergeFrom(from.computed_inputs());
  }
  if (from.has_started_at()) {
    mutable_started_at()->::google::protobuf::Timestamp::MergeFrom(from.started_at());
  }
  if (from.has_duration()) {
    mutable_duration()->::google::protobuf::Duration::MergeFrom(from.duration());
  }
  if (from.has_created_at()) {
    mutable_created_at()->::google::protobuf::Timestamp::MergeFrom(from.created_at());
  }
  if (from.has_updated_at()) {
    mutable_updated_at()->::google::protobuf::Timestamp::MergeFrom(from.updated_at());
  }
  if (from.has_workflow_id()) {
    mutable_workflow_id()->::flyteidl::core::Identifier::MergeFrom(from.workflow_id());
  }
  if (from.has_state_change_details()) {
    mutable_state_change_details()->::flyteidl::admin::ExecutionStateChangeDetails::MergeFrom(from.state_change_details());
  }
  if (from.phase() != 0) {
    set_phase(from.phase());
  }
  switch (from.output_result_case()) {
    case kOutputs: {
      mutable_outputs()->::flyteidl::admin::LiteralMapBlob::MergeFrom(from.outputs());
      break;
    }
    case kError: {
      mutable_error()->::flyteidl::core::ExecutionError::MergeFrom(from.error());
      break;
    }
    case kAbortCause: {
      set_abort_cause(from.abort_cause());
      break;
    }
    case kAbortMetadata: {
      mutable_abort_metadata()->::flyteidl::admin::AbortMetadata::MergeFrom(from.abort_metadata());
      break;
    }
    case kOutputData: {
      mutable_output_data()->::flyteidl::core::LiteralMap::MergeFrom(from.output_data());
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
}

void ExecutionClosure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.ExecutionClosure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionClosure::CopyFrom(const ExecutionClosure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.ExecutionClosure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionClosure::IsInitialized() const {
  return true;
}

void ExecutionClosure::Swap(ExecutionClosure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecutionClosure::InternalSwap(ExecutionClosure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&notifications_)->InternalSwap(CastToBase(&other->notifications_));
  swap(computed_inputs_, other->computed_inputs_);
  swap(started_at_, other->started_at_);
  swap(duration_, other->duration_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(workflow_id_, other->workflow_id_);
  swap(state_change_details_, other->state_change_details_);
  swap(phase_, other->phase_);
  swap(output_result_, other->output_result_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata ExecutionClosure::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SystemMetadata::InitAsDefaultInstance() {
}
class SystemMetadata::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemMetadata::kExecutionClusterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemMetadata::SystemMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.SystemMetadata)
}
SystemMetadata::SystemMetadata(const SystemMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  execution_cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.execution_cluster().size() > 0) {
    execution_cluster_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.execution_cluster_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.SystemMetadata)
}

void SystemMetadata::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SystemMetadata_flyteidl_2fadmin_2fexecution_2eproto.base);
  execution_cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SystemMetadata::~SystemMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.SystemMetadata)
  SharedDtor();
}

void SystemMetadata::SharedDtor() {
  execution_cluster_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SystemMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemMetadata& SystemMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SystemMetadata_flyteidl_2fadmin_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void SystemMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.SystemMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  execution_cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemMetadata::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SystemMetadata*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string execution_cluster = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.SystemMetadata.execution_cluster");
        object = msg->mutable_execution_cluster();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.SystemMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string execution_cluster = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_execution_cluster()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->execution_cluster().data(), static_cast<int>(this->execution_cluster().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.SystemMetadata.execution_cluster"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.SystemMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.SystemMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.SystemMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string execution_cluster = 1;
  if (this->execution_cluster().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->execution_cluster().data(), static_cast<int>(this->execution_cluster().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.SystemMetadata.execution_cluster");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->execution_cluster(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.SystemMetadata)
}

::google::protobuf::uint8* SystemMetadata::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.SystemMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string execution_cluster = 1;
  if (this->execution_cluster().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->execution_cluster().data(), static_cast<int>(this->execution_cluster().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.SystemMetadata.execution_cluster");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->execution_cluster(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.SystemMetadata)
  return target;
}

size_t SystemMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.SystemMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string execution_cluster = 1;
  if (this->execution_cluster().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->execution_cluster());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.SystemMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemMetadata* source =
      ::google::protobuf::DynamicCastToGenerated<SystemMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.SystemMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.SystemMetadata)
    MergeFrom(*source);
  }
}

void SystemMetadata::MergeFrom(const SystemMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.SystemMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.execution_cluster().size() > 0) {

    execution_cluster_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.execution_cluster_);
  }
}

void SystemMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.SystemMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemMetadata::CopyFrom(const SystemMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.SystemMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemMetadata::IsInitialized() const {
  return true;
}

void SystemMetadata::Swap(SystemMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemMetadata::InternalSwap(SystemMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  execution_cluster_.Swap(&other->execution_cluster_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata SystemMetadata::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ExecutionMetadata::InitAsDefaultInstance() {
  ::flyteidl::admin::_ExecutionMetadata_default_instance_._instance.get_mutable()->scheduled_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::flyteidl::admin::_ExecutionMetadata_default_instance_._instance.get_mutable()->parent_node_execution_ = const_cast< ::flyteidl::core::NodeExecutionIdentifier*>(
      ::flyteidl::core::NodeExecutionIdentifier::internal_default_instance());
  ::flyteidl::admin::_ExecutionMetadata_default_instance_._instance.get_mutable()->reference_execution_ = const_cast< ::flyteidl::core::WorkflowExecutionIdentifier*>(
      ::flyteidl::core::WorkflowExecutionIdentifier::internal_default_instance());
  ::flyteidl::admin::_ExecutionMetadata_default_instance_._instance.get_mutable()->system_metadata_ = const_cast< ::flyteidl::admin::SystemMetadata*>(
      ::flyteidl::admin::SystemMetadata::internal_default_instance());
}
class ExecutionMetadata::HasBitSetters {
 public:
  static const ::google::protobuf::Timestamp& scheduled_at(const ExecutionMetadata* msg);
  static const ::flyteidl::core::NodeExecutionIdentifier& parent_node_execution(const ExecutionMetadata* msg);
  static const ::flyteidl::core::WorkflowExecutionIdentifier& reference_execution(const ExecutionMetadata* msg);
  static const ::flyteidl::admin::SystemMetadata& system_metadata(const ExecutionMetadata* msg);
};

const ::google::protobuf::Timestamp&
ExecutionMetadata::HasBitSetters::scheduled_at(const ExecutionMetadata* msg) {
  return *msg->scheduled_at_;
}
const ::flyteidl::core::NodeExecutionIdentifier&
ExecutionMetadata::HasBitSetters::parent_node_execution(const ExecutionMetadata* msg) {
  return *msg->parent_node_execution_;
}
const ::flyteidl::core::WorkflowExecutionIdentifier&
ExecutionMetadata::HasBitSetters::reference_execution(const ExecutionMetadata* msg) {
  return *msg->reference_execution_;
}
const ::flyteidl::admin::SystemMetadata&
ExecutionMetadata::HasBitSetters::system_metadata(const ExecutionMetadata* msg) {
  return *msg->system_metadata_;
}
void ExecutionMetadata::clear_scheduled_at() {
  if (GetArenaNoVirtual() == nullptr && scheduled_at_ != nullptr) {
    delete scheduled_at_;
  }
  scheduled_at_ = nullptr;
}
void ExecutionMetadata::clear_parent_node_execution() {
  if (GetArenaNoVirtual() == nullptr && parent_node_execution_ != nullptr) {
    delete parent_node_execution_;
  }
  parent_node_execution_ = nullptr;
}
void ExecutionMetadata::clear_reference_execution() {
  if (GetArenaNoVirtual() == nullptr && reference_execution_ != nullptr) {
    delete reference_execution_;
  }
  reference_execution_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecutionMetadata::kModeFieldNumber;
const int ExecutionMetadata::kPrincipalFieldNumber;
const int ExecutionMetadata::kNestingFieldNumber;
const int ExecutionMetadata::kScheduledAtFieldNumber;
const int ExecutionMetadata::kParentNodeExecutionFieldNumber;
const int ExecutionMetadata::kReferenceExecutionFieldNumber;
const int ExecutionMetadata::kSystemMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutionMetadata::ExecutionMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.ExecutionMetadata)
}
ExecutionMetadata::ExecutionMetadata(const ExecutionMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  principal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.principal().size() > 0) {
    principal_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.principal_);
  }
  if (from.has_scheduled_at()) {
    scheduled_at_ = new ::google::protobuf::Timestamp(*from.scheduled_at_);
  } else {
    scheduled_at_ = nullptr;
  }
  if (from.has_parent_node_execution()) {
    parent_node_execution_ = new ::flyteidl::core::NodeExecutionIdentifier(*from.parent_node_execution_);
  } else {
    parent_node_execution_ = nullptr;
  }
  if (from.has_reference_execution()) {
    reference_execution_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.reference_execution_);
  } else {
    reference_execution_ = nullptr;
  }
  if (from.has_system_metadata()) {
    system_metadata_ = new ::flyteidl::admin::SystemMetadata(*from.system_metadata_);
  } else {
    system_metadata_ = nullptr;
  }
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&nesting_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(nesting_));
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ExecutionMetadata)
}

void ExecutionMetadata::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ExecutionMetadata_flyteidl_2fadmin_2fexecution_2eproto.base);
  principal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&scheduled_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nesting_) -
      reinterpret_cast<char*>(&scheduled_at_)) + sizeof(nesting_));
}

ExecutionMetadata::~ExecutionMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ExecutionMetadata)
  SharedDtor();
}

void ExecutionMetadata::SharedDtor() {
  principal_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete scheduled_at_;
  if (this != internal_default_instance()) delete parent_node_execution_;
  if (this != internal_default_instance()) delete reference_execution_;
  if (this != internal_default_instance()) delete system_metadata_;
}

void ExecutionMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecutionMetadata& ExecutionMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExecutionMetadata_flyteidl_2fadmin_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void ExecutionMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.ExecutionMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  principal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && scheduled_at_ != nullptr) {
    delete scheduled_at_;
  }
  scheduled_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && parent_node_execution_ != nullptr) {
    delete parent_node_execution_;
  }
  parent_node_execution_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && reference_execution_ != nullptr) {
    delete reference_execution_;
  }
  reference_execution_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && system_metadata_ != nullptr) {
    delete system_metadata_;
  }
  system_metadata_ = nullptr;
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nesting_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(nesting_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExecutionMetadata::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExecutionMetadata*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.admin.ExecutionMetadata.ExecutionMode mode = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_mode(static_cast<::flyteidl::admin::ExecutionMetadata_ExecutionMode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string principal = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.ExecutionMetadata.principal");
        object = msg->mutable_principal();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 nesting = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_nesting(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.protobuf.Timestamp scheduled_at = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_scheduled_at();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.NodeExecutionIdentifier parent_node_execution = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::NodeExecutionIdentifier::_InternalParse;
        object = msg->mutable_parent_node_execution();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.WorkflowExecutionIdentifier reference_execution = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::WorkflowExecutionIdentifier::_InternalParse;
        object = msg->mutable_reference_execution();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.SystemMetadata system_metadata = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::SystemMetadata::_InternalParse;
        object = msg->mutable_system_metadata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExecutionMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.ExecutionMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.admin.ExecutionMetadata.ExecutionMode mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::flyteidl::admin::ExecutionMetadata_ExecutionMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string principal = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_principal()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->principal().data(), static_cast<int>(this->principal().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.ExecutionMetadata.principal"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nesting = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nesting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp scheduled_at = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scheduled_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.NodeExecutionIdentifier parent_node_execution = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parent_node_execution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.WorkflowExecutionIdentifier reference_execution = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reference_execution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.SystemMetadata system_metadata = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_system_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.ExecutionMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.ExecutionMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExecutionMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.ExecutionMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.ExecutionMetadata.ExecutionMode mode = 1;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // string principal = 2;
  if (this->principal().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->principal().data(), static_cast<int>(this->principal().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ExecutionMetadata.principal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->principal(), output);
  }

  // uint32 nesting = 3;
  if (this->nesting() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nesting(), output);
  }

  // .google.protobuf.Timestamp scheduled_at = 4;
  if (this->has_scheduled_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::scheduled_at(this), output);
  }

  // .flyteidl.core.NodeExecutionIdentifier parent_node_execution = 5;
  if (this->has_parent_node_execution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::parent_node_execution(this), output);
  }

  // .flyteidl.core.WorkflowExecutionIdentifier reference_execution = 16;
  if (this->has_reference_execution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::reference_execution(this), output);
  }

  // .flyteidl.admin.SystemMetadata system_metadata = 17;
  if (this->has_system_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, HasBitSetters::system_metadata(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.ExecutionMetadata)
}

::google::protobuf::uint8* ExecutionMetadata::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.ExecutionMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.ExecutionMetadata.ExecutionMode mode = 1;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // string principal = 2;
  if (this->principal().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->principal().data(), static_cast<int>(this->principal().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ExecutionMetadata.principal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->principal(), target);
  }

  // uint32 nesting = 3;
  if (this->nesting() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nesting(), target);
  }

  // .google.protobuf.Timestamp scheduled_at = 4;
  if (this->has_scheduled_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::scheduled_at(this), target);
  }

  // .flyteidl.core.NodeExecutionIdentifier parent_node_execution = 5;
  if (this->has_parent_node_execution()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::parent_node_execution(this), target);
  }

  // .flyteidl.core.WorkflowExecutionIdentifier reference_execution = 16;
  if (this->has_reference_execution()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::reference_execution(this), target);
  }

  // .flyteidl.admin.SystemMetadata system_metadata = 17;
  if (this->has_system_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, HasBitSetters::system_metadata(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.ExecutionMetadata)
  return target;
}

size_t ExecutionMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.ExecutionMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string principal = 2;
  if (this->principal().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->principal());
  }

  // .google.protobuf.Timestamp scheduled_at = 4;
  if (this->has_scheduled_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *scheduled_at_);
  }

  // .flyteidl.core.NodeExecutionIdentifier parent_node_execution = 5;
  if (this->has_parent_node_execution()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *parent_node_execution_);
  }

  // .flyteidl.core.WorkflowExecutionIdentifier reference_execution = 16;
  if (this->has_reference_execution()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reference_execution_);
  }

  // .flyteidl.admin.SystemMetadata system_metadata = 17;
  if (this->has_system_metadata()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *system_metadata_);
  }

  // .flyteidl.admin.ExecutionMetadata.ExecutionMode mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  // uint32 nesting = 3;
  if (this->nesting() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nesting());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutionMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.ExecutionMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionMetadata* source =
      ::google::protobuf::DynamicCastToGenerated<ExecutionMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.ExecutionMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.ExecutionMetadata)
    MergeFrom(*source);
  }
}

void ExecutionMetadata::MergeFrom(const ExecutionMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.ExecutionMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.principal().size() > 0) {

    principal_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.principal_);
  }
  if (from.has_scheduled_at()) {
    mutable_scheduled_at()->::google::protobuf::Timestamp::MergeFrom(from.scheduled_at());
  }
  if (from.has_parent_node_execution()) {
    mutable_parent_node_execution()->::flyteidl::core::NodeExecutionIdentifier::MergeFrom(from.parent_node_execution());
  }
  if (from.has_reference_execution()) {
    mutable_reference_execution()->::flyteidl::core::WorkflowExecutionIdentifier::MergeFrom(from.reference_execution());
  }
  if (from.has_system_metadata()) {
    mutable_system_metadata()->::flyteidl::admin::SystemMetadata::MergeFrom(from.system_metadata());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.nesting() != 0) {
    set_nesting(from.nesting());
  }
}

void ExecutionMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.ExecutionMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionMetadata::CopyFrom(const ExecutionMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.ExecutionMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionMetadata::IsInitialized() const {
  return true;
}

void ExecutionMetadata::Swap(ExecutionMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecutionMetadata::InternalSwap(ExecutionMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  principal_.Swap(&other->principal_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(scheduled_at_, other->scheduled_at_);
  swap(parent_node_execution_, other->parent_node_execution_);
  swap(reference_execution_, other->reference_execution_);
  swap(system_metadata_, other->system_metadata_);
  swap(mode_, other->mode_);
  swap(nesting_, other->nesting_);
}

::google::protobuf::Metadata ExecutionMetadata::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NotificationList::InitAsDefaultInstance() {
}
class NotificationList::HasBitSetters {
 public:
};

void NotificationList::clear_notifications() {
  notifications_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotificationList::kNotificationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotificationList::NotificationList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.NotificationList)
}
NotificationList::NotificationList(const NotificationList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.NotificationList)
}

void NotificationList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NotificationList_flyteidl_2fadmin_2fexecution_2eproto.base);
}

NotificationList::~NotificationList() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.NotificationList)
  SharedDtor();
}

void NotificationList::SharedDtor() {
}

void NotificationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NotificationList& NotificationList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NotificationList_flyteidl_2fadmin_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void NotificationList::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.NotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notifications_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NotificationList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NotificationList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .flyteidl.admin.Notification notifications = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::admin::Notification::_InternalParse;
          object = msg->add_notifications();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NotificationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.NotificationList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .flyteidl.admin.Notification notifications = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_notifications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.NotificationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.NotificationList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NotificationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.NotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.admin.Notification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->notifications(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.NotificationList)
}

::google::protobuf::uint8* NotificationList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.NotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.admin.Notification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->notifications(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.NotificationList)
  return target;
}

size_t NotificationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.NotificationList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.admin.Notification notifications = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->notifications_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notifications(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotificationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.NotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  const NotificationList* source =
      ::google::protobuf::DynamicCastToGenerated<NotificationList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.NotificationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.NotificationList)
    MergeFrom(*source);
  }
}

void NotificationList::MergeFrom(const NotificationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.NotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notifications_.MergeFrom(from.notifications_);
}

void NotificationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.NotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotificationList::CopyFrom(const NotificationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.NotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationList::IsInitialized() const {
  return true;
}

void NotificationList::Swap(NotificationList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotificationList::InternalSwap(NotificationList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&notifications_)->InternalSwap(CastToBase(&other->notifications_));
}

::google::protobuf::Metadata NotificationList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ExecutionSpec::InitAsDefaultInstance() {
  ::flyteidl::admin::_ExecutionSpec_default_instance_._instance.get_mutable()->launch_plan_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
  ::flyteidl::admin::_ExecutionSpec_default_instance_._instance.get_mutable()->inputs_ = const_cast< ::flyteidl::core::LiteralMap*>(
      ::flyteidl::core::LiteralMap::internal_default_instance());
  ::flyteidl::admin::_ExecutionSpec_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::flyteidl::admin::ExecutionMetadata*>(
      ::flyteidl::admin::ExecutionMetadata::internal_default_instance());
  ::flyteidl::admin::_ExecutionSpec_default_instance_.notifications_ = const_cast< ::flyteidl::admin::NotificationList*>(
      ::flyteidl::admin::NotificationList::internal_default_instance());
  ::flyteidl::admin::_ExecutionSpec_default_instance_.disable_all_ = false;
  ::flyteidl::admin::_ExecutionSpec_default_instance_._instance.get_mutable()->labels_ = const_cast< ::flyteidl::admin::Labels*>(
      ::flyteidl::admin::Labels::internal_default_instance());
  ::flyteidl::admin::_ExecutionSpec_default_instance_._instance.get_mutable()->annotations_ = const_cast< ::flyteidl::admin::Annotations*>(
      ::flyteidl::admin::Annotations::internal_default_instance());
  ::flyteidl::admin::_ExecutionSpec_default_instance_._instance.get_mutable()->security_context_ = const_cast< ::flyteidl::core::SecurityContext*>(
      ::flyteidl::core::SecurityContext::internal_default_instance());
  ::flyteidl::admin::_ExecutionSpec_default_instance_._instance.get_mutable()->auth_role_ = const_cast< ::flyteidl::admin::AuthRole*>(
      ::flyteidl::admin::AuthRole::internal_default_instance());
  ::flyteidl::admin::_ExecutionSpec_default_instance_._instance.get_mutable()->quality_of_service_ = const_cast< ::flyteidl::core::QualityOfService*>(
      ::flyteidl::core::QualityOfService::internal_default_instance());
  ::flyteidl::admin::_ExecutionSpec_default_instance_._instance.get_mutable()->raw_output_data_config_ = const_cast< ::flyteidl::admin::RawOutputDataConfig*>(
      ::flyteidl::admin::RawOutputDataConfig::internal_default_instance());
  ::flyteidl::admin::_ExecutionSpec_default_instance_._instance.get_mutable()->cluster_assignment_ = const_cast< ::flyteidl::admin::ClusterAssignment*>(
      ::flyteidl::admin::ClusterAssignment::internal_default_instance());
  ::flyteidl::admin::_ExecutionSpec_default_instance_._instance.get_mutable()->interruptible_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
}
class ExecutionSpec::HasBitSetters {
 public:
  static const ::flyteidl::core::Identifier& launch_plan(const ExecutionSpec* msg);
  static const ::flyteidl::core::LiteralMap& inputs(const ExecutionSpec* msg);
  static const ::flyteidl::admin::ExecutionMetadata& metadata(const ExecutionSpec* msg);
  static const ::flyteidl::admin::NotificationList& notifications(const ExecutionSpec* msg);
  static const ::flyteidl::admin::Labels& labels(const ExecutionSpec* msg);
  static const ::flyteidl::admin::Annotations& annotations(const ExecutionSpec* msg);
  static const ::flyteidl::core::SecurityContext& security_context(const ExecutionSpec* msg);
  static const ::flyteidl::admin::AuthRole& auth_role(const ExecutionSpec* msg);
  static const ::flyteidl::core::QualityOfService& quality_of_service(const ExecutionSpec* msg);
  static const ::flyteidl::admin::RawOutputDataConfig& raw_output_data_config(const ExecutionSpec* msg);
  static const ::flyteidl::admin::ClusterAssignment& cluster_assignment(const ExecutionSpec* msg);
  static const ::google::protobuf::BoolValue& interruptible(const ExecutionSpec* msg);
};

const ::flyteidl::core::Identifier&
ExecutionSpec::HasBitSetters::launch_plan(const ExecutionSpec* msg) {
  return *msg->launch_plan_;
}
const ::flyteidl::core::LiteralMap&
ExecutionSpec::HasBitSetters::inputs(const ExecutionSpec* msg) {
  return *msg->inputs_;
}
const ::flyteidl::admin::ExecutionMetadata&
ExecutionSpec::HasBitSetters::metadata(const ExecutionSpec* msg) {
  return *msg->metadata_;
}
const ::flyteidl::admin::NotificationList&
ExecutionSpec::HasBitSetters::notifications(const ExecutionSpec* msg) {
  return *msg->notification_overrides_.notifications_;
}
const ::flyteidl::admin::Labels&
ExecutionSpec::HasBitSetters::labels(const ExecutionSpec* msg) {
  return *msg->labels_;
}
const ::flyteidl::admin::Annotations&
ExecutionSpec::HasBitSetters::annotations(const ExecutionSpec* msg) {
  return *msg->annotations_;
}
const ::flyteidl::core::SecurityContext&
ExecutionSpec::HasBitSetters::security_context(const ExecutionSpec* msg) {
  return *msg->security_context_;
}
const ::flyteidl::admin::AuthRole&
ExecutionSpec::HasBitSetters::auth_role(const ExecutionSpec* msg) {
  return *msg->auth_role_;
}
const ::flyteidl::core::QualityOfService&
ExecutionSpec::HasBitSetters::quality_of_service(const ExecutionSpec* msg) {
  return *msg->quality_of_service_;
}
const ::flyteidl::admin::RawOutputDataConfig&
ExecutionSpec::HasBitSetters::raw_output_data_config(const ExecutionSpec* msg) {
  return *msg->raw_output_data_config_;
}
const ::flyteidl::admin::ClusterAssignment&
ExecutionSpec::HasBitSetters::cluster_assignment(const ExecutionSpec* msg) {
  return *msg->cluster_assignment_;
}
const ::google::protobuf::BoolValue&
ExecutionSpec::HasBitSetters::interruptible(const ExecutionSpec* msg) {
  return *msg->interruptible_;
}
void ExecutionSpec::clear_launch_plan() {
  if (GetArenaNoVirtual() == nullptr && launch_plan_ != nullptr) {
    delete launch_plan_;
  }
  launch_plan_ = nullptr;
}
void ExecutionSpec::clear_inputs() {
  if (GetArenaNoVirtual() == nullptr && inputs_ != nullptr) {
    delete inputs_;
  }
  inputs_ = nullptr;
}
void ExecutionSpec::set_allocated_notifications(::flyteidl::admin::NotificationList* notifications) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_notification_overrides();
  if (notifications) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      notifications = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, notifications, submessage_arena);
    }
    set_has_notifications();
    notification_overrides_.notifications_ = notifications;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionSpec.notifications)
}
void ExecutionSpec::clear_labels() {
  if (GetArenaNoVirtual() == nullptr && labels_ != nullptr) {
    delete labels_;
  }
  labels_ = nullptr;
}
void ExecutionSpec::clear_annotations() {
  if (GetArenaNoVirtual() == nullptr && annotations_ != nullptr) {
    delete annotations_;
  }
  annotations_ = nullptr;
}
void ExecutionSpec::clear_security_context() {
  if (GetArenaNoVirtual() == nullptr && security_context_ != nullptr) {
    delete security_context_;
  }
  security_context_ = nullptr;
}
void ExecutionSpec::clear_auth_role() {
  if (GetArenaNoVirtual() == nullptr && auth_role_ != nullptr) {
    delete auth_role_;
  }
  auth_role_ = nullptr;
}
void ExecutionSpec::clear_quality_of_service() {
  if (GetArenaNoVirtual() == nullptr && quality_of_service_ != nullptr) {
    delete quality_of_service_;
  }
  quality_of_service_ = nullptr;
}
void ExecutionSpec::clear_raw_output_data_config() {
  if (GetArenaNoVirtual() == nullptr && raw_output_data_config_ != nullptr) {
    delete raw_output_data_config_;
  }
  raw_output_data_config_ = nullptr;
}
void ExecutionSpec::clear_cluster_assignment() {
  if (GetArenaNoVirtual() == nullptr && cluster_assignment_ != nullptr) {
    delete cluster_assignment_;
  }
  cluster_assignment_ = nullptr;
}
void ExecutionSpec::clear_interruptible() {
  if (GetArenaNoVirtual() == nullptr && interruptible_ != nullptr) {
    delete interruptible_;
  }
  interruptible_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecutionSpec::kLaunchPlanFieldNumber;
const int ExecutionSpec::kInputsFieldNumber;
const int ExecutionSpec::kMetadataFieldNumber;
const int ExecutionSpec::kNotificationsFieldNumber;
const int ExecutionSpec::kDisableAllFieldNumber;
const int ExecutionSpec::kLabelsFieldNumber;
const int ExecutionSpec::kAnnotationsFieldNumber;
const int ExecutionSpec::kSecurityContextFieldNumber;
const int ExecutionSpec::kAuthRoleFieldNumber;
const int ExecutionSpec::kQualityOfServiceFieldNumber;
const int ExecutionSpec::kMaxParallelismFieldNumber;
const int ExecutionSpec::kRawOutputDataConfigFieldNumber;
const int ExecutionSpec::kClusterAssignmentFieldNumber;
const int ExecutionSpec::kInterruptibleFieldNumber;
const int ExecutionSpec::kOverwriteCacheFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutionSpec::ExecutionSpec()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.ExecutionSpec)
}
ExecutionSpec::ExecutionSpec(const ExecutionSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_launch_plan()) {
    launch_plan_ = new ::flyteidl::core::Identifier(*from.launch_plan_);
  } else {
    launch_plan_ = nullptr;
  }
  if (from.has_inputs()) {
    inputs_ = new ::flyteidl::core::LiteralMap(*from.inputs_);
  } else {
    inputs_ = nullptr;
  }
  if (from.has_metadata()) {
    metadata_ = new ::flyteidl::admin::ExecutionMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from.has_labels()) {
    labels_ = new ::flyteidl::admin::Labels(*from.labels_);
  } else {
    labels_ = nullptr;
  }
  if (from.has_annotations()) {
    annotations_ = new ::flyteidl::admin::Annotations(*from.annotations_);
  } else {
    annotations_ = nullptr;
  }
  if (from.has_security_context()) {
    security_context_ = new ::flyteidl::core::SecurityContext(*from.security_context_);
  } else {
    security_context_ = nullptr;
  }
  if (from.has_auth_role()) {
    auth_role_ = new ::flyteidl::admin::AuthRole(*from.auth_role_);
  } else {
    auth_role_ = nullptr;
  }
  if (from.has_quality_of_service()) {
    quality_of_service_ = new ::flyteidl::core::QualityOfService(*from.quality_of_service_);
  } else {
    quality_of_service_ = nullptr;
  }
  if (from.has_raw_output_data_config()) {
    raw_output_data_config_ = new ::flyteidl::admin::RawOutputDataConfig(*from.raw_output_data_config_);
  } else {
    raw_output_data_config_ = nullptr;
  }
  if (from.has_cluster_assignment()) {
    cluster_assignment_ = new ::flyteidl::admin::ClusterAssignment(*from.cluster_assignment_);
  } else {
    cluster_assignment_ = nullptr;
  }
  if (from.has_interruptible()) {
    interruptible_ = new ::google::protobuf::BoolValue(*from.interruptible_);
  } else {
    interruptible_ = nullptr;
  }
  ::memcpy(&max_parallelism_, &from.max_parallelism_,
    static_cast<size_t>(reinterpret_cast<char*>(&overwrite_cache_) -
    reinterpret_cast<char*>(&max_parallelism_)) + sizeof(overwrite_cache_));
  clear_has_notification_overrides();
  switch (from.notification_overrides_case()) {
    case kNotifications: {
      mutable_notifications()->::flyteidl::admin::NotificationList::MergeFrom(from.notifications());
      break;
    }
    case kDisableAll: {
      set_disable_all(from.disable_all());
      break;
    }
    case NOTIFICATION_OVERRIDES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ExecutionSpec)
}

void ExecutionSpec::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ExecutionSpec_flyteidl_2fadmin_2fexecution_2eproto.base);
  ::memset(&launch_plan_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overwrite_cache_) -
      reinterpret_cast<char*>(&launch_plan_)) + sizeof(overwrite_cache_));
  clear_has_notification_overrides();
}

ExecutionSpec::~ExecutionSpec() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ExecutionSpec)
  SharedDtor();
}

void ExecutionSpec::SharedDtor() {
  if (this != internal_default_instance()) delete launch_plan_;
  if (this != internal_default_instance()) delete inputs_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete labels_;
  if (this != internal_default_instance()) delete annotations_;
  if (this != internal_default_instance()) delete security_context_;
  if (this != internal_default_instance()) delete auth_role_;
  if (this != internal_default_instance()) delete quality_of_service_;
  if (this != internal_default_instance()) delete raw_output_data_config_;
  if (this != internal_default_instance()) delete cluster_assignment_;
  if (this != internal_default_instance()) delete interruptible_;
  if (has_notification_overrides()) {
    clear_notification_overrides();
  }
}

void ExecutionSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecutionSpec& ExecutionSpec::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExecutionSpec_flyteidl_2fadmin_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void ExecutionSpec::clear_notification_overrides() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.admin.ExecutionSpec)
  switch (notification_overrides_case()) {
    case kNotifications: {
      delete notification_overrides_.notifications_;
      break;
    }
    case kDisableAll: {
      // No need to clear
      break;
    }
    case NOTIFICATION_OVERRIDES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NOTIFICATION_OVERRIDES_NOT_SET;
}


void ExecutionSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.ExecutionSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && launch_plan_ != nullptr) {
    delete launch_plan_;
  }
  launch_plan_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && inputs_ != nullptr) {
    delete inputs_;
  }
  inputs_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && labels_ != nullptr) {
    delete labels_;
  }
  labels_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && annotations_ != nullptr) {
    delete annotations_;
  }
  annotations_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && security_context_ != nullptr) {
    delete security_context_;
  }
  security_context_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && auth_role_ != nullptr) {
    delete auth_role_;
  }
  auth_role_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && quality_of_service_ != nullptr) {
    delete quality_of_service_;
  }
  quality_of_service_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && raw_output_data_config_ != nullptr) {
    delete raw_output_data_config_;
  }
  raw_output_data_config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cluster_assignment_ != nullptr) {
    delete cluster_assignment_;
  }
  cluster_assignment_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && interruptible_ != nullptr) {
    delete interruptible_;
  }
  interruptible_ = nullptr;
  ::memset(&max_parallelism_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overwrite_cache_) -
      reinterpret_cast<char*>(&max_parallelism_)) + sizeof(overwrite_cache_));
  clear_notification_overrides();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExecutionSpec::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExecutionSpec*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.Identifier launch_plan = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Identifier::_InternalParse;
        object = msg->mutable_launch_plan();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.LiteralMap inputs = 2 [deprecated = true];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::LiteralMap::_InternalParse;
        object = msg->mutable_inputs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.ExecutionMetadata metadata = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::ExecutionMetadata::_InternalParse;
        object = msg->mutable_metadata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.NotificationList notifications = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::NotificationList::_InternalParse;
        object = msg->mutable_notifications();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool disable_all = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_disable_all(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .flyteidl.admin.Labels labels = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::Labels::_InternalParse;
        object = msg->mutable_labels();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.Annotations annotations = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::Annotations::_InternalParse;
        object = msg->mutable_annotations();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.SecurityContext security_context = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::SecurityContext::_InternalParse;
        object = msg->mutable_security_context();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.AuthRole auth_role = 16 [deprecated = true];
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::AuthRole::_InternalParse;
        object = msg->mutable_auth_role();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.QualityOfService quality_of_service = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::QualityOfService::_InternalParse;
        object = msg->mutable_quality_of_service();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 max_parallelism = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_max_parallelism(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .flyteidl.admin.RawOutputDataConfig raw_output_data_config = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 154) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::RawOutputDataConfig::_InternalParse;
        object = msg->mutable_raw_output_data_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.ClusterAssignment cluster_assignment = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::ClusterAssignment::_InternalParse;
        object = msg->mutable_cluster_assignment();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.BoolValue interruptible = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 170) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::BoolValue::_InternalParse;
        object = msg->mutable_interruptible();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool overwrite_cache = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_overwrite_cache(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExecutionSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.ExecutionSpec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier launch_plan = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_launch_plan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.LiteralMap inputs = 2 [deprecated = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.ExecutionMetadata metadata = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.NotificationList notifications = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_notifications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool disable_all = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          clear_notification_overrides();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notification_overrides_.disable_all_)));
          set_has_disable_all();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.Labels labels = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_labels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.Annotations annotations = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_annotations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.SecurityContext security_context = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_security_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.AuthRole auth_role = 16 [deprecated = true];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_auth_role()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.QualityOfService quality_of_service = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quality_of_service()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_parallelism = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_parallelism_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.RawOutputDataConfig raw_output_data_config = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (154 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_raw_output_data_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.ClusterAssignment cluster_assignment = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (162 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cluster_assignment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue interruptible = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (170 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interruptible()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool overwrite_cache = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &overwrite_cache_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.ExecutionSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.ExecutionSpec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExecutionSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.ExecutionSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier launch_plan = 1;
  if (this->has_launch_plan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::launch_plan(this), output);
  }

  // .flyteidl.core.LiteralMap inputs = 2 [deprecated = true];
  if (this->has_inputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::inputs(this), output);
  }

  // .flyteidl.admin.ExecutionMetadata metadata = 3;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::metadata(this), output);
  }

  // .flyteidl.admin.NotificationList notifications = 5;
  if (has_notifications()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::notifications(this), output);
  }

  // bool disable_all = 6;
  if (has_disable_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->disable_all(), output);
  }

  // .flyteidl.admin.Labels labels = 7;
  if (this->has_labels()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::labels(this), output);
  }

  // .flyteidl.admin.Annotations annotations = 8;
  if (this->has_annotations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::annotations(this), output);
  }

  // .flyteidl.core.SecurityContext security_context = 10;
  if (this->has_security_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::security_context(this), output);
  }

  // .flyteidl.admin.AuthRole auth_role = 16 [deprecated = true];
  if (this->has_auth_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::auth_role(this), output);
  }

  // .flyteidl.core.QualityOfService quality_of_service = 17;
  if (this->has_quality_of_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, HasBitSetters::quality_of_service(this), output);
  }

  // int32 max_parallelism = 18;
  if (this->max_parallelism() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->max_parallelism(), output);
  }

  // .flyteidl.admin.RawOutputDataConfig raw_output_data_config = 19;
  if (this->has_raw_output_data_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, HasBitSetters::raw_output_data_config(this), output);
  }

  // .flyteidl.admin.ClusterAssignment cluster_assignment = 20;
  if (this->has_cluster_assignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, HasBitSetters::cluster_assignment(this), output);
  }

  // .google.protobuf.BoolValue interruptible = 21;
  if (this->has_interruptible()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, HasBitSetters::interruptible(this), output);
  }

  // bool overwrite_cache = 22;
  if (this->overwrite_cache() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->overwrite_cache(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.ExecutionSpec)
}

::google::protobuf::uint8* ExecutionSpec::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.ExecutionSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier launch_plan = 1;
  if (this->has_launch_plan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::launch_plan(this), target);
  }

  // .flyteidl.core.LiteralMap inputs = 2 [deprecated = true];
  if (this->has_inputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::inputs(this), target);
  }

  // .flyteidl.admin.ExecutionMetadata metadata = 3;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::metadata(this), target);
  }

  // .flyteidl.admin.NotificationList notifications = 5;
  if (has_notifications()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::notifications(this), target);
  }

  // bool disable_all = 6;
  if (has_disable_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->disable_all(), target);
  }

  // .flyteidl.admin.Labels labels = 7;
  if (this->has_labels()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::labels(this), target);
  }

  // .flyteidl.admin.Annotations annotations = 8;
  if (this->has_annotations()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::annotations(this), target);
  }

  // .flyteidl.core.SecurityContext security_context = 10;
  if (this->has_security_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::security_context(this), target);
  }

  // .flyteidl.admin.AuthRole auth_role = 16 [deprecated = true];
  if (this->has_auth_role()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::auth_role(this), target);
  }

  // .flyteidl.core.QualityOfService quality_of_service = 17;
  if (this->has_quality_of_service()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, HasBitSetters::quality_of_service(this), target);
  }

  // int32 max_parallelism = 18;
  if (this->max_parallelism() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->max_parallelism(), target);
  }

  // .flyteidl.admin.RawOutputDataConfig raw_output_data_config = 19;
  if (this->has_raw_output_data_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, HasBitSetters::raw_output_data_config(this), target);
  }

  // .flyteidl.admin.ClusterAssignment cluster_assignment = 20;
  if (this->has_cluster_assignment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, HasBitSetters::cluster_assignment(this), target);
  }

  // .google.protobuf.BoolValue interruptible = 21;
  if (this->has_interruptible()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, HasBitSetters::interruptible(this), target);
  }

  // bool overwrite_cache = 22;
  if (this->overwrite_cache() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->overwrite_cache(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.ExecutionSpec)
  return target;
}

size_t ExecutionSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.ExecutionSpec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.Identifier launch_plan = 1;
  if (this->has_launch_plan()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *launch_plan_);
  }

  // .flyteidl.core.LiteralMap inputs = 2 [deprecated = true];
  if (this->has_inputs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *inputs_);
  }

  // .flyteidl.admin.ExecutionMetadata metadata = 3;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .flyteidl.admin.Labels labels = 7;
  if (this->has_labels()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *labels_);
  }

  // .flyteidl.admin.Annotations annotations = 8;
  if (this->has_annotations()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *annotations_);
  }

  // .flyteidl.core.SecurityContext security_context = 10;
  if (this->has_security_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *security_context_);
  }

  // .flyteidl.admin.AuthRole auth_role = 16 [deprecated = true];
  if (this->has_auth_role()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *auth_role_);
  }

  // .flyteidl.core.QualityOfService quality_of_service = 17;
  if (this->has_quality_of_service()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *quality_of_service_);
  }

  // .flyteidl.admin.RawOutputDataConfig raw_output_data_config = 19;
  if (this->has_raw_output_data_config()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *raw_output_data_config_);
  }

  // .flyteidl.admin.ClusterAssignment cluster_assignment = 20;
  if (this->has_cluster_assignment()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cluster_assignment_);
  }

  // .google.protobuf.BoolValue interruptible = 21;
  if (this->has_interruptible()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *interruptible_);
  }

  // int32 max_parallelism = 18;
  if (this->max_parallelism() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_parallelism());
  }

  // bool overwrite_cache = 22;
  if (this->overwrite_cache() != 0) {
    total_size += 2 + 1;
  }

  switch (notification_overrides_case()) {
    // .flyteidl.admin.NotificationList notifications = 5;
    case kNotifications: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *notification_overrides_.notifications_);
      break;
    }
    // bool disable_all = 6;
    case kDisableAll: {
      total_size += 1 + 1;
      break;
    }
    case NOTIFICATION_OVERRIDES_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutionSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.ExecutionSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionSpec* source =
      ::google::protobuf::DynamicCastToGenerated<ExecutionSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.ExecutionSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.ExecutionSpec)
    MergeFrom(*source);
  }
}

void ExecutionSpec::MergeFrom(const ExecutionSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.ExecutionSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_launch_plan()) {
    mutable_launch_plan()->::flyteidl::core::Identifier::MergeFrom(from.launch_plan());
  }
  if (from.has_inputs()) {
    mutable_inputs()->::flyteidl::core::LiteralMap::MergeFrom(from.inputs());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::flyteidl::admin::ExecutionMetadata::MergeFrom(from.metadata());
  }
  if (from.has_labels()) {
    mutable_labels()->::flyteidl::admin::Labels::MergeFrom(from.labels());
  }
  if (from.has_annotations()) {
    mutable_annotations()->::flyteidl::admin::Annotations::MergeFrom(from.annotations());
  }
  if (from.has_security_context()) {
    mutable_security_context()->::flyteidl::core::SecurityContext::MergeFrom(from.security_context());
  }
  if (from.has_auth_role()) {
    mutable_auth_role()->::flyteidl::admin::AuthRole::MergeFrom(from.auth_role());
  }
  if (from.has_quality_of_service()) {
    mutable_quality_of_service()->::flyteidl::core::QualityOfService::MergeFrom(from.quality_of_service());
  }
  if (from.has_raw_output_data_config()) {
    mutable_raw_output_data_config()->::flyteidl::admin::RawOutputDataConfig::MergeFrom(from.raw_output_data_config());
  }
  if (from.has_cluster_assignment()) {
    mutable_cluster_assignment()->::flyteidl::admin::ClusterAssignment::MergeFrom(from.cluster_assignment());
  }
  if (from.has_interruptible()) {
    mutable_interruptible()->::google::protobuf::BoolValue::MergeFrom(from.interruptible());
  }
  if (from.max_parallelism() != 0) {
    set_max_parallelism(from.max_parallelism());
  }
  if (from.overwrite_cache() != 0) {
    set_overwrite_cache(from.overwrite_cache());
  }
  switch (from.notification_overrides_case()) {
    case kNotifications: {
      mutable_notifications()->::flyteidl::admin::NotificationList::MergeFrom(from.notifications());
      break;
    }
    case kDisableAll: {
      set_disable_all(from.disable_all());
      break;
    }
    case NOTIFICATION_OVERRIDES_NOT_SET: {
      break;
    }
  }
}

void ExecutionSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.ExecutionSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionSpec::CopyFrom(const ExecutionSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.ExecutionSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionSpec::IsInitialized() const {
  return true;
}

void ExecutionSpec::Swap(ExecutionSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecutionSpec::InternalSwap(ExecutionSpec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(launch_plan_, other->launch_plan_);
  swap(inputs_, other->inputs_);
  swap(metadata_, other->metadata_);
  swap(labels_, other->labels_);
  swap(annotations_, other->annotations_);
  swap(security_context_, other->security_context_);
  swap(auth_role_, other->auth_role_);
  swap(quality_of_service_, other->quality_of_service_);
  swap(raw_output_data_config_, other->raw_output_data_config_);
  swap(cluster_assignment_, other->cluster_assignment_);
  swap(interruptible_, other->interruptible_);
  swap(max_parallelism_, other->max_parallelism_);
  swap(overwrite_cache_, other->overwrite_cache_);
  swap(notification_overrides_, other->notification_overrides_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata ExecutionSpec::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ExecutionTerminateRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_ExecutionTerminateRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::WorkflowExecutionIdentifier*>(
      ::flyteidl::core::WorkflowExecutionIdentifier::internal_default_instance());
}
class ExecutionTerminateRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::WorkflowExecutionIdentifier& id(const ExecutionTerminateRequest* msg);
};

const ::flyteidl::core::WorkflowExecutionIdentifier&
ExecutionTerminateRequest::HasBitSetters::id(const ExecutionTerminateRequest* msg) {
  return *msg->id_;
}
void ExecutionTerminateRequest::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecutionTerminateRequest::kIdFieldNumber;
const int ExecutionTerminateRequest::kCauseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutionTerminateRequest::ExecutionTerminateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.ExecutionTerminateRequest)
}
ExecutionTerminateRequest::ExecutionTerminateRequest(const ExecutionTerminateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cause_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cause().size() > 0) {
    cause_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cause_);
  }
  if (from.has_id()) {
    id_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ExecutionTerminateRequest)
}

void ExecutionTerminateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ExecutionTerminateRequest_flyteidl_2fadmin_2fexecution_2eproto.base);
  cause_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = nullptr;
}

ExecutionTerminateRequest::~ExecutionTerminateRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ExecutionTerminateRequest)
  SharedDtor();
}

void ExecutionTerminateRequest::SharedDtor() {
  cause_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void ExecutionTerminateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecutionTerminateRequest& ExecutionTerminateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExecutionTerminateRequest_flyteidl_2fadmin_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void ExecutionTerminateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.ExecutionTerminateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cause_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExecutionTerminateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExecutionTerminateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::WorkflowExecutionIdentifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string cause = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.ExecutionTerminateRequest.cause");
        object = msg->mutable_cause();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExecutionTerminateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.ExecutionTerminateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cause = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cause()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cause().data(), static_cast<int>(this->cause().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.ExecutionTerminateRequest.cause"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.ExecutionTerminateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.ExecutionTerminateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExecutionTerminateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.ExecutionTerminateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  // string cause = 2;
  if (this->cause().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cause().data(), static_cast<int>(this->cause().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ExecutionTerminateRequest.cause");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cause(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.ExecutionTerminateRequest)
}

::google::protobuf::uint8* ExecutionTerminateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.ExecutionTerminateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  // string cause = 2;
  if (this->cause().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cause().data(), static_cast<int>(this->cause().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ExecutionTerminateRequest.cause");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cause(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.ExecutionTerminateRequest)
  return target;
}

size_t ExecutionTerminateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.ExecutionTerminateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cause = 2;
  if (this->cause().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cause());
  }

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutionTerminateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.ExecutionTerminateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionTerminateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ExecutionTerminateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.ExecutionTerminateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.ExecutionTerminateRequest)
    MergeFrom(*source);
  }
}

void ExecutionTerminateRequest::MergeFrom(const ExecutionTerminateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.ExecutionTerminateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cause().size() > 0) {

    cause_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cause_);
  }
  if (from.has_id()) {
    mutable_id()->::flyteidl::core::WorkflowExecutionIdentifier::MergeFrom(from.id());
  }
}

void ExecutionTerminateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.ExecutionTerminateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionTerminateRequest::CopyFrom(const ExecutionTerminateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.ExecutionTerminateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionTerminateRequest::IsInitialized() const {
  return true;
}

void ExecutionTerminateRequest::Swap(ExecutionTerminateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecutionTerminateRequest::InternalSwap(ExecutionTerminateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cause_.Swap(&other->cause_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::google::protobuf::Metadata ExecutionTerminateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ExecutionTerminateResponse::InitAsDefaultInstance() {
}
class ExecutionTerminateResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutionTerminateResponse::ExecutionTerminateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.ExecutionTerminateResponse)
}
ExecutionTerminateResponse::ExecutionTerminateResponse(const ExecutionTerminateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ExecutionTerminateResponse)
}

void ExecutionTerminateResponse::SharedCtor() {
}

ExecutionTerminateResponse::~ExecutionTerminateResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ExecutionTerminateResponse)
  SharedDtor();
}

void ExecutionTerminateResponse::SharedDtor() {
}

void ExecutionTerminateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecutionTerminateResponse& ExecutionTerminateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExecutionTerminateResponse_flyteidl_2fadmin_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void ExecutionTerminateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.ExecutionTerminateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExecutionTerminateResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExecutionTerminateResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExecutionTerminateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.ExecutionTerminateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.ExecutionTerminateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.ExecutionTerminateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExecutionTerminateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.ExecutionTerminateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.ExecutionTerminateResponse)
}

::google::protobuf::uint8* ExecutionTerminateResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.ExecutionTerminateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.ExecutionTerminateResponse)
  return target;
}

size_t ExecutionTerminateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.ExecutionTerminateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutionTerminateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.ExecutionTerminateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionTerminateResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ExecutionTerminateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.ExecutionTerminateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.ExecutionTerminateResponse)
    MergeFrom(*source);
  }
}

void ExecutionTerminateResponse::MergeFrom(const ExecutionTerminateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.ExecutionTerminateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ExecutionTerminateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.ExecutionTerminateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionTerminateResponse::CopyFrom(const ExecutionTerminateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.ExecutionTerminateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionTerminateResponse::IsInitialized() const {
  return true;
}

void ExecutionTerminateResponse::Swap(ExecutionTerminateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecutionTerminateResponse::InternalSwap(ExecutionTerminateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ExecutionTerminateResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WorkflowExecutionGetDataRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_WorkflowExecutionGetDataRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::WorkflowExecutionIdentifier*>(
      ::flyteidl::core::WorkflowExecutionIdentifier::internal_default_instance());
}
class WorkflowExecutionGetDataRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::WorkflowExecutionIdentifier& id(const WorkflowExecutionGetDataRequest* msg);
};

const ::flyteidl::core::WorkflowExecutionIdentifier&
WorkflowExecutionGetDataRequest::HasBitSetters::id(const WorkflowExecutionGetDataRequest* msg) {
  return *msg->id_;
}
void WorkflowExecutionGetDataRequest::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowExecutionGetDataRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowExecutionGetDataRequest::WorkflowExecutionGetDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.WorkflowExecutionGetDataRequest)
}
WorkflowExecutionGetDataRequest::WorkflowExecutionGetDataRequest(const WorkflowExecutionGetDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowExecutionGetDataRequest)
}

void WorkflowExecutionGetDataRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WorkflowExecutionGetDataRequest_flyteidl_2fadmin_2fexecution_2eproto.base);
  id_ = nullptr;
}

WorkflowExecutionGetDataRequest::~WorkflowExecutionGetDataRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowExecutionGetDataRequest)
  SharedDtor();
}

void WorkflowExecutionGetDataRequest::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void WorkflowExecutionGetDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkflowExecutionGetDataRequest& WorkflowExecutionGetDataRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WorkflowExecutionGetDataRequest_flyteidl_2fadmin_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void WorkflowExecutionGetDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.WorkflowExecutionGetDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorkflowExecutionGetDataRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WorkflowExecutionGetDataRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::WorkflowExecutionIdentifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkflowExecutionGetDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.WorkflowExecutionGetDataRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.WorkflowExecutionGetDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.WorkflowExecutionGetDataRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorkflowExecutionGetDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.WorkflowExecutionGetDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.WorkflowExecutionGetDataRequest)
}

::google::protobuf::uint8* WorkflowExecutionGetDataRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.WorkflowExecutionGetDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.WorkflowExecutionGetDataRequest)
  return target;
}

size_t WorkflowExecutionGetDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.WorkflowExecutionGetDataRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkflowExecutionGetDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.WorkflowExecutionGetDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowExecutionGetDataRequest* source =
      ::google::protobuf::DynamicCastToGenerated<WorkflowExecutionGetDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.WorkflowExecutionGetDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.WorkflowExecutionGetDataRequest)
    MergeFrom(*source);
  }
}

void WorkflowExecutionGetDataRequest::MergeFrom(const WorkflowExecutionGetDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.WorkflowExecutionGetDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::WorkflowExecutionIdentifier::MergeFrom(from.id());
  }
}

void WorkflowExecutionGetDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.WorkflowExecutionGetDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowExecutionGetDataRequest::CopyFrom(const WorkflowExecutionGetDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.WorkflowExecutionGetDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowExecutionGetDataRequest::IsInitialized() const {
  return true;
}

void WorkflowExecutionGetDataRequest::Swap(WorkflowExecutionGetDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowExecutionGetDataRequest::InternalSwap(WorkflowExecutionGetDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata WorkflowExecutionGetDataRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WorkflowExecutionGetDataResponse::InitAsDefaultInstance() {
  ::flyteidl::admin::_WorkflowExecutionGetDataResponse_default_instance_._instance.get_mutable()->outputs_ = const_cast< ::flyteidl::admin::UrlBlob*>(
      ::flyteidl::admin::UrlBlob::internal_default_instance());
  ::flyteidl::admin::_WorkflowExecutionGetDataResponse_default_instance_._instance.get_mutable()->inputs_ = const_cast< ::flyteidl::admin::UrlBlob*>(
      ::flyteidl::admin::UrlBlob::internal_default_instance());
  ::flyteidl::admin::_WorkflowExecutionGetDataResponse_default_instance_._instance.get_mutable()->full_inputs_ = const_cast< ::flyteidl::core::LiteralMap*>(
      ::flyteidl::core::LiteralMap::internal_default_instance());
  ::flyteidl::admin::_WorkflowExecutionGetDataResponse_default_instance_._instance.get_mutable()->full_outputs_ = const_cast< ::flyteidl::core::LiteralMap*>(
      ::flyteidl::core::LiteralMap::internal_default_instance());
}
class WorkflowExecutionGetDataResponse::HasBitSetters {
 public:
  static const ::flyteidl::admin::UrlBlob& outputs(const WorkflowExecutionGetDataResponse* msg);
  static const ::flyteidl::admin::UrlBlob& inputs(const WorkflowExecutionGetDataResponse* msg);
  static const ::flyteidl::core::LiteralMap& full_inputs(const WorkflowExecutionGetDataResponse* msg);
  static const ::flyteidl::core::LiteralMap& full_outputs(const WorkflowExecutionGetDataResponse* msg);
};

const ::flyteidl::admin::UrlBlob&
WorkflowExecutionGetDataResponse::HasBitSetters::outputs(const WorkflowExecutionGetDataResponse* msg) {
  return *msg->outputs_;
}
const ::flyteidl::admin::UrlBlob&
WorkflowExecutionGetDataResponse::HasBitSetters::inputs(const WorkflowExecutionGetDataResponse* msg) {
  return *msg->inputs_;
}
const ::flyteidl::core::LiteralMap&
WorkflowExecutionGetDataResponse::HasBitSetters::full_inputs(const WorkflowExecutionGetDataResponse* msg) {
  return *msg->full_inputs_;
}
const ::flyteidl::core::LiteralMap&
WorkflowExecutionGetDataResponse::HasBitSetters::full_outputs(const WorkflowExecutionGetDataResponse* msg) {
  return *msg->full_outputs_;
}
void WorkflowExecutionGetDataResponse::clear_outputs() {
  if (GetArenaNoVirtual() == nullptr && outputs_ != nullptr) {
    delete outputs_;
  }
  outputs_ = nullptr;
}
void WorkflowExecutionGetDataResponse::clear_inputs() {
  if (GetArenaNoVirtual() == nullptr && inputs_ != nullptr) {
    delete inputs_;
  }
  inputs_ = nullptr;
}
void WorkflowExecutionGetDataResponse::clear_full_inputs() {
  if (GetArenaNoVirtual() == nullptr && full_inputs_ != nullptr) {
    delete full_inputs_;
  }
  full_inputs_ = nullptr;
}
void WorkflowExecutionGetDataResponse::clear_full_outputs() {
  if (GetArenaNoVirtual() == nullptr && full_outputs_ != nullptr) {
    delete full_outputs_;
  }
  full_outputs_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowExecutionGetDataResponse::kOutputsFieldNumber;
const int WorkflowExecutionGetDataResponse::kInputsFieldNumber;
const int WorkflowExecutionGetDataResponse::kFullInputsFieldNumber;
const int WorkflowExecutionGetDataResponse::kFullOutputsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowExecutionGetDataResponse::WorkflowExecutionGetDataResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.WorkflowExecutionGetDataResponse)
}
WorkflowExecutionGetDataResponse::WorkflowExecutionGetDataResponse(const WorkflowExecutionGetDataResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_outputs()) {
    outputs_ = new ::flyteidl::admin::UrlBlob(*from.outputs_);
  } else {
    outputs_ = nullptr;
  }
  if (from.has_inputs()) {
    inputs_ = new ::flyteidl::admin::UrlBlob(*from.inputs_);
  } else {
    inputs_ = nullptr;
  }
  if (from.has_full_inputs()) {
    full_inputs_ = new ::flyteidl::core::LiteralMap(*from.full_inputs_);
  } else {
    full_inputs_ = nullptr;
  }
  if (from.has_full_outputs()) {
    full_outputs_ = new ::flyteidl::core::LiteralMap(*from.full_outputs_);
  } else {
    full_outputs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowExecutionGetDataResponse)
}

void WorkflowExecutionGetDataResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WorkflowExecutionGetDataResponse_flyteidl_2fadmin_2fexecution_2eproto.base);
  ::memset(&outputs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&full_outputs_) -
      reinterpret_cast<char*>(&outputs_)) + sizeof(full_outputs_));
}

WorkflowExecutionGetDataResponse::~WorkflowExecutionGetDataResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowExecutionGetDataResponse)
  SharedDtor();
}

void WorkflowExecutionGetDataResponse::SharedDtor() {
  if (this != internal_default_instance()) delete outputs_;
  if (this != internal_default_instance()) delete inputs_;
  if (this != internal_default_instance()) delete full_inputs_;
  if (this != internal_default_instance()) delete full_outputs_;
}

void WorkflowExecutionGetDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkflowExecutionGetDataResponse& WorkflowExecutionGetDataResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WorkflowExecutionGetDataResponse_flyteidl_2fadmin_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void WorkflowExecutionGetDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.WorkflowExecutionGetDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && outputs_ != nullptr) {
    delete outputs_;
  }
  outputs_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && inputs_ != nullptr) {
    delete inputs_;
  }
  inputs_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && full_inputs_ != nullptr) {
    delete full_inputs_;
  }
  full_inputs_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && full_outputs_ != nullptr) {
    delete full_outputs_;
  }
  full_outputs_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorkflowExecutionGetDataResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WorkflowExecutionGetDataResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.admin.UrlBlob outputs = 1 [deprecated = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::UrlBlob::_InternalParse;
        object = msg->mutable_outputs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.UrlBlob inputs = 2 [deprecated = true];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::UrlBlob::_InternalParse;
        object = msg->mutable_inputs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.LiteralMap full_inputs = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::LiteralMap::_InternalParse;
        object = msg->mutable_full_inputs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.LiteralMap full_outputs = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::LiteralMap::_InternalParse;
        object = msg->mutable_full_outputs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkflowExecutionGetDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.WorkflowExecutionGetDataResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.admin.UrlBlob outputs = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.UrlBlob inputs = 2 [deprecated = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.LiteralMap full_inputs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_full_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.LiteralMap full_outputs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_full_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.WorkflowExecutionGetDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.WorkflowExecutionGetDataResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorkflowExecutionGetDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.WorkflowExecutionGetDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.UrlBlob outputs = 1 [deprecated = true];
  if (this->has_outputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::outputs(this), output);
  }

  // .flyteidl.admin.UrlBlob inputs = 2 [deprecated = true];
  if (this->has_inputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::inputs(this), output);
  }

  // .flyteidl.core.LiteralMap full_inputs = 3;
  if (this->has_full_inputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::full_inputs(this), output);
  }

  // .flyteidl.core.LiteralMap full_outputs = 4;
  if (this->has_full_outputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::full_outputs(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.WorkflowExecutionGetDataResponse)
}

::google::protobuf::uint8* WorkflowExecutionGetDataResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.WorkflowExecutionGetDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.UrlBlob outputs = 1 [deprecated = true];
  if (this->has_outputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::outputs(this), target);
  }

  // .flyteidl.admin.UrlBlob inputs = 2 [deprecated = true];
  if (this->has_inputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::inputs(this), target);
  }

  // .flyteidl.core.LiteralMap full_inputs = 3;
  if (this->has_full_inputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::full_inputs(this), target);
  }

  // .flyteidl.core.LiteralMap full_outputs = 4;
  if (this->has_full_outputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::full_outputs(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.WorkflowExecutionGetDataResponse)
  return target;
}

size_t WorkflowExecutionGetDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.WorkflowExecutionGetDataResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.admin.UrlBlob outputs = 1 [deprecated = true];
  if (this->has_outputs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *outputs_);
  }

  // .flyteidl.admin.UrlBlob inputs = 2 [deprecated = true];
  if (this->has_inputs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *inputs_);
  }

  // .flyteidl.core.LiteralMap full_inputs = 3;
  if (this->has_full_inputs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *full_inputs_);
  }

  // .flyteidl.core.LiteralMap full_outputs = 4;
  if (this->has_full_outputs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *full_outputs_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkflowExecutionGetDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.WorkflowExecutionGetDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowExecutionGetDataResponse* source =
      ::google::protobuf::DynamicCastToGenerated<WorkflowExecutionGetDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.WorkflowExecutionGetDataResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.WorkflowExecutionGetDataResponse)
    MergeFrom(*source);
  }
}

void WorkflowExecutionGetDataResponse::MergeFrom(const WorkflowExecutionGetDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.WorkflowExecutionGetDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_outputs()) {
    mutable_outputs()->::flyteidl::admin::UrlBlob::MergeFrom(from.outputs());
  }
  if (from.has_inputs()) {
    mutable_inputs()->::flyteidl::admin::UrlBlob::MergeFrom(from.inputs());
  }
  if (from.has_full_inputs()) {
    mutable_full_inputs()->::flyteidl::core::LiteralMap::MergeFrom(from.full_inputs());
  }
  if (from.has_full_outputs()) {
    mutable_full_outputs()->::flyteidl::core::LiteralMap::MergeFrom(from.full_outputs());
  }
}

void WorkflowExecutionGetDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.WorkflowExecutionGetDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowExecutionGetDataResponse::CopyFrom(const WorkflowExecutionGetDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.WorkflowExecutionGetDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowExecutionGetDataResponse::IsInitialized() const {
  return true;
}

void WorkflowExecutionGetDataResponse::Swap(WorkflowExecutionGetDataResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowExecutionGetDataResponse::InternalSwap(WorkflowExecutionGetDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(outputs_, other->outputs_);
  swap(inputs_, other->inputs_);
  swap(full_inputs_, other->full_inputs_);
  swap(full_outputs_, other->full_outputs_);
}

::google::protobuf::Metadata WorkflowExecutionGetDataResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ExecutionUpdateRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_ExecutionUpdateRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::WorkflowExecutionIdentifier*>(
      ::flyteidl::core::WorkflowExecutionIdentifier::internal_default_instance());
}
class ExecutionUpdateRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::WorkflowExecutionIdentifier& id(const ExecutionUpdateRequest* msg);
};

const ::flyteidl::core::WorkflowExecutionIdentifier&
ExecutionUpdateRequest::HasBitSetters::id(const ExecutionUpdateRequest* msg) {
  return *msg->id_;
}
void ExecutionUpdateRequest::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecutionUpdateRequest::kIdFieldNumber;
const int ExecutionUpdateRequest::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutionUpdateRequest::ExecutionUpdateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.ExecutionUpdateRequest)
}
ExecutionUpdateRequest::ExecutionUpdateRequest(const ExecutionUpdateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ExecutionUpdateRequest)
}

void ExecutionUpdateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ExecutionUpdateRequest_flyteidl_2fadmin_2fexecution_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&id_)) + sizeof(state_));
}

ExecutionUpdateRequest::~ExecutionUpdateRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ExecutionUpdateRequest)
  SharedDtor();
}

void ExecutionUpdateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void ExecutionUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecutionUpdateRequest& ExecutionUpdateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExecutionUpdateRequest_flyteidl_2fadmin_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void ExecutionUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.ExecutionUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExecutionUpdateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExecutionUpdateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::WorkflowExecutionIdentifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.ExecutionState state = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_state(static_cast<::flyteidl::admin::ExecutionState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExecutionUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.ExecutionUpdateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.ExecutionState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::flyteidl::admin::ExecutionState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.ExecutionUpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.ExecutionUpdateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExecutionUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.ExecutionUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  // .flyteidl.admin.ExecutionState state = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.ExecutionUpdateRequest)
}

::google::protobuf::uint8* ExecutionUpdateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.ExecutionUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  // .flyteidl.admin.ExecutionState state = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.ExecutionUpdateRequest)
  return target;
}

size_t ExecutionUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.ExecutionUpdateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .flyteidl.admin.ExecutionState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutionUpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.ExecutionUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionUpdateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ExecutionUpdateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.ExecutionUpdateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.ExecutionUpdateRequest)
    MergeFrom(*source);
  }
}

void ExecutionUpdateRequest::MergeFrom(const ExecutionUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.ExecutionUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::WorkflowExecutionIdentifier::MergeFrom(from.id());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void ExecutionUpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.ExecutionUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionUpdateRequest::CopyFrom(const ExecutionUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.ExecutionUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionUpdateRequest::IsInitialized() const {
  return true;
}

void ExecutionUpdateRequest::Swap(ExecutionUpdateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecutionUpdateRequest::InternalSwap(ExecutionUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(state_, other->state_);
}

::google::protobuf::Metadata ExecutionUpdateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ExecutionStateChangeDetails::InitAsDefaultInstance() {
  ::flyteidl::admin::_ExecutionStateChangeDetails_default_instance_._instance.get_mutable()->occurred_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class ExecutionStateChangeDetails::HasBitSetters {
 public:
  static const ::google::protobuf::Timestamp& occurred_at(const ExecutionStateChangeDetails* msg);
};

const ::google::protobuf::Timestamp&
ExecutionStateChangeDetails::HasBitSetters::occurred_at(const ExecutionStateChangeDetails* msg) {
  return *msg->occurred_at_;
}
void ExecutionStateChangeDetails::clear_occurred_at() {
  if (GetArenaNoVirtual() == nullptr && occurred_at_ != nullptr) {
    delete occurred_at_;
  }
  occurred_at_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecutionStateChangeDetails::kStateFieldNumber;
const int ExecutionStateChangeDetails::kOccurredAtFieldNumber;
const int ExecutionStateChangeDetails::kPrincipalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutionStateChangeDetails::ExecutionStateChangeDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.ExecutionStateChangeDetails)
}
ExecutionStateChangeDetails::ExecutionStateChangeDetails(const ExecutionStateChangeDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  principal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.principal().size() > 0) {
    principal_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.principal_);
  }
  if (from.has_occurred_at()) {
    occurred_at_ = new ::google::protobuf::Timestamp(*from.occurred_at_);
  } else {
    occurred_at_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ExecutionStateChangeDetails)
}

void ExecutionStateChangeDetails::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ExecutionStateChangeDetails_flyteidl_2fadmin_2fexecution_2eproto.base);
  principal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&occurred_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&occurred_at_)) + sizeof(state_));
}

ExecutionStateChangeDetails::~ExecutionStateChangeDetails() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ExecutionStateChangeDetails)
  SharedDtor();
}

void ExecutionStateChangeDetails::SharedDtor() {
  principal_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete occurred_at_;
}

void ExecutionStateChangeDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecutionStateChangeDetails& ExecutionStateChangeDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExecutionStateChangeDetails_flyteidl_2fadmin_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void ExecutionStateChangeDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.ExecutionStateChangeDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  principal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && occurred_at_ != nullptr) {
    delete occurred_at_;
  }
  occurred_at_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExecutionStateChangeDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExecutionStateChangeDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.admin.ExecutionState state = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_state(static_cast<::flyteidl::admin::ExecutionState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.protobuf.Timestamp occurred_at = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_occurred_at();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string principal = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.ExecutionStateChangeDetails.principal");
        object = msg->mutable_principal();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExecutionStateChangeDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.ExecutionStateChangeDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.admin.ExecutionState state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::flyteidl::admin::ExecutionState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp occurred_at = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_occurred_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string principal = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_principal()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->principal().data(), static_cast<int>(this->principal().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.ExecutionStateChangeDetails.principal"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.ExecutionStateChangeDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.ExecutionStateChangeDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExecutionStateChangeDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.ExecutionStateChangeDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.ExecutionState state = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // .google.protobuf.Timestamp occurred_at = 2;
  if (this->has_occurred_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::occurred_at(this), output);
  }

  // string principal = 3;
  if (this->principal().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->principal().data(), static_cast<int>(this->principal().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ExecutionStateChangeDetails.principal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->principal(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.ExecutionStateChangeDetails)
}

::google::protobuf::uint8* ExecutionStateChangeDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.ExecutionStateChangeDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.ExecutionState state = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // .google.protobuf.Timestamp occurred_at = 2;
  if (this->has_occurred_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::occurred_at(this), target);
  }

  // string principal = 3;
  if (this->principal().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->principal().data(), static_cast<int>(this->principal().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ExecutionStateChangeDetails.principal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->principal(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.ExecutionStateChangeDetails)
  return target;
}

size_t ExecutionStateChangeDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.ExecutionStateChangeDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string principal = 3;
  if (this->principal().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->principal());
  }

  // .google.protobuf.Timestamp occurred_at = 2;
  if (this->has_occurred_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *occurred_at_);
  }

  // .flyteidl.admin.ExecutionState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutionStateChangeDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.ExecutionStateChangeDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionStateChangeDetails* source =
      ::google::protobuf::DynamicCastToGenerated<ExecutionStateChangeDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.ExecutionStateChangeDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.ExecutionStateChangeDetails)
    MergeFrom(*source);
  }
}

void ExecutionStateChangeDetails::MergeFrom(const ExecutionStateChangeDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.ExecutionStateChangeDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.principal().size() > 0) {

    principal_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.principal_);
  }
  if (from.has_occurred_at()) {
    mutable_occurred_at()->::google::protobuf::Timestamp::MergeFrom(from.occurred_at());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void ExecutionStateChangeDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.ExecutionStateChangeDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionStateChangeDetails::CopyFrom(const ExecutionStateChangeDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.ExecutionStateChangeDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionStateChangeDetails::IsInitialized() const {
  return true;
}

void ExecutionStateChangeDetails::Swap(ExecutionStateChangeDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecutionStateChangeDetails::InternalSwap(ExecutionStateChangeDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  principal_.Swap(&other->principal_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(occurred_at_, other->occurred_at_);
  swap(state_, other->state_);
}

::google::protobuf::Metadata ExecutionStateChangeDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ExecutionUpdateResponse::InitAsDefaultInstance() {
}
class ExecutionUpdateResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutionUpdateResponse::ExecutionUpdateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.ExecutionUpdateResponse)
}
ExecutionUpdateResponse::ExecutionUpdateResponse(const ExecutionUpdateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ExecutionUpdateResponse)
}

void ExecutionUpdateResponse::SharedCtor() {
}

ExecutionUpdateResponse::~ExecutionUpdateResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ExecutionUpdateResponse)
  SharedDtor();
}

void ExecutionUpdateResponse::SharedDtor() {
}

void ExecutionUpdateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecutionUpdateResponse& ExecutionUpdateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExecutionUpdateResponse_flyteidl_2fadmin_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void ExecutionUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.ExecutionUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExecutionUpdateResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExecutionUpdateResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExecutionUpdateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.ExecutionUpdateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.ExecutionUpdateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.ExecutionUpdateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExecutionUpdateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.ExecutionUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.ExecutionUpdateResponse)
}

::google::protobuf::uint8* ExecutionUpdateResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.ExecutionUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.ExecutionUpdateResponse)
  return target;
}

size_t ExecutionUpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.ExecutionUpdateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutionUpdateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.ExecutionUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionUpdateResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ExecutionUpdateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.ExecutionUpdateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.ExecutionUpdateResponse)
    MergeFrom(*source);
  }
}

void ExecutionUpdateResponse::MergeFrom(const ExecutionUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.ExecutionUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ExecutionUpdateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.ExecutionUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionUpdateResponse::CopyFrom(const ExecutionUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.ExecutionUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionUpdateResponse::IsInitialized() const {
  return true;
}

void ExecutionUpdateResponse::Swap(ExecutionUpdateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecutionUpdateResponse::InternalSwap(ExecutionUpdateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ExecutionUpdateResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WorkflowExecutionGetMetricsRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_WorkflowExecutionGetMetricsRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::WorkflowExecutionIdentifier*>(
      ::flyteidl::core::WorkflowExecutionIdentifier::internal_default_instance());
}
class WorkflowExecutionGetMetricsRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::WorkflowExecutionIdentifier& id(const WorkflowExecutionGetMetricsRequest* msg);
};

const ::flyteidl::core::WorkflowExecutionIdentifier&
WorkflowExecutionGetMetricsRequest::HasBitSetters::id(const WorkflowExecutionGetMetricsRequest* msg) {
  return *msg->id_;
}
void WorkflowExecutionGetMetricsRequest::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowExecutionGetMetricsRequest::kIdFieldNumber;
const int WorkflowExecutionGetMetricsRequest::kDepthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowExecutionGetMetricsRequest::WorkflowExecutionGetMetricsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.WorkflowExecutionGetMetricsRequest)
}
WorkflowExecutionGetMetricsRequest::WorkflowExecutionGetMetricsRequest(const WorkflowExecutionGetMetricsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  depth_ = from.depth_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowExecutionGetMetricsRequest)
}

void WorkflowExecutionGetMetricsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WorkflowExecutionGetMetricsRequest_flyteidl_2fadmin_2fexecution_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&depth_) -
      reinterpret_cast<char*>(&id_)) + sizeof(depth_));
}

WorkflowExecutionGetMetricsRequest::~WorkflowExecutionGetMetricsRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowExecutionGetMetricsRequest)
  SharedDtor();
}

void WorkflowExecutionGetMetricsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void WorkflowExecutionGetMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkflowExecutionGetMetricsRequest& WorkflowExecutionGetMetricsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WorkflowExecutionGetMetricsRequest_flyteidl_2fadmin_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void WorkflowExecutionGetMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.WorkflowExecutionGetMetricsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  depth_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorkflowExecutionGetMetricsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WorkflowExecutionGetMetricsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::WorkflowExecutionIdentifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 depth = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_depth(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkflowExecutionGetMetricsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.WorkflowExecutionGetMetricsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 depth = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.WorkflowExecutionGetMetricsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.WorkflowExecutionGetMetricsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorkflowExecutionGetMetricsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.WorkflowExecutionGetMetricsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  // int32 depth = 2;
  if (this->depth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->depth(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.WorkflowExecutionGetMetricsRequest)
}

::google::protobuf::uint8* WorkflowExecutionGetMetricsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.WorkflowExecutionGetMetricsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  // int32 depth = 2;
  if (this->depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->depth(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.WorkflowExecutionGetMetricsRequest)
  return target;
}

size_t WorkflowExecutionGetMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.WorkflowExecutionGetMetricsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // int32 depth = 2;
  if (this->depth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->depth());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkflowExecutionGetMetricsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.WorkflowExecutionGetMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowExecutionGetMetricsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<WorkflowExecutionGetMetricsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.WorkflowExecutionGetMetricsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.WorkflowExecutionGetMetricsRequest)
    MergeFrom(*source);
  }
}

void WorkflowExecutionGetMetricsRequest::MergeFrom(const WorkflowExecutionGetMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.WorkflowExecutionGetMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::WorkflowExecutionIdentifier::MergeFrom(from.id());
  }
  if (from.depth() != 0) {
    set_depth(from.depth());
  }
}

void WorkflowExecutionGetMetricsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.WorkflowExecutionGetMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowExecutionGetMetricsRequest::CopyFrom(const WorkflowExecutionGetMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.WorkflowExecutionGetMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowExecutionGetMetricsRequest::IsInitialized() const {
  return true;
}

void WorkflowExecutionGetMetricsRequest::Swap(WorkflowExecutionGetMetricsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowExecutionGetMetricsRequest::InternalSwap(WorkflowExecutionGetMetricsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(depth_, other->depth_);
}

::google::protobuf::Metadata WorkflowExecutionGetMetricsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WorkflowExecutionGetMetricsResponse::InitAsDefaultInstance() {
  ::flyteidl::admin::_WorkflowExecutionGetMetricsResponse_default_instance_._instance.get_mutable()->span_ = const_cast< ::flyteidl::core::Span*>(
      ::flyteidl::core::Span::internal_default_instance());
}
class WorkflowExecutionGetMetricsResponse::HasBitSetters {
 public:
  static const ::flyteidl::core::Span& span(const WorkflowExecutionGetMetricsResponse* msg);
};

const ::flyteidl::core::Span&
WorkflowExecutionGetMetricsResponse::HasBitSetters::span(const WorkflowExecutionGetMetricsResponse* msg) {
  return *msg->span_;
}
void WorkflowExecutionGetMetricsResponse::clear_span() {
  if (GetArenaNoVirtual() == nullptr && span_ != nullptr) {
    delete span_;
  }
  span_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowExecutionGetMetricsResponse::kSpanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowExecutionGetMetricsResponse::WorkflowExecutionGetMetricsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.WorkflowExecutionGetMetricsResponse)
}
WorkflowExecutionGetMetricsResponse::WorkflowExecutionGetMetricsResponse(const WorkflowExecutionGetMetricsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_span()) {
    span_ = new ::flyteidl::core::Span(*from.span_);
  } else {
    span_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowExecutionGetMetricsResponse)
}

void WorkflowExecutionGetMetricsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WorkflowExecutionGetMetricsResponse_flyteidl_2fadmin_2fexecution_2eproto.base);
  span_ = nullptr;
}

WorkflowExecutionGetMetricsResponse::~WorkflowExecutionGetMetricsResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowExecutionGetMetricsResponse)
  SharedDtor();
}

void WorkflowExecutionGetMetricsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete span_;
}

void WorkflowExecutionGetMetricsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkflowExecutionGetMetricsResponse& WorkflowExecutionGetMetricsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WorkflowExecutionGetMetricsResponse_flyteidl_2fadmin_2fexecution_2eproto.base);
  return *internal_default_instance();
}


void WorkflowExecutionGetMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.WorkflowExecutionGetMetricsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && span_ != nullptr) {
    delete span_;
  }
  span_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorkflowExecutionGetMetricsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WorkflowExecutionGetMetricsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.Span span = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Span::_InternalParse;
        object = msg->mutable_span();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkflowExecutionGetMetricsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.WorkflowExecutionGetMetricsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Span span = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_span()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.WorkflowExecutionGetMetricsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.WorkflowExecutionGetMetricsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorkflowExecutionGetMetricsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.WorkflowExecutionGetMetricsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Span span = 1;
  if (this->has_span()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::span(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.WorkflowExecutionGetMetricsResponse)
}

::google::protobuf::uint8* WorkflowExecutionGetMetricsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.WorkflowExecutionGetMetricsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Span span = 1;
  if (this->has_span()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::span(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.WorkflowExecutionGetMetricsResponse)
  return target;
}

size_t WorkflowExecutionGetMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.WorkflowExecutionGetMetricsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.Span span = 1;
  if (this->has_span()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *span_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkflowExecutionGetMetricsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.WorkflowExecutionGetMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowExecutionGetMetricsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<WorkflowExecutionGetMetricsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.WorkflowExecutionGetMetricsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.WorkflowExecutionGetMetricsResponse)
    MergeFrom(*source);
  }
}

void WorkflowExecutionGetMetricsResponse::MergeFrom(const WorkflowExecutionGetMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.WorkflowExecutionGetMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_span()) {
    mutable_span()->::flyteidl::core::Span::MergeFrom(from.span());
  }
}

void WorkflowExecutionGetMetricsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.WorkflowExecutionGetMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowExecutionGetMetricsResponse::CopyFrom(const WorkflowExecutionGetMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.WorkflowExecutionGetMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowExecutionGetMetricsResponse::IsInitialized() const {
  return true;
}

void WorkflowExecutionGetMetricsResponse::Swap(WorkflowExecutionGetMetricsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowExecutionGetMetricsResponse::InternalSwap(WorkflowExecutionGetMetricsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(span_, other->span_);
}

::google::protobuf::Metadata WorkflowExecutionGetMetricsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ExecutionCreateRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::ExecutionCreateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::ExecutionCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ExecutionRelaunchRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::ExecutionRelaunchRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::ExecutionRelaunchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ExecutionRecoverRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::ExecutionRecoverRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::ExecutionRecoverRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ExecutionCreateResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::ExecutionCreateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::ExecutionCreateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::WorkflowExecutionGetRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::WorkflowExecutionGetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::WorkflowExecutionGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Execution* Arena::CreateMaybeMessage< ::flyteidl::admin::Execution >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::Execution >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ExecutionList* Arena::CreateMaybeMessage< ::flyteidl::admin::ExecutionList >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::ExecutionList >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::LiteralMapBlob* Arena::CreateMaybeMessage< ::flyteidl::admin::LiteralMapBlob >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::LiteralMapBlob >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::AbortMetadata* Arena::CreateMaybeMessage< ::flyteidl::admin::AbortMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::AbortMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ExecutionClosure* Arena::CreateMaybeMessage< ::flyteidl::admin::ExecutionClosure >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::ExecutionClosure >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::SystemMetadata* Arena::CreateMaybeMessage< ::flyteidl::admin::SystemMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::SystemMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ExecutionMetadata* Arena::CreateMaybeMessage< ::flyteidl::admin::ExecutionMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::ExecutionMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::NotificationList* Arena::CreateMaybeMessage< ::flyteidl::admin::NotificationList >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::NotificationList >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ExecutionSpec* Arena::CreateMaybeMessage< ::flyteidl::admin::ExecutionSpec >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::ExecutionSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ExecutionTerminateRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::ExecutionTerminateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::ExecutionTerminateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ExecutionTerminateResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::ExecutionTerminateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::ExecutionTerminateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::WorkflowExecutionGetDataRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::WorkflowExecutionGetDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::WorkflowExecutionGetDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::WorkflowExecutionGetDataResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::WorkflowExecutionGetDataResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::WorkflowExecutionGetDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ExecutionUpdateRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::ExecutionUpdateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::ExecutionUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ExecutionStateChangeDetails* Arena::CreateMaybeMessage< ::flyteidl::admin::ExecutionStateChangeDetails >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::ExecutionStateChangeDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ExecutionUpdateResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::ExecutionUpdateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::ExecutionUpdateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::WorkflowExecutionGetMetricsRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::WorkflowExecutionGetMetricsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::WorkflowExecutionGetMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::WorkflowExecutionGetMetricsResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::WorkflowExecutionGetMetricsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::WorkflowExecutionGetMetricsResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
