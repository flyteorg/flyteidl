// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl/admin/settings.proto

package admin

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _settings_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on SettingsCollection with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SettingsCollection) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTaskResourceSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SettingsCollectionValidationError{
				field:  "TaskResourceSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetClusterResourceSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SettingsCollectionValidationError{
				field:  "ClusterResourceSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetExecutionQueueSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SettingsCollectionValidationError{
				field:  "ExecutionQueueSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetExecutionClusterLabelSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SettingsCollectionValidationError{
				field:  "ExecutionClusterLabelSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetQualityOfServiceSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SettingsCollectionValidationError{
				field:  "QualityOfServiceSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPluginOverrideSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SettingsCollectionValidationError{
				field:  "PluginOverrideSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWorkflowExecutionSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SettingsCollectionValidationError{
				field:  "WorkflowExecutionSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetClusterAssignmentSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SettingsCollectionValidationError{
				field:  "ClusterAssignmentSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SettingsCollectionValidationError is the validation error returned by
// SettingsCollection.Validate if the designated constraints aren't met.
type SettingsCollectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingsCollectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingsCollectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingsCollectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingsCollectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingsCollectionValidationError) ErrorName() string {
	return "SettingsCollectionValidationError"
}

// Error satisfies the builtin error interface
func (e SettingsCollectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettingsCollection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingsCollectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingsCollectionValidationError{}

// Validate checks the field values on Settings with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Settings) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetGlobal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SettingsValidationError{
				field:  "Global",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for key, val := range m.GetProjectSettings() {
		_ = val

		// no validation rules for ProjectSettings[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SettingsValidationError{
					field:  fmt.Sprintf("ProjectSettings[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SettingsValidationError is the validation error returned by
// Settings.Validate if the designated constraints aren't met.
type SettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingsValidationError) ErrorName() string { return "SettingsValidationError" }

// Error satisfies the builtin error interface
func (e SettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingsValidationError{}

// Validate checks the field values on ProjectSettings with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProjectSettings) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Project

	if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectSettingsValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for key, val := range m.GetDomainSettings() {
		_ = val

		// no validation rules for DomainSettings[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectSettingsValidationError{
					field:  fmt.Sprintf("DomainSettings[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ProjectSettingsValidationError is the validation error returned by
// ProjectSettings.Validate if the designated constraints aren't met.
type ProjectSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectSettingsValidationError) ErrorName() string { return "ProjectSettingsValidationError" }

// Error satisfies the builtin error interface
func (e ProjectSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectSettingsValidationError{}

// Validate checks the field values on DomainSettings with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DomainSettings) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Domain

	if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DomainSettingsValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for key, val := range m.GetWorkflowSettings() {
		_ = val

		// no validation rules for WorkflowSettings[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DomainSettingsValidationError{
					field:  fmt.Sprintf("WorkflowSettings[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// DomainSettingsValidationError is the validation error returned by
// DomainSettings.Validate if the designated constraints aren't met.
type DomainSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DomainSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DomainSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DomainSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DomainSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DomainSettingsValidationError) ErrorName() string { return "DomainSettingsValidationError" }

// Error satisfies the builtin error interface
func (e DomainSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomainSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DomainSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DomainSettingsValidationError{}

// Validate checks the field values on WorkflowSettings with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *WorkflowSettings) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Workflow

	if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowSettingsValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for key, val := range m.GetLaunchplanSettings() {
		_ = val

		// no validation rules for LaunchplanSettings[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkflowSettingsValidationError{
					field:  fmt.Sprintf("LaunchplanSettings[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// WorkflowSettingsValidationError is the validation error returned by
// WorkflowSettings.Validate if the designated constraints aren't met.
type WorkflowSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowSettingsValidationError) ErrorName() string { return "WorkflowSettingsValidationError" }

// Error satisfies the builtin error interface
func (e WorkflowSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowSettingsValidationError{}

// Validate checks the field values on LaunchplanSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LaunchplanSettings) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Launchplan

	if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LaunchplanSettingsValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// LaunchplanSettingsValidationError is the validation error returned by
// LaunchplanSettings.Validate if the designated constraints aren't met.
type LaunchplanSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LaunchplanSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LaunchplanSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LaunchplanSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LaunchplanSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LaunchplanSettingsValidationError) ErrorName() string {
	return "LaunchplanSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e LaunchplanSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLaunchplanSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LaunchplanSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LaunchplanSettingsValidationError{}

// Validate checks the field values on GlobalLevel with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GlobalLevel) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GlobalLevelValidationError is the validation error returned by
// GlobalLevel.Validate if the designated constraints aren't met.
type GlobalLevelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalLevelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalLevelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalLevelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalLevelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalLevelValidationError) ErrorName() string { return "GlobalLevelValidationError" }

// Error satisfies the builtin error interface
func (e GlobalLevelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalLevel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalLevelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalLevelValidationError{}

// Validate checks the field values on ProjectLevel with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProjectLevel) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Project

	return nil
}

// ProjectLevelValidationError is the validation error returned by
// ProjectLevel.Validate if the designated constraints aren't met.
type ProjectLevelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectLevelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectLevelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectLevelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectLevelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectLevelValidationError) ErrorName() string { return "ProjectLevelValidationError" }

// Error satisfies the builtin error interface
func (e ProjectLevelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectLevel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectLevelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectLevelValidationError{}

// Validate checks the field values on DomainLevel with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DomainLevel) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Project

	// no validation rules for Domain

	return nil
}

// DomainLevelValidationError is the validation error returned by
// DomainLevel.Validate if the designated constraints aren't met.
type DomainLevelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DomainLevelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DomainLevelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DomainLevelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DomainLevelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DomainLevelValidationError) ErrorName() string { return "DomainLevelValidationError" }

// Error satisfies the builtin error interface
func (e DomainLevelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomainLevel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DomainLevelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DomainLevelValidationError{}

// Validate checks the field values on WorkflowLevel with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WorkflowLevel) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Project

	// no validation rules for Domain

	// no validation rules for Workflow

	return nil
}

// WorkflowLevelValidationError is the validation error returned by
// WorkflowLevel.Validate if the designated constraints aren't met.
type WorkflowLevelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowLevelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowLevelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowLevelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowLevelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowLevelValidationError) ErrorName() string { return "WorkflowLevelValidationError" }

// Error satisfies the builtin error interface
func (e WorkflowLevelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowLevel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowLevelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowLevelValidationError{}

// Validate checks the field values on LaunchplanLevel with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *LaunchplanLevel) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Project

	// no validation rules for Domain

	// no validation rules for Workflow

	// no validation rules for Launchplan

	return nil
}

// LaunchplanLevelValidationError is the validation error returned by
// LaunchplanLevel.Validate if the designated constraints aren't met.
type LaunchplanLevelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LaunchplanLevelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LaunchplanLevelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LaunchplanLevelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LaunchplanLevelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LaunchplanLevelValidationError) ErrorName() string { return "LaunchplanLevelValidationError" }

// Error satisfies the builtin error interface
func (e LaunchplanLevelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLaunchplanLevel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LaunchplanLevelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LaunchplanLevelValidationError{}

// Validate checks the field values on SettingsUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SettingsUpdateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SettingsUpdateRequestValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.Level.(type) {

	case *SettingsUpdateRequest_GlobalLevel:

		if v, ok := interface{}(m.GetGlobalLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SettingsUpdateRequestValidationError{
					field:  "GlobalLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SettingsUpdateRequest_ProjectLevel:

		if v, ok := interface{}(m.GetProjectLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SettingsUpdateRequestValidationError{
					field:  "ProjectLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SettingsUpdateRequest_DomainLevel:

		if v, ok := interface{}(m.GetDomainLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SettingsUpdateRequestValidationError{
					field:  "DomainLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SettingsUpdateRequest_WorkflowLevel:

		if v, ok := interface{}(m.GetWorkflowLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SettingsUpdateRequestValidationError{
					field:  "WorkflowLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SettingsUpdateRequest_LaunchplanLevel:

		if v, ok := interface{}(m.GetLaunchplanLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SettingsUpdateRequestValidationError{
					field:  "LaunchplanLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SettingsUpdateRequestValidationError is the validation error returned by
// SettingsUpdateRequest.Validate if the designated constraints aren't met.
type SettingsUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingsUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingsUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingsUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingsUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingsUpdateRequestValidationError) ErrorName() string {
	return "SettingsUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SettingsUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettingsUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingsUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingsUpdateRequestValidationError{}

// Validate checks the field values on FullSettingsUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FullSettingsUpdateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FullSettingsUpdateRequestValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.Level.(type) {

	case *FullSettingsUpdateRequest_GlobalLevel:

		if v, ok := interface{}(m.GetGlobalLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FullSettingsUpdateRequestValidationError{
					field:  "GlobalLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *FullSettingsUpdateRequest_ProjectLevel:

		if v, ok := interface{}(m.GetProjectLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FullSettingsUpdateRequestValidationError{
					field:  "ProjectLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *FullSettingsUpdateRequest_DomainLevel:

		if v, ok := interface{}(m.GetDomainLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FullSettingsUpdateRequestValidationError{
					field:  "DomainLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *FullSettingsUpdateRequest_WorkflowLevel:

		if v, ok := interface{}(m.GetWorkflowLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FullSettingsUpdateRequestValidationError{
					field:  "WorkflowLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *FullSettingsUpdateRequest_LaunchplanLevel:

		if v, ok := interface{}(m.GetLaunchplanLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FullSettingsUpdateRequestValidationError{
					field:  "LaunchplanLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// FullSettingsUpdateRequestValidationError is the validation error returned by
// FullSettingsUpdateRequest.Validate if the designated constraints aren't met.
type FullSettingsUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FullSettingsUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FullSettingsUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FullSettingsUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FullSettingsUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FullSettingsUpdateRequestValidationError) ErrorName() string {
	return "FullSettingsUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FullSettingsUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFullSettingsUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FullSettingsUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FullSettingsUpdateRequestValidationError{}

// Validate checks the field values on FullSettingsUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FullSettingsUpdateResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// FullSettingsUpdateResponseValidationError is the validation error returned
// by FullSettingsUpdateResponse.Validate if the designated constraints aren't met.
type FullSettingsUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FullSettingsUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FullSettingsUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FullSettingsUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FullSettingsUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FullSettingsUpdateResponseValidationError) ErrorName() string {
	return "FullSettingsUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FullSettingsUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFullSettingsUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FullSettingsUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FullSettingsUpdateResponseValidationError{}

// Validate checks the field values on SettingsGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SettingsGetRequest) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Level.(type) {

	case *SettingsGetRequest_GlobalLevel:

		if v, ok := interface{}(m.GetGlobalLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SettingsGetRequestValidationError{
					field:  "GlobalLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SettingsGetRequest_ProjectLevel:

		if v, ok := interface{}(m.GetProjectLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SettingsGetRequestValidationError{
					field:  "ProjectLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SettingsGetRequest_DomainLevel:

		if v, ok := interface{}(m.GetDomainLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SettingsGetRequestValidationError{
					field:  "DomainLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SettingsGetRequest_WorkflowLevel:

		if v, ok := interface{}(m.GetWorkflowLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SettingsGetRequestValidationError{
					field:  "WorkflowLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SettingsGetRequest_LaunchplanLevel:

		if v, ok := interface{}(m.GetLaunchplanLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SettingsGetRequestValidationError{
					field:  "LaunchplanLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SettingsGetRequestValidationError is the validation error returned by
// SettingsGetRequest.Validate if the designated constraints aren't met.
type SettingsGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingsGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingsGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingsGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingsGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingsGetRequestValidationError) ErrorName() string {
	return "SettingsGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SettingsGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettingsGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingsGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingsGetRequestValidationError{}

// Validate checks the field values on SettingsGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SettingsGetResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SettingsGetResponseValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.Level.(type) {

	case *SettingsGetResponse_GlobalLevel:

		if v, ok := interface{}(m.GetGlobalLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SettingsGetResponseValidationError{
					field:  "GlobalLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SettingsGetResponse_ProjectLevel:

		if v, ok := interface{}(m.GetProjectLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SettingsGetResponseValidationError{
					field:  "ProjectLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SettingsGetResponse_DomainLevel:

		if v, ok := interface{}(m.GetDomainLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SettingsGetResponseValidationError{
					field:  "DomainLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SettingsGetResponse_WorkflowLevel:

		if v, ok := interface{}(m.GetWorkflowLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SettingsGetResponseValidationError{
					field:  "WorkflowLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SettingsGetResponse_LaunchplanLevel:

		if v, ok := interface{}(m.GetLaunchplanLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SettingsGetResponseValidationError{
					field:  "LaunchplanLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SettingsGetResponseValidationError is the validation error returned by
// SettingsGetResponse.Validate if the designated constraints aren't met.
type SettingsGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingsGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingsGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingsGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingsGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingsGetResponseValidationError) ErrorName() string {
	return "SettingsGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SettingsGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettingsGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingsGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingsGetResponseValidationError{}

// Validate checks the field values on FullSettingsGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FullSettingsGetRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// FullSettingsGetRequestValidationError is the validation error returned by
// FullSettingsGetRequest.Validate if the designated constraints aren't met.
type FullSettingsGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FullSettingsGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FullSettingsGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FullSettingsGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FullSettingsGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FullSettingsGetRequestValidationError) ErrorName() string {
	return "FullSettingsGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FullSettingsGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFullSettingsGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FullSettingsGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FullSettingsGetRequestValidationError{}

// Validate checks the field values on FullSettingsGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FullSettingsGetResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FullSettingsGetResponseValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FullSettingsGetResponseValidationError is the validation error returned by
// FullSettingsGetResponse.Validate if the designated constraints aren't met.
type FullSettingsGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FullSettingsGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FullSettingsGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FullSettingsGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FullSettingsGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FullSettingsGetResponseValidationError) ErrorName() string {
	return "FullSettingsGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FullSettingsGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFullSettingsGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FullSettingsGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FullSettingsGetResponseValidationError{}

// Validate checks the field values on SettingsDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SettingsDeleteRequest) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Level.(type) {

	case *SettingsDeleteRequest_GlobalLevel:

		if v, ok := interface{}(m.GetGlobalLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SettingsDeleteRequestValidationError{
					field:  "GlobalLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SettingsDeleteRequest_ProjectLevel:

		if v, ok := interface{}(m.GetProjectLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SettingsDeleteRequestValidationError{
					field:  "ProjectLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SettingsDeleteRequest_DomainLevel:

		if v, ok := interface{}(m.GetDomainLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SettingsDeleteRequestValidationError{
					field:  "DomainLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SettingsDeleteRequest_WorkflowLevel:

		if v, ok := interface{}(m.GetWorkflowLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SettingsDeleteRequestValidationError{
					field:  "WorkflowLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SettingsDeleteRequest_LaunchplanLevel:

		if v, ok := interface{}(m.GetLaunchplanLevel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SettingsDeleteRequestValidationError{
					field:  "LaunchplanLevel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SettingsDeleteRequestValidationError is the validation error returned by
// SettingsDeleteRequest.Validate if the designated constraints aren't met.
type SettingsDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingsDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingsDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingsDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingsDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingsDeleteRequestValidationError) ErrorName() string {
	return "SettingsDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SettingsDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettingsDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingsDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingsDeleteRequestValidationError{}

// Validate checks the field values on SettingsDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SettingsDeleteResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SettingsDeleteResponseValidationError is the validation error returned by
// SettingsDeleteResponse.Validate if the designated constraints aren't met.
type SettingsDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingsDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingsDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingsDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingsDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingsDeleteResponseValidationError) ErrorName() string {
	return "SettingsDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SettingsDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettingsDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingsDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingsDeleteResponseValidationError{}
