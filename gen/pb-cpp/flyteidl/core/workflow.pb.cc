// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/workflow.proto

#include "flyteidl/core/workflow.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fcondition_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BooleanExpression_flyteidl_2fcore_2fcondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fexecution_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_QualityOfService_flyteidl_2fcore_2fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2finterface_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TypedInterface_flyteidl_2fcore_2finterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fliterals_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RetryStrategy_flyteidl_2fcore_2fliterals_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fliterals_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Binding_flyteidl_2fcore_2fliterals_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2ftasks_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Resources_flyteidl_2fcore_2ftasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2ftypes_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Error_flyteidl_2fcore_2ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2ftypes_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_LiteralType_flyteidl_2fcore_2ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fworkflow_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Alias_flyteidl_2fcore_2fworkflow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fworkflow_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ApproveCondition_flyteidl_2fcore_2fworkflow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fworkflow_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WorkflowMetadataDefaults_flyteidl_2fcore_2fworkflow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fworkflow_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WorkflowMetadata_TagsEntry_DoNotUse_flyteidl_2fcore_2fworkflow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fworkflow_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SignalCondition_flyteidl_2fcore_2fworkflow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fworkflow_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SleepCondition_flyteidl_2fcore_2fworkflow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fworkflow_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TaskNodeOverrides_flyteidl_2fcore_2fworkflow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fworkflow_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_WorkflowNode_flyteidl_2fcore_2fworkflow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fworkflow_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_NodeMetadata_flyteidl_2fcore_2fworkflow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fworkflow_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TaskNode_flyteidl_2fcore_2fworkflow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fworkflow_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_WorkflowMetadata_flyteidl_2fcore_2fworkflow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fworkflow_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_GateNode_flyteidl_2fcore_2fworkflow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fworkflow_2eproto ::google::protobuf::internal::SCCInfo<8> scc_info_BranchNode_flyteidl_2fcore_2fworkflow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
namespace flyteidl {
namespace core {
class IfBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IfBlock> _instance;
} _IfBlock_default_instance_;
class IfElseBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IfElseBlock> _instance;
  const ::flyteidl::core::Node* else_node_;
  const ::flyteidl::core::Error* error_;
} _IfElseBlock_default_instance_;
class BranchNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BranchNode> _instance;
} _BranchNode_default_instance_;
class TaskNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskNode> _instance;
  const ::flyteidl::core::Identifier* reference_id_;
} _TaskNode_default_instance_;
class WorkflowNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowNode> _instance;
  const ::flyteidl::core::Identifier* launchplan_ref_;
  const ::flyteidl::core::Identifier* sub_workflow_ref_;
} _WorkflowNode_default_instance_;
class ApproveConditionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApproveCondition> _instance;
} _ApproveCondition_default_instance_;
class SignalConditionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignalCondition> _instance;
} _SignalCondition_default_instance_;
class SleepConditionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SleepCondition> _instance;
} _SleepCondition_default_instance_;
class GateNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GateNode> _instance;
  const ::flyteidl::core::ApproveCondition* approve_;
  const ::flyteidl::core::SignalCondition* signal_;
  const ::flyteidl::core::SleepCondition* sleep_;
} _GateNode_default_instance_;
class NodeMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeMetadata> _instance;
  bool interruptible_;
} _NodeMetadata_default_instance_;
class AliasDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Alias> _instance;
} _Alias_default_instance_;
class NodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Node> _instance;
  const ::flyteidl::core::TaskNode* task_node_;
  const ::flyteidl::core::WorkflowNode* workflow_node_;
  const ::flyteidl::core::BranchNode* branch_node_;
  const ::flyteidl::core::GateNode* gate_node_;
} _Node_default_instance_;
class WorkflowMetadata_TagsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowMetadata_TagsEntry_DoNotUse> _instance;
} _WorkflowMetadata_TagsEntry_DoNotUse_default_instance_;
class WorkflowMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowMetadata> _instance;
} _WorkflowMetadata_default_instance_;
class WorkflowMetadataDefaultsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowMetadataDefaults> _instance;
} _WorkflowMetadataDefaults_default_instance_;
class WorkflowTemplateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowTemplate> _instance;
} _WorkflowTemplate_default_instance_;
class TaskNodeOverridesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskNodeOverrides> _instance;
} _TaskNodeOverrides_default_instance_;
}  // namespace core
}  // namespace flyteidl
static void InitDefaultsBranchNode_flyteidl_2fcore_2fworkflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_IfBlock_default_instance_;
    new (ptr) ::flyteidl::core::IfBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::flyteidl::core::_IfElseBlock_default_instance_;
    new (ptr) ::flyteidl::core::IfElseBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::flyteidl::core::_BranchNode_default_instance_;
    new (ptr) ::flyteidl::core::BranchNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::flyteidl::core::_Node_default_instance_;
    new (ptr) ::flyteidl::core::Node();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::IfBlock::InitAsDefaultInstance();
  ::flyteidl::core::IfElseBlock::InitAsDefaultInstance();
  ::flyteidl::core::BranchNode::InitAsDefaultInstance();
  ::flyteidl::core::Node::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<8> scc_info_BranchNode_flyteidl_2fcore_2fworkflow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsBranchNode_flyteidl_2fcore_2fworkflow_2eproto}, {
      &scc_info_BooleanExpression_flyteidl_2fcore_2fcondition_2eproto.base,
      &scc_info_Error_flyteidl_2fcore_2ftypes_2eproto.base,
      &scc_info_NodeMetadata_flyteidl_2fcore_2fworkflow_2eproto.base,
      &scc_info_Binding_flyteidl_2fcore_2fliterals_2eproto.base,
      &scc_info_Alias_flyteidl_2fcore_2fworkflow_2eproto.base,
      &scc_info_TaskNode_flyteidl_2fcore_2fworkflow_2eproto.base,
      &scc_info_WorkflowNode_flyteidl_2fcore_2fworkflow_2eproto.base,
      &scc_info_GateNode_flyteidl_2fcore_2fworkflow_2eproto.base,}};

static void InitDefaultsTaskNode_flyteidl_2fcore_2fworkflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_TaskNode_default_instance_;
    new (ptr) ::flyteidl::core::TaskNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::TaskNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TaskNode_flyteidl_2fcore_2fworkflow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTaskNode_flyteidl_2fcore_2fworkflow_2eproto}, {
      &scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_TaskNodeOverrides_flyteidl_2fcore_2fworkflow_2eproto.base,}};

static void InitDefaultsWorkflowNode_flyteidl_2fcore_2fworkflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_WorkflowNode_default_instance_;
    new (ptr) ::flyteidl::core::WorkflowNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::WorkflowNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WorkflowNode_flyteidl_2fcore_2fworkflow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWorkflowNode_flyteidl_2fcore_2fworkflow_2eproto}, {
      &scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsApproveCondition_flyteidl_2fcore_2fworkflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_ApproveCondition_default_instance_;
    new (ptr) ::flyteidl::core::ApproveCondition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::ApproveCondition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ApproveCondition_flyteidl_2fcore_2fworkflow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsApproveCondition_flyteidl_2fcore_2fworkflow_2eproto}, {}};

static void InitDefaultsSignalCondition_flyteidl_2fcore_2fworkflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_SignalCondition_default_instance_;
    new (ptr) ::flyteidl::core::SignalCondition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::SignalCondition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SignalCondition_flyteidl_2fcore_2fworkflow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSignalCondition_flyteidl_2fcore_2fworkflow_2eproto}, {
      &scc_info_LiteralType_flyteidl_2fcore_2ftypes_2eproto.base,}};

static void InitDefaultsSleepCondition_flyteidl_2fcore_2fworkflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_SleepCondition_default_instance_;
    new (ptr) ::flyteidl::core::SleepCondition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::SleepCondition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SleepCondition_flyteidl_2fcore_2fworkflow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSleepCondition_flyteidl_2fcore_2fworkflow_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsGateNode_flyteidl_2fcore_2fworkflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_GateNode_default_instance_;
    new (ptr) ::flyteidl::core::GateNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::GateNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_GateNode_flyteidl_2fcore_2fworkflow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsGateNode_flyteidl_2fcore_2fworkflow_2eproto}, {
      &scc_info_ApproveCondition_flyteidl_2fcore_2fworkflow_2eproto.base,
      &scc_info_SignalCondition_flyteidl_2fcore_2fworkflow_2eproto.base,
      &scc_info_SleepCondition_flyteidl_2fcore_2fworkflow_2eproto.base,}};

static void InitDefaultsNodeMetadata_flyteidl_2fcore_2fworkflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_NodeMetadata_default_instance_;
    new (ptr) ::flyteidl::core::NodeMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::NodeMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_NodeMetadata_flyteidl_2fcore_2fworkflow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsNodeMetadata_flyteidl_2fcore_2fworkflow_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,
      &scc_info_RetryStrategy_flyteidl_2fcore_2fliterals_2eproto.base,}};

static void InitDefaultsAlias_flyteidl_2fcore_2fworkflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_Alias_default_instance_;
    new (ptr) ::flyteidl::core::Alias();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::Alias::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Alias_flyteidl_2fcore_2fworkflow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAlias_flyteidl_2fcore_2fworkflow_2eproto}, {}};

static void InitDefaultsWorkflowMetadata_TagsEntry_DoNotUse_flyteidl_2fcore_2fworkflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_WorkflowMetadata_TagsEntry_DoNotUse_default_instance_;
    new (ptr) ::flyteidl::core::WorkflowMetadata_TagsEntry_DoNotUse();
  }
  ::flyteidl::core::WorkflowMetadata_TagsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WorkflowMetadata_TagsEntry_DoNotUse_flyteidl_2fcore_2fworkflow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWorkflowMetadata_TagsEntry_DoNotUse_flyteidl_2fcore_2fworkflow_2eproto}, {}};

static void InitDefaultsWorkflowMetadata_flyteidl_2fcore_2fworkflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_WorkflowMetadata_default_instance_;
    new (ptr) ::flyteidl::core::WorkflowMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::WorkflowMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_WorkflowMetadata_flyteidl_2fcore_2fworkflow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsWorkflowMetadata_flyteidl_2fcore_2fworkflow_2eproto}, {
      &scc_info_QualityOfService_flyteidl_2fcore_2fexecution_2eproto.base,
      &scc_info_WorkflowMetadata_TagsEntry_DoNotUse_flyteidl_2fcore_2fworkflow_2eproto.base,}};

static void InitDefaultsWorkflowMetadataDefaults_flyteidl_2fcore_2fworkflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_WorkflowMetadataDefaults_default_instance_;
    new (ptr) ::flyteidl::core::WorkflowMetadataDefaults();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::WorkflowMetadataDefaults::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WorkflowMetadataDefaults_flyteidl_2fcore_2fworkflow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWorkflowMetadataDefaults_flyteidl_2fcore_2fworkflow_2eproto}, {}};

static void InitDefaultsWorkflowTemplate_flyteidl_2fcore_2fworkflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_WorkflowTemplate_default_instance_;
    new (ptr) ::flyteidl::core::WorkflowTemplate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::WorkflowTemplate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_WorkflowTemplate_flyteidl_2fcore_2fworkflow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsWorkflowTemplate_flyteidl_2fcore_2fworkflow_2eproto}, {
      &scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_WorkflowMetadata_flyteidl_2fcore_2fworkflow_2eproto.base,
      &scc_info_TypedInterface_flyteidl_2fcore_2finterface_2eproto.base,
      &scc_info_BranchNode_flyteidl_2fcore_2fworkflow_2eproto.base,
      &scc_info_Binding_flyteidl_2fcore_2fliterals_2eproto.base,
      &scc_info_WorkflowMetadataDefaults_flyteidl_2fcore_2fworkflow_2eproto.base,}};

static void InitDefaultsTaskNodeOverrides_flyteidl_2fcore_2fworkflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_TaskNodeOverrides_default_instance_;
    new (ptr) ::flyteidl::core::TaskNodeOverrides();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::TaskNodeOverrides::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TaskNodeOverrides_flyteidl_2fcore_2fworkflow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTaskNodeOverrides_flyteidl_2fcore_2fworkflow_2eproto}, {
      &scc_info_Resources_flyteidl_2fcore_2ftasks_2eproto.base,}};

void InitDefaults_flyteidl_2fcore_2fworkflow_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_BranchNode_flyteidl_2fcore_2fworkflow_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskNode_flyteidl_2fcore_2fworkflow_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorkflowNode_flyteidl_2fcore_2fworkflow_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ApproveCondition_flyteidl_2fcore_2fworkflow_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SignalCondition_flyteidl_2fcore_2fworkflow_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SleepCondition_flyteidl_2fcore_2fworkflow_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GateNode_flyteidl_2fcore_2fworkflow_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeMetadata_flyteidl_2fcore_2fworkflow_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Alias_flyteidl_2fcore_2fworkflow_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorkflowMetadata_TagsEntry_DoNotUse_flyteidl_2fcore_2fworkflow_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorkflowMetadata_flyteidl_2fcore_2fworkflow_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorkflowMetadataDefaults_flyteidl_2fcore_2fworkflow_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorkflowTemplate_flyteidl_2fcore_2fworkflow_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskNodeOverrides_flyteidl_2fcore_2fworkflow_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fcore_2fworkflow_2eproto[17];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fcore_2fworkflow_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fcore_2fworkflow_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fcore_2fworkflow_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::IfBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::IfBlock, condition_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::IfBlock, then_node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::IfElseBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::IfElseBlock, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::IfElseBlock, case__),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::IfElseBlock, other_),
  offsetof(::flyteidl::core::IfElseBlockDefaultTypeInternal, else_node_),
  offsetof(::flyteidl::core::IfElseBlockDefaultTypeInternal, error_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::IfElseBlock, default_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::BranchNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::BranchNode, if_else_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskNode, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskNode, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::core::TaskNodeDefaultTypeInternal, reference_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskNode, overrides_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskNode, reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowNode, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowNode, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::core::WorkflowNodeDefaultTypeInternal, launchplan_ref_),
  offsetof(::flyteidl::core::WorkflowNodeDefaultTypeInternal, sub_workflow_ref_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowNode, reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ApproveCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ApproveCondition, signal_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::SignalCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::SignalCondition, signal_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::SignalCondition, type_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::SignalCondition, output_variable_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::SleepCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::SleepCondition, duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::GateNode, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::GateNode, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::core::GateNodeDefaultTypeInternal, approve_),
  offsetof(::flyteidl::core::GateNodeDefaultTypeInternal, signal_),
  offsetof(::flyteidl::core::GateNodeDefaultTypeInternal, sleep_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::GateNode, condition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::NodeMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::NodeMetadata, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::NodeMetadata, name_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::NodeMetadata, timeout_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::NodeMetadata, retries_),
  offsetof(::flyteidl::core::NodeMetadataDefaultTypeInternal, interruptible_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::NodeMetadata, interruptible_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Alias, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Alias, var_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Alias, alias_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Node, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Node, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Node, metadata_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Node, inputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Node, upstream_node_ids_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Node, output_aliases_),
  offsetof(::flyteidl::core::NodeDefaultTypeInternal, task_node_),
  offsetof(::flyteidl::core::NodeDefaultTypeInternal, workflow_node_),
  offsetof(::flyteidl::core::NodeDefaultTypeInternal, branch_node_),
  offsetof(::flyteidl::core::NodeDefaultTypeInternal, gate_node_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Node, target_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowMetadata_TagsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowMetadata_TagsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowMetadata_TagsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowMetadata_TagsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowMetadata, quality_of_service_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowMetadata, on_failure_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowMetadata, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowMetadataDefaults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowMetadataDefaults, interruptible_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowTemplate, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowTemplate, metadata_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowTemplate, interface_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowTemplate, nodes_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowTemplate, outputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowTemplate, failure_node_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowTemplate, metadata_defaults_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskNodeOverrides, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskNodeOverrides, resources_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::core::IfBlock)},
  { 7, -1, sizeof(::flyteidl::core::IfElseBlock)},
  { 17, -1, sizeof(::flyteidl::core::BranchNode)},
  { 23, -1, sizeof(::flyteidl::core::TaskNode)},
  { 31, -1, sizeof(::flyteidl::core::WorkflowNode)},
  { 39, -1, sizeof(::flyteidl::core::ApproveCondition)},
  { 45, -1, sizeof(::flyteidl::core::SignalCondition)},
  { 53, -1, sizeof(::flyteidl::core::SleepCondition)},
  { 59, -1, sizeof(::flyteidl::core::GateNode)},
  { 68, -1, sizeof(::flyteidl::core::NodeMetadata)},
  { 78, -1, sizeof(::flyteidl::core::Alias)},
  { 85, -1, sizeof(::flyteidl::core::Node)},
  { 100, 107, sizeof(::flyteidl::core::WorkflowMetadata_TagsEntry_DoNotUse)},
  { 109, -1, sizeof(::flyteidl::core::WorkflowMetadata)},
  { 117, -1, sizeof(::flyteidl::core::WorkflowMetadataDefaults)},
  { 123, -1, sizeof(::flyteidl::core::WorkflowTemplate)},
  { 135, -1, sizeof(::flyteidl::core::TaskNodeOverrides)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_IfBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_IfElseBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_BranchNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_TaskNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_WorkflowNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_ApproveCondition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_SignalCondition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_SleepCondition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_GateNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_NodeMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_Alias_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_Node_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_WorkflowMetadata_TagsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_WorkflowMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_WorkflowMetadataDefaults_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_WorkflowTemplate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_TaskNodeOverrides_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fcore_2fworkflow_2eproto = {
  {}, AddDescriptors_flyteidl_2fcore_2fworkflow_2eproto, "flyteidl/core/workflow.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fcore_2fworkflow_2eproto::offsets,
  file_level_metadata_flyteidl_2fcore_2fworkflow_2eproto, 17, file_level_enum_descriptors_flyteidl_2fcore_2fworkflow_2eproto, file_level_service_descriptors_flyteidl_2fcore_2fworkflow_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fcore_2fworkflow_2eproto[] =
  "\n\034flyteidl/core/workflow.proto\022\rflyteidl"
  ".core\032\035flyteidl/core/condition.proto\032\035fl"
  "yteidl/core/execution.proto\032\036flyteidl/co"
  "re/identifier.proto\032\035flyteidl/core/inter"
  "face.proto\032\034flyteidl/core/literals.proto"
  "\032\031flyteidl/core/tasks.proto\032\031flyteidl/co"
  "re/types.proto\032\034flyteidl/core/security.p"
  "roto\032\036google/protobuf/duration.proto\"f\n\007"
  "IfBlock\0223\n\tcondition\030\001 \001(\0132 .flyteidl.co"
  "re.BooleanExpression\022&\n\tthen_node\030\002 \001(\0132"
  "\023.flyteidl.core.Node\"\266\001\n\013IfElseBlock\022$\n\004"
  "case\030\001 \001(\0132\026.flyteidl.core.IfBlock\022%\n\005ot"
  "her\030\002 \003(\0132\026.flyteidl.core.IfBlock\022(\n\tels"
  "e_node\030\003 \001(\0132\023.flyteidl.core.NodeH\000\022%\n\005e"
  "rror\030\004 \001(\0132\024.flyteidl.core.ErrorH\000B\t\n\007de"
  "fault\"9\n\nBranchNode\022+\n\007if_else\030\001 \001(\0132\032.f"
  "lyteidl.core.IfElseBlock\"\177\n\010TaskNode\0221\n\014"
  "reference_id\030\001 \001(\0132\031.flyteidl.core.Ident"
  "ifierH\000\0223\n\toverrides\030\002 \001(\0132 .flyteidl.co"
  "re.TaskNodeOverridesB\013\n\treference\"\207\001\n\014Wo"
  "rkflowNode\0223\n\016launchplan_ref\030\001 \001(\0132\031.fly"
  "teidl.core.IdentifierH\000\0225\n\020sub_workflow_"
  "ref\030\002 \001(\0132\031.flyteidl.core.IdentifierH\000B\013"
  "\n\treference\"%\n\020ApproveCondition\022\021\n\tsigna"
  "l_id\030\001 \001(\t\"l\n\017SignalCondition\022\021\n\tsignal_"
  "id\030\001 \001(\t\022(\n\004type\030\002 \001(\0132\032.flyteidl.core.L"
  "iteralType\022\034\n\024output_variable_name\030\003 \001(\t"
  "\"=\n\016SleepCondition\022+\n\010duration\030\001 \001(\0132\031.g"
  "oogle.protobuf.Duration\"\255\001\n\010GateNode\0222\n\007"
  "approve\030\001 \001(\0132\037.flyteidl.core.ApproveCon"
  "ditionH\000\0220\n\006signal\030\002 \001(\0132\036.flyteidl.core"
  ".SignalConditionH\000\022.\n\005sleep\030\003 \001(\0132\035.flyt"
  "eidl.core.SleepConditionH\000B\013\n\tcondition\""
  "\247\001\n\014NodeMetadata\022\014\n\004name\030\001 \001(\t\022*\n\007timeou"
  "t\030\004 \001(\0132\031.google.protobuf.Duration\022-\n\007re"
  "tries\030\005 \001(\0132\034.flyteidl.core.RetryStrateg"
  "y\022\027\n\rinterruptible\030\006 \001(\010H\000B\025\n\023interrupti"
  "ble_value\"#\n\005Alias\022\013\n\003var\030\001 \001(\t\022\r\n\005alias"
  "\030\002 \001(\t\"\200\003\n\004Node\022\n\n\002id\030\001 \001(\t\022-\n\010metadata\030"
  "\002 \001(\0132\033.flyteidl.core.NodeMetadata\022&\n\006in"
  "puts\030\003 \003(\0132\026.flyteidl.core.Binding\022\031\n\021up"
  "stream_node_ids\030\004 \003(\t\022,\n\016output_aliases\030"
  "\005 \003(\0132\024.flyteidl.core.Alias\022,\n\ttask_node"
  "\030\006 \001(\0132\027.flyteidl.core.TaskNodeH\000\0224\n\rwor"
  "kflow_node\030\007 \001(\0132\033.flyteidl.core.Workflo"
  "wNodeH\000\0220\n\013branch_node\030\010 \001(\0132\031.flyteidl."
  "core.BranchNodeH\000\022,\n\tgate_node\030\t \001(\0132\027.f"
  "lyteidl.core.GateNodeH\000B\010\n\006target\"\315\002\n\020Wo"
  "rkflowMetadata\022;\n\022quality_of_service\030\001 \001"
  "(\0132\037.flyteidl.core.QualityOfService\022C\n\no"
  "n_failure\030\002 \001(\0162/.flyteidl.core.Workflow"
  "Metadata.OnFailurePolicy\0227\n\004tags\030\003 \003(\0132)"
  ".flyteidl.core.WorkflowMetadata.TagsEntr"
  "y\032+\n\tTagsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001"
  "(\t:\0028\001\"Q\n\017OnFailurePolicy\022\024\n\020FAIL_IMMEDI"
  "ATELY\020\000\022(\n$FAIL_AFTER_EXECUTABLE_NODES_C"
  "OMPLETE\020\001\"1\n\030WorkflowMetadataDefaults\022\025\n"
  "\rinterruptible\030\001 \001(\010\"\332\002\n\020WorkflowTemplat"
  "e\022%\n\002id\030\001 \001(\0132\031.flyteidl.core.Identifier"
  "\0221\n\010metadata\030\002 \001(\0132\037.flyteidl.core.Workf"
  "lowMetadata\0220\n\tinterface\030\003 \001(\0132\035.flyteid"
  "l.core.TypedInterface\022\"\n\005nodes\030\004 \003(\0132\023.f"
  "lyteidl.core.Node\022\'\n\007outputs\030\005 \003(\0132\026.fly"
  "teidl.core.Binding\022)\n\014failure_node\030\006 \001(\013"
  "2\023.flyteidl.core.Node\022B\n\021metadata_defaul"
  "ts\030\007 \001(\0132\'.flyteidl.core.WorkflowMetadat"
  "aDefaults\"@\n\021TaskNodeOverrides\022+\n\tresour"
  "ces\030\001 \001(\0132\030.flyteidl.core.ResourcesB6Z4g"
  "ithub.com/flyteorg/flyteidl/gen/pb-go/fl"
  "yteidl/coreb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fcore_2fworkflow_2eproto = {
  false, InitDefaults_flyteidl_2fcore_2fworkflow_2eproto, 
  descriptor_table_protodef_flyteidl_2fcore_2fworkflow_2eproto,
  "flyteidl/core/workflow.proto", &assign_descriptors_table_flyteidl_2fcore_2fworkflow_2eproto, 2779,
};

void AddDescriptors_flyteidl_2fcore_2fworkflow_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[9] =
  {
    ::AddDescriptors_flyteidl_2fcore_2fcondition_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fexecution_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fidentifier_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2finterface_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fliterals_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2ftasks_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2ftypes_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fsecurity_2eproto,
    ::AddDescriptors_google_2fprotobuf_2fduration_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fcore_2fworkflow_2eproto, deps, 9);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fcore_2fworkflow_2eproto = []() { AddDescriptors_flyteidl_2fcore_2fworkflow_2eproto(); return true; }();
namespace flyteidl {
namespace core {
const ::google::protobuf::EnumDescriptor* WorkflowMetadata_OnFailurePolicy_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flyteidl_2fcore_2fworkflow_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2fworkflow_2eproto[0];
}
bool WorkflowMetadata_OnFailurePolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const WorkflowMetadata_OnFailurePolicy WorkflowMetadata::FAIL_IMMEDIATELY;
const WorkflowMetadata_OnFailurePolicy WorkflowMetadata::FAIL_AFTER_EXECUTABLE_NODES_COMPLETE;
const WorkflowMetadata_OnFailurePolicy WorkflowMetadata::OnFailurePolicy_MIN;
const WorkflowMetadata_OnFailurePolicy WorkflowMetadata::OnFailurePolicy_MAX;
const int WorkflowMetadata::OnFailurePolicy_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void IfBlock::InitAsDefaultInstance() {
  ::flyteidl::core::_IfBlock_default_instance_._instance.get_mutable()->condition_ = const_cast< ::flyteidl::core::BooleanExpression*>(
      ::flyteidl::core::BooleanExpression::internal_default_instance());
  ::flyteidl::core::_IfBlock_default_instance_._instance.get_mutable()->then_node_ = const_cast< ::flyteidl::core::Node*>(
      ::flyteidl::core::Node::internal_default_instance());
}
class IfBlock::HasBitSetters {
 public:
  static const ::flyteidl::core::BooleanExpression& condition(const IfBlock* msg);
  static const ::flyteidl::core::Node& then_node(const IfBlock* msg);
};

const ::flyteidl::core::BooleanExpression&
IfBlock::HasBitSetters::condition(const IfBlock* msg) {
  return *msg->condition_;
}
const ::flyteidl::core::Node&
IfBlock::HasBitSetters::then_node(const IfBlock* msg) {
  return *msg->then_node_;
}
void IfBlock::clear_condition() {
  if (GetArenaNoVirtual() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IfBlock::kConditionFieldNumber;
const int IfBlock::kThenNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IfBlock::IfBlock()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.IfBlock)
}
IfBlock::IfBlock(const IfBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_condition()) {
    condition_ = new ::flyteidl::core::BooleanExpression(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  if (from.has_then_node()) {
    then_node_ = new ::flyteidl::core::Node(*from.then_node_);
  } else {
    then_node_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.IfBlock)
}

void IfBlock::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BranchNode_flyteidl_2fcore_2fworkflow_2eproto.base);
  ::memset(&condition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&then_node_) -
      reinterpret_cast<char*>(&condition_)) + sizeof(then_node_));
}

IfBlock::~IfBlock() {
  // @@protoc_insertion_point(destructor:flyteidl.core.IfBlock)
  SharedDtor();
}

void IfBlock::SharedDtor() {
  if (this != internal_default_instance()) delete condition_;
  if (this != internal_default_instance()) delete then_node_;
}

void IfBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IfBlock& IfBlock::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BranchNode_flyteidl_2fcore_2fworkflow_2eproto.base);
  return *internal_default_instance();
}


void IfBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.IfBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && then_node_ != nullptr) {
    delete then_node_;
  }
  then_node_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IfBlock::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<IfBlock*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.BooleanExpression condition = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::BooleanExpression::_InternalParse;
        object = msg->mutable_condition();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.Node then_node = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Node::_InternalParse;
        object = msg->mutable_then_node();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IfBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.IfBlock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.BooleanExpression condition = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Node then_node = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_then_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.IfBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.IfBlock)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IfBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.IfBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.BooleanExpression condition = 1;
  if (this->has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::condition(this), output);
  }

  // .flyteidl.core.Node then_node = 2;
  if (this->has_then_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::then_node(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.IfBlock)
}

::google::protobuf::uint8* IfBlock::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.IfBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.BooleanExpression condition = 1;
  if (this->has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::condition(this), target);
  }

  // .flyteidl.core.Node then_node = 2;
  if (this->has_then_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::then_node(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.IfBlock)
  return target;
}

size_t IfBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.IfBlock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.BooleanExpression condition = 1;
  if (this->has_condition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *condition_);
  }

  // .flyteidl.core.Node then_node = 2;
  if (this->has_then_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *then_node_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IfBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.IfBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const IfBlock* source =
      ::google::protobuf::DynamicCastToGenerated<IfBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.IfBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.IfBlock)
    MergeFrom(*source);
  }
}

void IfBlock::MergeFrom(const IfBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.IfBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_condition()) {
    mutable_condition()->::flyteidl::core::BooleanExpression::MergeFrom(from.condition());
  }
  if (from.has_then_node()) {
    mutable_then_node()->::flyteidl::core::Node::MergeFrom(from.then_node());
  }
}

void IfBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.IfBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IfBlock::CopyFrom(const IfBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.IfBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IfBlock::IsInitialized() const {
  return true;
}

void IfBlock::Swap(IfBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IfBlock::InternalSwap(IfBlock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(condition_, other->condition_);
  swap(then_node_, other->then_node_);
}

::google::protobuf::Metadata IfBlock::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fworkflow_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fworkflow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void IfElseBlock::InitAsDefaultInstance() {
  ::flyteidl::core::_IfElseBlock_default_instance_._instance.get_mutable()->case__ = const_cast< ::flyteidl::core::IfBlock*>(
      ::flyteidl::core::IfBlock::internal_default_instance());
  ::flyteidl::core::_IfElseBlock_default_instance_.else_node_ = const_cast< ::flyteidl::core::Node*>(
      ::flyteidl::core::Node::internal_default_instance());
  ::flyteidl::core::_IfElseBlock_default_instance_.error_ = const_cast< ::flyteidl::core::Error*>(
      ::flyteidl::core::Error::internal_default_instance());
}
class IfElseBlock::HasBitSetters {
 public:
  static const ::flyteidl::core::IfBlock& case_(const IfElseBlock* msg);
  static const ::flyteidl::core::Node& else_node(const IfElseBlock* msg);
  static const ::flyteidl::core::Error& error(const IfElseBlock* msg);
};

const ::flyteidl::core::IfBlock&
IfElseBlock::HasBitSetters::case_(const IfElseBlock* msg) {
  return *msg->case__;
}
const ::flyteidl::core::Node&
IfElseBlock::HasBitSetters::else_node(const IfElseBlock* msg) {
  return *msg->default_.else_node_;
}
const ::flyteidl::core::Error&
IfElseBlock::HasBitSetters::error(const IfElseBlock* msg) {
  return *msg->default_.error_;
}
void IfElseBlock::set_allocated_else_node(::flyteidl::core::Node* else_node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_default();
  if (else_node) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      else_node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, else_node, submessage_arena);
    }
    set_has_else_node();
    default_.else_node_ = else_node;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.IfElseBlock.else_node)
}
void IfElseBlock::set_allocated_error(::flyteidl::core::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_default();
  if (error) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    default_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.IfElseBlock.error)
}
void IfElseBlock::clear_error() {
  if (has_error()) {
    delete default_.error_;
    clear_has_default();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IfElseBlock::kCaseFieldNumber;
const int IfElseBlock::kOtherFieldNumber;
const int IfElseBlock::kElseNodeFieldNumber;
const int IfElseBlock::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IfElseBlock::IfElseBlock()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.IfElseBlock)
}
IfElseBlock::IfElseBlock(const IfElseBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      other_(from.other_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_case_()) {
    case__ = new ::flyteidl::core::IfBlock(*from.case__);
  } else {
    case__ = nullptr;
  }
  clear_has_default();
  switch (from.default_case()) {
    case kElseNode: {
      mutable_else_node()->::flyteidl::core::Node::MergeFrom(from.else_node());
      break;
    }
    case kError: {
      mutable_error()->::flyteidl::core::Error::MergeFrom(from.error());
      break;
    }
    case DEFAULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.IfElseBlock)
}

void IfElseBlock::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BranchNode_flyteidl_2fcore_2fworkflow_2eproto.base);
  case__ = nullptr;
  clear_has_default();
}

IfElseBlock::~IfElseBlock() {
  // @@protoc_insertion_point(destructor:flyteidl.core.IfElseBlock)
  SharedDtor();
}

void IfElseBlock::SharedDtor() {
  if (this != internal_default_instance()) delete case__;
  if (has_default()) {
    clear_default();
  }
}

void IfElseBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IfElseBlock& IfElseBlock::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BranchNode_flyteidl_2fcore_2fworkflow_2eproto.base);
  return *internal_default_instance();
}


void IfElseBlock::clear_default() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.IfElseBlock)
  switch (default_case()) {
    case kElseNode: {
      delete default_.else_node_;
      break;
    }
    case kError: {
      delete default_.error_;
      break;
    }
    case DEFAULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DEFAULT_NOT_SET;
}


void IfElseBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.IfElseBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  other_.Clear();
  if (GetArenaNoVirtual() == nullptr && case__ != nullptr) {
    delete case__;
  }
  case__ = nullptr;
  clear_default();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IfElseBlock::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<IfElseBlock*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.IfBlock case = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::IfBlock::_InternalParse;
        object = msg->mutable_case_();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .flyteidl.core.IfBlock other = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::core::IfBlock::_InternalParse;
          object = msg->add_other();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // .flyteidl.core.Node else_node = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Node::_InternalParse;
        object = msg->mutable_else_node();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.Error error = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Error::_InternalParse;
        object = msg->mutable_error();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IfElseBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.IfElseBlock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.IfBlock case = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_case_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.core.IfBlock other = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_other()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Node else_node = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_else_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Error error = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.IfElseBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.IfElseBlock)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IfElseBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.IfElseBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.IfBlock case = 1;
  if (this->has_case_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::case_(this), output);
  }

  // repeated .flyteidl.core.IfBlock other = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->other_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->other(static_cast<int>(i)),
      output);
  }

  // .flyteidl.core.Node else_node = 3;
  if (has_else_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::else_node(this), output);
  }

  // .flyteidl.core.Error error = 4;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::error(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.IfElseBlock)
}

::google::protobuf::uint8* IfElseBlock::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.IfElseBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.IfBlock case = 1;
  if (this->has_case_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::case_(this), target);
  }

  // repeated .flyteidl.core.IfBlock other = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->other_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->other(static_cast<int>(i)), target);
  }

  // .flyteidl.core.Node else_node = 3;
  if (has_else_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::else_node(this), target);
  }

  // .flyteidl.core.Error error = 4;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::error(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.IfElseBlock)
  return target;
}

size_t IfElseBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.IfElseBlock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.core.IfBlock other = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->other_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->other(static_cast<int>(i)));
    }
  }

  // .flyteidl.core.IfBlock case = 1;
  if (this->has_case_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *case__);
  }

  switch (default_case()) {
    // .flyteidl.core.Node else_node = 3;
    case kElseNode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *default_.else_node_);
      break;
    }
    // .flyteidl.core.Error error = 4;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *default_.error_);
      break;
    }
    case DEFAULT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IfElseBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.IfElseBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const IfElseBlock* source =
      ::google::protobuf::DynamicCastToGenerated<IfElseBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.IfElseBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.IfElseBlock)
    MergeFrom(*source);
  }
}

void IfElseBlock::MergeFrom(const IfElseBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.IfElseBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  other_.MergeFrom(from.other_);
  if (from.has_case_()) {
    mutable_case_()->::flyteidl::core::IfBlock::MergeFrom(from.case_());
  }
  switch (from.default_case()) {
    case kElseNode: {
      mutable_else_node()->::flyteidl::core::Node::MergeFrom(from.else_node());
      break;
    }
    case kError: {
      mutable_error()->::flyteidl::core::Error::MergeFrom(from.error());
      break;
    }
    case DEFAULT_NOT_SET: {
      break;
    }
  }
}

void IfElseBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.IfElseBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IfElseBlock::CopyFrom(const IfElseBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.IfElseBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IfElseBlock::IsInitialized() const {
  return true;
}

void IfElseBlock::Swap(IfElseBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IfElseBlock::InternalSwap(IfElseBlock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&other_)->InternalSwap(CastToBase(&other->other_));
  swap(case__, other->case__);
  swap(default_, other->default_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata IfElseBlock::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fworkflow_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fworkflow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BranchNode::InitAsDefaultInstance() {
  ::flyteidl::core::_BranchNode_default_instance_._instance.get_mutable()->if_else_ = const_cast< ::flyteidl::core::IfElseBlock*>(
      ::flyteidl::core::IfElseBlock::internal_default_instance());
}
class BranchNode::HasBitSetters {
 public:
  static const ::flyteidl::core::IfElseBlock& if_else(const BranchNode* msg);
};

const ::flyteidl::core::IfElseBlock&
BranchNode::HasBitSetters::if_else(const BranchNode* msg) {
  return *msg->if_else_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BranchNode::kIfElseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BranchNode::BranchNode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.BranchNode)
}
BranchNode::BranchNode(const BranchNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_if_else()) {
    if_else_ = new ::flyteidl::core::IfElseBlock(*from.if_else_);
  } else {
    if_else_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.BranchNode)
}

void BranchNode::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BranchNode_flyteidl_2fcore_2fworkflow_2eproto.base);
  if_else_ = nullptr;
}

BranchNode::~BranchNode() {
  // @@protoc_insertion_point(destructor:flyteidl.core.BranchNode)
  SharedDtor();
}

void BranchNode::SharedDtor() {
  if (this != internal_default_instance()) delete if_else_;
}

void BranchNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BranchNode& BranchNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BranchNode_flyteidl_2fcore_2fworkflow_2eproto.base);
  return *internal_default_instance();
}


void BranchNode::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.BranchNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && if_else_ != nullptr) {
    delete if_else_;
  }
  if_else_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BranchNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BranchNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.IfElseBlock if_else = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::IfElseBlock::_InternalParse;
        object = msg->mutable_if_else();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BranchNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.BranchNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.IfElseBlock if_else = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_if_else()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.BranchNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.BranchNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BranchNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.BranchNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.IfElseBlock if_else = 1;
  if (this->has_if_else()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::if_else(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.BranchNode)
}

::google::protobuf::uint8* BranchNode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.BranchNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.IfElseBlock if_else = 1;
  if (this->has_if_else()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::if_else(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.BranchNode)
  return target;
}

size_t BranchNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.BranchNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.IfElseBlock if_else = 1;
  if (this->has_if_else()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *if_else_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BranchNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.BranchNode)
  GOOGLE_DCHECK_NE(&from, this);
  const BranchNode* source =
      ::google::protobuf::DynamicCastToGenerated<BranchNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.BranchNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.BranchNode)
    MergeFrom(*source);
  }
}

void BranchNode::MergeFrom(const BranchNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.BranchNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_if_else()) {
    mutable_if_else()->::flyteidl::core::IfElseBlock::MergeFrom(from.if_else());
  }
}

void BranchNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.BranchNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BranchNode::CopyFrom(const BranchNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.BranchNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BranchNode::IsInitialized() const {
  return true;
}

void BranchNode::Swap(BranchNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BranchNode::InternalSwap(BranchNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(if_else_, other->if_else_);
}

::google::protobuf::Metadata BranchNode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fworkflow_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fworkflow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TaskNode::InitAsDefaultInstance() {
  ::flyteidl::core::_TaskNode_default_instance_.reference_id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
  ::flyteidl::core::_TaskNode_default_instance_._instance.get_mutable()->overrides_ = const_cast< ::flyteidl::core::TaskNodeOverrides*>(
      ::flyteidl::core::TaskNodeOverrides::internal_default_instance());
}
class TaskNode::HasBitSetters {
 public:
  static const ::flyteidl::core::Identifier& reference_id(const TaskNode* msg);
  static const ::flyteidl::core::TaskNodeOverrides& overrides(const TaskNode* msg);
};

const ::flyteidl::core::Identifier&
TaskNode::HasBitSetters::reference_id(const TaskNode* msg) {
  return *msg->reference_.reference_id_;
}
const ::flyteidl::core::TaskNodeOverrides&
TaskNode::HasBitSetters::overrides(const TaskNode* msg) {
  return *msg->overrides_;
}
void TaskNode::set_allocated_reference_id(::flyteidl::core::Identifier* reference_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_reference();
  if (reference_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reference_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reference_id, submessage_arena);
    }
    set_has_reference_id();
    reference_.reference_id_ = reference_id;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.TaskNode.reference_id)
}
void TaskNode::clear_reference_id() {
  if (has_reference_id()) {
    delete reference_.reference_id_;
    clear_has_reference();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskNode::kReferenceIdFieldNumber;
const int TaskNode::kOverridesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskNode::TaskNode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.TaskNode)
}
TaskNode::TaskNode(const TaskNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_overrides()) {
    overrides_ = new ::flyteidl::core::TaskNodeOverrides(*from.overrides_);
  } else {
    overrides_ = nullptr;
  }
  clear_has_reference();
  switch (from.reference_case()) {
    case kReferenceId: {
      mutable_reference_id()->::flyteidl::core::Identifier::MergeFrom(from.reference_id());
      break;
    }
    case REFERENCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.TaskNode)
}

void TaskNode::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TaskNode_flyteidl_2fcore_2fworkflow_2eproto.base);
  overrides_ = nullptr;
  clear_has_reference();
}

TaskNode::~TaskNode() {
  // @@protoc_insertion_point(destructor:flyteidl.core.TaskNode)
  SharedDtor();
}

void TaskNode::SharedDtor() {
  if (this != internal_default_instance()) delete overrides_;
  if (has_reference()) {
    clear_reference();
  }
}

void TaskNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskNode& TaskNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TaskNode_flyteidl_2fcore_2fworkflow_2eproto.base);
  return *internal_default_instance();
}


void TaskNode::clear_reference() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.TaskNode)
  switch (reference_case()) {
    case kReferenceId: {
      delete reference_.reference_id_;
      break;
    }
    case REFERENCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REFERENCE_NOT_SET;
}


void TaskNode::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.TaskNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && overrides_ != nullptr) {
    delete overrides_;
  }
  overrides_ = nullptr;
  clear_reference();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TaskNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TaskNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.Identifier reference_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Identifier::_InternalParse;
        object = msg->mutable_reference_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.TaskNodeOverrides overrides = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::TaskNodeOverrides::_InternalParse;
        object = msg->mutable_overrides();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TaskNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.TaskNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier reference_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reference_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.TaskNodeOverrides overrides = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_overrides()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.TaskNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.TaskNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TaskNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.TaskNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier reference_id = 1;
  if (has_reference_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::reference_id(this), output);
  }

  // .flyteidl.core.TaskNodeOverrides overrides = 2;
  if (this->has_overrides()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::overrides(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.TaskNode)
}

::google::protobuf::uint8* TaskNode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.TaskNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier reference_id = 1;
  if (has_reference_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::reference_id(this), target);
  }

  // .flyteidl.core.TaskNodeOverrides overrides = 2;
  if (this->has_overrides()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::overrides(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.TaskNode)
  return target;
}

size_t TaskNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.TaskNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.TaskNodeOverrides overrides = 2;
  if (this->has_overrides()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *overrides_);
  }

  switch (reference_case()) {
    // .flyteidl.core.Identifier reference_id = 1;
    case kReferenceId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reference_.reference_id_);
      break;
    }
    case REFERENCE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.TaskNode)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskNode* source =
      ::google::protobuf::DynamicCastToGenerated<TaskNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.TaskNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.TaskNode)
    MergeFrom(*source);
  }
}

void TaskNode::MergeFrom(const TaskNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.TaskNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_overrides()) {
    mutable_overrides()->::flyteidl::core::TaskNodeOverrides::MergeFrom(from.overrides());
  }
  switch (from.reference_case()) {
    case kReferenceId: {
      mutable_reference_id()->::flyteidl::core::Identifier::MergeFrom(from.reference_id());
      break;
    }
    case REFERENCE_NOT_SET: {
      break;
    }
  }
}

void TaskNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.TaskNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskNode::CopyFrom(const TaskNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.TaskNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskNode::IsInitialized() const {
  return true;
}

void TaskNode::Swap(TaskNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskNode::InternalSwap(TaskNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(overrides_, other->overrides_);
  swap(reference_, other->reference_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata TaskNode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fworkflow_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fworkflow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WorkflowNode::InitAsDefaultInstance() {
  ::flyteidl::core::_WorkflowNode_default_instance_.launchplan_ref_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
  ::flyteidl::core::_WorkflowNode_default_instance_.sub_workflow_ref_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
}
class WorkflowNode::HasBitSetters {
 public:
  static const ::flyteidl::core::Identifier& launchplan_ref(const WorkflowNode* msg);
  static const ::flyteidl::core::Identifier& sub_workflow_ref(const WorkflowNode* msg);
};

const ::flyteidl::core::Identifier&
WorkflowNode::HasBitSetters::launchplan_ref(const WorkflowNode* msg) {
  return *msg->reference_.launchplan_ref_;
}
const ::flyteidl::core::Identifier&
WorkflowNode::HasBitSetters::sub_workflow_ref(const WorkflowNode* msg) {
  return *msg->reference_.sub_workflow_ref_;
}
void WorkflowNode::set_allocated_launchplan_ref(::flyteidl::core::Identifier* launchplan_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_reference();
  if (launchplan_ref) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      launchplan_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, launchplan_ref, submessage_arena);
    }
    set_has_launchplan_ref();
    reference_.launchplan_ref_ = launchplan_ref;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.WorkflowNode.launchplan_ref)
}
void WorkflowNode::clear_launchplan_ref() {
  if (has_launchplan_ref()) {
    delete reference_.launchplan_ref_;
    clear_has_reference();
  }
}
void WorkflowNode::set_allocated_sub_workflow_ref(::flyteidl::core::Identifier* sub_workflow_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_reference();
  if (sub_workflow_ref) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sub_workflow_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sub_workflow_ref, submessage_arena);
    }
    set_has_sub_workflow_ref();
    reference_.sub_workflow_ref_ = sub_workflow_ref;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.WorkflowNode.sub_workflow_ref)
}
void WorkflowNode::clear_sub_workflow_ref() {
  if (has_sub_workflow_ref()) {
    delete reference_.sub_workflow_ref_;
    clear_has_reference();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowNode::kLaunchplanRefFieldNumber;
const int WorkflowNode::kSubWorkflowRefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowNode::WorkflowNode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.WorkflowNode)
}
WorkflowNode::WorkflowNode(const WorkflowNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_reference();
  switch (from.reference_case()) {
    case kLaunchplanRef: {
      mutable_launchplan_ref()->::flyteidl::core::Identifier::MergeFrom(from.launchplan_ref());
      break;
    }
    case kSubWorkflowRef: {
      mutable_sub_workflow_ref()->::flyteidl::core::Identifier::MergeFrom(from.sub_workflow_ref());
      break;
    }
    case REFERENCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.WorkflowNode)
}

void WorkflowNode::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WorkflowNode_flyteidl_2fcore_2fworkflow_2eproto.base);
  clear_has_reference();
}

WorkflowNode::~WorkflowNode() {
  // @@protoc_insertion_point(destructor:flyteidl.core.WorkflowNode)
  SharedDtor();
}

void WorkflowNode::SharedDtor() {
  if (has_reference()) {
    clear_reference();
  }
}

void WorkflowNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkflowNode& WorkflowNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WorkflowNode_flyteidl_2fcore_2fworkflow_2eproto.base);
  return *internal_default_instance();
}


void WorkflowNode::clear_reference() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.WorkflowNode)
  switch (reference_case()) {
    case kLaunchplanRef: {
      delete reference_.launchplan_ref_;
      break;
    }
    case kSubWorkflowRef: {
      delete reference_.sub_workflow_ref_;
      break;
    }
    case REFERENCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REFERENCE_NOT_SET;
}


void WorkflowNode::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.WorkflowNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_reference();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorkflowNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WorkflowNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.Identifier launchplan_ref = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Identifier::_InternalParse;
        object = msg->mutable_launchplan_ref();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.Identifier sub_workflow_ref = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Identifier::_InternalParse;
        object = msg->mutable_sub_workflow_ref();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkflowNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.WorkflowNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier launchplan_ref = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_launchplan_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Identifier sub_workflow_ref = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sub_workflow_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.WorkflowNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.WorkflowNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorkflowNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.WorkflowNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier launchplan_ref = 1;
  if (has_launchplan_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::launchplan_ref(this), output);
  }

  // .flyteidl.core.Identifier sub_workflow_ref = 2;
  if (has_sub_workflow_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::sub_workflow_ref(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.WorkflowNode)
}

::google::protobuf::uint8* WorkflowNode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.WorkflowNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier launchplan_ref = 1;
  if (has_launchplan_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::launchplan_ref(this), target);
  }

  // .flyteidl.core.Identifier sub_workflow_ref = 2;
  if (has_sub_workflow_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::sub_workflow_ref(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.WorkflowNode)
  return target;
}

size_t WorkflowNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.WorkflowNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (reference_case()) {
    // .flyteidl.core.Identifier launchplan_ref = 1;
    case kLaunchplanRef: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reference_.launchplan_ref_);
      break;
    }
    // .flyteidl.core.Identifier sub_workflow_ref = 2;
    case kSubWorkflowRef: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reference_.sub_workflow_ref_);
      break;
    }
    case REFERENCE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkflowNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.WorkflowNode)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowNode* source =
      ::google::protobuf::DynamicCastToGenerated<WorkflowNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.WorkflowNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.WorkflowNode)
    MergeFrom(*source);
  }
}

void WorkflowNode::MergeFrom(const WorkflowNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.WorkflowNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.reference_case()) {
    case kLaunchplanRef: {
      mutable_launchplan_ref()->::flyteidl::core::Identifier::MergeFrom(from.launchplan_ref());
      break;
    }
    case kSubWorkflowRef: {
      mutable_sub_workflow_ref()->::flyteidl::core::Identifier::MergeFrom(from.sub_workflow_ref());
      break;
    }
    case REFERENCE_NOT_SET: {
      break;
    }
  }
}

void WorkflowNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.WorkflowNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowNode::CopyFrom(const WorkflowNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.WorkflowNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowNode::IsInitialized() const {
  return true;
}

void WorkflowNode::Swap(WorkflowNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowNode::InternalSwap(WorkflowNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(reference_, other->reference_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata WorkflowNode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fworkflow_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fworkflow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ApproveCondition::InitAsDefaultInstance() {
}
class ApproveCondition::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApproveCondition::kSignalIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApproveCondition::ApproveCondition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.ApproveCondition)
}
ApproveCondition::ApproveCondition(const ApproveCondition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signal_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signal_id().size() > 0) {
    signal_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signal_id_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.ApproveCondition)
}

void ApproveCondition::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ApproveCondition_flyteidl_2fcore_2fworkflow_2eproto.base);
  signal_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ApproveCondition::~ApproveCondition() {
  // @@protoc_insertion_point(destructor:flyteidl.core.ApproveCondition)
  SharedDtor();
}

void ApproveCondition::SharedDtor() {
  signal_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ApproveCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApproveCondition& ApproveCondition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ApproveCondition_flyteidl_2fcore_2fworkflow_2eproto.base);
  return *internal_default_instance();
}


void ApproveCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.ApproveCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signal_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApproveCondition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ApproveCondition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string signal_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.ApproveCondition.signal_id");
        object = msg->mutable_signal_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApproveCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.ApproveCondition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string signal_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signal_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signal_id().data(), static_cast<int>(this->signal_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.ApproveCondition.signal_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.ApproveCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.ApproveCondition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApproveCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.ApproveCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string signal_id = 1;
  if (this->signal_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signal_id().data(), static_cast<int>(this->signal_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.ApproveCondition.signal_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->signal_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.ApproveCondition)
}

::google::protobuf::uint8* ApproveCondition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.ApproveCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string signal_id = 1;
  if (this->signal_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signal_id().data(), static_cast<int>(this->signal_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.ApproveCondition.signal_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->signal_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.ApproveCondition)
  return target;
}

size_t ApproveCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.ApproveCondition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string signal_id = 1;
  if (this->signal_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signal_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApproveCondition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.ApproveCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const ApproveCondition* source =
      ::google::protobuf::DynamicCastToGenerated<ApproveCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.ApproveCondition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.ApproveCondition)
    MergeFrom(*source);
  }
}

void ApproveCondition::MergeFrom(const ApproveCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.ApproveCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signal_id().size() > 0) {

    signal_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signal_id_);
  }
}

void ApproveCondition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.ApproveCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApproveCondition::CopyFrom(const ApproveCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.ApproveCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApproveCondition::IsInitialized() const {
  return true;
}

void ApproveCondition::Swap(ApproveCondition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApproveCondition::InternalSwap(ApproveCondition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  signal_id_.Swap(&other->signal_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ApproveCondition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fworkflow_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fworkflow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SignalCondition::InitAsDefaultInstance() {
  ::flyteidl::core::_SignalCondition_default_instance_._instance.get_mutable()->type_ = const_cast< ::flyteidl::core::LiteralType*>(
      ::flyteidl::core::LiteralType::internal_default_instance());
}
class SignalCondition::HasBitSetters {
 public:
  static const ::flyteidl::core::LiteralType& type(const SignalCondition* msg);
};

const ::flyteidl::core::LiteralType&
SignalCondition::HasBitSetters::type(const SignalCondition* msg) {
  return *msg->type_;
}
void SignalCondition::clear_type() {
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignalCondition::kSignalIdFieldNumber;
const int SignalCondition::kTypeFieldNumber;
const int SignalCondition::kOutputVariableNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignalCondition::SignalCondition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.SignalCondition)
}
SignalCondition::SignalCondition(const SignalCondition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signal_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signal_id().size() > 0) {
    signal_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signal_id_);
  }
  output_variable_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.output_variable_name().size() > 0) {
    output_variable_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_variable_name_);
  }
  if (from.has_type()) {
    type_ = new ::flyteidl::core::LiteralType(*from.type_);
  } else {
    type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.SignalCondition)
}

void SignalCondition::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SignalCondition_flyteidl_2fcore_2fworkflow_2eproto.base);
  signal_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_variable_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = nullptr;
}

SignalCondition::~SignalCondition() {
  // @@protoc_insertion_point(destructor:flyteidl.core.SignalCondition)
  SharedDtor();
}

void SignalCondition::SharedDtor() {
  signal_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_variable_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
}

void SignalCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalCondition& SignalCondition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SignalCondition_flyteidl_2fcore_2fworkflow_2eproto.base);
  return *internal_default_instance();
}


void SignalCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.SignalCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signal_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_variable_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SignalCondition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SignalCondition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string signal_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.SignalCondition.signal_id");
        object = msg->mutable_signal_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.core.LiteralType type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::LiteralType::_InternalParse;
        object = msg->mutable_type();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string output_variable_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.SignalCondition.output_variable_name");
        object = msg->mutable_output_variable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SignalCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.SignalCondition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string signal_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signal_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signal_id().data(), static_cast<int>(this->signal_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.SignalCondition.signal_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.LiteralType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string output_variable_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_variable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output_variable_name().data(), static_cast<int>(this->output_variable_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.SignalCondition.output_variable_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.SignalCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.SignalCondition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SignalCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.SignalCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string signal_id = 1;
  if (this->signal_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signal_id().data(), static_cast<int>(this->signal_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.SignalCondition.signal_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->signal_id(), output);
  }

  // .flyteidl.core.LiteralType type = 2;
  if (this->has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::type(this), output);
  }

  // string output_variable_name = 3;
  if (this->output_variable_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_variable_name().data(), static_cast<int>(this->output_variable_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.SignalCondition.output_variable_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->output_variable_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.SignalCondition)
}

::google::protobuf::uint8* SignalCondition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.SignalCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string signal_id = 1;
  if (this->signal_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signal_id().data(), static_cast<int>(this->signal_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.SignalCondition.signal_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->signal_id(), target);
  }

  // .flyteidl.core.LiteralType type = 2;
  if (this->has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::type(this), target);
  }

  // string output_variable_name = 3;
  if (this->output_variable_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_variable_name().data(), static_cast<int>(this->output_variable_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.SignalCondition.output_variable_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->output_variable_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.SignalCondition)
  return target;
}

size_t SignalCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.SignalCondition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string signal_id = 1;
  if (this->signal_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signal_id());
  }

  // string output_variable_name = 3;
  if (this->output_variable_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output_variable_name());
  }

  // .flyteidl.core.LiteralType type = 2;
  if (this->has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *type_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalCondition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.SignalCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalCondition* source =
      ::google::protobuf::DynamicCastToGenerated<SignalCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.SignalCondition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.SignalCondition)
    MergeFrom(*source);
  }
}

void SignalCondition::MergeFrom(const SignalCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.SignalCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signal_id().size() > 0) {

    signal_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signal_id_);
  }
  if (from.output_variable_name().size() > 0) {

    output_variable_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_variable_name_);
  }
  if (from.has_type()) {
    mutable_type()->::flyteidl::core::LiteralType::MergeFrom(from.type());
  }
}

void SignalCondition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.SignalCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalCondition::CopyFrom(const SignalCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.SignalCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalCondition::IsInitialized() const {
  return true;
}

void SignalCondition::Swap(SignalCondition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignalCondition::InternalSwap(SignalCondition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  signal_id_.Swap(&other->signal_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  output_variable_name_.Swap(&other->output_variable_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::google::protobuf::Metadata SignalCondition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fworkflow_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fworkflow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SleepCondition::InitAsDefaultInstance() {
  ::flyteidl::core::_SleepCondition_default_instance_._instance.get_mutable()->duration_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
class SleepCondition::HasBitSetters {
 public:
  static const ::google::protobuf::Duration& duration(const SleepCondition* msg);
};

const ::google::protobuf::Duration&
SleepCondition::HasBitSetters::duration(const SleepCondition* msg) {
  return *msg->duration_;
}
void SleepCondition::clear_duration() {
  if (GetArenaNoVirtual() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SleepCondition::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SleepCondition::SleepCondition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.SleepCondition)
}
SleepCondition::SleepCondition(const SleepCondition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_duration()) {
    duration_ = new ::google::protobuf::Duration(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.SleepCondition)
}

void SleepCondition::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SleepCondition_flyteidl_2fcore_2fworkflow_2eproto.base);
  duration_ = nullptr;
}

SleepCondition::~SleepCondition() {
  // @@protoc_insertion_point(destructor:flyteidl.core.SleepCondition)
  SharedDtor();
}

void SleepCondition::SharedDtor() {
  if (this != internal_default_instance()) delete duration_;
}

void SleepCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SleepCondition& SleepCondition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SleepCondition_flyteidl_2fcore_2fworkflow_2eproto.base);
  return *internal_default_instance();
}


void SleepCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.SleepCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SleepCondition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SleepCondition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Duration duration = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Duration::_InternalParse;
        object = msg->mutable_duration();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SleepCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.SleepCondition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Duration duration = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.SleepCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.SleepCondition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SleepCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.SleepCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration duration = 1;
  if (this->has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::duration(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.SleepCondition)
}

::google::protobuf::uint8* SleepCondition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.SleepCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration duration = 1;
  if (this->has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::duration(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.SleepCondition)
  return target;
}

size_t SleepCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.SleepCondition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration duration = 1;
  if (this->has_duration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SleepCondition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.SleepCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const SleepCondition* source =
      ::google::protobuf::DynamicCastToGenerated<SleepCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.SleepCondition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.SleepCondition)
    MergeFrom(*source);
  }
}

void SleepCondition::MergeFrom(const SleepCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.SleepCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_duration()) {
    mutable_duration()->::google::protobuf::Duration::MergeFrom(from.duration());
  }
}

void SleepCondition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.SleepCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SleepCondition::CopyFrom(const SleepCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.SleepCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SleepCondition::IsInitialized() const {
  return true;
}

void SleepCondition::Swap(SleepCondition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SleepCondition::InternalSwap(SleepCondition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(duration_, other->duration_);
}

::google::protobuf::Metadata SleepCondition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fworkflow_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fworkflow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GateNode::InitAsDefaultInstance() {
  ::flyteidl::core::_GateNode_default_instance_.approve_ = const_cast< ::flyteidl::core::ApproveCondition*>(
      ::flyteidl::core::ApproveCondition::internal_default_instance());
  ::flyteidl::core::_GateNode_default_instance_.signal_ = const_cast< ::flyteidl::core::SignalCondition*>(
      ::flyteidl::core::SignalCondition::internal_default_instance());
  ::flyteidl::core::_GateNode_default_instance_.sleep_ = const_cast< ::flyteidl::core::SleepCondition*>(
      ::flyteidl::core::SleepCondition::internal_default_instance());
}
class GateNode::HasBitSetters {
 public:
  static const ::flyteidl::core::ApproveCondition& approve(const GateNode* msg);
  static const ::flyteidl::core::SignalCondition& signal(const GateNode* msg);
  static const ::flyteidl::core::SleepCondition& sleep(const GateNode* msg);
};

const ::flyteidl::core::ApproveCondition&
GateNode::HasBitSetters::approve(const GateNode* msg) {
  return *msg->condition_.approve_;
}
const ::flyteidl::core::SignalCondition&
GateNode::HasBitSetters::signal(const GateNode* msg) {
  return *msg->condition_.signal_;
}
const ::flyteidl::core::SleepCondition&
GateNode::HasBitSetters::sleep(const GateNode* msg) {
  return *msg->condition_.sleep_;
}
void GateNode::set_allocated_approve(::flyteidl::core::ApproveCondition* approve) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_condition();
  if (approve) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      approve = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, approve, submessage_arena);
    }
    set_has_approve();
    condition_.approve_ = approve;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.GateNode.approve)
}
void GateNode::set_allocated_signal(::flyteidl::core::SignalCondition* signal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_condition();
  if (signal) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signal = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signal, submessage_arena);
    }
    set_has_signal();
    condition_.signal_ = signal;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.GateNode.signal)
}
void GateNode::set_allocated_sleep(::flyteidl::core::SleepCondition* sleep) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_condition();
  if (sleep) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sleep = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sleep, submessage_arena);
    }
    set_has_sleep();
    condition_.sleep_ = sleep;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.GateNode.sleep)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GateNode::kApproveFieldNumber;
const int GateNode::kSignalFieldNumber;
const int GateNode::kSleepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GateNode::GateNode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.GateNode)
}
GateNode::GateNode(const GateNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_condition();
  switch (from.condition_case()) {
    case kApprove: {
      mutable_approve()->::flyteidl::core::ApproveCondition::MergeFrom(from.approve());
      break;
    }
    case kSignal: {
      mutable_signal()->::flyteidl::core::SignalCondition::MergeFrom(from.signal());
      break;
    }
    case kSleep: {
      mutable_sleep()->::flyteidl::core::SleepCondition::MergeFrom(from.sleep());
      break;
    }
    case CONDITION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.GateNode)
}

void GateNode::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GateNode_flyteidl_2fcore_2fworkflow_2eproto.base);
  clear_has_condition();
}

GateNode::~GateNode() {
  // @@protoc_insertion_point(destructor:flyteidl.core.GateNode)
  SharedDtor();
}

void GateNode::SharedDtor() {
  if (has_condition()) {
    clear_condition();
  }
}

void GateNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GateNode& GateNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GateNode_flyteidl_2fcore_2fworkflow_2eproto.base);
  return *internal_default_instance();
}


void GateNode::clear_condition() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.GateNode)
  switch (condition_case()) {
    case kApprove: {
      delete condition_.approve_;
      break;
    }
    case kSignal: {
      delete condition_.signal_;
      break;
    }
    case kSleep: {
      delete condition_.sleep_;
      break;
    }
    case CONDITION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONDITION_NOT_SET;
}


void GateNode::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.GateNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_condition();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GateNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GateNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.ApproveCondition approve = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ApproveCondition::_InternalParse;
        object = msg->mutable_approve();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.SignalCondition signal = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::SignalCondition::_InternalParse;
        object = msg->mutable_signal();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.SleepCondition sleep = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::SleepCondition::_InternalParse;
        object = msg->mutable_sleep();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GateNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.GateNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.ApproveCondition approve = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_approve()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.SignalCondition signal = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.SleepCondition sleep = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sleep()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.GateNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.GateNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GateNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.GateNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ApproveCondition approve = 1;
  if (has_approve()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::approve(this), output);
  }

  // .flyteidl.core.SignalCondition signal = 2;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::signal(this), output);
  }

  // .flyteidl.core.SleepCondition sleep = 3;
  if (has_sleep()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::sleep(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.GateNode)
}

::google::protobuf::uint8* GateNode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.GateNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ApproveCondition approve = 1;
  if (has_approve()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::approve(this), target);
  }

  // .flyteidl.core.SignalCondition signal = 2;
  if (has_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::signal(this), target);
  }

  // .flyteidl.core.SleepCondition sleep = 3;
  if (has_sleep()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::sleep(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.GateNode)
  return target;
}

size_t GateNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.GateNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (condition_case()) {
    // .flyteidl.core.ApproveCondition approve = 1;
    case kApprove: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *condition_.approve_);
      break;
    }
    // .flyteidl.core.SignalCondition signal = 2;
    case kSignal: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *condition_.signal_);
      break;
    }
    // .flyteidl.core.SleepCondition sleep = 3;
    case kSleep: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *condition_.sleep_);
      break;
    }
    case CONDITION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GateNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.GateNode)
  GOOGLE_DCHECK_NE(&from, this);
  const GateNode* source =
      ::google::protobuf::DynamicCastToGenerated<GateNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.GateNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.GateNode)
    MergeFrom(*source);
  }
}

void GateNode::MergeFrom(const GateNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.GateNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.condition_case()) {
    case kApprove: {
      mutable_approve()->::flyteidl::core::ApproveCondition::MergeFrom(from.approve());
      break;
    }
    case kSignal: {
      mutable_signal()->::flyteidl::core::SignalCondition::MergeFrom(from.signal());
      break;
    }
    case kSleep: {
      mutable_sleep()->::flyteidl::core::SleepCondition::MergeFrom(from.sleep());
      break;
    }
    case CONDITION_NOT_SET: {
      break;
    }
  }
}

void GateNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.GateNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateNode::CopyFrom(const GateNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.GateNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateNode::IsInitialized() const {
  return true;
}

void GateNode::Swap(GateNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateNode::InternalSwap(GateNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(condition_, other->condition_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata GateNode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fworkflow_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fworkflow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NodeMetadata::InitAsDefaultInstance() {
  ::flyteidl::core::_NodeMetadata_default_instance_._instance.get_mutable()->timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::flyteidl::core::_NodeMetadata_default_instance_._instance.get_mutable()->retries_ = const_cast< ::flyteidl::core::RetryStrategy*>(
      ::flyteidl::core::RetryStrategy::internal_default_instance());
  ::flyteidl::core::_NodeMetadata_default_instance_.interruptible_ = false;
}
class NodeMetadata::HasBitSetters {
 public:
  static const ::google::protobuf::Duration& timeout(const NodeMetadata* msg);
  static const ::flyteidl::core::RetryStrategy& retries(const NodeMetadata* msg);
};

const ::google::protobuf::Duration&
NodeMetadata::HasBitSetters::timeout(const NodeMetadata* msg) {
  return *msg->timeout_;
}
const ::flyteidl::core::RetryStrategy&
NodeMetadata::HasBitSetters::retries(const NodeMetadata* msg) {
  return *msg->retries_;
}
void NodeMetadata::clear_timeout() {
  if (GetArenaNoVirtual() == nullptr && timeout_ != nullptr) {
    delete timeout_;
  }
  timeout_ = nullptr;
}
void NodeMetadata::clear_retries() {
  if (GetArenaNoVirtual() == nullptr && retries_ != nullptr) {
    delete retries_;
  }
  retries_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeMetadata::kNameFieldNumber;
const int NodeMetadata::kTimeoutFieldNumber;
const int NodeMetadata::kRetriesFieldNumber;
const int NodeMetadata::kInterruptibleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeMetadata::NodeMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.NodeMetadata)
}
NodeMetadata::NodeMetadata(const NodeMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_timeout()) {
    timeout_ = new ::google::protobuf::Duration(*from.timeout_);
  } else {
    timeout_ = nullptr;
  }
  if (from.has_retries()) {
    retries_ = new ::flyteidl::core::RetryStrategy(*from.retries_);
  } else {
    retries_ = nullptr;
  }
  clear_has_interruptible_value();
  switch (from.interruptible_value_case()) {
    case kInterruptible: {
      set_interruptible(from.interruptible());
      break;
    }
    case INTERRUPTIBLE_VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.NodeMetadata)
}

void NodeMetadata::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NodeMetadata_flyteidl_2fcore_2fworkflow_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retries_) -
      reinterpret_cast<char*>(&timeout_)) + sizeof(retries_));
  clear_has_interruptible_value();
}

NodeMetadata::~NodeMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.core.NodeMetadata)
  SharedDtor();
}

void NodeMetadata::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timeout_;
  if (this != internal_default_instance()) delete retries_;
  if (has_interruptible_value()) {
    clear_interruptible_value();
  }
}

void NodeMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeMetadata& NodeMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeMetadata_flyteidl_2fcore_2fworkflow_2eproto.base);
  return *internal_default_instance();
}


void NodeMetadata::clear_interruptible_value() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.NodeMetadata)
  switch (interruptible_value_case()) {
    case kInterruptible: {
      // No need to clear
      break;
    }
    case INTERRUPTIBLE_VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INTERRUPTIBLE_VALUE_NOT_SET;
}


void NodeMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.NodeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && timeout_ != nullptr) {
    delete timeout_;
  }
  timeout_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && retries_ != nullptr) {
    delete retries_;
  }
  retries_ = nullptr;
  clear_interruptible_value();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeMetadata::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeMetadata*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.NodeMetadata.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Duration timeout = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Duration::_InternalParse;
        object = msg->mutable_timeout();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.RetryStrategy retries = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::RetryStrategy::_InternalParse;
        object = msg->mutable_retries();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool interruptible = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_interruptible(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.NodeMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.NodeMetadata.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration timeout = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.RetryStrategy retries = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_retries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool interruptible = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          clear_interruptible_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &interruptible_value_.interruptible_)));
          set_has_interruptible();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.NodeMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.NodeMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.NodeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.NodeMetadata.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.protobuf.Duration timeout = 4;
  if (this->has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::timeout(this), output);
  }

  // .flyteidl.core.RetryStrategy retries = 5;
  if (this->has_retries()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::retries(this), output);
  }

  // bool interruptible = 6;
  if (has_interruptible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->interruptible(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.NodeMetadata)
}

::google::protobuf::uint8* NodeMetadata::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.NodeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.NodeMetadata.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.protobuf.Duration timeout = 4;
  if (this->has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::timeout(this), target);
  }

  // .flyteidl.core.RetryStrategy retries = 5;
  if (this->has_retries()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::retries(this), target);
  }

  // bool interruptible = 6;
  if (has_interruptible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->interruptible(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.NodeMetadata)
  return target;
}

size_t NodeMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.NodeMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.protobuf.Duration timeout = 4;
  if (this->has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timeout_);
  }

  // .flyteidl.core.RetryStrategy retries = 5;
  if (this->has_retries()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *retries_);
  }

  switch (interruptible_value_case()) {
    // bool interruptible = 6;
    case kInterruptible: {
      total_size += 1 + 1;
      break;
    }
    case INTERRUPTIBLE_VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.NodeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeMetadata* source =
      ::google::protobuf::DynamicCastToGenerated<NodeMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.NodeMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.NodeMetadata)
    MergeFrom(*source);
  }
}

void NodeMetadata::MergeFrom(const NodeMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.NodeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_timeout()) {
    mutable_timeout()->::google::protobuf::Duration::MergeFrom(from.timeout());
  }
  if (from.has_retries()) {
    mutable_retries()->::flyteidl::core::RetryStrategy::MergeFrom(from.retries());
  }
  switch (from.interruptible_value_case()) {
    case kInterruptible: {
      set_interruptible(from.interruptible());
      break;
    }
    case INTERRUPTIBLE_VALUE_NOT_SET: {
      break;
    }
  }
}

void NodeMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.NodeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeMetadata::CopyFrom(const NodeMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.NodeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeMetadata::IsInitialized() const {
  return true;
}

void NodeMetadata::Swap(NodeMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeMetadata::InternalSwap(NodeMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timeout_, other->timeout_);
  swap(retries_, other->retries_);
  swap(interruptible_value_, other->interruptible_value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata NodeMetadata::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fworkflow_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fworkflow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Alias::InitAsDefaultInstance() {
}
class Alias::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Alias::kVarFieldNumber;
const int Alias::kAliasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Alias::Alias()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.Alias)
}
Alias::Alias(const Alias& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.var().size() > 0) {
    var_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.var_);
  }
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.alias().size() > 0) {
    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Alias)
}

void Alias::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Alias_flyteidl_2fcore_2fworkflow_2eproto.base);
  var_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Alias::~Alias() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Alias)
  SharedDtor();
}

void Alias::SharedDtor() {
  var_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Alias::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Alias& Alias::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Alias_flyteidl_2fcore_2fworkflow_2eproto.base);
  return *internal_default_instance();
}


void Alias::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.Alias)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Alias::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Alias*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string var = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.Alias.var");
        object = msg->mutable_var();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string alias = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.Alias.alias");
        object = msg->mutable_alias();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Alias::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.Alias)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string var = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_var()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->var().data(), static_cast<int>(this->var().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.Alias.var"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string alias = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alias().data(), static_cast<int>(this->alias().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.Alias.alias"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.Alias)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.Alias)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Alias::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.Alias)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string var = 1;
  if (this->var().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->var().data(), static_cast<int>(this->var().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.Alias.var");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->var(), output);
  }

  // string alias = 2;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), static_cast<int>(this->alias().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.Alias.alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->alias(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.Alias)
}

::google::protobuf::uint8* Alias::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.Alias)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string var = 1;
  if (this->var().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->var().data(), static_cast<int>(this->var().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.Alias.var");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->var(), target);
  }

  // string alias = 2;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), static_cast<int>(this->alias().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.Alias.alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->alias(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.Alias)
  return target;
}

size_t Alias::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.Alias)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var = 1;
  if (this->var().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->var());
  }

  // string alias = 2;
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alias());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Alias::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.Alias)
  GOOGLE_DCHECK_NE(&from, this);
  const Alias* source =
      ::google::protobuf::DynamicCastToGenerated<Alias>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.Alias)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.Alias)
    MergeFrom(*source);
  }
}

void Alias::MergeFrom(const Alias& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.Alias)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.var().size() > 0) {

    var_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.var_);
  }
  if (from.alias().size() > 0) {

    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
}

void Alias::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.Alias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Alias::CopyFrom(const Alias& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.Alias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alias::IsInitialized() const {
  return true;
}

void Alias::Swap(Alias* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Alias::InternalSwap(Alias* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  var_.Swap(&other->var_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  alias_.Swap(&other->alias_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Alias::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fworkflow_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fworkflow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Node::InitAsDefaultInstance() {
  ::flyteidl::core::_Node_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::flyteidl::core::NodeMetadata*>(
      ::flyteidl::core::NodeMetadata::internal_default_instance());
  ::flyteidl::core::_Node_default_instance_.task_node_ = const_cast< ::flyteidl::core::TaskNode*>(
      ::flyteidl::core::TaskNode::internal_default_instance());
  ::flyteidl::core::_Node_default_instance_.workflow_node_ = const_cast< ::flyteidl::core::WorkflowNode*>(
      ::flyteidl::core::WorkflowNode::internal_default_instance());
  ::flyteidl::core::_Node_default_instance_.branch_node_ = const_cast< ::flyteidl::core::BranchNode*>(
      ::flyteidl::core::BranchNode::internal_default_instance());
  ::flyteidl::core::_Node_default_instance_.gate_node_ = const_cast< ::flyteidl::core::GateNode*>(
      ::flyteidl::core::GateNode::internal_default_instance());
}
class Node::HasBitSetters {
 public:
  static const ::flyteidl::core::NodeMetadata& metadata(const Node* msg);
  static const ::flyteidl::core::TaskNode& task_node(const Node* msg);
  static const ::flyteidl::core::WorkflowNode& workflow_node(const Node* msg);
  static const ::flyteidl::core::BranchNode& branch_node(const Node* msg);
  static const ::flyteidl::core::GateNode& gate_node(const Node* msg);
};

const ::flyteidl::core::NodeMetadata&
Node::HasBitSetters::metadata(const Node* msg) {
  return *msg->metadata_;
}
const ::flyteidl::core::TaskNode&
Node::HasBitSetters::task_node(const Node* msg) {
  return *msg->target_.task_node_;
}
const ::flyteidl::core::WorkflowNode&
Node::HasBitSetters::workflow_node(const Node* msg) {
  return *msg->target_.workflow_node_;
}
const ::flyteidl::core::BranchNode&
Node::HasBitSetters::branch_node(const Node* msg) {
  return *msg->target_.branch_node_;
}
const ::flyteidl::core::GateNode&
Node::HasBitSetters::gate_node(const Node* msg) {
  return *msg->target_.gate_node_;
}
void Node::clear_inputs() {
  inputs_.Clear();
}
void Node::set_allocated_task_node(::flyteidl::core::TaskNode* task_node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_target();
  if (task_node) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task_node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task_node, submessage_arena);
    }
    set_has_task_node();
    target_.task_node_ = task_node;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Node.task_node)
}
void Node::set_allocated_workflow_node(::flyteidl::core::WorkflowNode* workflow_node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_target();
  if (workflow_node) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      workflow_node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, workflow_node, submessage_arena);
    }
    set_has_workflow_node();
    target_.workflow_node_ = workflow_node;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Node.workflow_node)
}
void Node::set_allocated_branch_node(::flyteidl::core::BranchNode* branch_node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_target();
  if (branch_node) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      branch_node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, branch_node, submessage_arena);
    }
    set_has_branch_node();
    target_.branch_node_ = branch_node;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Node.branch_node)
}
void Node::set_allocated_gate_node(::flyteidl::core::GateNode* gate_node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_target();
  if (gate_node) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gate_node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gate_node, submessage_arena);
    }
    set_has_gate_node();
    target_.gate_node_ = gate_node;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Node.gate_node)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kIdFieldNumber;
const int Node::kMetadataFieldNumber;
const int Node::kInputsFieldNumber;
const int Node::kUpstreamNodeIdsFieldNumber;
const int Node::kOutputAliasesFieldNumber;
const int Node::kTaskNodeFieldNumber;
const int Node::kWorkflowNodeFieldNumber;
const int Node::kBranchNodeFieldNumber;
const int Node::kGateNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.Node)
}
Node::Node(const Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      inputs_(from.inputs_),
      upstream_node_ids_(from.upstream_node_ids_),
      output_aliases_(from.output_aliases_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_metadata()) {
    metadata_ = new ::flyteidl::core::NodeMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  clear_has_target();
  switch (from.target_case()) {
    case kTaskNode: {
      mutable_task_node()->::flyteidl::core::TaskNode::MergeFrom(from.task_node());
      break;
    }
    case kWorkflowNode: {
      mutable_workflow_node()->::flyteidl::core::WorkflowNode::MergeFrom(from.workflow_node());
      break;
    }
    case kBranchNode: {
      mutable_branch_node()->::flyteidl::core::BranchNode::MergeFrom(from.branch_node());
      break;
    }
    case kGateNode: {
      mutable_gate_node()->::flyteidl::core::GateNode::MergeFrom(from.gate_node());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Node)
}

void Node::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BranchNode_flyteidl_2fcore_2fworkflow_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_ = nullptr;
  clear_has_target();
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
  if (has_target()) {
    clear_target();
  }
}

void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Node& Node::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BranchNode_flyteidl_2fcore_2fworkflow_2eproto.base);
  return *internal_default_instance();
}


void Node::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.Node)
  switch (target_case()) {
    case kTaskNode: {
      delete target_.task_node_;
      break;
    }
    case kWorkflowNode: {
      delete target_.workflow_node_;
      break;
    }
    case kBranchNode: {
      delete target_.branch_node_;
      break;
    }
    case kGateNode: {
      delete target_.gate_node_;
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  upstream_node_ids_.Clear();
  output_aliases_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  clear_target();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Node::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Node*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.Node.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.core.NodeMetadata metadata = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::NodeMetadata::_InternalParse;
        object = msg->mutable_metadata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .flyteidl.core.Binding inputs = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::core::Binding::_InternalParse;
          object = msg->add_inputs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated string upstream_node_ids = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("flyteidl.core.Node.upstream_node_ids");
          object = msg->add_upstream_node_ids();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .flyteidl.core.Alias output_aliases = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::core::Alias::_InternalParse;
          object = msg->add_output_aliases();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // .flyteidl.core.TaskNode task_node = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::TaskNode::_InternalParse;
        object = msg->mutable_task_node();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.WorkflowNode workflow_node = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::WorkflowNode::_InternalParse;
        object = msg->mutable_workflow_node();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.BranchNode branch_node = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::BranchNode::_InternalParse;
        object = msg->mutable_branch_node();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.GateNode gate_node = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::GateNode::_InternalParse;
        object = msg->mutable_gate_node();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.Node)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.Node.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.NodeMetadata metadata = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.core.Binding inputs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string upstream_node_ids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_upstream_node_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->upstream_node_ids(this->upstream_node_ids_size() - 1).data(),
            static_cast<int>(this->upstream_node_ids(this->upstream_node_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.Node.upstream_node_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.core.Alias output_aliases = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_output_aliases()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.TaskNode task_node = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_task_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.WorkflowNode workflow_node = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_workflow_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.BranchNode branch_node = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_branch_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.GateNode gate_node = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gate_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.Node)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.Node.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // .flyteidl.core.NodeMetadata metadata = 2;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::metadata(this), output);
  }

  // repeated .flyteidl.core.Binding inputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->inputs(static_cast<int>(i)),
      output);
  }

  // repeated string upstream_node_ids = 4;
  for (int i = 0, n = this->upstream_node_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->upstream_node_ids(i).data(), static_cast<int>(this->upstream_node_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.Node.upstream_node_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->upstream_node_ids(i), output);
  }

  // repeated .flyteidl.core.Alias output_aliases = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->output_aliases_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->output_aliases(static_cast<int>(i)),
      output);
  }

  // .flyteidl.core.TaskNode task_node = 6;
  if (has_task_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::task_node(this), output);
  }

  // .flyteidl.core.WorkflowNode workflow_node = 7;
  if (has_workflow_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::workflow_node(this), output);
  }

  // .flyteidl.core.BranchNode branch_node = 8;
  if (has_branch_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::branch_node(this), output);
  }

  // .flyteidl.core.GateNode gate_node = 9;
  if (has_gate_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::gate_node(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.Node.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // .flyteidl.core.NodeMetadata metadata = 2;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::metadata(this), target);
  }

  // repeated .flyteidl.core.Binding inputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->inputs(static_cast<int>(i)), target);
  }

  // repeated string upstream_node_ids = 4;
  for (int i = 0, n = this->upstream_node_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->upstream_node_ids(i).data(), static_cast<int>(this->upstream_node_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.Node.upstream_node_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->upstream_node_ids(i), target);
  }

  // repeated .flyteidl.core.Alias output_aliases = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->output_aliases_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->output_aliases(static_cast<int>(i)), target);
  }

  // .flyteidl.core.TaskNode task_node = 6;
  if (has_task_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::task_node(this), target);
  }

  // .flyteidl.core.WorkflowNode workflow_node = 7;
  if (has_workflow_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::workflow_node(this), target);
  }

  // .flyteidl.core.BranchNode branch_node = 8;
  if (has_branch_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::branch_node(this), target);
  }

  // .flyteidl.core.GateNode gate_node = 9;
  if (has_gate_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::gate_node(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.Node)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.core.Binding inputs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->inputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->inputs(static_cast<int>(i)));
    }
  }

  // repeated string upstream_node_ids = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->upstream_node_ids_size());
  for (int i = 0, n = this->upstream_node_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->upstream_node_ids(i));
  }

  // repeated .flyteidl.core.Alias output_aliases = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->output_aliases_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->output_aliases(static_cast<int>(i)));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // .flyteidl.core.NodeMetadata metadata = 2;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  switch (target_case()) {
    // .flyteidl.core.TaskNode task_node = 6;
    case kTaskNode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_.task_node_);
      break;
    }
    // .flyteidl.core.WorkflowNode workflow_node = 7;
    case kWorkflowNode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_.workflow_node_);
      break;
    }
    // .flyteidl.core.BranchNode branch_node = 8;
    case kBranchNode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_.branch_node_);
      break;
    }
    // .flyteidl.core.GateNode gate_node = 9;
    case kGateNode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_.gate_node_);
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::google::protobuf::DynamicCastToGenerated<Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  upstream_node_ids_.MergeFrom(from.upstream_node_ids_);
  output_aliases_.MergeFrom(from.output_aliases_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_metadata()) {
    mutable_metadata()->::flyteidl::core::NodeMetadata::MergeFrom(from.metadata());
  }
  switch (from.target_case()) {
    case kTaskNode: {
      mutable_task_node()->::flyteidl::core::TaskNode::MergeFrom(from.task_node());
      break;
    }
    case kWorkflowNode: {
      mutable_workflow_node()->::flyteidl::core::WorkflowNode::MergeFrom(from.workflow_node());
      break;
    }
    case kBranchNode: {
      mutable_branch_node()->::flyteidl::core::BranchNode::MergeFrom(from.branch_node());
      break;
    }
    case kGateNode: {
      mutable_gate_node()->::flyteidl::core::GateNode::MergeFrom(from.gate_node());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&inputs_)->InternalSwap(CastToBase(&other->inputs_));
  upstream_node_ids_.InternalSwap(CastToBase(&other->upstream_node_ids_));
  CastToBase(&output_aliases_)->InternalSwap(CastToBase(&other->output_aliases_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(metadata_, other->metadata_);
  swap(target_, other->target_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fworkflow_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fworkflow_2eproto[kIndexInFileMessages];
}


// ===================================================================

WorkflowMetadata_TagsEntry_DoNotUse::WorkflowMetadata_TagsEntry_DoNotUse() {}
WorkflowMetadata_TagsEntry_DoNotUse::WorkflowMetadata_TagsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void WorkflowMetadata_TagsEntry_DoNotUse::MergeFrom(const WorkflowMetadata_TagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata WorkflowMetadata_TagsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fworkflow_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fworkflow_2eproto[12];
}
void WorkflowMetadata_TagsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkflowMetadata_TagsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      WorkflowMetadata_TagsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.core.WorkflowMetadata.TagsEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.core.WorkflowMetadata.TagsEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void WorkflowMetadata::InitAsDefaultInstance() {
  ::flyteidl::core::_WorkflowMetadata_default_instance_._instance.get_mutable()->quality_of_service_ = const_cast< ::flyteidl::core::QualityOfService*>(
      ::flyteidl::core::QualityOfService::internal_default_instance());
}
class WorkflowMetadata::HasBitSetters {
 public:
  static const ::flyteidl::core::QualityOfService& quality_of_service(const WorkflowMetadata* msg);
};

const ::flyteidl::core::QualityOfService&
WorkflowMetadata::HasBitSetters::quality_of_service(const WorkflowMetadata* msg) {
  return *msg->quality_of_service_;
}
void WorkflowMetadata::clear_quality_of_service() {
  if (GetArenaNoVirtual() == nullptr && quality_of_service_ != nullptr) {
    delete quality_of_service_;
  }
  quality_of_service_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowMetadata::kQualityOfServiceFieldNumber;
const int WorkflowMetadata::kOnFailureFieldNumber;
const int WorkflowMetadata::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowMetadata::WorkflowMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.WorkflowMetadata)
}
WorkflowMetadata::WorkflowMetadata(const WorkflowMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tags_.MergeFrom(from.tags_);
  if (from.has_quality_of_service()) {
    quality_of_service_ = new ::flyteidl::core::QualityOfService(*from.quality_of_service_);
  } else {
    quality_of_service_ = nullptr;
  }
  on_failure_ = from.on_failure_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.WorkflowMetadata)
}

void WorkflowMetadata::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WorkflowMetadata_flyteidl_2fcore_2fworkflow_2eproto.base);
  ::memset(&quality_of_service_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&on_failure_) -
      reinterpret_cast<char*>(&quality_of_service_)) + sizeof(on_failure_));
}

WorkflowMetadata::~WorkflowMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.core.WorkflowMetadata)
  SharedDtor();
}

void WorkflowMetadata::SharedDtor() {
  if (this != internal_default_instance()) delete quality_of_service_;
}

void WorkflowMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkflowMetadata& WorkflowMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WorkflowMetadata_flyteidl_2fcore_2fworkflow_2eproto.base);
  return *internal_default_instance();
}


void WorkflowMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.WorkflowMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  if (GetArenaNoVirtual() == nullptr && quality_of_service_ != nullptr) {
    delete quality_of_service_;
  }
  quality_of_service_ = nullptr;
  on_failure_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorkflowMetadata::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WorkflowMetadata*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.QualityOfService quality_of_service = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::QualityOfService::_InternalParse;
        object = msg->mutable_quality_of_service();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.WorkflowMetadata.OnFailurePolicy on_failure = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_on_failure(static_cast<::flyteidl::core::WorkflowMetadata_OnFailurePolicy>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // map<string, string> tags = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::flyteidl::core::WorkflowMetadata_TagsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->tags_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkflowMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.WorkflowMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.QualityOfService quality_of_service = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quality_of_service()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.WorkflowMetadata.OnFailurePolicy on_failure = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_on_failure(static_cast< ::flyteidl::core::WorkflowMetadata_OnFailurePolicy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> tags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          WorkflowMetadata_TagsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              WorkflowMetadata_TagsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&tags_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.WorkflowMetadata.TagsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.WorkflowMetadata.TagsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.WorkflowMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.WorkflowMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorkflowMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.WorkflowMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.QualityOfService quality_of_service = 1;
  if (this->has_quality_of_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::quality_of_service(this), output);
  }

  // .flyteidl.core.WorkflowMetadata.OnFailurePolicy on_failure = 2;
  if (this->on_failure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->on_failure(), output);
  }

  // map<string, string> tags = 3;
  if (!this->tags().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.WorkflowMetadata.TagsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.WorkflowMetadata.TagsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->tags().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->tags().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->tags().begin();
          it != this->tags().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<WorkflowMetadata_TagsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tags_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<WorkflowMetadata_TagsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->tags().begin();
          it != this->tags().end(); ++it) {
        entry.reset(tags_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.WorkflowMetadata)
}

::google::protobuf::uint8* WorkflowMetadata::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.WorkflowMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.QualityOfService quality_of_service = 1;
  if (this->has_quality_of_service()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::quality_of_service(this), target);
  }

  // .flyteidl.core.WorkflowMetadata.OnFailurePolicy on_failure = 2;
  if (this->on_failure() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->on_failure(), target);
  }

  // map<string, string> tags = 3;
  if (!this->tags().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.WorkflowMetadata.TagsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.WorkflowMetadata.TagsEntry.value");
      }
    };

    if (false &&
        this->tags().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->tags().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->tags().begin();
          it != this->tags().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<WorkflowMetadata_TagsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tags_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<WorkflowMetadata_TagsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->tags().begin();
          it != this->tags().end(); ++it) {
        entry.reset(tags_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.WorkflowMetadata)
  return target;
}

size_t WorkflowMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.WorkflowMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> tags = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  {
    ::std::unique_ptr<WorkflowMetadata_TagsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->tags().begin();
        it != this->tags().end(); ++it) {
      entry.reset(tags_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .flyteidl.core.QualityOfService quality_of_service = 1;
  if (this->has_quality_of_service()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *quality_of_service_);
  }

  // .flyteidl.core.WorkflowMetadata.OnFailurePolicy on_failure = 2;
  if (this->on_failure() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->on_failure());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkflowMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.WorkflowMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowMetadata* source =
      ::google::protobuf::DynamicCastToGenerated<WorkflowMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.WorkflowMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.WorkflowMetadata)
    MergeFrom(*source);
  }
}

void WorkflowMetadata::MergeFrom(const WorkflowMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.WorkflowMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.has_quality_of_service()) {
    mutable_quality_of_service()->::flyteidl::core::QualityOfService::MergeFrom(from.quality_of_service());
  }
  if (from.on_failure() != 0) {
    set_on_failure(from.on_failure());
  }
}

void WorkflowMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.WorkflowMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowMetadata::CopyFrom(const WorkflowMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.WorkflowMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowMetadata::IsInitialized() const {
  return true;
}

void WorkflowMetadata::Swap(WorkflowMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowMetadata::InternalSwap(WorkflowMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tags_.Swap(&other->tags_);
  swap(quality_of_service_, other->quality_of_service_);
  swap(on_failure_, other->on_failure_);
}

::google::protobuf::Metadata WorkflowMetadata::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fworkflow_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fworkflow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WorkflowMetadataDefaults::InitAsDefaultInstance() {
}
class WorkflowMetadataDefaults::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowMetadataDefaults::kInterruptibleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowMetadataDefaults::WorkflowMetadataDefaults()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.WorkflowMetadataDefaults)
}
WorkflowMetadataDefaults::WorkflowMetadataDefaults(const WorkflowMetadataDefaults& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  interruptible_ = from.interruptible_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.WorkflowMetadataDefaults)
}

void WorkflowMetadataDefaults::SharedCtor() {
  interruptible_ = false;
}

WorkflowMetadataDefaults::~WorkflowMetadataDefaults() {
  // @@protoc_insertion_point(destructor:flyteidl.core.WorkflowMetadataDefaults)
  SharedDtor();
}

void WorkflowMetadataDefaults::SharedDtor() {
}

void WorkflowMetadataDefaults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkflowMetadataDefaults& WorkflowMetadataDefaults::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WorkflowMetadataDefaults_flyteidl_2fcore_2fworkflow_2eproto.base);
  return *internal_default_instance();
}


void WorkflowMetadataDefaults::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.WorkflowMetadataDefaults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interruptible_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorkflowMetadataDefaults::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WorkflowMetadataDefaults*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool interruptible = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_interruptible(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkflowMetadataDefaults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.WorkflowMetadataDefaults)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool interruptible = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &interruptible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.WorkflowMetadataDefaults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.WorkflowMetadataDefaults)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorkflowMetadataDefaults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.WorkflowMetadataDefaults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool interruptible = 1;
  if (this->interruptible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->interruptible(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.WorkflowMetadataDefaults)
}

::google::protobuf::uint8* WorkflowMetadataDefaults::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.WorkflowMetadataDefaults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool interruptible = 1;
  if (this->interruptible() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->interruptible(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.WorkflowMetadataDefaults)
  return target;
}

size_t WorkflowMetadataDefaults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.WorkflowMetadataDefaults)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool interruptible = 1;
  if (this->interruptible() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkflowMetadataDefaults::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.WorkflowMetadataDefaults)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowMetadataDefaults* source =
      ::google::protobuf::DynamicCastToGenerated<WorkflowMetadataDefaults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.WorkflowMetadataDefaults)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.WorkflowMetadataDefaults)
    MergeFrom(*source);
  }
}

void WorkflowMetadataDefaults::MergeFrom(const WorkflowMetadataDefaults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.WorkflowMetadataDefaults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.interruptible() != 0) {
    set_interruptible(from.interruptible());
  }
}

void WorkflowMetadataDefaults::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.WorkflowMetadataDefaults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowMetadataDefaults::CopyFrom(const WorkflowMetadataDefaults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.WorkflowMetadataDefaults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowMetadataDefaults::IsInitialized() const {
  return true;
}

void WorkflowMetadataDefaults::Swap(WorkflowMetadataDefaults* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowMetadataDefaults::InternalSwap(WorkflowMetadataDefaults* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(interruptible_, other->interruptible_);
}

::google::protobuf::Metadata WorkflowMetadataDefaults::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fworkflow_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fworkflow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WorkflowTemplate::InitAsDefaultInstance() {
  ::flyteidl::core::_WorkflowTemplate_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
  ::flyteidl::core::_WorkflowTemplate_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::flyteidl::core::WorkflowMetadata*>(
      ::flyteidl::core::WorkflowMetadata::internal_default_instance());
  ::flyteidl::core::_WorkflowTemplate_default_instance_._instance.get_mutable()->interface_ = const_cast< ::flyteidl::core::TypedInterface*>(
      ::flyteidl::core::TypedInterface::internal_default_instance());
  ::flyteidl::core::_WorkflowTemplate_default_instance_._instance.get_mutable()->failure_node_ = const_cast< ::flyteidl::core::Node*>(
      ::flyteidl::core::Node::internal_default_instance());
  ::flyteidl::core::_WorkflowTemplate_default_instance_._instance.get_mutable()->metadata_defaults_ = const_cast< ::flyteidl::core::WorkflowMetadataDefaults*>(
      ::flyteidl::core::WorkflowMetadataDefaults::internal_default_instance());
}
class WorkflowTemplate::HasBitSetters {
 public:
  static const ::flyteidl::core::Identifier& id(const WorkflowTemplate* msg);
  static const ::flyteidl::core::WorkflowMetadata& metadata(const WorkflowTemplate* msg);
  static const ::flyteidl::core::TypedInterface& interface(const WorkflowTemplate* msg);
  static const ::flyteidl::core::Node& failure_node(const WorkflowTemplate* msg);
  static const ::flyteidl::core::WorkflowMetadataDefaults& metadata_defaults(const WorkflowTemplate* msg);
};

const ::flyteidl::core::Identifier&
WorkflowTemplate::HasBitSetters::id(const WorkflowTemplate* msg) {
  return *msg->id_;
}
const ::flyteidl::core::WorkflowMetadata&
WorkflowTemplate::HasBitSetters::metadata(const WorkflowTemplate* msg) {
  return *msg->metadata_;
}
const ::flyteidl::core::TypedInterface&
WorkflowTemplate::HasBitSetters::interface(const WorkflowTemplate* msg) {
  return *msg->interface_;
}
const ::flyteidl::core::Node&
WorkflowTemplate::HasBitSetters::failure_node(const WorkflowTemplate* msg) {
  return *msg->failure_node_;
}
const ::flyteidl::core::WorkflowMetadataDefaults&
WorkflowTemplate::HasBitSetters::metadata_defaults(const WorkflowTemplate* msg) {
  return *msg->metadata_defaults_;
}
void WorkflowTemplate::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void WorkflowTemplate::clear_interface() {
  if (GetArenaNoVirtual() == nullptr && interface_ != nullptr) {
    delete interface_;
  }
  interface_ = nullptr;
}
void WorkflowTemplate::clear_outputs() {
  outputs_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowTemplate::kIdFieldNumber;
const int WorkflowTemplate::kMetadataFieldNumber;
const int WorkflowTemplate::kInterfaceFieldNumber;
const int WorkflowTemplate::kNodesFieldNumber;
const int WorkflowTemplate::kOutputsFieldNumber;
const int WorkflowTemplate::kFailureNodeFieldNumber;
const int WorkflowTemplate::kMetadataDefaultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowTemplate::WorkflowTemplate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.WorkflowTemplate)
}
WorkflowTemplate::WorkflowTemplate(const WorkflowTemplate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      nodes_(from.nodes_),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_metadata()) {
    metadata_ = new ::flyteidl::core::WorkflowMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from.has_interface()) {
    interface_ = new ::flyteidl::core::TypedInterface(*from.interface_);
  } else {
    interface_ = nullptr;
  }
  if (from.has_failure_node()) {
    failure_node_ = new ::flyteidl::core::Node(*from.failure_node_);
  } else {
    failure_node_ = nullptr;
  }
  if (from.has_metadata_defaults()) {
    metadata_defaults_ = new ::flyteidl::core::WorkflowMetadataDefaults(*from.metadata_defaults_);
  } else {
    metadata_defaults_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.WorkflowTemplate)
}

void WorkflowTemplate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WorkflowTemplate_flyteidl_2fcore_2fworkflow_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metadata_defaults_) -
      reinterpret_cast<char*>(&id_)) + sizeof(metadata_defaults_));
}

WorkflowTemplate::~WorkflowTemplate() {
  // @@protoc_insertion_point(destructor:flyteidl.core.WorkflowTemplate)
  SharedDtor();
}

void WorkflowTemplate::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete interface_;
  if (this != internal_default_instance()) delete failure_node_;
  if (this != internal_default_instance()) delete metadata_defaults_;
}

void WorkflowTemplate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkflowTemplate& WorkflowTemplate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WorkflowTemplate_flyteidl_2fcore_2fworkflow_2eproto.base);
  return *internal_default_instance();
}


void WorkflowTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.WorkflowTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  outputs_.Clear();
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && interface_ != nullptr) {
    delete interface_;
  }
  interface_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && failure_node_ != nullptr) {
    delete failure_node_;
  }
  failure_node_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metadata_defaults_ != nullptr) {
    delete metadata_defaults_;
  }
  metadata_defaults_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorkflowTemplate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WorkflowTemplate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Identifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.WorkflowMetadata metadata = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::WorkflowMetadata::_InternalParse;
        object = msg->mutable_metadata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.TypedInterface interface = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::TypedInterface::_InternalParse;
        object = msg->mutable_interface();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .flyteidl.core.Node nodes = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::core::Node::_InternalParse;
          object = msg->add_nodes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .flyteidl.core.Binding outputs = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::core::Binding::_InternalParse;
          object = msg->add_outputs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // .flyteidl.core.Node failure_node = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Node::_InternalParse;
        object = msg->mutable_failure_node();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::WorkflowMetadataDefaults::_InternalParse;
        object = msg->mutable_metadata_defaults();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkflowTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.WorkflowTemplate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.WorkflowMetadata metadata = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.TypedInterface interface = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.core.Node nodes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.core.Binding outputs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Node failure_node = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_failure_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata_defaults()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.WorkflowTemplate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.WorkflowTemplate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorkflowTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.WorkflowTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  // .flyteidl.core.WorkflowMetadata metadata = 2;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::metadata(this), output);
  }

  // .flyteidl.core.TypedInterface interface = 3;
  if (this->has_interface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::interface(this), output);
  }

  // repeated .flyteidl.core.Node nodes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->nodes(static_cast<int>(i)),
      output);
  }

  // repeated .flyteidl.core.Binding outputs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->outputs(static_cast<int>(i)),
      output);
  }

  // .flyteidl.core.Node failure_node = 6;
  if (this->has_failure_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::failure_node(this), output);
  }

  // .flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7;
  if (this->has_metadata_defaults()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::metadata_defaults(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.WorkflowTemplate)
}

::google::protobuf::uint8* WorkflowTemplate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.WorkflowTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  // .flyteidl.core.WorkflowMetadata metadata = 2;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::metadata(this), target);
  }

  // .flyteidl.core.TypedInterface interface = 3;
  if (this->has_interface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::interface(this), target);
  }

  // repeated .flyteidl.core.Node nodes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->nodes(static_cast<int>(i)), target);
  }

  // repeated .flyteidl.core.Binding outputs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->outputs(static_cast<int>(i)), target);
  }

  // .flyteidl.core.Node failure_node = 6;
  if (this->has_failure_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::failure_node(this), target);
  }

  // .flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7;
  if (this->has_metadata_defaults()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::metadata_defaults(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.WorkflowTemplate)
  return target;
}

size_t WorkflowTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.WorkflowTemplate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.core.Node nodes = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nodes(static_cast<int>(i)));
    }
  }

  // repeated .flyteidl.core.Binding outputs = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->outputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->outputs(static_cast<int>(i)));
    }
  }

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .flyteidl.core.WorkflowMetadata metadata = 2;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .flyteidl.core.TypedInterface interface = 3;
  if (this->has_interface()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *interface_);
  }

  // .flyteidl.core.Node failure_node = 6;
  if (this->has_failure_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *failure_node_);
  }

  // .flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7;
  if (this->has_metadata_defaults()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *metadata_defaults_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkflowTemplate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.WorkflowTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowTemplate* source =
      ::google::protobuf::DynamicCastToGenerated<WorkflowTemplate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.WorkflowTemplate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.WorkflowTemplate)
    MergeFrom(*source);
  }
}

void WorkflowTemplate::MergeFrom(const WorkflowTemplate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.WorkflowTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  outputs_.MergeFrom(from.outputs_);
  if (from.has_id()) {
    mutable_id()->::flyteidl::core::Identifier::MergeFrom(from.id());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::flyteidl::core::WorkflowMetadata::MergeFrom(from.metadata());
  }
  if (from.has_interface()) {
    mutable_interface()->::flyteidl::core::TypedInterface::MergeFrom(from.interface());
  }
  if (from.has_failure_node()) {
    mutable_failure_node()->::flyteidl::core::Node::MergeFrom(from.failure_node());
  }
  if (from.has_metadata_defaults()) {
    mutable_metadata_defaults()->::flyteidl::core::WorkflowMetadataDefaults::MergeFrom(from.metadata_defaults());
  }
}

void WorkflowTemplate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.WorkflowTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowTemplate::CopyFrom(const WorkflowTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.WorkflowTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowTemplate::IsInitialized() const {
  return true;
}

void WorkflowTemplate::Swap(WorkflowTemplate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowTemplate::InternalSwap(WorkflowTemplate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&nodes_)->InternalSwap(CastToBase(&other->nodes_));
  CastToBase(&outputs_)->InternalSwap(CastToBase(&other->outputs_));
  swap(id_, other->id_);
  swap(metadata_, other->metadata_);
  swap(interface_, other->interface_);
  swap(failure_node_, other->failure_node_);
  swap(metadata_defaults_, other->metadata_defaults_);
}

::google::protobuf::Metadata WorkflowTemplate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fworkflow_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fworkflow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TaskNodeOverrides::InitAsDefaultInstance() {
  ::flyteidl::core::_TaskNodeOverrides_default_instance_._instance.get_mutable()->resources_ = const_cast< ::flyteidl::core::Resources*>(
      ::flyteidl::core::Resources::internal_default_instance());
}
class TaskNodeOverrides::HasBitSetters {
 public:
  static const ::flyteidl::core::Resources& resources(const TaskNodeOverrides* msg);
};

const ::flyteidl::core::Resources&
TaskNodeOverrides::HasBitSetters::resources(const TaskNodeOverrides* msg) {
  return *msg->resources_;
}
void TaskNodeOverrides::clear_resources() {
  if (GetArenaNoVirtual() == nullptr && resources_ != nullptr) {
    delete resources_;
  }
  resources_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskNodeOverrides::kResourcesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskNodeOverrides::TaskNodeOverrides()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.TaskNodeOverrides)
}
TaskNodeOverrides::TaskNodeOverrides(const TaskNodeOverrides& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_resources()) {
    resources_ = new ::flyteidl::core::Resources(*from.resources_);
  } else {
    resources_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.TaskNodeOverrides)
}

void TaskNodeOverrides::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TaskNodeOverrides_flyteidl_2fcore_2fworkflow_2eproto.base);
  resources_ = nullptr;
}

TaskNodeOverrides::~TaskNodeOverrides() {
  // @@protoc_insertion_point(destructor:flyteidl.core.TaskNodeOverrides)
  SharedDtor();
}

void TaskNodeOverrides::SharedDtor() {
  if (this != internal_default_instance()) delete resources_;
}

void TaskNodeOverrides::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskNodeOverrides& TaskNodeOverrides::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TaskNodeOverrides_flyteidl_2fcore_2fworkflow_2eproto.base);
  return *internal_default_instance();
}


void TaskNodeOverrides::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.TaskNodeOverrides)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && resources_ != nullptr) {
    delete resources_;
  }
  resources_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TaskNodeOverrides::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TaskNodeOverrides*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.Resources resources = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Resources::_InternalParse;
        object = msg->mutable_resources();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TaskNodeOverrides::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.TaskNodeOverrides)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Resources resources = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.TaskNodeOverrides)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.TaskNodeOverrides)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TaskNodeOverrides::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.TaskNodeOverrides)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Resources resources = 1;
  if (this->has_resources()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::resources(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.TaskNodeOverrides)
}

::google::protobuf::uint8* TaskNodeOverrides::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.TaskNodeOverrides)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Resources resources = 1;
  if (this->has_resources()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::resources(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.TaskNodeOverrides)
  return target;
}

size_t TaskNodeOverrides::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.TaskNodeOverrides)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.Resources resources = 1;
  if (this->has_resources()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *resources_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskNodeOverrides::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.TaskNodeOverrides)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskNodeOverrides* source =
      ::google::protobuf::DynamicCastToGenerated<TaskNodeOverrides>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.TaskNodeOverrides)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.TaskNodeOverrides)
    MergeFrom(*source);
  }
}

void TaskNodeOverrides::MergeFrom(const TaskNodeOverrides& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.TaskNodeOverrides)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_resources()) {
    mutable_resources()->::flyteidl::core::Resources::MergeFrom(from.resources());
  }
}

void TaskNodeOverrides::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.TaskNodeOverrides)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskNodeOverrides::CopyFrom(const TaskNodeOverrides& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.TaskNodeOverrides)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskNodeOverrides::IsInitialized() const {
  return true;
}

void TaskNodeOverrides::Swap(TaskNodeOverrides* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskNodeOverrides::InternalSwap(TaskNodeOverrides* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(resources_, other->resources_);
}

::google::protobuf::Metadata TaskNodeOverrides::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fworkflow_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fworkflow_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::core::IfBlock* Arena::CreateMaybeMessage< ::flyteidl::core::IfBlock >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::IfBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::IfElseBlock* Arena::CreateMaybeMessage< ::flyteidl::core::IfElseBlock >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::IfElseBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::BranchNode* Arena::CreateMaybeMessage< ::flyteidl::core::BranchNode >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::BranchNode >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::TaskNode* Arena::CreateMaybeMessage< ::flyteidl::core::TaskNode >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::TaskNode >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::WorkflowNode* Arena::CreateMaybeMessage< ::flyteidl::core::WorkflowNode >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::WorkflowNode >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::ApproveCondition* Arena::CreateMaybeMessage< ::flyteidl::core::ApproveCondition >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::ApproveCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::SignalCondition* Arena::CreateMaybeMessage< ::flyteidl::core::SignalCondition >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::SignalCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::SleepCondition* Arena::CreateMaybeMessage< ::flyteidl::core::SleepCondition >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::SleepCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::GateNode* Arena::CreateMaybeMessage< ::flyteidl::core::GateNode >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::GateNode >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::NodeMetadata* Arena::CreateMaybeMessage< ::flyteidl::core::NodeMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::NodeMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::Alias* Arena::CreateMaybeMessage< ::flyteidl::core::Alias >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::Alias >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::Node* Arena::CreateMaybeMessage< ::flyteidl::core::Node >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::WorkflowMetadata_TagsEntry_DoNotUse* Arena::CreateMaybeMessage< ::flyteidl::core::WorkflowMetadata_TagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::WorkflowMetadata_TagsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::WorkflowMetadata* Arena::CreateMaybeMessage< ::flyteidl::core::WorkflowMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::WorkflowMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::WorkflowMetadataDefaults* Arena::CreateMaybeMessage< ::flyteidl::core::WorkflowMetadataDefaults >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::WorkflowMetadataDefaults >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::WorkflowTemplate* Arena::CreateMaybeMessage< ::flyteidl::core::WorkflowTemplate >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::WorkflowTemplate >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::TaskNodeOverrides* Arena::CreateMaybeMessage< ::flyteidl::core::TaskNodeOverrides >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::TaskNodeOverrides >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
