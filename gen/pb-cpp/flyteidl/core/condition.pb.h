// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/condition.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fcore_2fcondition_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fcore_2fcondition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/literals.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fcondition_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fcore_2fcondition_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fcore_2fcondition_2eproto();
namespace flyteidl {
namespace core {
class BooleanExpression;
class BooleanExpressionDefaultTypeInternal;
extern BooleanExpressionDefaultTypeInternal _BooleanExpression_default_instance_;
class ComparisonExpression;
class ComparisonExpressionDefaultTypeInternal;
extern ComparisonExpressionDefaultTypeInternal _ComparisonExpression_default_instance_;
class ConjunctionExpression;
class ConjunctionExpressionDefaultTypeInternal;
extern ConjunctionExpressionDefaultTypeInternal _ConjunctionExpression_default_instance_;
class Operand;
class OperandDefaultTypeInternal;
extern OperandDefaultTypeInternal _Operand_default_instance_;
}  // namespace core
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::core::BooleanExpression* Arena::CreateMaybeMessage<::flyteidl::core::BooleanExpression>(Arena*);
template<> ::flyteidl::core::ComparisonExpression* Arena::CreateMaybeMessage<::flyteidl::core::ComparisonExpression>(Arena*);
template<> ::flyteidl::core::ConjunctionExpression* Arena::CreateMaybeMessage<::flyteidl::core::ConjunctionExpression>(Arena*);
template<> ::flyteidl::core::Operand* Arena::CreateMaybeMessage<::flyteidl::core::Operand>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace core {

enum ComparisonExpression_Operator {
  ComparisonExpression_Operator_EQ = 0,
  ComparisonExpression_Operator_NEQ = 1,
  ComparisonExpression_Operator_GT = 2,
  ComparisonExpression_Operator_GTE = 3,
  ComparisonExpression_Operator_LT = 4,
  ComparisonExpression_Operator_LTE = 5,
  ComparisonExpression_Operator_ComparisonExpression_Operator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ComparisonExpression_Operator_ComparisonExpression_Operator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ComparisonExpression_Operator_IsValid(int value);
const ComparisonExpression_Operator ComparisonExpression_Operator_Operator_MIN = ComparisonExpression_Operator_EQ;
const ComparisonExpression_Operator ComparisonExpression_Operator_Operator_MAX = ComparisonExpression_Operator_LTE;
const int ComparisonExpression_Operator_Operator_ARRAYSIZE = ComparisonExpression_Operator_Operator_MAX + 1;

const ::google::protobuf::EnumDescriptor* ComparisonExpression_Operator_descriptor();
inline const ::std::string& ComparisonExpression_Operator_Name(ComparisonExpression_Operator value) {
  return ::google::protobuf::internal::NameOfEnum(
    ComparisonExpression_Operator_descriptor(), value);
}
inline bool ComparisonExpression_Operator_Parse(
    const ::std::string& name, ComparisonExpression_Operator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ComparisonExpression_Operator>(
    ComparisonExpression_Operator_descriptor(), name, value);
}
enum ConjunctionExpression_LogicalOperator {
  ConjunctionExpression_LogicalOperator_AND = 0,
  ConjunctionExpression_LogicalOperator_OR = 1,
  ConjunctionExpression_LogicalOperator_ConjunctionExpression_LogicalOperator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ConjunctionExpression_LogicalOperator_ConjunctionExpression_LogicalOperator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ConjunctionExpression_LogicalOperator_IsValid(int value);
const ConjunctionExpression_LogicalOperator ConjunctionExpression_LogicalOperator_LogicalOperator_MIN = ConjunctionExpression_LogicalOperator_AND;
const ConjunctionExpression_LogicalOperator ConjunctionExpression_LogicalOperator_LogicalOperator_MAX = ConjunctionExpression_LogicalOperator_OR;
const int ConjunctionExpression_LogicalOperator_LogicalOperator_ARRAYSIZE = ConjunctionExpression_LogicalOperator_LogicalOperator_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConjunctionExpression_LogicalOperator_descriptor();
inline const ::std::string& ConjunctionExpression_LogicalOperator_Name(ConjunctionExpression_LogicalOperator value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConjunctionExpression_LogicalOperator_descriptor(), value);
}
inline bool ConjunctionExpression_LogicalOperator_Parse(
    const ::std::string& name, ConjunctionExpression_LogicalOperator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConjunctionExpression_LogicalOperator>(
    ConjunctionExpression_LogicalOperator_descriptor(), name, value);
}
// ===================================================================

class ComparisonExpression final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.ComparisonExpression) */ {
 public:
  ComparisonExpression();
  virtual ~ComparisonExpression();

  ComparisonExpression(const ComparisonExpression& from);

  inline ComparisonExpression& operator=(const ComparisonExpression& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ComparisonExpression(ComparisonExpression&& from) noexcept
    : ComparisonExpression() {
    *this = ::std::move(from);
  }

  inline ComparisonExpression& operator=(ComparisonExpression&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ComparisonExpression& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComparisonExpression* internal_default_instance() {
    return reinterpret_cast<const ComparisonExpression*>(
               &_ComparisonExpression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ComparisonExpression* other);
  friend void swap(ComparisonExpression& a, ComparisonExpression& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ComparisonExpression* New() const final {
    return CreateMaybeMessage<ComparisonExpression>(nullptr);
  }

  ComparisonExpression* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ComparisonExpression>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ComparisonExpression& from);
  void MergeFrom(const ComparisonExpression& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComparisonExpression* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ComparisonExpression_Operator Operator;
  static const Operator EQ =
    ComparisonExpression_Operator_EQ;
  static const Operator NEQ =
    ComparisonExpression_Operator_NEQ;
  static const Operator GT =
    ComparisonExpression_Operator_GT;
  static const Operator GTE =
    ComparisonExpression_Operator_GTE;
  static const Operator LT =
    ComparisonExpression_Operator_LT;
  static const Operator LTE =
    ComparisonExpression_Operator_LTE;
  static inline bool Operator_IsValid(int value) {
    return ComparisonExpression_Operator_IsValid(value);
  }
  static const Operator Operator_MIN =
    ComparisonExpression_Operator_Operator_MIN;
  static const Operator Operator_MAX =
    ComparisonExpression_Operator_Operator_MAX;
  static const int Operator_ARRAYSIZE =
    ComparisonExpression_Operator_Operator_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Operator_descriptor() {
    return ComparisonExpression_Operator_descriptor();
  }
  static inline const ::std::string& Operator_Name(Operator value) {
    return ComparisonExpression_Operator_Name(value);
  }
  static inline bool Operator_Parse(const ::std::string& name,
      Operator* value) {
    return ComparisonExpression_Operator_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .flyteidl.core.Operand left_value = 2;
  bool has_left_value() const;
  void clear_left_value();
  static const int kLeftValueFieldNumber = 2;
  const ::flyteidl::core::Operand& left_value() const;
  ::flyteidl::core::Operand* release_left_value();
  ::flyteidl::core::Operand* mutable_left_value();
  void set_allocated_left_value(::flyteidl::core::Operand* left_value);

  // .flyteidl.core.Operand right_value = 3;
  bool has_right_value() const;
  void clear_right_value();
  static const int kRightValueFieldNumber = 3;
  const ::flyteidl::core::Operand& right_value() const;
  ::flyteidl::core::Operand* release_right_value();
  ::flyteidl::core::Operand* mutable_right_value();
  void set_allocated_right_value(::flyteidl::core::Operand* right_value);

  // .flyteidl.core.ComparisonExpression.Operator operator = 1;
  void clear_operator_();
  static const int kOperatorFieldNumber = 1;
  ::flyteidl::core::ComparisonExpression_Operator operator_() const;
  void set_operator_(::flyteidl::core::ComparisonExpression_Operator value);

  // @@protoc_insertion_point(class_scope:flyteidl.core.ComparisonExpression)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::Operand* left_value_;
  ::flyteidl::core::Operand* right_value_;
  int operator__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fcondition_2eproto;
};
// -------------------------------------------------------------------

class Operand final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.Operand) */ {
 public:
  Operand();
  virtual ~Operand();

  Operand(const Operand& from);

  inline Operand& operator=(const Operand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Operand(Operand&& from) noexcept
    : Operand() {
    *this = ::std::move(from);
  }

  inline Operand& operator=(Operand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Operand& default_instance();

  enum ValCase {
    kPrimitive = 1,
    kVar = 2,
    VAL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Operand* internal_default_instance() {
    return reinterpret_cast<const Operand*>(
               &_Operand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Operand* other);
  friend void swap(Operand& a, Operand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Operand* New() const final {
    return CreateMaybeMessage<Operand>(nullptr);
  }

  Operand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Operand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Operand& from);
  void MergeFrom(const Operand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.Primitive primitive = 1;
  bool has_primitive() const;
  void clear_primitive();
  static const int kPrimitiveFieldNumber = 1;
  const ::flyteidl::core::Primitive& primitive() const;
  ::flyteidl::core::Primitive* release_primitive();
  ::flyteidl::core::Primitive* mutable_primitive();
  void set_allocated_primitive(::flyteidl::core::Primitive* primitive);

  // string var = 2;
  private:
  bool has_var() const;
  public:
  void clear_var();
  static const int kVarFieldNumber = 2;
  const ::std::string& var() const;
  void set_var(const ::std::string& value);
  #if LANG_CXX11
  void set_var(::std::string&& value);
  #endif
  void set_var(const char* value);
  void set_var(const char* value, size_t size);
  ::std::string* mutable_var();
  ::std::string* release_var();
  void set_allocated_var(::std::string* var);

  void clear_val();
  ValCase val_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.core.Operand)
 private:
  class HasBitSetters;
  void set_has_primitive();
  void set_has_var();

  inline bool has_val() const;
  inline void clear_has_val();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValUnion {
    ValUnion() {}
    ::flyteidl::core::Primitive* primitive_;
    ::google::protobuf::internal::ArenaStringPtr var_;
  } val_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fcore_2fcondition_2eproto;
};
// -------------------------------------------------------------------

class BooleanExpression final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.BooleanExpression) */ {
 public:
  BooleanExpression();
  virtual ~BooleanExpression();

  BooleanExpression(const BooleanExpression& from);

  inline BooleanExpression& operator=(const BooleanExpression& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BooleanExpression(BooleanExpression&& from) noexcept
    : BooleanExpression() {
    *this = ::std::move(from);
  }

  inline BooleanExpression& operator=(BooleanExpression&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BooleanExpression& default_instance();

  enum ExprCase {
    kConjunction = 1,
    kComparison = 2,
    EXPR_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BooleanExpression* internal_default_instance() {
    return reinterpret_cast<const BooleanExpression*>(
               &_BooleanExpression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(BooleanExpression* other);
  friend void swap(BooleanExpression& a, BooleanExpression& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BooleanExpression* New() const final {
    return CreateMaybeMessage<BooleanExpression>(nullptr);
  }

  BooleanExpression* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BooleanExpression>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BooleanExpression& from);
  void MergeFrom(const BooleanExpression& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BooleanExpression* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.ConjunctionExpression conjunction = 1;
  bool has_conjunction() const;
  void clear_conjunction();
  static const int kConjunctionFieldNumber = 1;
  const ::flyteidl::core::ConjunctionExpression& conjunction() const;
  ::flyteidl::core::ConjunctionExpression* release_conjunction();
  ::flyteidl::core::ConjunctionExpression* mutable_conjunction();
  void set_allocated_conjunction(::flyteidl::core::ConjunctionExpression* conjunction);

  // .flyteidl.core.ComparisonExpression comparison = 2;
  bool has_comparison() const;
  void clear_comparison();
  static const int kComparisonFieldNumber = 2;
  const ::flyteidl::core::ComparisonExpression& comparison() const;
  ::flyteidl::core::ComparisonExpression* release_comparison();
  ::flyteidl::core::ComparisonExpression* mutable_comparison();
  void set_allocated_comparison(::flyteidl::core::ComparisonExpression* comparison);

  void clear_expr();
  ExprCase expr_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.core.BooleanExpression)
 private:
  class HasBitSetters;
  void set_has_conjunction();
  void set_has_comparison();

  inline bool has_expr() const;
  inline void clear_has_expr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ExprUnion {
    ExprUnion() {}
    ::flyteidl::core::ConjunctionExpression* conjunction_;
    ::flyteidl::core::ComparisonExpression* comparison_;
  } expr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fcore_2fcondition_2eproto;
};
// -------------------------------------------------------------------

class ConjunctionExpression final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.ConjunctionExpression) */ {
 public:
  ConjunctionExpression();
  virtual ~ConjunctionExpression();

  ConjunctionExpression(const ConjunctionExpression& from);

  inline ConjunctionExpression& operator=(const ConjunctionExpression& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConjunctionExpression(ConjunctionExpression&& from) noexcept
    : ConjunctionExpression() {
    *this = ::std::move(from);
  }

  inline ConjunctionExpression& operator=(ConjunctionExpression&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ConjunctionExpression& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConjunctionExpression* internal_default_instance() {
    return reinterpret_cast<const ConjunctionExpression*>(
               &_ConjunctionExpression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ConjunctionExpression* other);
  friend void swap(ConjunctionExpression& a, ConjunctionExpression& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConjunctionExpression* New() const final {
    return CreateMaybeMessage<ConjunctionExpression>(nullptr);
  }

  ConjunctionExpression* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConjunctionExpression>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConjunctionExpression& from);
  void MergeFrom(const ConjunctionExpression& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConjunctionExpression* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConjunctionExpression_LogicalOperator LogicalOperator;
  static const LogicalOperator AND =
    ConjunctionExpression_LogicalOperator_AND;
  static const LogicalOperator OR =
    ConjunctionExpression_LogicalOperator_OR;
  static inline bool LogicalOperator_IsValid(int value) {
    return ConjunctionExpression_LogicalOperator_IsValid(value);
  }
  static const LogicalOperator LogicalOperator_MIN =
    ConjunctionExpression_LogicalOperator_LogicalOperator_MIN;
  static const LogicalOperator LogicalOperator_MAX =
    ConjunctionExpression_LogicalOperator_LogicalOperator_MAX;
  static const int LogicalOperator_ARRAYSIZE =
    ConjunctionExpression_LogicalOperator_LogicalOperator_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LogicalOperator_descriptor() {
    return ConjunctionExpression_LogicalOperator_descriptor();
  }
  static inline const ::std::string& LogicalOperator_Name(LogicalOperator value) {
    return ConjunctionExpression_LogicalOperator_Name(value);
  }
  static inline bool LogicalOperator_Parse(const ::std::string& name,
      LogicalOperator* value) {
    return ConjunctionExpression_LogicalOperator_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .flyteidl.core.BooleanExpression left_expression = 2;
  bool has_left_expression() const;
  void clear_left_expression();
  static const int kLeftExpressionFieldNumber = 2;
  const ::flyteidl::core::BooleanExpression& left_expression() const;
  ::flyteidl::core::BooleanExpression* release_left_expression();
  ::flyteidl::core::BooleanExpression* mutable_left_expression();
  void set_allocated_left_expression(::flyteidl::core::BooleanExpression* left_expression);

  // .flyteidl.core.BooleanExpression right_expression = 3;
  bool has_right_expression() const;
  void clear_right_expression();
  static const int kRightExpressionFieldNumber = 3;
  const ::flyteidl::core::BooleanExpression& right_expression() const;
  ::flyteidl::core::BooleanExpression* release_right_expression();
  ::flyteidl::core::BooleanExpression* mutable_right_expression();
  void set_allocated_right_expression(::flyteidl::core::BooleanExpression* right_expression);

  // .flyteidl.core.ConjunctionExpression.LogicalOperator operator = 1;
  void clear_operator_();
  static const int kOperatorFieldNumber = 1;
  ::flyteidl::core::ConjunctionExpression_LogicalOperator operator_() const;
  void set_operator_(::flyteidl::core::ConjunctionExpression_LogicalOperator value);

  // @@protoc_insertion_point(class_scope:flyteidl.core.ConjunctionExpression)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::BooleanExpression* left_expression_;
  ::flyteidl::core::BooleanExpression* right_expression_;
  int operator__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fcondition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ComparisonExpression

// .flyteidl.core.ComparisonExpression.Operator operator = 1;
inline void ComparisonExpression::clear_operator_() {
  operator__ = 0;
}
inline ::flyteidl::core::ComparisonExpression_Operator ComparisonExpression::operator_() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.ComparisonExpression.operator)
  return static_cast< ::flyteidl::core::ComparisonExpression_Operator >(operator__);
}
inline void ComparisonExpression::set_operator_(::flyteidl::core::ComparisonExpression_Operator value) {
  
  operator__ = value;
  // @@protoc_insertion_point(field_set:flyteidl.core.ComparisonExpression.operator)
}

// .flyteidl.core.Operand left_value = 2;
inline bool ComparisonExpression::has_left_value() const {
  return this != internal_default_instance() && left_value_ != nullptr;
}
inline void ComparisonExpression::clear_left_value() {
  if (GetArenaNoVirtual() == nullptr && left_value_ != nullptr) {
    delete left_value_;
  }
  left_value_ = nullptr;
}
inline const ::flyteidl::core::Operand& ComparisonExpression::left_value() const {
  const ::flyteidl::core::Operand* p = left_value_;
  // @@protoc_insertion_point(field_get:flyteidl.core.ComparisonExpression.left_value)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Operand*>(
      &::flyteidl::core::_Operand_default_instance_);
}
inline ::flyteidl::core::Operand* ComparisonExpression::release_left_value() {
  // @@protoc_insertion_point(field_release:flyteidl.core.ComparisonExpression.left_value)
  
  ::flyteidl::core::Operand* temp = left_value_;
  left_value_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Operand* ComparisonExpression::mutable_left_value() {
  
  if (left_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Operand>(GetArenaNoVirtual());
    left_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.ComparisonExpression.left_value)
  return left_value_;
}
inline void ComparisonExpression::set_allocated_left_value(::flyteidl::core::Operand* left_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete left_value_;
  }
  if (left_value) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      left_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, left_value, submessage_arena);
    }
    
  } else {
    
  }
  left_value_ = left_value;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.ComparisonExpression.left_value)
}

// .flyteidl.core.Operand right_value = 3;
inline bool ComparisonExpression::has_right_value() const {
  return this != internal_default_instance() && right_value_ != nullptr;
}
inline void ComparisonExpression::clear_right_value() {
  if (GetArenaNoVirtual() == nullptr && right_value_ != nullptr) {
    delete right_value_;
  }
  right_value_ = nullptr;
}
inline const ::flyteidl::core::Operand& ComparisonExpression::right_value() const {
  const ::flyteidl::core::Operand* p = right_value_;
  // @@protoc_insertion_point(field_get:flyteidl.core.ComparisonExpression.right_value)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Operand*>(
      &::flyteidl::core::_Operand_default_instance_);
}
inline ::flyteidl::core::Operand* ComparisonExpression::release_right_value() {
  // @@protoc_insertion_point(field_release:flyteidl.core.ComparisonExpression.right_value)
  
  ::flyteidl::core::Operand* temp = right_value_;
  right_value_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Operand* ComparisonExpression::mutable_right_value() {
  
  if (right_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Operand>(GetArenaNoVirtual());
    right_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.ComparisonExpression.right_value)
  return right_value_;
}
inline void ComparisonExpression::set_allocated_right_value(::flyteidl::core::Operand* right_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete right_value_;
  }
  if (right_value) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      right_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, right_value, submessage_arena);
    }
    
  } else {
    
  }
  right_value_ = right_value;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.ComparisonExpression.right_value)
}

// -------------------------------------------------------------------

// Operand

// .flyteidl.core.Primitive primitive = 1;
inline bool Operand::has_primitive() const {
  return val_case() == kPrimitive;
}
inline void Operand::set_has_primitive() {
  _oneof_case_[0] = kPrimitive;
}
inline ::flyteidl::core::Primitive* Operand::release_primitive() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Operand.primitive)
  if (has_primitive()) {
    clear_has_val();
      ::flyteidl::core::Primitive* temp = val_.primitive_;
    val_.primitive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::Primitive& Operand::primitive() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Operand.primitive)
  return has_primitive()
      ? *val_.primitive_
      : *reinterpret_cast< ::flyteidl::core::Primitive*>(&::flyteidl::core::_Primitive_default_instance_);
}
inline ::flyteidl::core::Primitive* Operand::mutable_primitive() {
  if (!has_primitive()) {
    clear_val();
    set_has_primitive();
    val_.primitive_ = CreateMaybeMessage< ::flyteidl::core::Primitive >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Operand.primitive)
  return val_.primitive_;
}

// string var = 2;
inline bool Operand::has_var() const {
  return val_case() == kVar;
}
inline void Operand::set_has_var() {
  _oneof_case_[0] = kVar;
}
inline void Operand::clear_var() {
  if (has_var()) {
    val_.var_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_val();
  }
}
inline const ::std::string& Operand::var() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Operand.var)
  if (has_var()) {
    return val_.var_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Operand::set_var(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.core.Operand.var)
  if (!has_var()) {
    clear_val();
    set_has_var();
    val_.var_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  val_.var_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.Operand.var)
}
#if LANG_CXX11
inline void Operand::set_var(::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.core.Operand.var)
  if (!has_var()) {
    clear_val();
    set_has_var();
    val_.var_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  val_.var_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.Operand.var)
}
#endif
inline void Operand::set_var(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_var()) {
    clear_val();
    set_has_var();
    val_.var_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  val_.var_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.Operand.var)
}
inline void Operand::set_var(const char* value, size_t size) {
  if (!has_var()) {
    clear_val();
    set_has_var();
    val_.var_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  val_.var_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.Operand.var)
}
inline ::std::string* Operand::mutable_var() {
  if (!has_var()) {
    clear_val();
    set_has_var();
    val_.var_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Operand.var)
  return val_.var_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operand::release_var() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Operand.var)
  if (has_var()) {
    clear_has_val();
    return val_.var_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Operand::set_allocated_var(::std::string* var) {
  if (has_val()) {
    clear_val();
  }
  if (var != nullptr) {
    set_has_var();
    val_.var_.UnsafeSetDefault(var);
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Operand.var)
}

inline bool Operand::has_val() const {
  return val_case() != VAL_NOT_SET;
}
inline void Operand::clear_has_val() {
  _oneof_case_[0] = VAL_NOT_SET;
}
inline Operand::ValCase Operand::val_case() const {
  return Operand::ValCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BooleanExpression

// .flyteidl.core.ConjunctionExpression conjunction = 1;
inline bool BooleanExpression::has_conjunction() const {
  return expr_case() == kConjunction;
}
inline void BooleanExpression::set_has_conjunction() {
  _oneof_case_[0] = kConjunction;
}
inline void BooleanExpression::clear_conjunction() {
  if (has_conjunction()) {
    delete expr_.conjunction_;
    clear_has_expr();
  }
}
inline ::flyteidl::core::ConjunctionExpression* BooleanExpression::release_conjunction() {
  // @@protoc_insertion_point(field_release:flyteidl.core.BooleanExpression.conjunction)
  if (has_conjunction()) {
    clear_has_expr();
      ::flyteidl::core::ConjunctionExpression* temp = expr_.conjunction_;
    expr_.conjunction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::ConjunctionExpression& BooleanExpression::conjunction() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.BooleanExpression.conjunction)
  return has_conjunction()
      ? *expr_.conjunction_
      : *reinterpret_cast< ::flyteidl::core::ConjunctionExpression*>(&::flyteidl::core::_ConjunctionExpression_default_instance_);
}
inline ::flyteidl::core::ConjunctionExpression* BooleanExpression::mutable_conjunction() {
  if (!has_conjunction()) {
    clear_expr();
    set_has_conjunction();
    expr_.conjunction_ = CreateMaybeMessage< ::flyteidl::core::ConjunctionExpression >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.BooleanExpression.conjunction)
  return expr_.conjunction_;
}

// .flyteidl.core.ComparisonExpression comparison = 2;
inline bool BooleanExpression::has_comparison() const {
  return expr_case() == kComparison;
}
inline void BooleanExpression::set_has_comparison() {
  _oneof_case_[0] = kComparison;
}
inline void BooleanExpression::clear_comparison() {
  if (has_comparison()) {
    delete expr_.comparison_;
    clear_has_expr();
  }
}
inline ::flyteidl::core::ComparisonExpression* BooleanExpression::release_comparison() {
  // @@protoc_insertion_point(field_release:flyteidl.core.BooleanExpression.comparison)
  if (has_comparison()) {
    clear_has_expr();
      ::flyteidl::core::ComparisonExpression* temp = expr_.comparison_;
    expr_.comparison_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::ComparisonExpression& BooleanExpression::comparison() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.BooleanExpression.comparison)
  return has_comparison()
      ? *expr_.comparison_
      : *reinterpret_cast< ::flyteidl::core::ComparisonExpression*>(&::flyteidl::core::_ComparisonExpression_default_instance_);
}
inline ::flyteidl::core::ComparisonExpression* BooleanExpression::mutable_comparison() {
  if (!has_comparison()) {
    clear_expr();
    set_has_comparison();
    expr_.comparison_ = CreateMaybeMessage< ::flyteidl::core::ComparisonExpression >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.BooleanExpression.comparison)
  return expr_.comparison_;
}

inline bool BooleanExpression::has_expr() const {
  return expr_case() != EXPR_NOT_SET;
}
inline void BooleanExpression::clear_has_expr() {
  _oneof_case_[0] = EXPR_NOT_SET;
}
inline BooleanExpression::ExprCase BooleanExpression::expr_case() const {
  return BooleanExpression::ExprCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConjunctionExpression

// .flyteidl.core.ConjunctionExpression.LogicalOperator operator = 1;
inline void ConjunctionExpression::clear_operator_() {
  operator__ = 0;
}
inline ::flyteidl::core::ConjunctionExpression_LogicalOperator ConjunctionExpression::operator_() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.ConjunctionExpression.operator)
  return static_cast< ::flyteidl::core::ConjunctionExpression_LogicalOperator >(operator__);
}
inline void ConjunctionExpression::set_operator_(::flyteidl::core::ConjunctionExpression_LogicalOperator value) {
  
  operator__ = value;
  // @@protoc_insertion_point(field_set:flyteidl.core.ConjunctionExpression.operator)
}

// .flyteidl.core.BooleanExpression left_expression = 2;
inline bool ConjunctionExpression::has_left_expression() const {
  return this != internal_default_instance() && left_expression_ != nullptr;
}
inline void ConjunctionExpression::clear_left_expression() {
  if (GetArenaNoVirtual() == nullptr && left_expression_ != nullptr) {
    delete left_expression_;
  }
  left_expression_ = nullptr;
}
inline const ::flyteidl::core::BooleanExpression& ConjunctionExpression::left_expression() const {
  const ::flyteidl::core::BooleanExpression* p = left_expression_;
  // @@protoc_insertion_point(field_get:flyteidl.core.ConjunctionExpression.left_expression)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::BooleanExpression*>(
      &::flyteidl::core::_BooleanExpression_default_instance_);
}
inline ::flyteidl::core::BooleanExpression* ConjunctionExpression::release_left_expression() {
  // @@protoc_insertion_point(field_release:flyteidl.core.ConjunctionExpression.left_expression)
  
  ::flyteidl::core::BooleanExpression* temp = left_expression_;
  left_expression_ = nullptr;
  return temp;
}
inline ::flyteidl::core::BooleanExpression* ConjunctionExpression::mutable_left_expression() {
  
  if (left_expression_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::BooleanExpression>(GetArenaNoVirtual());
    left_expression_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.ConjunctionExpression.left_expression)
  return left_expression_;
}
inline void ConjunctionExpression::set_allocated_left_expression(::flyteidl::core::BooleanExpression* left_expression) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete left_expression_;
  }
  if (left_expression) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      left_expression = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, left_expression, submessage_arena);
    }
    
  } else {
    
  }
  left_expression_ = left_expression;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.ConjunctionExpression.left_expression)
}

// .flyteidl.core.BooleanExpression right_expression = 3;
inline bool ConjunctionExpression::has_right_expression() const {
  return this != internal_default_instance() && right_expression_ != nullptr;
}
inline void ConjunctionExpression::clear_right_expression() {
  if (GetArenaNoVirtual() == nullptr && right_expression_ != nullptr) {
    delete right_expression_;
  }
  right_expression_ = nullptr;
}
inline const ::flyteidl::core::BooleanExpression& ConjunctionExpression::right_expression() const {
  const ::flyteidl::core::BooleanExpression* p = right_expression_;
  // @@protoc_insertion_point(field_get:flyteidl.core.ConjunctionExpression.right_expression)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::BooleanExpression*>(
      &::flyteidl::core::_BooleanExpression_default_instance_);
}
inline ::flyteidl::core::BooleanExpression* ConjunctionExpression::release_right_expression() {
  // @@protoc_insertion_point(field_release:flyteidl.core.ConjunctionExpression.right_expression)
  
  ::flyteidl::core::BooleanExpression* temp = right_expression_;
  right_expression_ = nullptr;
  return temp;
}
inline ::flyteidl::core::BooleanExpression* ConjunctionExpression::mutable_right_expression() {
  
  if (right_expression_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::BooleanExpression>(GetArenaNoVirtual());
    right_expression_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.ConjunctionExpression.right_expression)
  return right_expression_;
}
inline void ConjunctionExpression::set_allocated_right_expression(::flyteidl::core::BooleanExpression* right_expression) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete right_expression_;
  }
  if (right_expression) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      right_expression = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, right_expression, submessage_arena);
    }
    
  } else {
    
  }
  right_expression_ = right_expression;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.ConjunctionExpression.right_expression)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace flyteidl

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::flyteidl::core::ComparisonExpression_Operator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::core::ComparisonExpression_Operator>() {
  return ::flyteidl::core::ComparisonExpression_Operator_descriptor();
}
template <> struct is_proto_enum< ::flyteidl::core::ConjunctionExpression_LogicalOperator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::core::ConjunctionExpression_LogicalOperator>() {
  return ::flyteidl::core::ConjunctionExpression_LogicalOperator_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fcore_2fcondition_2eproto
