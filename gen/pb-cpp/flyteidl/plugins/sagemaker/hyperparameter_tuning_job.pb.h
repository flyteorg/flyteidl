// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/sagemaker/hyperparameter_tuning_job.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fplugins_2fsagemaker_2fhyperparameter_5ftuning_5fjob_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fplugins_2fsagemaker_2fhyperparameter_5ftuning_5fjob_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/plugins/sagemaker/parameter_ranges.pb.h"
#include "flyteidl/plugins/sagemaker/training_job.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fsagemaker_2fhyperparameter_5ftuning_5fjob_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fplugins_2fsagemaker_2fhyperparameter_5ftuning_5fjob_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fplugins_2fsagemaker_2fhyperparameter_5ftuning_5fjob_2eproto;
namespace flyteidl {
namespace plugins {
namespace sagemaker {
class HyperparameterTuningJob;
struct HyperparameterTuningJobDefaultTypeInternal;
extern HyperparameterTuningJobDefaultTypeInternal _HyperparameterTuningJob_default_instance_;
class HyperparameterTuningJobConfig;
struct HyperparameterTuningJobConfigDefaultTypeInternal;
extern HyperparameterTuningJobConfigDefaultTypeInternal _HyperparameterTuningJobConfig_default_instance_;
class HyperparameterTuningObjective;
struct HyperparameterTuningObjectiveDefaultTypeInternal;
extern HyperparameterTuningObjectiveDefaultTypeInternal _HyperparameterTuningObjective_default_instance_;
class HyperparameterTuningObjectiveType;
struct HyperparameterTuningObjectiveTypeDefaultTypeInternal;
extern HyperparameterTuningObjectiveTypeDefaultTypeInternal _HyperparameterTuningObjectiveType_default_instance_;
class HyperparameterTuningStrategy;
struct HyperparameterTuningStrategyDefaultTypeInternal;
extern HyperparameterTuningStrategyDefaultTypeInternal _HyperparameterTuningStrategy_default_instance_;
class TrainingJobEarlyStoppingType;
struct TrainingJobEarlyStoppingTypeDefaultTypeInternal;
extern TrainingJobEarlyStoppingTypeDefaultTypeInternal _TrainingJobEarlyStoppingType_default_instance_;
}  // namespace sagemaker
}  // namespace plugins
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::plugins::sagemaker::HyperparameterTuningJob* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::HyperparameterTuningJob>(Arena*);
template<> ::flyteidl::plugins::sagemaker::HyperparameterTuningJobConfig* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::HyperparameterTuningJobConfig>(Arena*);
template<> ::flyteidl::plugins::sagemaker::HyperparameterTuningObjective* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::HyperparameterTuningObjective>(Arena*);
template<> ::flyteidl::plugins::sagemaker::HyperparameterTuningObjectiveType* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::HyperparameterTuningObjectiveType>(Arena*);
template<> ::flyteidl::plugins::sagemaker::HyperparameterTuningStrategy* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::HyperparameterTuningStrategy>(Arena*);
template<> ::flyteidl::plugins::sagemaker::TrainingJobEarlyStoppingType* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::TrainingJobEarlyStoppingType>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace plugins {
namespace sagemaker {

enum HyperparameterTuningObjectiveType_Value : int {
  HyperparameterTuningObjectiveType_Value_MINIMIZE = 0,
  HyperparameterTuningObjectiveType_Value_MAXIMIZE = 1,
  HyperparameterTuningObjectiveType_Value_HyperparameterTuningObjectiveType_Value_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  HyperparameterTuningObjectiveType_Value_HyperparameterTuningObjectiveType_Value_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool HyperparameterTuningObjectiveType_Value_IsValid(int value);
constexpr HyperparameterTuningObjectiveType_Value HyperparameterTuningObjectiveType_Value_Value_MIN = HyperparameterTuningObjectiveType_Value_MINIMIZE;
constexpr HyperparameterTuningObjectiveType_Value HyperparameterTuningObjectiveType_Value_Value_MAX = HyperparameterTuningObjectiveType_Value_MAXIMIZE;
constexpr int HyperparameterTuningObjectiveType_Value_Value_ARRAYSIZE = HyperparameterTuningObjectiveType_Value_Value_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HyperparameterTuningObjectiveType_Value_descriptor();
template<typename T>
inline const std::string& HyperparameterTuningObjectiveType_Value_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HyperparameterTuningObjectiveType_Value>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HyperparameterTuningObjectiveType_Value_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HyperparameterTuningObjectiveType_Value_descriptor(), enum_t_value);
}
inline bool HyperparameterTuningObjectiveType_Value_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HyperparameterTuningObjectiveType_Value* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HyperparameterTuningObjectiveType_Value>(
    HyperparameterTuningObjectiveType_Value_descriptor(), name, value);
}
enum HyperparameterTuningStrategy_Value : int {
  HyperparameterTuningStrategy_Value_BAYESIAN = 0,
  HyperparameterTuningStrategy_Value_RANDOM = 1,
  HyperparameterTuningStrategy_Value_HyperparameterTuningStrategy_Value_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  HyperparameterTuningStrategy_Value_HyperparameterTuningStrategy_Value_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool HyperparameterTuningStrategy_Value_IsValid(int value);
constexpr HyperparameterTuningStrategy_Value HyperparameterTuningStrategy_Value_Value_MIN = HyperparameterTuningStrategy_Value_BAYESIAN;
constexpr HyperparameterTuningStrategy_Value HyperparameterTuningStrategy_Value_Value_MAX = HyperparameterTuningStrategy_Value_RANDOM;
constexpr int HyperparameterTuningStrategy_Value_Value_ARRAYSIZE = HyperparameterTuningStrategy_Value_Value_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HyperparameterTuningStrategy_Value_descriptor();
template<typename T>
inline const std::string& HyperparameterTuningStrategy_Value_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HyperparameterTuningStrategy_Value>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HyperparameterTuningStrategy_Value_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HyperparameterTuningStrategy_Value_descriptor(), enum_t_value);
}
inline bool HyperparameterTuningStrategy_Value_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HyperparameterTuningStrategy_Value* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HyperparameterTuningStrategy_Value>(
    HyperparameterTuningStrategy_Value_descriptor(), name, value);
}
enum TrainingJobEarlyStoppingType_Value : int {
  TrainingJobEarlyStoppingType_Value_OFF = 0,
  TrainingJobEarlyStoppingType_Value_AUTO = 1,
  TrainingJobEarlyStoppingType_Value_TrainingJobEarlyStoppingType_Value_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TrainingJobEarlyStoppingType_Value_TrainingJobEarlyStoppingType_Value_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TrainingJobEarlyStoppingType_Value_IsValid(int value);
constexpr TrainingJobEarlyStoppingType_Value TrainingJobEarlyStoppingType_Value_Value_MIN = TrainingJobEarlyStoppingType_Value_OFF;
constexpr TrainingJobEarlyStoppingType_Value TrainingJobEarlyStoppingType_Value_Value_MAX = TrainingJobEarlyStoppingType_Value_AUTO;
constexpr int TrainingJobEarlyStoppingType_Value_Value_ARRAYSIZE = TrainingJobEarlyStoppingType_Value_Value_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrainingJobEarlyStoppingType_Value_descriptor();
template<typename T>
inline const std::string& TrainingJobEarlyStoppingType_Value_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrainingJobEarlyStoppingType_Value>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrainingJobEarlyStoppingType_Value_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrainingJobEarlyStoppingType_Value_descriptor(), enum_t_value);
}
inline bool TrainingJobEarlyStoppingType_Value_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrainingJobEarlyStoppingType_Value* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrainingJobEarlyStoppingType_Value>(
    TrainingJobEarlyStoppingType_Value_descriptor(), name, value);
}
// ===================================================================

class HyperparameterTuningJob final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.HyperparameterTuningJob) */ {
 public:
  inline HyperparameterTuningJob() : HyperparameterTuningJob(nullptr) {}
  ~HyperparameterTuningJob() override;
  explicit constexpr HyperparameterTuningJob(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HyperparameterTuningJob(const HyperparameterTuningJob& from);
  HyperparameterTuningJob(HyperparameterTuningJob&& from) noexcept
    : HyperparameterTuningJob() {
    *this = ::std::move(from);
  }

  inline HyperparameterTuningJob& operator=(const HyperparameterTuningJob& from) {
    CopyFrom(from);
    return *this;
  }
  inline HyperparameterTuningJob& operator=(HyperparameterTuningJob&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HyperparameterTuningJob& default_instance() {
    return *internal_default_instance();
  }
  static inline const HyperparameterTuningJob* internal_default_instance() {
    return reinterpret_cast<const HyperparameterTuningJob*>(
               &_HyperparameterTuningJob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HyperparameterTuningJob& a, HyperparameterTuningJob& b) {
    a.Swap(&b);
  }
  inline void Swap(HyperparameterTuningJob* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HyperparameterTuningJob* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HyperparameterTuningJob* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HyperparameterTuningJob>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HyperparameterTuningJob* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.plugins.sagemaker.HyperparameterTuningJob";
  }
  protected:
  explicit HyperparameterTuningJob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrainingJobFieldNumber = 1,
    kMaxNumberOfTrainingJobsFieldNumber = 2,
    kMaxParallelTrainingJobsFieldNumber = 3,
  };
  // .flyteidl.plugins.sagemaker.TrainingJob training_job = 1 [json_name = "trainingJob"];
  bool has_training_job() const;
  private:
  bool _internal_has_training_job() const;
  public:
  void clear_training_job();
  const ::flyteidl::plugins::sagemaker::TrainingJob& training_job() const;
  PROTOBUF_NODISCARD ::flyteidl::plugins::sagemaker::TrainingJob* release_training_job();
  ::flyteidl::plugins::sagemaker::TrainingJob* mutable_training_job();
  void set_allocated_training_job(::flyteidl::plugins::sagemaker::TrainingJob* training_job);
  private:
  const ::flyteidl::plugins::sagemaker::TrainingJob& _internal_training_job() const;
  ::flyteidl::plugins::sagemaker::TrainingJob* _internal_mutable_training_job();
  public:
  void unsafe_arena_set_allocated_training_job(
      ::flyteidl::plugins::sagemaker::TrainingJob* training_job);
  ::flyteidl::plugins::sagemaker::TrainingJob* unsafe_arena_release_training_job();

  // int64 max_number_of_training_jobs = 2 [json_name = "maxNumberOfTrainingJobs"];
  void clear_max_number_of_training_jobs();
  int64_t max_number_of_training_jobs() const;
  void set_max_number_of_training_jobs(int64_t value);
  private:
  int64_t _internal_max_number_of_training_jobs() const;
  void _internal_set_max_number_of_training_jobs(int64_t value);
  public:

  // int64 max_parallel_training_jobs = 3 [json_name = "maxParallelTrainingJobs"];
  void clear_max_parallel_training_jobs();
  int64_t max_parallel_training_jobs() const;
  void set_max_parallel_training_jobs(int64_t value);
  private:
  int64_t _internal_max_parallel_training_jobs() const;
  void _internal_set_max_parallel_training_jobs(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.HyperparameterTuningJob)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::plugins::sagemaker::TrainingJob* training_job_;
  int64_t max_number_of_training_jobs_;
  int64_t max_parallel_training_jobs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2fhyperparameter_5ftuning_5fjob_2eproto;
};
// -------------------------------------------------------------------

class HyperparameterTuningObjectiveType final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.HyperparameterTuningObjectiveType) */ {
 public:
  inline HyperparameterTuningObjectiveType() : HyperparameterTuningObjectiveType(nullptr) {}
  explicit constexpr HyperparameterTuningObjectiveType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HyperparameterTuningObjectiveType(const HyperparameterTuningObjectiveType& from);
  HyperparameterTuningObjectiveType(HyperparameterTuningObjectiveType&& from) noexcept
    : HyperparameterTuningObjectiveType() {
    *this = ::std::move(from);
  }

  inline HyperparameterTuningObjectiveType& operator=(const HyperparameterTuningObjectiveType& from) {
    CopyFrom(from);
    return *this;
  }
  inline HyperparameterTuningObjectiveType& operator=(HyperparameterTuningObjectiveType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HyperparameterTuningObjectiveType& default_instance() {
    return *internal_default_instance();
  }
  static inline const HyperparameterTuningObjectiveType* internal_default_instance() {
    return reinterpret_cast<const HyperparameterTuningObjectiveType*>(
               &_HyperparameterTuningObjectiveType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HyperparameterTuningObjectiveType& a, HyperparameterTuningObjectiveType& b) {
    a.Swap(&b);
  }
  inline void Swap(HyperparameterTuningObjectiveType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HyperparameterTuningObjectiveType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HyperparameterTuningObjectiveType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HyperparameterTuningObjectiveType>(arena);
  }

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.plugins.sagemaker.HyperparameterTuningObjectiveType";
  }
  protected:
  explicit HyperparameterTuningObjectiveType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HyperparameterTuningObjectiveType_Value Value;
  static constexpr Value MINIMIZE =
    HyperparameterTuningObjectiveType_Value_MINIMIZE;
  static constexpr Value MAXIMIZE =
    HyperparameterTuningObjectiveType_Value_MAXIMIZE;
  static inline bool Value_IsValid(int value) {
    return HyperparameterTuningObjectiveType_Value_IsValid(value);
  }
  static constexpr Value Value_MIN =
    HyperparameterTuningObjectiveType_Value_Value_MIN;
  static constexpr Value Value_MAX =
    HyperparameterTuningObjectiveType_Value_Value_MAX;
  static constexpr int Value_ARRAYSIZE =
    HyperparameterTuningObjectiveType_Value_Value_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Value_descriptor() {
    return HyperparameterTuningObjectiveType_Value_descriptor();
  }
  template<typename T>
  static inline const std::string& Value_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Value>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Value_Name.");
    return HyperparameterTuningObjectiveType_Value_Name(enum_t_value);
  }
  static inline bool Value_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Value* value) {
    return HyperparameterTuningObjectiveType_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.HyperparameterTuningObjectiveType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2fhyperparameter_5ftuning_5fjob_2eproto;
};
// -------------------------------------------------------------------

class HyperparameterTuningObjective final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.HyperparameterTuningObjective) */ {
 public:
  inline HyperparameterTuningObjective() : HyperparameterTuningObjective(nullptr) {}
  ~HyperparameterTuningObjective() override;
  explicit constexpr HyperparameterTuningObjective(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HyperparameterTuningObjective(const HyperparameterTuningObjective& from);
  HyperparameterTuningObjective(HyperparameterTuningObjective&& from) noexcept
    : HyperparameterTuningObjective() {
    *this = ::std::move(from);
  }

  inline HyperparameterTuningObjective& operator=(const HyperparameterTuningObjective& from) {
    CopyFrom(from);
    return *this;
  }
  inline HyperparameterTuningObjective& operator=(HyperparameterTuningObjective&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HyperparameterTuningObjective& default_instance() {
    return *internal_default_instance();
  }
  static inline const HyperparameterTuningObjective* internal_default_instance() {
    return reinterpret_cast<const HyperparameterTuningObjective*>(
               &_HyperparameterTuningObjective_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HyperparameterTuningObjective& a, HyperparameterTuningObjective& b) {
    a.Swap(&b);
  }
  inline void Swap(HyperparameterTuningObjective* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HyperparameterTuningObjective* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HyperparameterTuningObjective* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HyperparameterTuningObjective>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HyperparameterTuningObjective* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.plugins.sagemaker.HyperparameterTuningObjective";
  }
  protected:
  explicit HyperparameterTuningObjective(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricNameFieldNumber = 2,
    kObjectiveTypeFieldNumber = 1,
  };
  // string metric_name = 2 [json_name = "metricName"];
  void clear_metric_name();
  const std::string& metric_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metric_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metric_name();
  PROTOBUF_NODISCARD std::string* release_metric_name();
  void set_allocated_metric_name(std::string* metric_name);
  private:
  const std::string& _internal_metric_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metric_name(const std::string& value);
  std::string* _internal_mutable_metric_name();
  public:

  // .flyteidl.plugins.sagemaker.HyperparameterTuningObjectiveType.Value objective_type = 1 [json_name = "objectiveType"];
  void clear_objective_type();
  ::flyteidl::plugins::sagemaker::HyperparameterTuningObjectiveType_Value objective_type() const;
  void set_objective_type(::flyteidl::plugins::sagemaker::HyperparameterTuningObjectiveType_Value value);
  private:
  ::flyteidl::plugins::sagemaker::HyperparameterTuningObjectiveType_Value _internal_objective_type() const;
  void _internal_set_objective_type(::flyteidl::plugins::sagemaker::HyperparameterTuningObjectiveType_Value value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.HyperparameterTuningObjective)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metric_name_;
  int objective_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2fhyperparameter_5ftuning_5fjob_2eproto;
};
// -------------------------------------------------------------------

class HyperparameterTuningStrategy final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.HyperparameterTuningStrategy) */ {
 public:
  inline HyperparameterTuningStrategy() : HyperparameterTuningStrategy(nullptr) {}
  explicit constexpr HyperparameterTuningStrategy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HyperparameterTuningStrategy(const HyperparameterTuningStrategy& from);
  HyperparameterTuningStrategy(HyperparameterTuningStrategy&& from) noexcept
    : HyperparameterTuningStrategy() {
    *this = ::std::move(from);
  }

  inline HyperparameterTuningStrategy& operator=(const HyperparameterTuningStrategy& from) {
    CopyFrom(from);
    return *this;
  }
  inline HyperparameterTuningStrategy& operator=(HyperparameterTuningStrategy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HyperparameterTuningStrategy& default_instance() {
    return *internal_default_instance();
  }
  static inline const HyperparameterTuningStrategy* internal_default_instance() {
    return reinterpret_cast<const HyperparameterTuningStrategy*>(
               &_HyperparameterTuningStrategy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HyperparameterTuningStrategy& a, HyperparameterTuningStrategy& b) {
    a.Swap(&b);
  }
  inline void Swap(HyperparameterTuningStrategy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HyperparameterTuningStrategy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HyperparameterTuningStrategy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HyperparameterTuningStrategy>(arena);
  }

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.plugins.sagemaker.HyperparameterTuningStrategy";
  }
  protected:
  explicit HyperparameterTuningStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HyperparameterTuningStrategy_Value Value;
  static constexpr Value BAYESIAN =
    HyperparameterTuningStrategy_Value_BAYESIAN;
  static constexpr Value RANDOM =
    HyperparameterTuningStrategy_Value_RANDOM;
  static inline bool Value_IsValid(int value) {
    return HyperparameterTuningStrategy_Value_IsValid(value);
  }
  static constexpr Value Value_MIN =
    HyperparameterTuningStrategy_Value_Value_MIN;
  static constexpr Value Value_MAX =
    HyperparameterTuningStrategy_Value_Value_MAX;
  static constexpr int Value_ARRAYSIZE =
    HyperparameterTuningStrategy_Value_Value_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Value_descriptor() {
    return HyperparameterTuningStrategy_Value_descriptor();
  }
  template<typename T>
  static inline const std::string& Value_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Value>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Value_Name.");
    return HyperparameterTuningStrategy_Value_Name(enum_t_value);
  }
  static inline bool Value_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Value* value) {
    return HyperparameterTuningStrategy_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.HyperparameterTuningStrategy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2fhyperparameter_5ftuning_5fjob_2eproto;
};
// -------------------------------------------------------------------

class TrainingJobEarlyStoppingType final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.TrainingJobEarlyStoppingType) */ {
 public:
  inline TrainingJobEarlyStoppingType() : TrainingJobEarlyStoppingType(nullptr) {}
  explicit constexpr TrainingJobEarlyStoppingType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrainingJobEarlyStoppingType(const TrainingJobEarlyStoppingType& from);
  TrainingJobEarlyStoppingType(TrainingJobEarlyStoppingType&& from) noexcept
    : TrainingJobEarlyStoppingType() {
    *this = ::std::move(from);
  }

  inline TrainingJobEarlyStoppingType& operator=(const TrainingJobEarlyStoppingType& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainingJobEarlyStoppingType& operator=(TrainingJobEarlyStoppingType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrainingJobEarlyStoppingType& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrainingJobEarlyStoppingType* internal_default_instance() {
    return reinterpret_cast<const TrainingJobEarlyStoppingType*>(
               &_TrainingJobEarlyStoppingType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TrainingJobEarlyStoppingType& a, TrainingJobEarlyStoppingType& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainingJobEarlyStoppingType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrainingJobEarlyStoppingType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrainingJobEarlyStoppingType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrainingJobEarlyStoppingType>(arena);
  }

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.plugins.sagemaker.TrainingJobEarlyStoppingType";
  }
  protected:
  explicit TrainingJobEarlyStoppingType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrainingJobEarlyStoppingType_Value Value;
  static constexpr Value OFF =
    TrainingJobEarlyStoppingType_Value_OFF;
  static constexpr Value AUTO =
    TrainingJobEarlyStoppingType_Value_AUTO;
  static inline bool Value_IsValid(int value) {
    return TrainingJobEarlyStoppingType_Value_IsValid(value);
  }
  static constexpr Value Value_MIN =
    TrainingJobEarlyStoppingType_Value_Value_MIN;
  static constexpr Value Value_MAX =
    TrainingJobEarlyStoppingType_Value_Value_MAX;
  static constexpr int Value_ARRAYSIZE =
    TrainingJobEarlyStoppingType_Value_Value_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Value_descriptor() {
    return TrainingJobEarlyStoppingType_Value_descriptor();
  }
  template<typename T>
  static inline const std::string& Value_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Value>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Value_Name.");
    return TrainingJobEarlyStoppingType_Value_Name(enum_t_value);
  }
  static inline bool Value_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Value* value) {
    return TrainingJobEarlyStoppingType_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.TrainingJobEarlyStoppingType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2fhyperparameter_5ftuning_5fjob_2eproto;
};
// -------------------------------------------------------------------

class HyperparameterTuningJobConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.HyperparameterTuningJobConfig) */ {
 public:
  inline HyperparameterTuningJobConfig() : HyperparameterTuningJobConfig(nullptr) {}
  ~HyperparameterTuningJobConfig() override;
  explicit constexpr HyperparameterTuningJobConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HyperparameterTuningJobConfig(const HyperparameterTuningJobConfig& from);
  HyperparameterTuningJobConfig(HyperparameterTuningJobConfig&& from) noexcept
    : HyperparameterTuningJobConfig() {
    *this = ::std::move(from);
  }

  inline HyperparameterTuningJobConfig& operator=(const HyperparameterTuningJobConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline HyperparameterTuningJobConfig& operator=(HyperparameterTuningJobConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HyperparameterTuningJobConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const HyperparameterTuningJobConfig* internal_default_instance() {
    return reinterpret_cast<const HyperparameterTuningJobConfig*>(
               &_HyperparameterTuningJobConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(HyperparameterTuningJobConfig& a, HyperparameterTuningJobConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(HyperparameterTuningJobConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HyperparameterTuningJobConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HyperparameterTuningJobConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HyperparameterTuningJobConfig>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HyperparameterTuningJobConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.plugins.sagemaker.HyperparameterTuningJobConfig";
  }
  protected:
  explicit HyperparameterTuningJobConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHyperparameterRangesFieldNumber = 1,
    kTuningObjectiveFieldNumber = 3,
    kTuningStrategyFieldNumber = 2,
    kTrainingJobEarlyStoppingTypeFieldNumber = 4,
  };
  // .flyteidl.plugins.sagemaker.ParameterRanges hyperparameter_ranges = 1 [json_name = "hyperparameterRanges"];
  bool has_hyperparameter_ranges() const;
  private:
  bool _internal_has_hyperparameter_ranges() const;
  public:
  void clear_hyperparameter_ranges();
  const ::flyteidl::plugins::sagemaker::ParameterRanges& hyperparameter_ranges() const;
  PROTOBUF_NODISCARD ::flyteidl::plugins::sagemaker::ParameterRanges* release_hyperparameter_ranges();
  ::flyteidl::plugins::sagemaker::ParameterRanges* mutable_hyperparameter_ranges();
  void set_allocated_hyperparameter_ranges(::flyteidl::plugins::sagemaker::ParameterRanges* hyperparameter_ranges);
  private:
  const ::flyteidl::plugins::sagemaker::ParameterRanges& _internal_hyperparameter_ranges() const;
  ::flyteidl::plugins::sagemaker::ParameterRanges* _internal_mutable_hyperparameter_ranges();
  public:
  void unsafe_arena_set_allocated_hyperparameter_ranges(
      ::flyteidl::plugins::sagemaker::ParameterRanges* hyperparameter_ranges);
  ::flyteidl::plugins::sagemaker::ParameterRanges* unsafe_arena_release_hyperparameter_ranges();

  // .flyteidl.plugins.sagemaker.HyperparameterTuningObjective tuning_objective = 3 [json_name = "tuningObjective"];
  bool has_tuning_objective() const;
  private:
  bool _internal_has_tuning_objective() const;
  public:
  void clear_tuning_objective();
  const ::flyteidl::plugins::sagemaker::HyperparameterTuningObjective& tuning_objective() const;
  PROTOBUF_NODISCARD ::flyteidl::plugins::sagemaker::HyperparameterTuningObjective* release_tuning_objective();
  ::flyteidl::plugins::sagemaker::HyperparameterTuningObjective* mutable_tuning_objective();
  void set_allocated_tuning_objective(::flyteidl::plugins::sagemaker::HyperparameterTuningObjective* tuning_objective);
  private:
  const ::flyteidl::plugins::sagemaker::HyperparameterTuningObjective& _internal_tuning_objective() const;
  ::flyteidl::plugins::sagemaker::HyperparameterTuningObjective* _internal_mutable_tuning_objective();
  public:
  void unsafe_arena_set_allocated_tuning_objective(
      ::flyteidl::plugins::sagemaker::HyperparameterTuningObjective* tuning_objective);
  ::flyteidl::plugins::sagemaker::HyperparameterTuningObjective* unsafe_arena_release_tuning_objective();

  // .flyteidl.plugins.sagemaker.HyperparameterTuningStrategy.Value tuning_strategy = 2 [json_name = "tuningStrategy"];
  void clear_tuning_strategy();
  ::flyteidl::plugins::sagemaker::HyperparameterTuningStrategy_Value tuning_strategy() const;
  void set_tuning_strategy(::flyteidl::plugins::sagemaker::HyperparameterTuningStrategy_Value value);
  private:
  ::flyteidl::plugins::sagemaker::HyperparameterTuningStrategy_Value _internal_tuning_strategy() const;
  void _internal_set_tuning_strategy(::flyteidl::plugins::sagemaker::HyperparameterTuningStrategy_Value value);
  public:

  // .flyteidl.plugins.sagemaker.TrainingJobEarlyStoppingType.Value training_job_early_stopping_type = 4 [json_name = "trainingJobEarlyStoppingType"];
  void clear_training_job_early_stopping_type();
  ::flyteidl::plugins::sagemaker::TrainingJobEarlyStoppingType_Value training_job_early_stopping_type() const;
  void set_training_job_early_stopping_type(::flyteidl::plugins::sagemaker::TrainingJobEarlyStoppingType_Value value);
  private:
  ::flyteidl::plugins::sagemaker::TrainingJobEarlyStoppingType_Value _internal_training_job_early_stopping_type() const;
  void _internal_set_training_job_early_stopping_type(::flyteidl::plugins::sagemaker::TrainingJobEarlyStoppingType_Value value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.HyperparameterTuningJobConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::plugins::sagemaker::ParameterRanges* hyperparameter_ranges_;
  ::flyteidl::plugins::sagemaker::HyperparameterTuningObjective* tuning_objective_;
  int tuning_strategy_;
  int training_job_early_stopping_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2fhyperparameter_5ftuning_5fjob_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HyperparameterTuningJob

// .flyteidl.plugins.sagemaker.TrainingJob training_job = 1 [json_name = "trainingJob"];
inline bool HyperparameterTuningJob::_internal_has_training_job() const {
  return this != internal_default_instance() && training_job_ != nullptr;
}
inline bool HyperparameterTuningJob::has_training_job() const {
  return _internal_has_training_job();
}
inline const ::flyteidl::plugins::sagemaker::TrainingJob& HyperparameterTuningJob::_internal_training_job() const {
  const ::flyteidl::plugins::sagemaker::TrainingJob* p = training_job_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::plugins::sagemaker::TrainingJob&>(
      ::flyteidl::plugins::sagemaker::_TrainingJob_default_instance_);
}
inline const ::flyteidl::plugins::sagemaker::TrainingJob& HyperparameterTuningJob::training_job() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.HyperparameterTuningJob.training_job)
  return _internal_training_job();
}
inline void HyperparameterTuningJob::unsafe_arena_set_allocated_training_job(
    ::flyteidl::plugins::sagemaker::TrainingJob* training_job) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(training_job_);
  }
  training_job_ = training_job;
  if (training_job) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.plugins.sagemaker.HyperparameterTuningJob.training_job)
}
inline ::flyteidl::plugins::sagemaker::TrainingJob* HyperparameterTuningJob::release_training_job() {
  
  ::flyteidl::plugins::sagemaker::TrainingJob* temp = training_job_;
  training_job_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::plugins::sagemaker::TrainingJob* HyperparameterTuningJob::unsafe_arena_release_training_job() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.HyperparameterTuningJob.training_job)
  
  ::flyteidl::plugins::sagemaker::TrainingJob* temp = training_job_;
  training_job_ = nullptr;
  return temp;
}
inline ::flyteidl::plugins::sagemaker::TrainingJob* HyperparameterTuningJob::_internal_mutable_training_job() {
  
  if (training_job_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::plugins::sagemaker::TrainingJob>(GetArenaForAllocation());
    training_job_ = p;
  }
  return training_job_;
}
inline ::flyteidl::plugins::sagemaker::TrainingJob* HyperparameterTuningJob::mutable_training_job() {
  ::flyteidl::plugins::sagemaker::TrainingJob* _msg = _internal_mutable_training_job();
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.HyperparameterTuningJob.training_job)
  return _msg;
}
inline void HyperparameterTuningJob::set_allocated_training_job(::flyteidl::plugins::sagemaker::TrainingJob* training_job) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(training_job_);
  }
  if (training_job) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(training_job));
    if (message_arena != submessage_arena) {
      training_job = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, training_job, submessage_arena);
    }
    
  } else {
    
  }
  training_job_ = training_job;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.HyperparameterTuningJob.training_job)
}

// int64 max_number_of_training_jobs = 2 [json_name = "maxNumberOfTrainingJobs"];
inline void HyperparameterTuningJob::clear_max_number_of_training_jobs() {
  max_number_of_training_jobs_ = int64_t{0};
}
inline int64_t HyperparameterTuningJob::_internal_max_number_of_training_jobs() const {
  return max_number_of_training_jobs_;
}
inline int64_t HyperparameterTuningJob::max_number_of_training_jobs() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.HyperparameterTuningJob.max_number_of_training_jobs)
  return _internal_max_number_of_training_jobs();
}
inline void HyperparameterTuningJob::_internal_set_max_number_of_training_jobs(int64_t value) {
  
  max_number_of_training_jobs_ = value;
}
inline void HyperparameterTuningJob::set_max_number_of_training_jobs(int64_t value) {
  _internal_set_max_number_of_training_jobs(value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.HyperparameterTuningJob.max_number_of_training_jobs)
}

// int64 max_parallel_training_jobs = 3 [json_name = "maxParallelTrainingJobs"];
inline void HyperparameterTuningJob::clear_max_parallel_training_jobs() {
  max_parallel_training_jobs_ = int64_t{0};
}
inline int64_t HyperparameterTuningJob::_internal_max_parallel_training_jobs() const {
  return max_parallel_training_jobs_;
}
inline int64_t HyperparameterTuningJob::max_parallel_training_jobs() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.HyperparameterTuningJob.max_parallel_training_jobs)
  return _internal_max_parallel_training_jobs();
}
inline void HyperparameterTuningJob::_internal_set_max_parallel_training_jobs(int64_t value) {
  
  max_parallel_training_jobs_ = value;
}
inline void HyperparameterTuningJob::set_max_parallel_training_jobs(int64_t value) {
  _internal_set_max_parallel_training_jobs(value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.HyperparameterTuningJob.max_parallel_training_jobs)
}

// -------------------------------------------------------------------

// HyperparameterTuningObjectiveType

// -------------------------------------------------------------------

// HyperparameterTuningObjective

// .flyteidl.plugins.sagemaker.HyperparameterTuningObjectiveType.Value objective_type = 1 [json_name = "objectiveType"];
inline void HyperparameterTuningObjective::clear_objective_type() {
  objective_type_ = 0;
}
inline ::flyteidl::plugins::sagemaker::HyperparameterTuningObjectiveType_Value HyperparameterTuningObjective::_internal_objective_type() const {
  return static_cast< ::flyteidl::plugins::sagemaker::HyperparameterTuningObjectiveType_Value >(objective_type_);
}
inline ::flyteidl::plugins::sagemaker::HyperparameterTuningObjectiveType_Value HyperparameterTuningObjective::objective_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.HyperparameterTuningObjective.objective_type)
  return _internal_objective_type();
}
inline void HyperparameterTuningObjective::_internal_set_objective_type(::flyteidl::plugins::sagemaker::HyperparameterTuningObjectiveType_Value value) {
  
  objective_type_ = value;
}
inline void HyperparameterTuningObjective::set_objective_type(::flyteidl::plugins::sagemaker::HyperparameterTuningObjectiveType_Value value) {
  _internal_set_objective_type(value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.HyperparameterTuningObjective.objective_type)
}

// string metric_name = 2 [json_name = "metricName"];
inline void HyperparameterTuningObjective::clear_metric_name() {
  metric_name_.ClearToEmpty();
}
inline const std::string& HyperparameterTuningObjective::metric_name() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.HyperparameterTuningObjective.metric_name)
  return _internal_metric_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HyperparameterTuningObjective::set_metric_name(ArgT0&& arg0, ArgT... args) {
 
 metric_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.HyperparameterTuningObjective.metric_name)
}
inline std::string* HyperparameterTuningObjective::mutable_metric_name() {
  std::string* _s = _internal_mutable_metric_name();
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.HyperparameterTuningObjective.metric_name)
  return _s;
}
inline const std::string& HyperparameterTuningObjective::_internal_metric_name() const {
  return metric_name_.Get();
}
inline void HyperparameterTuningObjective::_internal_set_metric_name(const std::string& value) {
  
  metric_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HyperparameterTuningObjective::_internal_mutable_metric_name() {
  
  return metric_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HyperparameterTuningObjective::release_metric_name() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.HyperparameterTuningObjective.metric_name)
  return metric_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HyperparameterTuningObjective::set_allocated_metric_name(std::string* metric_name) {
  if (metric_name != nullptr) {
    
  } else {
    
  }
  metric_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metric_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metric_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metric_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.HyperparameterTuningObjective.metric_name)
}

// -------------------------------------------------------------------

// HyperparameterTuningStrategy

// -------------------------------------------------------------------

// TrainingJobEarlyStoppingType

// -------------------------------------------------------------------

// HyperparameterTuningJobConfig

// .flyteidl.plugins.sagemaker.ParameterRanges hyperparameter_ranges = 1 [json_name = "hyperparameterRanges"];
inline bool HyperparameterTuningJobConfig::_internal_has_hyperparameter_ranges() const {
  return this != internal_default_instance() && hyperparameter_ranges_ != nullptr;
}
inline bool HyperparameterTuningJobConfig::has_hyperparameter_ranges() const {
  return _internal_has_hyperparameter_ranges();
}
inline const ::flyteidl::plugins::sagemaker::ParameterRanges& HyperparameterTuningJobConfig::_internal_hyperparameter_ranges() const {
  const ::flyteidl::plugins::sagemaker::ParameterRanges* p = hyperparameter_ranges_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::plugins::sagemaker::ParameterRanges&>(
      ::flyteidl::plugins::sagemaker::_ParameterRanges_default_instance_);
}
inline const ::flyteidl::plugins::sagemaker::ParameterRanges& HyperparameterTuningJobConfig::hyperparameter_ranges() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.HyperparameterTuningJobConfig.hyperparameter_ranges)
  return _internal_hyperparameter_ranges();
}
inline void HyperparameterTuningJobConfig::unsafe_arena_set_allocated_hyperparameter_ranges(
    ::flyteidl::plugins::sagemaker::ParameterRanges* hyperparameter_ranges) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hyperparameter_ranges_);
  }
  hyperparameter_ranges_ = hyperparameter_ranges;
  if (hyperparameter_ranges) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.plugins.sagemaker.HyperparameterTuningJobConfig.hyperparameter_ranges)
}
inline ::flyteidl::plugins::sagemaker::ParameterRanges* HyperparameterTuningJobConfig::release_hyperparameter_ranges() {
  
  ::flyteidl::plugins::sagemaker::ParameterRanges* temp = hyperparameter_ranges_;
  hyperparameter_ranges_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::plugins::sagemaker::ParameterRanges* HyperparameterTuningJobConfig::unsafe_arena_release_hyperparameter_ranges() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.HyperparameterTuningJobConfig.hyperparameter_ranges)
  
  ::flyteidl::plugins::sagemaker::ParameterRanges* temp = hyperparameter_ranges_;
  hyperparameter_ranges_ = nullptr;
  return temp;
}
inline ::flyteidl::plugins::sagemaker::ParameterRanges* HyperparameterTuningJobConfig::_internal_mutable_hyperparameter_ranges() {
  
  if (hyperparameter_ranges_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::plugins::sagemaker::ParameterRanges>(GetArenaForAllocation());
    hyperparameter_ranges_ = p;
  }
  return hyperparameter_ranges_;
}
inline ::flyteidl::plugins::sagemaker::ParameterRanges* HyperparameterTuningJobConfig::mutable_hyperparameter_ranges() {
  ::flyteidl::plugins::sagemaker::ParameterRanges* _msg = _internal_mutable_hyperparameter_ranges();
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.HyperparameterTuningJobConfig.hyperparameter_ranges)
  return _msg;
}
inline void HyperparameterTuningJobConfig::set_allocated_hyperparameter_ranges(::flyteidl::plugins::sagemaker::ParameterRanges* hyperparameter_ranges) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hyperparameter_ranges_);
  }
  if (hyperparameter_ranges) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hyperparameter_ranges));
    if (message_arena != submessage_arena) {
      hyperparameter_ranges = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hyperparameter_ranges, submessage_arena);
    }
    
  } else {
    
  }
  hyperparameter_ranges_ = hyperparameter_ranges;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.HyperparameterTuningJobConfig.hyperparameter_ranges)
}

// .flyteidl.plugins.sagemaker.HyperparameterTuningStrategy.Value tuning_strategy = 2 [json_name = "tuningStrategy"];
inline void HyperparameterTuningJobConfig::clear_tuning_strategy() {
  tuning_strategy_ = 0;
}
inline ::flyteidl::plugins::sagemaker::HyperparameterTuningStrategy_Value HyperparameterTuningJobConfig::_internal_tuning_strategy() const {
  return static_cast< ::flyteidl::plugins::sagemaker::HyperparameterTuningStrategy_Value >(tuning_strategy_);
}
inline ::flyteidl::plugins::sagemaker::HyperparameterTuningStrategy_Value HyperparameterTuningJobConfig::tuning_strategy() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.HyperparameterTuningJobConfig.tuning_strategy)
  return _internal_tuning_strategy();
}
inline void HyperparameterTuningJobConfig::_internal_set_tuning_strategy(::flyteidl::plugins::sagemaker::HyperparameterTuningStrategy_Value value) {
  
  tuning_strategy_ = value;
}
inline void HyperparameterTuningJobConfig::set_tuning_strategy(::flyteidl::plugins::sagemaker::HyperparameterTuningStrategy_Value value) {
  _internal_set_tuning_strategy(value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.HyperparameterTuningJobConfig.tuning_strategy)
}

// .flyteidl.plugins.sagemaker.HyperparameterTuningObjective tuning_objective = 3 [json_name = "tuningObjective"];
inline bool HyperparameterTuningJobConfig::_internal_has_tuning_objective() const {
  return this != internal_default_instance() && tuning_objective_ != nullptr;
}
inline bool HyperparameterTuningJobConfig::has_tuning_objective() const {
  return _internal_has_tuning_objective();
}
inline void HyperparameterTuningJobConfig::clear_tuning_objective() {
  if (GetArenaForAllocation() == nullptr && tuning_objective_ != nullptr) {
    delete tuning_objective_;
  }
  tuning_objective_ = nullptr;
}
inline const ::flyteidl::plugins::sagemaker::HyperparameterTuningObjective& HyperparameterTuningJobConfig::_internal_tuning_objective() const {
  const ::flyteidl::plugins::sagemaker::HyperparameterTuningObjective* p = tuning_objective_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::plugins::sagemaker::HyperparameterTuningObjective&>(
      ::flyteidl::plugins::sagemaker::_HyperparameterTuningObjective_default_instance_);
}
inline const ::flyteidl::plugins::sagemaker::HyperparameterTuningObjective& HyperparameterTuningJobConfig::tuning_objective() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.HyperparameterTuningJobConfig.tuning_objective)
  return _internal_tuning_objective();
}
inline void HyperparameterTuningJobConfig::unsafe_arena_set_allocated_tuning_objective(
    ::flyteidl::plugins::sagemaker::HyperparameterTuningObjective* tuning_objective) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tuning_objective_);
  }
  tuning_objective_ = tuning_objective;
  if (tuning_objective) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.plugins.sagemaker.HyperparameterTuningJobConfig.tuning_objective)
}
inline ::flyteidl::plugins::sagemaker::HyperparameterTuningObjective* HyperparameterTuningJobConfig::release_tuning_objective() {
  
  ::flyteidl::plugins::sagemaker::HyperparameterTuningObjective* temp = tuning_objective_;
  tuning_objective_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::plugins::sagemaker::HyperparameterTuningObjective* HyperparameterTuningJobConfig::unsafe_arena_release_tuning_objective() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.HyperparameterTuningJobConfig.tuning_objective)
  
  ::flyteidl::plugins::sagemaker::HyperparameterTuningObjective* temp = tuning_objective_;
  tuning_objective_ = nullptr;
  return temp;
}
inline ::flyteidl::plugins::sagemaker::HyperparameterTuningObjective* HyperparameterTuningJobConfig::_internal_mutable_tuning_objective() {
  
  if (tuning_objective_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::plugins::sagemaker::HyperparameterTuningObjective>(GetArenaForAllocation());
    tuning_objective_ = p;
  }
  return tuning_objective_;
}
inline ::flyteidl::plugins::sagemaker::HyperparameterTuningObjective* HyperparameterTuningJobConfig::mutable_tuning_objective() {
  ::flyteidl::plugins::sagemaker::HyperparameterTuningObjective* _msg = _internal_mutable_tuning_objective();
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.HyperparameterTuningJobConfig.tuning_objective)
  return _msg;
}
inline void HyperparameterTuningJobConfig::set_allocated_tuning_objective(::flyteidl::plugins::sagemaker::HyperparameterTuningObjective* tuning_objective) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tuning_objective_;
  }
  if (tuning_objective) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::plugins::sagemaker::HyperparameterTuningObjective>::GetOwningArena(tuning_objective);
    if (message_arena != submessage_arena) {
      tuning_objective = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tuning_objective, submessage_arena);
    }
    
  } else {
    
  }
  tuning_objective_ = tuning_objective;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.HyperparameterTuningJobConfig.tuning_objective)
}

// .flyteidl.plugins.sagemaker.TrainingJobEarlyStoppingType.Value training_job_early_stopping_type = 4 [json_name = "trainingJobEarlyStoppingType"];
inline void HyperparameterTuningJobConfig::clear_training_job_early_stopping_type() {
  training_job_early_stopping_type_ = 0;
}
inline ::flyteidl::plugins::sagemaker::TrainingJobEarlyStoppingType_Value HyperparameterTuningJobConfig::_internal_training_job_early_stopping_type() const {
  return static_cast< ::flyteidl::plugins::sagemaker::TrainingJobEarlyStoppingType_Value >(training_job_early_stopping_type_);
}
inline ::flyteidl::plugins::sagemaker::TrainingJobEarlyStoppingType_Value HyperparameterTuningJobConfig::training_job_early_stopping_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.HyperparameterTuningJobConfig.training_job_early_stopping_type)
  return _internal_training_job_early_stopping_type();
}
inline void HyperparameterTuningJobConfig::_internal_set_training_job_early_stopping_type(::flyteidl::plugins::sagemaker::TrainingJobEarlyStoppingType_Value value) {
  
  training_job_early_stopping_type_ = value;
}
inline void HyperparameterTuningJobConfig::set_training_job_early_stopping_type(::flyteidl::plugins::sagemaker::TrainingJobEarlyStoppingType_Value value) {
  _internal_set_training_job_early_stopping_type(value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.HyperparameterTuningJobConfig.training_job_early_stopping_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sagemaker
}  // namespace plugins
}  // namespace flyteidl

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::flyteidl::plugins::sagemaker::HyperparameterTuningObjectiveType_Value> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::plugins::sagemaker::HyperparameterTuningObjectiveType_Value>() {
  return ::flyteidl::plugins::sagemaker::HyperparameterTuningObjectiveType_Value_descriptor();
}
template <> struct is_proto_enum< ::flyteidl::plugins::sagemaker::HyperparameterTuningStrategy_Value> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::plugins::sagemaker::HyperparameterTuningStrategy_Value>() {
  return ::flyteidl::plugins::sagemaker::HyperparameterTuningStrategy_Value_descriptor();
}
template <> struct is_proto_enum< ::flyteidl::plugins::sagemaker::TrainingJobEarlyStoppingType_Value> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::plugins::sagemaker::TrainingJobEarlyStoppingType_Value>() {
  return ::flyteidl::plugins::sagemaker::TrainingJobEarlyStoppingType_Value_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fplugins_2fsagemaker_2fhyperparameter_5ftuning_5fjob_2eproto
