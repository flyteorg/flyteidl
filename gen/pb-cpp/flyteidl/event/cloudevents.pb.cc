// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/event/cloudevents.proto

#include "flyteidl/event/cloudevents.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WorkflowExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NodeExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ArtifactID_flyteidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2finterface_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TypedInterface_flyteidl_2fcore_2finterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fliterals_2eproto ::google::protobuf::internal::SCCInfo<10> scc_info_Literal_flyteidl_2fcore_2fliterals_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fevent_2fevent_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_WorkflowExecutionEvent_flyteidl_2fevent_2fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fevent_2fevent_2eproto ::google::protobuf::internal::SCCInfo<8> scc_info_NodeExecutionEvent_flyteidl_2fevent_2fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fevent_2fevent_2eproto ::google::protobuf::internal::SCCInfo<8> scc_info_TaskExecutionEvent_flyteidl_2fevent_2fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace flyteidl {
namespace event {
class CloudEventWorkflowExecutionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CloudEventWorkflowExecution> _instance;
} _CloudEventWorkflowExecution_default_instance_;
class CloudEventNodeExecutionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CloudEventNodeExecution> _instance;
} _CloudEventNodeExecution_default_instance_;
class CloudEventTaskExecutionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CloudEventTaskExecution> _instance;
} _CloudEventTaskExecution_default_instance_;
}  // namespace event
}  // namespace flyteidl
static void InitDefaultsCloudEventWorkflowExecution_flyteidl_2fevent_2fcloudevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::event::_CloudEventWorkflowExecution_default_instance_;
    new (ptr) ::flyteidl::event::CloudEventWorkflowExecution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::event::CloudEventWorkflowExecution::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_CloudEventWorkflowExecution_flyteidl_2fevent_2fcloudevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsCloudEventWorkflowExecution_flyteidl_2fevent_2fcloudevents_2eproto}, {
      &scc_info_WorkflowExecutionEvent_flyteidl_2fevent_2fevent_2eproto.base,
      &scc_info_Literal_flyteidl_2fcore_2fliterals_2eproto.base,
      &scc_info_TypedInterface_flyteidl_2fcore_2finterface_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_ArtifactID_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_NodeExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_WorkflowExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsCloudEventNodeExecution_flyteidl_2fevent_2fcloudevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::event::_CloudEventNodeExecution_default_instance_;
    new (ptr) ::flyteidl::event::CloudEventNodeExecution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::event::CloudEventNodeExecution::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CloudEventNodeExecution_flyteidl_2fevent_2fcloudevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCloudEventNodeExecution_flyteidl_2fevent_2fcloudevents_2eproto}, {
      &scc_info_NodeExecutionEvent_flyteidl_2fevent_2fevent_2eproto.base,}};

static void InitDefaultsCloudEventTaskExecution_flyteidl_2fevent_2fcloudevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::event::_CloudEventTaskExecution_default_instance_;
    new (ptr) ::flyteidl::event::CloudEventTaskExecution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::event::CloudEventTaskExecution::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_CloudEventTaskExecution_flyteidl_2fevent_2fcloudevents_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsCloudEventTaskExecution_flyteidl_2fevent_2fcloudevents_2eproto}, {
      &scc_info_TaskExecutionEvent_flyteidl_2fevent_2fevent_2eproto.base,
      &scc_info_Literal_flyteidl_2fcore_2fliterals_2eproto.base,
      &scc_info_TypedInterface_flyteidl_2fcore_2finterface_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_ArtifactID_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_NodeExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_WorkflowExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto.base,}};

void InitDefaults_flyteidl_2fevent_2fcloudevents_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CloudEventWorkflowExecution_flyteidl_2fevent_2fcloudevents_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CloudEventNodeExecution_flyteidl_2fevent_2fcloudevents_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CloudEventTaskExecution_flyteidl_2fevent_2fcloudevents_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fevent_2fcloudevents_2eproto[3];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fevent_2fcloudevents_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fevent_2fcloudevents_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fevent_2fcloudevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::CloudEventWorkflowExecution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::CloudEventWorkflowExecution, raw_event_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::CloudEventWorkflowExecution, output_data_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::CloudEventWorkflowExecution, output_interface_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::CloudEventWorkflowExecution, input_data_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::CloudEventWorkflowExecution, scheduled_at_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::CloudEventWorkflowExecution, artifact_ids_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::CloudEventWorkflowExecution, parent_node_execution_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::CloudEventWorkflowExecution, reference_execution_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::CloudEventNodeExecution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::CloudEventNodeExecution, raw_event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::CloudEventTaskExecution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::CloudEventTaskExecution, raw_event_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::CloudEventTaskExecution, output_data_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::CloudEventTaskExecution, output_interface_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::CloudEventTaskExecution, input_data_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::CloudEventTaskExecution, scheduled_at_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::CloudEventTaskExecution, artifact_ids_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::CloudEventTaskExecution, parent_node_execution_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::event::CloudEventTaskExecution, reference_execution_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::event::CloudEventWorkflowExecution)},
  { 13, -1, sizeof(::flyteidl::event::CloudEventNodeExecution)},
  { 19, -1, sizeof(::flyteidl::event::CloudEventTaskExecution)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::event::_CloudEventWorkflowExecution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::event::_CloudEventNodeExecution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::event::_CloudEventTaskExecution_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fevent_2fcloudevents_2eproto = {
  {}, AddDescriptors_flyteidl_2fevent_2fcloudevents_2eproto, "flyteidl/event/cloudevents.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fevent_2fcloudevents_2eproto::offsets,
  file_level_metadata_flyteidl_2fevent_2fcloudevents_2eproto, 3, file_level_enum_descriptors_flyteidl_2fevent_2fcloudevents_2eproto, file_level_service_descriptors_flyteidl_2fevent_2fcloudevents_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fevent_2fcloudevents_2eproto[] =
  "\n flyteidl/event/cloudevents.proto\022\016flyt"
  "eidl.event\032\032flyteidl/event/event.proto\032\034"
  "flyteidl/core/literals.proto\032\035flyteidl/c"
  "ore/interface.proto\032\036flyteidl/core/ident"
  "ifier.proto\032\037google/protobuf/timestamp.p"
  "roto\"\343\003\n\033CloudEventWorkflowExecution\0229\n\t"
  "raw_event\030\001 \001(\0132&.flyteidl.event.Workflo"
  "wExecutionEvent\022.\n\013output_data\030\002 \001(\0132\031.f"
  "lyteidl.core.LiteralMap\0227\n\020output_interf"
  "ace\030\003 \001(\0132\035.flyteidl.core.TypedInterface"
  "\022-\n\ninput_data\030\004 \001(\0132\031.flyteidl.core.Lit"
  "eralMap\0220\n\014scheduled_at\030\005 \001(\0132\032.google.p"
  "rotobuf.Timestamp\022/\n\014artifact_ids\030\006 \003(\0132"
  "\031.flyteidl.core.ArtifactID\022E\n\025parent_nod"
  "e_execution\030\007 \001(\0132&.flyteidl.core.NodeEx"
  "ecutionIdentifier\022G\n\023reference_execution"
  "\030\010 \001(\0132*.flyteidl.core.WorkflowExecution"
  "Identifier\"P\n\027CloudEventNodeExecution\0225\n"
  "\traw_event\030\001 \001(\0132\".flyteidl.event.NodeEx"
  "ecutionEvent\"\333\003\n\027CloudEventTaskExecution"
  "\0225\n\traw_event\030\001 \001(\0132\".flyteidl.event.Tas"
  "kExecutionEvent\022.\n\013output_data\030\002 \001(\0132\031.f"
  "lyteidl.core.LiteralMap\0227\n\020output_interf"
  "ace\030\003 \001(\0132\035.flyteidl.core.TypedInterface"
  "\022-\n\ninput_data\030\004 \001(\0132\031.flyteidl.core.Lit"
  "eralMap\0220\n\014scheduled_at\030\005 \001(\0132\032.google.p"
  "rotobuf.Timestamp\022/\n\014artifact_ids\030\006 \003(\0132"
  "\031.flyteidl.core.ArtifactID\022E\n\025parent_nod"
  "e_execution\030\007 \001(\0132&.flyteidl.core.NodeEx"
  "ecutionIdentifier\022G\n\023reference_execution"
  "\030\010 \001(\0132*.flyteidl.core.WorkflowExecution"
  "IdentifierB7Z5github.com/flyteorg/flytei"
  "dl/gen/pb-go/flyteidl/eventb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fevent_2fcloudevents_2eproto = {
  false, InitDefaults_flyteidl_2fevent_2fcloudevents_2eproto, 
  descriptor_table_protodef_flyteidl_2fevent_2fcloudevents_2eproto,
  "flyteidl/event/cloudevents.proto", &assign_descriptors_table_flyteidl_2fevent_2fcloudevents_2eproto, 1315,
};

void AddDescriptors_flyteidl_2fevent_2fcloudevents_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[5] =
  {
    ::AddDescriptors_flyteidl_2fevent_2fevent_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fliterals_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2finterface_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fidentifier_2eproto,
    ::AddDescriptors_google_2fprotobuf_2ftimestamp_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fevent_2fcloudevents_2eproto, deps, 5);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fevent_2fcloudevents_2eproto = []() { AddDescriptors_flyteidl_2fevent_2fcloudevents_2eproto(); return true; }();
namespace flyteidl {
namespace event {

// ===================================================================

void CloudEventWorkflowExecution::InitAsDefaultInstance() {
  ::flyteidl::event::_CloudEventWorkflowExecution_default_instance_._instance.get_mutable()->raw_event_ = const_cast< ::flyteidl::event::WorkflowExecutionEvent*>(
      ::flyteidl::event::WorkflowExecutionEvent::internal_default_instance());
  ::flyteidl::event::_CloudEventWorkflowExecution_default_instance_._instance.get_mutable()->output_data_ = const_cast< ::flyteidl::core::LiteralMap*>(
      ::flyteidl::core::LiteralMap::internal_default_instance());
  ::flyteidl::event::_CloudEventWorkflowExecution_default_instance_._instance.get_mutable()->output_interface_ = const_cast< ::flyteidl::core::TypedInterface*>(
      ::flyteidl::core::TypedInterface::internal_default_instance());
  ::flyteidl::event::_CloudEventWorkflowExecution_default_instance_._instance.get_mutable()->input_data_ = const_cast< ::flyteidl::core::LiteralMap*>(
      ::flyteidl::core::LiteralMap::internal_default_instance());
  ::flyteidl::event::_CloudEventWorkflowExecution_default_instance_._instance.get_mutable()->scheduled_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::flyteidl::event::_CloudEventWorkflowExecution_default_instance_._instance.get_mutable()->parent_node_execution_ = const_cast< ::flyteidl::core::NodeExecutionIdentifier*>(
      ::flyteidl::core::NodeExecutionIdentifier::internal_default_instance());
  ::flyteidl::event::_CloudEventWorkflowExecution_default_instance_._instance.get_mutable()->reference_execution_ = const_cast< ::flyteidl::core::WorkflowExecutionIdentifier*>(
      ::flyteidl::core::WorkflowExecutionIdentifier::internal_default_instance());
}
class CloudEventWorkflowExecution::HasBitSetters {
 public:
  static const ::flyteidl::event::WorkflowExecutionEvent& raw_event(const CloudEventWorkflowExecution* msg);
  static const ::flyteidl::core::LiteralMap& output_data(const CloudEventWorkflowExecution* msg);
  static const ::flyteidl::core::TypedInterface& output_interface(const CloudEventWorkflowExecution* msg);
  static const ::flyteidl::core::LiteralMap& input_data(const CloudEventWorkflowExecution* msg);
  static const ::google::protobuf::Timestamp& scheduled_at(const CloudEventWorkflowExecution* msg);
  static const ::flyteidl::core::NodeExecutionIdentifier& parent_node_execution(const CloudEventWorkflowExecution* msg);
  static const ::flyteidl::core::WorkflowExecutionIdentifier& reference_execution(const CloudEventWorkflowExecution* msg);
};

const ::flyteidl::event::WorkflowExecutionEvent&
CloudEventWorkflowExecution::HasBitSetters::raw_event(const CloudEventWorkflowExecution* msg) {
  return *msg->raw_event_;
}
const ::flyteidl::core::LiteralMap&
CloudEventWorkflowExecution::HasBitSetters::output_data(const CloudEventWorkflowExecution* msg) {
  return *msg->output_data_;
}
const ::flyteidl::core::TypedInterface&
CloudEventWorkflowExecution::HasBitSetters::output_interface(const CloudEventWorkflowExecution* msg) {
  return *msg->output_interface_;
}
const ::flyteidl::core::LiteralMap&
CloudEventWorkflowExecution::HasBitSetters::input_data(const CloudEventWorkflowExecution* msg) {
  return *msg->input_data_;
}
const ::google::protobuf::Timestamp&
CloudEventWorkflowExecution::HasBitSetters::scheduled_at(const CloudEventWorkflowExecution* msg) {
  return *msg->scheduled_at_;
}
const ::flyteidl::core::NodeExecutionIdentifier&
CloudEventWorkflowExecution::HasBitSetters::parent_node_execution(const CloudEventWorkflowExecution* msg) {
  return *msg->parent_node_execution_;
}
const ::flyteidl::core::WorkflowExecutionIdentifier&
CloudEventWorkflowExecution::HasBitSetters::reference_execution(const CloudEventWorkflowExecution* msg) {
  return *msg->reference_execution_;
}
void CloudEventWorkflowExecution::clear_raw_event() {
  if (GetArenaNoVirtual() == nullptr && raw_event_ != nullptr) {
    delete raw_event_;
  }
  raw_event_ = nullptr;
}
void CloudEventWorkflowExecution::clear_output_data() {
  if (GetArenaNoVirtual() == nullptr && output_data_ != nullptr) {
    delete output_data_;
  }
  output_data_ = nullptr;
}
void CloudEventWorkflowExecution::clear_output_interface() {
  if (GetArenaNoVirtual() == nullptr && output_interface_ != nullptr) {
    delete output_interface_;
  }
  output_interface_ = nullptr;
}
void CloudEventWorkflowExecution::clear_input_data() {
  if (GetArenaNoVirtual() == nullptr && input_data_ != nullptr) {
    delete input_data_;
  }
  input_data_ = nullptr;
}
void CloudEventWorkflowExecution::clear_scheduled_at() {
  if (GetArenaNoVirtual() == nullptr && scheduled_at_ != nullptr) {
    delete scheduled_at_;
  }
  scheduled_at_ = nullptr;
}
void CloudEventWorkflowExecution::clear_artifact_ids() {
  artifact_ids_.Clear();
}
void CloudEventWorkflowExecution::clear_parent_node_execution() {
  if (GetArenaNoVirtual() == nullptr && parent_node_execution_ != nullptr) {
    delete parent_node_execution_;
  }
  parent_node_execution_ = nullptr;
}
void CloudEventWorkflowExecution::clear_reference_execution() {
  if (GetArenaNoVirtual() == nullptr && reference_execution_ != nullptr) {
    delete reference_execution_;
  }
  reference_execution_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudEventWorkflowExecution::kRawEventFieldNumber;
const int CloudEventWorkflowExecution::kOutputDataFieldNumber;
const int CloudEventWorkflowExecution::kOutputInterfaceFieldNumber;
const int CloudEventWorkflowExecution::kInputDataFieldNumber;
const int CloudEventWorkflowExecution::kScheduledAtFieldNumber;
const int CloudEventWorkflowExecution::kArtifactIdsFieldNumber;
const int CloudEventWorkflowExecution::kParentNodeExecutionFieldNumber;
const int CloudEventWorkflowExecution::kReferenceExecutionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudEventWorkflowExecution::CloudEventWorkflowExecution()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.event.CloudEventWorkflowExecution)
}
CloudEventWorkflowExecution::CloudEventWorkflowExecution(const CloudEventWorkflowExecution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      artifact_ids_(from.artifact_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_raw_event()) {
    raw_event_ = new ::flyteidl::event::WorkflowExecutionEvent(*from.raw_event_);
  } else {
    raw_event_ = nullptr;
  }
  if (from.has_output_data()) {
    output_data_ = new ::flyteidl::core::LiteralMap(*from.output_data_);
  } else {
    output_data_ = nullptr;
  }
  if (from.has_output_interface()) {
    output_interface_ = new ::flyteidl::core::TypedInterface(*from.output_interface_);
  } else {
    output_interface_ = nullptr;
  }
  if (from.has_input_data()) {
    input_data_ = new ::flyteidl::core::LiteralMap(*from.input_data_);
  } else {
    input_data_ = nullptr;
  }
  if (from.has_scheduled_at()) {
    scheduled_at_ = new ::google::protobuf::Timestamp(*from.scheduled_at_);
  } else {
    scheduled_at_ = nullptr;
  }
  if (from.has_parent_node_execution()) {
    parent_node_execution_ = new ::flyteidl::core::NodeExecutionIdentifier(*from.parent_node_execution_);
  } else {
    parent_node_execution_ = nullptr;
  }
  if (from.has_reference_execution()) {
    reference_execution_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.reference_execution_);
  } else {
    reference_execution_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.CloudEventWorkflowExecution)
}

void CloudEventWorkflowExecution::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CloudEventWorkflowExecution_flyteidl_2fevent_2fcloudevents_2eproto.base);
  ::memset(&raw_event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reference_execution_) -
      reinterpret_cast<char*>(&raw_event_)) + sizeof(reference_execution_));
}

CloudEventWorkflowExecution::~CloudEventWorkflowExecution() {
  // @@protoc_insertion_point(destructor:flyteidl.event.CloudEventWorkflowExecution)
  SharedDtor();
}

void CloudEventWorkflowExecution::SharedDtor() {
  if (this != internal_default_instance()) delete raw_event_;
  if (this != internal_default_instance()) delete output_data_;
  if (this != internal_default_instance()) delete output_interface_;
  if (this != internal_default_instance()) delete input_data_;
  if (this != internal_default_instance()) delete scheduled_at_;
  if (this != internal_default_instance()) delete parent_node_execution_;
  if (this != internal_default_instance()) delete reference_execution_;
}

void CloudEventWorkflowExecution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloudEventWorkflowExecution& CloudEventWorkflowExecution::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CloudEventWorkflowExecution_flyteidl_2fevent_2fcloudevents_2eproto.base);
  return *internal_default_instance();
}


void CloudEventWorkflowExecution::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.event.CloudEventWorkflowExecution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  artifact_ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && raw_event_ != nullptr) {
    delete raw_event_;
  }
  raw_event_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && output_data_ != nullptr) {
    delete output_data_;
  }
  output_data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && output_interface_ != nullptr) {
    delete output_interface_;
  }
  output_interface_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && input_data_ != nullptr) {
    delete input_data_;
  }
  input_data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && scheduled_at_ != nullptr) {
    delete scheduled_at_;
  }
  scheduled_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && parent_node_execution_ != nullptr) {
    delete parent_node_execution_;
  }
  parent_node_execution_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && reference_execution_ != nullptr) {
    delete reference_execution_;
  }
  reference_execution_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CloudEventWorkflowExecution::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CloudEventWorkflowExecution*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.event.WorkflowExecutionEvent raw_event = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::event::WorkflowExecutionEvent::_InternalParse;
        object = msg->mutable_raw_event();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.LiteralMap output_data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::LiteralMap::_InternalParse;
        object = msg->mutable_output_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.TypedInterface output_interface = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::TypedInterface::_InternalParse;
        object = msg->mutable_output_interface();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.LiteralMap input_data = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::LiteralMap::_InternalParse;
        object = msg->mutable_input_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp scheduled_at = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_scheduled_at();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .flyteidl.core.ArtifactID artifact_ids = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::core::ArtifactID::_InternalParse;
          object = msg->add_artifact_ids();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // .flyteidl.core.NodeExecutionIdentifier parent_node_execution = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::NodeExecutionIdentifier::_InternalParse;
        object = msg->mutable_parent_node_execution();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.WorkflowExecutionIdentifier reference_execution = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::WorkflowExecutionIdentifier::_InternalParse;
        object = msg->mutable_reference_execution();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CloudEventWorkflowExecution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.event.CloudEventWorkflowExecution)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.event.WorkflowExecutionEvent raw_event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_raw_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.LiteralMap output_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_output_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.TypedInterface output_interface = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_output_interface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.LiteralMap input_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_input_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp scheduled_at = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scheduled_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.core.ArtifactID artifact_ids = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_artifact_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.NodeExecutionIdentifier parent_node_execution = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parent_node_execution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.WorkflowExecutionIdentifier reference_execution = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reference_execution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.event.CloudEventWorkflowExecution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.event.CloudEventWorkflowExecution)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CloudEventWorkflowExecution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.event.CloudEventWorkflowExecution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.event.WorkflowExecutionEvent raw_event = 1;
  if (this->has_raw_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::raw_event(this), output);
  }

  // .flyteidl.core.LiteralMap output_data = 2;
  if (this->has_output_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::output_data(this), output);
  }

  // .flyteidl.core.TypedInterface output_interface = 3;
  if (this->has_output_interface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::output_interface(this), output);
  }

  // .flyteidl.core.LiteralMap input_data = 4;
  if (this->has_input_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::input_data(this), output);
  }

  // .google.protobuf.Timestamp scheduled_at = 5;
  if (this->has_scheduled_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::scheduled_at(this), output);
  }

  // repeated .flyteidl.core.ArtifactID artifact_ids = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->artifact_ids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->artifact_ids(static_cast<int>(i)),
      output);
  }

  // .flyteidl.core.NodeExecutionIdentifier parent_node_execution = 7;
  if (this->has_parent_node_execution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::parent_node_execution(this), output);
  }

  // .flyteidl.core.WorkflowExecutionIdentifier reference_execution = 8;
  if (this->has_reference_execution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::reference_execution(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.event.CloudEventWorkflowExecution)
}

::google::protobuf::uint8* CloudEventWorkflowExecution::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.event.CloudEventWorkflowExecution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.event.WorkflowExecutionEvent raw_event = 1;
  if (this->has_raw_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::raw_event(this), target);
  }

  // .flyteidl.core.LiteralMap output_data = 2;
  if (this->has_output_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::output_data(this), target);
  }

  // .flyteidl.core.TypedInterface output_interface = 3;
  if (this->has_output_interface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::output_interface(this), target);
  }

  // .flyteidl.core.LiteralMap input_data = 4;
  if (this->has_input_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::input_data(this), target);
  }

  // .google.protobuf.Timestamp scheduled_at = 5;
  if (this->has_scheduled_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::scheduled_at(this), target);
  }

  // repeated .flyteidl.core.ArtifactID artifact_ids = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->artifact_ids_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->artifact_ids(static_cast<int>(i)), target);
  }

  // .flyteidl.core.NodeExecutionIdentifier parent_node_execution = 7;
  if (this->has_parent_node_execution()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::parent_node_execution(this), target);
  }

  // .flyteidl.core.WorkflowExecutionIdentifier reference_execution = 8;
  if (this->has_reference_execution()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::reference_execution(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.event.CloudEventWorkflowExecution)
  return target;
}

size_t CloudEventWorkflowExecution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.event.CloudEventWorkflowExecution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.core.ArtifactID artifact_ids = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->artifact_ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->artifact_ids(static_cast<int>(i)));
    }
  }

  // .flyteidl.event.WorkflowExecutionEvent raw_event = 1;
  if (this->has_raw_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *raw_event_);
  }

  // .flyteidl.core.LiteralMap output_data = 2;
  if (this->has_output_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *output_data_);
  }

  // .flyteidl.core.TypedInterface output_interface = 3;
  if (this->has_output_interface()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *output_interface_);
  }

  // .flyteidl.core.LiteralMap input_data = 4;
  if (this->has_input_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *input_data_);
  }

  // .google.protobuf.Timestamp scheduled_at = 5;
  if (this->has_scheduled_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *scheduled_at_);
  }

  // .flyteidl.core.NodeExecutionIdentifier parent_node_execution = 7;
  if (this->has_parent_node_execution()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *parent_node_execution_);
  }

  // .flyteidl.core.WorkflowExecutionIdentifier reference_execution = 8;
  if (this->has_reference_execution()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reference_execution_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloudEventWorkflowExecution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.event.CloudEventWorkflowExecution)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudEventWorkflowExecution* source =
      ::google::protobuf::DynamicCastToGenerated<CloudEventWorkflowExecution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.event.CloudEventWorkflowExecution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.event.CloudEventWorkflowExecution)
    MergeFrom(*source);
  }
}

void CloudEventWorkflowExecution::MergeFrom(const CloudEventWorkflowExecution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.event.CloudEventWorkflowExecution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  artifact_ids_.MergeFrom(from.artifact_ids_);
  if (from.has_raw_event()) {
    mutable_raw_event()->::flyteidl::event::WorkflowExecutionEvent::MergeFrom(from.raw_event());
  }
  if (from.has_output_data()) {
    mutable_output_data()->::flyteidl::core::LiteralMap::MergeFrom(from.output_data());
  }
  if (from.has_output_interface()) {
    mutable_output_interface()->::flyteidl::core::TypedInterface::MergeFrom(from.output_interface());
  }
  if (from.has_input_data()) {
    mutable_input_data()->::flyteidl::core::LiteralMap::MergeFrom(from.input_data());
  }
  if (from.has_scheduled_at()) {
    mutable_scheduled_at()->::google::protobuf::Timestamp::MergeFrom(from.scheduled_at());
  }
  if (from.has_parent_node_execution()) {
    mutable_parent_node_execution()->::flyteidl::core::NodeExecutionIdentifier::MergeFrom(from.parent_node_execution());
  }
  if (from.has_reference_execution()) {
    mutable_reference_execution()->::flyteidl::core::WorkflowExecutionIdentifier::MergeFrom(from.reference_execution());
  }
}

void CloudEventWorkflowExecution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.event.CloudEventWorkflowExecution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudEventWorkflowExecution::CopyFrom(const CloudEventWorkflowExecution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.event.CloudEventWorkflowExecution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudEventWorkflowExecution::IsInitialized() const {
  return true;
}

void CloudEventWorkflowExecution::Swap(CloudEventWorkflowExecution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudEventWorkflowExecution::InternalSwap(CloudEventWorkflowExecution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&artifact_ids_)->InternalSwap(CastToBase(&other->artifact_ids_));
  swap(raw_event_, other->raw_event_);
  swap(output_data_, other->output_data_);
  swap(output_interface_, other->output_interface_);
  swap(input_data_, other->input_data_);
  swap(scheduled_at_, other->scheduled_at_);
  swap(parent_node_execution_, other->parent_node_execution_);
  swap(reference_execution_, other->reference_execution_);
}

::google::protobuf::Metadata CloudEventWorkflowExecution::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fevent_2fcloudevents_2eproto);
  return ::file_level_metadata_flyteidl_2fevent_2fcloudevents_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CloudEventNodeExecution::InitAsDefaultInstance() {
  ::flyteidl::event::_CloudEventNodeExecution_default_instance_._instance.get_mutable()->raw_event_ = const_cast< ::flyteidl::event::NodeExecutionEvent*>(
      ::flyteidl::event::NodeExecutionEvent::internal_default_instance());
}
class CloudEventNodeExecution::HasBitSetters {
 public:
  static const ::flyteidl::event::NodeExecutionEvent& raw_event(const CloudEventNodeExecution* msg);
};

const ::flyteidl::event::NodeExecutionEvent&
CloudEventNodeExecution::HasBitSetters::raw_event(const CloudEventNodeExecution* msg) {
  return *msg->raw_event_;
}
void CloudEventNodeExecution::clear_raw_event() {
  if (GetArenaNoVirtual() == nullptr && raw_event_ != nullptr) {
    delete raw_event_;
  }
  raw_event_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudEventNodeExecution::kRawEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudEventNodeExecution::CloudEventNodeExecution()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.event.CloudEventNodeExecution)
}
CloudEventNodeExecution::CloudEventNodeExecution(const CloudEventNodeExecution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_raw_event()) {
    raw_event_ = new ::flyteidl::event::NodeExecutionEvent(*from.raw_event_);
  } else {
    raw_event_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.CloudEventNodeExecution)
}

void CloudEventNodeExecution::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CloudEventNodeExecution_flyteidl_2fevent_2fcloudevents_2eproto.base);
  raw_event_ = nullptr;
}

CloudEventNodeExecution::~CloudEventNodeExecution() {
  // @@protoc_insertion_point(destructor:flyteidl.event.CloudEventNodeExecution)
  SharedDtor();
}

void CloudEventNodeExecution::SharedDtor() {
  if (this != internal_default_instance()) delete raw_event_;
}

void CloudEventNodeExecution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloudEventNodeExecution& CloudEventNodeExecution::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CloudEventNodeExecution_flyteidl_2fevent_2fcloudevents_2eproto.base);
  return *internal_default_instance();
}


void CloudEventNodeExecution::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.event.CloudEventNodeExecution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && raw_event_ != nullptr) {
    delete raw_event_;
  }
  raw_event_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CloudEventNodeExecution::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CloudEventNodeExecution*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.event.NodeExecutionEvent raw_event = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::event::NodeExecutionEvent::_InternalParse;
        object = msg->mutable_raw_event();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CloudEventNodeExecution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.event.CloudEventNodeExecution)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.event.NodeExecutionEvent raw_event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_raw_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.event.CloudEventNodeExecution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.event.CloudEventNodeExecution)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CloudEventNodeExecution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.event.CloudEventNodeExecution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.event.NodeExecutionEvent raw_event = 1;
  if (this->has_raw_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::raw_event(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.event.CloudEventNodeExecution)
}

::google::protobuf::uint8* CloudEventNodeExecution::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.event.CloudEventNodeExecution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.event.NodeExecutionEvent raw_event = 1;
  if (this->has_raw_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::raw_event(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.event.CloudEventNodeExecution)
  return target;
}

size_t CloudEventNodeExecution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.event.CloudEventNodeExecution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.event.NodeExecutionEvent raw_event = 1;
  if (this->has_raw_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *raw_event_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloudEventNodeExecution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.event.CloudEventNodeExecution)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudEventNodeExecution* source =
      ::google::protobuf::DynamicCastToGenerated<CloudEventNodeExecution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.event.CloudEventNodeExecution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.event.CloudEventNodeExecution)
    MergeFrom(*source);
  }
}

void CloudEventNodeExecution::MergeFrom(const CloudEventNodeExecution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.event.CloudEventNodeExecution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_raw_event()) {
    mutable_raw_event()->::flyteidl::event::NodeExecutionEvent::MergeFrom(from.raw_event());
  }
}

void CloudEventNodeExecution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.event.CloudEventNodeExecution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudEventNodeExecution::CopyFrom(const CloudEventNodeExecution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.event.CloudEventNodeExecution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudEventNodeExecution::IsInitialized() const {
  return true;
}

void CloudEventNodeExecution::Swap(CloudEventNodeExecution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudEventNodeExecution::InternalSwap(CloudEventNodeExecution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(raw_event_, other->raw_event_);
}

::google::protobuf::Metadata CloudEventNodeExecution::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fevent_2fcloudevents_2eproto);
  return ::file_level_metadata_flyteidl_2fevent_2fcloudevents_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CloudEventTaskExecution::InitAsDefaultInstance() {
  ::flyteidl::event::_CloudEventTaskExecution_default_instance_._instance.get_mutable()->raw_event_ = const_cast< ::flyteidl::event::TaskExecutionEvent*>(
      ::flyteidl::event::TaskExecutionEvent::internal_default_instance());
  ::flyteidl::event::_CloudEventTaskExecution_default_instance_._instance.get_mutable()->output_data_ = const_cast< ::flyteidl::core::LiteralMap*>(
      ::flyteidl::core::LiteralMap::internal_default_instance());
  ::flyteidl::event::_CloudEventTaskExecution_default_instance_._instance.get_mutable()->output_interface_ = const_cast< ::flyteidl::core::TypedInterface*>(
      ::flyteidl::core::TypedInterface::internal_default_instance());
  ::flyteidl::event::_CloudEventTaskExecution_default_instance_._instance.get_mutable()->input_data_ = const_cast< ::flyteidl::core::LiteralMap*>(
      ::flyteidl::core::LiteralMap::internal_default_instance());
  ::flyteidl::event::_CloudEventTaskExecution_default_instance_._instance.get_mutable()->scheduled_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::flyteidl::event::_CloudEventTaskExecution_default_instance_._instance.get_mutable()->parent_node_execution_ = const_cast< ::flyteidl::core::NodeExecutionIdentifier*>(
      ::flyteidl::core::NodeExecutionIdentifier::internal_default_instance());
  ::flyteidl::event::_CloudEventTaskExecution_default_instance_._instance.get_mutable()->reference_execution_ = const_cast< ::flyteidl::core::WorkflowExecutionIdentifier*>(
      ::flyteidl::core::WorkflowExecutionIdentifier::internal_default_instance());
}
class CloudEventTaskExecution::HasBitSetters {
 public:
  static const ::flyteidl::event::TaskExecutionEvent& raw_event(const CloudEventTaskExecution* msg);
  static const ::flyteidl::core::LiteralMap& output_data(const CloudEventTaskExecution* msg);
  static const ::flyteidl::core::TypedInterface& output_interface(const CloudEventTaskExecution* msg);
  static const ::flyteidl::core::LiteralMap& input_data(const CloudEventTaskExecution* msg);
  static const ::google::protobuf::Timestamp& scheduled_at(const CloudEventTaskExecution* msg);
  static const ::flyteidl::core::NodeExecutionIdentifier& parent_node_execution(const CloudEventTaskExecution* msg);
  static const ::flyteidl::core::WorkflowExecutionIdentifier& reference_execution(const CloudEventTaskExecution* msg);
};

const ::flyteidl::event::TaskExecutionEvent&
CloudEventTaskExecution::HasBitSetters::raw_event(const CloudEventTaskExecution* msg) {
  return *msg->raw_event_;
}
const ::flyteidl::core::LiteralMap&
CloudEventTaskExecution::HasBitSetters::output_data(const CloudEventTaskExecution* msg) {
  return *msg->output_data_;
}
const ::flyteidl::core::TypedInterface&
CloudEventTaskExecution::HasBitSetters::output_interface(const CloudEventTaskExecution* msg) {
  return *msg->output_interface_;
}
const ::flyteidl::core::LiteralMap&
CloudEventTaskExecution::HasBitSetters::input_data(const CloudEventTaskExecution* msg) {
  return *msg->input_data_;
}
const ::google::protobuf::Timestamp&
CloudEventTaskExecution::HasBitSetters::scheduled_at(const CloudEventTaskExecution* msg) {
  return *msg->scheduled_at_;
}
const ::flyteidl::core::NodeExecutionIdentifier&
CloudEventTaskExecution::HasBitSetters::parent_node_execution(const CloudEventTaskExecution* msg) {
  return *msg->parent_node_execution_;
}
const ::flyteidl::core::WorkflowExecutionIdentifier&
CloudEventTaskExecution::HasBitSetters::reference_execution(const CloudEventTaskExecution* msg) {
  return *msg->reference_execution_;
}
void CloudEventTaskExecution::clear_raw_event() {
  if (GetArenaNoVirtual() == nullptr && raw_event_ != nullptr) {
    delete raw_event_;
  }
  raw_event_ = nullptr;
}
void CloudEventTaskExecution::clear_output_data() {
  if (GetArenaNoVirtual() == nullptr && output_data_ != nullptr) {
    delete output_data_;
  }
  output_data_ = nullptr;
}
void CloudEventTaskExecution::clear_output_interface() {
  if (GetArenaNoVirtual() == nullptr && output_interface_ != nullptr) {
    delete output_interface_;
  }
  output_interface_ = nullptr;
}
void CloudEventTaskExecution::clear_input_data() {
  if (GetArenaNoVirtual() == nullptr && input_data_ != nullptr) {
    delete input_data_;
  }
  input_data_ = nullptr;
}
void CloudEventTaskExecution::clear_scheduled_at() {
  if (GetArenaNoVirtual() == nullptr && scheduled_at_ != nullptr) {
    delete scheduled_at_;
  }
  scheduled_at_ = nullptr;
}
void CloudEventTaskExecution::clear_artifact_ids() {
  artifact_ids_.Clear();
}
void CloudEventTaskExecution::clear_parent_node_execution() {
  if (GetArenaNoVirtual() == nullptr && parent_node_execution_ != nullptr) {
    delete parent_node_execution_;
  }
  parent_node_execution_ = nullptr;
}
void CloudEventTaskExecution::clear_reference_execution() {
  if (GetArenaNoVirtual() == nullptr && reference_execution_ != nullptr) {
    delete reference_execution_;
  }
  reference_execution_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudEventTaskExecution::kRawEventFieldNumber;
const int CloudEventTaskExecution::kOutputDataFieldNumber;
const int CloudEventTaskExecution::kOutputInterfaceFieldNumber;
const int CloudEventTaskExecution::kInputDataFieldNumber;
const int CloudEventTaskExecution::kScheduledAtFieldNumber;
const int CloudEventTaskExecution::kArtifactIdsFieldNumber;
const int CloudEventTaskExecution::kParentNodeExecutionFieldNumber;
const int CloudEventTaskExecution::kReferenceExecutionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudEventTaskExecution::CloudEventTaskExecution()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.event.CloudEventTaskExecution)
}
CloudEventTaskExecution::CloudEventTaskExecution(const CloudEventTaskExecution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      artifact_ids_(from.artifact_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_raw_event()) {
    raw_event_ = new ::flyteidl::event::TaskExecutionEvent(*from.raw_event_);
  } else {
    raw_event_ = nullptr;
  }
  if (from.has_output_data()) {
    output_data_ = new ::flyteidl::core::LiteralMap(*from.output_data_);
  } else {
    output_data_ = nullptr;
  }
  if (from.has_output_interface()) {
    output_interface_ = new ::flyteidl::core::TypedInterface(*from.output_interface_);
  } else {
    output_interface_ = nullptr;
  }
  if (from.has_input_data()) {
    input_data_ = new ::flyteidl::core::LiteralMap(*from.input_data_);
  } else {
    input_data_ = nullptr;
  }
  if (from.has_scheduled_at()) {
    scheduled_at_ = new ::google::protobuf::Timestamp(*from.scheduled_at_);
  } else {
    scheduled_at_ = nullptr;
  }
  if (from.has_parent_node_execution()) {
    parent_node_execution_ = new ::flyteidl::core::NodeExecutionIdentifier(*from.parent_node_execution_);
  } else {
    parent_node_execution_ = nullptr;
  }
  if (from.has_reference_execution()) {
    reference_execution_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.reference_execution_);
  } else {
    reference_execution_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.event.CloudEventTaskExecution)
}

void CloudEventTaskExecution::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CloudEventTaskExecution_flyteidl_2fevent_2fcloudevents_2eproto.base);
  ::memset(&raw_event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reference_execution_) -
      reinterpret_cast<char*>(&raw_event_)) + sizeof(reference_execution_));
}

CloudEventTaskExecution::~CloudEventTaskExecution() {
  // @@protoc_insertion_point(destructor:flyteidl.event.CloudEventTaskExecution)
  SharedDtor();
}

void CloudEventTaskExecution::SharedDtor() {
  if (this != internal_default_instance()) delete raw_event_;
  if (this != internal_default_instance()) delete output_data_;
  if (this != internal_default_instance()) delete output_interface_;
  if (this != internal_default_instance()) delete input_data_;
  if (this != internal_default_instance()) delete scheduled_at_;
  if (this != internal_default_instance()) delete parent_node_execution_;
  if (this != internal_default_instance()) delete reference_execution_;
}

void CloudEventTaskExecution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloudEventTaskExecution& CloudEventTaskExecution::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CloudEventTaskExecution_flyteidl_2fevent_2fcloudevents_2eproto.base);
  return *internal_default_instance();
}


void CloudEventTaskExecution::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.event.CloudEventTaskExecution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  artifact_ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && raw_event_ != nullptr) {
    delete raw_event_;
  }
  raw_event_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && output_data_ != nullptr) {
    delete output_data_;
  }
  output_data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && output_interface_ != nullptr) {
    delete output_interface_;
  }
  output_interface_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && input_data_ != nullptr) {
    delete input_data_;
  }
  input_data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && scheduled_at_ != nullptr) {
    delete scheduled_at_;
  }
  scheduled_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && parent_node_execution_ != nullptr) {
    delete parent_node_execution_;
  }
  parent_node_execution_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && reference_execution_ != nullptr) {
    delete reference_execution_;
  }
  reference_execution_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CloudEventTaskExecution::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CloudEventTaskExecution*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.event.TaskExecutionEvent raw_event = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::event::TaskExecutionEvent::_InternalParse;
        object = msg->mutable_raw_event();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.LiteralMap output_data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::LiteralMap::_InternalParse;
        object = msg->mutable_output_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.TypedInterface output_interface = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::TypedInterface::_InternalParse;
        object = msg->mutable_output_interface();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.LiteralMap input_data = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::LiteralMap::_InternalParse;
        object = msg->mutable_input_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp scheduled_at = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_scheduled_at();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .flyteidl.core.ArtifactID artifact_ids = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::core::ArtifactID::_InternalParse;
          object = msg->add_artifact_ids();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // .flyteidl.core.NodeExecutionIdentifier parent_node_execution = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::NodeExecutionIdentifier::_InternalParse;
        object = msg->mutable_parent_node_execution();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.WorkflowExecutionIdentifier reference_execution = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::WorkflowExecutionIdentifier::_InternalParse;
        object = msg->mutable_reference_execution();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CloudEventTaskExecution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.event.CloudEventTaskExecution)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.event.TaskExecutionEvent raw_event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_raw_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.LiteralMap output_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_output_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.TypedInterface output_interface = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_output_interface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.LiteralMap input_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_input_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp scheduled_at = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scheduled_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.core.ArtifactID artifact_ids = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_artifact_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.NodeExecutionIdentifier parent_node_execution = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parent_node_execution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.WorkflowExecutionIdentifier reference_execution = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reference_execution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.event.CloudEventTaskExecution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.event.CloudEventTaskExecution)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CloudEventTaskExecution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.event.CloudEventTaskExecution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.event.TaskExecutionEvent raw_event = 1;
  if (this->has_raw_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::raw_event(this), output);
  }

  // .flyteidl.core.LiteralMap output_data = 2;
  if (this->has_output_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::output_data(this), output);
  }

  // .flyteidl.core.TypedInterface output_interface = 3;
  if (this->has_output_interface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::output_interface(this), output);
  }

  // .flyteidl.core.LiteralMap input_data = 4;
  if (this->has_input_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::input_data(this), output);
  }

  // .google.protobuf.Timestamp scheduled_at = 5;
  if (this->has_scheduled_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::scheduled_at(this), output);
  }

  // repeated .flyteidl.core.ArtifactID artifact_ids = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->artifact_ids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->artifact_ids(static_cast<int>(i)),
      output);
  }

  // .flyteidl.core.NodeExecutionIdentifier parent_node_execution = 7;
  if (this->has_parent_node_execution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::parent_node_execution(this), output);
  }

  // .flyteidl.core.WorkflowExecutionIdentifier reference_execution = 8;
  if (this->has_reference_execution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::reference_execution(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.event.CloudEventTaskExecution)
}

::google::protobuf::uint8* CloudEventTaskExecution::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.event.CloudEventTaskExecution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.event.TaskExecutionEvent raw_event = 1;
  if (this->has_raw_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::raw_event(this), target);
  }

  // .flyteidl.core.LiteralMap output_data = 2;
  if (this->has_output_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::output_data(this), target);
  }

  // .flyteidl.core.TypedInterface output_interface = 3;
  if (this->has_output_interface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::output_interface(this), target);
  }

  // .flyteidl.core.LiteralMap input_data = 4;
  if (this->has_input_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::input_data(this), target);
  }

  // .google.protobuf.Timestamp scheduled_at = 5;
  if (this->has_scheduled_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::scheduled_at(this), target);
  }

  // repeated .flyteidl.core.ArtifactID artifact_ids = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->artifact_ids_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->artifact_ids(static_cast<int>(i)), target);
  }

  // .flyteidl.core.NodeExecutionIdentifier parent_node_execution = 7;
  if (this->has_parent_node_execution()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::parent_node_execution(this), target);
  }

  // .flyteidl.core.WorkflowExecutionIdentifier reference_execution = 8;
  if (this->has_reference_execution()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::reference_execution(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.event.CloudEventTaskExecution)
  return target;
}

size_t CloudEventTaskExecution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.event.CloudEventTaskExecution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.core.ArtifactID artifact_ids = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->artifact_ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->artifact_ids(static_cast<int>(i)));
    }
  }

  // .flyteidl.event.TaskExecutionEvent raw_event = 1;
  if (this->has_raw_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *raw_event_);
  }

  // .flyteidl.core.LiteralMap output_data = 2;
  if (this->has_output_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *output_data_);
  }

  // .flyteidl.core.TypedInterface output_interface = 3;
  if (this->has_output_interface()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *output_interface_);
  }

  // .flyteidl.core.LiteralMap input_data = 4;
  if (this->has_input_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *input_data_);
  }

  // .google.protobuf.Timestamp scheduled_at = 5;
  if (this->has_scheduled_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *scheduled_at_);
  }

  // .flyteidl.core.NodeExecutionIdentifier parent_node_execution = 7;
  if (this->has_parent_node_execution()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *parent_node_execution_);
  }

  // .flyteidl.core.WorkflowExecutionIdentifier reference_execution = 8;
  if (this->has_reference_execution()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reference_execution_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloudEventTaskExecution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.event.CloudEventTaskExecution)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudEventTaskExecution* source =
      ::google::protobuf::DynamicCastToGenerated<CloudEventTaskExecution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.event.CloudEventTaskExecution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.event.CloudEventTaskExecution)
    MergeFrom(*source);
  }
}

void CloudEventTaskExecution::MergeFrom(const CloudEventTaskExecution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.event.CloudEventTaskExecution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  artifact_ids_.MergeFrom(from.artifact_ids_);
  if (from.has_raw_event()) {
    mutable_raw_event()->::flyteidl::event::TaskExecutionEvent::MergeFrom(from.raw_event());
  }
  if (from.has_output_data()) {
    mutable_output_data()->::flyteidl::core::LiteralMap::MergeFrom(from.output_data());
  }
  if (from.has_output_interface()) {
    mutable_output_interface()->::flyteidl::core::TypedInterface::MergeFrom(from.output_interface());
  }
  if (from.has_input_data()) {
    mutable_input_data()->::flyteidl::core::LiteralMap::MergeFrom(from.input_data());
  }
  if (from.has_scheduled_at()) {
    mutable_scheduled_at()->::google::protobuf::Timestamp::MergeFrom(from.scheduled_at());
  }
  if (from.has_parent_node_execution()) {
    mutable_parent_node_execution()->::flyteidl::core::NodeExecutionIdentifier::MergeFrom(from.parent_node_execution());
  }
  if (from.has_reference_execution()) {
    mutable_reference_execution()->::flyteidl::core::WorkflowExecutionIdentifier::MergeFrom(from.reference_execution());
  }
}

void CloudEventTaskExecution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.event.CloudEventTaskExecution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudEventTaskExecution::CopyFrom(const CloudEventTaskExecution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.event.CloudEventTaskExecution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudEventTaskExecution::IsInitialized() const {
  return true;
}

void CloudEventTaskExecution::Swap(CloudEventTaskExecution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudEventTaskExecution::InternalSwap(CloudEventTaskExecution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&artifact_ids_)->InternalSwap(CastToBase(&other->artifact_ids_));
  swap(raw_event_, other->raw_event_);
  swap(output_data_, other->output_data_);
  swap(output_interface_, other->output_interface_);
  swap(input_data_, other->input_data_);
  swap(scheduled_at_, other->scheduled_at_);
  swap(parent_node_execution_, other->parent_node_execution_);
  swap(reference_execution_, other->reference_execution_);
}

::google::protobuf::Metadata CloudEventTaskExecution::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fevent_2fcloudevents_2eproto);
  return ::file_level_metadata_flyteidl_2fevent_2fcloudevents_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace event
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::event::CloudEventWorkflowExecution* Arena::CreateMaybeMessage< ::flyteidl::event::CloudEventWorkflowExecution >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::event::CloudEventWorkflowExecution >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::event::CloudEventNodeExecution* Arena::CreateMaybeMessage< ::flyteidl::event::CloudEventNodeExecution >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::event::CloudEventNodeExecution >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::event::CloudEventTaskExecution* Arena::CreateMaybeMessage< ::flyteidl::event::CloudEventTaskExecution >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::event::CloudEventTaskExecution >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
