// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/waitable.proto

#include "flyteidl/plugins/waitable.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace plugins {
constexpr Waitable::Waitable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : workflow_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , wf_exec_id_(nullptr)
  , phase_(0)
{}
struct WaitableDefaultTypeInternal {
  constexpr WaitableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WaitableDefaultTypeInternal() {}
  union {
    Waitable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WaitableDefaultTypeInternal _Waitable_default_instance_;
}  // namespace plugins
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fplugins_2fwaitable_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fplugins_2fwaitable_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fplugins_2fwaitable_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fplugins_2fwaitable_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::Waitable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::Waitable, wf_exec_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::Waitable, phase_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::Waitable, workflow_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::plugins::Waitable)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::plugins::_Waitable_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fplugins_2fwaitable_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037flyteidl/plugins/waitable.proto\022\020flyte"
  "idl.plugins\032\035flyteidl/core/execution.pro"
  "to\032\036flyteidl/core/identifier.proto\"\263\001\n\010W"
  "aitable\022H\n\nwf_exec_id\030\001 \001(\0132*.flyteidl.c"
  "ore.WorkflowExecutionIdentifierR\010wfExecI"
  "d\022<\n\005phase\030\002 \001(\0162&.flyteidl.core.Workflo"
  "wExecution.PhaseR\005phase\022\037\n\013workflow_id\030\003"
  " \001(\tR\nworkflowIdB\302\001\n\024com.flyteidl.plugin"
  "sB\rWaitableProtoH\002Z7github.com/flyteorg/"
  "flyteidl/gen/pb-go/flyteidl/plugins\370\001\000\242\002"
  "\003FPX\252\002\020Flyteidl.Plugins\312\002\020Flyteidl\\Plugi"
  "ns\342\002\034Flyteidl\\Plugins\\GPBMetadata\352\002\021Flyt"
  "eidl::Pluginsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flyteidl_2fplugins_2fwaitable_2eproto_deps[2] = {
  &::descriptor_table_flyteidl_2fcore_2fexecution_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fidentifier_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fplugins_2fwaitable_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fplugins_2fwaitable_2eproto = {
  false, false, 501, descriptor_table_protodef_flyteidl_2fplugins_2fwaitable_2eproto, "flyteidl/plugins/waitable.proto", 
  &descriptor_table_flyteidl_2fplugins_2fwaitable_2eproto_once, descriptor_table_flyteidl_2fplugins_2fwaitable_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_flyteidl_2fplugins_2fwaitable_2eproto::offsets,
  file_level_metadata_flyteidl_2fplugins_2fwaitable_2eproto, file_level_enum_descriptors_flyteidl_2fplugins_2fwaitable_2eproto, file_level_service_descriptors_flyteidl_2fplugins_2fwaitable_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fplugins_2fwaitable_2eproto_getter() {
  return &descriptor_table_flyteidl_2fplugins_2fwaitable_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fplugins_2fwaitable_2eproto(&descriptor_table_flyteidl_2fplugins_2fwaitable_2eproto);
namespace flyteidl {
namespace plugins {

// ===================================================================

class Waitable::_Internal {
 public:
  static const ::flyteidl::core::WorkflowExecutionIdentifier& wf_exec_id(const Waitable* msg);
};

const ::flyteidl::core::WorkflowExecutionIdentifier&
Waitable::_Internal::wf_exec_id(const Waitable* msg) {
  return *msg->wf_exec_id_;
}
void Waitable::clear_wf_exec_id() {
  if (GetArenaForAllocation() == nullptr && wf_exec_id_ != nullptr) {
    delete wf_exec_id_;
  }
  wf_exec_id_ = nullptr;
}
Waitable::Waitable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.plugins.Waitable)
}
Waitable::Waitable(const Waitable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow_id().empty()) {
    workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_workflow_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_wf_exec_id()) {
    wf_exec_id_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.wf_exec_id_);
  } else {
    wf_exec_id_ = nullptr;
  }
  phase_ = from.phase_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.Waitable)
}

inline void Waitable::SharedCtor() {
workflow_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&wf_exec_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phase_) -
    reinterpret_cast<char*>(&wf_exec_id_)) + sizeof(phase_));
}

Waitable::~Waitable() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.Waitable)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Waitable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  workflow_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete wf_exec_id_;
}

void Waitable::ArenaDtor(void* object) {
  Waitable* _this = reinterpret_cast< Waitable* >(object);
  (void)_this;
}
void Waitable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Waitable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Waitable::InternalSwap(Waitable* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Waitable::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fplugins_2fwaitable_2eproto_getter, &descriptor_table_flyteidl_2fplugins_2fwaitable_2eproto_once,
      file_level_metadata_flyteidl_2fplugins_2fwaitable_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace plugins
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::Waitable* Arena::CreateMaybeMessage< ::flyteidl::plugins::Waitable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::plugins::Waitable >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
