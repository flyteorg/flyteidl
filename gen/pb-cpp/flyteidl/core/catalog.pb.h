// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/catalog.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fcore_2fcatalog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fcore_2fcatalog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/identifier.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fcatalog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fcore_2fcatalog_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fcore_2fcatalog_2eproto;
namespace flyteidl {
namespace core {
class CatalogArtifactTag;
struct CatalogArtifactTagDefaultTypeInternal;
extern CatalogArtifactTagDefaultTypeInternal _CatalogArtifactTag_default_instance_;
class CatalogMetadata;
struct CatalogMetadataDefaultTypeInternal;
extern CatalogMetadataDefaultTypeInternal _CatalogMetadata_default_instance_;
class CatalogReservation;
struct CatalogReservationDefaultTypeInternal;
extern CatalogReservationDefaultTypeInternal _CatalogReservation_default_instance_;
}  // namespace core
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::core::CatalogArtifactTag* Arena::CreateMaybeMessage<::flyteidl::core::CatalogArtifactTag>(Arena*);
template<> ::flyteidl::core::CatalogMetadata* Arena::CreateMaybeMessage<::flyteidl::core::CatalogMetadata>(Arena*);
template<> ::flyteidl::core::CatalogReservation* Arena::CreateMaybeMessage<::flyteidl::core::CatalogReservation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace core {

enum CatalogReservation_Status : int {
  CatalogReservation_Status_RESERVATION_DISABLED = 0,
  CatalogReservation_Status_RESERVATION_ACQUIRED = 1,
  CatalogReservation_Status_RESERVATION_EXISTS = 2,
  CatalogReservation_Status_RESERVATION_RELEASED = 3,
  CatalogReservation_Status_RESERVATION_FAILURE = 4,
  CatalogReservation_Status_CatalogReservation_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CatalogReservation_Status_CatalogReservation_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CatalogReservation_Status_IsValid(int value);
constexpr CatalogReservation_Status CatalogReservation_Status_Status_MIN = CatalogReservation_Status_RESERVATION_DISABLED;
constexpr CatalogReservation_Status CatalogReservation_Status_Status_MAX = CatalogReservation_Status_RESERVATION_FAILURE;
constexpr int CatalogReservation_Status_Status_ARRAYSIZE = CatalogReservation_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CatalogReservation_Status_descriptor();
template<typename T>
inline const std::string& CatalogReservation_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CatalogReservation_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CatalogReservation_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CatalogReservation_Status_descriptor(), enum_t_value);
}
inline bool CatalogReservation_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CatalogReservation_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CatalogReservation_Status>(
    CatalogReservation_Status_descriptor(), name, value);
}
enum CatalogCacheStatus : int {
  CACHE_DISABLED = 0,
  CACHE_MISS = 1,
  CACHE_HIT = 2,
  CACHE_POPULATED = 3,
  CACHE_LOOKUP_FAILURE = 4,
  CACHE_PUT_FAILURE = 5,
  CatalogCacheStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CatalogCacheStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CatalogCacheStatus_IsValid(int value);
constexpr CatalogCacheStatus CatalogCacheStatus_MIN = CACHE_DISABLED;
constexpr CatalogCacheStatus CatalogCacheStatus_MAX = CACHE_PUT_FAILURE;
constexpr int CatalogCacheStatus_ARRAYSIZE = CatalogCacheStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CatalogCacheStatus_descriptor();
template<typename T>
inline const std::string& CatalogCacheStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CatalogCacheStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CatalogCacheStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CatalogCacheStatus_descriptor(), enum_t_value);
}
inline bool CatalogCacheStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CatalogCacheStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CatalogCacheStatus>(
    CatalogCacheStatus_descriptor(), name, value);
}
// ===================================================================

class CatalogArtifactTag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.CatalogArtifactTag) */ {
 public:
  inline CatalogArtifactTag() : CatalogArtifactTag(nullptr) {}
  ~CatalogArtifactTag() override;
  explicit constexpr CatalogArtifactTag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CatalogArtifactTag(const CatalogArtifactTag& from);
  CatalogArtifactTag(CatalogArtifactTag&& from) noexcept
    : CatalogArtifactTag() {
    *this = ::std::move(from);
  }

  inline CatalogArtifactTag& operator=(const CatalogArtifactTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline CatalogArtifactTag& operator=(CatalogArtifactTag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CatalogArtifactTag& default_instance() {
    return *internal_default_instance();
  }
  static inline const CatalogArtifactTag* internal_default_instance() {
    return reinterpret_cast<const CatalogArtifactTag*>(
               &_CatalogArtifactTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CatalogArtifactTag& a, CatalogArtifactTag& b) {
    a.Swap(&b);
  }
  inline void Swap(CatalogArtifactTag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CatalogArtifactTag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CatalogArtifactTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CatalogArtifactTag>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CatalogArtifactTag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.CatalogArtifactTag";
  }
  protected:
  explicit CatalogArtifactTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArtifactIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string artifact_id = 1 [json_name = "artifactId"];
  void clear_artifact_id();
  const std::string& artifact_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_artifact_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_artifact_id();
  PROTOBUF_NODISCARD std::string* release_artifact_id();
  void set_allocated_artifact_id(std::string* artifact_id);
  private:
  const std::string& _internal_artifact_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_artifact_id(const std::string& value);
  std::string* _internal_mutable_artifact_id();
  public:

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.core.CatalogArtifactTag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr artifact_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fcatalog_2eproto;
};
// -------------------------------------------------------------------

class CatalogMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.CatalogMetadata) */ {
 public:
  inline CatalogMetadata() : CatalogMetadata(nullptr) {}
  ~CatalogMetadata() override;
  explicit constexpr CatalogMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CatalogMetadata(const CatalogMetadata& from);
  CatalogMetadata(CatalogMetadata&& from) noexcept
    : CatalogMetadata() {
    *this = ::std::move(from);
  }

  inline CatalogMetadata& operator=(const CatalogMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CatalogMetadata& operator=(CatalogMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CatalogMetadata& default_instance() {
    return *internal_default_instance();
  }
  enum SourceExecutionCase {
    kSourceTaskExecution = 3,
    SOURCE_EXECUTION_NOT_SET = 0,
  };

  static inline const CatalogMetadata* internal_default_instance() {
    return reinterpret_cast<const CatalogMetadata*>(
               &_CatalogMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CatalogMetadata& a, CatalogMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CatalogMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CatalogMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CatalogMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CatalogMetadata>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CatalogMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.CatalogMetadata";
  }
  protected:
  explicit CatalogMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetIdFieldNumber = 1,
    kArtifactTagFieldNumber = 2,
    kSourceTaskExecutionFieldNumber = 3,
  };
  // .flyteidl.core.Identifier dataset_id = 1 [json_name = "datasetId"];
  bool has_dataset_id() const;
  private:
  bool _internal_has_dataset_id() const;
  public:
  void clear_dataset_id();
  const ::flyteidl::core::Identifier& dataset_id() const;
  PROTOBUF_NODISCARD ::flyteidl::core::Identifier* release_dataset_id();
  ::flyteidl::core::Identifier* mutable_dataset_id();
  void set_allocated_dataset_id(::flyteidl::core::Identifier* dataset_id);
  private:
  const ::flyteidl::core::Identifier& _internal_dataset_id() const;
  ::flyteidl::core::Identifier* _internal_mutable_dataset_id();
  public:
  void unsafe_arena_set_allocated_dataset_id(
      ::flyteidl::core::Identifier* dataset_id);
  ::flyteidl::core::Identifier* unsafe_arena_release_dataset_id();

  // .flyteidl.core.CatalogArtifactTag artifact_tag = 2 [json_name = "artifactTag"];
  bool has_artifact_tag() const;
  private:
  bool _internal_has_artifact_tag() const;
  public:
  void clear_artifact_tag();
  const ::flyteidl::core::CatalogArtifactTag& artifact_tag() const;
  PROTOBUF_NODISCARD ::flyteidl::core::CatalogArtifactTag* release_artifact_tag();
  ::flyteidl::core::CatalogArtifactTag* mutable_artifact_tag();
  void set_allocated_artifact_tag(::flyteidl::core::CatalogArtifactTag* artifact_tag);
  private:
  const ::flyteidl::core::CatalogArtifactTag& _internal_artifact_tag() const;
  ::flyteidl::core::CatalogArtifactTag* _internal_mutable_artifact_tag();
  public:
  void unsafe_arena_set_allocated_artifact_tag(
      ::flyteidl::core::CatalogArtifactTag* artifact_tag);
  ::flyteidl::core::CatalogArtifactTag* unsafe_arena_release_artifact_tag();

  // .flyteidl.core.TaskExecutionIdentifier source_task_execution = 3 [json_name = "sourceTaskExecution"];
  bool has_source_task_execution() const;
  private:
  bool _internal_has_source_task_execution() const;
  public:
  void clear_source_task_execution();
  const ::flyteidl::core::TaskExecutionIdentifier& source_task_execution() const;
  PROTOBUF_NODISCARD ::flyteidl::core::TaskExecutionIdentifier* release_source_task_execution();
  ::flyteidl::core::TaskExecutionIdentifier* mutable_source_task_execution();
  void set_allocated_source_task_execution(::flyteidl::core::TaskExecutionIdentifier* source_task_execution);
  private:
  const ::flyteidl::core::TaskExecutionIdentifier& _internal_source_task_execution() const;
  ::flyteidl::core::TaskExecutionIdentifier* _internal_mutable_source_task_execution();
  public:
  void unsafe_arena_set_allocated_source_task_execution(
      ::flyteidl::core::TaskExecutionIdentifier* source_task_execution);
  ::flyteidl::core::TaskExecutionIdentifier* unsafe_arena_release_source_task_execution();

  void clear_source_execution();
  SourceExecutionCase source_execution_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.core.CatalogMetadata)
 private:
  class _Internal;
  void set_has_source_task_execution();

  inline bool has_source_execution() const;
  inline void clear_has_source_execution();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::Identifier* dataset_id_;
  ::flyteidl::core::CatalogArtifactTag* artifact_tag_;
  union SourceExecutionUnion {
    constexpr SourceExecutionUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::flyteidl::core::TaskExecutionIdentifier* source_task_execution_;
  } source_execution_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fcore_2fcatalog_2eproto;
};
// -------------------------------------------------------------------

class CatalogReservation final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:flyteidl.core.CatalogReservation) */ {
 public:
  inline CatalogReservation() : CatalogReservation(nullptr) {}
  explicit constexpr CatalogReservation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CatalogReservation(const CatalogReservation& from);
  CatalogReservation(CatalogReservation&& from) noexcept
    : CatalogReservation() {
    *this = ::std::move(from);
  }

  inline CatalogReservation& operator=(const CatalogReservation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CatalogReservation& operator=(CatalogReservation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CatalogReservation& default_instance() {
    return *internal_default_instance();
  }
  static inline const CatalogReservation* internal_default_instance() {
    return reinterpret_cast<const CatalogReservation*>(
               &_CatalogReservation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CatalogReservation& a, CatalogReservation& b) {
    a.Swap(&b);
  }
  inline void Swap(CatalogReservation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CatalogReservation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CatalogReservation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CatalogReservation>(arena);
  }

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.CatalogReservation";
  }
  protected:
  explicit CatalogReservation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CatalogReservation_Status Status;
  static constexpr Status RESERVATION_DISABLED =
    CatalogReservation_Status_RESERVATION_DISABLED;
  static constexpr Status RESERVATION_ACQUIRED =
    CatalogReservation_Status_RESERVATION_ACQUIRED;
  static constexpr Status RESERVATION_EXISTS =
    CatalogReservation_Status_RESERVATION_EXISTS;
  static constexpr Status RESERVATION_RELEASED =
    CatalogReservation_Status_RESERVATION_RELEASED;
  static constexpr Status RESERVATION_FAILURE =
    CatalogReservation_Status_RESERVATION_FAILURE;
  static inline bool Status_IsValid(int value) {
    return CatalogReservation_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    CatalogReservation_Status_Status_MIN;
  static constexpr Status Status_MAX =
    CatalogReservation_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    CatalogReservation_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return CatalogReservation_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return CatalogReservation_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return CatalogReservation_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.core.CatalogReservation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fcatalog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CatalogArtifactTag

// string artifact_id = 1 [json_name = "artifactId"];
inline void CatalogArtifactTag::clear_artifact_id() {
  artifact_id_.ClearToEmpty();
}
inline const std::string& CatalogArtifactTag::artifact_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.CatalogArtifactTag.artifact_id)
  return _internal_artifact_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CatalogArtifactTag::set_artifact_id(ArgT0&& arg0, ArgT... args) {
 
 artifact_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.core.CatalogArtifactTag.artifact_id)
}
inline std::string* CatalogArtifactTag::mutable_artifact_id() {
  std::string* _s = _internal_mutable_artifact_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.CatalogArtifactTag.artifact_id)
  return _s;
}
inline const std::string& CatalogArtifactTag::_internal_artifact_id() const {
  return artifact_id_.Get();
}
inline void CatalogArtifactTag::_internal_set_artifact_id(const std::string& value) {
  
  artifact_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CatalogArtifactTag::_internal_mutable_artifact_id() {
  
  return artifact_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CatalogArtifactTag::release_artifact_id() {
  // @@protoc_insertion_point(field_release:flyteidl.core.CatalogArtifactTag.artifact_id)
  return artifact_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CatalogArtifactTag::set_allocated_artifact_id(std::string* artifact_id) {
  if (artifact_id != nullptr) {
    
  } else {
    
  }
  artifact_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), artifact_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (artifact_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    artifact_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.CatalogArtifactTag.artifact_id)
}

// string name = 2 [json_name = "name"];
inline void CatalogArtifactTag::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CatalogArtifactTag::name() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.CatalogArtifactTag.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CatalogArtifactTag::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.core.CatalogArtifactTag.name)
}
inline std::string* CatalogArtifactTag::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.CatalogArtifactTag.name)
  return _s;
}
inline const std::string& CatalogArtifactTag::_internal_name() const {
  return name_.Get();
}
inline void CatalogArtifactTag::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CatalogArtifactTag::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CatalogArtifactTag::release_name() {
  // @@protoc_insertion_point(field_release:flyteidl.core.CatalogArtifactTag.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CatalogArtifactTag::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.CatalogArtifactTag.name)
}

// -------------------------------------------------------------------

// CatalogMetadata

// .flyteidl.core.Identifier dataset_id = 1 [json_name = "datasetId"];
inline bool CatalogMetadata::_internal_has_dataset_id() const {
  return this != internal_default_instance() && dataset_id_ != nullptr;
}
inline bool CatalogMetadata::has_dataset_id() const {
  return _internal_has_dataset_id();
}
inline const ::flyteidl::core::Identifier& CatalogMetadata::_internal_dataset_id() const {
  const ::flyteidl::core::Identifier* p = dataset_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::Identifier&>(
      ::flyteidl::core::_Identifier_default_instance_);
}
inline const ::flyteidl::core::Identifier& CatalogMetadata::dataset_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.CatalogMetadata.dataset_id)
  return _internal_dataset_id();
}
inline void CatalogMetadata::unsafe_arena_set_allocated_dataset_id(
    ::flyteidl::core::Identifier* dataset_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dataset_id_);
  }
  dataset_id_ = dataset_id;
  if (dataset_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.CatalogMetadata.dataset_id)
}
inline ::flyteidl::core::Identifier* CatalogMetadata::release_dataset_id() {
  
  ::flyteidl::core::Identifier* temp = dataset_id_;
  dataset_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::Identifier* CatalogMetadata::unsafe_arena_release_dataset_id() {
  // @@protoc_insertion_point(field_release:flyteidl.core.CatalogMetadata.dataset_id)
  
  ::flyteidl::core::Identifier* temp = dataset_id_;
  dataset_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identifier* CatalogMetadata::_internal_mutable_dataset_id() {
  
  if (dataset_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identifier>(GetArenaForAllocation());
    dataset_id_ = p;
  }
  return dataset_id_;
}
inline ::flyteidl::core::Identifier* CatalogMetadata::mutable_dataset_id() {
  ::flyteidl::core::Identifier* _msg = _internal_mutable_dataset_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.CatalogMetadata.dataset_id)
  return _msg;
}
inline void CatalogMetadata::set_allocated_dataset_id(::flyteidl::core::Identifier* dataset_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dataset_id_);
  }
  if (dataset_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dataset_id));
    if (message_arena != submessage_arena) {
      dataset_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dataset_id, submessage_arena);
    }
    
  } else {
    
  }
  dataset_id_ = dataset_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.CatalogMetadata.dataset_id)
}

// .flyteidl.core.CatalogArtifactTag artifact_tag = 2 [json_name = "artifactTag"];
inline bool CatalogMetadata::_internal_has_artifact_tag() const {
  return this != internal_default_instance() && artifact_tag_ != nullptr;
}
inline bool CatalogMetadata::has_artifact_tag() const {
  return _internal_has_artifact_tag();
}
inline void CatalogMetadata::clear_artifact_tag() {
  if (GetArenaForAllocation() == nullptr && artifact_tag_ != nullptr) {
    delete artifact_tag_;
  }
  artifact_tag_ = nullptr;
}
inline const ::flyteidl::core::CatalogArtifactTag& CatalogMetadata::_internal_artifact_tag() const {
  const ::flyteidl::core::CatalogArtifactTag* p = artifact_tag_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::CatalogArtifactTag&>(
      ::flyteidl::core::_CatalogArtifactTag_default_instance_);
}
inline const ::flyteidl::core::CatalogArtifactTag& CatalogMetadata::artifact_tag() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.CatalogMetadata.artifact_tag)
  return _internal_artifact_tag();
}
inline void CatalogMetadata::unsafe_arena_set_allocated_artifact_tag(
    ::flyteidl::core::CatalogArtifactTag* artifact_tag) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(artifact_tag_);
  }
  artifact_tag_ = artifact_tag;
  if (artifact_tag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.CatalogMetadata.artifact_tag)
}
inline ::flyteidl::core::CatalogArtifactTag* CatalogMetadata::release_artifact_tag() {
  
  ::flyteidl::core::CatalogArtifactTag* temp = artifact_tag_;
  artifact_tag_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::CatalogArtifactTag* CatalogMetadata::unsafe_arena_release_artifact_tag() {
  // @@protoc_insertion_point(field_release:flyteidl.core.CatalogMetadata.artifact_tag)
  
  ::flyteidl::core::CatalogArtifactTag* temp = artifact_tag_;
  artifact_tag_ = nullptr;
  return temp;
}
inline ::flyteidl::core::CatalogArtifactTag* CatalogMetadata::_internal_mutable_artifact_tag() {
  
  if (artifact_tag_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::CatalogArtifactTag>(GetArenaForAllocation());
    artifact_tag_ = p;
  }
  return artifact_tag_;
}
inline ::flyteidl::core::CatalogArtifactTag* CatalogMetadata::mutable_artifact_tag() {
  ::flyteidl::core::CatalogArtifactTag* _msg = _internal_mutable_artifact_tag();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.CatalogMetadata.artifact_tag)
  return _msg;
}
inline void CatalogMetadata::set_allocated_artifact_tag(::flyteidl::core::CatalogArtifactTag* artifact_tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete artifact_tag_;
  }
  if (artifact_tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::CatalogArtifactTag>::GetOwningArena(artifact_tag);
    if (message_arena != submessage_arena) {
      artifact_tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, artifact_tag, submessage_arena);
    }
    
  } else {
    
  }
  artifact_tag_ = artifact_tag;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.CatalogMetadata.artifact_tag)
}

// .flyteidl.core.TaskExecutionIdentifier source_task_execution = 3 [json_name = "sourceTaskExecution"];
inline bool CatalogMetadata::_internal_has_source_task_execution() const {
  return source_execution_case() == kSourceTaskExecution;
}
inline bool CatalogMetadata::has_source_task_execution() const {
  return _internal_has_source_task_execution();
}
inline void CatalogMetadata::set_has_source_task_execution() {
  _oneof_case_[0] = kSourceTaskExecution;
}
inline ::flyteidl::core::TaskExecutionIdentifier* CatalogMetadata::release_source_task_execution() {
  // @@protoc_insertion_point(field_release:flyteidl.core.CatalogMetadata.source_task_execution)
  if (_internal_has_source_task_execution()) {
    clear_has_source_execution();
      ::flyteidl::core::TaskExecutionIdentifier* temp = source_execution_.source_task_execution_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    source_execution_.source_task_execution_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::TaskExecutionIdentifier& CatalogMetadata::_internal_source_task_execution() const {
  return _internal_has_source_task_execution()
      ? *source_execution_.source_task_execution_
      : reinterpret_cast< ::flyteidl::core::TaskExecutionIdentifier&>(::flyteidl::core::_TaskExecutionIdentifier_default_instance_);
}
inline const ::flyteidl::core::TaskExecutionIdentifier& CatalogMetadata::source_task_execution() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.CatalogMetadata.source_task_execution)
  return _internal_source_task_execution();
}
inline ::flyteidl::core::TaskExecutionIdentifier* CatalogMetadata::unsafe_arena_release_source_task_execution() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.core.CatalogMetadata.source_task_execution)
  if (_internal_has_source_task_execution()) {
    clear_has_source_execution();
    ::flyteidl::core::TaskExecutionIdentifier* temp = source_execution_.source_task_execution_;
    source_execution_.source_task_execution_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CatalogMetadata::unsafe_arena_set_allocated_source_task_execution(::flyteidl::core::TaskExecutionIdentifier* source_task_execution) {
  clear_source_execution();
  if (source_task_execution) {
    set_has_source_task_execution();
    source_execution_.source_task_execution_ = source_task_execution;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.CatalogMetadata.source_task_execution)
}
inline ::flyteidl::core::TaskExecutionIdentifier* CatalogMetadata::_internal_mutable_source_task_execution() {
  if (!_internal_has_source_task_execution()) {
    clear_source_execution();
    set_has_source_task_execution();
    source_execution_.source_task_execution_ = CreateMaybeMessage< ::flyteidl::core::TaskExecutionIdentifier >(GetArenaForAllocation());
  }
  return source_execution_.source_task_execution_;
}
inline ::flyteidl::core::TaskExecutionIdentifier* CatalogMetadata::mutable_source_task_execution() {
  ::flyteidl::core::TaskExecutionIdentifier* _msg = _internal_mutable_source_task_execution();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.CatalogMetadata.source_task_execution)
  return _msg;
}

inline bool CatalogMetadata::has_source_execution() const {
  return source_execution_case() != SOURCE_EXECUTION_NOT_SET;
}
inline void CatalogMetadata::clear_has_source_execution() {
  _oneof_case_[0] = SOURCE_EXECUTION_NOT_SET;
}
inline CatalogMetadata::SourceExecutionCase CatalogMetadata::source_execution_case() const {
  return CatalogMetadata::SourceExecutionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CatalogReservation

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace flyteidl

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::flyteidl::core::CatalogReservation_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::core::CatalogReservation_Status>() {
  return ::flyteidl::core::CatalogReservation_Status_descriptor();
}
template <> struct is_proto_enum< ::flyteidl::core::CatalogCacheStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::core::CatalogCacheStatus>() {
  return ::flyteidl::core::CatalogCacheStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fcore_2fcatalog_2eproto
