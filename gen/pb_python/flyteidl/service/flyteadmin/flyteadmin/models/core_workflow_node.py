# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyteadmin.models.core_identifier import CoreIdentifier  # noqa: F401,E501


class CoreWorkflowNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'launchplan_ref': 'CoreIdentifier',
        'sub_workflow_ref': 'CoreIdentifier'
    }

    attribute_map = {
        'launchplan_ref': 'launchplan_ref',
        'sub_workflow_ref': 'sub_workflow_ref'
    }

    def __init__(self, launchplan_ref=None, sub_workflow_ref=None):  # noqa: E501
        """CoreWorkflowNode - a model defined in Swagger"""  # noqa: E501

        self._launchplan_ref = None
        self._sub_workflow_ref = None
        self.discriminator = None

        if launchplan_ref is not None:
            self.launchplan_ref = launchplan_ref
        if sub_workflow_ref is not None:
            self.sub_workflow_ref = sub_workflow_ref

    @property
    def launchplan_ref(self):
        """Gets the launchplan_ref of this CoreWorkflowNode.  # noqa: E501

        A globally unique identifier for the launch plan.  # noqa: E501

        :return: The launchplan_ref of this CoreWorkflowNode.  # noqa: E501
        :rtype: CoreIdentifier
        """
        return self._launchplan_ref

    @launchplan_ref.setter
    def launchplan_ref(self, launchplan_ref):
        """Sets the launchplan_ref of this CoreWorkflowNode.

        A globally unique identifier for the launch plan.  # noqa: E501

        :param launchplan_ref: The launchplan_ref of this CoreWorkflowNode.  # noqa: E501
        :type: CoreIdentifier
        """

        self._launchplan_ref = launchplan_ref

    @property
    def sub_workflow_ref(self):
        """Gets the sub_workflow_ref of this CoreWorkflowNode.  # noqa: E501


        :return: The sub_workflow_ref of this CoreWorkflowNode.  # noqa: E501
        :rtype: CoreIdentifier
        """
        return self._sub_workflow_ref

    @sub_workflow_ref.setter
    def sub_workflow_ref(self, sub_workflow_ref):
        """Sets the sub_workflow_ref of this CoreWorkflowNode.


        :param sub_workflow_ref: The sub_workflow_ref of this CoreWorkflowNode.  # noqa: E501
        :type: CoreIdentifier
        """

        self._sub_workflow_ref = sub_workflow_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoreWorkflowNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreWorkflowNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
