// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	oauth2 "golang.org/x/oauth2"

	service "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/service"
)

// FetchTokenOrchestrator is an autogenerated mock type for the FetchTokenOrchestrator type
type FetchTokenOrchestrator struct {
	mock.Mock
}

type FetchTokenOrchestrator_FetchTokenFromAuthFlow struct {
	*mock.Call
}

func (_m FetchTokenOrchestrator_FetchTokenFromAuthFlow) Return(_a0 *oauth2.Token, _a1 error) *FetchTokenOrchestrator_FetchTokenFromAuthFlow {
	return &FetchTokenOrchestrator_FetchTokenFromAuthFlow{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *FetchTokenOrchestrator) OnFetchTokenFromAuthFlow(ctx context.Context, authMetadataClient service.AuthMetadataServiceClient) *FetchTokenOrchestrator_FetchTokenFromAuthFlow {
	c := _m.On("FetchTokenFromAuthFlow", ctx, authMetadataClient)
	return &FetchTokenOrchestrator_FetchTokenFromAuthFlow{Call: c}
}

func (_m *FetchTokenOrchestrator) OnFetchTokenFromAuthFlowMatch(matchers ...interface{}) *FetchTokenOrchestrator_FetchTokenFromAuthFlow {
	c := _m.On("FetchTokenFromAuthFlow", matchers...)
	return &FetchTokenOrchestrator_FetchTokenFromAuthFlow{Call: c}
}

// FetchTokenFromAuthFlow provides a mock function with given fields: ctx, authMetadataClient
func (_m *FetchTokenOrchestrator) FetchTokenFromAuthFlow(ctx context.Context, authMetadataClient service.AuthMetadataServiceClient) (*oauth2.Token, error) {
	ret := _m.Called(ctx, authMetadataClient)

	var r0 *oauth2.Token
	if rf, ok := ret.Get(0).(func(context.Context, service.AuthMetadataServiceClient) *oauth2.Token); ok {
		r0 = rf(ctx, authMetadataClient)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, service.AuthMetadataServiceClient) error); ok {
		r1 = rf(ctx, authMetadataClient)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type FetchTokenOrchestrator_FetchTokenFromCacheOrRefreshIt struct {
	*mock.Call
}

func (_m FetchTokenOrchestrator_FetchTokenFromCacheOrRefreshIt) Return(_a0 *oauth2.Token, _a1 error) *FetchTokenOrchestrator_FetchTokenFromCacheOrRefreshIt {
	return &FetchTokenOrchestrator_FetchTokenFromCacheOrRefreshIt{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *FetchTokenOrchestrator) OnFetchTokenFromCacheOrRefreshIt(ctx context.Context) *FetchTokenOrchestrator_FetchTokenFromCacheOrRefreshIt {
	c := _m.On("FetchTokenFromCacheOrRefreshIt", ctx)
	return &FetchTokenOrchestrator_FetchTokenFromCacheOrRefreshIt{Call: c}
}

func (_m *FetchTokenOrchestrator) OnFetchTokenFromCacheOrRefreshItMatch(matchers ...interface{}) *FetchTokenOrchestrator_FetchTokenFromCacheOrRefreshIt {
	c := _m.On("FetchTokenFromCacheOrRefreshIt", matchers...)
	return &FetchTokenOrchestrator_FetchTokenFromCacheOrRefreshIt{Call: c}
}

// FetchTokenFromCacheOrRefreshIt provides a mock function with given fields: ctx
func (_m *FetchTokenOrchestrator) FetchTokenFromCacheOrRefreshIt(ctx context.Context) (*oauth2.Token, error) {
	ret := _m.Called(ctx)

	var r0 *oauth2.Token
	if rf, ok := ret.Get(0).(func(context.Context) *oauth2.Token); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type FetchTokenOrchestrator_RefreshTheToken struct {
	*mock.Call
}

func (_m FetchTokenOrchestrator_RefreshTheToken) Return(_a0 *oauth2.Token, _a1 error) *FetchTokenOrchestrator_RefreshTheToken {
	return &FetchTokenOrchestrator_RefreshTheToken{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *FetchTokenOrchestrator) OnRefreshTheToken(ctx context.Context, clientConf *oauth2.Config, token *oauth2.Token) *FetchTokenOrchestrator_RefreshTheToken {
	c := _m.On("RefreshTheToken", ctx, clientConf, token)
	return &FetchTokenOrchestrator_RefreshTheToken{Call: c}
}

func (_m *FetchTokenOrchestrator) OnRefreshTheTokenMatch(matchers ...interface{}) *FetchTokenOrchestrator_RefreshTheToken {
	c := _m.On("RefreshTheToken", matchers...)
	return &FetchTokenOrchestrator_RefreshTheToken{Call: c}
}

// RefreshTheToken provides a mock function with given fields: ctx, clientConf, token
func (_m *FetchTokenOrchestrator) RefreshTheToken(ctx context.Context, clientConf *oauth2.Config, token *oauth2.Token) (*oauth2.Token, error) {
	ret := _m.Called(ctx, clientConf, token)

	var r0 *oauth2.Token
	if rf, ok := ret.Get(0).(func(context.Context, *oauth2.Config, *oauth2.Token) *oauth2.Token); ok {
		r0 = rf(ctx, clientConf, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *oauth2.Config, *oauth2.Token) error); ok {
		r1 = rf(ctx, clientConf, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
