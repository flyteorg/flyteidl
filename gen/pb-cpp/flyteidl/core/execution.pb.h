// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/execution.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fcore_2fexecution_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fcore_2fexecution_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fexecution_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fcore_2fexecution_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fcore_2fexecution_2eproto();
namespace flyteidl {
namespace core {
class ExecutionError;
class ExecutionErrorDefaultTypeInternal;
extern ExecutionErrorDefaultTypeInternal _ExecutionError_default_instance_;
class NodeExecution;
class NodeExecutionDefaultTypeInternal;
extern NodeExecutionDefaultTypeInternal _NodeExecution_default_instance_;
class QualityOfService;
class QualityOfServiceDefaultTypeInternal;
extern QualityOfServiceDefaultTypeInternal _QualityOfService_default_instance_;
class QualityOfServiceSpec;
class QualityOfServiceSpecDefaultTypeInternal;
extern QualityOfServiceSpecDefaultTypeInternal _QualityOfServiceSpec_default_instance_;
class TaskExecution;
class TaskExecutionDefaultTypeInternal;
extern TaskExecutionDefaultTypeInternal _TaskExecution_default_instance_;
class TaskLog;
class TaskLogDefaultTypeInternal;
extern TaskLogDefaultTypeInternal _TaskLog_default_instance_;
class WorkflowExecution;
class WorkflowExecutionDefaultTypeInternal;
extern WorkflowExecutionDefaultTypeInternal _WorkflowExecution_default_instance_;
}  // namespace core
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::core::ExecutionError* Arena::CreateMaybeMessage<::flyteidl::core::ExecutionError>(Arena*);
template<> ::flyteidl::core::NodeExecution* Arena::CreateMaybeMessage<::flyteidl::core::NodeExecution>(Arena*);
template<> ::flyteidl::core::QualityOfService* Arena::CreateMaybeMessage<::flyteidl::core::QualityOfService>(Arena*);
template<> ::flyteidl::core::QualityOfServiceSpec* Arena::CreateMaybeMessage<::flyteidl::core::QualityOfServiceSpec>(Arena*);
template<> ::flyteidl::core::TaskExecution* Arena::CreateMaybeMessage<::flyteidl::core::TaskExecution>(Arena*);
template<> ::flyteidl::core::TaskLog* Arena::CreateMaybeMessage<::flyteidl::core::TaskLog>(Arena*);
template<> ::flyteidl::core::WorkflowExecution* Arena::CreateMaybeMessage<::flyteidl::core::WorkflowExecution>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace core {

enum WorkflowExecution_Phase {
  WorkflowExecution_Phase_UNDEFINED = 0,
  WorkflowExecution_Phase_QUEUED = 1,
  WorkflowExecution_Phase_RUNNING = 2,
  WorkflowExecution_Phase_SUCCEEDING = 3,
  WorkflowExecution_Phase_SUCCEEDED = 4,
  WorkflowExecution_Phase_FAILING = 5,
  WorkflowExecution_Phase_FAILED = 6,
  WorkflowExecution_Phase_ABORTED = 7,
  WorkflowExecution_Phase_TIMED_OUT = 8,
  WorkflowExecution_Phase_ABORTING = 9,
  WorkflowExecution_Phase_WorkflowExecution_Phase_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  WorkflowExecution_Phase_WorkflowExecution_Phase_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool WorkflowExecution_Phase_IsValid(int value);
const WorkflowExecution_Phase WorkflowExecution_Phase_Phase_MIN = WorkflowExecution_Phase_UNDEFINED;
const WorkflowExecution_Phase WorkflowExecution_Phase_Phase_MAX = WorkflowExecution_Phase_ABORTING;
const int WorkflowExecution_Phase_Phase_ARRAYSIZE = WorkflowExecution_Phase_Phase_MAX + 1;

const ::google::protobuf::EnumDescriptor* WorkflowExecution_Phase_descriptor();
inline const ::std::string& WorkflowExecution_Phase_Name(WorkflowExecution_Phase value) {
  return ::google::protobuf::internal::NameOfEnum(
    WorkflowExecution_Phase_descriptor(), value);
}
inline bool WorkflowExecution_Phase_Parse(
    const ::std::string& name, WorkflowExecution_Phase* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WorkflowExecution_Phase>(
    WorkflowExecution_Phase_descriptor(), name, value);
}
enum NodeExecution_Phase {
  NodeExecution_Phase_UNDEFINED = 0,
  NodeExecution_Phase_QUEUED = 1,
  NodeExecution_Phase_RUNNING = 2,
  NodeExecution_Phase_SUCCEEDED = 3,
  NodeExecution_Phase_FAILING = 4,
  NodeExecution_Phase_FAILED = 5,
  NodeExecution_Phase_ABORTED = 6,
  NodeExecution_Phase_SKIPPED = 7,
  NodeExecution_Phase_TIMED_OUT = 8,
  NodeExecution_Phase_DYNAMIC_RUNNING = 9,
  NodeExecution_Phase_RECOVERED = 10,
  NodeExecution_Phase_NodeExecution_Phase_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  NodeExecution_Phase_NodeExecution_Phase_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool NodeExecution_Phase_IsValid(int value);
const NodeExecution_Phase NodeExecution_Phase_Phase_MIN = NodeExecution_Phase_UNDEFINED;
const NodeExecution_Phase NodeExecution_Phase_Phase_MAX = NodeExecution_Phase_RECOVERED;
const int NodeExecution_Phase_Phase_ARRAYSIZE = NodeExecution_Phase_Phase_MAX + 1;

const ::google::protobuf::EnumDescriptor* NodeExecution_Phase_descriptor();
inline const ::std::string& NodeExecution_Phase_Name(NodeExecution_Phase value) {
  return ::google::protobuf::internal::NameOfEnum(
    NodeExecution_Phase_descriptor(), value);
}
inline bool NodeExecution_Phase_Parse(
    const ::std::string& name, NodeExecution_Phase* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NodeExecution_Phase>(
    NodeExecution_Phase_descriptor(), name, value);
}
enum TaskExecution_Phase {
  TaskExecution_Phase_UNDEFINED = 0,
  TaskExecution_Phase_QUEUED = 1,
  TaskExecution_Phase_RUNNING = 2,
  TaskExecution_Phase_SUCCEEDED = 3,
  TaskExecution_Phase_ABORTED = 4,
  TaskExecution_Phase_FAILED = 5,
  TaskExecution_Phase_INITIALIZING = 6,
  TaskExecution_Phase_WAITING_FOR_RESOURCES = 7,
  TaskExecution_Phase_TaskExecution_Phase_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  TaskExecution_Phase_TaskExecution_Phase_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool TaskExecution_Phase_IsValid(int value);
const TaskExecution_Phase TaskExecution_Phase_Phase_MIN = TaskExecution_Phase_UNDEFINED;
const TaskExecution_Phase TaskExecution_Phase_Phase_MAX = TaskExecution_Phase_WAITING_FOR_RESOURCES;
const int TaskExecution_Phase_Phase_ARRAYSIZE = TaskExecution_Phase_Phase_MAX + 1;

const ::google::protobuf::EnumDescriptor* TaskExecution_Phase_descriptor();
inline const ::std::string& TaskExecution_Phase_Name(TaskExecution_Phase value) {
  return ::google::protobuf::internal::NameOfEnum(
    TaskExecution_Phase_descriptor(), value);
}
inline bool TaskExecution_Phase_Parse(
    const ::std::string& name, TaskExecution_Phase* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskExecution_Phase>(
    TaskExecution_Phase_descriptor(), name, value);
}
enum ExecutionError_ErrorKind {
  ExecutionError_ErrorKind_UNKNOWN = 0,
  ExecutionError_ErrorKind_USER = 1,
  ExecutionError_ErrorKind_SYSTEM = 2,
  ExecutionError_ErrorKind_ExecutionError_ErrorKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ExecutionError_ErrorKind_ExecutionError_ErrorKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ExecutionError_ErrorKind_IsValid(int value);
const ExecutionError_ErrorKind ExecutionError_ErrorKind_ErrorKind_MIN = ExecutionError_ErrorKind_UNKNOWN;
const ExecutionError_ErrorKind ExecutionError_ErrorKind_ErrorKind_MAX = ExecutionError_ErrorKind_SYSTEM;
const int ExecutionError_ErrorKind_ErrorKind_ARRAYSIZE = ExecutionError_ErrorKind_ErrorKind_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExecutionError_ErrorKind_descriptor();
inline const ::std::string& ExecutionError_ErrorKind_Name(ExecutionError_ErrorKind value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExecutionError_ErrorKind_descriptor(), value);
}
inline bool ExecutionError_ErrorKind_Parse(
    const ::std::string& name, ExecutionError_ErrorKind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExecutionError_ErrorKind>(
    ExecutionError_ErrorKind_descriptor(), name, value);
}
enum TaskLog_MessageFormat {
  TaskLog_MessageFormat_UNKNOWN = 0,
  TaskLog_MessageFormat_CSV = 1,
  TaskLog_MessageFormat_JSON = 2,
  TaskLog_MessageFormat_TaskLog_MessageFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  TaskLog_MessageFormat_TaskLog_MessageFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool TaskLog_MessageFormat_IsValid(int value);
const TaskLog_MessageFormat TaskLog_MessageFormat_MessageFormat_MIN = TaskLog_MessageFormat_UNKNOWN;
const TaskLog_MessageFormat TaskLog_MessageFormat_MessageFormat_MAX = TaskLog_MessageFormat_JSON;
const int TaskLog_MessageFormat_MessageFormat_ARRAYSIZE = TaskLog_MessageFormat_MessageFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* TaskLog_MessageFormat_descriptor();
inline const ::std::string& TaskLog_MessageFormat_Name(TaskLog_MessageFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    TaskLog_MessageFormat_descriptor(), value);
}
inline bool TaskLog_MessageFormat_Parse(
    const ::std::string& name, TaskLog_MessageFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskLog_MessageFormat>(
    TaskLog_MessageFormat_descriptor(), name, value);
}
enum QualityOfService_Tier {
  QualityOfService_Tier_UNDEFINED = 0,
  QualityOfService_Tier_HIGH = 1,
  QualityOfService_Tier_MEDIUM = 2,
  QualityOfService_Tier_LOW = 3,
  QualityOfService_Tier_QualityOfService_Tier_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  QualityOfService_Tier_QualityOfService_Tier_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool QualityOfService_Tier_IsValid(int value);
const QualityOfService_Tier QualityOfService_Tier_Tier_MIN = QualityOfService_Tier_UNDEFINED;
const QualityOfService_Tier QualityOfService_Tier_Tier_MAX = QualityOfService_Tier_LOW;
const int QualityOfService_Tier_Tier_ARRAYSIZE = QualityOfService_Tier_Tier_MAX + 1;

const ::google::protobuf::EnumDescriptor* QualityOfService_Tier_descriptor();
inline const ::std::string& QualityOfService_Tier_Name(QualityOfService_Tier value) {
  return ::google::protobuf::internal::NameOfEnum(
    QualityOfService_Tier_descriptor(), value);
}
inline bool QualityOfService_Tier_Parse(
    const ::std::string& name, QualityOfService_Tier* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QualityOfService_Tier>(
    QualityOfService_Tier_descriptor(), name, value);
}
// ===================================================================

class WorkflowExecution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.WorkflowExecution) */ {
 public:
  WorkflowExecution();
  virtual ~WorkflowExecution();

  WorkflowExecution(const WorkflowExecution& from);

  inline WorkflowExecution& operator=(const WorkflowExecution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowExecution(WorkflowExecution&& from) noexcept
    : WorkflowExecution() {
    *this = ::std::move(from);
  }

  inline WorkflowExecution& operator=(WorkflowExecution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WorkflowExecution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowExecution* internal_default_instance() {
    return reinterpret_cast<const WorkflowExecution*>(
               &_WorkflowExecution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(WorkflowExecution* other);
  friend void swap(WorkflowExecution& a, WorkflowExecution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowExecution* New() const final {
    return CreateMaybeMessage<WorkflowExecution>(nullptr);
  }

  WorkflowExecution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowExecution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WorkflowExecution& from);
  void MergeFrom(const WorkflowExecution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowExecution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WorkflowExecution_Phase Phase;
  static const Phase UNDEFINED =
    WorkflowExecution_Phase_UNDEFINED;
  static const Phase QUEUED =
    WorkflowExecution_Phase_QUEUED;
  static const Phase RUNNING =
    WorkflowExecution_Phase_RUNNING;
  static const Phase SUCCEEDING =
    WorkflowExecution_Phase_SUCCEEDING;
  static const Phase SUCCEEDED =
    WorkflowExecution_Phase_SUCCEEDED;
  static const Phase FAILING =
    WorkflowExecution_Phase_FAILING;
  static const Phase FAILED =
    WorkflowExecution_Phase_FAILED;
  static const Phase ABORTED =
    WorkflowExecution_Phase_ABORTED;
  static const Phase TIMED_OUT =
    WorkflowExecution_Phase_TIMED_OUT;
  static const Phase ABORTING =
    WorkflowExecution_Phase_ABORTING;
  static inline bool Phase_IsValid(int value) {
    return WorkflowExecution_Phase_IsValid(value);
  }
  static const Phase Phase_MIN =
    WorkflowExecution_Phase_Phase_MIN;
  static const Phase Phase_MAX =
    WorkflowExecution_Phase_Phase_MAX;
  static const int Phase_ARRAYSIZE =
    WorkflowExecution_Phase_Phase_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Phase_descriptor() {
    return WorkflowExecution_Phase_descriptor();
  }
  static inline const ::std::string& Phase_Name(Phase value) {
    return WorkflowExecution_Phase_Name(value);
  }
  static inline bool Phase_Parse(const ::std::string& name,
      Phase* value) {
    return WorkflowExecution_Phase_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.core.WorkflowExecution)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class NodeExecution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.NodeExecution) */ {
 public:
  NodeExecution();
  virtual ~NodeExecution();

  NodeExecution(const NodeExecution& from);

  inline NodeExecution& operator=(const NodeExecution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeExecution(NodeExecution&& from) noexcept
    : NodeExecution() {
    *this = ::std::move(from);
  }

  inline NodeExecution& operator=(NodeExecution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeExecution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeExecution* internal_default_instance() {
    return reinterpret_cast<const NodeExecution*>(
               &_NodeExecution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(NodeExecution* other);
  friend void swap(NodeExecution& a, NodeExecution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeExecution* New() const final {
    return CreateMaybeMessage<NodeExecution>(nullptr);
  }

  NodeExecution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeExecution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeExecution& from);
  void MergeFrom(const NodeExecution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeExecution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NodeExecution_Phase Phase;
  static const Phase UNDEFINED =
    NodeExecution_Phase_UNDEFINED;
  static const Phase QUEUED =
    NodeExecution_Phase_QUEUED;
  static const Phase RUNNING =
    NodeExecution_Phase_RUNNING;
  static const Phase SUCCEEDED =
    NodeExecution_Phase_SUCCEEDED;
  static const Phase FAILING =
    NodeExecution_Phase_FAILING;
  static const Phase FAILED =
    NodeExecution_Phase_FAILED;
  static const Phase ABORTED =
    NodeExecution_Phase_ABORTED;
  static const Phase SKIPPED =
    NodeExecution_Phase_SKIPPED;
  static const Phase TIMED_OUT =
    NodeExecution_Phase_TIMED_OUT;
  static const Phase DYNAMIC_RUNNING =
    NodeExecution_Phase_DYNAMIC_RUNNING;
  static const Phase RECOVERED =
    NodeExecution_Phase_RECOVERED;
  static inline bool Phase_IsValid(int value) {
    return NodeExecution_Phase_IsValid(value);
  }
  static const Phase Phase_MIN =
    NodeExecution_Phase_Phase_MIN;
  static const Phase Phase_MAX =
    NodeExecution_Phase_Phase_MAX;
  static const int Phase_ARRAYSIZE =
    NodeExecution_Phase_Phase_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Phase_descriptor() {
    return NodeExecution_Phase_descriptor();
  }
  static inline const ::std::string& Phase_Name(Phase value) {
    return NodeExecution_Phase_Name(value);
  }
  static inline bool Phase_Parse(const ::std::string& name,
      Phase* value) {
    return NodeExecution_Phase_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.core.NodeExecution)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class TaskExecution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.TaskExecution) */ {
 public:
  TaskExecution();
  virtual ~TaskExecution();

  TaskExecution(const TaskExecution& from);

  inline TaskExecution& operator=(const TaskExecution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskExecution(TaskExecution&& from) noexcept
    : TaskExecution() {
    *this = ::std::move(from);
  }

  inline TaskExecution& operator=(TaskExecution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskExecution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskExecution* internal_default_instance() {
    return reinterpret_cast<const TaskExecution*>(
               &_TaskExecution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TaskExecution* other);
  friend void swap(TaskExecution& a, TaskExecution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskExecution* New() const final {
    return CreateMaybeMessage<TaskExecution>(nullptr);
  }

  TaskExecution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskExecution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskExecution& from);
  void MergeFrom(const TaskExecution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskExecution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TaskExecution_Phase Phase;
  static const Phase UNDEFINED =
    TaskExecution_Phase_UNDEFINED;
  static const Phase QUEUED =
    TaskExecution_Phase_QUEUED;
  static const Phase RUNNING =
    TaskExecution_Phase_RUNNING;
  static const Phase SUCCEEDED =
    TaskExecution_Phase_SUCCEEDED;
  static const Phase ABORTED =
    TaskExecution_Phase_ABORTED;
  static const Phase FAILED =
    TaskExecution_Phase_FAILED;
  static const Phase INITIALIZING =
    TaskExecution_Phase_INITIALIZING;
  static const Phase WAITING_FOR_RESOURCES =
    TaskExecution_Phase_WAITING_FOR_RESOURCES;
  static inline bool Phase_IsValid(int value) {
    return TaskExecution_Phase_IsValid(value);
  }
  static const Phase Phase_MIN =
    TaskExecution_Phase_Phase_MIN;
  static const Phase Phase_MAX =
    TaskExecution_Phase_Phase_MAX;
  static const int Phase_ARRAYSIZE =
    TaskExecution_Phase_Phase_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Phase_descriptor() {
    return TaskExecution_Phase_descriptor();
  }
  static inline const ::std::string& Phase_Name(Phase value) {
    return TaskExecution_Phase_Name(value);
  }
  static inline bool Phase_Parse(const ::std::string& name,
      Phase* value) {
    return TaskExecution_Phase_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.core.TaskExecution)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class ExecutionError final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.ExecutionError) */ {
 public:
  ExecutionError();
  virtual ~ExecutionError();

  ExecutionError(const ExecutionError& from);

  inline ExecutionError& operator=(const ExecutionError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionError(ExecutionError&& from) noexcept
    : ExecutionError() {
    *this = ::std::move(from);
  }

  inline ExecutionError& operator=(ExecutionError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExecutionError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionError* internal_default_instance() {
    return reinterpret_cast<const ExecutionError*>(
               &_ExecutionError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ExecutionError* other);
  friend void swap(ExecutionError& a, ExecutionError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionError* New() const final {
    return CreateMaybeMessage<ExecutionError>(nullptr);
  }

  ExecutionError* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecutionError>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecutionError& from);
  void MergeFrom(const ExecutionError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ExecutionError_ErrorKind ErrorKind;
  static const ErrorKind UNKNOWN =
    ExecutionError_ErrorKind_UNKNOWN;
  static const ErrorKind USER =
    ExecutionError_ErrorKind_USER;
  static const ErrorKind SYSTEM =
    ExecutionError_ErrorKind_SYSTEM;
  static inline bool ErrorKind_IsValid(int value) {
    return ExecutionError_ErrorKind_IsValid(value);
  }
  static const ErrorKind ErrorKind_MIN =
    ExecutionError_ErrorKind_ErrorKind_MIN;
  static const ErrorKind ErrorKind_MAX =
    ExecutionError_ErrorKind_ErrorKind_MAX;
  static const int ErrorKind_ARRAYSIZE =
    ExecutionError_ErrorKind_ErrorKind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ErrorKind_descriptor() {
    return ExecutionError_ErrorKind_descriptor();
  }
  static inline const ::std::string& ErrorKind_Name(ErrorKind value) {
    return ExecutionError_ErrorKind_Name(value);
  }
  static inline bool ErrorKind_Parse(const ::std::string& name,
      ErrorKind* value) {
    return ExecutionError_ErrorKind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string error_uri = 3;
  void clear_error_uri();
  static const int kErrorUriFieldNumber = 3;
  const ::std::string& error_uri() const;
  void set_error_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_error_uri(::std::string&& value);
  #endif
  void set_error_uri(const char* value);
  void set_error_uri(const char* value, size_t size);
  ::std::string* mutable_error_uri();
  ::std::string* release_error_uri();
  void set_allocated_error_uri(::std::string* error_uri);

  // .flyteidl.core.ExecutionError.ErrorKind kind = 4;
  void clear_kind();
  static const int kKindFieldNumber = 4;
  ::flyteidl::core::ExecutionError_ErrorKind kind() const;
  void set_kind(::flyteidl::core::ExecutionError_ErrorKind value);

  // @@protoc_insertion_point(class_scope:flyteidl.core.ExecutionError)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr error_uri_;
  int kind_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class TaskLog final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.TaskLog) */ {
 public:
  TaskLog();
  virtual ~TaskLog();

  TaskLog(const TaskLog& from);

  inline TaskLog& operator=(const TaskLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskLog(TaskLog&& from) noexcept
    : TaskLog() {
    *this = ::std::move(from);
  }

  inline TaskLog& operator=(TaskLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskLog* internal_default_instance() {
    return reinterpret_cast<const TaskLog*>(
               &_TaskLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TaskLog* other);
  friend void swap(TaskLog& a, TaskLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskLog* New() const final {
    return CreateMaybeMessage<TaskLog>(nullptr);
  }

  TaskLog* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskLog>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskLog& from);
  void MergeFrom(const TaskLog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TaskLog_MessageFormat MessageFormat;
  static const MessageFormat UNKNOWN =
    TaskLog_MessageFormat_UNKNOWN;
  static const MessageFormat CSV =
    TaskLog_MessageFormat_CSV;
  static const MessageFormat JSON =
    TaskLog_MessageFormat_JSON;
  static inline bool MessageFormat_IsValid(int value) {
    return TaskLog_MessageFormat_IsValid(value);
  }
  static const MessageFormat MessageFormat_MIN =
    TaskLog_MessageFormat_MessageFormat_MIN;
  static const MessageFormat MessageFormat_MAX =
    TaskLog_MessageFormat_MessageFormat_MAX;
  static const int MessageFormat_ARRAYSIZE =
    TaskLog_MessageFormat_MessageFormat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageFormat_descriptor() {
    return TaskLog_MessageFormat_descriptor();
  }
  static inline const ::std::string& MessageFormat_Name(MessageFormat value) {
    return TaskLog_MessageFormat_Name(value);
  }
  static inline bool MessageFormat_Parse(const ::std::string& name,
      MessageFormat* value) {
    return TaskLog_MessageFormat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string uri = 1;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.protobuf.Duration ttl = 4;
  bool has_ttl() const;
  void clear_ttl();
  static const int kTtlFieldNumber = 4;
  const ::google::protobuf::Duration& ttl() const;
  ::google::protobuf::Duration* release_ttl();
  ::google::protobuf::Duration* mutable_ttl();
  void set_allocated_ttl(::google::protobuf::Duration* ttl);

  // .flyteidl.core.TaskLog.MessageFormat message_format = 3;
  void clear_message_format();
  static const int kMessageFormatFieldNumber = 3;
  ::flyteidl::core::TaskLog_MessageFormat message_format() const;
  void set_message_format(::flyteidl::core::TaskLog_MessageFormat value);

  // @@protoc_insertion_point(class_scope:flyteidl.core.TaskLog)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Duration* ttl_;
  int message_format_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class QualityOfServiceSpec final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.QualityOfServiceSpec) */ {
 public:
  QualityOfServiceSpec();
  virtual ~QualityOfServiceSpec();

  QualityOfServiceSpec(const QualityOfServiceSpec& from);

  inline QualityOfServiceSpec& operator=(const QualityOfServiceSpec& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QualityOfServiceSpec(QualityOfServiceSpec&& from) noexcept
    : QualityOfServiceSpec() {
    *this = ::std::move(from);
  }

  inline QualityOfServiceSpec& operator=(QualityOfServiceSpec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const QualityOfServiceSpec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QualityOfServiceSpec* internal_default_instance() {
    return reinterpret_cast<const QualityOfServiceSpec*>(
               &_QualityOfServiceSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(QualityOfServiceSpec* other);
  friend void swap(QualityOfServiceSpec& a, QualityOfServiceSpec& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QualityOfServiceSpec* New() const final {
    return CreateMaybeMessage<QualityOfServiceSpec>(nullptr);
  }

  QualityOfServiceSpec* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QualityOfServiceSpec>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QualityOfServiceSpec& from);
  void MergeFrom(const QualityOfServiceSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QualityOfServiceSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Duration queueing_budget = 1;
  bool has_queueing_budget() const;
  void clear_queueing_budget();
  static const int kQueueingBudgetFieldNumber = 1;
  const ::google::protobuf::Duration& queueing_budget() const;
  ::google::protobuf::Duration* release_queueing_budget();
  ::google::protobuf::Duration* mutable_queueing_budget();
  void set_allocated_queueing_budget(::google::protobuf::Duration* queueing_budget);

  // @@protoc_insertion_point(class_scope:flyteidl.core.QualityOfServiceSpec)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Duration* queueing_budget_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class QualityOfService final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.QualityOfService) */ {
 public:
  QualityOfService();
  virtual ~QualityOfService();

  QualityOfService(const QualityOfService& from);

  inline QualityOfService& operator=(const QualityOfService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QualityOfService(QualityOfService&& from) noexcept
    : QualityOfService() {
    *this = ::std::move(from);
  }

  inline QualityOfService& operator=(QualityOfService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const QualityOfService& default_instance();

  enum DesignationCase {
    kTier = 1,
    kSpec = 2,
    DESIGNATION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QualityOfService* internal_default_instance() {
    return reinterpret_cast<const QualityOfService*>(
               &_QualityOfService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(QualityOfService* other);
  friend void swap(QualityOfService& a, QualityOfService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QualityOfService* New() const final {
    return CreateMaybeMessage<QualityOfService>(nullptr);
  }

  QualityOfService* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QualityOfService>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QualityOfService& from);
  void MergeFrom(const QualityOfService& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QualityOfService* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef QualityOfService_Tier Tier;
  static const Tier UNDEFINED =
    QualityOfService_Tier_UNDEFINED;
  static const Tier HIGH =
    QualityOfService_Tier_HIGH;
  static const Tier MEDIUM =
    QualityOfService_Tier_MEDIUM;
  static const Tier LOW =
    QualityOfService_Tier_LOW;
  static inline bool Tier_IsValid(int value) {
    return QualityOfService_Tier_IsValid(value);
  }
  static const Tier Tier_MIN =
    QualityOfService_Tier_Tier_MIN;
  static const Tier Tier_MAX =
    QualityOfService_Tier_Tier_MAX;
  static const int Tier_ARRAYSIZE =
    QualityOfService_Tier_Tier_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Tier_descriptor() {
    return QualityOfService_Tier_descriptor();
  }
  static inline const ::std::string& Tier_Name(Tier value) {
    return QualityOfService_Tier_Name(value);
  }
  static inline bool Tier_Parse(const ::std::string& name,
      Tier* value) {
    return QualityOfService_Tier_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .flyteidl.core.QualityOfService.Tier tier = 1;
  private:
  bool has_tier() const;
  public:
  void clear_tier();
  static const int kTierFieldNumber = 1;
  ::flyteidl::core::QualityOfService_Tier tier() const;
  void set_tier(::flyteidl::core::QualityOfService_Tier value);

  // .flyteidl.core.QualityOfServiceSpec spec = 2;
  bool has_spec() const;
  void clear_spec();
  static const int kSpecFieldNumber = 2;
  const ::flyteidl::core::QualityOfServiceSpec& spec() const;
  ::flyteidl::core::QualityOfServiceSpec* release_spec();
  ::flyteidl::core::QualityOfServiceSpec* mutable_spec();
  void set_allocated_spec(::flyteidl::core::QualityOfServiceSpec* spec);

  void clear_designation();
  DesignationCase designation_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.core.QualityOfService)
 private:
  class HasBitSetters;
  void set_has_tier();
  void set_has_spec();

  inline bool has_designation() const;
  inline void clear_has_designation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union DesignationUnion {
    DesignationUnion() {}
    int tier_;
    ::flyteidl::core::QualityOfServiceSpec* spec_;
  } designation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fcore_2fexecution_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorkflowExecution

// -------------------------------------------------------------------

// NodeExecution

// -------------------------------------------------------------------

// TaskExecution

// -------------------------------------------------------------------

// ExecutionError

// string code = 1;
inline void ExecutionError::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecutionError::code() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.ExecutionError.code)
  return code_.GetNoArena();
}
inline void ExecutionError::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.ExecutionError.code)
}
#if LANG_CXX11
inline void ExecutionError::set_code(::std::string&& value) {
  
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.ExecutionError.code)
}
#endif
inline void ExecutionError::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.ExecutionError.code)
}
inline void ExecutionError::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.ExecutionError.code)
}
inline ::std::string* ExecutionError::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.ExecutionError.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionError::release_code() {
  // @@protoc_insertion_point(field_release:flyteidl.core.ExecutionError.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionError::set_allocated_code(::std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.ExecutionError.code)
}

// string message = 2;
inline void ExecutionError::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecutionError::message() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.ExecutionError.message)
  return message_.GetNoArena();
}
inline void ExecutionError::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.ExecutionError.message)
}
#if LANG_CXX11
inline void ExecutionError::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.ExecutionError.message)
}
#endif
inline void ExecutionError::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.ExecutionError.message)
}
inline void ExecutionError::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.ExecutionError.message)
}
inline ::std::string* ExecutionError::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.ExecutionError.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionError::release_message() {
  // @@protoc_insertion_point(field_release:flyteidl.core.ExecutionError.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionError::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.ExecutionError.message)
}

// string error_uri = 3;
inline void ExecutionError::clear_error_uri() {
  error_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecutionError::error_uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.ExecutionError.error_uri)
  return error_uri_.GetNoArena();
}
inline void ExecutionError::set_error_uri(const ::std::string& value) {
  
  error_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.ExecutionError.error_uri)
}
#if LANG_CXX11
inline void ExecutionError::set_error_uri(::std::string&& value) {
  
  error_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.ExecutionError.error_uri)
}
#endif
inline void ExecutionError::set_error_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.ExecutionError.error_uri)
}
inline void ExecutionError::set_error_uri(const char* value, size_t size) {
  
  error_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.ExecutionError.error_uri)
}
inline ::std::string* ExecutionError::mutable_error_uri() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.ExecutionError.error_uri)
  return error_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionError::release_error_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.core.ExecutionError.error_uri)
  
  return error_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionError::set_allocated_error_uri(::std::string* error_uri) {
  if (error_uri != nullptr) {
    
  } else {
    
  }
  error_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_uri);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.ExecutionError.error_uri)
}

// .flyteidl.core.ExecutionError.ErrorKind kind = 4;
inline void ExecutionError::clear_kind() {
  kind_ = 0;
}
inline ::flyteidl::core::ExecutionError_ErrorKind ExecutionError::kind() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.ExecutionError.kind)
  return static_cast< ::flyteidl::core::ExecutionError_ErrorKind >(kind_);
}
inline void ExecutionError::set_kind(::flyteidl::core::ExecutionError_ErrorKind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.core.ExecutionError.kind)
}

// -------------------------------------------------------------------

// TaskLog

// string uri = 1;
inline void TaskLog::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskLog::uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.TaskLog.uri)
  return uri_.GetNoArena();
}
inline void TaskLog::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.TaskLog.uri)
}
#if LANG_CXX11
inline void TaskLog::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.TaskLog.uri)
}
#endif
inline void TaskLog::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.TaskLog.uri)
}
inline void TaskLog::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.TaskLog.uri)
}
inline ::std::string* TaskLog::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.TaskLog.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskLog::release_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.core.TaskLog.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskLog::set_allocated_uri(::std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.TaskLog.uri)
}

// string name = 2;
inline void TaskLog::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskLog::name() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.TaskLog.name)
  return name_.GetNoArena();
}
inline void TaskLog::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.TaskLog.name)
}
#if LANG_CXX11
inline void TaskLog::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.TaskLog.name)
}
#endif
inline void TaskLog::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.TaskLog.name)
}
inline void TaskLog::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.TaskLog.name)
}
inline ::std::string* TaskLog::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.TaskLog.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskLog::release_name() {
  // @@protoc_insertion_point(field_release:flyteidl.core.TaskLog.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskLog::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.TaskLog.name)
}

// .flyteidl.core.TaskLog.MessageFormat message_format = 3;
inline void TaskLog::clear_message_format() {
  message_format_ = 0;
}
inline ::flyteidl::core::TaskLog_MessageFormat TaskLog::message_format() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.TaskLog.message_format)
  return static_cast< ::flyteidl::core::TaskLog_MessageFormat >(message_format_);
}
inline void TaskLog::set_message_format(::flyteidl::core::TaskLog_MessageFormat value) {
  
  message_format_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.core.TaskLog.message_format)
}

// .google.protobuf.Duration ttl = 4;
inline bool TaskLog::has_ttl() const {
  return this != internal_default_instance() && ttl_ != nullptr;
}
inline const ::google::protobuf::Duration& TaskLog::ttl() const {
  const ::google::protobuf::Duration* p = ttl_;
  // @@protoc_insertion_point(field_get:flyteidl.core.TaskLog.ttl)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* TaskLog::release_ttl() {
  // @@protoc_insertion_point(field_release:flyteidl.core.TaskLog.ttl)
  
  ::google::protobuf::Duration* temp = ttl_;
  ttl_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* TaskLog::mutable_ttl() {
  
  if (ttl_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    ttl_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.TaskLog.ttl)
  return ttl_;
}
inline void TaskLog::set_allocated_ttl(::google::protobuf::Duration* ttl) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ttl_);
  }
  if (ttl) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(ttl)->GetArena();
    if (message_arena != submessage_arena) {
      ttl = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ttl, submessage_arena);
    }
    
  } else {
    
  }
  ttl_ = ttl;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.TaskLog.ttl)
}

// -------------------------------------------------------------------

// QualityOfServiceSpec

// .google.protobuf.Duration queueing_budget = 1;
inline bool QualityOfServiceSpec::has_queueing_budget() const {
  return this != internal_default_instance() && queueing_budget_ != nullptr;
}
inline const ::google::protobuf::Duration& QualityOfServiceSpec::queueing_budget() const {
  const ::google::protobuf::Duration* p = queueing_budget_;
  // @@protoc_insertion_point(field_get:flyteidl.core.QualityOfServiceSpec.queueing_budget)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* QualityOfServiceSpec::release_queueing_budget() {
  // @@protoc_insertion_point(field_release:flyteidl.core.QualityOfServiceSpec.queueing_budget)
  
  ::google::protobuf::Duration* temp = queueing_budget_;
  queueing_budget_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* QualityOfServiceSpec::mutable_queueing_budget() {
  
  if (queueing_budget_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    queueing_budget_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.QualityOfServiceSpec.queueing_budget)
  return queueing_budget_;
}
inline void QualityOfServiceSpec::set_allocated_queueing_budget(::google::protobuf::Duration* queueing_budget) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(queueing_budget_);
  }
  if (queueing_budget) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(queueing_budget)->GetArena();
    if (message_arena != submessage_arena) {
      queueing_budget = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, queueing_budget, submessage_arena);
    }
    
  } else {
    
  }
  queueing_budget_ = queueing_budget;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.QualityOfServiceSpec.queueing_budget)
}

// -------------------------------------------------------------------

// QualityOfService

// .flyteidl.core.QualityOfService.Tier tier = 1;
inline bool QualityOfService::has_tier() const {
  return designation_case() == kTier;
}
inline void QualityOfService::set_has_tier() {
  _oneof_case_[0] = kTier;
}
inline void QualityOfService::clear_tier() {
  if (has_tier()) {
    designation_.tier_ = 0;
    clear_has_designation();
  }
}
inline ::flyteidl::core::QualityOfService_Tier QualityOfService::tier() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.QualityOfService.tier)
  if (has_tier()) {
    return static_cast< ::flyteidl::core::QualityOfService_Tier >(designation_.tier_);
  }
  return static_cast< ::flyteidl::core::QualityOfService_Tier >(0);
}
inline void QualityOfService::set_tier(::flyteidl::core::QualityOfService_Tier value) {
  if (!has_tier()) {
    clear_designation();
    set_has_tier();
  }
  designation_.tier_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.core.QualityOfService.tier)
}

// .flyteidl.core.QualityOfServiceSpec spec = 2;
inline bool QualityOfService::has_spec() const {
  return designation_case() == kSpec;
}
inline void QualityOfService::set_has_spec() {
  _oneof_case_[0] = kSpec;
}
inline void QualityOfService::clear_spec() {
  if (has_spec()) {
    delete designation_.spec_;
    clear_has_designation();
  }
}
inline ::flyteidl::core::QualityOfServiceSpec* QualityOfService::release_spec() {
  // @@protoc_insertion_point(field_release:flyteidl.core.QualityOfService.spec)
  if (has_spec()) {
    clear_has_designation();
      ::flyteidl::core::QualityOfServiceSpec* temp = designation_.spec_;
    designation_.spec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::QualityOfServiceSpec& QualityOfService::spec() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.QualityOfService.spec)
  return has_spec()
      ? *designation_.spec_
      : *reinterpret_cast< ::flyteidl::core::QualityOfServiceSpec*>(&::flyteidl::core::_QualityOfServiceSpec_default_instance_);
}
inline ::flyteidl::core::QualityOfServiceSpec* QualityOfService::mutable_spec() {
  if (!has_spec()) {
    clear_designation();
    set_has_spec();
    designation_.spec_ = CreateMaybeMessage< ::flyteidl::core::QualityOfServiceSpec >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.QualityOfService.spec)
  return designation_.spec_;
}

inline bool QualityOfService::has_designation() const {
  return designation_case() != DESIGNATION_NOT_SET;
}
inline void QualityOfService::clear_has_designation() {
  _oneof_case_[0] = DESIGNATION_NOT_SET;
}
inline QualityOfService::DesignationCase QualityOfService::designation_case() const {
  return QualityOfService::DesignationCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace flyteidl

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::flyteidl::core::WorkflowExecution_Phase> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::core::WorkflowExecution_Phase>() {
  return ::flyteidl::core::WorkflowExecution_Phase_descriptor();
}
template <> struct is_proto_enum< ::flyteidl::core::NodeExecution_Phase> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::core::NodeExecution_Phase>() {
  return ::flyteidl::core::NodeExecution_Phase_descriptor();
}
template <> struct is_proto_enum< ::flyteidl::core::TaskExecution_Phase> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::core::TaskExecution_Phase>() {
  return ::flyteidl::core::TaskExecution_Phase_descriptor();
}
template <> struct is_proto_enum< ::flyteidl::core::ExecutionError_ErrorKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::core::ExecutionError_ErrorKind>() {
  return ::flyteidl::core::ExecutionError_ErrorKind_descriptor();
}
template <> struct is_proto_enum< ::flyteidl::core::TaskLog_MessageFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::core::TaskLog_MessageFormat>() {
  return ::flyteidl::core::TaskLog_MessageFormat_descriptor();
}
template <> struct is_proto_enum< ::flyteidl::core::QualityOfService_Tier> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::core::QualityOfService_Tier>() {
  return ::flyteidl::core::QualityOfService_Tier_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fcore_2fexecution_2eproto
