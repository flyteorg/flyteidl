// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/identifier.proto

package com.flyteidl.core;

/**
 * <pre>
 * Indicates a resource type within Flyte.
 * </pre>
 *
 * Protobuf enum {@code flyteidl.core.ResourceType}
 */
public enum ResourceType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>UNSPECIFIED = 0;</code>
   */
  UNSPECIFIED(0),
  /**
   * <code>TASK = 1;</code>
   */
  TASK(1),
  /**
   * <code>WORKFLOW = 2;</code>
   */
  WORKFLOW(2),
  /**
   * <code>LAUNCH_PLAN = 3;</code>
   */
  LAUNCH_PLAN(3),
  /**
   * <pre>
   * A dataset represents an entity modeled in Flyte DataCatalog. A Dataset is also a versioned entity and can be a compilation of multiple individual objects.
   * Eventually all Catalog objects should be modeled similar to Flyte Objects. The Dataset entities makes it possible for the UI  and CLI to act on the objects 
   * in a similar manner to other Flyte objects
   * </pre>
   *
   * <code>DATASET = 4;</code>
   */
  DATASET(4),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>UNSPECIFIED = 0;</code>
   */
  public static final int UNSPECIFIED_VALUE = 0;
  /**
   * <code>TASK = 1;</code>
   */
  public static final int TASK_VALUE = 1;
  /**
   * <code>WORKFLOW = 2;</code>
   */
  public static final int WORKFLOW_VALUE = 2;
  /**
   * <code>LAUNCH_PLAN = 3;</code>
   */
  public static final int LAUNCH_PLAN_VALUE = 3;
  /**
   * <pre>
   * A dataset represents an entity modeled in Flyte DataCatalog. A Dataset is also a versioned entity and can be a compilation of multiple individual objects.
   * Eventually all Catalog objects should be modeled similar to Flyte Objects. The Dataset entities makes it possible for the UI  and CLI to act on the objects 
   * in a similar manner to other Flyte objects
   * </pre>
   *
   * <code>DATASET = 4;</code>
   */
  public static final int DATASET_VALUE = 4;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ResourceType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ResourceType forNumber(int value) {
    switch (value) {
      case 0: return UNSPECIFIED;
      case 1: return TASK;
      case 2: return WORKFLOW;
      case 3: return LAUNCH_PLAN;
      case 4: return DATASET;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ResourceType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ResourceType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ResourceType>() {
          public ResourceType findValueByNumber(int number) {
            return ResourceType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.flyteidl.core.IdentifierProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final ResourceType[] VALUES = values();

  public static ResourceType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ResourceType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:flyteidl.core.ResourceType)
}

