// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/qubole.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fplugins_2fqubole_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fplugins_2fqubole_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fqubole_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fplugins_2fqubole_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fplugins_2fqubole_2eproto;
namespace flyteidl {
namespace plugins {
class HiveQuery;
struct HiveQueryDefaultTypeInternal;
extern HiveQueryDefaultTypeInternal _HiveQuery_default_instance_;
class HiveQueryCollection;
struct HiveQueryCollectionDefaultTypeInternal;
extern HiveQueryCollectionDefaultTypeInternal _HiveQueryCollection_default_instance_;
class QuboleHiveJob;
struct QuboleHiveJobDefaultTypeInternal;
extern QuboleHiveJobDefaultTypeInternal _QuboleHiveJob_default_instance_;
}  // namespace plugins
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::plugins::HiveQuery* Arena::CreateMaybeMessage<::flyteidl::plugins::HiveQuery>(Arena*);
template<> ::flyteidl::plugins::HiveQueryCollection* Arena::CreateMaybeMessage<::flyteidl::plugins::HiveQueryCollection>(Arena*);
template<> ::flyteidl::plugins::QuboleHiveJob* Arena::CreateMaybeMessage<::flyteidl::plugins::QuboleHiveJob>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace plugins {

// ===================================================================

class HiveQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.HiveQuery) */ {
 public:
  inline HiveQuery() : HiveQuery(nullptr) {}
  ~HiveQuery() override;
  explicit constexpr HiveQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HiveQuery(const HiveQuery& from);
  HiveQuery(HiveQuery&& from) noexcept
    : HiveQuery() {
    *this = ::std::move(from);
  }

  inline HiveQuery& operator=(const HiveQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline HiveQuery& operator=(HiveQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HiveQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const HiveQuery* internal_default_instance() {
    return reinterpret_cast<const HiveQuery*>(
               &_HiveQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HiveQuery& a, HiveQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(HiveQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HiveQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HiveQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HiveQuery>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HiveQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.plugins.HiveQuery";
  }
  protected:
  explicit HiveQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
    kTimeoutSecFieldNumber = 2,
    kRetryCountFieldNumber = 3,
  };
  // string query = 1 [json_name = "query"];
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // uint32 timeout_sec = 2 [json_name = "timeoutSec"];
  void clear_timeout_sec();
  uint32_t timeout_sec() const;
  void set_timeout_sec(uint32_t value);
  private:
  uint32_t _internal_timeout_sec() const;
  void _internal_set_timeout_sec(uint32_t value);
  public:

  // uint32 retryCount = 3 [json_name = "retryCount"];
  void clear_retrycount();
  uint32_t retrycount() const;
  void set_retrycount(uint32_t value);
  private:
  uint32_t _internal_retrycount() const;
  void _internal_set_retrycount(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.HiveQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  uint32_t timeout_sec_;
  uint32_t retrycount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fqubole_2eproto;
};
// -------------------------------------------------------------------

class HiveQueryCollection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.HiveQueryCollection) */ {
 public:
  inline HiveQueryCollection() : HiveQueryCollection(nullptr) {}
  ~HiveQueryCollection() override;
  explicit constexpr HiveQueryCollection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HiveQueryCollection(const HiveQueryCollection& from);
  HiveQueryCollection(HiveQueryCollection&& from) noexcept
    : HiveQueryCollection() {
    *this = ::std::move(from);
  }

  inline HiveQueryCollection& operator=(const HiveQueryCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline HiveQueryCollection& operator=(HiveQueryCollection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HiveQueryCollection& default_instance() {
    return *internal_default_instance();
  }
  static inline const HiveQueryCollection* internal_default_instance() {
    return reinterpret_cast<const HiveQueryCollection*>(
               &_HiveQueryCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HiveQueryCollection& a, HiveQueryCollection& b) {
    a.Swap(&b);
  }
  inline void Swap(HiveQueryCollection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HiveQueryCollection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HiveQueryCollection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HiveQueryCollection>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HiveQueryCollection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.plugins.HiveQueryCollection";
  }
  protected:
  explicit HiveQueryCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueriesFieldNumber = 2,
  };
  // repeated .flyteidl.plugins.HiveQuery queries = 2 [json_name = "queries"];
  int queries_size() const;
  private:
  int _internal_queries_size() const;
  public:
  void clear_queries();
  ::flyteidl::plugins::HiveQuery* mutable_queries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::plugins::HiveQuery >*
      mutable_queries();
  private:
  const ::flyteidl::plugins::HiveQuery& _internal_queries(int index) const;
  ::flyteidl::plugins::HiveQuery* _internal_add_queries();
  public:
  const ::flyteidl::plugins::HiveQuery& queries(int index) const;
  ::flyteidl::plugins::HiveQuery* add_queries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::plugins::HiveQuery >&
      queries() const;

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.HiveQueryCollection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::plugins::HiveQuery > queries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fqubole_2eproto;
};
// -------------------------------------------------------------------

class QuboleHiveJob final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.QuboleHiveJob) */ {
 public:
  inline QuboleHiveJob() : QuboleHiveJob(nullptr) {}
  ~QuboleHiveJob() override;
  explicit constexpr QuboleHiveJob(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuboleHiveJob(const QuboleHiveJob& from);
  QuboleHiveJob(QuboleHiveJob&& from) noexcept
    : QuboleHiveJob() {
    *this = ::std::move(from);
  }

  inline QuboleHiveJob& operator=(const QuboleHiveJob& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuboleHiveJob& operator=(QuboleHiveJob&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuboleHiveJob& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuboleHiveJob* internal_default_instance() {
    return reinterpret_cast<const QuboleHiveJob*>(
               &_QuboleHiveJob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QuboleHiveJob& a, QuboleHiveJob& b) {
    a.Swap(&b);
  }
  inline void Swap(QuboleHiveJob* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuboleHiveJob* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuboleHiveJob* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuboleHiveJob>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuboleHiveJob* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.plugins.QuboleHiveJob";
  }
  protected:
  explicit QuboleHiveJob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 3,
    kClusterLabelFieldNumber = 1,
    kQueryCollectionFieldNumber = 2,
    kQueryFieldNumber = 4,
  };
  // repeated string tags = 3 [json_name = "tags"];
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // string cluster_label = 1 [json_name = "clusterLabel"];
  void clear_cluster_label();
  const std::string& cluster_label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cluster_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cluster_label();
  PROTOBUF_NODISCARD std::string* release_cluster_label();
  void set_allocated_cluster_label(std::string* cluster_label);
  private:
  const std::string& _internal_cluster_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cluster_label(const std::string& value);
  std::string* _internal_mutable_cluster_label();
  public:

  // .flyteidl.plugins.HiveQueryCollection query_collection = 2 [json_name = "queryCollection", deprecated = true];
  PROTOBUF_DEPRECATED bool has_query_collection() const;
  private:
  bool _internal_has_query_collection() const;
  public:
  PROTOBUF_DEPRECATED void clear_query_collection();
  PROTOBUF_DEPRECATED const ::flyteidl::plugins::HiveQueryCollection& query_collection() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::flyteidl::plugins::HiveQueryCollection* release_query_collection();
  PROTOBUF_DEPRECATED ::flyteidl::plugins::HiveQueryCollection* mutable_query_collection();
  PROTOBUF_DEPRECATED void set_allocated_query_collection(::flyteidl::plugins::HiveQueryCollection* query_collection);
  private:
  const ::flyteidl::plugins::HiveQueryCollection& _internal_query_collection() const;
  ::flyteidl::plugins::HiveQueryCollection* _internal_mutable_query_collection();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_query_collection(
      ::flyteidl::plugins::HiveQueryCollection* query_collection);
  PROTOBUF_DEPRECATED ::flyteidl::plugins::HiveQueryCollection* unsafe_arena_release_query_collection();

  // .flyteidl.plugins.HiveQuery query = 4 [json_name = "query"];
  bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  void clear_query();
  const ::flyteidl::plugins::HiveQuery& query() const;
  PROTOBUF_NODISCARD ::flyteidl::plugins::HiveQuery* release_query();
  ::flyteidl::plugins::HiveQuery* mutable_query();
  void set_allocated_query(::flyteidl::plugins::HiveQuery* query);
  private:
  const ::flyteidl::plugins::HiveQuery& _internal_query() const;
  ::flyteidl::plugins::HiveQuery* _internal_mutable_query();
  public:
  void unsafe_arena_set_allocated_query(
      ::flyteidl::plugins::HiveQuery* query);
  ::flyteidl::plugins::HiveQuery* unsafe_arena_release_query();

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.QuboleHiveJob)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cluster_label_;
  ::flyteidl::plugins::HiveQueryCollection* query_collection_;
  ::flyteidl::plugins::HiveQuery* query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fqubole_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HiveQuery

// string query = 1 [json_name = "query"];
inline void HiveQuery::clear_query() {
  query_.ClearToEmpty();
}
inline const std::string& HiveQuery::query() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.HiveQuery.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HiveQuery::set_query(ArgT0&& arg0, ArgT... args) {
 
 query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.plugins.HiveQuery.query)
}
inline std::string* HiveQuery::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.HiveQuery.query)
  return _s;
}
inline const std::string& HiveQuery::_internal_query() const {
  return query_.Get();
}
inline void HiveQuery::_internal_set_query(const std::string& value) {
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HiveQuery::_internal_mutable_query() {
  
  return query_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HiveQuery::release_query() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.HiveQuery.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HiveQuery::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (query_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.HiveQuery.query)
}

// uint32 timeout_sec = 2 [json_name = "timeoutSec"];
inline void HiveQuery::clear_timeout_sec() {
  timeout_sec_ = 0u;
}
inline uint32_t HiveQuery::_internal_timeout_sec() const {
  return timeout_sec_;
}
inline uint32_t HiveQuery::timeout_sec() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.HiveQuery.timeout_sec)
  return _internal_timeout_sec();
}
inline void HiveQuery::_internal_set_timeout_sec(uint32_t value) {
  
  timeout_sec_ = value;
}
inline void HiveQuery::set_timeout_sec(uint32_t value) {
  _internal_set_timeout_sec(value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.HiveQuery.timeout_sec)
}

// uint32 retryCount = 3 [json_name = "retryCount"];
inline void HiveQuery::clear_retrycount() {
  retrycount_ = 0u;
}
inline uint32_t HiveQuery::_internal_retrycount() const {
  return retrycount_;
}
inline uint32_t HiveQuery::retrycount() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.HiveQuery.retryCount)
  return _internal_retrycount();
}
inline void HiveQuery::_internal_set_retrycount(uint32_t value) {
  
  retrycount_ = value;
}
inline void HiveQuery::set_retrycount(uint32_t value) {
  _internal_set_retrycount(value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.HiveQuery.retryCount)
}

// -------------------------------------------------------------------

// HiveQueryCollection

// repeated .flyteidl.plugins.HiveQuery queries = 2 [json_name = "queries"];
inline int HiveQueryCollection::_internal_queries_size() const {
  return queries_.size();
}
inline int HiveQueryCollection::queries_size() const {
  return _internal_queries_size();
}
inline void HiveQueryCollection::clear_queries() {
  queries_.Clear();
}
inline ::flyteidl::plugins::HiveQuery* HiveQueryCollection::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.HiveQueryCollection.queries)
  return queries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::plugins::HiveQuery >*
HiveQueryCollection::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.plugins.HiveQueryCollection.queries)
  return &queries_;
}
inline const ::flyteidl::plugins::HiveQuery& HiveQueryCollection::_internal_queries(int index) const {
  return queries_.Get(index);
}
inline const ::flyteidl::plugins::HiveQuery& HiveQueryCollection::queries(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.HiveQueryCollection.queries)
  return _internal_queries(index);
}
inline ::flyteidl::plugins::HiveQuery* HiveQueryCollection::_internal_add_queries() {
  return queries_.Add();
}
inline ::flyteidl::plugins::HiveQuery* HiveQueryCollection::add_queries() {
  ::flyteidl::plugins::HiveQuery* _add = _internal_add_queries();
  // @@protoc_insertion_point(field_add:flyteidl.plugins.HiveQueryCollection.queries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::plugins::HiveQuery >&
HiveQueryCollection::queries() const {
  // @@protoc_insertion_point(field_list:flyteidl.plugins.HiveQueryCollection.queries)
  return queries_;
}

// -------------------------------------------------------------------

// QuboleHiveJob

// string cluster_label = 1 [json_name = "clusterLabel"];
inline void QuboleHiveJob::clear_cluster_label() {
  cluster_label_.ClearToEmpty();
}
inline const std::string& QuboleHiveJob::cluster_label() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.QuboleHiveJob.cluster_label)
  return _internal_cluster_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuboleHiveJob::set_cluster_label(ArgT0&& arg0, ArgT... args) {
 
 cluster_label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.plugins.QuboleHiveJob.cluster_label)
}
inline std::string* QuboleHiveJob::mutable_cluster_label() {
  std::string* _s = _internal_mutable_cluster_label();
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.QuboleHiveJob.cluster_label)
  return _s;
}
inline const std::string& QuboleHiveJob::_internal_cluster_label() const {
  return cluster_label_.Get();
}
inline void QuboleHiveJob::_internal_set_cluster_label(const std::string& value) {
  
  cluster_label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* QuboleHiveJob::_internal_mutable_cluster_label() {
  
  return cluster_label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* QuboleHiveJob::release_cluster_label() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.QuboleHiveJob.cluster_label)
  return cluster_label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void QuboleHiveJob::set_allocated_cluster_label(std::string* cluster_label) {
  if (cluster_label != nullptr) {
    
  } else {
    
  }
  cluster_label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cluster_label,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cluster_label_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cluster_label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.QuboleHiveJob.cluster_label)
}

// .flyteidl.plugins.HiveQueryCollection query_collection = 2 [json_name = "queryCollection", deprecated = true];
inline bool QuboleHiveJob::_internal_has_query_collection() const {
  return this != internal_default_instance() && query_collection_ != nullptr;
}
inline bool QuboleHiveJob::has_query_collection() const {
  return _internal_has_query_collection();
}
inline void QuboleHiveJob::clear_query_collection() {
  if (GetArenaForAllocation() == nullptr && query_collection_ != nullptr) {
    delete query_collection_;
  }
  query_collection_ = nullptr;
}
inline const ::flyteidl::plugins::HiveQueryCollection& QuboleHiveJob::_internal_query_collection() const {
  const ::flyteidl::plugins::HiveQueryCollection* p = query_collection_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::plugins::HiveQueryCollection&>(
      ::flyteidl::plugins::_HiveQueryCollection_default_instance_);
}
inline const ::flyteidl::plugins::HiveQueryCollection& QuboleHiveJob::query_collection() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.QuboleHiveJob.query_collection)
  return _internal_query_collection();
}
inline void QuboleHiveJob::unsafe_arena_set_allocated_query_collection(
    ::flyteidl::plugins::HiveQueryCollection* query_collection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_collection_);
  }
  query_collection_ = query_collection;
  if (query_collection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.plugins.QuboleHiveJob.query_collection)
}
inline ::flyteidl::plugins::HiveQueryCollection* QuboleHiveJob::release_query_collection() {
  
  ::flyteidl::plugins::HiveQueryCollection* temp = query_collection_;
  query_collection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::plugins::HiveQueryCollection* QuboleHiveJob::unsafe_arena_release_query_collection() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.QuboleHiveJob.query_collection)
  
  ::flyteidl::plugins::HiveQueryCollection* temp = query_collection_;
  query_collection_ = nullptr;
  return temp;
}
inline ::flyteidl::plugins::HiveQueryCollection* QuboleHiveJob::_internal_mutable_query_collection() {
  
  if (query_collection_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::plugins::HiveQueryCollection>(GetArenaForAllocation());
    query_collection_ = p;
  }
  return query_collection_;
}
inline ::flyteidl::plugins::HiveQueryCollection* QuboleHiveJob::mutable_query_collection() {
  ::flyteidl::plugins::HiveQueryCollection* _msg = _internal_mutable_query_collection();
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.QuboleHiveJob.query_collection)
  return _msg;
}
inline void QuboleHiveJob::set_allocated_query_collection(::flyteidl::plugins::HiveQueryCollection* query_collection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete query_collection_;
  }
  if (query_collection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::plugins::HiveQueryCollection>::GetOwningArena(query_collection);
    if (message_arena != submessage_arena) {
      query_collection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_collection, submessage_arena);
    }
    
  } else {
    
  }
  query_collection_ = query_collection;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.QuboleHiveJob.query_collection)
}

// repeated string tags = 3 [json_name = "tags"];
inline int QuboleHiveJob::_internal_tags_size() const {
  return tags_.size();
}
inline int QuboleHiveJob::tags_size() const {
  return _internal_tags_size();
}
inline void QuboleHiveJob::clear_tags() {
  tags_.Clear();
}
inline std::string* QuboleHiveJob::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:flyteidl.plugins.QuboleHiveJob.tags)
  return _s;
}
inline const std::string& QuboleHiveJob::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& QuboleHiveJob::tags(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.QuboleHiveJob.tags)
  return _internal_tags(index);
}
inline std::string* QuboleHiveJob::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.QuboleHiveJob.tags)
  return tags_.Mutable(index);
}
inline void QuboleHiveJob::set_tags(int index, const std::string& value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.QuboleHiveJob.tags)
}
inline void QuboleHiveJob::set_tags(int index, std::string&& value) {
  tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flyteidl.plugins.QuboleHiveJob.tags)
}
inline void QuboleHiveJob::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.QuboleHiveJob.tags)
}
inline void QuboleHiveJob::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.QuboleHiveJob.tags)
}
inline std::string* QuboleHiveJob::_internal_add_tags() {
  return tags_.Add();
}
inline void QuboleHiveJob::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.plugins.QuboleHiveJob.tags)
}
inline void QuboleHiveJob::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.plugins.QuboleHiveJob.tags)
}
inline void QuboleHiveJob::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.plugins.QuboleHiveJob.tags)
}
inline void QuboleHiveJob::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.plugins.QuboleHiveJob.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QuboleHiveJob::tags() const {
  // @@protoc_insertion_point(field_list:flyteidl.plugins.QuboleHiveJob.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QuboleHiveJob::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.plugins.QuboleHiveJob.tags)
  return &tags_;
}

// .flyteidl.plugins.HiveQuery query = 4 [json_name = "query"];
inline bool QuboleHiveJob::_internal_has_query() const {
  return this != internal_default_instance() && query_ != nullptr;
}
inline bool QuboleHiveJob::has_query() const {
  return _internal_has_query();
}
inline void QuboleHiveJob::clear_query() {
  if (GetArenaForAllocation() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
}
inline const ::flyteidl::plugins::HiveQuery& QuboleHiveJob::_internal_query() const {
  const ::flyteidl::plugins::HiveQuery* p = query_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::plugins::HiveQuery&>(
      ::flyteidl::plugins::_HiveQuery_default_instance_);
}
inline const ::flyteidl::plugins::HiveQuery& QuboleHiveJob::query() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.QuboleHiveJob.query)
  return _internal_query();
}
inline void QuboleHiveJob::unsafe_arena_set_allocated_query(
    ::flyteidl::plugins::HiveQuery* query) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_);
  }
  query_ = query;
  if (query) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.plugins.QuboleHiveJob.query)
}
inline ::flyteidl::plugins::HiveQuery* QuboleHiveJob::release_query() {
  
  ::flyteidl::plugins::HiveQuery* temp = query_;
  query_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::plugins::HiveQuery* QuboleHiveJob::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.QuboleHiveJob.query)
  
  ::flyteidl::plugins::HiveQuery* temp = query_;
  query_ = nullptr;
  return temp;
}
inline ::flyteidl::plugins::HiveQuery* QuboleHiveJob::_internal_mutable_query() {
  
  if (query_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::plugins::HiveQuery>(GetArenaForAllocation());
    query_ = p;
  }
  return query_;
}
inline ::flyteidl::plugins::HiveQuery* QuboleHiveJob::mutable_query() {
  ::flyteidl::plugins::HiveQuery* _msg = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.QuboleHiveJob.query)
  return _msg;
}
inline void QuboleHiveJob::set_allocated_query(::flyteidl::plugins::HiveQuery* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete query_;
  }
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::plugins::HiveQuery>::GetOwningArena(query);
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    
  } else {
    
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.QuboleHiveJob.query)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace plugins
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fplugins_2fqubole_2eproto
