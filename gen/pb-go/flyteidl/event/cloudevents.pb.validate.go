// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl/event/cloudevents.proto

package event

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _cloudevents_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CloudEventWorkflowExecution with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CloudEventWorkflowExecution) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRawEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudEventWorkflowExecutionValidationError{
				field:  "RawEvent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOutputData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudEventWorkflowExecutionValidationError{
				field:  "OutputData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOutputInterface()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudEventWorkflowExecutionValidationError{
				field:  "OutputInterface",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetInputData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudEventWorkflowExecutionValidationError{
				field:  "InputData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetScheduledAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudEventWorkflowExecutionValidationError{
				field:  "ScheduledAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetArtifactIds() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudEventWorkflowExecutionValidationError{
					field:  fmt.Sprintf("ArtifactIds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetParentNodeExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudEventWorkflowExecutionValidationError{
				field:  "ParentNodeExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetReferenceExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudEventWorkflowExecutionValidationError{
				field:  "ReferenceExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CloudEventWorkflowExecutionValidationError is the validation error returned
// by CloudEventWorkflowExecution.Validate if the designated constraints
// aren't met.
type CloudEventWorkflowExecutionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudEventWorkflowExecutionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudEventWorkflowExecutionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudEventWorkflowExecutionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudEventWorkflowExecutionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudEventWorkflowExecutionValidationError) ErrorName() string {
	return "CloudEventWorkflowExecutionValidationError"
}

// Error satisfies the builtin error interface
func (e CloudEventWorkflowExecutionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudEventWorkflowExecution.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudEventWorkflowExecutionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudEventWorkflowExecutionValidationError{}

// Validate checks the field values on CloudEventNodeExecution with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CloudEventNodeExecution) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRawEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudEventNodeExecutionValidationError{
				field:  "RawEvent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CloudEventNodeExecutionValidationError is the validation error returned by
// CloudEventNodeExecution.Validate if the designated constraints aren't met.
type CloudEventNodeExecutionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudEventNodeExecutionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudEventNodeExecutionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudEventNodeExecutionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudEventNodeExecutionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudEventNodeExecutionValidationError) ErrorName() string {
	return "CloudEventNodeExecutionValidationError"
}

// Error satisfies the builtin error interface
func (e CloudEventNodeExecutionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudEventNodeExecution.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudEventNodeExecutionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudEventNodeExecutionValidationError{}

// Validate checks the field values on CloudEventTaskExecution with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CloudEventTaskExecution) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRawEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudEventTaskExecutionValidationError{
				field:  "RawEvent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOutputData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudEventTaskExecutionValidationError{
				field:  "OutputData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOutputInterface()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudEventTaskExecutionValidationError{
				field:  "OutputInterface",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetInputData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudEventTaskExecutionValidationError{
				field:  "InputData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetScheduledAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudEventTaskExecutionValidationError{
				field:  "ScheduledAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetArtifactIds() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudEventTaskExecutionValidationError{
					field:  fmt.Sprintf("ArtifactIds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetParentNodeExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudEventTaskExecutionValidationError{
				field:  "ParentNodeExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetReferenceExecution()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudEventTaskExecutionValidationError{
				field:  "ReferenceExecution",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CloudEventTaskExecutionValidationError is the validation error returned by
// CloudEventTaskExecution.Validate if the designated constraints aren't met.
type CloudEventTaskExecutionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudEventTaskExecutionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudEventTaskExecutionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudEventTaskExecutionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudEventTaskExecutionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudEventTaskExecutionValidationError) ErrorName() string {
	return "CloudEventTaskExecutionValidationError"
}

// Error satisfies the builtin error interface
func (e CloudEventTaskExecutionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudEventTaskExecution.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudEventTaskExecutionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudEventTaskExecutionValidationError{}
