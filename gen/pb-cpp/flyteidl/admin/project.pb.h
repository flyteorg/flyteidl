// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/project.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fadmin_2fproject_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fadmin_2fproject_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/admin/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fproject_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fadmin_2fproject_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fadmin_2fproject_2eproto();
namespace flyteidl {
namespace admin {
class Domain;
class DomainDefaultTypeInternal;
extern DomainDefaultTypeInternal _Domain_default_instance_;
class Project;
class ProjectDefaultTypeInternal;
extern ProjectDefaultTypeInternal _Project_default_instance_;
class ProjectListRequest;
class ProjectListRequestDefaultTypeInternal;
extern ProjectListRequestDefaultTypeInternal _ProjectListRequest_default_instance_;
class ProjectRegisterRequest;
class ProjectRegisterRequestDefaultTypeInternal;
extern ProjectRegisterRequestDefaultTypeInternal _ProjectRegisterRequest_default_instance_;
class ProjectRegisterResponse;
class ProjectRegisterResponseDefaultTypeInternal;
extern ProjectRegisterResponseDefaultTypeInternal _ProjectRegisterResponse_default_instance_;
class ProjectUpdateResponse;
class ProjectUpdateResponseDefaultTypeInternal;
extern ProjectUpdateResponseDefaultTypeInternal _ProjectUpdateResponse_default_instance_;
class Projects;
class ProjectsDefaultTypeInternal;
extern ProjectsDefaultTypeInternal _Projects_default_instance_;
}  // namespace admin
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::admin::Domain* Arena::CreateMaybeMessage<::flyteidl::admin::Domain>(Arena*);
template<> ::flyteidl::admin::Project* Arena::CreateMaybeMessage<::flyteidl::admin::Project>(Arena*);
template<> ::flyteidl::admin::ProjectListRequest* Arena::CreateMaybeMessage<::flyteidl::admin::ProjectListRequest>(Arena*);
template<> ::flyteidl::admin::ProjectRegisterRequest* Arena::CreateMaybeMessage<::flyteidl::admin::ProjectRegisterRequest>(Arena*);
template<> ::flyteidl::admin::ProjectRegisterResponse* Arena::CreateMaybeMessage<::flyteidl::admin::ProjectRegisterResponse>(Arena*);
template<> ::flyteidl::admin::ProjectUpdateResponse* Arena::CreateMaybeMessage<::flyteidl::admin::ProjectUpdateResponse>(Arena*);
template<> ::flyteidl::admin::Projects* Arena::CreateMaybeMessage<::flyteidl::admin::Projects>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace admin {

enum Project_ProjectState {
  Project_ProjectState_ACTIVE = 0,
  Project_ProjectState_ARCHIVED = 1,
  Project_ProjectState_SYSTEM_GENERATED = 2,
  Project_ProjectState_Project_ProjectState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Project_ProjectState_Project_ProjectState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Project_ProjectState_IsValid(int value);
const Project_ProjectState Project_ProjectState_ProjectState_MIN = Project_ProjectState_ACTIVE;
const Project_ProjectState Project_ProjectState_ProjectState_MAX = Project_ProjectState_SYSTEM_GENERATED;
const int Project_ProjectState_ProjectState_ARRAYSIZE = Project_ProjectState_ProjectState_MAX + 1;

const ::google::protobuf::EnumDescriptor* Project_ProjectState_descriptor();
inline const ::std::string& Project_ProjectState_Name(Project_ProjectState value) {
  return ::google::protobuf::internal::NameOfEnum(
    Project_ProjectState_descriptor(), value);
}
inline bool Project_ProjectState_Parse(
    const ::std::string& name, Project_ProjectState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Project_ProjectState>(
    Project_ProjectState_descriptor(), name, value);
}
// ===================================================================

class Domain final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Domain) */ {
 public:
  Domain();
  virtual ~Domain();

  Domain(const Domain& from);

  inline Domain& operator=(const Domain& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Domain(Domain&& from) noexcept
    : Domain() {
    *this = ::std::move(from);
  }

  inline Domain& operator=(Domain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Domain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Domain* internal_default_instance() {
    return reinterpret_cast<const Domain*>(
               &_Domain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Domain* other);
  friend void swap(Domain& a, Domain& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Domain* New() const final {
    return CreateMaybeMessage<Domain>(nullptr);
  }

  Domain* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Domain>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Domain& from);
  void MergeFrom(const Domain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Domain* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Domain)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fproject_2eproto;
};
// -------------------------------------------------------------------

class Project final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Project) */ {
 public:
  Project();
  virtual ~Project();

  Project(const Project& from);

  inline Project& operator=(const Project& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Project(Project&& from) noexcept
    : Project() {
    *this = ::std::move(from);
  }

  inline Project& operator=(Project&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Project& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Project* internal_default_instance() {
    return reinterpret_cast<const Project*>(
               &_Project_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Project* other);
  friend void swap(Project& a, Project& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Project* New() const final {
    return CreateMaybeMessage<Project>(nullptr);
  }

  Project* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Project>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Project& from);
  void MergeFrom(const Project& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Project* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Project_ProjectState ProjectState;
  static const ProjectState ACTIVE =
    Project_ProjectState_ACTIVE;
  static const ProjectState ARCHIVED =
    Project_ProjectState_ARCHIVED;
  static const ProjectState SYSTEM_GENERATED =
    Project_ProjectState_SYSTEM_GENERATED;
  static inline bool ProjectState_IsValid(int value) {
    return Project_ProjectState_IsValid(value);
  }
  static const ProjectState ProjectState_MIN =
    Project_ProjectState_ProjectState_MIN;
  static const ProjectState ProjectState_MAX =
    Project_ProjectState_ProjectState_MAX;
  static const int ProjectState_ARRAYSIZE =
    Project_ProjectState_ProjectState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProjectState_descriptor() {
    return Project_ProjectState_descriptor();
  }
  static inline const ::std::string& ProjectState_Name(ProjectState value) {
    return Project_ProjectState_Name(value);
  }
  static inline bool ProjectState_Parse(const ::std::string& name,
      ProjectState* value) {
    return Project_ProjectState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .flyteidl.admin.Domain domains = 3;
  int domains_size() const;
  void clear_domains();
  static const int kDomainsFieldNumber = 3;
  ::flyteidl::admin::Domain* mutable_domains(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Domain >*
      mutable_domains();
  const ::flyteidl::admin::Domain& domains(int index) const;
  ::flyteidl::admin::Domain* add_domains();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Domain >&
      domains() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 4;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .flyteidl.admin.Labels labels = 5;
  bool has_labels() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 5;
  const ::flyteidl::admin::Labels& labels() const;
  ::flyteidl::admin::Labels* release_labels();
  ::flyteidl::admin::Labels* mutable_labels();
  void set_allocated_labels(::flyteidl::admin::Labels* labels);

  // .flyteidl.admin.Project.ProjectState state = 6;
  void clear_state();
  static const int kStateFieldNumber = 6;
  ::flyteidl::admin::Project_ProjectState state() const;
  void set_state(::flyteidl::admin::Project_ProjectState value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Project)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Domain > domains_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::flyteidl::admin::Labels* labels_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fproject_2eproto;
};
// -------------------------------------------------------------------

class Projects final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Projects) */ {
 public:
  Projects();
  virtual ~Projects();

  Projects(const Projects& from);

  inline Projects& operator=(const Projects& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Projects(Projects&& from) noexcept
    : Projects() {
    *this = ::std::move(from);
  }

  inline Projects& operator=(Projects&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Projects& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Projects* internal_default_instance() {
    return reinterpret_cast<const Projects*>(
               &_Projects_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Projects* other);
  friend void swap(Projects& a, Projects& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Projects* New() const final {
    return CreateMaybeMessage<Projects>(nullptr);
  }

  Projects* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Projects>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Projects& from);
  void MergeFrom(const Projects& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Projects* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.admin.Project projects = 1;
  int projects_size() const;
  void clear_projects();
  static const int kProjectsFieldNumber = 1;
  ::flyteidl::admin::Project* mutable_projects(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Project >*
      mutable_projects();
  const ::flyteidl::admin::Project& projects(int index) const;
  ::flyteidl::admin::Project* add_projects();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Project >&
      projects() const;

  // string token = 2;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Projects)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Project > projects_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fproject_2eproto;
};
// -------------------------------------------------------------------

class ProjectListRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ProjectListRequest) */ {
 public:
  ProjectListRequest();
  virtual ~ProjectListRequest();

  ProjectListRequest(const ProjectListRequest& from);

  inline ProjectListRequest& operator=(const ProjectListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProjectListRequest(ProjectListRequest&& from) noexcept
    : ProjectListRequest() {
    *this = ::std::move(from);
  }

  inline ProjectListRequest& operator=(ProjectListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ProjectListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjectListRequest* internal_default_instance() {
    return reinterpret_cast<const ProjectListRequest*>(
               &_ProjectListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ProjectListRequest* other);
  friend void swap(ProjectListRequest& a, ProjectListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProjectListRequest* New() const final {
    return CreateMaybeMessage<ProjectListRequest>(nullptr);
  }

  ProjectListRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProjectListRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProjectListRequest& from);
  void MergeFrom(const ProjectListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 2;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string filters = 3;
  void clear_filters();
  static const int kFiltersFieldNumber = 3;
  const ::std::string& filters() const;
  void set_filters(const ::std::string& value);
  #if LANG_CXX11
  void set_filters(::std::string&& value);
  #endif
  void set_filters(const char* value);
  void set_filters(const char* value, size_t size);
  ::std::string* mutable_filters();
  ::std::string* release_filters();
  void set_allocated_filters(::std::string* filters);

  // .flyteidl.admin.Sort sort_by = 4;
  bool has_sort_by() const;
  void clear_sort_by();
  static const int kSortByFieldNumber = 4;
  const ::flyteidl::admin::Sort& sort_by() const;
  ::flyteidl::admin::Sort* release_sort_by();
  ::flyteidl::admin::Sort* mutable_sort_by();
  void set_allocated_sort_by(::flyteidl::admin::Sort* sort_by);

  // uint32 limit = 1;
  void clear_limit();
  static const int kLimitFieldNumber = 1;
  ::google::protobuf::uint32 limit() const;
  void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ProjectListRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr filters_;
  ::flyteidl::admin::Sort* sort_by_;
  ::google::protobuf::uint32 limit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fproject_2eproto;
};
// -------------------------------------------------------------------

class ProjectRegisterRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ProjectRegisterRequest) */ {
 public:
  ProjectRegisterRequest();
  virtual ~ProjectRegisterRequest();

  ProjectRegisterRequest(const ProjectRegisterRequest& from);

  inline ProjectRegisterRequest& operator=(const ProjectRegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProjectRegisterRequest(ProjectRegisterRequest&& from) noexcept
    : ProjectRegisterRequest() {
    *this = ::std::move(from);
  }

  inline ProjectRegisterRequest& operator=(ProjectRegisterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ProjectRegisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjectRegisterRequest* internal_default_instance() {
    return reinterpret_cast<const ProjectRegisterRequest*>(
               &_ProjectRegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ProjectRegisterRequest* other);
  friend void swap(ProjectRegisterRequest& a, ProjectRegisterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProjectRegisterRequest* New() const final {
    return CreateMaybeMessage<ProjectRegisterRequest>(nullptr);
  }

  ProjectRegisterRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProjectRegisterRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProjectRegisterRequest& from);
  void MergeFrom(const ProjectRegisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectRegisterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.admin.Project project = 1;
  bool has_project() const;
  void clear_project();
  static const int kProjectFieldNumber = 1;
  const ::flyteidl::admin::Project& project() const;
  ::flyteidl::admin::Project* release_project();
  ::flyteidl::admin::Project* mutable_project();
  void set_allocated_project(::flyteidl::admin::Project* project);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ProjectRegisterRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::admin::Project* project_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fproject_2eproto;
};
// -------------------------------------------------------------------

class ProjectRegisterResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ProjectRegisterResponse) */ {
 public:
  ProjectRegisterResponse();
  virtual ~ProjectRegisterResponse();

  ProjectRegisterResponse(const ProjectRegisterResponse& from);

  inline ProjectRegisterResponse& operator=(const ProjectRegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProjectRegisterResponse(ProjectRegisterResponse&& from) noexcept
    : ProjectRegisterResponse() {
    *this = ::std::move(from);
  }

  inline ProjectRegisterResponse& operator=(ProjectRegisterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ProjectRegisterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjectRegisterResponse* internal_default_instance() {
    return reinterpret_cast<const ProjectRegisterResponse*>(
               &_ProjectRegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ProjectRegisterResponse* other);
  friend void swap(ProjectRegisterResponse& a, ProjectRegisterResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProjectRegisterResponse* New() const final {
    return CreateMaybeMessage<ProjectRegisterResponse>(nullptr);
  }

  ProjectRegisterResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProjectRegisterResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProjectRegisterResponse& from);
  void MergeFrom(const ProjectRegisterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectRegisterResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ProjectRegisterResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fproject_2eproto;
};
// -------------------------------------------------------------------

class ProjectUpdateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ProjectUpdateResponse) */ {
 public:
  ProjectUpdateResponse();
  virtual ~ProjectUpdateResponse();

  ProjectUpdateResponse(const ProjectUpdateResponse& from);

  inline ProjectUpdateResponse& operator=(const ProjectUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProjectUpdateResponse(ProjectUpdateResponse&& from) noexcept
    : ProjectUpdateResponse() {
    *this = ::std::move(from);
  }

  inline ProjectUpdateResponse& operator=(ProjectUpdateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ProjectUpdateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjectUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const ProjectUpdateResponse*>(
               &_ProjectUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ProjectUpdateResponse* other);
  friend void swap(ProjectUpdateResponse& a, ProjectUpdateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProjectUpdateResponse* New() const final {
    return CreateMaybeMessage<ProjectUpdateResponse>(nullptr);
  }

  ProjectUpdateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProjectUpdateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProjectUpdateResponse& from);
  void MergeFrom(const ProjectUpdateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectUpdateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ProjectUpdateResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fproject_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Domain

// string id = 1;
inline void Domain::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Domain::id() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Domain.id)
  return id_.GetNoArena();
}
inline void Domain::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.Domain.id)
}
#if LANG_CXX11
inline void Domain::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.Domain.id)
}
#endif
inline void Domain::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.Domain.id)
}
inline void Domain::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.Domain.id)
}
inline ::std::string* Domain::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Domain.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Domain::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Domain.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Domain::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Domain.id)
}

// string name = 2;
inline void Domain::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Domain::name() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Domain.name)
  return name_.GetNoArena();
}
inline void Domain::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.Domain.name)
}
#if LANG_CXX11
inline void Domain::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.Domain.name)
}
#endif
inline void Domain::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.Domain.name)
}
inline void Domain::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.Domain.name)
}
inline ::std::string* Domain::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Domain.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Domain::release_name() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Domain.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Domain::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Domain.name)
}

// -------------------------------------------------------------------

// Project

// string id = 1;
inline void Project::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Project::id() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Project.id)
  return id_.GetNoArena();
}
inline void Project::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.Project.id)
}
#if LANG_CXX11
inline void Project::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.Project.id)
}
#endif
inline void Project::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.Project.id)
}
inline void Project::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.Project.id)
}
inline ::std::string* Project::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Project.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Project::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Project.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Project::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Project.id)
}

// string name = 2;
inline void Project::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Project::name() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Project.name)
  return name_.GetNoArena();
}
inline void Project::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.Project.name)
}
#if LANG_CXX11
inline void Project::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.Project.name)
}
#endif
inline void Project::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.Project.name)
}
inline void Project::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.Project.name)
}
inline ::std::string* Project::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Project.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Project::release_name() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Project.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Project::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Project.name)
}

// repeated .flyteidl.admin.Domain domains = 3;
inline int Project::domains_size() const {
  return domains_.size();
}
inline void Project::clear_domains() {
  domains_.Clear();
}
inline ::flyteidl::admin::Domain* Project::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Project.domains)
  return domains_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Domain >*
Project::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.Project.domains)
  return &domains_;
}
inline const ::flyteidl::admin::Domain& Project::domains(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Project.domains)
  return domains_.Get(index);
}
inline ::flyteidl::admin::Domain* Project::add_domains() {
  // @@protoc_insertion_point(field_add:flyteidl.admin.Project.domains)
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Domain >&
Project::domains() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.Project.domains)
  return domains_;
}

// string description = 4;
inline void Project::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Project::description() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Project.description)
  return description_.GetNoArena();
}
inline void Project::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.Project.description)
}
#if LANG_CXX11
inline void Project::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.Project.description)
}
#endif
inline void Project::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.Project.description)
}
inline void Project::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.Project.description)
}
inline ::std::string* Project::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Project.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Project::release_description() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Project.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Project::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Project.description)
}

// .flyteidl.admin.Labels labels = 5;
inline bool Project::has_labels() const {
  return this != internal_default_instance() && labels_ != nullptr;
}
inline const ::flyteidl::admin::Labels& Project::labels() const {
  const ::flyteidl::admin::Labels* p = labels_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.Project.labels)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::Labels*>(
      &::flyteidl::admin::_Labels_default_instance_);
}
inline ::flyteidl::admin::Labels* Project::release_labels() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Project.labels)
  
  ::flyteidl::admin::Labels* temp = labels_;
  labels_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Labels* Project::mutable_labels() {
  
  if (labels_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Labels>(GetArenaNoVirtual());
    labels_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Project.labels)
  return labels_;
}
inline void Project::set_allocated_labels(::flyteidl::admin::Labels* labels) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(labels_);
  }
  if (labels) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      labels = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, labels, submessage_arena);
    }
    
  } else {
    
  }
  labels_ = labels;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Project.labels)
}

// .flyteidl.admin.Project.ProjectState state = 6;
inline void Project::clear_state() {
  state_ = 0;
}
inline ::flyteidl::admin::Project_ProjectState Project::state() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Project.state)
  return static_cast< ::flyteidl::admin::Project_ProjectState >(state_);
}
inline void Project::set_state(::flyteidl::admin::Project_ProjectState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.Project.state)
}

// -------------------------------------------------------------------

// Projects

// repeated .flyteidl.admin.Project projects = 1;
inline int Projects::projects_size() const {
  return projects_.size();
}
inline void Projects::clear_projects() {
  projects_.Clear();
}
inline ::flyteidl::admin::Project* Projects::mutable_projects(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Projects.projects)
  return projects_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Project >*
Projects::mutable_projects() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.Projects.projects)
  return &projects_;
}
inline const ::flyteidl::admin::Project& Projects::projects(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Projects.projects)
  return projects_.Get(index);
}
inline ::flyteidl::admin::Project* Projects::add_projects() {
  // @@protoc_insertion_point(field_add:flyteidl.admin.Projects.projects)
  return projects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Project >&
Projects::projects() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.Projects.projects)
  return projects_;
}

// string token = 2;
inline void Projects::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Projects::token() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Projects.token)
  return token_.GetNoArena();
}
inline void Projects::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.Projects.token)
}
#if LANG_CXX11
inline void Projects::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.Projects.token)
}
#endif
inline void Projects::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.Projects.token)
}
inline void Projects::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.Projects.token)
}
inline ::std::string* Projects::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Projects.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Projects::release_token() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Projects.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Projects::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Projects.token)
}

// -------------------------------------------------------------------

// ProjectListRequest

// uint32 limit = 1;
inline void ProjectListRequest::clear_limit() {
  limit_ = 0u;
}
inline ::google::protobuf::uint32 ProjectListRequest::limit() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ProjectListRequest.limit)
  return limit_;
}
inline void ProjectListRequest::set_limit(::google::protobuf::uint32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.ProjectListRequest.limit)
}

// string token = 2;
inline void ProjectListRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProjectListRequest::token() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ProjectListRequest.token)
  return token_.GetNoArena();
}
inline void ProjectListRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.ProjectListRequest.token)
}
#if LANG_CXX11
inline void ProjectListRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.ProjectListRequest.token)
}
#endif
inline void ProjectListRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.ProjectListRequest.token)
}
inline void ProjectListRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.ProjectListRequest.token)
}
inline ::std::string* ProjectListRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ProjectListRequest.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProjectListRequest::release_token() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ProjectListRequest.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProjectListRequest::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ProjectListRequest.token)
}

// string filters = 3;
inline void ProjectListRequest::clear_filters() {
  filters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProjectListRequest::filters() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ProjectListRequest.filters)
  return filters_.GetNoArena();
}
inline void ProjectListRequest::set_filters(const ::std::string& value) {
  
  filters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.ProjectListRequest.filters)
}
#if LANG_CXX11
inline void ProjectListRequest::set_filters(::std::string&& value) {
  
  filters_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.ProjectListRequest.filters)
}
#endif
inline void ProjectListRequest::set_filters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.ProjectListRequest.filters)
}
inline void ProjectListRequest::set_filters(const char* value, size_t size) {
  
  filters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.ProjectListRequest.filters)
}
inline ::std::string* ProjectListRequest::mutable_filters() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ProjectListRequest.filters)
  return filters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProjectListRequest::release_filters() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ProjectListRequest.filters)
  
  return filters_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProjectListRequest::set_allocated_filters(::std::string* filters) {
  if (filters != nullptr) {
    
  } else {
    
  }
  filters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filters);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ProjectListRequest.filters)
}

// .flyteidl.admin.Sort sort_by = 4;
inline bool ProjectListRequest::has_sort_by() const {
  return this != internal_default_instance() && sort_by_ != nullptr;
}
inline const ::flyteidl::admin::Sort& ProjectListRequest::sort_by() const {
  const ::flyteidl::admin::Sort* p = sort_by_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.ProjectListRequest.sort_by)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::Sort*>(
      &::flyteidl::admin::_Sort_default_instance_);
}
inline ::flyteidl::admin::Sort* ProjectListRequest::release_sort_by() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ProjectListRequest.sort_by)
  
  ::flyteidl::admin::Sort* temp = sort_by_;
  sort_by_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Sort* ProjectListRequest::mutable_sort_by() {
  
  if (sort_by_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Sort>(GetArenaNoVirtual());
    sort_by_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ProjectListRequest.sort_by)
  return sort_by_;
}
inline void ProjectListRequest::set_allocated_sort_by(::flyteidl::admin::Sort* sort_by) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sort_by_);
  }
  if (sort_by) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sort_by = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sort_by, submessage_arena);
    }
    
  } else {
    
  }
  sort_by_ = sort_by;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ProjectListRequest.sort_by)
}

// -------------------------------------------------------------------

// ProjectRegisterRequest

// .flyteidl.admin.Project project = 1;
inline bool ProjectRegisterRequest::has_project() const {
  return this != internal_default_instance() && project_ != nullptr;
}
inline void ProjectRegisterRequest::clear_project() {
  if (GetArenaNoVirtual() == nullptr && project_ != nullptr) {
    delete project_;
  }
  project_ = nullptr;
}
inline const ::flyteidl::admin::Project& ProjectRegisterRequest::project() const {
  const ::flyteidl::admin::Project* p = project_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.ProjectRegisterRequest.project)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::Project*>(
      &::flyteidl::admin::_Project_default_instance_);
}
inline ::flyteidl::admin::Project* ProjectRegisterRequest::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ProjectRegisterRequest.project)
  
  ::flyteidl::admin::Project* temp = project_;
  project_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Project* ProjectRegisterRequest::mutable_project() {
  
  if (project_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Project>(GetArenaNoVirtual());
    project_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ProjectRegisterRequest.project)
  return project_;
}
inline void ProjectRegisterRequest::set_allocated_project(::flyteidl::admin::Project* project) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete project_;
  }
  if (project) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      project = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, project, submessage_arena);
    }
    
  } else {
    
  }
  project_ = project;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ProjectRegisterRequest.project)
}

// -------------------------------------------------------------------

// ProjectRegisterResponse

// -------------------------------------------------------------------

// ProjectUpdateResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::flyteidl::admin::Project_ProjectState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::admin::Project_ProjectState>() {
  return ::flyteidl::admin::Project_ProjectState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fadmin_2fproject_2eproto
