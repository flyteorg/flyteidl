// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/service/identity.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fservice_2fidentity_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fservice_2fidentity_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "protoc-gen-swagger/options/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fservice_2fidentity_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fservice_2fidentity_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fservice_2fidentity_2eproto;
namespace flyteidl {
namespace service {
class UserInfoRequest;
struct UserInfoRequestDefaultTypeInternal;
extern UserInfoRequestDefaultTypeInternal _UserInfoRequest_default_instance_;
class UserInfoResponse;
struct UserInfoResponseDefaultTypeInternal;
extern UserInfoResponseDefaultTypeInternal _UserInfoResponse_default_instance_;
}  // namespace service
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::service::UserInfoRequest* Arena::CreateMaybeMessage<::flyteidl::service::UserInfoRequest>(Arena*);
template<> ::flyteidl::service::UserInfoResponse* Arena::CreateMaybeMessage<::flyteidl::service::UserInfoResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace service {

// ===================================================================

class UserInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:flyteidl.service.UserInfoRequest) */ {
 public:
  inline UserInfoRequest() : UserInfoRequest(nullptr) {}
  explicit constexpr UserInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfoRequest(const UserInfoRequest& from);
  UserInfoRequest(UserInfoRequest&& from) noexcept
    : UserInfoRequest() {
    *this = ::std::move(from);
  }

  inline UserInfoRequest& operator=(const UserInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfoRequest& operator=(UserInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfoRequest* internal_default_instance() {
    return reinterpret_cast<const UserInfoRequest*>(
               &_UserInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserInfoRequest& a, UserInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfoRequest>(arena);
  }

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.service.UserInfoRequest";
  }
  protected:
  explicit UserInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.service.UserInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fservice_2fidentity_2eproto;
};
// -------------------------------------------------------------------

class UserInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.service.UserInfoResponse) */ {
 public:
  inline UserInfoResponse() : UserInfoResponse(nullptr) {}
  ~UserInfoResponse() override;
  explicit constexpr UserInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfoResponse(const UserInfoResponse& from);
  UserInfoResponse(UserInfoResponse&& from) noexcept
    : UserInfoResponse() {
    *this = ::std::move(from);
  }

  inline UserInfoResponse& operator=(const UserInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfoResponse& operator=(UserInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfoResponse* internal_default_instance() {
    return reinterpret_cast<const UserInfoResponse*>(
               &_UserInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserInfoResponse& a, UserInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfoResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.service.UserInfoResponse";
  }
  protected:
  explicit UserInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubjectFieldNumber = 1,
    kNameFieldNumber = 2,
    kPreferredUsernameFieldNumber = 3,
    kGivenNameFieldNumber = 4,
    kFamilyNameFieldNumber = 5,
    kEmailFieldNumber = 6,
    kPictureFieldNumber = 7,
  };
  // string subject = 1 [json_name = "subject"];
  void clear_subject();
  const std::string& subject() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subject(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subject();
  PROTOBUF_NODISCARD std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string preferred_username = 3 [json_name = "preferredUsername"];
  void clear_preferred_username();
  const std::string& preferred_username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_preferred_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_preferred_username();
  PROTOBUF_NODISCARD std::string* release_preferred_username();
  void set_allocated_preferred_username(std::string* preferred_username);
  private:
  const std::string& _internal_preferred_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_preferred_username(const std::string& value);
  std::string* _internal_mutable_preferred_username();
  public:

  // string given_name = 4 [json_name = "givenName"];
  void clear_given_name();
  const std::string& given_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_given_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_given_name();
  PROTOBUF_NODISCARD std::string* release_given_name();
  void set_allocated_given_name(std::string* given_name);
  private:
  const std::string& _internal_given_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_given_name(const std::string& value);
  std::string* _internal_mutable_given_name();
  public:

  // string family_name = 5 [json_name = "familyName"];
  void clear_family_name();
  const std::string& family_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_family_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_family_name();
  PROTOBUF_NODISCARD std::string* release_family_name();
  void set_allocated_family_name(std::string* family_name);
  private:
  const std::string& _internal_family_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_family_name(const std::string& value);
  std::string* _internal_mutable_family_name();
  public:

  // string email = 6 [json_name = "email"];
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string picture = 7 [json_name = "picture"];
  void clear_picture();
  const std::string& picture() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_picture(ArgT0&& arg0, ArgT... args);
  std::string* mutable_picture();
  PROTOBUF_NODISCARD std::string* release_picture();
  void set_allocated_picture(std::string* picture);
  private:
  const std::string& _internal_picture() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_picture(const std::string& value);
  std::string* _internal_mutable_picture();
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.service.UserInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preferred_username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr given_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr family_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr picture_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fservice_2fidentity_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserInfoRequest

// -------------------------------------------------------------------

// UserInfoResponse

// string subject = 1 [json_name = "subject"];
inline void UserInfoResponse::clear_subject() {
  subject_.ClearToEmpty();
}
inline const std::string& UserInfoResponse::subject() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.UserInfoResponse.subject)
  return _internal_subject();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfoResponse::set_subject(ArgT0&& arg0, ArgT... args) {
 
 subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.service.UserInfoResponse.subject)
}
inline std::string* UserInfoResponse::mutable_subject() {
  std::string* _s = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:flyteidl.service.UserInfoResponse.subject)
  return _s;
}
inline const std::string& UserInfoResponse::_internal_subject() const {
  return subject_.Get();
}
inline void UserInfoResponse::_internal_set_subject(const std::string& value) {
  
  subject_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfoResponse::_internal_mutable_subject() {
  
  return subject_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfoResponse::release_subject() {
  // @@protoc_insertion_point(field_release:flyteidl.service.UserInfoResponse.subject)
  return subject_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfoResponse::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  subject_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (subject_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.UserInfoResponse.subject)
}

// string name = 2 [json_name = "name"];
inline void UserInfoResponse::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UserInfoResponse::name() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.UserInfoResponse.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfoResponse::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.service.UserInfoResponse.name)
}
inline std::string* UserInfoResponse::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:flyteidl.service.UserInfoResponse.name)
  return _s;
}
inline const std::string& UserInfoResponse::_internal_name() const {
  return name_.Get();
}
inline void UserInfoResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfoResponse::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfoResponse::release_name() {
  // @@protoc_insertion_point(field_release:flyteidl.service.UserInfoResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfoResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.UserInfoResponse.name)
}

// string preferred_username = 3 [json_name = "preferredUsername"];
inline void UserInfoResponse::clear_preferred_username() {
  preferred_username_.ClearToEmpty();
}
inline const std::string& UserInfoResponse::preferred_username() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.UserInfoResponse.preferred_username)
  return _internal_preferred_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfoResponse::set_preferred_username(ArgT0&& arg0, ArgT... args) {
 
 preferred_username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.service.UserInfoResponse.preferred_username)
}
inline std::string* UserInfoResponse::mutable_preferred_username() {
  std::string* _s = _internal_mutable_preferred_username();
  // @@protoc_insertion_point(field_mutable:flyteidl.service.UserInfoResponse.preferred_username)
  return _s;
}
inline const std::string& UserInfoResponse::_internal_preferred_username() const {
  return preferred_username_.Get();
}
inline void UserInfoResponse::_internal_set_preferred_username(const std::string& value) {
  
  preferred_username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfoResponse::_internal_mutable_preferred_username() {
  
  return preferred_username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfoResponse::release_preferred_username() {
  // @@protoc_insertion_point(field_release:flyteidl.service.UserInfoResponse.preferred_username)
  return preferred_username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfoResponse::set_allocated_preferred_username(std::string* preferred_username) {
  if (preferred_username != nullptr) {
    
  } else {
    
  }
  preferred_username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preferred_username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (preferred_username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    preferred_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.UserInfoResponse.preferred_username)
}

// string given_name = 4 [json_name = "givenName"];
inline void UserInfoResponse::clear_given_name() {
  given_name_.ClearToEmpty();
}
inline const std::string& UserInfoResponse::given_name() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.UserInfoResponse.given_name)
  return _internal_given_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfoResponse::set_given_name(ArgT0&& arg0, ArgT... args) {
 
 given_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.service.UserInfoResponse.given_name)
}
inline std::string* UserInfoResponse::mutable_given_name() {
  std::string* _s = _internal_mutable_given_name();
  // @@protoc_insertion_point(field_mutable:flyteidl.service.UserInfoResponse.given_name)
  return _s;
}
inline const std::string& UserInfoResponse::_internal_given_name() const {
  return given_name_.Get();
}
inline void UserInfoResponse::_internal_set_given_name(const std::string& value) {
  
  given_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfoResponse::_internal_mutable_given_name() {
  
  return given_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfoResponse::release_given_name() {
  // @@protoc_insertion_point(field_release:flyteidl.service.UserInfoResponse.given_name)
  return given_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfoResponse::set_allocated_given_name(std::string* given_name) {
  if (given_name != nullptr) {
    
  } else {
    
  }
  given_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), given_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (given_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    given_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.UserInfoResponse.given_name)
}

// string family_name = 5 [json_name = "familyName"];
inline void UserInfoResponse::clear_family_name() {
  family_name_.ClearToEmpty();
}
inline const std::string& UserInfoResponse::family_name() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.UserInfoResponse.family_name)
  return _internal_family_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfoResponse::set_family_name(ArgT0&& arg0, ArgT... args) {
 
 family_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.service.UserInfoResponse.family_name)
}
inline std::string* UserInfoResponse::mutable_family_name() {
  std::string* _s = _internal_mutable_family_name();
  // @@protoc_insertion_point(field_mutable:flyteidl.service.UserInfoResponse.family_name)
  return _s;
}
inline const std::string& UserInfoResponse::_internal_family_name() const {
  return family_name_.Get();
}
inline void UserInfoResponse::_internal_set_family_name(const std::string& value) {
  
  family_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfoResponse::_internal_mutable_family_name() {
  
  return family_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfoResponse::release_family_name() {
  // @@protoc_insertion_point(field_release:flyteidl.service.UserInfoResponse.family_name)
  return family_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfoResponse::set_allocated_family_name(std::string* family_name) {
  if (family_name != nullptr) {
    
  } else {
    
  }
  family_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), family_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (family_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    family_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.UserInfoResponse.family_name)
}

// string email = 6 [json_name = "email"];
inline void UserInfoResponse::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& UserInfoResponse::email() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.UserInfoResponse.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfoResponse::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.service.UserInfoResponse.email)
}
inline std::string* UserInfoResponse::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:flyteidl.service.UserInfoResponse.email)
  return _s;
}
inline const std::string& UserInfoResponse::_internal_email() const {
  return email_.Get();
}
inline void UserInfoResponse::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfoResponse::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfoResponse::release_email() {
  // @@protoc_insertion_point(field_release:flyteidl.service.UserInfoResponse.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfoResponse::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (email_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.UserInfoResponse.email)
}

// string picture = 7 [json_name = "picture"];
inline void UserInfoResponse::clear_picture() {
  picture_.ClearToEmpty();
}
inline const std::string& UserInfoResponse::picture() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.UserInfoResponse.picture)
  return _internal_picture();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfoResponse::set_picture(ArgT0&& arg0, ArgT... args) {
 
 picture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.service.UserInfoResponse.picture)
}
inline std::string* UserInfoResponse::mutable_picture() {
  std::string* _s = _internal_mutable_picture();
  // @@protoc_insertion_point(field_mutable:flyteidl.service.UserInfoResponse.picture)
  return _s;
}
inline const std::string& UserInfoResponse::_internal_picture() const {
  return picture_.Get();
}
inline void UserInfoResponse::_internal_set_picture(const std::string& value) {
  
  picture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfoResponse::_internal_mutable_picture() {
  
  return picture_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfoResponse::release_picture() {
  // @@protoc_insertion_point(field_release:flyteidl.service.UserInfoResponse.picture)
  return picture_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfoResponse::set_allocated_picture(std::string* picture) {
  if (picture != nullptr) {
    
  } else {
    
  }
  picture_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), picture,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (picture_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.UserInfoResponse.picture)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fservice_2fidentity_2eproto
