// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/sidecar.proto

#include "flyteidl/plugins/sidecar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fsidecar_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SidecarJob_AnnotationsEntry_DoNotUse_flyteidl_2fplugins_2fsidecar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fsidecar_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SidecarJob_LabelsEntry_DoNotUse_flyteidl_2fplugins_2fsidecar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_k8s_2eio_2fapi_2fcore_2fv1_2fgenerated_2eproto ::google::protobuf::internal::SCCInfo<10> scc_info_PodSpec_k8s_2eio_2fapi_2fcore_2fv1_2fgenerated_2eproto;
namespace flyteidl {
namespace plugins {
class SidecarJob_AnnotationsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SidecarJob_AnnotationsEntry_DoNotUse> _instance;
} _SidecarJob_AnnotationsEntry_DoNotUse_default_instance_;
class SidecarJob_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SidecarJob_LabelsEntry_DoNotUse> _instance;
} _SidecarJob_LabelsEntry_DoNotUse_default_instance_;
class SidecarJobDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SidecarJob> _instance;
} _SidecarJob_default_instance_;
}  // namespace plugins
}  // namespace flyteidl
static void InitDefaultsSidecarJob_AnnotationsEntry_DoNotUse_flyteidl_2fplugins_2fsidecar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::plugins::_SidecarJob_AnnotationsEntry_DoNotUse_default_instance_;
    new (ptr) ::flyteidl::plugins::SidecarJob_AnnotationsEntry_DoNotUse();
  }
  ::flyteidl::plugins::SidecarJob_AnnotationsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SidecarJob_AnnotationsEntry_DoNotUse_flyteidl_2fplugins_2fsidecar_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSidecarJob_AnnotationsEntry_DoNotUse_flyteidl_2fplugins_2fsidecar_2eproto}, {}};

static void InitDefaultsSidecarJob_LabelsEntry_DoNotUse_flyteidl_2fplugins_2fsidecar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::plugins::_SidecarJob_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::flyteidl::plugins::SidecarJob_LabelsEntry_DoNotUse();
  }
  ::flyteidl::plugins::SidecarJob_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SidecarJob_LabelsEntry_DoNotUse_flyteidl_2fplugins_2fsidecar_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSidecarJob_LabelsEntry_DoNotUse_flyteidl_2fplugins_2fsidecar_2eproto}, {}};

static void InitDefaultsSidecarJob_flyteidl_2fplugins_2fsidecar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::plugins::_SidecarJob_default_instance_;
    new (ptr) ::flyteidl::plugins::SidecarJob();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::plugins::SidecarJob::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_SidecarJob_flyteidl_2fplugins_2fsidecar_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsSidecarJob_flyteidl_2fplugins_2fsidecar_2eproto}, {
      &scc_info_PodSpec_k8s_2eio_2fapi_2fcore_2fv1_2fgenerated_2eproto.base,
      &scc_info_SidecarJob_AnnotationsEntry_DoNotUse_flyteidl_2fplugins_2fsidecar_2eproto.base,
      &scc_info_SidecarJob_LabelsEntry_DoNotUse_flyteidl_2fplugins_2fsidecar_2eproto.base,}};

void InitDefaults_flyteidl_2fplugins_2fsidecar_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_SidecarJob_AnnotationsEntry_DoNotUse_flyteidl_2fplugins_2fsidecar_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SidecarJob_LabelsEntry_DoNotUse_flyteidl_2fplugins_2fsidecar_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SidecarJob_flyteidl_2fplugins_2fsidecar_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fplugins_2fsidecar_2eproto[3];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fplugins_2fsidecar_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fplugins_2fsidecar_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fplugins_2fsidecar_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::SidecarJob_AnnotationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::SidecarJob_AnnotationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::SidecarJob_AnnotationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::SidecarJob_AnnotationsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::SidecarJob_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::SidecarJob_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::SidecarJob_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::SidecarJob_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::SidecarJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::SidecarJob, pod_spec_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::SidecarJob, primary_container_name_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::SidecarJob, annotations_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::SidecarJob, labels_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::flyteidl::plugins::SidecarJob_AnnotationsEntry_DoNotUse)},
  { 9, 16, sizeof(::flyteidl::plugins::SidecarJob_LabelsEntry_DoNotUse)},
  { 18, -1, sizeof(::flyteidl::plugins::SidecarJob)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::_SidecarJob_AnnotationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::_SidecarJob_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::_SidecarJob_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fplugins_2fsidecar_2eproto = {
  {}, AddDescriptors_flyteidl_2fplugins_2fsidecar_2eproto, "flyteidl/plugins/sidecar.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fplugins_2fsidecar_2eproto::offsets,
  file_level_metadata_flyteidl_2fplugins_2fsidecar_2eproto, 3, file_level_enum_descriptors_flyteidl_2fplugins_2fsidecar_2eproto, file_level_service_descriptors_flyteidl_2fplugins_2fsidecar_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fplugins_2fsidecar_2eproto[] =
  "\n\036flyteidl/plugins/sidecar.proto\022\020flytei"
  "dl.plugins\032\"k8s.io/api/core/v1/generated"
  ".proto\"\274\002\n\nSidecarJob\022-\n\010pod_spec\030\001 \001(\0132"
  "\033.k8s.io.api.core.v1.PodSpec\022\036\n\026primary_"
  "container_name\030\002 \001(\t\022B\n\013annotations\030\003 \003("
  "\0132-.flyteidl.plugins.SidecarJob.Annotati"
  "onsEntry\0228\n\006labels\030\004 \003(\0132(.flyteidl.plug"
  "ins.SidecarJob.LabelsEntry\0322\n\020Annotation"
  "sEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032-"
  "\n\013LabelsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001("
  "\t:\0028\001B9Z7github.com/flyteorg/flyteidl/ge"
  "n/pb-go/flyteidl/pluginsb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fplugins_2fsidecar_2eproto = {
  false, InitDefaults_flyteidl_2fplugins_2fsidecar_2eproto, 
  descriptor_table_protodef_flyteidl_2fplugins_2fsidecar_2eproto,
  "flyteidl/plugins/sidecar.proto", &assign_descriptors_table_flyteidl_2fplugins_2fsidecar_2eproto, 472,
};

void AddDescriptors_flyteidl_2fplugins_2fsidecar_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_k8s_2eio_2fapi_2fcore_2fv1_2fgenerated_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fplugins_2fsidecar_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fplugins_2fsidecar_2eproto = []() { AddDescriptors_flyteidl_2fplugins_2fsidecar_2eproto(); return true; }();
namespace flyteidl {
namespace plugins {

// ===================================================================

SidecarJob_AnnotationsEntry_DoNotUse::SidecarJob_AnnotationsEntry_DoNotUse() {}
SidecarJob_AnnotationsEntry_DoNotUse::SidecarJob_AnnotationsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void SidecarJob_AnnotationsEntry_DoNotUse::MergeFrom(const SidecarJob_AnnotationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata SidecarJob_AnnotationsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fplugins_2fsidecar_2eproto);
  return ::file_level_metadata_flyteidl_2fplugins_2fsidecar_2eproto[0];
}
void SidecarJob_AnnotationsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SidecarJob_AnnotationsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      SidecarJob_AnnotationsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.plugins.SidecarJob.AnnotationsEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.plugins.SidecarJob.AnnotationsEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

SidecarJob_LabelsEntry_DoNotUse::SidecarJob_LabelsEntry_DoNotUse() {}
SidecarJob_LabelsEntry_DoNotUse::SidecarJob_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void SidecarJob_LabelsEntry_DoNotUse::MergeFrom(const SidecarJob_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata SidecarJob_LabelsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fplugins_2fsidecar_2eproto);
  return ::file_level_metadata_flyteidl_2fplugins_2fsidecar_2eproto[1];
}
void SidecarJob_LabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SidecarJob_LabelsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      SidecarJob_LabelsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.plugins.SidecarJob.LabelsEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.plugins.SidecarJob.LabelsEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void SidecarJob::InitAsDefaultInstance() {
  ::flyteidl::plugins::_SidecarJob_default_instance_._instance.get_mutable()->pod_spec_ = const_cast< ::k8s::io::api::core::v1::PodSpec*>(
      ::k8s::io::api::core::v1::PodSpec::internal_default_instance());
}
class SidecarJob::HasBitSetters {
 public:
  static const ::k8s::io::api::core::v1::PodSpec& pod_spec(const SidecarJob* msg);
};

const ::k8s::io::api::core::v1::PodSpec&
SidecarJob::HasBitSetters::pod_spec(const SidecarJob* msg) {
  return *msg->pod_spec_;
}
void SidecarJob::clear_pod_spec() {
  if (GetArenaNoVirtual() == nullptr && pod_spec_ != nullptr) {
    delete pod_spec_;
  }
  pod_spec_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SidecarJob::kPodSpecFieldNumber;
const int SidecarJob::kPrimaryContainerNameFieldNumber;
const int SidecarJob::kAnnotationsFieldNumber;
const int SidecarJob::kLabelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SidecarJob::SidecarJob()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.plugins.SidecarJob)
}
SidecarJob::SidecarJob(const SidecarJob& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  annotations_.MergeFrom(from.annotations_);
  labels_.MergeFrom(from.labels_);
  primary_container_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.primary_container_name().size() > 0) {
    primary_container_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_container_name_);
  }
  if (from.has_pod_spec()) {
    pod_spec_ = new ::k8s::io::api::core::v1::PodSpec(*from.pod_spec_);
  } else {
    pod_spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.SidecarJob)
}

void SidecarJob::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SidecarJob_flyteidl_2fplugins_2fsidecar_2eproto.base);
  primary_container_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pod_spec_ = nullptr;
}

SidecarJob::~SidecarJob() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.SidecarJob)
  SharedDtor();
}

void SidecarJob::SharedDtor() {
  primary_container_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pod_spec_;
}

void SidecarJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SidecarJob& SidecarJob::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SidecarJob_flyteidl_2fplugins_2fsidecar_2eproto.base);
  return *internal_default_instance();
}


void SidecarJob::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.plugins.SidecarJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotations_.Clear();
  labels_.Clear();
  primary_container_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pod_spec_ != nullptr) {
    delete pod_spec_;
  }
  pod_spec_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SidecarJob::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SidecarJob*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .k8s.io.api.core.v1.PodSpec pod_spec = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::k8s::io::api::core::v1::PodSpec::_InternalParse;
        object = msg->mutable_pod_spec();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string primary_container_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.plugins.SidecarJob.primary_container_name");
        object = msg->mutable_primary_container_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // map<string, string> annotations = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::flyteidl::plugins::SidecarJob_AnnotationsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->annotations_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // map<string, string> labels = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::flyteidl::plugins::SidecarJob_LabelsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->labels_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SidecarJob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.plugins.SidecarJob)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .k8s.io.api.core.v1.PodSpec pod_spec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pod_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string primary_container_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_primary_container_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->primary_container_name().data(), static_cast<int>(this->primary_container_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.SidecarJob.primary_container_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> annotations = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          SidecarJob_AnnotationsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              SidecarJob_AnnotationsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&annotations_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.SidecarJob.AnnotationsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.SidecarJob.AnnotationsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          SidecarJob_LabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              SidecarJob_LabelsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.SidecarJob.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.SidecarJob.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.plugins.SidecarJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.plugins.SidecarJob)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SidecarJob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.plugins.SidecarJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .k8s.io.api.core.v1.PodSpec pod_spec = 1;
  if (this->has_pod_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::pod_spec(this), output);
  }

  // string primary_container_name = 2;
  if (this->primary_container_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->primary_container_name().data(), static_cast<int>(this->primary_container_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.SidecarJob.primary_container_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->primary_container_name(), output);
  }

  // map<string, string> annotations = 3;
  if (!this->annotations().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.plugins.SidecarJob.AnnotationsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.plugins.SidecarJob.AnnotationsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->annotations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->annotations().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->annotations().begin();
          it != this->annotations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SidecarJob_AnnotationsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(annotations_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<SidecarJob_AnnotationsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->annotations().begin();
          it != this->annotations().end(); ++it) {
        entry.reset(annotations_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> labels = 4;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.plugins.SidecarJob.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.plugins.SidecarJob.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SidecarJob_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<SidecarJob_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.plugins.SidecarJob)
}

::google::protobuf::uint8* SidecarJob::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.plugins.SidecarJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .k8s.io.api.core.v1.PodSpec pod_spec = 1;
  if (this->has_pod_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::pod_spec(this), target);
  }

  // string primary_container_name = 2;
  if (this->primary_container_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->primary_container_name().data(), static_cast<int>(this->primary_container_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.SidecarJob.primary_container_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->primary_container_name(), target);
  }

  // map<string, string> annotations = 3;
  if (!this->annotations().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.plugins.SidecarJob.AnnotationsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.plugins.SidecarJob.AnnotationsEntry.value");
      }
    };

    if (false &&
        this->annotations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->annotations().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->annotations().begin();
          it != this->annotations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SidecarJob_AnnotationsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(annotations_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<SidecarJob_AnnotationsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->annotations().begin();
          it != this->annotations().end(); ++it) {
        entry.reset(annotations_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> labels = 4;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.plugins.SidecarJob.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.plugins.SidecarJob.LabelsEntry.value");
      }
    };

    if (false &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SidecarJob_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<SidecarJob_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.plugins.SidecarJob)
  return target;
}

size_t SidecarJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.plugins.SidecarJob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> annotations = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->annotations_size());
  {
    ::std::unique_ptr<SidecarJob_AnnotationsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->annotations().begin();
        it != this->annotations().end(); ++it) {
      entry.reset(annotations_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> labels = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::std::unique_ptr<SidecarJob_LabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string primary_container_name = 2;
  if (this->primary_container_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->primary_container_name());
  }

  // .k8s.io.api.core.v1.PodSpec pod_spec = 1;
  if (this->has_pod_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pod_spec_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SidecarJob::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.plugins.SidecarJob)
  GOOGLE_DCHECK_NE(&from, this);
  const SidecarJob* source =
      ::google::protobuf::DynamicCastToGenerated<SidecarJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.plugins.SidecarJob)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.plugins.SidecarJob)
    MergeFrom(*source);
  }
}

void SidecarJob::MergeFrom(const SidecarJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.plugins.SidecarJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  labels_.MergeFrom(from.labels_);
  if (from.primary_container_name().size() > 0) {

    primary_container_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_container_name_);
  }
  if (from.has_pod_spec()) {
    mutable_pod_spec()->::k8s::io::api::core::v1::PodSpec::MergeFrom(from.pod_spec());
  }
}

void SidecarJob::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.plugins.SidecarJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SidecarJob::CopyFrom(const SidecarJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.plugins.SidecarJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SidecarJob::IsInitialized() const {
  return true;
}

void SidecarJob::Swap(SidecarJob* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SidecarJob::InternalSwap(SidecarJob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  annotations_.Swap(&other->annotations_);
  labels_.Swap(&other->labels_);
  primary_container_name_.Swap(&other->primary_container_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pod_spec_, other->pod_spec_);
}

::google::protobuf::Metadata SidecarJob::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fplugins_2fsidecar_2eproto);
  return ::file_level_metadata_flyteidl_2fplugins_2fsidecar_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace plugins
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::SidecarJob_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage< ::flyteidl::plugins::SidecarJob_AnnotationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::plugins::SidecarJob_AnnotationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::SidecarJob_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::flyteidl::plugins::SidecarJob_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::plugins::SidecarJob_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::SidecarJob* Arena::CreateMaybeMessage< ::flyteidl::plugins::SidecarJob >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::plugins::SidecarJob >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
