// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/qubole.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fplugins_2fqubole_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fplugins_2fqubole_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fqubole_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fplugins_2fqubole_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fplugins_2fqubole_2eproto();
namespace flyteidl {
namespace plugins {
class HiveQuery;
class HiveQueryDefaultTypeInternal;
extern HiveQueryDefaultTypeInternal _HiveQuery_default_instance_;
class HiveQueryCollection;
class HiveQueryCollectionDefaultTypeInternal;
extern HiveQueryCollectionDefaultTypeInternal _HiveQueryCollection_default_instance_;
class QuboleHiveJob;
class QuboleHiveJobDefaultTypeInternal;
extern QuboleHiveJobDefaultTypeInternal _QuboleHiveJob_default_instance_;
}  // namespace plugins
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::plugins::HiveQuery* Arena::CreateMaybeMessage<::flyteidl::plugins::HiveQuery>(Arena*);
template<> ::flyteidl::plugins::HiveQueryCollection* Arena::CreateMaybeMessage<::flyteidl::plugins::HiveQueryCollection>(Arena*);
template<> ::flyteidl::plugins::QuboleHiveJob* Arena::CreateMaybeMessage<::flyteidl::plugins::QuboleHiveJob>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace plugins {

// ===================================================================

class HiveQuery final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.HiveQuery) */ {
 public:
  HiveQuery();
  virtual ~HiveQuery();

  HiveQuery(const HiveQuery& from);

  inline HiveQuery& operator=(const HiveQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HiveQuery(HiveQuery&& from) noexcept
    : HiveQuery() {
    *this = ::std::move(from);
  }

  inline HiveQuery& operator=(HiveQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HiveQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HiveQuery* internal_default_instance() {
    return reinterpret_cast<const HiveQuery*>(
               &_HiveQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(HiveQuery* other);
  friend void swap(HiveQuery& a, HiveQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HiveQuery* New() const final {
    return CreateMaybeMessage<HiveQuery>(nullptr);
  }

  HiveQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HiveQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HiveQuery& from);
  void MergeFrom(const HiveQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HiveQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // uint32 timeout_sec = 2;
  void clear_timeout_sec();
  static const int kTimeoutSecFieldNumber = 2;
  ::google::protobuf::uint32 timeout_sec() const;
  void set_timeout_sec(::google::protobuf::uint32 value);

  // uint32 retryCount = 3;
  void clear_retrycount();
  static const int kRetryCountFieldNumber = 3;
  ::google::protobuf::uint32 retrycount() const;
  void set_retrycount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.HiveQuery)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::uint32 timeout_sec_;
  ::google::protobuf::uint32 retrycount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fqubole_2eproto;
};
// -------------------------------------------------------------------

class HiveQueryCollection final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.HiveQueryCollection) */ {
 public:
  HiveQueryCollection();
  virtual ~HiveQueryCollection();

  HiveQueryCollection(const HiveQueryCollection& from);

  inline HiveQueryCollection& operator=(const HiveQueryCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HiveQueryCollection(HiveQueryCollection&& from) noexcept
    : HiveQueryCollection() {
    *this = ::std::move(from);
  }

  inline HiveQueryCollection& operator=(HiveQueryCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HiveQueryCollection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HiveQueryCollection* internal_default_instance() {
    return reinterpret_cast<const HiveQueryCollection*>(
               &_HiveQueryCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(HiveQueryCollection* other);
  friend void swap(HiveQueryCollection& a, HiveQueryCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HiveQueryCollection* New() const final {
    return CreateMaybeMessage<HiveQueryCollection>(nullptr);
  }

  HiveQueryCollection* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HiveQueryCollection>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HiveQueryCollection& from);
  void MergeFrom(const HiveQueryCollection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HiveQueryCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.plugins.HiveQuery queries = 2;
  int queries_size() const;
  void clear_queries();
  static const int kQueriesFieldNumber = 2;
  ::flyteidl::plugins::HiveQuery* mutable_queries(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::HiveQuery >*
      mutable_queries();
  const ::flyteidl::plugins::HiveQuery& queries(int index) const;
  ::flyteidl::plugins::HiveQuery* add_queries();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::HiveQuery >&
      queries() const;

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.HiveQueryCollection)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::HiveQuery > queries_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fqubole_2eproto;
};
// -------------------------------------------------------------------

class QuboleHiveJob final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.QuboleHiveJob) */ {
 public:
  QuboleHiveJob();
  virtual ~QuboleHiveJob();

  QuboleHiveJob(const QuboleHiveJob& from);

  inline QuboleHiveJob& operator=(const QuboleHiveJob& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuboleHiveJob(QuboleHiveJob&& from) noexcept
    : QuboleHiveJob() {
    *this = ::std::move(from);
  }

  inline QuboleHiveJob& operator=(QuboleHiveJob&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const QuboleHiveJob& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuboleHiveJob* internal_default_instance() {
    return reinterpret_cast<const QuboleHiveJob*>(
               &_QuboleHiveJob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(QuboleHiveJob* other);
  friend void swap(QuboleHiveJob& a, QuboleHiveJob& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuboleHiveJob* New() const final {
    return CreateMaybeMessage<QuboleHiveJob>(nullptr);
  }

  QuboleHiveJob* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuboleHiveJob>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuboleHiveJob& from);
  void MergeFrom(const QuboleHiveJob& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuboleHiveJob* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string tags = 3;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 3;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_tags();

  // string cluster_label = 1;
  void clear_cluster_label();
  static const int kClusterLabelFieldNumber = 1;
  const ::std::string& cluster_label() const;
  void set_cluster_label(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_label(::std::string&& value);
  #endif
  void set_cluster_label(const char* value);
  void set_cluster_label(const char* value, size_t size);
  ::std::string* mutable_cluster_label();
  ::std::string* release_cluster_label();
  void set_allocated_cluster_label(::std::string* cluster_label);

  // .flyteidl.plugins.HiveQueryCollection query_collection = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_query_collection() const;
  PROTOBUF_DEPRECATED void clear_query_collection();
  PROTOBUF_DEPRECATED static const int kQueryCollectionFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::flyteidl::plugins::HiveQueryCollection& query_collection() const;
  PROTOBUF_DEPRECATED ::flyteidl::plugins::HiveQueryCollection* release_query_collection();
  PROTOBUF_DEPRECATED ::flyteidl::plugins::HiveQueryCollection* mutable_query_collection();
  PROTOBUF_DEPRECATED void set_allocated_query_collection(::flyteidl::plugins::HiveQueryCollection* query_collection);

  // .flyteidl.plugins.HiveQuery query = 4;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 4;
  const ::flyteidl::plugins::HiveQuery& query() const;
  ::flyteidl::plugins::HiveQuery* release_query();
  ::flyteidl::plugins::HiveQuery* mutable_query();
  void set_allocated_query(::flyteidl::plugins::HiveQuery* query);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.QuboleHiveJob)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> tags_;
  ::google::protobuf::internal::ArenaStringPtr cluster_label_;
  ::flyteidl::plugins::HiveQueryCollection* query_collection_;
  ::flyteidl::plugins::HiveQuery* query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fqubole_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HiveQuery

// string query = 1;
inline void HiveQuery::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HiveQuery::query() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.HiveQuery.query)
  return query_.GetNoArena();
}
inline void HiveQuery::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.HiveQuery.query)
}
#if LANG_CXX11
inline void HiveQuery::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.HiveQuery.query)
}
#endif
inline void HiveQuery::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.HiveQuery.query)
}
inline void HiveQuery::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.HiveQuery.query)
}
inline ::std::string* HiveQuery::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.HiveQuery.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HiveQuery::release_query() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.HiveQuery.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HiveQuery::set_allocated_query(::std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.HiveQuery.query)
}

// uint32 timeout_sec = 2;
inline void HiveQuery::clear_timeout_sec() {
  timeout_sec_ = 0u;
}
inline ::google::protobuf::uint32 HiveQuery::timeout_sec() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.HiveQuery.timeout_sec)
  return timeout_sec_;
}
inline void HiveQuery::set_timeout_sec(::google::protobuf::uint32 value) {
  
  timeout_sec_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.HiveQuery.timeout_sec)
}

// uint32 retryCount = 3;
inline void HiveQuery::clear_retrycount() {
  retrycount_ = 0u;
}
inline ::google::protobuf::uint32 HiveQuery::retrycount() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.HiveQuery.retryCount)
  return retrycount_;
}
inline void HiveQuery::set_retrycount(::google::protobuf::uint32 value) {
  
  retrycount_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.HiveQuery.retryCount)
}

// -------------------------------------------------------------------

// HiveQueryCollection

// repeated .flyteidl.plugins.HiveQuery queries = 2;
inline int HiveQueryCollection::queries_size() const {
  return queries_.size();
}
inline void HiveQueryCollection::clear_queries() {
  queries_.Clear();
}
inline ::flyteidl::plugins::HiveQuery* HiveQueryCollection::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.HiveQueryCollection.queries)
  return queries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::HiveQuery >*
HiveQueryCollection::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.plugins.HiveQueryCollection.queries)
  return &queries_;
}
inline const ::flyteidl::plugins::HiveQuery& HiveQueryCollection::queries(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.HiveQueryCollection.queries)
  return queries_.Get(index);
}
inline ::flyteidl::plugins::HiveQuery* HiveQueryCollection::add_queries() {
  // @@protoc_insertion_point(field_add:flyteidl.plugins.HiveQueryCollection.queries)
  return queries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::plugins::HiveQuery >&
HiveQueryCollection::queries() const {
  // @@protoc_insertion_point(field_list:flyteidl.plugins.HiveQueryCollection.queries)
  return queries_;
}

// -------------------------------------------------------------------

// QuboleHiveJob

// string cluster_label = 1;
inline void QuboleHiveJob::clear_cluster_label() {
  cluster_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuboleHiveJob::cluster_label() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.QuboleHiveJob.cluster_label)
  return cluster_label_.GetNoArena();
}
inline void QuboleHiveJob::set_cluster_label(const ::std::string& value) {
  
  cluster_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.QuboleHiveJob.cluster_label)
}
#if LANG_CXX11
inline void QuboleHiveJob::set_cluster_label(::std::string&& value) {
  
  cluster_label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.QuboleHiveJob.cluster_label)
}
#endif
inline void QuboleHiveJob::set_cluster_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.QuboleHiveJob.cluster_label)
}
inline void QuboleHiveJob::set_cluster_label(const char* value, size_t size) {
  
  cluster_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.QuboleHiveJob.cluster_label)
}
inline ::std::string* QuboleHiveJob::mutable_cluster_label() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.QuboleHiveJob.cluster_label)
  return cluster_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuboleHiveJob::release_cluster_label() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.QuboleHiveJob.cluster_label)
  
  return cluster_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuboleHiveJob::set_allocated_cluster_label(::std::string* cluster_label) {
  if (cluster_label != nullptr) {
    
  } else {
    
  }
  cluster_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_label);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.QuboleHiveJob.cluster_label)
}

// .flyteidl.plugins.HiveQueryCollection query_collection = 2 [deprecated = true];
inline bool QuboleHiveJob::has_query_collection() const {
  return this != internal_default_instance() && query_collection_ != nullptr;
}
inline void QuboleHiveJob::clear_query_collection() {
  if (GetArenaNoVirtual() == nullptr && query_collection_ != nullptr) {
    delete query_collection_;
  }
  query_collection_ = nullptr;
}
inline const ::flyteidl::plugins::HiveQueryCollection& QuboleHiveJob::query_collection() const {
  const ::flyteidl::plugins::HiveQueryCollection* p = query_collection_;
  // @@protoc_insertion_point(field_get:flyteidl.plugins.QuboleHiveJob.query_collection)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::plugins::HiveQueryCollection*>(
      &::flyteidl::plugins::_HiveQueryCollection_default_instance_);
}
inline ::flyteidl::plugins::HiveQueryCollection* QuboleHiveJob::release_query_collection() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.QuboleHiveJob.query_collection)
  
  ::flyteidl::plugins::HiveQueryCollection* temp = query_collection_;
  query_collection_ = nullptr;
  return temp;
}
inline ::flyteidl::plugins::HiveQueryCollection* QuboleHiveJob::mutable_query_collection() {
  
  if (query_collection_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::plugins::HiveQueryCollection>(GetArenaNoVirtual());
    query_collection_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.QuboleHiveJob.query_collection)
  return query_collection_;
}
inline void QuboleHiveJob::set_allocated_query_collection(::flyteidl::plugins::HiveQueryCollection* query_collection) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete query_collection_;
  }
  if (query_collection) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      query_collection = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query_collection, submessage_arena);
    }
    
  } else {
    
  }
  query_collection_ = query_collection;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.QuboleHiveJob.query_collection)
}

// repeated string tags = 3;
inline int QuboleHiveJob::tags_size() const {
  return tags_.size();
}
inline void QuboleHiveJob::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& QuboleHiveJob::tags(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.QuboleHiveJob.tags)
  return tags_.Get(index);
}
inline ::std::string* QuboleHiveJob::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.QuboleHiveJob.tags)
  return tags_.Mutable(index);
}
inline void QuboleHiveJob::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.plugins.QuboleHiveJob.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void QuboleHiveJob::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.plugins.QuboleHiveJob.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void QuboleHiveJob::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.QuboleHiveJob.tags)
}
inline void QuboleHiveJob::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.QuboleHiveJob.tags)
}
inline ::std::string* QuboleHiveJob::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:flyteidl.plugins.QuboleHiveJob.tags)
  return tags_.Add();
}
inline void QuboleHiveJob::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.plugins.QuboleHiveJob.tags)
}
#if LANG_CXX11
inline void QuboleHiveJob::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.plugins.QuboleHiveJob.tags)
}
#endif
inline void QuboleHiveJob::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.plugins.QuboleHiveJob.tags)
}
inline void QuboleHiveJob::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.plugins.QuboleHiveJob.tags)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
QuboleHiveJob::tags() const {
  // @@protoc_insertion_point(field_list:flyteidl.plugins.QuboleHiveJob.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
QuboleHiveJob::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.plugins.QuboleHiveJob.tags)
  return &tags_;
}

// .flyteidl.plugins.HiveQuery query = 4;
inline bool QuboleHiveJob::has_query() const {
  return this != internal_default_instance() && query_ != nullptr;
}
inline void QuboleHiveJob::clear_query() {
  if (GetArenaNoVirtual() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
}
inline const ::flyteidl::plugins::HiveQuery& QuboleHiveJob::query() const {
  const ::flyteidl::plugins::HiveQuery* p = query_;
  // @@protoc_insertion_point(field_get:flyteidl.plugins.QuboleHiveJob.query)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::plugins::HiveQuery*>(
      &::flyteidl::plugins::_HiveQuery_default_instance_);
}
inline ::flyteidl::plugins::HiveQuery* QuboleHiveJob::release_query() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.QuboleHiveJob.query)
  
  ::flyteidl::plugins::HiveQuery* temp = query_;
  query_ = nullptr;
  return temp;
}
inline ::flyteidl::plugins::HiveQuery* QuboleHiveJob::mutable_query() {
  
  if (query_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::plugins::HiveQuery>(GetArenaNoVirtual());
    query_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.QuboleHiveJob.query)
  return query_;
}
inline void QuboleHiveJob::set_allocated_query(::flyteidl::plugins::HiveQuery* query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete query_;
  }
  if (query) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      query = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    
  } else {
    
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.QuboleHiveJob.query)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace plugins
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fplugins_2fqubole_2eproto
