// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/description_entity.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fadmin_2fdescription_5fentity_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fadmin_2fdescription_5fentity_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/identifier.pb.h"
#include "flyteidl/admin/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fdescription_5fentity_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fadmin_2fdescription_5fentity_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fadmin_2fdescription_5fentity_2eproto();
namespace flyteidl {
namespace admin {
class Description;
class DescriptionDefaultTypeInternal;
extern DescriptionDefaultTypeInternal _Description_default_instance_;
class DescriptionEntity;
class DescriptionEntityDefaultTypeInternal;
extern DescriptionEntityDefaultTypeInternal _DescriptionEntity_default_instance_;
class DescriptionEntityList;
class DescriptionEntityListDefaultTypeInternal;
extern DescriptionEntityListDefaultTypeInternal _DescriptionEntityList_default_instance_;
class DescriptionEntityListRequest;
class DescriptionEntityListRequestDefaultTypeInternal;
extern DescriptionEntityListRequestDefaultTypeInternal _DescriptionEntityListRequest_default_instance_;
class SourceCode;
class SourceCodeDefaultTypeInternal;
extern SourceCodeDefaultTypeInternal _SourceCode_default_instance_;
}  // namespace admin
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::admin::Description* Arena::CreateMaybeMessage<::flyteidl::admin::Description>(Arena*);
template<> ::flyteidl::admin::DescriptionEntity* Arena::CreateMaybeMessage<::flyteidl::admin::DescriptionEntity>(Arena*);
template<> ::flyteidl::admin::DescriptionEntityList* Arena::CreateMaybeMessage<::flyteidl::admin::DescriptionEntityList>(Arena*);
template<> ::flyteidl::admin::DescriptionEntityListRequest* Arena::CreateMaybeMessage<::flyteidl::admin::DescriptionEntityListRequest>(Arena*);
template<> ::flyteidl::admin::SourceCode* Arena::CreateMaybeMessage<::flyteidl::admin::SourceCode>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace admin {

enum DescriptionFormat {
  DESCRIPTION_FORMAT_UNKNOWN = 0,
  DESCRIPTION_FORMAT_MARKDOWN = 1,
  DESCRIPTION_FORMAT_HTML = 2,
  DESCRIPTION_FORMAT_RST = 3,
  DescriptionFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  DescriptionFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool DescriptionFormat_IsValid(int value);
const DescriptionFormat DescriptionFormat_MIN = DESCRIPTION_FORMAT_UNKNOWN;
const DescriptionFormat DescriptionFormat_MAX = DESCRIPTION_FORMAT_RST;
const int DescriptionFormat_ARRAYSIZE = DescriptionFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* DescriptionFormat_descriptor();
inline const ::std::string& DescriptionFormat_Name(DescriptionFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    DescriptionFormat_descriptor(), value);
}
inline bool DescriptionFormat_Parse(
    const ::std::string& name, DescriptionFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DescriptionFormat>(
    DescriptionFormat_descriptor(), name, value);
}
// ===================================================================

class DescriptionEntity final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.DescriptionEntity) */ {
 public:
  DescriptionEntity();
  virtual ~DescriptionEntity();

  DescriptionEntity(const DescriptionEntity& from);

  inline DescriptionEntity& operator=(const DescriptionEntity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DescriptionEntity(DescriptionEntity&& from) noexcept
    : DescriptionEntity() {
    *this = ::std::move(from);
  }

  inline DescriptionEntity& operator=(DescriptionEntity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DescriptionEntity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DescriptionEntity* internal_default_instance() {
    return reinterpret_cast<const DescriptionEntity*>(
               &_DescriptionEntity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DescriptionEntity* other);
  friend void swap(DescriptionEntity& a, DescriptionEntity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DescriptionEntity* New() const final {
    return CreateMaybeMessage<DescriptionEntity>(nullptr);
  }

  DescriptionEntity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DescriptionEntity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DescriptionEntity& from);
  void MergeFrom(const DescriptionEntity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescriptionEntity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string tags = 5;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 5;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_tags();

  // string short_description = 2;
  void clear_short_description();
  static const int kShortDescriptionFieldNumber = 2;
  const ::std::string& short_description() const;
  void set_short_description(const ::std::string& value);
  #if LANG_CXX11
  void set_short_description(::std::string&& value);
  #endif
  void set_short_description(const char* value);
  void set_short_description(const char* value, size_t size);
  ::std::string* mutable_short_description();
  ::std::string* release_short_description();
  void set_allocated_short_description(::std::string* short_description);

  // .flyteidl.core.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::Identifier& id() const;
  ::flyteidl::core::Identifier* release_id();
  ::flyteidl::core::Identifier* mutable_id();
  void set_allocated_id(::flyteidl::core::Identifier* id);

  // .flyteidl.admin.Description long_description = 3;
  bool has_long_description() const;
  void clear_long_description();
  static const int kLongDescriptionFieldNumber = 3;
  const ::flyteidl::admin::Description& long_description() const;
  ::flyteidl::admin::Description* release_long_description();
  ::flyteidl::admin::Description* mutable_long_description();
  void set_allocated_long_description(::flyteidl::admin::Description* long_description);

  // .flyteidl.admin.SourceCode source_code = 4;
  bool has_source_code() const;
  void clear_source_code();
  static const int kSourceCodeFieldNumber = 4;
  const ::flyteidl::admin::SourceCode& source_code() const;
  ::flyteidl::admin::SourceCode* release_source_code();
  ::flyteidl::admin::SourceCode* mutable_source_code();
  void set_allocated_source_code(::flyteidl::admin::SourceCode* source_code);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.DescriptionEntity)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> tags_;
  ::google::protobuf::internal::ArenaStringPtr short_description_;
  ::flyteidl::core::Identifier* id_;
  ::flyteidl::admin::Description* long_description_;
  ::flyteidl::admin::SourceCode* source_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fdescription_5fentity_2eproto;
};
// -------------------------------------------------------------------

class Description final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Description) */ {
 public:
  Description();
  virtual ~Description();

  Description(const Description& from);

  inline Description& operator=(const Description& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Description(Description&& from) noexcept
    : Description() {
    *this = ::std::move(from);
  }

  inline Description& operator=(Description&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Description& default_instance();

  enum ContentCase {
    kValue = 1,
    kUri = 2,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Description* internal_default_instance() {
    return reinterpret_cast<const Description*>(
               &_Description_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Description* other);
  friend void swap(Description& a, Description& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Description* New() const final {
    return CreateMaybeMessage<Description>(nullptr);
  }

  Description* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Description>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Description& from);
  void MergeFrom(const Description& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Description* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string icon_link = 4;
  void clear_icon_link();
  static const int kIconLinkFieldNumber = 4;
  const ::std::string& icon_link() const;
  void set_icon_link(const ::std::string& value);
  #if LANG_CXX11
  void set_icon_link(::std::string&& value);
  #endif
  void set_icon_link(const char* value);
  void set_icon_link(const char* value, size_t size);
  ::std::string* mutable_icon_link();
  ::std::string* release_icon_link();
  void set_allocated_icon_link(::std::string* icon_link);

  // .flyteidl.admin.DescriptionFormat format = 3;
  void clear_format();
  static const int kFormatFieldNumber = 3;
  ::flyteidl::admin::DescriptionFormat format() const;
  void set_format(::flyteidl::admin::DescriptionFormat value);

  // string value = 1;
  private:
  bool has_value() const;
  public:
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // string uri = 2;
  private:
  bool has_uri() const;
  public:
  void clear_uri();
  static const int kUriFieldNumber = 2;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.admin.Description)
 private:
  class HasBitSetters;
  void set_has_value();
  void set_has_uri();

  inline bool has_content() const;
  inline void clear_has_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr icon_link_;
  int format_;
  union ContentUnion {
    ContentUnion() {}
    ::google::protobuf::internal::ArenaStringPtr value_;
    ::google::protobuf::internal::ArenaStringPtr uri_;
  } content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fadmin_2fdescription_5fentity_2eproto;
};
// -------------------------------------------------------------------

class SourceCode final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.SourceCode) */ {
 public:
  SourceCode();
  virtual ~SourceCode();

  SourceCode(const SourceCode& from);

  inline SourceCode& operator=(const SourceCode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceCode(SourceCode&& from) noexcept
    : SourceCode() {
    *this = ::std::move(from);
  }

  inline SourceCode& operator=(SourceCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SourceCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceCode* internal_default_instance() {
    return reinterpret_cast<const SourceCode*>(
               &_SourceCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SourceCode* other);
  friend void swap(SourceCode& a, SourceCode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceCode* New() const final {
    return CreateMaybeMessage<SourceCode>(nullptr);
  }

  SourceCode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SourceCode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SourceCode& from);
  void MergeFrom(const SourceCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string link = 1;
  void clear_link();
  static const int kLinkFieldNumber = 1;
  const ::std::string& link() const;
  void set_link(const ::std::string& value);
  #if LANG_CXX11
  void set_link(::std::string&& value);
  #endif
  void set_link(const char* value);
  void set_link(const char* value, size_t size);
  ::std::string* mutable_link();
  ::std::string* release_link();
  void set_allocated_link(::std::string* link);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.SourceCode)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr link_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fdescription_5fentity_2eproto;
};
// -------------------------------------------------------------------

class DescriptionEntityList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.DescriptionEntityList) */ {
 public:
  DescriptionEntityList();
  virtual ~DescriptionEntityList();

  DescriptionEntityList(const DescriptionEntityList& from);

  inline DescriptionEntityList& operator=(const DescriptionEntityList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DescriptionEntityList(DescriptionEntityList&& from) noexcept
    : DescriptionEntityList() {
    *this = ::std::move(from);
  }

  inline DescriptionEntityList& operator=(DescriptionEntityList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DescriptionEntityList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DescriptionEntityList* internal_default_instance() {
    return reinterpret_cast<const DescriptionEntityList*>(
               &_DescriptionEntityList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DescriptionEntityList* other);
  friend void swap(DescriptionEntityList& a, DescriptionEntityList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DescriptionEntityList* New() const final {
    return CreateMaybeMessage<DescriptionEntityList>(nullptr);
  }

  DescriptionEntityList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DescriptionEntityList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DescriptionEntityList& from);
  void MergeFrom(const DescriptionEntityList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescriptionEntityList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.admin.DescriptionEntity descriptionEntities = 1;
  int descriptionentities_size() const;
  void clear_descriptionentities();
  static const int kDescriptionEntitiesFieldNumber = 1;
  ::flyteidl::admin::DescriptionEntity* mutable_descriptionentities(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::DescriptionEntity >*
      mutable_descriptionentities();
  const ::flyteidl::admin::DescriptionEntity& descriptionentities(int index) const;
  ::flyteidl::admin::DescriptionEntity* add_descriptionentities();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::DescriptionEntity >&
      descriptionentities() const;

  // string token = 2;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.DescriptionEntityList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::DescriptionEntity > descriptionentities_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fdescription_5fentity_2eproto;
};
// -------------------------------------------------------------------

class DescriptionEntityListRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.DescriptionEntityListRequest) */ {
 public:
  DescriptionEntityListRequest();
  virtual ~DescriptionEntityListRequest();

  DescriptionEntityListRequest(const DescriptionEntityListRequest& from);

  inline DescriptionEntityListRequest& operator=(const DescriptionEntityListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DescriptionEntityListRequest(DescriptionEntityListRequest&& from) noexcept
    : DescriptionEntityListRequest() {
    *this = ::std::move(from);
  }

  inline DescriptionEntityListRequest& operator=(DescriptionEntityListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DescriptionEntityListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DescriptionEntityListRequest* internal_default_instance() {
    return reinterpret_cast<const DescriptionEntityListRequest*>(
               &_DescriptionEntityListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DescriptionEntityListRequest* other);
  friend void swap(DescriptionEntityListRequest& a, DescriptionEntityListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DescriptionEntityListRequest* New() const final {
    return CreateMaybeMessage<DescriptionEntityListRequest>(nullptr);
  }

  DescriptionEntityListRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DescriptionEntityListRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DescriptionEntityListRequest& from);
  void MergeFrom(const DescriptionEntityListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescriptionEntityListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 4;
  void clear_token();
  static const int kTokenFieldNumber = 4;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string filters = 5;
  void clear_filters();
  static const int kFiltersFieldNumber = 5;
  const ::std::string& filters() const;
  void set_filters(const ::std::string& value);
  #if LANG_CXX11
  void set_filters(::std::string&& value);
  #endif
  void set_filters(const char* value);
  void set_filters(const char* value, size_t size);
  ::std::string* mutable_filters();
  ::std::string* release_filters();
  void set_allocated_filters(::std::string* filters);

  // .flyteidl.admin.NamedEntityIdentifier id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::flyteidl::admin::NamedEntityIdentifier& id() const;
  ::flyteidl::admin::NamedEntityIdentifier* release_id();
  ::flyteidl::admin::NamedEntityIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::admin::NamedEntityIdentifier* id);

  // .flyteidl.admin.Sort sort_by = 6;
  bool has_sort_by() const;
  void clear_sort_by();
  static const int kSortByFieldNumber = 6;
  const ::flyteidl::admin::Sort& sort_by() const;
  ::flyteidl::admin::Sort* release_sort_by();
  ::flyteidl::admin::Sort* mutable_sort_by();
  void set_allocated_sort_by(::flyteidl::admin::Sort* sort_by);

  // .flyteidl.core.ResourceType resource_type = 1;
  void clear_resource_type();
  static const int kResourceTypeFieldNumber = 1;
  ::flyteidl::core::ResourceType resource_type() const;
  void set_resource_type(::flyteidl::core::ResourceType value);

  // uint32 limit = 3;
  void clear_limit();
  static const int kLimitFieldNumber = 3;
  ::google::protobuf::uint32 limit() const;
  void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.DescriptionEntityListRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr filters_;
  ::flyteidl::admin::NamedEntityIdentifier* id_;
  ::flyteidl::admin::Sort* sort_by_;
  int resource_type_;
  ::google::protobuf::uint32 limit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fdescription_5fentity_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DescriptionEntity

// .flyteidl.core.Identifier id = 1;
inline bool DescriptionEntity::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::flyteidl::core::Identifier& DescriptionEntity::id() const {
  const ::flyteidl::core::Identifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.DescriptionEntity.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Identifier*>(
      &::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* DescriptionEntity::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.DescriptionEntity.id)
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identifier* DescriptionEntity::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.DescriptionEntity.id)
  return id_;
}
inline void DescriptionEntity::set_allocated_id(::flyteidl::core::Identifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.DescriptionEntity.id)
}

// string short_description = 2;
inline void DescriptionEntity::clear_short_description() {
  short_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DescriptionEntity::short_description() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.DescriptionEntity.short_description)
  return short_description_.GetNoArena();
}
inline void DescriptionEntity::set_short_description(const ::std::string& value) {
  
  short_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.DescriptionEntity.short_description)
}
#if LANG_CXX11
inline void DescriptionEntity::set_short_description(::std::string&& value) {
  
  short_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.DescriptionEntity.short_description)
}
#endif
inline void DescriptionEntity::set_short_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  short_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.DescriptionEntity.short_description)
}
inline void DescriptionEntity::set_short_description(const char* value, size_t size) {
  
  short_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.DescriptionEntity.short_description)
}
inline ::std::string* DescriptionEntity::mutable_short_description() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.DescriptionEntity.short_description)
  return short_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DescriptionEntity::release_short_description() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.DescriptionEntity.short_description)
  
  return short_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DescriptionEntity::set_allocated_short_description(::std::string* short_description) {
  if (short_description != nullptr) {
    
  } else {
    
  }
  short_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), short_description);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.DescriptionEntity.short_description)
}

// .flyteidl.admin.Description long_description = 3;
inline bool DescriptionEntity::has_long_description() const {
  return this != internal_default_instance() && long_description_ != nullptr;
}
inline void DescriptionEntity::clear_long_description() {
  if (GetArenaNoVirtual() == nullptr && long_description_ != nullptr) {
    delete long_description_;
  }
  long_description_ = nullptr;
}
inline const ::flyteidl::admin::Description& DescriptionEntity::long_description() const {
  const ::flyteidl::admin::Description* p = long_description_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.DescriptionEntity.long_description)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::Description*>(
      &::flyteidl::admin::_Description_default_instance_);
}
inline ::flyteidl::admin::Description* DescriptionEntity::release_long_description() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.DescriptionEntity.long_description)
  
  ::flyteidl::admin::Description* temp = long_description_;
  long_description_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Description* DescriptionEntity::mutable_long_description() {
  
  if (long_description_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Description>(GetArenaNoVirtual());
    long_description_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.DescriptionEntity.long_description)
  return long_description_;
}
inline void DescriptionEntity::set_allocated_long_description(::flyteidl::admin::Description* long_description) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete long_description_;
  }
  if (long_description) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      long_description = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, long_description, submessage_arena);
    }
    
  } else {
    
  }
  long_description_ = long_description;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.DescriptionEntity.long_description)
}

// .flyteidl.admin.SourceCode source_code = 4;
inline bool DescriptionEntity::has_source_code() const {
  return this != internal_default_instance() && source_code_ != nullptr;
}
inline void DescriptionEntity::clear_source_code() {
  if (GetArenaNoVirtual() == nullptr && source_code_ != nullptr) {
    delete source_code_;
  }
  source_code_ = nullptr;
}
inline const ::flyteidl::admin::SourceCode& DescriptionEntity::source_code() const {
  const ::flyteidl::admin::SourceCode* p = source_code_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.DescriptionEntity.source_code)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::SourceCode*>(
      &::flyteidl::admin::_SourceCode_default_instance_);
}
inline ::flyteidl::admin::SourceCode* DescriptionEntity::release_source_code() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.DescriptionEntity.source_code)
  
  ::flyteidl::admin::SourceCode* temp = source_code_;
  source_code_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::SourceCode* DescriptionEntity::mutable_source_code() {
  
  if (source_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::SourceCode>(GetArenaNoVirtual());
    source_code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.DescriptionEntity.source_code)
  return source_code_;
}
inline void DescriptionEntity::set_allocated_source_code(::flyteidl::admin::SourceCode* source_code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete source_code_;
  }
  if (source_code) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source_code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source_code, submessage_arena);
    }
    
  } else {
    
  }
  source_code_ = source_code;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.DescriptionEntity.source_code)
}

// repeated string tags = 5;
inline int DescriptionEntity::tags_size() const {
  return tags_.size();
}
inline void DescriptionEntity::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& DescriptionEntity::tags(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.DescriptionEntity.tags)
  return tags_.Get(index);
}
inline ::std::string* DescriptionEntity::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.DescriptionEntity.tags)
  return tags_.Mutable(index);
}
inline void DescriptionEntity::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.DescriptionEntity.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DescriptionEntity::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.DescriptionEntity.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DescriptionEntity::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.DescriptionEntity.tags)
}
inline void DescriptionEntity::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.DescriptionEntity.tags)
}
inline ::std::string* DescriptionEntity::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:flyteidl.admin.DescriptionEntity.tags)
  return tags_.Add();
}
inline void DescriptionEntity::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.admin.DescriptionEntity.tags)
}
#if LANG_CXX11
inline void DescriptionEntity::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.admin.DescriptionEntity.tags)
}
#endif
inline void DescriptionEntity::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.admin.DescriptionEntity.tags)
}
inline void DescriptionEntity::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.admin.DescriptionEntity.tags)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
DescriptionEntity::tags() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.DescriptionEntity.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
DescriptionEntity::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.DescriptionEntity.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// Description

// string value = 1;
inline bool Description::has_value() const {
  return content_case() == kValue;
}
inline void Description::set_has_value() {
  _oneof_case_[0] = kValue;
}
inline void Description::clear_value() {
  if (has_value()) {
    content_.value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_content();
  }
}
inline const ::std::string& Description::value() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Description.value)
  if (has_value()) {
    return content_.value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Description::set_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.Description.value)
  if (!has_value()) {
    clear_content();
    set_has_value();
    content_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.Description.value)
}
#if LANG_CXX11
inline void Description::set_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.Description.value)
  if (!has_value()) {
    clear_content();
    set_has_value();
    content_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.Description.value)
}
#endif
inline void Description::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_value()) {
    clear_content();
    set_has_value();
    content_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.Description.value)
}
inline void Description::set_value(const char* value, size_t size) {
  if (!has_value()) {
    clear_content();
    set_has_value();
    content_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.Description.value)
}
inline ::std::string* Description::mutable_value() {
  if (!has_value()) {
    clear_content();
    set_has_value();
    content_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Description.value)
  return content_.value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Description::release_value() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Description.value)
  if (has_value()) {
    clear_has_content();
    return content_.value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Description::set_allocated_value(::std::string* value) {
  if (has_content()) {
    clear_content();
  }
  if (value != nullptr) {
    set_has_value();
    content_.value_.UnsafeSetDefault(value);
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Description.value)
}

// string uri = 2;
inline bool Description::has_uri() const {
  return content_case() == kUri;
}
inline void Description::set_has_uri() {
  _oneof_case_[0] = kUri;
}
inline void Description::clear_uri() {
  if (has_uri()) {
    content_.uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_content();
  }
}
inline const ::std::string& Description::uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Description.uri)
  if (has_uri()) {
    return content_.uri_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Description::set_uri(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.Description.uri)
  if (!has_uri()) {
    clear_content();
    set_has_uri();
    content_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.Description.uri)
}
#if LANG_CXX11
inline void Description::set_uri(::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.Description.uri)
  if (!has_uri()) {
    clear_content();
    set_has_uri();
    content_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.Description.uri)
}
#endif
inline void Description::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_uri()) {
    clear_content();
    set_has_uri();
    content_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.Description.uri)
}
inline void Description::set_uri(const char* value, size_t size) {
  if (!has_uri()) {
    clear_content();
    set_has_uri();
    content_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.Description.uri)
}
inline ::std::string* Description::mutable_uri() {
  if (!has_uri()) {
    clear_content();
    set_has_uri();
    content_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Description.uri)
  return content_.uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Description::release_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Description.uri)
  if (has_uri()) {
    clear_has_content();
    return content_.uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Description::set_allocated_uri(::std::string* uri) {
  if (has_content()) {
    clear_content();
  }
  if (uri != nullptr) {
    set_has_uri();
    content_.uri_.UnsafeSetDefault(uri);
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Description.uri)
}

// .flyteidl.admin.DescriptionFormat format = 3;
inline void Description::clear_format() {
  format_ = 0;
}
inline ::flyteidl::admin::DescriptionFormat Description::format() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Description.format)
  return static_cast< ::flyteidl::admin::DescriptionFormat >(format_);
}
inline void Description::set_format(::flyteidl::admin::DescriptionFormat value) {
  
  format_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.Description.format)
}

// string icon_link = 4;
inline void Description::clear_icon_link() {
  icon_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Description::icon_link() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Description.icon_link)
  return icon_link_.GetNoArena();
}
inline void Description::set_icon_link(const ::std::string& value) {
  
  icon_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.Description.icon_link)
}
#if LANG_CXX11
inline void Description::set_icon_link(::std::string&& value) {
  
  icon_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.Description.icon_link)
}
#endif
inline void Description::set_icon_link(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  icon_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.Description.icon_link)
}
inline void Description::set_icon_link(const char* value, size_t size) {
  
  icon_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.Description.icon_link)
}
inline ::std::string* Description::mutable_icon_link() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Description.icon_link)
  return icon_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Description::release_icon_link() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Description.icon_link)
  
  return icon_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Description::set_allocated_icon_link(::std::string* icon_link) {
  if (icon_link != nullptr) {
    
  } else {
    
  }
  icon_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon_link);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Description.icon_link)
}

inline bool Description::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void Description::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline Description::ContentCase Description::content_case() const {
  return Description::ContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SourceCode

// string link = 1;
inline void SourceCode::clear_link() {
  link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceCode::link() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.SourceCode.link)
  return link_.GetNoArena();
}
inline void SourceCode::set_link(const ::std::string& value) {
  
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.SourceCode.link)
}
#if LANG_CXX11
inline void SourceCode::set_link(::std::string&& value) {
  
  link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.SourceCode.link)
}
#endif
inline void SourceCode::set_link(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.SourceCode.link)
}
inline void SourceCode::set_link(const char* value, size_t size) {
  
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.SourceCode.link)
}
inline ::std::string* SourceCode::mutable_link() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SourceCode.link)
  return link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceCode::release_link() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SourceCode.link)
  
  return link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceCode::set_allocated_link(::std::string* link) {
  if (link != nullptr) {
    
  } else {
    
  }
  link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), link);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SourceCode.link)
}

// -------------------------------------------------------------------

// DescriptionEntityList

// repeated .flyteidl.admin.DescriptionEntity descriptionEntities = 1;
inline int DescriptionEntityList::descriptionentities_size() const {
  return descriptionentities_.size();
}
inline void DescriptionEntityList::clear_descriptionentities() {
  descriptionentities_.Clear();
}
inline ::flyteidl::admin::DescriptionEntity* DescriptionEntityList::mutable_descriptionentities(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.DescriptionEntityList.descriptionEntities)
  return descriptionentities_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::DescriptionEntity >*
DescriptionEntityList::mutable_descriptionentities() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.DescriptionEntityList.descriptionEntities)
  return &descriptionentities_;
}
inline const ::flyteidl::admin::DescriptionEntity& DescriptionEntityList::descriptionentities(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.DescriptionEntityList.descriptionEntities)
  return descriptionentities_.Get(index);
}
inline ::flyteidl::admin::DescriptionEntity* DescriptionEntityList::add_descriptionentities() {
  // @@protoc_insertion_point(field_add:flyteidl.admin.DescriptionEntityList.descriptionEntities)
  return descriptionentities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::DescriptionEntity >&
DescriptionEntityList::descriptionentities() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.DescriptionEntityList.descriptionEntities)
  return descriptionentities_;
}

// string token = 2;
inline void DescriptionEntityList::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DescriptionEntityList::token() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.DescriptionEntityList.token)
  return token_.GetNoArena();
}
inline void DescriptionEntityList::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.DescriptionEntityList.token)
}
#if LANG_CXX11
inline void DescriptionEntityList::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.DescriptionEntityList.token)
}
#endif
inline void DescriptionEntityList::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.DescriptionEntityList.token)
}
inline void DescriptionEntityList::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.DescriptionEntityList.token)
}
inline ::std::string* DescriptionEntityList::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.DescriptionEntityList.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DescriptionEntityList::release_token() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.DescriptionEntityList.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DescriptionEntityList::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.DescriptionEntityList.token)
}

// -------------------------------------------------------------------

// DescriptionEntityListRequest

// .flyteidl.core.ResourceType resource_type = 1;
inline void DescriptionEntityListRequest::clear_resource_type() {
  resource_type_ = 0;
}
inline ::flyteidl::core::ResourceType DescriptionEntityListRequest::resource_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.DescriptionEntityListRequest.resource_type)
  return static_cast< ::flyteidl::core::ResourceType >(resource_type_);
}
inline void DescriptionEntityListRequest::set_resource_type(::flyteidl::core::ResourceType value) {
  
  resource_type_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.DescriptionEntityListRequest.resource_type)
}

// .flyteidl.admin.NamedEntityIdentifier id = 2;
inline bool DescriptionEntityListRequest::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::flyteidl::admin::NamedEntityIdentifier& DescriptionEntityListRequest::id() const {
  const ::flyteidl::admin::NamedEntityIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.DescriptionEntityListRequest.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::NamedEntityIdentifier*>(
      &::flyteidl::admin::_NamedEntityIdentifier_default_instance_);
}
inline ::flyteidl::admin::NamedEntityIdentifier* DescriptionEntityListRequest::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.DescriptionEntityListRequest.id)
  
  ::flyteidl::admin::NamedEntityIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::NamedEntityIdentifier* DescriptionEntityListRequest::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::NamedEntityIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.DescriptionEntityListRequest.id)
  return id_;
}
inline void DescriptionEntityListRequest::set_allocated_id(::flyteidl::admin::NamedEntityIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.DescriptionEntityListRequest.id)
}

// uint32 limit = 3;
inline void DescriptionEntityListRequest::clear_limit() {
  limit_ = 0u;
}
inline ::google::protobuf::uint32 DescriptionEntityListRequest::limit() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.DescriptionEntityListRequest.limit)
  return limit_;
}
inline void DescriptionEntityListRequest::set_limit(::google::protobuf::uint32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.DescriptionEntityListRequest.limit)
}

// string token = 4;
inline void DescriptionEntityListRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DescriptionEntityListRequest::token() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.DescriptionEntityListRequest.token)
  return token_.GetNoArena();
}
inline void DescriptionEntityListRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.DescriptionEntityListRequest.token)
}
#if LANG_CXX11
inline void DescriptionEntityListRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.DescriptionEntityListRequest.token)
}
#endif
inline void DescriptionEntityListRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.DescriptionEntityListRequest.token)
}
inline void DescriptionEntityListRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.DescriptionEntityListRequest.token)
}
inline ::std::string* DescriptionEntityListRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.DescriptionEntityListRequest.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DescriptionEntityListRequest::release_token() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.DescriptionEntityListRequest.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DescriptionEntityListRequest::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.DescriptionEntityListRequest.token)
}

// string filters = 5;
inline void DescriptionEntityListRequest::clear_filters() {
  filters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DescriptionEntityListRequest::filters() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.DescriptionEntityListRequest.filters)
  return filters_.GetNoArena();
}
inline void DescriptionEntityListRequest::set_filters(const ::std::string& value) {
  
  filters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.DescriptionEntityListRequest.filters)
}
#if LANG_CXX11
inline void DescriptionEntityListRequest::set_filters(::std::string&& value) {
  
  filters_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.DescriptionEntityListRequest.filters)
}
#endif
inline void DescriptionEntityListRequest::set_filters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.DescriptionEntityListRequest.filters)
}
inline void DescriptionEntityListRequest::set_filters(const char* value, size_t size) {
  
  filters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.DescriptionEntityListRequest.filters)
}
inline ::std::string* DescriptionEntityListRequest::mutable_filters() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.DescriptionEntityListRequest.filters)
  return filters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DescriptionEntityListRequest::release_filters() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.DescriptionEntityListRequest.filters)
  
  return filters_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DescriptionEntityListRequest::set_allocated_filters(::std::string* filters) {
  if (filters != nullptr) {
    
  } else {
    
  }
  filters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filters);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.DescriptionEntityListRequest.filters)
}

// .flyteidl.admin.Sort sort_by = 6;
inline bool DescriptionEntityListRequest::has_sort_by() const {
  return this != internal_default_instance() && sort_by_ != nullptr;
}
inline const ::flyteidl::admin::Sort& DescriptionEntityListRequest::sort_by() const {
  const ::flyteidl::admin::Sort* p = sort_by_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.DescriptionEntityListRequest.sort_by)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::Sort*>(
      &::flyteidl::admin::_Sort_default_instance_);
}
inline ::flyteidl::admin::Sort* DescriptionEntityListRequest::release_sort_by() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.DescriptionEntityListRequest.sort_by)
  
  ::flyteidl::admin::Sort* temp = sort_by_;
  sort_by_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Sort* DescriptionEntityListRequest::mutable_sort_by() {
  
  if (sort_by_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Sort>(GetArenaNoVirtual());
    sort_by_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.DescriptionEntityListRequest.sort_by)
  return sort_by_;
}
inline void DescriptionEntityListRequest::set_allocated_sort_by(::flyteidl::admin::Sort* sort_by) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sort_by_);
  }
  if (sort_by) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sort_by = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sort_by, submessage_arena);
    }
    
  } else {
    
  }
  sort_by_ = sort_by;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.DescriptionEntityListRequest.sort_by)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::flyteidl::admin::DescriptionFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::admin::DescriptionFormat>() {
  return ::flyteidl::admin::DescriptionFormat_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fadmin_2fdescription_5fentity_2eproto
