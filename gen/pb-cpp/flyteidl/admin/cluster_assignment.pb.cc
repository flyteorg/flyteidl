// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/cluster_assignment.proto

#include "flyteidl/admin/cluster_assignment.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace admin {
constexpr ClusterAssignment::ClusterAssignment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : affinity_(nullptr)
  , toleration_(nullptr){}
struct ClusterAssignmentDefaultTypeInternal {
  constexpr ClusterAssignmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClusterAssignmentDefaultTypeInternal() {}
  union {
    ClusterAssignment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClusterAssignmentDefaultTypeInternal _ClusterAssignment_default_instance_;
constexpr Affinity::Affinity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : selectors_(){}
struct AffinityDefaultTypeInternal {
  constexpr AffinityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AffinityDefaultTypeInternal() {}
  union {
    Affinity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AffinityDefaultTypeInternal _Affinity_default_instance_;
constexpr Toleration::Toleration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : selectors_(){}
struct TolerationDefaultTypeInternal {
  constexpr TolerationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TolerationDefaultTypeInternal() {}
  union {
    Toleration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TolerationDefaultTypeInternal _Toleration_default_instance_;
constexpr Selector::Selector(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_()
  , key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , operator__(0)
{}
struct SelectorDefaultTypeInternal {
  constexpr SelectorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SelectorDefaultTypeInternal() {}
  union {
    Selector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SelectorDefaultTypeInternal _Selector_default_instance_;
}  // namespace admin
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fadmin_2fcluster_5fassignment_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fadmin_2fcluster_5fassignment_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fadmin_2fcluster_5fassignment_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fadmin_2fcluster_5fassignment_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ClusterAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ClusterAssignment, affinity_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ClusterAssignment, toleration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Affinity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Affinity, selectors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Toleration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Toleration, selectors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Selector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Selector, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Selector, value_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Selector, operator__),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::admin::ClusterAssignment)},
  { 8, -1, -1, sizeof(::flyteidl::admin::Affinity)},
  { 15, -1, -1, sizeof(::flyteidl::admin::Toleration)},
  { 22, -1, -1, sizeof(::flyteidl::admin::Selector)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_ClusterAssignment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_Affinity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_Toleration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_Selector_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fadmin_2fcluster_5fassignment_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'flyteidl/admin/cluster_assignment.prot"
  "o\022\016flyteidl.admin\"\205\001\n\021ClusterAssignment\022"
  "4\n\010affinity\030\001 \001(\0132\030.flyteidl.admin.Affin"
  "ityR\010affinity\022:\n\ntoleration\030\002 \001(\0132\032.flyt"
  "eidl.admin.TolerationR\ntoleration\"B\n\010Aff"
  "inity\0226\n\tselectors\030\001 \003(\0132\030.flyteidl.admi"
  "n.SelectorR\tselectors\"D\n\nToleration\0226\n\ts"
  "electors\030\001 \003(\0132\030.flyteidl.admin.Selector"
  "R\tselectors\"\271\001\n\010Selector\022\020\n\003key\030\001 \001(\tR\003k"
  "ey\022\024\n\005value\030\002 \003(\tR\005value\022=\n\010operator\030\003 \001"
  "(\0162!.flyteidl.admin.Selector.OperatorR\010o"
  "perator\"F\n\010Operator\022\n\n\006EQUALS\020\000\022\016\n\nNOT_E"
  "QUALS\020\001\022\006\n\002IN\020\002\022\n\n\006NOT_IN\020\003\022\n\n\006EXISTS\020\004B"
  "\277\001\n\022com.flyteidl.adminB\026ClusterAssignmen"
  "tProtoH\002Z5github.com/flyteorg/flyteidl/g"
  "en/pb-go/flyteidl/admin\370\001\000\242\002\003FAX\252\002\016Flyte"
  "idl.Admin\312\002\016Flyteidl\\Admin\342\002\032Flyteidl\\Ad"
  "min\\GPBMetadata\352\002\017Flyteidl::Adminb\006proto"
  "3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fadmin_2fcluster_5fassignment_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2fcluster_5fassignment_2eproto = {
  false, false, 721, descriptor_table_protodef_flyteidl_2fadmin_2fcluster_5fassignment_2eproto, "flyteidl/admin/cluster_assignment.proto", 
  &descriptor_table_flyteidl_2fadmin_2fcluster_5fassignment_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_flyteidl_2fadmin_2fcluster_5fassignment_2eproto::offsets,
  file_level_metadata_flyteidl_2fadmin_2fcluster_5fassignment_2eproto, file_level_enum_descriptors_flyteidl_2fadmin_2fcluster_5fassignment_2eproto, file_level_service_descriptors_flyteidl_2fadmin_2fcluster_5fassignment_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fadmin_2fcluster_5fassignment_2eproto_getter() {
  return &descriptor_table_flyteidl_2fadmin_2fcluster_5fassignment_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fadmin_2fcluster_5fassignment_2eproto(&descriptor_table_flyteidl_2fadmin_2fcluster_5fassignment_2eproto);
namespace flyteidl {
namespace admin {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Selector_Operator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fadmin_2fcluster_5fassignment_2eproto);
  return file_level_enum_descriptors_flyteidl_2fadmin_2fcluster_5fassignment_2eproto[0];
}
bool Selector_Operator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Selector_Operator Selector::EQUALS;
constexpr Selector_Operator Selector::NOT_EQUALS;
constexpr Selector_Operator Selector::IN;
constexpr Selector_Operator Selector::NOT_IN;
constexpr Selector_Operator Selector::EXISTS;
constexpr Selector_Operator Selector::Operator_MIN;
constexpr Selector_Operator Selector::Operator_MAX;
constexpr int Selector::Operator_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ClusterAssignment::_Internal {
 public:
  static const ::flyteidl::admin::Affinity& affinity(const ClusterAssignment* msg);
  static const ::flyteidl::admin::Toleration& toleration(const ClusterAssignment* msg);
};

const ::flyteidl::admin::Affinity&
ClusterAssignment::_Internal::affinity(const ClusterAssignment* msg) {
  return *msg->affinity_;
}
const ::flyteidl::admin::Toleration&
ClusterAssignment::_Internal::toleration(const ClusterAssignment* msg) {
  return *msg->toleration_;
}
ClusterAssignment::ClusterAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.ClusterAssignment)
}
ClusterAssignment::ClusterAssignment(const ClusterAssignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_affinity()) {
    affinity_ = new ::flyteidl::admin::Affinity(*from.affinity_);
  } else {
    affinity_ = nullptr;
  }
  if (from._internal_has_toleration()) {
    toleration_ = new ::flyteidl::admin::Toleration(*from.toleration_);
  } else {
    toleration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ClusterAssignment)
}

inline void ClusterAssignment::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&affinity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&toleration_) -
    reinterpret_cast<char*>(&affinity_)) + sizeof(toleration_));
}

ClusterAssignment::~ClusterAssignment() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ClusterAssignment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClusterAssignment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete affinity_;
  if (this != internal_default_instance()) delete toleration_;
}

void ClusterAssignment::ArenaDtor(void* object) {
  ClusterAssignment* _this = reinterpret_cast< ClusterAssignment* >(object);
  (void)_this;
}
void ClusterAssignment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClusterAssignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClusterAssignment::InternalSwap(ClusterAssignment* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ClusterAssignment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fcluster_5fassignment_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fcluster_5fassignment_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fcluster_5fassignment_2eproto[0]);
}

// ===================================================================

class Affinity::_Internal {
 public:
};

Affinity::Affinity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  selectors_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.Affinity)
}
Affinity::Affinity(const Affinity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      selectors_(from.selectors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Affinity)
}

inline void Affinity::SharedCtor() {
}

Affinity::~Affinity() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Affinity)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Affinity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Affinity::ArenaDtor(void* object) {
  Affinity* _this = reinterpret_cast< Affinity* >(object);
  (void)_this;
}
void Affinity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Affinity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Affinity::InternalSwap(Affinity* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Affinity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fcluster_5fassignment_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fcluster_5fassignment_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fcluster_5fassignment_2eproto[1]);
}

// ===================================================================

class Toleration::_Internal {
 public:
};

Toleration::Toleration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  selectors_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.Toleration)
}
Toleration::Toleration(const Toleration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      selectors_(from.selectors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Toleration)
}

inline void Toleration::SharedCtor() {
}

Toleration::~Toleration() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Toleration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Toleration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Toleration::ArenaDtor(void* object) {
  Toleration* _this = reinterpret_cast< Toleration* >(object);
  (void)_this;
}
void Toleration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Toleration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Toleration::InternalSwap(Toleration* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Toleration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fcluster_5fassignment_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fcluster_5fassignment_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fcluster_5fassignment_2eproto[2]);
}

// ===================================================================

class Selector::_Internal {
 public:
};

Selector::Selector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.Selector)
}
Selector::Selector(const Selector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  operator__ = from.operator__;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Selector)
}

inline void Selector::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
operator__ = 0;
}

Selector::~Selector() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Selector)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Selector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Selector::ArenaDtor(void* object) {
  Selector* _this = reinterpret_cast< Selector* >(object);
  (void)_this;
}
void Selector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Selector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Selector::InternalSwap(Selector* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Selector::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fcluster_5fassignment_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fcluster_5fassignment_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fcluster_5fassignment_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ClusterAssignment* Arena::CreateMaybeMessage< ::flyteidl::admin::ClusterAssignment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::ClusterAssignment >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Affinity* Arena::CreateMaybeMessage< ::flyteidl::admin::Affinity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::Affinity >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Toleration* Arena::CreateMaybeMessage< ::flyteidl::admin::Toleration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::Toleration >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Selector* Arena::CreateMaybeMessage< ::flyteidl::admin::Selector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::Selector >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
