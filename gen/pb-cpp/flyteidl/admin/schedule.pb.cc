// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/schedule.proto

#include "flyteidl/admin/schedule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fschedule_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CronSchedule_flyteidl_2fadmin_2fschedule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fschedule_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FixedRate_flyteidl_2fadmin_2fschedule_2eproto;
namespace flyteidl {
namespace admin {
class FixedRateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FixedRate> _instance;
} _FixedRate_default_instance_;
class CronScheduleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CronSchedule> _instance;
} _CronSchedule_default_instance_;
class ScheduleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Schedule> _instance;
  ::google::protobuf::internal::ArenaStringPtr cron_expression_;
  const ::flyteidl::admin::FixedRate* rate_;
  const ::flyteidl::admin::CronSchedule* cron_schedule_;
} _Schedule_default_instance_;
}  // namespace admin
}  // namespace flyteidl
static void InitDefaultsFixedRate_flyteidl_2fadmin_2fschedule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_FixedRate_default_instance_;
    new (ptr) ::flyteidl::admin::FixedRate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::FixedRate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FixedRate_flyteidl_2fadmin_2fschedule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFixedRate_flyteidl_2fadmin_2fschedule_2eproto}, {}};

static void InitDefaultsCronSchedule_flyteidl_2fadmin_2fschedule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_CronSchedule_default_instance_;
    new (ptr) ::flyteidl::admin::CronSchedule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::CronSchedule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CronSchedule_flyteidl_2fadmin_2fschedule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCronSchedule_flyteidl_2fadmin_2fschedule_2eproto}, {}};

static void InitDefaultsSchedule_flyteidl_2fadmin_2fschedule_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_Schedule_default_instance_;
    new (ptr) ::flyteidl::admin::Schedule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::Schedule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Schedule_flyteidl_2fadmin_2fschedule_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSchedule_flyteidl_2fadmin_2fschedule_2eproto}, {
      &scc_info_FixedRate_flyteidl_2fadmin_2fschedule_2eproto.base,
      &scc_info_CronSchedule_flyteidl_2fadmin_2fschedule_2eproto.base,}};

void InitDefaults_flyteidl_2fadmin_2fschedule_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_FixedRate_flyteidl_2fadmin_2fschedule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CronSchedule_flyteidl_2fadmin_2fschedule_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Schedule_flyteidl_2fadmin_2fschedule_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fadmin_2fschedule_2eproto[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fadmin_2fschedule_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fadmin_2fschedule_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fadmin_2fschedule_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::FixedRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::FixedRate, value_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::FixedRate, unit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::CronSchedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::CronSchedule, schedule_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::CronSchedule, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Schedule, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Schedule, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::admin::ScheduleDefaultTypeInternal, cron_expression_),
  offsetof(::flyteidl::admin::ScheduleDefaultTypeInternal, rate_),
  offsetof(::flyteidl::admin::ScheduleDefaultTypeInternal, cron_schedule_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Schedule, kickoff_time_input_arg_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Schedule, ScheduleExpression_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::admin::FixedRate)},
  { 7, -1, sizeof(::flyteidl::admin::CronSchedule)},
  { 14, -1, sizeof(::flyteidl::admin::Schedule)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_FixedRate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_CronSchedule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_Schedule_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fadmin_2fschedule_2eproto = {
  {}, AddDescriptors_flyteidl_2fadmin_2fschedule_2eproto, "flyteidl/admin/schedule.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fadmin_2fschedule_2eproto::offsets,
  file_level_metadata_flyteidl_2fadmin_2fschedule_2eproto, 3, file_level_enum_descriptors_flyteidl_2fadmin_2fschedule_2eproto, file_level_service_descriptors_flyteidl_2fadmin_2fschedule_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fadmin_2fschedule_2eproto[] =
  "\n\035flyteidl/admin/schedule.proto\022\016flyteid"
  "l.admin\"G\n\tFixedRate\022\r\n\005value\030\001 \001(\r\022+\n\004u"
  "nit\030\002 \001(\0162\035.flyteidl.admin.FixedRateUnit"
  "\"0\n\014CronSchedule\022\020\n\010schedule\030\001 \001(\t\022\016\n\006of"
  "fset\030\002 \001(\t\"\301\001\n\010Schedule\022\035\n\017cron_expressi"
  "on\030\001 \001(\tB\002\030\001H\000\022)\n\004rate\030\002 \001(\0132\031.flyteidl."
  "admin.FixedRateH\000\0225\n\rcron_schedule\030\004 \001(\013"
  "2\034.flyteidl.admin.CronScheduleH\000\022\036\n\026kick"
  "off_time_input_arg\030\003 \001(\tB\024\n\022ScheduleExpr"
  "ession*.\n\rFixedRateUnit\022\n\n\006MINUTE\020\000\022\010\n\004H"
  "OUR\020\001\022\007\n\003DAY\020\002B7Z5github.com/flyteorg/fl"
  "yteidl/gen/pb-go/flyteidl/adminb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2fschedule_2eproto = {
  false, InitDefaults_flyteidl_2fadmin_2fschedule_2eproto, 
  descriptor_table_protodef_flyteidl_2fadmin_2fschedule_2eproto,
  "flyteidl/admin/schedule.proto", &assign_descriptors_table_flyteidl_2fadmin_2fschedule_2eproto, 479,
};

void AddDescriptors_flyteidl_2fadmin_2fschedule_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fadmin_2fschedule_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fadmin_2fschedule_2eproto = []() { AddDescriptors_flyteidl_2fadmin_2fschedule_2eproto(); return true; }();
namespace flyteidl {
namespace admin {
const ::google::protobuf::EnumDescriptor* FixedRateUnit_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flyteidl_2fadmin_2fschedule_2eproto);
  return file_level_enum_descriptors_flyteidl_2fadmin_2fschedule_2eproto[0];
}
bool FixedRateUnit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void FixedRate::InitAsDefaultInstance() {
}
class FixedRate::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FixedRate::kValueFieldNumber;
const int FixedRate::kUnitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FixedRate::FixedRate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.FixedRate)
}
FixedRate::FixedRate(const FixedRate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&unit_) -
    reinterpret_cast<char*>(&value_)) + sizeof(unit_));
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.FixedRate)
}

void FixedRate::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unit_) -
      reinterpret_cast<char*>(&value_)) + sizeof(unit_));
}

FixedRate::~FixedRate() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.FixedRate)
  SharedDtor();
}

void FixedRate::SharedDtor() {
}

void FixedRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FixedRate& FixedRate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FixedRate_flyteidl_2fadmin_2fschedule_2eproto.base);
  return *internal_default_instance();
}


void FixedRate::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.FixedRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unit_) -
      reinterpret_cast<char*>(&value_)) + sizeof(unit_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FixedRate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FixedRate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .flyteidl.admin.FixedRateUnit unit = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_unit(static_cast<::flyteidl::admin::FixedRateUnit>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FixedRate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.FixedRate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.FixedRateUnit unit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_unit(static_cast< ::flyteidl::admin::FixedRateUnit >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.FixedRate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.FixedRate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FixedRate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.FixedRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->value(), output);
  }

  // .flyteidl.admin.FixedRateUnit unit = 2;
  if (this->unit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->unit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.FixedRate)
}

::google::protobuf::uint8* FixedRate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.FixedRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->value(), target);
  }

  // .flyteidl.admin.FixedRateUnit unit = 2;
  if (this->unit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->unit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.FixedRate)
  return target;
}

size_t FixedRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.FixedRate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  // .flyteidl.admin.FixedRateUnit unit = 2;
  if (this->unit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FixedRate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.FixedRate)
  GOOGLE_DCHECK_NE(&from, this);
  const FixedRate* source =
      ::google::protobuf::DynamicCastToGenerated<FixedRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.FixedRate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.FixedRate)
    MergeFrom(*source);
  }
}

void FixedRate::MergeFrom(const FixedRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.FixedRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.unit() != 0) {
    set_unit(from.unit());
  }
}

void FixedRate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.FixedRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedRate::CopyFrom(const FixedRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.FixedRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedRate::IsInitialized() const {
  return true;
}

void FixedRate::Swap(FixedRate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FixedRate::InternalSwap(FixedRate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(unit_, other->unit_);
}

::google::protobuf::Metadata FixedRate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fschedule_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fschedule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CronSchedule::InitAsDefaultInstance() {
}
class CronSchedule::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CronSchedule::kScheduleFieldNumber;
const int CronSchedule::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CronSchedule::CronSchedule()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.CronSchedule)
}
CronSchedule::CronSchedule(const CronSchedule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  schedule_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.schedule().size() > 0) {
    schedule_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schedule_);
  }
  offset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.offset().size() > 0) {
    offset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.offset_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.CronSchedule)
}

void CronSchedule::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CronSchedule_flyteidl_2fadmin_2fschedule_2eproto.base);
  schedule_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CronSchedule::~CronSchedule() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.CronSchedule)
  SharedDtor();
}

void CronSchedule::SharedDtor() {
  schedule_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CronSchedule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CronSchedule& CronSchedule::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CronSchedule_flyteidl_2fadmin_2fschedule_2eproto.base);
  return *internal_default_instance();
}


void CronSchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.CronSchedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  schedule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CronSchedule::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CronSchedule*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string schedule = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.CronSchedule.schedule");
        object = msg->mutable_schedule();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string offset = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.CronSchedule.offset");
        object = msg->mutable_offset();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CronSchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.CronSchedule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string schedule = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schedule()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->schedule().data(), static_cast<int>(this->schedule().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.CronSchedule.schedule"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_offset()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->offset().data(), static_cast<int>(this->offset().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.CronSchedule.offset"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.CronSchedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.CronSchedule)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CronSchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.CronSchedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string schedule = 1;
  if (this->schedule().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->schedule().data(), static_cast<int>(this->schedule().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.CronSchedule.schedule");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->schedule(), output);
  }

  // string offset = 2;
  if (this->offset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->offset().data(), static_cast<int>(this->offset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.CronSchedule.offset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.CronSchedule)
}

::google::protobuf::uint8* CronSchedule::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.CronSchedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string schedule = 1;
  if (this->schedule().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->schedule().data(), static_cast<int>(this->schedule().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.CronSchedule.schedule");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->schedule(), target);
  }

  // string offset = 2;
  if (this->offset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->offset().data(), static_cast<int>(this->offset().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.CronSchedule.offset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.CronSchedule)
  return target;
}

size_t CronSchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.CronSchedule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string schedule = 1;
  if (this->schedule().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->schedule());
  }

  // string offset = 2;
  if (this->offset().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->offset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CronSchedule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.CronSchedule)
  GOOGLE_DCHECK_NE(&from, this);
  const CronSchedule* source =
      ::google::protobuf::DynamicCastToGenerated<CronSchedule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.CronSchedule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.CronSchedule)
    MergeFrom(*source);
  }
}

void CronSchedule::MergeFrom(const CronSchedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.CronSchedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.schedule().size() > 0) {

    schedule_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schedule_);
  }
  if (from.offset().size() > 0) {

    offset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.offset_);
  }
}

void CronSchedule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.CronSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CronSchedule::CopyFrom(const CronSchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.CronSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CronSchedule::IsInitialized() const {
  return true;
}

void CronSchedule::Swap(CronSchedule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CronSchedule::InternalSwap(CronSchedule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  schedule_.Swap(&other->schedule_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  offset_.Swap(&other->offset_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CronSchedule::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fschedule_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fschedule_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Schedule::InitAsDefaultInstance() {
  ::flyteidl::admin::_Schedule_default_instance_.cron_expression_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::flyteidl::admin::_Schedule_default_instance_.rate_ = const_cast< ::flyteidl::admin::FixedRate*>(
      ::flyteidl::admin::FixedRate::internal_default_instance());
  ::flyteidl::admin::_Schedule_default_instance_.cron_schedule_ = const_cast< ::flyteidl::admin::CronSchedule*>(
      ::flyteidl::admin::CronSchedule::internal_default_instance());
}
class Schedule::HasBitSetters {
 public:
  static const ::flyteidl::admin::FixedRate& rate(const Schedule* msg);
  static const ::flyteidl::admin::CronSchedule& cron_schedule(const Schedule* msg);
};

const ::flyteidl::admin::FixedRate&
Schedule::HasBitSetters::rate(const Schedule* msg) {
  return *msg->ScheduleExpression_.rate_;
}
const ::flyteidl::admin::CronSchedule&
Schedule::HasBitSetters::cron_schedule(const Schedule* msg) {
  return *msg->ScheduleExpression_.cron_schedule_;
}
void Schedule::set_allocated_rate(::flyteidl::admin::FixedRate* rate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ScheduleExpression();
  if (rate) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rate, submessage_arena);
    }
    set_has_rate();
    ScheduleExpression_.rate_ = rate;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Schedule.rate)
}
void Schedule::set_allocated_cron_schedule(::flyteidl::admin::CronSchedule* cron_schedule) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ScheduleExpression();
  if (cron_schedule) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cron_schedule = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cron_schedule, submessage_arena);
    }
    set_has_cron_schedule();
    ScheduleExpression_.cron_schedule_ = cron_schedule;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Schedule.cron_schedule)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Schedule::kCronExpressionFieldNumber;
const int Schedule::kRateFieldNumber;
const int Schedule::kCronScheduleFieldNumber;
const int Schedule::kKickoffTimeInputArgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Schedule::Schedule()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.Schedule)
}
Schedule::Schedule(const Schedule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kickoff_time_input_arg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kickoff_time_input_arg().size() > 0) {
    kickoff_time_input_arg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kickoff_time_input_arg_);
  }
  clear_has_ScheduleExpression();
  switch (from.ScheduleExpression_case()) {
    case kCronExpression: {
      set_cron_expression(from.cron_expression());
      break;
    }
    case kRate: {
      mutable_rate()->::flyteidl::admin::FixedRate::MergeFrom(from.rate());
      break;
    }
    case kCronSchedule: {
      mutable_cron_schedule()->::flyteidl::admin::CronSchedule::MergeFrom(from.cron_schedule());
      break;
    }
    case SCHEDULEEXPRESSION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Schedule)
}

void Schedule::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Schedule_flyteidl_2fadmin_2fschedule_2eproto.base);
  kickoff_time_input_arg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ScheduleExpression();
}

Schedule::~Schedule() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Schedule)
  SharedDtor();
}

void Schedule::SharedDtor() {
  kickoff_time_input_arg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_ScheduleExpression()) {
    clear_ScheduleExpression();
  }
}

void Schedule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Schedule& Schedule::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Schedule_flyteidl_2fadmin_2fschedule_2eproto.base);
  return *internal_default_instance();
}


void Schedule::clear_ScheduleExpression() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.admin.Schedule)
  switch (ScheduleExpression_case()) {
    case kCronExpression: {
      ScheduleExpression_.cron_expression_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRate: {
      delete ScheduleExpression_.rate_;
      break;
    }
    case kCronSchedule: {
      delete ScheduleExpression_.cron_schedule_;
      break;
    }
    case SCHEDULEEXPRESSION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SCHEDULEEXPRESSION_NOT_SET;
}


void Schedule::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.Schedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kickoff_time_input_arg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_ScheduleExpression();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Schedule::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Schedule*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string cron_expression = 1 [deprecated = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.Schedule.cron_expression");
        object = msg->mutable_cron_expression();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.admin.FixedRate rate = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::FixedRate::_InternalParse;
        object = msg->mutable_rate();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string kickoff_time_input_arg = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.Schedule.kickoff_time_input_arg");
        object = msg->mutable_kickoff_time_input_arg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.admin.CronSchedule cron_schedule = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::CronSchedule::_InternalParse;
        object = msg->mutable_cron_schedule();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Schedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.Schedule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cron_expression = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cron_expression()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cron_expression().data(), static_cast<int>(this->cron_expression().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.Schedule.cron_expression"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.FixedRate rate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kickoff_time_input_arg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kickoff_time_input_arg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kickoff_time_input_arg().data(), static_cast<int>(this->kickoff_time_input_arg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.Schedule.kickoff_time_input_arg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.CronSchedule cron_schedule = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cron_schedule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.Schedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.Schedule)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Schedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.Schedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cron_expression = 1 [deprecated = true];
  if (has_cron_expression()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cron_expression().data(), static_cast<int>(this->cron_expression().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Schedule.cron_expression");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cron_expression(), output);
  }

  // .flyteidl.admin.FixedRate rate = 2;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::rate(this), output);
  }

  // string kickoff_time_input_arg = 3;
  if (this->kickoff_time_input_arg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kickoff_time_input_arg().data(), static_cast<int>(this->kickoff_time_input_arg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Schedule.kickoff_time_input_arg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->kickoff_time_input_arg(), output);
  }

  // .flyteidl.admin.CronSchedule cron_schedule = 4;
  if (has_cron_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::cron_schedule(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.Schedule)
}

::google::protobuf::uint8* Schedule::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.Schedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cron_expression = 1 [deprecated = true];
  if (has_cron_expression()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cron_expression().data(), static_cast<int>(this->cron_expression().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Schedule.cron_expression");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cron_expression(), target);
  }

  // .flyteidl.admin.FixedRate rate = 2;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::rate(this), target);
  }

  // string kickoff_time_input_arg = 3;
  if (this->kickoff_time_input_arg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kickoff_time_input_arg().data(), static_cast<int>(this->kickoff_time_input_arg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Schedule.kickoff_time_input_arg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->kickoff_time_input_arg(), target);
  }

  // .flyteidl.admin.CronSchedule cron_schedule = 4;
  if (has_cron_schedule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::cron_schedule(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.Schedule)
  return target;
}

size_t Schedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.Schedule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string kickoff_time_input_arg = 3;
  if (this->kickoff_time_input_arg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kickoff_time_input_arg());
  }

  switch (ScheduleExpression_case()) {
    // string cron_expression = 1 [deprecated = true];
    case kCronExpression: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cron_expression());
      break;
    }
    // .flyteidl.admin.FixedRate rate = 2;
    case kRate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ScheduleExpression_.rate_);
      break;
    }
    // .flyteidl.admin.CronSchedule cron_schedule = 4;
    case kCronSchedule: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ScheduleExpression_.cron_schedule_);
      break;
    }
    case SCHEDULEEXPRESSION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Schedule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.Schedule)
  GOOGLE_DCHECK_NE(&from, this);
  const Schedule* source =
      ::google::protobuf::DynamicCastToGenerated<Schedule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.Schedule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.Schedule)
    MergeFrom(*source);
  }
}

void Schedule::MergeFrom(const Schedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.Schedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.kickoff_time_input_arg().size() > 0) {

    kickoff_time_input_arg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kickoff_time_input_arg_);
  }
  switch (from.ScheduleExpression_case()) {
    case kCronExpression: {
      set_cron_expression(from.cron_expression());
      break;
    }
    case kRate: {
      mutable_rate()->::flyteidl::admin::FixedRate::MergeFrom(from.rate());
      break;
    }
    case kCronSchedule: {
      mutable_cron_schedule()->::flyteidl::admin::CronSchedule::MergeFrom(from.cron_schedule());
      break;
    }
    case SCHEDULEEXPRESSION_NOT_SET: {
      break;
    }
  }
}

void Schedule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.Schedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Schedule::CopyFrom(const Schedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.Schedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Schedule::IsInitialized() const {
  return true;
}

void Schedule::Swap(Schedule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Schedule::InternalSwap(Schedule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  kickoff_time_input_arg_.Swap(&other->kickoff_time_input_arg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ScheduleExpression_, other->ScheduleExpression_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata Schedule::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fschedule_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fschedule_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::admin::FixedRate* Arena::CreateMaybeMessage< ::flyteidl::admin::FixedRate >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::FixedRate >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::CronSchedule* Arena::CreateMaybeMessage< ::flyteidl::admin::CronSchedule >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::CronSchedule >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Schedule* Arena::CreateMaybeMessage< ::flyteidl::admin::Schedule >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::Schedule >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
