// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/workflow.proto

package com.flyteidl.core;

public interface NodeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:flyteidl.core.Node)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * A workflow-level unique identifier that identifies this node in the workflow. "inputs" and "outputs" are reserved
   * node ids that cannot be used by other nodes.
   * </pre>
   *
   * <code>string id = 1 [json_name = "id"];</code>
   * @return The id.
   */
  java.lang.String getId();
  /**
   * <pre>
   * A workflow-level unique identifier that identifies this node in the workflow. "inputs" and "outputs" are reserved
   * node ids that cannot be used by other nodes.
   * </pre>
   *
   * <code>string id = 1 [json_name = "id"];</code>
   * @return The bytes for id.
   */
  com.google.protobuf.ByteString
      getIdBytes();

  /**
   * <pre>
   * Extra metadata about the node.
   * </pre>
   *
   * <code>.flyteidl.core.NodeMetadata metadata = 2 [json_name = "metadata"];</code>
   * @return Whether the metadata field is set.
   */
  boolean hasMetadata();
  /**
   * <pre>
   * Extra metadata about the node.
   * </pre>
   *
   * <code>.flyteidl.core.NodeMetadata metadata = 2 [json_name = "metadata"];</code>
   * @return The metadata.
   */
  com.flyteidl.core.NodeMetadata getMetadata();
  /**
   * <pre>
   * Extra metadata about the node.
   * </pre>
   *
   * <code>.flyteidl.core.NodeMetadata metadata = 2 [json_name = "metadata"];</code>
   */
  com.flyteidl.core.NodeMetadataOrBuilder getMetadataOrBuilder();

  /**
   * <pre>
   * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
   * must be fulfilled.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];</code>
   */
  java.util.List<com.flyteidl.core.Binding> 
      getInputsList();
  /**
   * <pre>
   * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
   * must be fulfilled.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];</code>
   */
  com.flyteidl.core.Binding getInputs(int index);
  /**
   * <pre>
   * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
   * must be fulfilled.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];</code>
   */
  int getInputsCount();
  /**
   * <pre>
   * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
   * must be fulfilled.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];</code>
   */
  java.util.List<? extends com.flyteidl.core.BindingOrBuilder> 
      getInputsOrBuilderList();
  /**
   * <pre>
   * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
   * must be fulfilled.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];</code>
   */
  com.flyteidl.core.BindingOrBuilder getInputsOrBuilder(
      int index);

  /**
   * <pre>
   *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
   * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
   * field.
   * </pre>
   *
   * <code>repeated string upstream_node_ids = 4 [json_name = "upstreamNodeIds"];</code>
   * @return A list containing the upstreamNodeIds.
   */
  java.util.List<java.lang.String>
      getUpstreamNodeIdsList();
  /**
   * <pre>
   *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
   * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
   * field.
   * </pre>
   *
   * <code>repeated string upstream_node_ids = 4 [json_name = "upstreamNodeIds"];</code>
   * @return The count of upstreamNodeIds.
   */
  int getUpstreamNodeIdsCount();
  /**
   * <pre>
   *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
   * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
   * field.
   * </pre>
   *
   * <code>repeated string upstream_node_ids = 4 [json_name = "upstreamNodeIds"];</code>
   * @param index The index of the element to return.
   * @return The upstreamNodeIds at the given index.
   */
  java.lang.String getUpstreamNodeIds(int index);
  /**
   * <pre>
   *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
   * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
   * field.
   * </pre>
   *
   * <code>repeated string upstream_node_ids = 4 [json_name = "upstreamNodeIds"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the upstreamNodeIds at the given index.
   */
  com.google.protobuf.ByteString
      getUpstreamNodeIdsBytes(int index);

  /**
   * <pre>
   *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
   * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
   * nodes outputs using the alias if one's specified.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];</code>
   */
  java.util.List<com.flyteidl.core.Alias> 
      getOutputAliasesList();
  /**
   * <pre>
   *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
   * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
   * nodes outputs using the alias if one's specified.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];</code>
   */
  com.flyteidl.core.Alias getOutputAliases(int index);
  /**
   * <pre>
   *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
   * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
   * nodes outputs using the alias if one's specified.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];</code>
   */
  int getOutputAliasesCount();
  /**
   * <pre>
   *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
   * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
   * nodes outputs using the alias if one's specified.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];</code>
   */
  java.util.List<? extends com.flyteidl.core.AliasOrBuilder> 
      getOutputAliasesOrBuilderList();
  /**
   * <pre>
   *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
   * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
   * nodes outputs using the alias if one's specified.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];</code>
   */
  com.flyteidl.core.AliasOrBuilder getOutputAliasesOrBuilder(
      int index);

  /**
   * <pre>
   * Information about the Task to execute in this node.
   * </pre>
   *
   * <code>.flyteidl.core.TaskNode task_node = 6 [json_name = "taskNode"];</code>
   * @return Whether the taskNode field is set.
   */
  boolean hasTaskNode();
  /**
   * <pre>
   * Information about the Task to execute in this node.
   * </pre>
   *
   * <code>.flyteidl.core.TaskNode task_node = 6 [json_name = "taskNode"];</code>
   * @return The taskNode.
   */
  com.flyteidl.core.TaskNode getTaskNode();
  /**
   * <pre>
   * Information about the Task to execute in this node.
   * </pre>
   *
   * <code>.flyteidl.core.TaskNode task_node = 6 [json_name = "taskNode"];</code>
   */
  com.flyteidl.core.TaskNodeOrBuilder getTaskNodeOrBuilder();

  /**
   * <pre>
   * Information about the Workflow to execute in this mode.
   * </pre>
   *
   * <code>.flyteidl.core.WorkflowNode workflow_node = 7 [json_name = "workflowNode"];</code>
   * @return Whether the workflowNode field is set.
   */
  boolean hasWorkflowNode();
  /**
   * <pre>
   * Information about the Workflow to execute in this mode.
   * </pre>
   *
   * <code>.flyteidl.core.WorkflowNode workflow_node = 7 [json_name = "workflowNode"];</code>
   * @return The workflowNode.
   */
  com.flyteidl.core.WorkflowNode getWorkflowNode();
  /**
   * <pre>
   * Information about the Workflow to execute in this mode.
   * </pre>
   *
   * <code>.flyteidl.core.WorkflowNode workflow_node = 7 [json_name = "workflowNode"];</code>
   */
  com.flyteidl.core.WorkflowNodeOrBuilder getWorkflowNodeOrBuilder();

  /**
   * <pre>
   * Information about the branch node to evaluate in this node.
   * </pre>
   *
   * <code>.flyteidl.core.BranchNode branch_node = 8 [json_name = "branchNode"];</code>
   * @return Whether the branchNode field is set.
   */
  boolean hasBranchNode();
  /**
   * <pre>
   * Information about the branch node to evaluate in this node.
   * </pre>
   *
   * <code>.flyteidl.core.BranchNode branch_node = 8 [json_name = "branchNode"];</code>
   * @return The branchNode.
   */
  com.flyteidl.core.BranchNode getBranchNode();
  /**
   * <pre>
   * Information about the branch node to evaluate in this node.
   * </pre>
   *
   * <code>.flyteidl.core.BranchNode branch_node = 8 [json_name = "branchNode"];</code>
   */
  com.flyteidl.core.BranchNodeOrBuilder getBranchNodeOrBuilder();

  public com.flyteidl.core.Node.TargetCase getTargetCase();
}
