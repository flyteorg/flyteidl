// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/interface.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fcore_2finterface_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fcore_2finterface_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/types.pb.h"
#include "flyteidl/core/literals.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2finterface_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fcore_2finterface_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fcore_2finterface_2eproto;
namespace flyteidl {
namespace core {
class Parameter;
struct ParameterDefaultTypeInternal;
extern ParameterDefaultTypeInternal _Parameter_default_instance_;
class ParameterMap;
struct ParameterMapDefaultTypeInternal;
extern ParameterMapDefaultTypeInternal _ParameterMap_default_instance_;
class ParameterMap_ParametersEntry_DoNotUse;
struct ParameterMap_ParametersEntry_DoNotUseDefaultTypeInternal;
extern ParameterMap_ParametersEntry_DoNotUseDefaultTypeInternal _ParameterMap_ParametersEntry_DoNotUse_default_instance_;
class TypedInterface;
struct TypedInterfaceDefaultTypeInternal;
extern TypedInterfaceDefaultTypeInternal _TypedInterface_default_instance_;
class Variable;
struct VariableDefaultTypeInternal;
extern VariableDefaultTypeInternal _Variable_default_instance_;
class VariableMap;
struct VariableMapDefaultTypeInternal;
extern VariableMapDefaultTypeInternal _VariableMap_default_instance_;
class VariableMap_VariablesEntry_DoNotUse;
struct VariableMap_VariablesEntry_DoNotUseDefaultTypeInternal;
extern VariableMap_VariablesEntry_DoNotUseDefaultTypeInternal _VariableMap_VariablesEntry_DoNotUse_default_instance_;
}  // namespace core
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::core::Parameter* Arena::CreateMaybeMessage<::flyteidl::core::Parameter>(Arena*);
template<> ::flyteidl::core::ParameterMap* Arena::CreateMaybeMessage<::flyteidl::core::ParameterMap>(Arena*);
template<> ::flyteidl::core::ParameterMap_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage<::flyteidl::core::ParameterMap_ParametersEntry_DoNotUse>(Arena*);
template<> ::flyteidl::core::TypedInterface* Arena::CreateMaybeMessage<::flyteidl::core::TypedInterface>(Arena*);
template<> ::flyteidl::core::Variable* Arena::CreateMaybeMessage<::flyteidl::core::Variable>(Arena*);
template<> ::flyteidl::core::VariableMap* Arena::CreateMaybeMessage<::flyteidl::core::VariableMap>(Arena*);
template<> ::flyteidl::core::VariableMap_VariablesEntry_DoNotUse* Arena::CreateMaybeMessage<::flyteidl::core::VariableMap_VariablesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace core {

// ===================================================================

class Variable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.Variable) */ {
 public:
  inline Variable() : Variable(nullptr) {}
  ~Variable() override;
  explicit constexpr Variable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Variable(const Variable& from);
  Variable(Variable&& from) noexcept
    : Variable() {
    *this = ::std::move(from);
  }

  inline Variable& operator=(const Variable& from) {
    CopyFrom(from);
    return *this;
  }
  inline Variable& operator=(Variable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Variable& default_instance() {
    return *internal_default_instance();
  }
  static inline const Variable* internal_default_instance() {
    return reinterpret_cast<const Variable*>(
               &_Variable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Variable& a, Variable& b) {
    a.Swap(&b);
  }
  inline void Swap(Variable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Variable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Variable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Variable>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Variable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.Variable";
  }
  protected:
  explicit Variable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string description = 2 [json_name = "description"];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .flyteidl.core.LiteralType type = 1 [json_name = "type"];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::flyteidl::core::LiteralType& type() const;
  PROTOBUF_NODISCARD ::flyteidl::core::LiteralType* release_type();
  ::flyteidl::core::LiteralType* mutable_type();
  void set_allocated_type(::flyteidl::core::LiteralType* type);
  private:
  const ::flyteidl::core::LiteralType& _internal_type() const;
  ::flyteidl::core::LiteralType* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::flyteidl::core::LiteralType* type);
  ::flyteidl::core::LiteralType* unsafe_arena_release_type();

  // @@protoc_insertion_point(class_scope:flyteidl.core.Variable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::flyteidl::core::LiteralType* type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2finterface_2eproto;
};
// -------------------------------------------------------------------

class VariableMap_VariablesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VariableMap_VariablesEntry_DoNotUse, 
    std::string, ::flyteidl::core::Variable,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VariableMap_VariablesEntry_DoNotUse, 
    std::string, ::flyteidl::core::Variable,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  VariableMap_VariablesEntry_DoNotUse();
  explicit constexpr VariableMap_VariablesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit VariableMap_VariablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const VariableMap_VariablesEntry_DoNotUse& other);
  static const VariableMap_VariablesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VariableMap_VariablesEntry_DoNotUse*>(&_VariableMap_VariablesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flyteidl.core.VariableMap.VariablesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class VariableMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.VariableMap) */ {
 public:
  inline VariableMap() : VariableMap(nullptr) {}
  ~VariableMap() override;
  explicit constexpr VariableMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VariableMap(const VariableMap& from);
  VariableMap(VariableMap&& from) noexcept
    : VariableMap() {
    *this = ::std::move(from);
  }

  inline VariableMap& operator=(const VariableMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariableMap& operator=(VariableMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VariableMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const VariableMap* internal_default_instance() {
    return reinterpret_cast<const VariableMap*>(
               &_VariableMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VariableMap& a, VariableMap& b) {
    a.Swap(&b);
  }
  inline void Swap(VariableMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VariableMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VariableMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VariableMap>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariableMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.VariableMap";
  }
  protected:
  explicit VariableMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kVariablesFieldNumber = 1,
  };
  // map<string, .flyteidl.core.Variable> variables = 1 [json_name = "variables"];
  int variables_size() const;
  private:
  int _internal_variables_size() const;
  public:
  void clear_variables();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::Variable >&
      _internal_variables() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::Variable >*
      _internal_mutable_variables();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::Variable >&
      variables() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::Variable >*
      mutable_variables();

  // @@protoc_insertion_point(class_scope:flyteidl.core.VariableMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      VariableMap_VariablesEntry_DoNotUse,
      std::string, ::flyteidl::core::Variable,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> variables_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2finterface_2eproto;
};
// -------------------------------------------------------------------

class TypedInterface final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.TypedInterface) */ {
 public:
  inline TypedInterface() : TypedInterface(nullptr) {}
  ~TypedInterface() override;
  explicit constexpr TypedInterface(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TypedInterface(const TypedInterface& from);
  TypedInterface(TypedInterface&& from) noexcept
    : TypedInterface() {
    *this = ::std::move(from);
  }

  inline TypedInterface& operator=(const TypedInterface& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypedInterface& operator=(TypedInterface&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TypedInterface& default_instance() {
    return *internal_default_instance();
  }
  static inline const TypedInterface* internal_default_instance() {
    return reinterpret_cast<const TypedInterface*>(
               &_TypedInterface_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TypedInterface& a, TypedInterface& b) {
    a.Swap(&b);
  }
  inline void Swap(TypedInterface* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TypedInterface* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TypedInterface* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TypedInterface>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TypedInterface* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.TypedInterface";
  }
  protected:
  explicit TypedInterface(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 1,
    kOutputsFieldNumber = 2,
  };
  // .flyteidl.core.VariableMap inputs = 1 [json_name = "inputs"];
  bool has_inputs() const;
  private:
  bool _internal_has_inputs() const;
  public:
  void clear_inputs();
  const ::flyteidl::core::VariableMap& inputs() const;
  PROTOBUF_NODISCARD ::flyteidl::core::VariableMap* release_inputs();
  ::flyteidl::core::VariableMap* mutable_inputs();
  void set_allocated_inputs(::flyteidl::core::VariableMap* inputs);
  private:
  const ::flyteidl::core::VariableMap& _internal_inputs() const;
  ::flyteidl::core::VariableMap* _internal_mutable_inputs();
  public:
  void unsafe_arena_set_allocated_inputs(
      ::flyteidl::core::VariableMap* inputs);
  ::flyteidl::core::VariableMap* unsafe_arena_release_inputs();

  // .flyteidl.core.VariableMap outputs = 2 [json_name = "outputs"];
  bool has_outputs() const;
  private:
  bool _internal_has_outputs() const;
  public:
  void clear_outputs();
  const ::flyteidl::core::VariableMap& outputs() const;
  PROTOBUF_NODISCARD ::flyteidl::core::VariableMap* release_outputs();
  ::flyteidl::core::VariableMap* mutable_outputs();
  void set_allocated_outputs(::flyteidl::core::VariableMap* outputs);
  private:
  const ::flyteidl::core::VariableMap& _internal_outputs() const;
  ::flyteidl::core::VariableMap* _internal_mutable_outputs();
  public:
  void unsafe_arena_set_allocated_outputs(
      ::flyteidl::core::VariableMap* outputs);
  ::flyteidl::core::VariableMap* unsafe_arena_release_outputs();

  // @@protoc_insertion_point(class_scope:flyteidl.core.TypedInterface)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::VariableMap* inputs_;
  ::flyteidl::core::VariableMap* outputs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2finterface_2eproto;
};
// -------------------------------------------------------------------

class Parameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.Parameter) */ {
 public:
  inline Parameter() : Parameter(nullptr) {}
  ~Parameter() override;
  explicit constexpr Parameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Parameter(const Parameter& from);
  Parameter(Parameter&& from) noexcept
    : Parameter() {
    *this = ::std::move(from);
  }

  inline Parameter& operator=(const Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Parameter& operator=(Parameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Parameter& default_instance() {
    return *internal_default_instance();
  }
  enum BehaviorCase {
    kDefault = 2,
    kRequired = 3,
    BEHAVIOR_NOT_SET = 0,
  };

  static inline const Parameter* internal_default_instance() {
    return reinterpret_cast<const Parameter*>(
               &_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Parameter& a, Parameter& b) {
    a.Swap(&b);
  }
  inline void Swap(Parameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Parameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Parameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Parameter>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Parameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.Parameter";
  }
  protected:
  explicit Parameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarFieldNumber = 1,
    kDefaultFieldNumber = 2,
    kRequiredFieldNumber = 3,
  };
  // .flyteidl.core.Variable var = 1 [json_name = "var"];
  bool has_var() const;
  private:
  bool _internal_has_var() const;
  public:
  void clear_var();
  const ::flyteidl::core::Variable& var() const;
  PROTOBUF_NODISCARD ::flyteidl::core::Variable* release_var();
  ::flyteidl::core::Variable* mutable_var();
  void set_allocated_var(::flyteidl::core::Variable* var);
  private:
  const ::flyteidl::core::Variable& _internal_var() const;
  ::flyteidl::core::Variable* _internal_mutable_var();
  public:
  void unsafe_arena_set_allocated_var(
      ::flyteidl::core::Variable* var);
  ::flyteidl::core::Variable* unsafe_arena_release_var();

  // .flyteidl.core.Literal default = 2 [json_name = "default"];
  bool has_default_() const;
  private:
  bool _internal_has_default_() const;
  public:
  void clear_default_();
  const ::flyteidl::core::Literal& default_() const;
  PROTOBUF_NODISCARD ::flyteidl::core::Literal* release_default_();
  ::flyteidl::core::Literal* mutable_default_();
  void set_allocated_default_(::flyteidl::core::Literal* default_);
  private:
  const ::flyteidl::core::Literal& _internal_default_() const;
  ::flyteidl::core::Literal* _internal_mutable_default_();
  public:
  void unsafe_arena_set_allocated_default_(
      ::flyteidl::core::Literal* default_);
  ::flyteidl::core::Literal* unsafe_arena_release_default_();

  // bool required = 3 [json_name = "required"];
  bool has_required() const;
  private:
  bool _internal_has_required() const;
  public:
  void clear_required();
  bool required() const;
  void set_required(bool value);
  private:
  bool _internal_required() const;
  void _internal_set_required(bool value);
  public:

  void clear_behavior();
  BehaviorCase behavior_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.core.Parameter)
 private:
  class _Internal;
  void set_has_default_();
  void set_has_required();

  inline bool has_behavior() const;
  inline void clear_has_behavior();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::Variable* var_;
  union BehaviorUnion {
    constexpr BehaviorUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::flyteidl::core::Literal* default__;
    bool required_;
  } behavior_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fcore_2finterface_2eproto;
};
// -------------------------------------------------------------------

class ParameterMap_ParametersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ParameterMap_ParametersEntry_DoNotUse, 
    std::string, ::flyteidl::core::Parameter,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ParameterMap_ParametersEntry_DoNotUse, 
    std::string, ::flyteidl::core::Parameter,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ParameterMap_ParametersEntry_DoNotUse();
  explicit constexpr ParameterMap_ParametersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ParameterMap_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ParameterMap_ParametersEntry_DoNotUse& other);
  static const ParameterMap_ParametersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ParameterMap_ParametersEntry_DoNotUse*>(&_ParameterMap_ParametersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flyteidl.core.ParameterMap.ParametersEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ParameterMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.ParameterMap) */ {
 public:
  inline ParameterMap() : ParameterMap(nullptr) {}
  ~ParameterMap() override;
  explicit constexpr ParameterMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParameterMap(const ParameterMap& from);
  ParameterMap(ParameterMap&& from) noexcept
    : ParameterMap() {
    *this = ::std::move(from);
  }

  inline ParameterMap& operator=(const ParameterMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParameterMap& operator=(ParameterMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParameterMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParameterMap* internal_default_instance() {
    return reinterpret_cast<const ParameterMap*>(
               &_ParameterMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ParameterMap& a, ParameterMap& b) {
    a.Swap(&b);
  }
  inline void Swap(ParameterMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParameterMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParameterMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParameterMap>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParameterMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.ParameterMap";
  }
  protected:
  explicit ParameterMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 1,
  };
  // map<string, .flyteidl.core.Parameter> parameters = 1 [json_name = "parameters"];
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::Parameter >&
      _internal_parameters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::Parameter >*
      _internal_mutable_parameters();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::Parameter >&
      parameters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::Parameter >*
      mutable_parameters();

  // @@protoc_insertion_point(class_scope:flyteidl.core.ParameterMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ParameterMap_ParametersEntry_DoNotUse,
      std::string, ::flyteidl::core::Parameter,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> parameters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2finterface_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Variable

// .flyteidl.core.LiteralType type = 1 [json_name = "type"];
inline bool Variable::_internal_has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline bool Variable::has_type() const {
  return _internal_has_type();
}
inline const ::flyteidl::core::LiteralType& Variable::_internal_type() const {
  const ::flyteidl::core::LiteralType* p = type_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::LiteralType&>(
      ::flyteidl::core::_LiteralType_default_instance_);
}
inline const ::flyteidl::core::LiteralType& Variable::type() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Variable.type)
  return _internal_type();
}
inline void Variable::unsafe_arena_set_allocated_type(
    ::flyteidl::core::LiteralType* type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_);
  }
  type_ = type;
  if (type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.Variable.type)
}
inline ::flyteidl::core::LiteralType* Variable::release_type() {
  
  ::flyteidl::core::LiteralType* temp = type_;
  type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::LiteralType* Variable::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Variable.type)
  
  ::flyteidl::core::LiteralType* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::flyteidl::core::LiteralType* Variable::_internal_mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::LiteralType>(GetArenaForAllocation());
    type_ = p;
  }
  return type_;
}
inline ::flyteidl::core::LiteralType* Variable::mutable_type() {
  ::flyteidl::core::LiteralType* _msg = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Variable.type)
  return _msg;
}
inline void Variable::set_allocated_type(::flyteidl::core::LiteralType* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_);
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type));
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Variable.type)
}

// string description = 2 [json_name = "description"];
inline void Variable::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Variable::description() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Variable.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Variable::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.core.Variable.description)
}
inline std::string* Variable::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Variable.description)
  return _s;
}
inline const std::string& Variable::_internal_description() const {
  return description_.Get();
}
inline void Variable::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Variable::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Variable::release_description() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Variable.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Variable::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Variable.description)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// VariableMap

// map<string, .flyteidl.core.Variable> variables = 1 [json_name = "variables"];
inline int VariableMap::_internal_variables_size() const {
  return variables_.size();
}
inline int VariableMap::variables_size() const {
  return _internal_variables_size();
}
inline void VariableMap::clear_variables() {
  variables_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::Variable >&
VariableMap::_internal_variables() const {
  return variables_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::Variable >&
VariableMap::variables() const {
  // @@protoc_insertion_point(field_map:flyteidl.core.VariableMap.variables)
  return _internal_variables();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::Variable >*
VariableMap::_internal_mutable_variables() {
  return variables_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::Variable >*
VariableMap::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_map:flyteidl.core.VariableMap.variables)
  return _internal_mutable_variables();
}

// -------------------------------------------------------------------

// TypedInterface

// .flyteidl.core.VariableMap inputs = 1 [json_name = "inputs"];
inline bool TypedInterface::_internal_has_inputs() const {
  return this != internal_default_instance() && inputs_ != nullptr;
}
inline bool TypedInterface::has_inputs() const {
  return _internal_has_inputs();
}
inline void TypedInterface::clear_inputs() {
  if (GetArenaForAllocation() == nullptr && inputs_ != nullptr) {
    delete inputs_;
  }
  inputs_ = nullptr;
}
inline const ::flyteidl::core::VariableMap& TypedInterface::_internal_inputs() const {
  const ::flyteidl::core::VariableMap* p = inputs_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::VariableMap&>(
      ::flyteidl::core::_VariableMap_default_instance_);
}
inline const ::flyteidl::core::VariableMap& TypedInterface::inputs() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.TypedInterface.inputs)
  return _internal_inputs();
}
inline void TypedInterface::unsafe_arena_set_allocated_inputs(
    ::flyteidl::core::VariableMap* inputs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inputs_);
  }
  inputs_ = inputs;
  if (inputs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.TypedInterface.inputs)
}
inline ::flyteidl::core::VariableMap* TypedInterface::release_inputs() {
  
  ::flyteidl::core::VariableMap* temp = inputs_;
  inputs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::VariableMap* TypedInterface::unsafe_arena_release_inputs() {
  // @@protoc_insertion_point(field_release:flyteidl.core.TypedInterface.inputs)
  
  ::flyteidl::core::VariableMap* temp = inputs_;
  inputs_ = nullptr;
  return temp;
}
inline ::flyteidl::core::VariableMap* TypedInterface::_internal_mutable_inputs() {
  
  if (inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::VariableMap>(GetArenaForAllocation());
    inputs_ = p;
  }
  return inputs_;
}
inline ::flyteidl::core::VariableMap* TypedInterface::mutable_inputs() {
  ::flyteidl::core::VariableMap* _msg = _internal_mutable_inputs();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.TypedInterface.inputs)
  return _msg;
}
inline void TypedInterface::set_allocated_inputs(::flyteidl::core::VariableMap* inputs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete inputs_;
  }
  if (inputs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::VariableMap>::GetOwningArena(inputs);
    if (message_arena != submessage_arena) {
      inputs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inputs, submessage_arena);
    }
    
  } else {
    
  }
  inputs_ = inputs;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.TypedInterface.inputs)
}

// .flyteidl.core.VariableMap outputs = 2 [json_name = "outputs"];
inline bool TypedInterface::_internal_has_outputs() const {
  return this != internal_default_instance() && outputs_ != nullptr;
}
inline bool TypedInterface::has_outputs() const {
  return _internal_has_outputs();
}
inline void TypedInterface::clear_outputs() {
  if (GetArenaForAllocation() == nullptr && outputs_ != nullptr) {
    delete outputs_;
  }
  outputs_ = nullptr;
}
inline const ::flyteidl::core::VariableMap& TypedInterface::_internal_outputs() const {
  const ::flyteidl::core::VariableMap* p = outputs_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::VariableMap&>(
      ::flyteidl::core::_VariableMap_default_instance_);
}
inline const ::flyteidl::core::VariableMap& TypedInterface::outputs() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.TypedInterface.outputs)
  return _internal_outputs();
}
inline void TypedInterface::unsafe_arena_set_allocated_outputs(
    ::flyteidl::core::VariableMap* outputs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(outputs_);
  }
  outputs_ = outputs;
  if (outputs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.TypedInterface.outputs)
}
inline ::flyteidl::core::VariableMap* TypedInterface::release_outputs() {
  
  ::flyteidl::core::VariableMap* temp = outputs_;
  outputs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::VariableMap* TypedInterface::unsafe_arena_release_outputs() {
  // @@protoc_insertion_point(field_release:flyteidl.core.TypedInterface.outputs)
  
  ::flyteidl::core::VariableMap* temp = outputs_;
  outputs_ = nullptr;
  return temp;
}
inline ::flyteidl::core::VariableMap* TypedInterface::_internal_mutable_outputs() {
  
  if (outputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::VariableMap>(GetArenaForAllocation());
    outputs_ = p;
  }
  return outputs_;
}
inline ::flyteidl::core::VariableMap* TypedInterface::mutable_outputs() {
  ::flyteidl::core::VariableMap* _msg = _internal_mutable_outputs();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.TypedInterface.outputs)
  return _msg;
}
inline void TypedInterface::set_allocated_outputs(::flyteidl::core::VariableMap* outputs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete outputs_;
  }
  if (outputs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::VariableMap>::GetOwningArena(outputs);
    if (message_arena != submessage_arena) {
      outputs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outputs, submessage_arena);
    }
    
  } else {
    
  }
  outputs_ = outputs;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.TypedInterface.outputs)
}

// -------------------------------------------------------------------

// Parameter

// .flyteidl.core.Variable var = 1 [json_name = "var"];
inline bool Parameter::_internal_has_var() const {
  return this != internal_default_instance() && var_ != nullptr;
}
inline bool Parameter::has_var() const {
  return _internal_has_var();
}
inline void Parameter::clear_var() {
  if (GetArenaForAllocation() == nullptr && var_ != nullptr) {
    delete var_;
  }
  var_ = nullptr;
}
inline const ::flyteidl::core::Variable& Parameter::_internal_var() const {
  const ::flyteidl::core::Variable* p = var_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::Variable&>(
      ::flyteidl::core::_Variable_default_instance_);
}
inline const ::flyteidl::core::Variable& Parameter::var() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Parameter.var)
  return _internal_var();
}
inline void Parameter::unsafe_arena_set_allocated_var(
    ::flyteidl::core::Variable* var) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(var_);
  }
  var_ = var;
  if (var) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.Parameter.var)
}
inline ::flyteidl::core::Variable* Parameter::release_var() {
  
  ::flyteidl::core::Variable* temp = var_;
  var_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::Variable* Parameter::unsafe_arena_release_var() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Parameter.var)
  
  ::flyteidl::core::Variable* temp = var_;
  var_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Variable* Parameter::_internal_mutable_var() {
  
  if (var_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Variable>(GetArenaForAllocation());
    var_ = p;
  }
  return var_;
}
inline ::flyteidl::core::Variable* Parameter::mutable_var() {
  ::flyteidl::core::Variable* _msg = _internal_mutable_var();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Parameter.var)
  return _msg;
}
inline void Parameter::set_allocated_var(::flyteidl::core::Variable* var) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete var_;
  }
  if (var) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::Variable>::GetOwningArena(var);
    if (message_arena != submessage_arena) {
      var = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, var, submessage_arena);
    }
    
  } else {
    
  }
  var_ = var;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Parameter.var)
}

// .flyteidl.core.Literal default = 2 [json_name = "default"];
inline bool Parameter::_internal_has_default_() const {
  return behavior_case() == kDefault;
}
inline bool Parameter::has_default_() const {
  return _internal_has_default_();
}
inline void Parameter::set_has_default_() {
  _oneof_case_[0] = kDefault;
}
inline ::flyteidl::core::Literal* Parameter::release_default_() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Parameter.default)
  if (_internal_has_default_()) {
    clear_has_behavior();
      ::flyteidl::core::Literal* temp = behavior_.default__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    behavior_.default__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::Literal& Parameter::_internal_default_() const {
  return _internal_has_default_()
      ? *behavior_.default__
      : reinterpret_cast< ::flyteidl::core::Literal&>(::flyteidl::core::_Literal_default_instance_);
}
inline const ::flyteidl::core::Literal& Parameter::default_() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Parameter.default)
  return _internal_default_();
}
inline ::flyteidl::core::Literal* Parameter::unsafe_arena_release_default_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.core.Parameter.default)
  if (_internal_has_default_()) {
    clear_has_behavior();
    ::flyteidl::core::Literal* temp = behavior_.default__;
    behavior_.default__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Parameter::unsafe_arena_set_allocated_default_(::flyteidl::core::Literal* default_) {
  clear_behavior();
  if (default_) {
    set_has_default_();
    behavior_.default__ = default_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.Parameter.default)
}
inline ::flyteidl::core::Literal* Parameter::_internal_mutable_default_() {
  if (!_internal_has_default_()) {
    clear_behavior();
    set_has_default_();
    behavior_.default__ = CreateMaybeMessage< ::flyteidl::core::Literal >(GetArenaForAllocation());
  }
  return behavior_.default__;
}
inline ::flyteidl::core::Literal* Parameter::mutable_default_() {
  ::flyteidl::core::Literal* _msg = _internal_mutable_default_();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Parameter.default)
  return _msg;
}

// bool required = 3 [json_name = "required"];
inline bool Parameter::_internal_has_required() const {
  return behavior_case() == kRequired;
}
inline bool Parameter::has_required() const {
  return _internal_has_required();
}
inline void Parameter::set_has_required() {
  _oneof_case_[0] = kRequired;
}
inline void Parameter::clear_required() {
  if (_internal_has_required()) {
    behavior_.required_ = false;
    clear_has_behavior();
  }
}
inline bool Parameter::_internal_required() const {
  if (_internal_has_required()) {
    return behavior_.required_;
  }
  return false;
}
inline void Parameter::_internal_set_required(bool value) {
  if (!_internal_has_required()) {
    clear_behavior();
    set_has_required();
  }
  behavior_.required_ = value;
}
inline bool Parameter::required() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Parameter.required)
  return _internal_required();
}
inline void Parameter::set_required(bool value) {
  _internal_set_required(value);
  // @@protoc_insertion_point(field_set:flyteidl.core.Parameter.required)
}

inline bool Parameter::has_behavior() const {
  return behavior_case() != BEHAVIOR_NOT_SET;
}
inline void Parameter::clear_has_behavior() {
  _oneof_case_[0] = BEHAVIOR_NOT_SET;
}
inline Parameter::BehaviorCase Parameter::behavior_case() const {
  return Parameter::BehaviorCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ParameterMap

// map<string, .flyteidl.core.Parameter> parameters = 1 [json_name = "parameters"];
inline int ParameterMap::_internal_parameters_size() const {
  return parameters_.size();
}
inline int ParameterMap::parameters_size() const {
  return _internal_parameters_size();
}
inline void ParameterMap::clear_parameters() {
  parameters_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::Parameter >&
ParameterMap::_internal_parameters() const {
  return parameters_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::Parameter >&
ParameterMap::parameters() const {
  // @@protoc_insertion_point(field_map:flyteidl.core.ParameterMap.parameters)
  return _internal_parameters();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::Parameter >*
ParameterMap::_internal_mutable_parameters() {
  return parameters_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::Parameter >*
ParameterMap::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_map:flyteidl.core.ParameterMap.parameters)
  return _internal_mutable_parameters();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fcore_2finterface_2eproto
