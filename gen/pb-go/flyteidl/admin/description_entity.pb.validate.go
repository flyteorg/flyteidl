// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl/admin/description_entity.proto

package admin

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"

	core "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}

	_ = core.ResourceType(0)
)

// define the regex for a UUID once up-front
var _description_entity_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on DescriptionEntity with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DescriptionEntity) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ShortDescription

	if v, ok := interface{}(m.GetLongDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescriptionEntityValidationError{
				field:  "LongDescription",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSourceCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescriptionEntityValidationError{
				field:  "SourceCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescriptionEntityValidationError is the validation error returned by
// DescriptionEntity.Validate if the designated constraints aren't met.
type DescriptionEntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescriptionEntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescriptionEntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescriptionEntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescriptionEntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescriptionEntityValidationError) ErrorName() string {
	return "DescriptionEntityValidationError"
}

// Error satisfies the builtin error interface
func (e DescriptionEntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescriptionEntity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescriptionEntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescriptionEntityValidationError{}

// Validate checks the field values on LongDescription with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *LongDescription) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Format

	// no validation rules for IconLink

	switch m.Content.(type) {

	case *LongDescription_Value:
		// no validation rules for Value

	case *LongDescription_Uri:
		// no validation rules for Uri

	}

	return nil
}

// LongDescriptionValidationError is the validation error returned by
// LongDescription.Validate if the designated constraints aren't met.
type LongDescriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LongDescriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LongDescriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LongDescriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LongDescriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LongDescriptionValidationError) ErrorName() string { return "LongDescriptionValidationError" }

// Error satisfies the builtin error interface
func (e LongDescriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLongDescription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LongDescriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LongDescriptionValidationError{}

// Validate checks the field values on SourceCode with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SourceCode) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Link

	return nil
}

// SourceCodeValidationError is the validation error returned by
// SourceCode.Validate if the designated constraints aren't met.
type SourceCodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SourceCodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SourceCodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SourceCodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SourceCodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SourceCodeValidationError) ErrorName() string { return "SourceCodeValidationError" }

// Error satisfies the builtin error interface
func (e SourceCodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSourceCode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SourceCodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SourceCodeValidationError{}

// Validate checks the field values on DescriptionEntityIdentifier with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescriptionEntityIdentifier) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ResourceType

	// no validation rules for Project

	// no validation rules for Domain

	// no validation rules for Name

	return nil
}

// DescriptionEntityIdentifierValidationError is the validation error returned
// by DescriptionEntityIdentifier.Validate if the designated constraints
// aren't met.
type DescriptionEntityIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescriptionEntityIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescriptionEntityIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescriptionEntityIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescriptionEntityIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescriptionEntityIdentifierValidationError) ErrorName() string {
	return "DescriptionEntityIdentifierValidationError"
}

// Error satisfies the builtin error interface
func (e DescriptionEntityIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescriptionEntityIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescriptionEntityIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescriptionEntityIdentifierValidationError{}

// Validate checks the field values on DescriptionEntityCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescriptionEntityCreateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescriptionEntityCreateRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDescriptionEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescriptionEntityCreateRequestValidationError{
				field:  "DescriptionEntity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescriptionEntityCreateRequestValidationError is the validation error
// returned by DescriptionEntityCreateRequest.Validate if the designated
// constraints aren't met.
type DescriptionEntityCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescriptionEntityCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescriptionEntityCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescriptionEntityCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescriptionEntityCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescriptionEntityCreateRequestValidationError) ErrorName() string {
	return "DescriptionEntityCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescriptionEntityCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescriptionEntityCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescriptionEntityCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescriptionEntityCreateRequestValidationError{}

// Validate checks the field values on DescriptionEntityCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescriptionEntityCreateResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DescriptionEntityCreateResponseValidationError is the validation error
// returned by DescriptionEntityCreateResponse.Validate if the designated
// constraints aren't met.
type DescriptionEntityCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescriptionEntityCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescriptionEntityCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescriptionEntityCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescriptionEntityCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescriptionEntityCreateResponseValidationError) ErrorName() string {
	return "DescriptionEntityCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescriptionEntityCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescriptionEntityCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescriptionEntityCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescriptionEntityCreateResponseValidationError{}

// Validate checks the field values on DescriptionList with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DescriptionList) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetDescriptionEntities() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescriptionListValidationError{
					field:  fmt.Sprintf("DescriptionEntities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Token

	return nil
}

// DescriptionListValidationError is the validation error returned by
// DescriptionList.Validate if the designated constraints aren't met.
type DescriptionListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescriptionListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescriptionListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescriptionListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescriptionListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescriptionListValidationError) ErrorName() string { return "DescriptionListValidationError" }

// Error satisfies the builtin error interface
func (e DescriptionListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescriptionList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescriptionListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescriptionListValidationError{}

// Validate checks the field values on DescriptionListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescriptionListRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDescriptionEntityId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescriptionListRequestValidationError{
				field:  "DescriptionEntityId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Limit

	// no validation rules for Token

	// no validation rules for Filters

	if v, ok := interface{}(m.GetSortBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescriptionListRequestValidationError{
				field:  "SortBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescriptionListRequestValidationError is the validation error returned by
// DescriptionListRequest.Validate if the designated constraints aren't met.
type DescriptionListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescriptionListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescriptionListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescriptionListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescriptionListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescriptionListRequestValidationError) ErrorName() string {
	return "DescriptionListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescriptionListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescriptionListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescriptionListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescriptionListRequestValidationError{}
