// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/sagemaker/training_job.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fplugins_2fsagemaker_2ftraining_5fjob_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fplugins_2fsagemaker_2ftraining_5fjob_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fsagemaker_2ftraining_5fjob_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fplugins_2fsagemaker_2ftraining_5fjob_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fplugins_2fsagemaker_2ftraining_5fjob_2eproto;
namespace flyteidl {
namespace plugins {
namespace sagemaker {
class AlgorithmName;
struct AlgorithmNameDefaultTypeInternal;
extern AlgorithmNameDefaultTypeInternal _AlgorithmName_default_instance_;
class AlgorithmSpecification;
struct AlgorithmSpecificationDefaultTypeInternal;
extern AlgorithmSpecificationDefaultTypeInternal _AlgorithmSpecification_default_instance_;
class DistributedProtocol;
struct DistributedProtocolDefaultTypeInternal;
extern DistributedProtocolDefaultTypeInternal _DistributedProtocol_default_instance_;
class InputContentType;
struct InputContentTypeDefaultTypeInternal;
extern InputContentTypeDefaultTypeInternal _InputContentType_default_instance_;
class InputMode;
struct InputModeDefaultTypeInternal;
extern InputModeDefaultTypeInternal _InputMode_default_instance_;
class MetricDefinition;
struct MetricDefinitionDefaultTypeInternal;
extern MetricDefinitionDefaultTypeInternal _MetricDefinition_default_instance_;
class TrainingJob;
struct TrainingJobDefaultTypeInternal;
extern TrainingJobDefaultTypeInternal _TrainingJob_default_instance_;
class TrainingJobResourceConfig;
struct TrainingJobResourceConfigDefaultTypeInternal;
extern TrainingJobResourceConfigDefaultTypeInternal _TrainingJobResourceConfig_default_instance_;
}  // namespace sagemaker
}  // namespace plugins
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::plugins::sagemaker::AlgorithmName* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::AlgorithmName>(Arena*);
template<> ::flyteidl::plugins::sagemaker::AlgorithmSpecification* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::AlgorithmSpecification>(Arena*);
template<> ::flyteidl::plugins::sagemaker::DistributedProtocol* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::DistributedProtocol>(Arena*);
template<> ::flyteidl::plugins::sagemaker::InputContentType* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::InputContentType>(Arena*);
template<> ::flyteidl::plugins::sagemaker::InputMode* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::InputMode>(Arena*);
template<> ::flyteidl::plugins::sagemaker::MetricDefinition* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::MetricDefinition>(Arena*);
template<> ::flyteidl::plugins::sagemaker::TrainingJob* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::TrainingJob>(Arena*);
template<> ::flyteidl::plugins::sagemaker::TrainingJobResourceConfig* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::TrainingJobResourceConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace plugins {
namespace sagemaker {

enum InputMode_Value : int {
  InputMode_Value_FILE = 0,
  InputMode_Value_PIPE = 1,
  InputMode_Value_InputMode_Value_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  InputMode_Value_InputMode_Value_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool InputMode_Value_IsValid(int value);
constexpr InputMode_Value InputMode_Value_Value_MIN = InputMode_Value_FILE;
constexpr InputMode_Value InputMode_Value_Value_MAX = InputMode_Value_PIPE;
constexpr int InputMode_Value_Value_ARRAYSIZE = InputMode_Value_Value_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InputMode_Value_descriptor();
template<typename T>
inline const std::string& InputMode_Value_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InputMode_Value>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InputMode_Value_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InputMode_Value_descriptor(), enum_t_value);
}
inline bool InputMode_Value_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InputMode_Value* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InputMode_Value>(
    InputMode_Value_descriptor(), name, value);
}
enum AlgorithmName_Value : int {
  AlgorithmName_Value_CUSTOM = 0,
  AlgorithmName_Value_XGBOOST = 1,
  AlgorithmName_Value_AlgorithmName_Value_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AlgorithmName_Value_AlgorithmName_Value_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AlgorithmName_Value_IsValid(int value);
constexpr AlgorithmName_Value AlgorithmName_Value_Value_MIN = AlgorithmName_Value_CUSTOM;
constexpr AlgorithmName_Value AlgorithmName_Value_Value_MAX = AlgorithmName_Value_XGBOOST;
constexpr int AlgorithmName_Value_Value_ARRAYSIZE = AlgorithmName_Value_Value_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlgorithmName_Value_descriptor();
template<typename T>
inline const std::string& AlgorithmName_Value_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AlgorithmName_Value>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AlgorithmName_Value_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AlgorithmName_Value_descriptor(), enum_t_value);
}
inline bool AlgorithmName_Value_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AlgorithmName_Value* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AlgorithmName_Value>(
    AlgorithmName_Value_descriptor(), name, value);
}
enum InputContentType_Value : int {
  InputContentType_Value_TEXT_CSV = 0,
  InputContentType_Value_InputContentType_Value_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  InputContentType_Value_InputContentType_Value_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool InputContentType_Value_IsValid(int value);
constexpr InputContentType_Value InputContentType_Value_Value_MIN = InputContentType_Value_TEXT_CSV;
constexpr InputContentType_Value InputContentType_Value_Value_MAX = InputContentType_Value_TEXT_CSV;
constexpr int InputContentType_Value_Value_ARRAYSIZE = InputContentType_Value_Value_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InputContentType_Value_descriptor();
template<typename T>
inline const std::string& InputContentType_Value_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InputContentType_Value>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InputContentType_Value_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InputContentType_Value_descriptor(), enum_t_value);
}
inline bool InputContentType_Value_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InputContentType_Value* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InputContentType_Value>(
    InputContentType_Value_descriptor(), name, value);
}
enum DistributedProtocol_Value : int {
  DistributedProtocol_Value_UNSPECIFIED = 0,
  DistributedProtocol_Value_MPI = 1,
  DistributedProtocol_Value_DistributedProtocol_Value_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DistributedProtocol_Value_DistributedProtocol_Value_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DistributedProtocol_Value_IsValid(int value);
constexpr DistributedProtocol_Value DistributedProtocol_Value_Value_MIN = DistributedProtocol_Value_UNSPECIFIED;
constexpr DistributedProtocol_Value DistributedProtocol_Value_Value_MAX = DistributedProtocol_Value_MPI;
constexpr int DistributedProtocol_Value_Value_ARRAYSIZE = DistributedProtocol_Value_Value_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DistributedProtocol_Value_descriptor();
template<typename T>
inline const std::string& DistributedProtocol_Value_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DistributedProtocol_Value>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DistributedProtocol_Value_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DistributedProtocol_Value_descriptor(), enum_t_value);
}
inline bool DistributedProtocol_Value_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DistributedProtocol_Value* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DistributedProtocol_Value>(
    DistributedProtocol_Value_descriptor(), name, value);
}
// ===================================================================

class InputMode final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.InputMode) */ {
 public:
  inline InputMode() : InputMode(nullptr) {}
  explicit constexpr InputMode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputMode(const InputMode& from);
  InputMode(InputMode&& from) noexcept
    : InputMode() {
    *this = ::std::move(from);
  }

  inline InputMode& operator=(const InputMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputMode& operator=(InputMode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InputMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputMode* internal_default_instance() {
    return reinterpret_cast<const InputMode*>(
               &_InputMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InputMode& a, InputMode& b) {
    a.Swap(&b);
  }
  inline void Swap(InputMode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InputMode>(arena);
  }

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.plugins.sagemaker.InputMode";
  }
  protected:
  explicit InputMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef InputMode_Value Value;
  static constexpr Value FILE =
    InputMode_Value_FILE;
  static constexpr Value PIPE =
    InputMode_Value_PIPE;
  static inline bool Value_IsValid(int value) {
    return InputMode_Value_IsValid(value);
  }
  static constexpr Value Value_MIN =
    InputMode_Value_Value_MIN;
  static constexpr Value Value_MAX =
    InputMode_Value_Value_MAX;
  static constexpr int Value_ARRAYSIZE =
    InputMode_Value_Value_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Value_descriptor() {
    return InputMode_Value_descriptor();
  }
  template<typename T>
  static inline const std::string& Value_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Value>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Value_Name.");
    return InputMode_Value_Name(enum_t_value);
  }
  static inline bool Value_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Value* value) {
    return InputMode_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.InputMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2ftraining_5fjob_2eproto;
};
// -------------------------------------------------------------------

class AlgorithmName final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.AlgorithmName) */ {
 public:
  inline AlgorithmName() : AlgorithmName(nullptr) {}
  explicit constexpr AlgorithmName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlgorithmName(const AlgorithmName& from);
  AlgorithmName(AlgorithmName&& from) noexcept
    : AlgorithmName() {
    *this = ::std::move(from);
  }

  inline AlgorithmName& operator=(const AlgorithmName& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlgorithmName& operator=(AlgorithmName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlgorithmName& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlgorithmName* internal_default_instance() {
    return reinterpret_cast<const AlgorithmName*>(
               &_AlgorithmName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AlgorithmName& a, AlgorithmName& b) {
    a.Swap(&b);
  }
  inline void Swap(AlgorithmName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlgorithmName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlgorithmName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AlgorithmName>(arena);
  }

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.plugins.sagemaker.AlgorithmName";
  }
  protected:
  explicit AlgorithmName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AlgorithmName_Value Value;
  static constexpr Value CUSTOM =
    AlgorithmName_Value_CUSTOM;
  static constexpr Value XGBOOST =
    AlgorithmName_Value_XGBOOST;
  static inline bool Value_IsValid(int value) {
    return AlgorithmName_Value_IsValid(value);
  }
  static constexpr Value Value_MIN =
    AlgorithmName_Value_Value_MIN;
  static constexpr Value Value_MAX =
    AlgorithmName_Value_Value_MAX;
  static constexpr int Value_ARRAYSIZE =
    AlgorithmName_Value_Value_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Value_descriptor() {
    return AlgorithmName_Value_descriptor();
  }
  template<typename T>
  static inline const std::string& Value_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Value>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Value_Name.");
    return AlgorithmName_Value_Name(enum_t_value);
  }
  static inline bool Value_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Value* value) {
    return AlgorithmName_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.AlgorithmName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2ftraining_5fjob_2eproto;
};
// -------------------------------------------------------------------

class InputContentType final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.InputContentType) */ {
 public:
  inline InputContentType() : InputContentType(nullptr) {}
  explicit constexpr InputContentType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputContentType(const InputContentType& from);
  InputContentType(InputContentType&& from) noexcept
    : InputContentType() {
    *this = ::std::move(from);
  }

  inline InputContentType& operator=(const InputContentType& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputContentType& operator=(InputContentType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InputContentType& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputContentType* internal_default_instance() {
    return reinterpret_cast<const InputContentType*>(
               &_InputContentType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InputContentType& a, InputContentType& b) {
    a.Swap(&b);
  }
  inline void Swap(InputContentType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputContentType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputContentType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InputContentType>(arena);
  }

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.plugins.sagemaker.InputContentType";
  }
  protected:
  explicit InputContentType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef InputContentType_Value Value;
  static constexpr Value TEXT_CSV =
    InputContentType_Value_TEXT_CSV;
  static inline bool Value_IsValid(int value) {
    return InputContentType_Value_IsValid(value);
  }
  static constexpr Value Value_MIN =
    InputContentType_Value_Value_MIN;
  static constexpr Value Value_MAX =
    InputContentType_Value_Value_MAX;
  static constexpr int Value_ARRAYSIZE =
    InputContentType_Value_Value_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Value_descriptor() {
    return InputContentType_Value_descriptor();
  }
  template<typename T>
  static inline const std::string& Value_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Value>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Value_Name.");
    return InputContentType_Value_Name(enum_t_value);
  }
  static inline bool Value_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Value* value) {
    return InputContentType_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.InputContentType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2ftraining_5fjob_2eproto;
};
// -------------------------------------------------------------------

class MetricDefinition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.MetricDefinition) */ {
 public:
  inline MetricDefinition() : MetricDefinition(nullptr) {}
  ~MetricDefinition() override;
  explicit constexpr MetricDefinition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetricDefinition(const MetricDefinition& from);
  MetricDefinition(MetricDefinition&& from) noexcept
    : MetricDefinition() {
    *this = ::std::move(from);
  }

  inline MetricDefinition& operator=(const MetricDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricDefinition& operator=(MetricDefinition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetricDefinition& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetricDefinition* internal_default_instance() {
    return reinterpret_cast<const MetricDefinition*>(
               &_MetricDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MetricDefinition& a, MetricDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricDefinition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricDefinition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetricDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MetricDefinition>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricDefinition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.plugins.sagemaker.MetricDefinition";
  }
  protected:
  explicit MetricDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kRegexFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string regex = 2 [json_name = "regex"];
  void clear_regex();
  const std::string& regex() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_regex(ArgT0&& arg0, ArgT... args);
  std::string* mutable_regex();
  PROTOBUF_NODISCARD std::string* release_regex();
  void set_allocated_regex(std::string* regex);
  private:
  const std::string& _internal_regex() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_regex(const std::string& value);
  std::string* _internal_mutable_regex();
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.MetricDefinition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2ftraining_5fjob_2eproto;
};
// -------------------------------------------------------------------

class AlgorithmSpecification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.AlgorithmSpecification) */ {
 public:
  inline AlgorithmSpecification() : AlgorithmSpecification(nullptr) {}
  ~AlgorithmSpecification() override;
  explicit constexpr AlgorithmSpecification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlgorithmSpecification(const AlgorithmSpecification& from);
  AlgorithmSpecification(AlgorithmSpecification&& from) noexcept
    : AlgorithmSpecification() {
    *this = ::std::move(from);
  }

  inline AlgorithmSpecification& operator=(const AlgorithmSpecification& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlgorithmSpecification& operator=(AlgorithmSpecification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlgorithmSpecification& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlgorithmSpecification* internal_default_instance() {
    return reinterpret_cast<const AlgorithmSpecification*>(
               &_AlgorithmSpecification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AlgorithmSpecification& a, AlgorithmSpecification& b) {
    a.Swap(&b);
  }
  inline void Swap(AlgorithmSpecification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlgorithmSpecification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlgorithmSpecification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AlgorithmSpecification>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgorithmSpecification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.plugins.sagemaker.AlgorithmSpecification";
  }
  protected:
  explicit AlgorithmSpecification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricDefinitionsFieldNumber = 4,
    kAlgorithmVersionFieldNumber = 3,
    kInputModeFieldNumber = 1,
    kAlgorithmNameFieldNumber = 2,
    kInputContentTypeFieldNumber = 5,
  };
  // repeated .flyteidl.plugins.sagemaker.MetricDefinition metric_definitions = 4 [json_name = "metricDefinitions"];
  int metric_definitions_size() const;
  private:
  int _internal_metric_definitions_size() const;
  public:
  void clear_metric_definitions();
  ::flyteidl::plugins::sagemaker::MetricDefinition* mutable_metric_definitions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::plugins::sagemaker::MetricDefinition >*
      mutable_metric_definitions();
  private:
  const ::flyteidl::plugins::sagemaker::MetricDefinition& _internal_metric_definitions(int index) const;
  ::flyteidl::plugins::sagemaker::MetricDefinition* _internal_add_metric_definitions();
  public:
  const ::flyteidl::plugins::sagemaker::MetricDefinition& metric_definitions(int index) const;
  ::flyteidl::plugins::sagemaker::MetricDefinition* add_metric_definitions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::plugins::sagemaker::MetricDefinition >&
      metric_definitions() const;

  // string algorithm_version = 3 [json_name = "algorithmVersion"];
  void clear_algorithm_version();
  const std::string& algorithm_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_algorithm_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_algorithm_version();
  PROTOBUF_NODISCARD std::string* release_algorithm_version();
  void set_allocated_algorithm_version(std::string* algorithm_version);
  private:
  const std::string& _internal_algorithm_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_algorithm_version(const std::string& value);
  std::string* _internal_mutable_algorithm_version();
  public:

  // .flyteidl.plugins.sagemaker.InputMode.Value input_mode = 1 [json_name = "inputMode"];
  void clear_input_mode();
  ::flyteidl::plugins::sagemaker::InputMode_Value input_mode() const;
  void set_input_mode(::flyteidl::plugins::sagemaker::InputMode_Value value);
  private:
  ::flyteidl::plugins::sagemaker::InputMode_Value _internal_input_mode() const;
  void _internal_set_input_mode(::flyteidl::plugins::sagemaker::InputMode_Value value);
  public:

  // .flyteidl.plugins.sagemaker.AlgorithmName.Value algorithm_name = 2 [json_name = "algorithmName"];
  void clear_algorithm_name();
  ::flyteidl::plugins::sagemaker::AlgorithmName_Value algorithm_name() const;
  void set_algorithm_name(::flyteidl::plugins::sagemaker::AlgorithmName_Value value);
  private:
  ::flyteidl::plugins::sagemaker::AlgorithmName_Value _internal_algorithm_name() const;
  void _internal_set_algorithm_name(::flyteidl::plugins::sagemaker::AlgorithmName_Value value);
  public:

  // .flyteidl.plugins.sagemaker.InputContentType.Value input_content_type = 5 [json_name = "inputContentType"];
  void clear_input_content_type();
  ::flyteidl::plugins::sagemaker::InputContentType_Value input_content_type() const;
  void set_input_content_type(::flyteidl::plugins::sagemaker::InputContentType_Value value);
  private:
  ::flyteidl::plugins::sagemaker::InputContentType_Value _internal_input_content_type() const;
  void _internal_set_input_content_type(::flyteidl::plugins::sagemaker::InputContentType_Value value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.AlgorithmSpecification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::plugins::sagemaker::MetricDefinition > metric_definitions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr algorithm_version_;
  int input_mode_;
  int algorithm_name_;
  int input_content_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2ftraining_5fjob_2eproto;
};
// -------------------------------------------------------------------

class DistributedProtocol final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.DistributedProtocol) */ {
 public:
  inline DistributedProtocol() : DistributedProtocol(nullptr) {}
  explicit constexpr DistributedProtocol(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DistributedProtocol(const DistributedProtocol& from);
  DistributedProtocol(DistributedProtocol&& from) noexcept
    : DistributedProtocol() {
    *this = ::std::move(from);
  }

  inline DistributedProtocol& operator=(const DistributedProtocol& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistributedProtocol& operator=(DistributedProtocol&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DistributedProtocol& default_instance() {
    return *internal_default_instance();
  }
  static inline const DistributedProtocol* internal_default_instance() {
    return reinterpret_cast<const DistributedProtocol*>(
               &_DistributedProtocol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DistributedProtocol& a, DistributedProtocol& b) {
    a.Swap(&b);
  }
  inline void Swap(DistributedProtocol* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistributedProtocol* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DistributedProtocol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DistributedProtocol>(arena);
  }

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.plugins.sagemaker.DistributedProtocol";
  }
  protected:
  explicit DistributedProtocol(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DistributedProtocol_Value Value;
  static constexpr Value UNSPECIFIED =
    DistributedProtocol_Value_UNSPECIFIED;
  static constexpr Value MPI =
    DistributedProtocol_Value_MPI;
  static inline bool Value_IsValid(int value) {
    return DistributedProtocol_Value_IsValid(value);
  }
  static constexpr Value Value_MIN =
    DistributedProtocol_Value_Value_MIN;
  static constexpr Value Value_MAX =
    DistributedProtocol_Value_Value_MAX;
  static constexpr int Value_ARRAYSIZE =
    DistributedProtocol_Value_Value_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Value_descriptor() {
    return DistributedProtocol_Value_descriptor();
  }
  template<typename T>
  static inline const std::string& Value_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Value>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Value_Name.");
    return DistributedProtocol_Value_Name(enum_t_value);
  }
  static inline bool Value_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Value* value) {
    return DistributedProtocol_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.DistributedProtocol)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2ftraining_5fjob_2eproto;
};
// -------------------------------------------------------------------

class TrainingJobResourceConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.TrainingJobResourceConfig) */ {
 public:
  inline TrainingJobResourceConfig() : TrainingJobResourceConfig(nullptr) {}
  ~TrainingJobResourceConfig() override;
  explicit constexpr TrainingJobResourceConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrainingJobResourceConfig(const TrainingJobResourceConfig& from);
  TrainingJobResourceConfig(TrainingJobResourceConfig&& from) noexcept
    : TrainingJobResourceConfig() {
    *this = ::std::move(from);
  }

  inline TrainingJobResourceConfig& operator=(const TrainingJobResourceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainingJobResourceConfig& operator=(TrainingJobResourceConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrainingJobResourceConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrainingJobResourceConfig* internal_default_instance() {
    return reinterpret_cast<const TrainingJobResourceConfig*>(
               &_TrainingJobResourceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TrainingJobResourceConfig& a, TrainingJobResourceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainingJobResourceConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrainingJobResourceConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrainingJobResourceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrainingJobResourceConfig>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainingJobResourceConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.plugins.sagemaker.TrainingJobResourceConfig";
  }
  protected:
  explicit TrainingJobResourceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceTypeFieldNumber = 2,
    kInstanceCountFieldNumber = 1,
    kVolumeSizeInGbFieldNumber = 3,
    kDistributedProtocolFieldNumber = 4,
  };
  // string instance_type = 2 [json_name = "instanceType"];
  void clear_instance_type();
  const std::string& instance_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instance_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instance_type();
  PROTOBUF_NODISCARD std::string* release_instance_type();
  void set_allocated_instance_type(std::string* instance_type);
  private:
  const std::string& _internal_instance_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instance_type(const std::string& value);
  std::string* _internal_mutable_instance_type();
  public:

  // int64 instance_count = 1 [json_name = "instanceCount"];
  void clear_instance_count();
  int64_t instance_count() const;
  void set_instance_count(int64_t value);
  private:
  int64_t _internal_instance_count() const;
  void _internal_set_instance_count(int64_t value);
  public:

  // int64 volume_size_in_gb = 3 [json_name = "volumeSizeInGb"];
  void clear_volume_size_in_gb();
  int64_t volume_size_in_gb() const;
  void set_volume_size_in_gb(int64_t value);
  private:
  int64_t _internal_volume_size_in_gb() const;
  void _internal_set_volume_size_in_gb(int64_t value);
  public:

  // .flyteidl.plugins.sagemaker.DistributedProtocol.Value distributed_protocol = 4 [json_name = "distributedProtocol"];
  void clear_distributed_protocol();
  ::flyteidl::plugins::sagemaker::DistributedProtocol_Value distributed_protocol() const;
  void set_distributed_protocol(::flyteidl::plugins::sagemaker::DistributedProtocol_Value value);
  private:
  ::flyteidl::plugins::sagemaker::DistributedProtocol_Value _internal_distributed_protocol() const;
  void _internal_set_distributed_protocol(::flyteidl::plugins::sagemaker::DistributedProtocol_Value value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.TrainingJobResourceConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_type_;
  int64_t instance_count_;
  int64_t volume_size_in_gb_;
  int distributed_protocol_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2ftraining_5fjob_2eproto;
};
// -------------------------------------------------------------------

class TrainingJob final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.TrainingJob) */ {
 public:
  inline TrainingJob() : TrainingJob(nullptr) {}
  ~TrainingJob() override;
  explicit constexpr TrainingJob(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrainingJob(const TrainingJob& from);
  TrainingJob(TrainingJob&& from) noexcept
    : TrainingJob() {
    *this = ::std::move(from);
  }

  inline TrainingJob& operator=(const TrainingJob& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainingJob& operator=(TrainingJob&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrainingJob& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrainingJob* internal_default_instance() {
    return reinterpret_cast<const TrainingJob*>(
               &_TrainingJob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TrainingJob& a, TrainingJob& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainingJob* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrainingJob* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrainingJob* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrainingJob>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainingJob* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.plugins.sagemaker.TrainingJob";
  }
  protected:
  explicit TrainingJob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlgorithmSpecificationFieldNumber = 1,
    kTrainingJobResourceConfigFieldNumber = 2,
  };
  // .flyteidl.plugins.sagemaker.AlgorithmSpecification algorithm_specification = 1 [json_name = "algorithmSpecification"];
  bool has_algorithm_specification() const;
  private:
  bool _internal_has_algorithm_specification() const;
  public:
  void clear_algorithm_specification();
  const ::flyteidl::plugins::sagemaker::AlgorithmSpecification& algorithm_specification() const;
  PROTOBUF_NODISCARD ::flyteidl::plugins::sagemaker::AlgorithmSpecification* release_algorithm_specification();
  ::flyteidl::plugins::sagemaker::AlgorithmSpecification* mutable_algorithm_specification();
  void set_allocated_algorithm_specification(::flyteidl::plugins::sagemaker::AlgorithmSpecification* algorithm_specification);
  private:
  const ::flyteidl::plugins::sagemaker::AlgorithmSpecification& _internal_algorithm_specification() const;
  ::flyteidl::plugins::sagemaker::AlgorithmSpecification* _internal_mutable_algorithm_specification();
  public:
  void unsafe_arena_set_allocated_algorithm_specification(
      ::flyteidl::plugins::sagemaker::AlgorithmSpecification* algorithm_specification);
  ::flyteidl::plugins::sagemaker::AlgorithmSpecification* unsafe_arena_release_algorithm_specification();

  // .flyteidl.plugins.sagemaker.TrainingJobResourceConfig training_job_resource_config = 2 [json_name = "trainingJobResourceConfig"];
  bool has_training_job_resource_config() const;
  private:
  bool _internal_has_training_job_resource_config() const;
  public:
  void clear_training_job_resource_config();
  const ::flyteidl::plugins::sagemaker::TrainingJobResourceConfig& training_job_resource_config() const;
  PROTOBUF_NODISCARD ::flyteidl::plugins::sagemaker::TrainingJobResourceConfig* release_training_job_resource_config();
  ::flyteidl::plugins::sagemaker::TrainingJobResourceConfig* mutable_training_job_resource_config();
  void set_allocated_training_job_resource_config(::flyteidl::plugins::sagemaker::TrainingJobResourceConfig* training_job_resource_config);
  private:
  const ::flyteidl::plugins::sagemaker::TrainingJobResourceConfig& _internal_training_job_resource_config() const;
  ::flyteidl::plugins::sagemaker::TrainingJobResourceConfig* _internal_mutable_training_job_resource_config();
  public:
  void unsafe_arena_set_allocated_training_job_resource_config(
      ::flyteidl::plugins::sagemaker::TrainingJobResourceConfig* training_job_resource_config);
  ::flyteidl::plugins::sagemaker::TrainingJobResourceConfig* unsafe_arena_release_training_job_resource_config();

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.TrainingJob)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::plugins::sagemaker::AlgorithmSpecification* algorithm_specification_;
  ::flyteidl::plugins::sagemaker::TrainingJobResourceConfig* training_job_resource_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2ftraining_5fjob_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InputMode

// -------------------------------------------------------------------

// AlgorithmName

// -------------------------------------------------------------------

// InputContentType

// -------------------------------------------------------------------

// MetricDefinition

// string name = 1 [json_name = "name"];
inline void MetricDefinition::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& MetricDefinition::name() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.MetricDefinition.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetricDefinition::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.MetricDefinition.name)
}
inline std::string* MetricDefinition::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.MetricDefinition.name)
  return _s;
}
inline const std::string& MetricDefinition::_internal_name() const {
  return name_.Get();
}
inline void MetricDefinition::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MetricDefinition::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MetricDefinition::release_name() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.MetricDefinition.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MetricDefinition::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.MetricDefinition.name)
}

// string regex = 2 [json_name = "regex"];
inline void MetricDefinition::clear_regex() {
  regex_.ClearToEmpty();
}
inline const std::string& MetricDefinition::regex() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.MetricDefinition.regex)
  return _internal_regex();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetricDefinition::set_regex(ArgT0&& arg0, ArgT... args) {
 
 regex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.MetricDefinition.regex)
}
inline std::string* MetricDefinition::mutable_regex() {
  std::string* _s = _internal_mutable_regex();
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.MetricDefinition.regex)
  return _s;
}
inline const std::string& MetricDefinition::_internal_regex() const {
  return regex_.Get();
}
inline void MetricDefinition::_internal_set_regex(const std::string& value) {
  
  regex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MetricDefinition::_internal_mutable_regex() {
  
  return regex_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MetricDefinition::release_regex() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.MetricDefinition.regex)
  return regex_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MetricDefinition::set_allocated_regex(std::string* regex) {
  if (regex != nullptr) {
    
  } else {
    
  }
  regex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), regex,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (regex_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.MetricDefinition.regex)
}

// -------------------------------------------------------------------

// AlgorithmSpecification

// .flyteidl.plugins.sagemaker.InputMode.Value input_mode = 1 [json_name = "inputMode"];
inline void AlgorithmSpecification::clear_input_mode() {
  input_mode_ = 0;
}
inline ::flyteidl::plugins::sagemaker::InputMode_Value AlgorithmSpecification::_internal_input_mode() const {
  return static_cast< ::flyteidl::plugins::sagemaker::InputMode_Value >(input_mode_);
}
inline ::flyteidl::plugins::sagemaker::InputMode_Value AlgorithmSpecification::input_mode() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.AlgorithmSpecification.input_mode)
  return _internal_input_mode();
}
inline void AlgorithmSpecification::_internal_set_input_mode(::flyteidl::plugins::sagemaker::InputMode_Value value) {
  
  input_mode_ = value;
}
inline void AlgorithmSpecification::set_input_mode(::flyteidl::plugins::sagemaker::InputMode_Value value) {
  _internal_set_input_mode(value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.AlgorithmSpecification.input_mode)
}

// .flyteidl.plugins.sagemaker.AlgorithmName.Value algorithm_name = 2 [json_name = "algorithmName"];
inline void AlgorithmSpecification::clear_algorithm_name() {
  algorithm_name_ = 0;
}
inline ::flyteidl::plugins::sagemaker::AlgorithmName_Value AlgorithmSpecification::_internal_algorithm_name() const {
  return static_cast< ::flyteidl::plugins::sagemaker::AlgorithmName_Value >(algorithm_name_);
}
inline ::flyteidl::plugins::sagemaker::AlgorithmName_Value AlgorithmSpecification::algorithm_name() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.AlgorithmSpecification.algorithm_name)
  return _internal_algorithm_name();
}
inline void AlgorithmSpecification::_internal_set_algorithm_name(::flyteidl::plugins::sagemaker::AlgorithmName_Value value) {
  
  algorithm_name_ = value;
}
inline void AlgorithmSpecification::set_algorithm_name(::flyteidl::plugins::sagemaker::AlgorithmName_Value value) {
  _internal_set_algorithm_name(value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.AlgorithmSpecification.algorithm_name)
}

// string algorithm_version = 3 [json_name = "algorithmVersion"];
inline void AlgorithmSpecification::clear_algorithm_version() {
  algorithm_version_.ClearToEmpty();
}
inline const std::string& AlgorithmSpecification::algorithm_version() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.AlgorithmSpecification.algorithm_version)
  return _internal_algorithm_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlgorithmSpecification::set_algorithm_version(ArgT0&& arg0, ArgT... args) {
 
 algorithm_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.AlgorithmSpecification.algorithm_version)
}
inline std::string* AlgorithmSpecification::mutable_algorithm_version() {
  std::string* _s = _internal_mutable_algorithm_version();
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.AlgorithmSpecification.algorithm_version)
  return _s;
}
inline const std::string& AlgorithmSpecification::_internal_algorithm_version() const {
  return algorithm_version_.Get();
}
inline void AlgorithmSpecification::_internal_set_algorithm_version(const std::string& value) {
  
  algorithm_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AlgorithmSpecification::_internal_mutable_algorithm_version() {
  
  return algorithm_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AlgorithmSpecification::release_algorithm_version() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.AlgorithmSpecification.algorithm_version)
  return algorithm_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AlgorithmSpecification::set_allocated_algorithm_version(std::string* algorithm_version) {
  if (algorithm_version != nullptr) {
    
  } else {
    
  }
  algorithm_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), algorithm_version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (algorithm_version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    algorithm_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.AlgorithmSpecification.algorithm_version)
}

// repeated .flyteidl.plugins.sagemaker.MetricDefinition metric_definitions = 4 [json_name = "metricDefinitions"];
inline int AlgorithmSpecification::_internal_metric_definitions_size() const {
  return metric_definitions_.size();
}
inline int AlgorithmSpecification::metric_definitions_size() const {
  return _internal_metric_definitions_size();
}
inline void AlgorithmSpecification::clear_metric_definitions() {
  metric_definitions_.Clear();
}
inline ::flyteidl::plugins::sagemaker::MetricDefinition* AlgorithmSpecification::mutable_metric_definitions(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.AlgorithmSpecification.metric_definitions)
  return metric_definitions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::plugins::sagemaker::MetricDefinition >*
AlgorithmSpecification::mutable_metric_definitions() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.plugins.sagemaker.AlgorithmSpecification.metric_definitions)
  return &metric_definitions_;
}
inline const ::flyteidl::plugins::sagemaker::MetricDefinition& AlgorithmSpecification::_internal_metric_definitions(int index) const {
  return metric_definitions_.Get(index);
}
inline const ::flyteidl::plugins::sagemaker::MetricDefinition& AlgorithmSpecification::metric_definitions(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.AlgorithmSpecification.metric_definitions)
  return _internal_metric_definitions(index);
}
inline ::flyteidl::plugins::sagemaker::MetricDefinition* AlgorithmSpecification::_internal_add_metric_definitions() {
  return metric_definitions_.Add();
}
inline ::flyteidl::plugins::sagemaker::MetricDefinition* AlgorithmSpecification::add_metric_definitions() {
  ::flyteidl::plugins::sagemaker::MetricDefinition* _add = _internal_add_metric_definitions();
  // @@protoc_insertion_point(field_add:flyteidl.plugins.sagemaker.AlgorithmSpecification.metric_definitions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::plugins::sagemaker::MetricDefinition >&
AlgorithmSpecification::metric_definitions() const {
  // @@protoc_insertion_point(field_list:flyteidl.plugins.sagemaker.AlgorithmSpecification.metric_definitions)
  return metric_definitions_;
}

// .flyteidl.plugins.sagemaker.InputContentType.Value input_content_type = 5 [json_name = "inputContentType"];
inline void AlgorithmSpecification::clear_input_content_type() {
  input_content_type_ = 0;
}
inline ::flyteidl::plugins::sagemaker::InputContentType_Value AlgorithmSpecification::_internal_input_content_type() const {
  return static_cast< ::flyteidl::plugins::sagemaker::InputContentType_Value >(input_content_type_);
}
inline ::flyteidl::plugins::sagemaker::InputContentType_Value AlgorithmSpecification::input_content_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.AlgorithmSpecification.input_content_type)
  return _internal_input_content_type();
}
inline void AlgorithmSpecification::_internal_set_input_content_type(::flyteidl::plugins::sagemaker::InputContentType_Value value) {
  
  input_content_type_ = value;
}
inline void AlgorithmSpecification::set_input_content_type(::flyteidl::plugins::sagemaker::InputContentType_Value value) {
  _internal_set_input_content_type(value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.AlgorithmSpecification.input_content_type)
}

// -------------------------------------------------------------------

// DistributedProtocol

// -------------------------------------------------------------------

// TrainingJobResourceConfig

// int64 instance_count = 1 [json_name = "instanceCount"];
inline void TrainingJobResourceConfig::clear_instance_count() {
  instance_count_ = int64_t{0};
}
inline int64_t TrainingJobResourceConfig::_internal_instance_count() const {
  return instance_count_;
}
inline int64_t TrainingJobResourceConfig::instance_count() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.TrainingJobResourceConfig.instance_count)
  return _internal_instance_count();
}
inline void TrainingJobResourceConfig::_internal_set_instance_count(int64_t value) {
  
  instance_count_ = value;
}
inline void TrainingJobResourceConfig::set_instance_count(int64_t value) {
  _internal_set_instance_count(value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.TrainingJobResourceConfig.instance_count)
}

// string instance_type = 2 [json_name = "instanceType"];
inline void TrainingJobResourceConfig::clear_instance_type() {
  instance_type_.ClearToEmpty();
}
inline const std::string& TrainingJobResourceConfig::instance_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.TrainingJobResourceConfig.instance_type)
  return _internal_instance_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrainingJobResourceConfig::set_instance_type(ArgT0&& arg0, ArgT... args) {
 
 instance_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.TrainingJobResourceConfig.instance_type)
}
inline std::string* TrainingJobResourceConfig::mutable_instance_type() {
  std::string* _s = _internal_mutable_instance_type();
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.TrainingJobResourceConfig.instance_type)
  return _s;
}
inline const std::string& TrainingJobResourceConfig::_internal_instance_type() const {
  return instance_type_.Get();
}
inline void TrainingJobResourceConfig::_internal_set_instance_type(const std::string& value) {
  
  instance_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TrainingJobResourceConfig::_internal_mutable_instance_type() {
  
  return instance_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TrainingJobResourceConfig::release_instance_type() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.TrainingJobResourceConfig.instance_type)
  return instance_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TrainingJobResourceConfig::set_allocated_instance_type(std::string* instance_type) {
  if (instance_type != nullptr) {
    
  } else {
    
  }
  instance_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instance_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instance_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    instance_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.TrainingJobResourceConfig.instance_type)
}

// int64 volume_size_in_gb = 3 [json_name = "volumeSizeInGb"];
inline void TrainingJobResourceConfig::clear_volume_size_in_gb() {
  volume_size_in_gb_ = int64_t{0};
}
inline int64_t TrainingJobResourceConfig::_internal_volume_size_in_gb() const {
  return volume_size_in_gb_;
}
inline int64_t TrainingJobResourceConfig::volume_size_in_gb() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.TrainingJobResourceConfig.volume_size_in_gb)
  return _internal_volume_size_in_gb();
}
inline void TrainingJobResourceConfig::_internal_set_volume_size_in_gb(int64_t value) {
  
  volume_size_in_gb_ = value;
}
inline void TrainingJobResourceConfig::set_volume_size_in_gb(int64_t value) {
  _internal_set_volume_size_in_gb(value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.TrainingJobResourceConfig.volume_size_in_gb)
}

// .flyteidl.plugins.sagemaker.DistributedProtocol.Value distributed_protocol = 4 [json_name = "distributedProtocol"];
inline void TrainingJobResourceConfig::clear_distributed_protocol() {
  distributed_protocol_ = 0;
}
inline ::flyteidl::plugins::sagemaker::DistributedProtocol_Value TrainingJobResourceConfig::_internal_distributed_protocol() const {
  return static_cast< ::flyteidl::plugins::sagemaker::DistributedProtocol_Value >(distributed_protocol_);
}
inline ::flyteidl::plugins::sagemaker::DistributedProtocol_Value TrainingJobResourceConfig::distributed_protocol() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.TrainingJobResourceConfig.distributed_protocol)
  return _internal_distributed_protocol();
}
inline void TrainingJobResourceConfig::_internal_set_distributed_protocol(::flyteidl::plugins::sagemaker::DistributedProtocol_Value value) {
  
  distributed_protocol_ = value;
}
inline void TrainingJobResourceConfig::set_distributed_protocol(::flyteidl::plugins::sagemaker::DistributedProtocol_Value value) {
  _internal_set_distributed_protocol(value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.TrainingJobResourceConfig.distributed_protocol)
}

// -------------------------------------------------------------------

// TrainingJob

// .flyteidl.plugins.sagemaker.AlgorithmSpecification algorithm_specification = 1 [json_name = "algorithmSpecification"];
inline bool TrainingJob::_internal_has_algorithm_specification() const {
  return this != internal_default_instance() && algorithm_specification_ != nullptr;
}
inline bool TrainingJob::has_algorithm_specification() const {
  return _internal_has_algorithm_specification();
}
inline void TrainingJob::clear_algorithm_specification() {
  if (GetArenaForAllocation() == nullptr && algorithm_specification_ != nullptr) {
    delete algorithm_specification_;
  }
  algorithm_specification_ = nullptr;
}
inline const ::flyteidl::plugins::sagemaker::AlgorithmSpecification& TrainingJob::_internal_algorithm_specification() const {
  const ::flyteidl::plugins::sagemaker::AlgorithmSpecification* p = algorithm_specification_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::plugins::sagemaker::AlgorithmSpecification&>(
      ::flyteidl::plugins::sagemaker::_AlgorithmSpecification_default_instance_);
}
inline const ::flyteidl::plugins::sagemaker::AlgorithmSpecification& TrainingJob::algorithm_specification() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.TrainingJob.algorithm_specification)
  return _internal_algorithm_specification();
}
inline void TrainingJob::unsafe_arena_set_allocated_algorithm_specification(
    ::flyteidl::plugins::sagemaker::AlgorithmSpecification* algorithm_specification) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(algorithm_specification_);
  }
  algorithm_specification_ = algorithm_specification;
  if (algorithm_specification) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.plugins.sagemaker.TrainingJob.algorithm_specification)
}
inline ::flyteidl::plugins::sagemaker::AlgorithmSpecification* TrainingJob::release_algorithm_specification() {
  
  ::flyteidl::plugins::sagemaker::AlgorithmSpecification* temp = algorithm_specification_;
  algorithm_specification_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::plugins::sagemaker::AlgorithmSpecification* TrainingJob::unsafe_arena_release_algorithm_specification() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.TrainingJob.algorithm_specification)
  
  ::flyteidl::plugins::sagemaker::AlgorithmSpecification* temp = algorithm_specification_;
  algorithm_specification_ = nullptr;
  return temp;
}
inline ::flyteidl::plugins::sagemaker::AlgorithmSpecification* TrainingJob::_internal_mutable_algorithm_specification() {
  
  if (algorithm_specification_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::plugins::sagemaker::AlgorithmSpecification>(GetArenaForAllocation());
    algorithm_specification_ = p;
  }
  return algorithm_specification_;
}
inline ::flyteidl::plugins::sagemaker::AlgorithmSpecification* TrainingJob::mutable_algorithm_specification() {
  ::flyteidl::plugins::sagemaker::AlgorithmSpecification* _msg = _internal_mutable_algorithm_specification();
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.TrainingJob.algorithm_specification)
  return _msg;
}
inline void TrainingJob::set_allocated_algorithm_specification(::flyteidl::plugins::sagemaker::AlgorithmSpecification* algorithm_specification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete algorithm_specification_;
  }
  if (algorithm_specification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::plugins::sagemaker::AlgorithmSpecification>::GetOwningArena(algorithm_specification);
    if (message_arena != submessage_arena) {
      algorithm_specification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, algorithm_specification, submessage_arena);
    }
    
  } else {
    
  }
  algorithm_specification_ = algorithm_specification;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.TrainingJob.algorithm_specification)
}

// .flyteidl.plugins.sagemaker.TrainingJobResourceConfig training_job_resource_config = 2 [json_name = "trainingJobResourceConfig"];
inline bool TrainingJob::_internal_has_training_job_resource_config() const {
  return this != internal_default_instance() && training_job_resource_config_ != nullptr;
}
inline bool TrainingJob::has_training_job_resource_config() const {
  return _internal_has_training_job_resource_config();
}
inline void TrainingJob::clear_training_job_resource_config() {
  if (GetArenaForAllocation() == nullptr && training_job_resource_config_ != nullptr) {
    delete training_job_resource_config_;
  }
  training_job_resource_config_ = nullptr;
}
inline const ::flyteidl::plugins::sagemaker::TrainingJobResourceConfig& TrainingJob::_internal_training_job_resource_config() const {
  const ::flyteidl::plugins::sagemaker::TrainingJobResourceConfig* p = training_job_resource_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::plugins::sagemaker::TrainingJobResourceConfig&>(
      ::flyteidl::plugins::sagemaker::_TrainingJobResourceConfig_default_instance_);
}
inline const ::flyteidl::plugins::sagemaker::TrainingJobResourceConfig& TrainingJob::training_job_resource_config() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.TrainingJob.training_job_resource_config)
  return _internal_training_job_resource_config();
}
inline void TrainingJob::unsafe_arena_set_allocated_training_job_resource_config(
    ::flyteidl::plugins::sagemaker::TrainingJobResourceConfig* training_job_resource_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(training_job_resource_config_);
  }
  training_job_resource_config_ = training_job_resource_config;
  if (training_job_resource_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.plugins.sagemaker.TrainingJob.training_job_resource_config)
}
inline ::flyteidl::plugins::sagemaker::TrainingJobResourceConfig* TrainingJob::release_training_job_resource_config() {
  
  ::flyteidl::plugins::sagemaker::TrainingJobResourceConfig* temp = training_job_resource_config_;
  training_job_resource_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::plugins::sagemaker::TrainingJobResourceConfig* TrainingJob::unsafe_arena_release_training_job_resource_config() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.TrainingJob.training_job_resource_config)
  
  ::flyteidl::plugins::sagemaker::TrainingJobResourceConfig* temp = training_job_resource_config_;
  training_job_resource_config_ = nullptr;
  return temp;
}
inline ::flyteidl::plugins::sagemaker::TrainingJobResourceConfig* TrainingJob::_internal_mutable_training_job_resource_config() {
  
  if (training_job_resource_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::plugins::sagemaker::TrainingJobResourceConfig>(GetArenaForAllocation());
    training_job_resource_config_ = p;
  }
  return training_job_resource_config_;
}
inline ::flyteidl::plugins::sagemaker::TrainingJobResourceConfig* TrainingJob::mutable_training_job_resource_config() {
  ::flyteidl::plugins::sagemaker::TrainingJobResourceConfig* _msg = _internal_mutable_training_job_resource_config();
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.TrainingJob.training_job_resource_config)
  return _msg;
}
inline void TrainingJob::set_allocated_training_job_resource_config(::flyteidl::plugins::sagemaker::TrainingJobResourceConfig* training_job_resource_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete training_job_resource_config_;
  }
  if (training_job_resource_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::plugins::sagemaker::TrainingJobResourceConfig>::GetOwningArena(training_job_resource_config);
    if (message_arena != submessage_arena) {
      training_job_resource_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, training_job_resource_config, submessage_arena);
    }
    
  } else {
    
  }
  training_job_resource_config_ = training_job_resource_config;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.sagemaker.TrainingJob.training_job_resource_config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sagemaker
}  // namespace plugins
}  // namespace flyteidl

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::flyteidl::plugins::sagemaker::InputMode_Value> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::plugins::sagemaker::InputMode_Value>() {
  return ::flyteidl::plugins::sagemaker::InputMode_Value_descriptor();
}
template <> struct is_proto_enum< ::flyteidl::plugins::sagemaker::AlgorithmName_Value> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::plugins::sagemaker::AlgorithmName_Value>() {
  return ::flyteidl::plugins::sagemaker::AlgorithmName_Value_descriptor();
}
template <> struct is_proto_enum< ::flyteidl::plugins::sagemaker::InputContentType_Value> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::plugins::sagemaker::InputContentType_Value>() {
  return ::flyteidl::plugins::sagemaker::InputContentType_Value_descriptor();
}
template <> struct is_proto_enum< ::flyteidl::plugins::sagemaker::DistributedProtocol_Value> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::plugins::sagemaker::DistributedProtocol_Value>() {
  return ::flyteidl::plugins::sagemaker::DistributedProtocol_Value_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fplugins_2fsagemaker_2ftraining_5fjob_2eproto
