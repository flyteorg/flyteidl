// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/catalog.proto

#include "flyteidl/core/catalog.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace core {
constexpr CatalogArtifactTag::CatalogArtifactTag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : artifact_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CatalogArtifactTagDefaultTypeInternal {
  constexpr CatalogArtifactTagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CatalogArtifactTagDefaultTypeInternal() {}
  union {
    CatalogArtifactTag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CatalogArtifactTagDefaultTypeInternal _CatalogArtifactTag_default_instance_;
constexpr CatalogMetadata::CatalogMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dataset_id_(nullptr)
  , artifact_tag_(nullptr)
  , _oneof_case_{}{}
struct CatalogMetadataDefaultTypeInternal {
  constexpr CatalogMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CatalogMetadataDefaultTypeInternal() {}
  union {
    CatalogMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CatalogMetadataDefaultTypeInternal _CatalogMetadata_default_instance_;
constexpr CatalogReservation::CatalogReservation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CatalogReservationDefaultTypeInternal {
  constexpr CatalogReservationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CatalogReservationDefaultTypeInternal() {}
  union {
    CatalogReservation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CatalogReservationDefaultTypeInternal _CatalogReservation_default_instance_;
}  // namespace core
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fcore_2fcatalog_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fcore_2fcatalog_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fcore_2fcatalog_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fcore_2fcatalog_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::CatalogArtifactTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::CatalogArtifactTag, artifact_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::CatalogArtifactTag, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::CatalogMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::CatalogMetadata, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::CatalogMetadata, dataset_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::CatalogMetadata, artifact_tag_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::CatalogMetadata, source_execution_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::CatalogReservation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::core::CatalogArtifactTag)},
  { 8, -1, -1, sizeof(::flyteidl::core::CatalogMetadata)},
  { 18, -1, -1, sizeof(::flyteidl::core::CatalogReservation)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_CatalogArtifactTag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_CatalogMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_CatalogReservation_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fcore_2fcatalog_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033flyteidl/core/catalog.proto\022\rflyteidl."
  "core\032\036flyteidl/core/identifier.proto\"I\n\022"
  "CatalogArtifactTag\022\037\n\013artifact_id\030\001 \001(\tR"
  "\nartifactId\022\022\n\004name\030\002 \001(\tR\004name\"\203\002\n\017Cata"
  "logMetadata\0228\n\ndataset_id\030\001 \001(\0132\031.flytei"
  "dl.core.IdentifierR\tdatasetId\022D\n\014artifac"
  "t_tag\030\002 \001(\0132!.flyteidl.core.CatalogArtif"
  "actTagR\013artifactTag\022\\\n\025source_task_execu"
  "tion\030\003 \001(\0132&.flyteidl.core.TaskExecution"
  "IdentifierH\000R\023sourceTaskExecutionB\022\n\020sou"
  "rce_execution\"\236\001\n\022CatalogReservation\"\207\001\n"
  "\006Status\022\030\n\024RESERVATION_DISABLED\020\000\022\030\n\024RES"
  "ERVATION_ACQUIRED\020\001\022\026\n\022RESERVATION_EXIST"
  "S\020\002\022\030\n\024RESERVATION_RELEASED\020\003\022\027\n\023RESERVA"
  "TION_FAILURE\020\004*\215\001\n\022CatalogCacheStatus\022\022\n"
  "\016CACHE_DISABLED\020\000\022\016\n\nCACHE_MISS\020\001\022\r\n\tCAC"
  "HE_HIT\020\002\022\023\n\017CACHE_POPULATED\020\003\022\030\n\024CACHE_L"
  "OOKUP_FAILURE\020\004\022\025\n\021CACHE_PUT_FAILURE\020\005B\257"
  "\001\n\021com.flyteidl.coreB\014CatalogProtoH\002Z4gi"
  "thub.com/flyteorg/flyteidl/gen/pb-go/fly"
  "teidl/core\370\001\000\242\002\003FCX\252\002\rFlyteidl.Core\312\002\rFl"
  "yteidl\\Core\342\002\031Flyteidl\\Core\\GPBMetadata\352"
  "\002\016Flyteidl::Coreb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flyteidl_2fcore_2fcatalog_2eproto_deps[1] = {
  &::descriptor_table_flyteidl_2fcore_2fidentifier_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fcore_2fcatalog_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fcore_2fcatalog_2eproto = {
  false, false, 904, descriptor_table_protodef_flyteidl_2fcore_2fcatalog_2eproto, "flyteidl/core/catalog.proto", 
  &descriptor_table_flyteidl_2fcore_2fcatalog_2eproto_once, descriptor_table_flyteidl_2fcore_2fcatalog_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_flyteidl_2fcore_2fcatalog_2eproto::offsets,
  file_level_metadata_flyteidl_2fcore_2fcatalog_2eproto, file_level_enum_descriptors_flyteidl_2fcore_2fcatalog_2eproto, file_level_service_descriptors_flyteidl_2fcore_2fcatalog_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fcore_2fcatalog_2eproto_getter() {
  return &descriptor_table_flyteidl_2fcore_2fcatalog_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fcore_2fcatalog_2eproto(&descriptor_table_flyteidl_2fcore_2fcatalog_2eproto);
namespace flyteidl {
namespace core {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CatalogReservation_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fcore_2fcatalog_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2fcatalog_2eproto[0];
}
bool CatalogReservation_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CatalogReservation_Status CatalogReservation::RESERVATION_DISABLED;
constexpr CatalogReservation_Status CatalogReservation::RESERVATION_ACQUIRED;
constexpr CatalogReservation_Status CatalogReservation::RESERVATION_EXISTS;
constexpr CatalogReservation_Status CatalogReservation::RESERVATION_RELEASED;
constexpr CatalogReservation_Status CatalogReservation::RESERVATION_FAILURE;
constexpr CatalogReservation_Status CatalogReservation::Status_MIN;
constexpr CatalogReservation_Status CatalogReservation::Status_MAX;
constexpr int CatalogReservation::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CatalogCacheStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fcore_2fcatalog_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2fcatalog_2eproto[1];
}
bool CatalogCacheStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CatalogArtifactTag::_Internal {
 public:
};

CatalogArtifactTag::CatalogArtifactTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.CatalogArtifactTag)
}
CatalogArtifactTag::CatalogArtifactTag(const CatalogArtifactTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  artifact_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    artifact_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_artifact_id().empty()) {
    artifact_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_artifact_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.CatalogArtifactTag)
}

inline void CatalogArtifactTag::SharedCtor() {
artifact_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  artifact_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CatalogArtifactTag::~CatalogArtifactTag() {
  // @@protoc_insertion_point(destructor:flyteidl.core.CatalogArtifactTag)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CatalogArtifactTag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  artifact_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CatalogArtifactTag::ArenaDtor(void* object) {
  CatalogArtifactTag* _this = reinterpret_cast< CatalogArtifactTag* >(object);
  (void)_this;
}
void CatalogArtifactTag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CatalogArtifactTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CatalogArtifactTag::InternalSwap(CatalogArtifactTag* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata CatalogArtifactTag::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fcatalog_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fcatalog_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fcatalog_2eproto[0]);
}

// ===================================================================

class CatalogMetadata::_Internal {
 public:
  static const ::flyteidl::core::Identifier& dataset_id(const CatalogMetadata* msg);
  static const ::flyteidl::core::CatalogArtifactTag& artifact_tag(const CatalogMetadata* msg);
  static const ::flyteidl::core::TaskExecutionIdentifier& source_task_execution(const CatalogMetadata* msg);
};

const ::flyteidl::core::Identifier&
CatalogMetadata::_Internal::dataset_id(const CatalogMetadata* msg) {
  return *msg->dataset_id_;
}
const ::flyteidl::core::CatalogArtifactTag&
CatalogMetadata::_Internal::artifact_tag(const CatalogMetadata* msg) {
  return *msg->artifact_tag_;
}
const ::flyteidl::core::TaskExecutionIdentifier&
CatalogMetadata::_Internal::source_task_execution(const CatalogMetadata* msg) {
  return *msg->source_execution_.source_task_execution_;
}
void CatalogMetadata::clear_dataset_id() {
  if (GetArenaForAllocation() == nullptr && dataset_id_ != nullptr) {
    delete dataset_id_;
  }
  dataset_id_ = nullptr;
}
void CatalogMetadata::set_allocated_source_task_execution(::flyteidl::core::TaskExecutionIdentifier* source_task_execution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_source_execution();
  if (source_task_execution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_task_execution));
    if (message_arena != submessage_arena) {
      source_task_execution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_task_execution, submessage_arena);
    }
    set_has_source_task_execution();
    source_execution_.source_task_execution_ = source_task_execution;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.CatalogMetadata.source_task_execution)
}
void CatalogMetadata::clear_source_task_execution() {
  if (_internal_has_source_task_execution()) {
    if (GetArenaForAllocation() == nullptr) {
      delete source_execution_.source_task_execution_;
    }
    clear_has_source_execution();
  }
}
CatalogMetadata::CatalogMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.CatalogMetadata)
}
CatalogMetadata::CatalogMetadata(const CatalogMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dataset_id()) {
    dataset_id_ = new ::flyteidl::core::Identifier(*from.dataset_id_);
  } else {
    dataset_id_ = nullptr;
  }
  if (from._internal_has_artifact_tag()) {
    artifact_tag_ = new ::flyteidl::core::CatalogArtifactTag(*from.artifact_tag_);
  } else {
    artifact_tag_ = nullptr;
  }
  clear_has_source_execution();
  switch (from.source_execution_case()) {
    case kSourceTaskExecution: {
      _internal_mutable_source_task_execution()->::flyteidl::core::TaskExecutionIdentifier::MergeFrom(from._internal_source_task_execution());
      break;
    }
    case SOURCE_EXECUTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.CatalogMetadata)
}

inline void CatalogMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dataset_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&artifact_tag_) -
    reinterpret_cast<char*>(&dataset_id_)) + sizeof(artifact_tag_));
clear_has_source_execution();
}

CatalogMetadata::~CatalogMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.core.CatalogMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CatalogMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete dataset_id_;
  if (this != internal_default_instance()) delete artifact_tag_;
  if (has_source_execution()) {
    clear_source_execution();
  }
}

void CatalogMetadata::ArenaDtor(void* object) {
  CatalogMetadata* _this = reinterpret_cast< CatalogMetadata* >(object);
  (void)_this;
}
void CatalogMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CatalogMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CatalogMetadata::clear_source_execution() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.CatalogMetadata)
  switch (source_execution_case()) {
    case kSourceTaskExecution: {
      if (GetArenaForAllocation() == nullptr) {
        delete source_execution_.source_task_execution_;
      }
      break;
    }
    case SOURCE_EXECUTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SOURCE_EXECUTION_NOT_SET;
}


void CatalogMetadata::InternalSwap(CatalogMetadata* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata CatalogMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fcatalog_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fcatalog_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fcatalog_2eproto[1]);
}

// ===================================================================

class CatalogReservation::_Internal {
 public:
};

CatalogReservation::CatalogReservation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.CatalogReservation)
}
CatalogReservation::CatalogReservation(const CatalogReservation& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.CatalogReservation)
}



::PROTOBUF_NAMESPACE_ID::Metadata CatalogReservation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fcatalog_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fcatalog_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fcatalog_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::core::CatalogArtifactTag* Arena::CreateMaybeMessage< ::flyteidl::core::CatalogArtifactTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::CatalogArtifactTag >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::CatalogMetadata* Arena::CreateMaybeMessage< ::flyteidl::core::CatalogMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::CatalogMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::CatalogReservation* Arena::CreateMaybeMessage< ::flyteidl::core::CatalogReservation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::CatalogReservation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
