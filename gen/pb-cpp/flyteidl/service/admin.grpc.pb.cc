// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: flyteidl/service/admin.proto

#include "flyteidl/service/admin.pb.h"
#include "flyteidl/service/admin.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace flyteidl {
namespace service {

static const char* AdminService_method_names[] = {
  "/flyteidl.service.AdminService/CreateTask",
  "/flyteidl.service.AdminService/GetTask",
  "/flyteidl.service.AdminService/ListTaskIds",
  "/flyteidl.service.AdminService/ListTasks",
  "/flyteidl.service.AdminService/CreateWorkflow",
  "/flyteidl.service.AdminService/GetWorkflow",
  "/flyteidl.service.AdminService/ListWorkflowIds",
  "/flyteidl.service.AdminService/ListWorkflows",
  "/flyteidl.service.AdminService/CreateLaunchPlan",
  "/flyteidl.service.AdminService/GetLaunchPlan",
  "/flyteidl.service.AdminService/GetActiveLaunchPlan",
  "/flyteidl.service.AdminService/ListActiveLaunchPlans",
  "/flyteidl.service.AdminService/ListLaunchPlanIds",
  "/flyteidl.service.AdminService/ListLaunchPlans",
  "/flyteidl.service.AdminService/UpdateLaunchPlan",
  "/flyteidl.service.AdminService/CreateExecution",
  "/flyteidl.service.AdminService/RelaunchExecution",
  "/flyteidl.service.AdminService/RecoverExecution",
  "/flyteidl.service.AdminService/GetExecution",
  "/flyteidl.service.AdminService/UpdateExecution",
  "/flyteidl.service.AdminService/GetExecutionData",
  "/flyteidl.service.AdminService/ListExecutions",
  "/flyteidl.service.AdminService/TerminateExecution",
  "/flyteidl.service.AdminService/GetNodeExecution",
  "/flyteidl.service.AdminService/ListNodeExecutions",
  "/flyteidl.service.AdminService/ListNodeExecutionsForTask",
  "/flyteidl.service.AdminService/GetNodeExecutionData",
  "/flyteidl.service.AdminService/RegisterProject",
  "/flyteidl.service.AdminService/UpdateProject",
  "/flyteidl.service.AdminService/ListProjects",
  "/flyteidl.service.AdminService/CreateWorkflowEvent",
  "/flyteidl.service.AdminService/CreateNodeEvent",
  "/flyteidl.service.AdminService/CreateTaskEvent",
  "/flyteidl.service.AdminService/GetTaskExecution",
  "/flyteidl.service.AdminService/ListTaskExecutions",
  "/flyteidl.service.AdminService/GetTaskExecutionData",
  "/flyteidl.service.AdminService/UpdateProjectDomainAttributes",
  "/flyteidl.service.AdminService/GetProjectDomainAttributes",
  "/flyteidl.service.AdminService/DeleteProjectDomainAttributes",
  "/flyteidl.service.AdminService/UpdateProjectAttributes",
  "/flyteidl.service.AdminService/GetProjectAttributes",
  "/flyteidl.service.AdminService/DeleteProjectAttributes",
  "/flyteidl.service.AdminService/UpdateWorkflowAttributes",
  "/flyteidl.service.AdminService/GetWorkflowAttributes",
  "/flyteidl.service.AdminService/DeleteWorkflowAttributes",
  "/flyteidl.service.AdminService/ListMatchableAttributes",
  "/flyteidl.service.AdminService/ListNamedEntities",
  "/flyteidl.service.AdminService/GetNamedEntity",
  "/flyteidl.service.AdminService/UpdateNamedEntity",
  "/flyteidl.service.AdminService/GetVersion",
  "/flyteidl.service.AdminService/GetDescriptionEntity",
  "/flyteidl.service.AdminService/ListDescriptionEntities",
  "/flyteidl.service.AdminService/GetExecutionMetrics",
};

std::unique_ptr< AdminService::Stub> AdminService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AdminService::Stub> stub(new AdminService::Stub(channel));
  return stub;
}

AdminService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateTask_(AdminService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTask_(AdminService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListTaskIds_(AdminService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListTasks_(AdminService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateWorkflow_(AdminService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWorkflow_(AdminService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListWorkflowIds_(AdminService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListWorkflows_(AdminService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateLaunchPlan_(AdminService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLaunchPlan_(AdminService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetActiveLaunchPlan_(AdminService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListActiveLaunchPlans_(AdminService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListLaunchPlanIds_(AdminService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListLaunchPlans_(AdminService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateLaunchPlan_(AdminService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateExecution_(AdminService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RelaunchExecution_(AdminService_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RecoverExecution_(AdminService_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetExecution_(AdminService_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateExecution_(AdminService_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetExecutionData_(AdminService_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListExecutions_(AdminService_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TerminateExecution_(AdminService_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNodeExecution_(AdminService_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListNodeExecutions_(AdminService_method_names[24], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListNodeExecutionsForTask_(AdminService_method_names[25], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNodeExecutionData_(AdminService_method_names[26], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterProject_(AdminService_method_names[27], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateProject_(AdminService_method_names[28], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListProjects_(AdminService_method_names[29], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateWorkflowEvent_(AdminService_method_names[30], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateNodeEvent_(AdminService_method_names[31], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateTaskEvent_(AdminService_method_names[32], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTaskExecution_(AdminService_method_names[33], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListTaskExecutions_(AdminService_method_names[34], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTaskExecutionData_(AdminService_method_names[35], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateProjectDomainAttributes_(AdminService_method_names[36], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProjectDomainAttributes_(AdminService_method_names[37], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteProjectDomainAttributes_(AdminService_method_names[38], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateProjectAttributes_(AdminService_method_names[39], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProjectAttributes_(AdminService_method_names[40], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteProjectAttributes_(AdminService_method_names[41], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateWorkflowAttributes_(AdminService_method_names[42], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWorkflowAttributes_(AdminService_method_names[43], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteWorkflowAttributes_(AdminService_method_names[44], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListMatchableAttributes_(AdminService_method_names[45], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListNamedEntities_(AdminService_method_names[46], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNamedEntity_(AdminService_method_names[47], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateNamedEntity_(AdminService_method_names[48], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVersion_(AdminService_method_names[49], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDescriptionEntity_(AdminService_method_names[50], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListDescriptionEntities_(AdminService_method_names[51], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetExecutionMetrics_(AdminService_method_names[52], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AdminService::Stub::CreateTask(::grpc::ClientContext* context, const ::flyteidl::admin::TaskCreateRequest& request, ::flyteidl::admin::TaskCreateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateTask_, context, request, response);
}

void AdminService::Stub::experimental_async::CreateTask(::grpc::ClientContext* context, const ::flyteidl::admin::TaskCreateRequest* request, ::flyteidl::admin::TaskCreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateTask_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::CreateTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::TaskCreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateTask_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::CreateTask(::grpc::ClientContext* context, const ::flyteidl::admin::TaskCreateRequest* request, ::flyteidl::admin::TaskCreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateTask_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::CreateTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::TaskCreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::TaskCreateResponse>* AdminService::Stub::AsyncCreateTaskRaw(::grpc::ClientContext* context, const ::flyteidl::admin::TaskCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::TaskCreateResponse>::Create(channel_.get(), cq, rpcmethod_CreateTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::TaskCreateResponse>* AdminService::Stub::PrepareAsyncCreateTaskRaw(::grpc::ClientContext* context, const ::flyteidl::admin::TaskCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::TaskCreateResponse>::Create(channel_.get(), cq, rpcmethod_CreateTask_, context, request, false);
}

::grpc::Status AdminService::Stub::GetTask(::grpc::ClientContext* context, const ::flyteidl::admin::ObjectGetRequest& request, ::flyteidl::admin::Task* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTask_, context, request, response);
}

void AdminService::Stub::experimental_async::GetTask(::grpc::ClientContext* context, const ::flyteidl::admin::ObjectGetRequest* request, ::flyteidl::admin::Task* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTask_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::Task* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTask_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetTask(::grpc::ClientContext* context, const ::flyteidl::admin::ObjectGetRequest* request, ::flyteidl::admin::Task* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTask_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::GetTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::Task* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::Task>* AdminService::Stub::AsyncGetTaskRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ObjectGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::Task>::Create(channel_.get(), cq, rpcmethod_GetTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::Task>* AdminService::Stub::PrepareAsyncGetTaskRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ObjectGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::Task>::Create(channel_.get(), cq, rpcmethod_GetTask_, context, request, false);
}

::grpc::Status AdminService::Stub::ListTaskIds(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityIdentifierListRequest& request, ::flyteidl::admin::NamedEntityIdentifierList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListTaskIds_, context, request, response);
}

void AdminService::Stub::experimental_async::ListTaskIds(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityIdentifierListRequest* request, ::flyteidl::admin::NamedEntityIdentifierList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListTaskIds_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListTaskIds(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::NamedEntityIdentifierList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListTaskIds_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListTaskIds(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityIdentifierListRequest* request, ::flyteidl::admin::NamedEntityIdentifierList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListTaskIds_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::ListTaskIds(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::NamedEntityIdentifierList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListTaskIds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::NamedEntityIdentifierList>* AdminService::Stub::AsyncListTaskIdsRaw(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityIdentifierListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::NamedEntityIdentifierList>::Create(channel_.get(), cq, rpcmethod_ListTaskIds_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::NamedEntityIdentifierList>* AdminService::Stub::PrepareAsyncListTaskIdsRaw(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityIdentifierListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::NamedEntityIdentifierList>::Create(channel_.get(), cq, rpcmethod_ListTaskIds_, context, request, false);
}

::grpc::Status AdminService::Stub::ListTasks(::grpc::ClientContext* context, const ::flyteidl::admin::ResourceListRequest& request, ::flyteidl::admin::TaskList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListTasks_, context, request, response);
}

void AdminService::Stub::experimental_async::ListTasks(::grpc::ClientContext* context, const ::flyteidl::admin::ResourceListRequest* request, ::flyteidl::admin::TaskList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListTasks_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListTasks(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::TaskList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListTasks_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListTasks(::grpc::ClientContext* context, const ::flyteidl::admin::ResourceListRequest* request, ::flyteidl::admin::TaskList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListTasks_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::ListTasks(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::TaskList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListTasks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::TaskList>* AdminService::Stub::AsyncListTasksRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ResourceListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::TaskList>::Create(channel_.get(), cq, rpcmethod_ListTasks_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::TaskList>* AdminService::Stub::PrepareAsyncListTasksRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ResourceListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::TaskList>::Create(channel_.get(), cq, rpcmethod_ListTasks_, context, request, false);
}

::grpc::Status AdminService::Stub::CreateWorkflow(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowCreateRequest& request, ::flyteidl::admin::WorkflowCreateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateWorkflow_, context, request, response);
}

void AdminService::Stub::experimental_async::CreateWorkflow(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowCreateRequest* request, ::flyteidl::admin::WorkflowCreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateWorkflow_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::CreateWorkflow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::WorkflowCreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateWorkflow_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::CreateWorkflow(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowCreateRequest* request, ::flyteidl::admin::WorkflowCreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateWorkflow_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::CreateWorkflow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::WorkflowCreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateWorkflow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::WorkflowCreateResponse>* AdminService::Stub::AsyncCreateWorkflowRaw(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::WorkflowCreateResponse>::Create(channel_.get(), cq, rpcmethod_CreateWorkflow_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::WorkflowCreateResponse>* AdminService::Stub::PrepareAsyncCreateWorkflowRaw(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::WorkflowCreateResponse>::Create(channel_.get(), cq, rpcmethod_CreateWorkflow_, context, request, false);
}

::grpc::Status AdminService::Stub::GetWorkflow(::grpc::ClientContext* context, const ::flyteidl::admin::ObjectGetRequest& request, ::flyteidl::admin::Workflow* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetWorkflow_, context, request, response);
}

void AdminService::Stub::experimental_async::GetWorkflow(::grpc::ClientContext* context, const ::flyteidl::admin::ObjectGetRequest* request, ::flyteidl::admin::Workflow* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetWorkflow_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetWorkflow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::Workflow* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetWorkflow_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetWorkflow(::grpc::ClientContext* context, const ::flyteidl::admin::ObjectGetRequest* request, ::flyteidl::admin::Workflow* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetWorkflow_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::GetWorkflow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::Workflow* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetWorkflow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::Workflow>* AdminService::Stub::AsyncGetWorkflowRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ObjectGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::Workflow>::Create(channel_.get(), cq, rpcmethod_GetWorkflow_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::Workflow>* AdminService::Stub::PrepareAsyncGetWorkflowRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ObjectGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::Workflow>::Create(channel_.get(), cq, rpcmethod_GetWorkflow_, context, request, false);
}

::grpc::Status AdminService::Stub::ListWorkflowIds(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityIdentifierListRequest& request, ::flyteidl::admin::NamedEntityIdentifierList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListWorkflowIds_, context, request, response);
}

void AdminService::Stub::experimental_async::ListWorkflowIds(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityIdentifierListRequest* request, ::flyteidl::admin::NamedEntityIdentifierList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListWorkflowIds_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListWorkflowIds(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::NamedEntityIdentifierList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListWorkflowIds_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListWorkflowIds(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityIdentifierListRequest* request, ::flyteidl::admin::NamedEntityIdentifierList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListWorkflowIds_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::ListWorkflowIds(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::NamedEntityIdentifierList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListWorkflowIds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::NamedEntityIdentifierList>* AdminService::Stub::AsyncListWorkflowIdsRaw(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityIdentifierListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::NamedEntityIdentifierList>::Create(channel_.get(), cq, rpcmethod_ListWorkflowIds_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::NamedEntityIdentifierList>* AdminService::Stub::PrepareAsyncListWorkflowIdsRaw(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityIdentifierListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::NamedEntityIdentifierList>::Create(channel_.get(), cq, rpcmethod_ListWorkflowIds_, context, request, false);
}

::grpc::Status AdminService::Stub::ListWorkflows(::grpc::ClientContext* context, const ::flyteidl::admin::ResourceListRequest& request, ::flyteidl::admin::WorkflowList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListWorkflows_, context, request, response);
}

void AdminService::Stub::experimental_async::ListWorkflows(::grpc::ClientContext* context, const ::flyteidl::admin::ResourceListRequest* request, ::flyteidl::admin::WorkflowList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListWorkflows_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListWorkflows(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::WorkflowList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListWorkflows_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListWorkflows(::grpc::ClientContext* context, const ::flyteidl::admin::ResourceListRequest* request, ::flyteidl::admin::WorkflowList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListWorkflows_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::ListWorkflows(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::WorkflowList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListWorkflows_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::WorkflowList>* AdminService::Stub::AsyncListWorkflowsRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ResourceListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::WorkflowList>::Create(channel_.get(), cq, rpcmethod_ListWorkflows_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::WorkflowList>* AdminService::Stub::PrepareAsyncListWorkflowsRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ResourceListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::WorkflowList>::Create(channel_.get(), cq, rpcmethod_ListWorkflows_, context, request, false);
}

::grpc::Status AdminService::Stub::CreateLaunchPlan(::grpc::ClientContext* context, const ::flyteidl::admin::LaunchPlanCreateRequest& request, ::flyteidl::admin::LaunchPlanCreateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateLaunchPlan_, context, request, response);
}

void AdminService::Stub::experimental_async::CreateLaunchPlan(::grpc::ClientContext* context, const ::flyteidl::admin::LaunchPlanCreateRequest* request, ::flyteidl::admin::LaunchPlanCreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateLaunchPlan_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::CreateLaunchPlan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::LaunchPlanCreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateLaunchPlan_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::CreateLaunchPlan(::grpc::ClientContext* context, const ::flyteidl::admin::LaunchPlanCreateRequest* request, ::flyteidl::admin::LaunchPlanCreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateLaunchPlan_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::CreateLaunchPlan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::LaunchPlanCreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateLaunchPlan_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::LaunchPlanCreateResponse>* AdminService::Stub::AsyncCreateLaunchPlanRaw(::grpc::ClientContext* context, const ::flyteidl::admin::LaunchPlanCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::LaunchPlanCreateResponse>::Create(channel_.get(), cq, rpcmethod_CreateLaunchPlan_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::LaunchPlanCreateResponse>* AdminService::Stub::PrepareAsyncCreateLaunchPlanRaw(::grpc::ClientContext* context, const ::flyteidl::admin::LaunchPlanCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::LaunchPlanCreateResponse>::Create(channel_.get(), cq, rpcmethod_CreateLaunchPlan_, context, request, false);
}

::grpc::Status AdminService::Stub::GetLaunchPlan(::grpc::ClientContext* context, const ::flyteidl::admin::ObjectGetRequest& request, ::flyteidl::admin::LaunchPlan* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetLaunchPlan_, context, request, response);
}

void AdminService::Stub::experimental_async::GetLaunchPlan(::grpc::ClientContext* context, const ::flyteidl::admin::ObjectGetRequest* request, ::flyteidl::admin::LaunchPlan* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLaunchPlan_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetLaunchPlan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::LaunchPlan* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLaunchPlan_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetLaunchPlan(::grpc::ClientContext* context, const ::flyteidl::admin::ObjectGetRequest* request, ::flyteidl::admin::LaunchPlan* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLaunchPlan_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::GetLaunchPlan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::LaunchPlan* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLaunchPlan_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::LaunchPlan>* AdminService::Stub::AsyncGetLaunchPlanRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ObjectGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::LaunchPlan>::Create(channel_.get(), cq, rpcmethod_GetLaunchPlan_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::LaunchPlan>* AdminService::Stub::PrepareAsyncGetLaunchPlanRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ObjectGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::LaunchPlan>::Create(channel_.get(), cq, rpcmethod_GetLaunchPlan_, context, request, false);
}

::grpc::Status AdminService::Stub::GetActiveLaunchPlan(::grpc::ClientContext* context, const ::flyteidl::admin::ActiveLaunchPlanRequest& request, ::flyteidl::admin::LaunchPlan* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetActiveLaunchPlan_, context, request, response);
}

void AdminService::Stub::experimental_async::GetActiveLaunchPlan(::grpc::ClientContext* context, const ::flyteidl::admin::ActiveLaunchPlanRequest* request, ::flyteidl::admin::LaunchPlan* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetActiveLaunchPlan_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetActiveLaunchPlan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::LaunchPlan* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetActiveLaunchPlan_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetActiveLaunchPlan(::grpc::ClientContext* context, const ::flyteidl::admin::ActiveLaunchPlanRequest* request, ::flyteidl::admin::LaunchPlan* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetActiveLaunchPlan_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::GetActiveLaunchPlan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::LaunchPlan* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetActiveLaunchPlan_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::LaunchPlan>* AdminService::Stub::AsyncGetActiveLaunchPlanRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ActiveLaunchPlanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::LaunchPlan>::Create(channel_.get(), cq, rpcmethod_GetActiveLaunchPlan_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::LaunchPlan>* AdminService::Stub::PrepareAsyncGetActiveLaunchPlanRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ActiveLaunchPlanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::LaunchPlan>::Create(channel_.get(), cq, rpcmethod_GetActiveLaunchPlan_, context, request, false);
}

::grpc::Status AdminService::Stub::ListActiveLaunchPlans(::grpc::ClientContext* context, const ::flyteidl::admin::ActiveLaunchPlanListRequest& request, ::flyteidl::admin::LaunchPlanList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListActiveLaunchPlans_, context, request, response);
}

void AdminService::Stub::experimental_async::ListActiveLaunchPlans(::grpc::ClientContext* context, const ::flyteidl::admin::ActiveLaunchPlanListRequest* request, ::flyteidl::admin::LaunchPlanList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListActiveLaunchPlans_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListActiveLaunchPlans(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::LaunchPlanList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListActiveLaunchPlans_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListActiveLaunchPlans(::grpc::ClientContext* context, const ::flyteidl::admin::ActiveLaunchPlanListRequest* request, ::flyteidl::admin::LaunchPlanList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListActiveLaunchPlans_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::ListActiveLaunchPlans(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::LaunchPlanList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListActiveLaunchPlans_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::LaunchPlanList>* AdminService::Stub::AsyncListActiveLaunchPlansRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ActiveLaunchPlanListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::LaunchPlanList>::Create(channel_.get(), cq, rpcmethod_ListActiveLaunchPlans_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::LaunchPlanList>* AdminService::Stub::PrepareAsyncListActiveLaunchPlansRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ActiveLaunchPlanListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::LaunchPlanList>::Create(channel_.get(), cq, rpcmethod_ListActiveLaunchPlans_, context, request, false);
}

::grpc::Status AdminService::Stub::ListLaunchPlanIds(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityIdentifierListRequest& request, ::flyteidl::admin::NamedEntityIdentifierList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListLaunchPlanIds_, context, request, response);
}

void AdminService::Stub::experimental_async::ListLaunchPlanIds(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityIdentifierListRequest* request, ::flyteidl::admin::NamedEntityIdentifierList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListLaunchPlanIds_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListLaunchPlanIds(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::NamedEntityIdentifierList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListLaunchPlanIds_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListLaunchPlanIds(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityIdentifierListRequest* request, ::flyteidl::admin::NamedEntityIdentifierList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListLaunchPlanIds_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::ListLaunchPlanIds(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::NamedEntityIdentifierList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListLaunchPlanIds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::NamedEntityIdentifierList>* AdminService::Stub::AsyncListLaunchPlanIdsRaw(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityIdentifierListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::NamedEntityIdentifierList>::Create(channel_.get(), cq, rpcmethod_ListLaunchPlanIds_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::NamedEntityIdentifierList>* AdminService::Stub::PrepareAsyncListLaunchPlanIdsRaw(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityIdentifierListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::NamedEntityIdentifierList>::Create(channel_.get(), cq, rpcmethod_ListLaunchPlanIds_, context, request, false);
}

::grpc::Status AdminService::Stub::ListLaunchPlans(::grpc::ClientContext* context, const ::flyteidl::admin::ResourceListRequest& request, ::flyteidl::admin::LaunchPlanList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListLaunchPlans_, context, request, response);
}

void AdminService::Stub::experimental_async::ListLaunchPlans(::grpc::ClientContext* context, const ::flyteidl::admin::ResourceListRequest* request, ::flyteidl::admin::LaunchPlanList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListLaunchPlans_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListLaunchPlans(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::LaunchPlanList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListLaunchPlans_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListLaunchPlans(::grpc::ClientContext* context, const ::flyteidl::admin::ResourceListRequest* request, ::flyteidl::admin::LaunchPlanList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListLaunchPlans_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::ListLaunchPlans(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::LaunchPlanList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListLaunchPlans_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::LaunchPlanList>* AdminService::Stub::AsyncListLaunchPlansRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ResourceListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::LaunchPlanList>::Create(channel_.get(), cq, rpcmethod_ListLaunchPlans_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::LaunchPlanList>* AdminService::Stub::PrepareAsyncListLaunchPlansRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ResourceListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::LaunchPlanList>::Create(channel_.get(), cq, rpcmethod_ListLaunchPlans_, context, request, false);
}

::grpc::Status AdminService::Stub::UpdateLaunchPlan(::grpc::ClientContext* context, const ::flyteidl::admin::LaunchPlanUpdateRequest& request, ::flyteidl::admin::LaunchPlanUpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateLaunchPlan_, context, request, response);
}

void AdminService::Stub::experimental_async::UpdateLaunchPlan(::grpc::ClientContext* context, const ::flyteidl::admin::LaunchPlanUpdateRequest* request, ::flyteidl::admin::LaunchPlanUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateLaunchPlan_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::UpdateLaunchPlan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::LaunchPlanUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateLaunchPlan_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::UpdateLaunchPlan(::grpc::ClientContext* context, const ::flyteidl::admin::LaunchPlanUpdateRequest* request, ::flyteidl::admin::LaunchPlanUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateLaunchPlan_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::UpdateLaunchPlan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::LaunchPlanUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateLaunchPlan_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::LaunchPlanUpdateResponse>* AdminService::Stub::AsyncUpdateLaunchPlanRaw(::grpc::ClientContext* context, const ::flyteidl::admin::LaunchPlanUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::LaunchPlanUpdateResponse>::Create(channel_.get(), cq, rpcmethod_UpdateLaunchPlan_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::LaunchPlanUpdateResponse>* AdminService::Stub::PrepareAsyncUpdateLaunchPlanRaw(::grpc::ClientContext* context, const ::flyteidl::admin::LaunchPlanUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::LaunchPlanUpdateResponse>::Create(channel_.get(), cq, rpcmethod_UpdateLaunchPlan_, context, request, false);
}

::grpc::Status AdminService::Stub::CreateExecution(::grpc::ClientContext* context, const ::flyteidl::admin::ExecutionCreateRequest& request, ::flyteidl::admin::ExecutionCreateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateExecution_, context, request, response);
}

void AdminService::Stub::experimental_async::CreateExecution(::grpc::ClientContext* context, const ::flyteidl::admin::ExecutionCreateRequest* request, ::flyteidl::admin::ExecutionCreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateExecution_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::CreateExecution(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ExecutionCreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateExecution_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::CreateExecution(::grpc::ClientContext* context, const ::flyteidl::admin::ExecutionCreateRequest* request, ::flyteidl::admin::ExecutionCreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateExecution_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::CreateExecution(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ExecutionCreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateExecution_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ExecutionCreateResponse>* AdminService::Stub::AsyncCreateExecutionRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ExecutionCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ExecutionCreateResponse>::Create(channel_.get(), cq, rpcmethod_CreateExecution_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ExecutionCreateResponse>* AdminService::Stub::PrepareAsyncCreateExecutionRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ExecutionCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ExecutionCreateResponse>::Create(channel_.get(), cq, rpcmethod_CreateExecution_, context, request, false);
}

::grpc::Status AdminService::Stub::RelaunchExecution(::grpc::ClientContext* context, const ::flyteidl::admin::ExecutionRelaunchRequest& request, ::flyteidl::admin::ExecutionCreateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RelaunchExecution_, context, request, response);
}

void AdminService::Stub::experimental_async::RelaunchExecution(::grpc::ClientContext* context, const ::flyteidl::admin::ExecutionRelaunchRequest* request, ::flyteidl::admin::ExecutionCreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RelaunchExecution_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::RelaunchExecution(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ExecutionCreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RelaunchExecution_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::RelaunchExecution(::grpc::ClientContext* context, const ::flyteidl::admin::ExecutionRelaunchRequest* request, ::flyteidl::admin::ExecutionCreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RelaunchExecution_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::RelaunchExecution(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ExecutionCreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RelaunchExecution_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ExecutionCreateResponse>* AdminService::Stub::AsyncRelaunchExecutionRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ExecutionRelaunchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ExecutionCreateResponse>::Create(channel_.get(), cq, rpcmethod_RelaunchExecution_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ExecutionCreateResponse>* AdminService::Stub::PrepareAsyncRelaunchExecutionRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ExecutionRelaunchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ExecutionCreateResponse>::Create(channel_.get(), cq, rpcmethod_RelaunchExecution_, context, request, false);
}

::grpc::Status AdminService::Stub::RecoverExecution(::grpc::ClientContext* context, const ::flyteidl::admin::ExecutionRecoverRequest& request, ::flyteidl::admin::ExecutionCreateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RecoverExecution_, context, request, response);
}

void AdminService::Stub::experimental_async::RecoverExecution(::grpc::ClientContext* context, const ::flyteidl::admin::ExecutionRecoverRequest* request, ::flyteidl::admin::ExecutionCreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RecoverExecution_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::RecoverExecution(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ExecutionCreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RecoverExecution_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::RecoverExecution(::grpc::ClientContext* context, const ::flyteidl::admin::ExecutionRecoverRequest* request, ::flyteidl::admin::ExecutionCreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RecoverExecution_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::RecoverExecution(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ExecutionCreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RecoverExecution_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ExecutionCreateResponse>* AdminService::Stub::AsyncRecoverExecutionRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ExecutionRecoverRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ExecutionCreateResponse>::Create(channel_.get(), cq, rpcmethod_RecoverExecution_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ExecutionCreateResponse>* AdminService::Stub::PrepareAsyncRecoverExecutionRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ExecutionRecoverRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ExecutionCreateResponse>::Create(channel_.get(), cq, rpcmethod_RecoverExecution_, context, request, false);
}

::grpc::Status AdminService::Stub::GetExecution(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowExecutionGetRequest& request, ::flyteidl::admin::Execution* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetExecution_, context, request, response);
}

void AdminService::Stub::experimental_async::GetExecution(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowExecutionGetRequest* request, ::flyteidl::admin::Execution* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetExecution_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetExecution(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::Execution* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetExecution_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetExecution(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowExecutionGetRequest* request, ::flyteidl::admin::Execution* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetExecution_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::GetExecution(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::Execution* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetExecution_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::Execution>* AdminService::Stub::AsyncGetExecutionRaw(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowExecutionGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::Execution>::Create(channel_.get(), cq, rpcmethod_GetExecution_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::Execution>* AdminService::Stub::PrepareAsyncGetExecutionRaw(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowExecutionGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::Execution>::Create(channel_.get(), cq, rpcmethod_GetExecution_, context, request, false);
}

::grpc::Status AdminService::Stub::UpdateExecution(::grpc::ClientContext* context, const ::flyteidl::admin::ExecutionUpdateRequest& request, ::flyteidl::admin::ExecutionUpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateExecution_, context, request, response);
}

void AdminService::Stub::experimental_async::UpdateExecution(::grpc::ClientContext* context, const ::flyteidl::admin::ExecutionUpdateRequest* request, ::flyteidl::admin::ExecutionUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateExecution_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::UpdateExecution(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ExecutionUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateExecution_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::UpdateExecution(::grpc::ClientContext* context, const ::flyteidl::admin::ExecutionUpdateRequest* request, ::flyteidl::admin::ExecutionUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateExecution_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::UpdateExecution(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ExecutionUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateExecution_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ExecutionUpdateResponse>* AdminService::Stub::AsyncUpdateExecutionRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ExecutionUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ExecutionUpdateResponse>::Create(channel_.get(), cq, rpcmethod_UpdateExecution_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ExecutionUpdateResponse>* AdminService::Stub::PrepareAsyncUpdateExecutionRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ExecutionUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ExecutionUpdateResponse>::Create(channel_.get(), cq, rpcmethod_UpdateExecution_, context, request, false);
}

::grpc::Status AdminService::Stub::GetExecutionData(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowExecutionGetDataRequest& request, ::flyteidl::admin::WorkflowExecutionGetDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetExecutionData_, context, request, response);
}

void AdminService::Stub::experimental_async::GetExecutionData(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowExecutionGetDataRequest* request, ::flyteidl::admin::WorkflowExecutionGetDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetExecutionData_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetExecutionData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::WorkflowExecutionGetDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetExecutionData_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetExecutionData(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowExecutionGetDataRequest* request, ::flyteidl::admin::WorkflowExecutionGetDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetExecutionData_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::GetExecutionData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::WorkflowExecutionGetDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetExecutionData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::WorkflowExecutionGetDataResponse>* AdminService::Stub::AsyncGetExecutionDataRaw(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowExecutionGetDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::WorkflowExecutionGetDataResponse>::Create(channel_.get(), cq, rpcmethod_GetExecutionData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::WorkflowExecutionGetDataResponse>* AdminService::Stub::PrepareAsyncGetExecutionDataRaw(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowExecutionGetDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::WorkflowExecutionGetDataResponse>::Create(channel_.get(), cq, rpcmethod_GetExecutionData_, context, request, false);
}

::grpc::Status AdminService::Stub::ListExecutions(::grpc::ClientContext* context, const ::flyteidl::admin::ResourceListRequest& request, ::flyteidl::admin::ExecutionList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListExecutions_, context, request, response);
}

void AdminService::Stub::experimental_async::ListExecutions(::grpc::ClientContext* context, const ::flyteidl::admin::ResourceListRequest* request, ::flyteidl::admin::ExecutionList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListExecutions_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListExecutions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ExecutionList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListExecutions_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListExecutions(::grpc::ClientContext* context, const ::flyteidl::admin::ResourceListRequest* request, ::flyteidl::admin::ExecutionList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListExecutions_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::ListExecutions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ExecutionList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListExecutions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ExecutionList>* AdminService::Stub::AsyncListExecutionsRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ResourceListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ExecutionList>::Create(channel_.get(), cq, rpcmethod_ListExecutions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ExecutionList>* AdminService::Stub::PrepareAsyncListExecutionsRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ResourceListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ExecutionList>::Create(channel_.get(), cq, rpcmethod_ListExecutions_, context, request, false);
}

::grpc::Status AdminService::Stub::TerminateExecution(::grpc::ClientContext* context, const ::flyteidl::admin::ExecutionTerminateRequest& request, ::flyteidl::admin::ExecutionTerminateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TerminateExecution_, context, request, response);
}

void AdminService::Stub::experimental_async::TerminateExecution(::grpc::ClientContext* context, const ::flyteidl::admin::ExecutionTerminateRequest* request, ::flyteidl::admin::ExecutionTerminateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TerminateExecution_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::TerminateExecution(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ExecutionTerminateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TerminateExecution_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::TerminateExecution(::grpc::ClientContext* context, const ::flyteidl::admin::ExecutionTerminateRequest* request, ::flyteidl::admin::ExecutionTerminateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TerminateExecution_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::TerminateExecution(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ExecutionTerminateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TerminateExecution_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ExecutionTerminateResponse>* AdminService::Stub::AsyncTerminateExecutionRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ExecutionTerminateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ExecutionTerminateResponse>::Create(channel_.get(), cq, rpcmethod_TerminateExecution_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ExecutionTerminateResponse>* AdminService::Stub::PrepareAsyncTerminateExecutionRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ExecutionTerminateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ExecutionTerminateResponse>::Create(channel_.get(), cq, rpcmethod_TerminateExecution_, context, request, false);
}

::grpc::Status AdminService::Stub::GetNodeExecution(::grpc::ClientContext* context, const ::flyteidl::admin::NodeExecutionGetRequest& request, ::flyteidl::admin::NodeExecution* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNodeExecution_, context, request, response);
}

void AdminService::Stub::experimental_async::GetNodeExecution(::grpc::ClientContext* context, const ::flyteidl::admin::NodeExecutionGetRequest* request, ::flyteidl::admin::NodeExecution* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNodeExecution_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetNodeExecution(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::NodeExecution* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNodeExecution_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetNodeExecution(::grpc::ClientContext* context, const ::flyteidl::admin::NodeExecutionGetRequest* request, ::flyteidl::admin::NodeExecution* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNodeExecution_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::GetNodeExecution(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::NodeExecution* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNodeExecution_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::NodeExecution>* AdminService::Stub::AsyncGetNodeExecutionRaw(::grpc::ClientContext* context, const ::flyteidl::admin::NodeExecutionGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::NodeExecution>::Create(channel_.get(), cq, rpcmethod_GetNodeExecution_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::NodeExecution>* AdminService::Stub::PrepareAsyncGetNodeExecutionRaw(::grpc::ClientContext* context, const ::flyteidl::admin::NodeExecutionGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::NodeExecution>::Create(channel_.get(), cq, rpcmethod_GetNodeExecution_, context, request, false);
}

::grpc::Status AdminService::Stub::ListNodeExecutions(::grpc::ClientContext* context, const ::flyteidl::admin::NodeExecutionListRequest& request, ::flyteidl::admin::NodeExecutionList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListNodeExecutions_, context, request, response);
}

void AdminService::Stub::experimental_async::ListNodeExecutions(::grpc::ClientContext* context, const ::flyteidl::admin::NodeExecutionListRequest* request, ::flyteidl::admin::NodeExecutionList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListNodeExecutions_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListNodeExecutions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::NodeExecutionList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListNodeExecutions_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListNodeExecutions(::grpc::ClientContext* context, const ::flyteidl::admin::NodeExecutionListRequest* request, ::flyteidl::admin::NodeExecutionList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListNodeExecutions_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::ListNodeExecutions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::NodeExecutionList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListNodeExecutions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::NodeExecutionList>* AdminService::Stub::AsyncListNodeExecutionsRaw(::grpc::ClientContext* context, const ::flyteidl::admin::NodeExecutionListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::NodeExecutionList>::Create(channel_.get(), cq, rpcmethod_ListNodeExecutions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::NodeExecutionList>* AdminService::Stub::PrepareAsyncListNodeExecutionsRaw(::grpc::ClientContext* context, const ::flyteidl::admin::NodeExecutionListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::NodeExecutionList>::Create(channel_.get(), cq, rpcmethod_ListNodeExecutions_, context, request, false);
}

::grpc::Status AdminService::Stub::ListNodeExecutionsForTask(::grpc::ClientContext* context, const ::flyteidl::admin::NodeExecutionForTaskListRequest& request, ::flyteidl::admin::NodeExecutionList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListNodeExecutionsForTask_, context, request, response);
}

void AdminService::Stub::experimental_async::ListNodeExecutionsForTask(::grpc::ClientContext* context, const ::flyteidl::admin::NodeExecutionForTaskListRequest* request, ::flyteidl::admin::NodeExecutionList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListNodeExecutionsForTask_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListNodeExecutionsForTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::NodeExecutionList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListNodeExecutionsForTask_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListNodeExecutionsForTask(::grpc::ClientContext* context, const ::flyteidl::admin::NodeExecutionForTaskListRequest* request, ::flyteidl::admin::NodeExecutionList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListNodeExecutionsForTask_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::ListNodeExecutionsForTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::NodeExecutionList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListNodeExecutionsForTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::NodeExecutionList>* AdminService::Stub::AsyncListNodeExecutionsForTaskRaw(::grpc::ClientContext* context, const ::flyteidl::admin::NodeExecutionForTaskListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::NodeExecutionList>::Create(channel_.get(), cq, rpcmethod_ListNodeExecutionsForTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::NodeExecutionList>* AdminService::Stub::PrepareAsyncListNodeExecutionsForTaskRaw(::grpc::ClientContext* context, const ::flyteidl::admin::NodeExecutionForTaskListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::NodeExecutionList>::Create(channel_.get(), cq, rpcmethod_ListNodeExecutionsForTask_, context, request, false);
}

::grpc::Status AdminService::Stub::GetNodeExecutionData(::grpc::ClientContext* context, const ::flyteidl::admin::NodeExecutionGetDataRequest& request, ::flyteidl::admin::NodeExecutionGetDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNodeExecutionData_, context, request, response);
}

void AdminService::Stub::experimental_async::GetNodeExecutionData(::grpc::ClientContext* context, const ::flyteidl::admin::NodeExecutionGetDataRequest* request, ::flyteidl::admin::NodeExecutionGetDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNodeExecutionData_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetNodeExecutionData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::NodeExecutionGetDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNodeExecutionData_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetNodeExecutionData(::grpc::ClientContext* context, const ::flyteidl::admin::NodeExecutionGetDataRequest* request, ::flyteidl::admin::NodeExecutionGetDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNodeExecutionData_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::GetNodeExecutionData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::NodeExecutionGetDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNodeExecutionData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::NodeExecutionGetDataResponse>* AdminService::Stub::AsyncGetNodeExecutionDataRaw(::grpc::ClientContext* context, const ::flyteidl::admin::NodeExecutionGetDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::NodeExecutionGetDataResponse>::Create(channel_.get(), cq, rpcmethod_GetNodeExecutionData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::NodeExecutionGetDataResponse>* AdminService::Stub::PrepareAsyncGetNodeExecutionDataRaw(::grpc::ClientContext* context, const ::flyteidl::admin::NodeExecutionGetDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::NodeExecutionGetDataResponse>::Create(channel_.get(), cq, rpcmethod_GetNodeExecutionData_, context, request, false);
}

::grpc::Status AdminService::Stub::RegisterProject(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectRegisterRequest& request, ::flyteidl::admin::ProjectRegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterProject_, context, request, response);
}

void AdminService::Stub::experimental_async::RegisterProject(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectRegisterRequest* request, ::flyteidl::admin::ProjectRegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterProject_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::RegisterProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ProjectRegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterProject_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::RegisterProject(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectRegisterRequest* request, ::flyteidl::admin::ProjectRegisterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterProject_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::RegisterProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ProjectRegisterResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterProject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ProjectRegisterResponse>* AdminService::Stub::AsyncRegisterProjectRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectRegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ProjectRegisterResponse>::Create(channel_.get(), cq, rpcmethod_RegisterProject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ProjectRegisterResponse>* AdminService::Stub::PrepareAsyncRegisterProjectRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectRegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ProjectRegisterResponse>::Create(channel_.get(), cq, rpcmethod_RegisterProject_, context, request, false);
}

::grpc::Status AdminService::Stub::UpdateProject(::grpc::ClientContext* context, const ::flyteidl::admin::Project& request, ::flyteidl::admin::ProjectUpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateProject_, context, request, response);
}

void AdminService::Stub::experimental_async::UpdateProject(::grpc::ClientContext* context, const ::flyteidl::admin::Project* request, ::flyteidl::admin::ProjectUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateProject_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::UpdateProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ProjectUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateProject_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::UpdateProject(::grpc::ClientContext* context, const ::flyteidl::admin::Project* request, ::flyteidl::admin::ProjectUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateProject_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::UpdateProject(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ProjectUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateProject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ProjectUpdateResponse>* AdminService::Stub::AsyncUpdateProjectRaw(::grpc::ClientContext* context, const ::flyteidl::admin::Project& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ProjectUpdateResponse>::Create(channel_.get(), cq, rpcmethod_UpdateProject_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ProjectUpdateResponse>* AdminService::Stub::PrepareAsyncUpdateProjectRaw(::grpc::ClientContext* context, const ::flyteidl::admin::Project& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ProjectUpdateResponse>::Create(channel_.get(), cq, rpcmethod_UpdateProject_, context, request, false);
}

::grpc::Status AdminService::Stub::ListProjects(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectListRequest& request, ::flyteidl::admin::Projects* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListProjects_, context, request, response);
}

void AdminService::Stub::experimental_async::ListProjects(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectListRequest* request, ::flyteidl::admin::Projects* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListProjects_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListProjects(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::Projects* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListProjects_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListProjects(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectListRequest* request, ::flyteidl::admin::Projects* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListProjects_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::ListProjects(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::Projects* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListProjects_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::Projects>* AdminService::Stub::AsyncListProjectsRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::Projects>::Create(channel_.get(), cq, rpcmethod_ListProjects_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::Projects>* AdminService::Stub::PrepareAsyncListProjectsRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::Projects>::Create(channel_.get(), cq, rpcmethod_ListProjects_, context, request, false);
}

::grpc::Status AdminService::Stub::CreateWorkflowEvent(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowExecutionEventRequest& request, ::flyteidl::admin::WorkflowExecutionEventResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateWorkflowEvent_, context, request, response);
}

void AdminService::Stub::experimental_async::CreateWorkflowEvent(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowExecutionEventRequest* request, ::flyteidl::admin::WorkflowExecutionEventResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateWorkflowEvent_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::CreateWorkflowEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::WorkflowExecutionEventResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateWorkflowEvent_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::CreateWorkflowEvent(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowExecutionEventRequest* request, ::flyteidl::admin::WorkflowExecutionEventResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateWorkflowEvent_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::CreateWorkflowEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::WorkflowExecutionEventResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateWorkflowEvent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::WorkflowExecutionEventResponse>* AdminService::Stub::AsyncCreateWorkflowEventRaw(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowExecutionEventRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::WorkflowExecutionEventResponse>::Create(channel_.get(), cq, rpcmethod_CreateWorkflowEvent_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::WorkflowExecutionEventResponse>* AdminService::Stub::PrepareAsyncCreateWorkflowEventRaw(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowExecutionEventRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::WorkflowExecutionEventResponse>::Create(channel_.get(), cq, rpcmethod_CreateWorkflowEvent_, context, request, false);
}

::grpc::Status AdminService::Stub::CreateNodeEvent(::grpc::ClientContext* context, const ::flyteidl::admin::NodeExecutionEventRequest& request, ::flyteidl::admin::NodeExecutionEventResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateNodeEvent_, context, request, response);
}

void AdminService::Stub::experimental_async::CreateNodeEvent(::grpc::ClientContext* context, const ::flyteidl::admin::NodeExecutionEventRequest* request, ::flyteidl::admin::NodeExecutionEventResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateNodeEvent_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::CreateNodeEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::NodeExecutionEventResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateNodeEvent_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::CreateNodeEvent(::grpc::ClientContext* context, const ::flyteidl::admin::NodeExecutionEventRequest* request, ::flyteidl::admin::NodeExecutionEventResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateNodeEvent_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::CreateNodeEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::NodeExecutionEventResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateNodeEvent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::NodeExecutionEventResponse>* AdminService::Stub::AsyncCreateNodeEventRaw(::grpc::ClientContext* context, const ::flyteidl::admin::NodeExecutionEventRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::NodeExecutionEventResponse>::Create(channel_.get(), cq, rpcmethod_CreateNodeEvent_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::NodeExecutionEventResponse>* AdminService::Stub::PrepareAsyncCreateNodeEventRaw(::grpc::ClientContext* context, const ::flyteidl::admin::NodeExecutionEventRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::NodeExecutionEventResponse>::Create(channel_.get(), cq, rpcmethod_CreateNodeEvent_, context, request, false);
}

::grpc::Status AdminService::Stub::CreateTaskEvent(::grpc::ClientContext* context, const ::flyteidl::admin::TaskExecutionEventRequest& request, ::flyteidl::admin::TaskExecutionEventResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateTaskEvent_, context, request, response);
}

void AdminService::Stub::experimental_async::CreateTaskEvent(::grpc::ClientContext* context, const ::flyteidl::admin::TaskExecutionEventRequest* request, ::flyteidl::admin::TaskExecutionEventResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateTaskEvent_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::CreateTaskEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::TaskExecutionEventResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateTaskEvent_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::CreateTaskEvent(::grpc::ClientContext* context, const ::flyteidl::admin::TaskExecutionEventRequest* request, ::flyteidl::admin::TaskExecutionEventResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateTaskEvent_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::CreateTaskEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::TaskExecutionEventResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateTaskEvent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::TaskExecutionEventResponse>* AdminService::Stub::AsyncCreateTaskEventRaw(::grpc::ClientContext* context, const ::flyteidl::admin::TaskExecutionEventRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::TaskExecutionEventResponse>::Create(channel_.get(), cq, rpcmethod_CreateTaskEvent_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::TaskExecutionEventResponse>* AdminService::Stub::PrepareAsyncCreateTaskEventRaw(::grpc::ClientContext* context, const ::flyteidl::admin::TaskExecutionEventRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::TaskExecutionEventResponse>::Create(channel_.get(), cq, rpcmethod_CreateTaskEvent_, context, request, false);
}

::grpc::Status AdminService::Stub::GetTaskExecution(::grpc::ClientContext* context, const ::flyteidl::admin::TaskExecutionGetRequest& request, ::flyteidl::admin::TaskExecution* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTaskExecution_, context, request, response);
}

void AdminService::Stub::experimental_async::GetTaskExecution(::grpc::ClientContext* context, const ::flyteidl::admin::TaskExecutionGetRequest* request, ::flyteidl::admin::TaskExecution* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTaskExecution_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetTaskExecution(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::TaskExecution* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTaskExecution_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetTaskExecution(::grpc::ClientContext* context, const ::flyteidl::admin::TaskExecutionGetRequest* request, ::flyteidl::admin::TaskExecution* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTaskExecution_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::GetTaskExecution(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::TaskExecution* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTaskExecution_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::TaskExecution>* AdminService::Stub::AsyncGetTaskExecutionRaw(::grpc::ClientContext* context, const ::flyteidl::admin::TaskExecutionGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::TaskExecution>::Create(channel_.get(), cq, rpcmethod_GetTaskExecution_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::TaskExecution>* AdminService::Stub::PrepareAsyncGetTaskExecutionRaw(::grpc::ClientContext* context, const ::flyteidl::admin::TaskExecutionGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::TaskExecution>::Create(channel_.get(), cq, rpcmethod_GetTaskExecution_, context, request, false);
}

::grpc::Status AdminService::Stub::ListTaskExecutions(::grpc::ClientContext* context, const ::flyteidl::admin::TaskExecutionListRequest& request, ::flyteidl::admin::TaskExecutionList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListTaskExecutions_, context, request, response);
}

void AdminService::Stub::experimental_async::ListTaskExecutions(::grpc::ClientContext* context, const ::flyteidl::admin::TaskExecutionListRequest* request, ::flyteidl::admin::TaskExecutionList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListTaskExecutions_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListTaskExecutions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::TaskExecutionList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListTaskExecutions_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListTaskExecutions(::grpc::ClientContext* context, const ::flyteidl::admin::TaskExecutionListRequest* request, ::flyteidl::admin::TaskExecutionList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListTaskExecutions_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::ListTaskExecutions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::TaskExecutionList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListTaskExecutions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::TaskExecutionList>* AdminService::Stub::AsyncListTaskExecutionsRaw(::grpc::ClientContext* context, const ::flyteidl::admin::TaskExecutionListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::TaskExecutionList>::Create(channel_.get(), cq, rpcmethod_ListTaskExecutions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::TaskExecutionList>* AdminService::Stub::PrepareAsyncListTaskExecutionsRaw(::grpc::ClientContext* context, const ::flyteidl::admin::TaskExecutionListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::TaskExecutionList>::Create(channel_.get(), cq, rpcmethod_ListTaskExecutions_, context, request, false);
}

::grpc::Status AdminService::Stub::GetTaskExecutionData(::grpc::ClientContext* context, const ::flyteidl::admin::TaskExecutionGetDataRequest& request, ::flyteidl::admin::TaskExecutionGetDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTaskExecutionData_, context, request, response);
}

void AdminService::Stub::experimental_async::GetTaskExecutionData(::grpc::ClientContext* context, const ::flyteidl::admin::TaskExecutionGetDataRequest* request, ::flyteidl::admin::TaskExecutionGetDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTaskExecutionData_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetTaskExecutionData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::TaskExecutionGetDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTaskExecutionData_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetTaskExecutionData(::grpc::ClientContext* context, const ::flyteidl::admin::TaskExecutionGetDataRequest* request, ::flyteidl::admin::TaskExecutionGetDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTaskExecutionData_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::GetTaskExecutionData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::TaskExecutionGetDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTaskExecutionData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::TaskExecutionGetDataResponse>* AdminService::Stub::AsyncGetTaskExecutionDataRaw(::grpc::ClientContext* context, const ::flyteidl::admin::TaskExecutionGetDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::TaskExecutionGetDataResponse>::Create(channel_.get(), cq, rpcmethod_GetTaskExecutionData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::TaskExecutionGetDataResponse>* AdminService::Stub::PrepareAsyncGetTaskExecutionDataRaw(::grpc::ClientContext* context, const ::flyteidl::admin::TaskExecutionGetDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::TaskExecutionGetDataResponse>::Create(channel_.get(), cq, rpcmethod_GetTaskExecutionData_, context, request, false);
}

::grpc::Status AdminService::Stub::UpdateProjectDomainAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectDomainAttributesUpdateRequest& request, ::flyteidl::admin::ProjectDomainAttributesUpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateProjectDomainAttributes_, context, request, response);
}

void AdminService::Stub::experimental_async::UpdateProjectDomainAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectDomainAttributesUpdateRequest* request, ::flyteidl::admin::ProjectDomainAttributesUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateProjectDomainAttributes_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::UpdateProjectDomainAttributes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ProjectDomainAttributesUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateProjectDomainAttributes_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::UpdateProjectDomainAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectDomainAttributesUpdateRequest* request, ::flyteidl::admin::ProjectDomainAttributesUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateProjectDomainAttributes_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::UpdateProjectDomainAttributes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ProjectDomainAttributesUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateProjectDomainAttributes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ProjectDomainAttributesUpdateResponse>* AdminService::Stub::AsyncUpdateProjectDomainAttributesRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectDomainAttributesUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ProjectDomainAttributesUpdateResponse>::Create(channel_.get(), cq, rpcmethod_UpdateProjectDomainAttributes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ProjectDomainAttributesUpdateResponse>* AdminService::Stub::PrepareAsyncUpdateProjectDomainAttributesRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectDomainAttributesUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ProjectDomainAttributesUpdateResponse>::Create(channel_.get(), cq, rpcmethod_UpdateProjectDomainAttributes_, context, request, false);
}

::grpc::Status AdminService::Stub::GetProjectDomainAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectDomainAttributesGetRequest& request, ::flyteidl::admin::ProjectDomainAttributesGetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetProjectDomainAttributes_, context, request, response);
}

void AdminService::Stub::experimental_async::GetProjectDomainAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectDomainAttributesGetRequest* request, ::flyteidl::admin::ProjectDomainAttributesGetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProjectDomainAttributes_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetProjectDomainAttributes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ProjectDomainAttributesGetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProjectDomainAttributes_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetProjectDomainAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectDomainAttributesGetRequest* request, ::flyteidl::admin::ProjectDomainAttributesGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetProjectDomainAttributes_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::GetProjectDomainAttributes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ProjectDomainAttributesGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetProjectDomainAttributes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ProjectDomainAttributesGetResponse>* AdminService::Stub::AsyncGetProjectDomainAttributesRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectDomainAttributesGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ProjectDomainAttributesGetResponse>::Create(channel_.get(), cq, rpcmethod_GetProjectDomainAttributes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ProjectDomainAttributesGetResponse>* AdminService::Stub::PrepareAsyncGetProjectDomainAttributesRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectDomainAttributesGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ProjectDomainAttributesGetResponse>::Create(channel_.get(), cq, rpcmethod_GetProjectDomainAttributes_, context, request, false);
}

::grpc::Status AdminService::Stub::DeleteProjectDomainAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectDomainAttributesDeleteRequest& request, ::flyteidl::admin::ProjectDomainAttributesDeleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteProjectDomainAttributes_, context, request, response);
}

void AdminService::Stub::experimental_async::DeleteProjectDomainAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectDomainAttributesDeleteRequest* request, ::flyteidl::admin::ProjectDomainAttributesDeleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteProjectDomainAttributes_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::DeleteProjectDomainAttributes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ProjectDomainAttributesDeleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteProjectDomainAttributes_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::DeleteProjectDomainAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectDomainAttributesDeleteRequest* request, ::flyteidl::admin::ProjectDomainAttributesDeleteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteProjectDomainAttributes_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::DeleteProjectDomainAttributes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ProjectDomainAttributesDeleteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteProjectDomainAttributes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ProjectDomainAttributesDeleteResponse>* AdminService::Stub::AsyncDeleteProjectDomainAttributesRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectDomainAttributesDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ProjectDomainAttributesDeleteResponse>::Create(channel_.get(), cq, rpcmethod_DeleteProjectDomainAttributes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ProjectDomainAttributesDeleteResponse>* AdminService::Stub::PrepareAsyncDeleteProjectDomainAttributesRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectDomainAttributesDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ProjectDomainAttributesDeleteResponse>::Create(channel_.get(), cq, rpcmethod_DeleteProjectDomainAttributes_, context, request, false);
}

::grpc::Status AdminService::Stub::UpdateProjectAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectAttributesUpdateRequest& request, ::flyteidl::admin::ProjectAttributesUpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateProjectAttributes_, context, request, response);
}

void AdminService::Stub::experimental_async::UpdateProjectAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectAttributesUpdateRequest* request, ::flyteidl::admin::ProjectAttributesUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateProjectAttributes_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::UpdateProjectAttributes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ProjectAttributesUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateProjectAttributes_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::UpdateProjectAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectAttributesUpdateRequest* request, ::flyteidl::admin::ProjectAttributesUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateProjectAttributes_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::UpdateProjectAttributes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ProjectAttributesUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateProjectAttributes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ProjectAttributesUpdateResponse>* AdminService::Stub::AsyncUpdateProjectAttributesRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectAttributesUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ProjectAttributesUpdateResponse>::Create(channel_.get(), cq, rpcmethod_UpdateProjectAttributes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ProjectAttributesUpdateResponse>* AdminService::Stub::PrepareAsyncUpdateProjectAttributesRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectAttributesUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ProjectAttributesUpdateResponse>::Create(channel_.get(), cq, rpcmethod_UpdateProjectAttributes_, context, request, false);
}

::grpc::Status AdminService::Stub::GetProjectAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectAttributesGetRequest& request, ::flyteidl::admin::ProjectAttributesGetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetProjectAttributes_, context, request, response);
}

void AdminService::Stub::experimental_async::GetProjectAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectAttributesGetRequest* request, ::flyteidl::admin::ProjectAttributesGetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProjectAttributes_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetProjectAttributes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ProjectAttributesGetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProjectAttributes_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetProjectAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectAttributesGetRequest* request, ::flyteidl::admin::ProjectAttributesGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetProjectAttributes_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::GetProjectAttributes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ProjectAttributesGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetProjectAttributes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ProjectAttributesGetResponse>* AdminService::Stub::AsyncGetProjectAttributesRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectAttributesGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ProjectAttributesGetResponse>::Create(channel_.get(), cq, rpcmethod_GetProjectAttributes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ProjectAttributesGetResponse>* AdminService::Stub::PrepareAsyncGetProjectAttributesRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectAttributesGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ProjectAttributesGetResponse>::Create(channel_.get(), cq, rpcmethod_GetProjectAttributes_, context, request, false);
}

::grpc::Status AdminService::Stub::DeleteProjectAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectAttributesDeleteRequest& request, ::flyteidl::admin::ProjectAttributesDeleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteProjectAttributes_, context, request, response);
}

void AdminService::Stub::experimental_async::DeleteProjectAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectAttributesDeleteRequest* request, ::flyteidl::admin::ProjectAttributesDeleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteProjectAttributes_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::DeleteProjectAttributes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ProjectAttributesDeleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteProjectAttributes_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::DeleteProjectAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectAttributesDeleteRequest* request, ::flyteidl::admin::ProjectAttributesDeleteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteProjectAttributes_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::DeleteProjectAttributes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ProjectAttributesDeleteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteProjectAttributes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ProjectAttributesDeleteResponse>* AdminService::Stub::AsyncDeleteProjectAttributesRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectAttributesDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ProjectAttributesDeleteResponse>::Create(channel_.get(), cq, rpcmethod_DeleteProjectAttributes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ProjectAttributesDeleteResponse>* AdminService::Stub::PrepareAsyncDeleteProjectAttributesRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ProjectAttributesDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ProjectAttributesDeleteResponse>::Create(channel_.get(), cq, rpcmethod_DeleteProjectAttributes_, context, request, false);
}

::grpc::Status AdminService::Stub::UpdateWorkflowAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowAttributesUpdateRequest& request, ::flyteidl::admin::WorkflowAttributesUpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateWorkflowAttributes_, context, request, response);
}

void AdminService::Stub::experimental_async::UpdateWorkflowAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowAttributesUpdateRequest* request, ::flyteidl::admin::WorkflowAttributesUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateWorkflowAttributes_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::UpdateWorkflowAttributes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::WorkflowAttributesUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateWorkflowAttributes_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::UpdateWorkflowAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowAttributesUpdateRequest* request, ::flyteidl::admin::WorkflowAttributesUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateWorkflowAttributes_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::UpdateWorkflowAttributes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::WorkflowAttributesUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateWorkflowAttributes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::WorkflowAttributesUpdateResponse>* AdminService::Stub::AsyncUpdateWorkflowAttributesRaw(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowAttributesUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::WorkflowAttributesUpdateResponse>::Create(channel_.get(), cq, rpcmethod_UpdateWorkflowAttributes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::WorkflowAttributesUpdateResponse>* AdminService::Stub::PrepareAsyncUpdateWorkflowAttributesRaw(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowAttributesUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::WorkflowAttributesUpdateResponse>::Create(channel_.get(), cq, rpcmethod_UpdateWorkflowAttributes_, context, request, false);
}

::grpc::Status AdminService::Stub::GetWorkflowAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowAttributesGetRequest& request, ::flyteidl::admin::WorkflowAttributesGetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetWorkflowAttributes_, context, request, response);
}

void AdminService::Stub::experimental_async::GetWorkflowAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowAttributesGetRequest* request, ::flyteidl::admin::WorkflowAttributesGetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetWorkflowAttributes_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetWorkflowAttributes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::WorkflowAttributesGetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetWorkflowAttributes_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetWorkflowAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowAttributesGetRequest* request, ::flyteidl::admin::WorkflowAttributesGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetWorkflowAttributes_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::GetWorkflowAttributes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::WorkflowAttributesGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetWorkflowAttributes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::WorkflowAttributesGetResponse>* AdminService::Stub::AsyncGetWorkflowAttributesRaw(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowAttributesGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::WorkflowAttributesGetResponse>::Create(channel_.get(), cq, rpcmethod_GetWorkflowAttributes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::WorkflowAttributesGetResponse>* AdminService::Stub::PrepareAsyncGetWorkflowAttributesRaw(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowAttributesGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::WorkflowAttributesGetResponse>::Create(channel_.get(), cq, rpcmethod_GetWorkflowAttributes_, context, request, false);
}

::grpc::Status AdminService::Stub::DeleteWorkflowAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowAttributesDeleteRequest& request, ::flyteidl::admin::WorkflowAttributesDeleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteWorkflowAttributes_, context, request, response);
}

void AdminService::Stub::experimental_async::DeleteWorkflowAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowAttributesDeleteRequest* request, ::flyteidl::admin::WorkflowAttributesDeleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteWorkflowAttributes_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::DeleteWorkflowAttributes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::WorkflowAttributesDeleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteWorkflowAttributes_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::DeleteWorkflowAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowAttributesDeleteRequest* request, ::flyteidl::admin::WorkflowAttributesDeleteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteWorkflowAttributes_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::DeleteWorkflowAttributes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::WorkflowAttributesDeleteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteWorkflowAttributes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::WorkflowAttributesDeleteResponse>* AdminService::Stub::AsyncDeleteWorkflowAttributesRaw(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowAttributesDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::WorkflowAttributesDeleteResponse>::Create(channel_.get(), cq, rpcmethod_DeleteWorkflowAttributes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::WorkflowAttributesDeleteResponse>* AdminService::Stub::PrepareAsyncDeleteWorkflowAttributesRaw(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowAttributesDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::WorkflowAttributesDeleteResponse>::Create(channel_.get(), cq, rpcmethod_DeleteWorkflowAttributes_, context, request, false);
}

::grpc::Status AdminService::Stub::ListMatchableAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::ListMatchableAttributesRequest& request, ::flyteidl::admin::ListMatchableAttributesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListMatchableAttributes_, context, request, response);
}

void AdminService::Stub::experimental_async::ListMatchableAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::ListMatchableAttributesRequest* request, ::flyteidl::admin::ListMatchableAttributesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListMatchableAttributes_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListMatchableAttributes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ListMatchableAttributesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListMatchableAttributes_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListMatchableAttributes(::grpc::ClientContext* context, const ::flyteidl::admin::ListMatchableAttributesRequest* request, ::flyteidl::admin::ListMatchableAttributesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListMatchableAttributes_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::ListMatchableAttributes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::ListMatchableAttributesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListMatchableAttributes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ListMatchableAttributesResponse>* AdminService::Stub::AsyncListMatchableAttributesRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ListMatchableAttributesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ListMatchableAttributesResponse>::Create(channel_.get(), cq, rpcmethod_ListMatchableAttributes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::ListMatchableAttributesResponse>* AdminService::Stub::PrepareAsyncListMatchableAttributesRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ListMatchableAttributesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::ListMatchableAttributesResponse>::Create(channel_.get(), cq, rpcmethod_ListMatchableAttributes_, context, request, false);
}

::grpc::Status AdminService::Stub::ListNamedEntities(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityListRequest& request, ::flyteidl::admin::NamedEntityList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListNamedEntities_, context, request, response);
}

void AdminService::Stub::experimental_async::ListNamedEntities(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityListRequest* request, ::flyteidl::admin::NamedEntityList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListNamedEntities_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListNamedEntities(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::NamedEntityList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListNamedEntities_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListNamedEntities(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityListRequest* request, ::flyteidl::admin::NamedEntityList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListNamedEntities_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::ListNamedEntities(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::NamedEntityList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListNamedEntities_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::NamedEntityList>* AdminService::Stub::AsyncListNamedEntitiesRaw(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::NamedEntityList>::Create(channel_.get(), cq, rpcmethod_ListNamedEntities_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::NamedEntityList>* AdminService::Stub::PrepareAsyncListNamedEntitiesRaw(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::NamedEntityList>::Create(channel_.get(), cq, rpcmethod_ListNamedEntities_, context, request, false);
}

::grpc::Status AdminService::Stub::GetNamedEntity(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityGetRequest& request, ::flyteidl::admin::NamedEntity* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNamedEntity_, context, request, response);
}

void AdminService::Stub::experimental_async::GetNamedEntity(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityGetRequest* request, ::flyteidl::admin::NamedEntity* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNamedEntity_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetNamedEntity(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::NamedEntity* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNamedEntity_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetNamedEntity(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityGetRequest* request, ::flyteidl::admin::NamedEntity* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNamedEntity_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::GetNamedEntity(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::NamedEntity* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNamedEntity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::NamedEntity>* AdminService::Stub::AsyncGetNamedEntityRaw(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::NamedEntity>::Create(channel_.get(), cq, rpcmethod_GetNamedEntity_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::NamedEntity>* AdminService::Stub::PrepareAsyncGetNamedEntityRaw(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::NamedEntity>::Create(channel_.get(), cq, rpcmethod_GetNamedEntity_, context, request, false);
}

::grpc::Status AdminService::Stub::UpdateNamedEntity(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityUpdateRequest& request, ::flyteidl::admin::NamedEntityUpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateNamedEntity_, context, request, response);
}

void AdminService::Stub::experimental_async::UpdateNamedEntity(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityUpdateRequest* request, ::flyteidl::admin::NamedEntityUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateNamedEntity_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::UpdateNamedEntity(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::NamedEntityUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateNamedEntity_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::UpdateNamedEntity(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityUpdateRequest* request, ::flyteidl::admin::NamedEntityUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateNamedEntity_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::UpdateNamedEntity(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::NamedEntityUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateNamedEntity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::NamedEntityUpdateResponse>* AdminService::Stub::AsyncUpdateNamedEntityRaw(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::NamedEntityUpdateResponse>::Create(channel_.get(), cq, rpcmethod_UpdateNamedEntity_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::NamedEntityUpdateResponse>* AdminService::Stub::PrepareAsyncUpdateNamedEntityRaw(::grpc::ClientContext* context, const ::flyteidl::admin::NamedEntityUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::NamedEntityUpdateResponse>::Create(channel_.get(), cq, rpcmethod_UpdateNamedEntity_, context, request, false);
}

::grpc::Status AdminService::Stub::GetVersion(::grpc::ClientContext* context, const ::flyteidl::admin::GetVersionRequest& request, ::flyteidl::admin::GetVersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetVersion_, context, request, response);
}

void AdminService::Stub::experimental_async::GetVersion(::grpc::ClientContext* context, const ::flyteidl::admin::GetVersionRequest* request, ::flyteidl::admin::GetVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVersion_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::GetVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVersion_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetVersion(::grpc::ClientContext* context, const ::flyteidl::admin::GetVersionRequest* request, ::flyteidl::admin::GetVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetVersion_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::GetVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::GetVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::GetVersionResponse>* AdminService::Stub::AsyncGetVersionRaw(::grpc::ClientContext* context, const ::flyteidl::admin::GetVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::GetVersionResponse>::Create(channel_.get(), cq, rpcmethod_GetVersion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::GetVersionResponse>* AdminService::Stub::PrepareAsyncGetVersionRaw(::grpc::ClientContext* context, const ::flyteidl::admin::GetVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::GetVersionResponse>::Create(channel_.get(), cq, rpcmethod_GetVersion_, context, request, false);
}

::grpc::Status AdminService::Stub::GetDescriptionEntity(::grpc::ClientContext* context, const ::flyteidl::admin::ObjectGetRequest& request, ::flyteidl::admin::DescriptionEntity* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDescriptionEntity_, context, request, response);
}

void AdminService::Stub::experimental_async::GetDescriptionEntity(::grpc::ClientContext* context, const ::flyteidl::admin::ObjectGetRequest* request, ::flyteidl::admin::DescriptionEntity* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDescriptionEntity_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetDescriptionEntity(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::DescriptionEntity* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDescriptionEntity_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetDescriptionEntity(::grpc::ClientContext* context, const ::flyteidl::admin::ObjectGetRequest* request, ::flyteidl::admin::DescriptionEntity* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDescriptionEntity_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::GetDescriptionEntity(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::DescriptionEntity* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDescriptionEntity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::DescriptionEntity>* AdminService::Stub::AsyncGetDescriptionEntityRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ObjectGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::DescriptionEntity>::Create(channel_.get(), cq, rpcmethod_GetDescriptionEntity_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::DescriptionEntity>* AdminService::Stub::PrepareAsyncGetDescriptionEntityRaw(::grpc::ClientContext* context, const ::flyteidl::admin::ObjectGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::DescriptionEntity>::Create(channel_.get(), cq, rpcmethod_GetDescriptionEntity_, context, request, false);
}

::grpc::Status AdminService::Stub::ListDescriptionEntities(::grpc::ClientContext* context, const ::flyteidl::admin::DescriptionEntityListRequest& request, ::flyteidl::admin::DescriptionEntityList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListDescriptionEntities_, context, request, response);
}

void AdminService::Stub::experimental_async::ListDescriptionEntities(::grpc::ClientContext* context, const ::flyteidl::admin::DescriptionEntityListRequest* request, ::flyteidl::admin::DescriptionEntityList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListDescriptionEntities_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListDescriptionEntities(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::DescriptionEntityList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListDescriptionEntities_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::ListDescriptionEntities(::grpc::ClientContext* context, const ::flyteidl::admin::DescriptionEntityListRequest* request, ::flyteidl::admin::DescriptionEntityList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListDescriptionEntities_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::ListDescriptionEntities(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::DescriptionEntityList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListDescriptionEntities_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::DescriptionEntityList>* AdminService::Stub::AsyncListDescriptionEntitiesRaw(::grpc::ClientContext* context, const ::flyteidl::admin::DescriptionEntityListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::DescriptionEntityList>::Create(channel_.get(), cq, rpcmethod_ListDescriptionEntities_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::DescriptionEntityList>* AdminService::Stub::PrepareAsyncListDescriptionEntitiesRaw(::grpc::ClientContext* context, const ::flyteidl::admin::DescriptionEntityListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::DescriptionEntityList>::Create(channel_.get(), cq, rpcmethod_ListDescriptionEntities_, context, request, false);
}

::grpc::Status AdminService::Stub::GetExecutionMetrics(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowExecutionGetMetricsRequest& request, ::flyteidl::admin::WorkflowExecutionGetMetricsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetExecutionMetrics_, context, request, response);
}

void AdminService::Stub::experimental_async::GetExecutionMetrics(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowExecutionGetMetricsRequest* request, ::flyteidl::admin::WorkflowExecutionGetMetricsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetExecutionMetrics_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetExecutionMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::WorkflowExecutionGetMetricsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetExecutionMetrics_, context, request, response, std::move(f));
}

void AdminService::Stub::experimental_async::GetExecutionMetrics(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowExecutionGetMetricsRequest* request, ::flyteidl::admin::WorkflowExecutionGetMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetExecutionMetrics_, context, request, response, reactor);
}

void AdminService::Stub::experimental_async::GetExecutionMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::WorkflowExecutionGetMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetExecutionMetrics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::WorkflowExecutionGetMetricsResponse>* AdminService::Stub::AsyncGetExecutionMetricsRaw(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowExecutionGetMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::WorkflowExecutionGetMetricsResponse>::Create(channel_.get(), cq, rpcmethod_GetExecutionMetrics_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::WorkflowExecutionGetMetricsResponse>* AdminService::Stub::PrepareAsyncGetExecutionMetricsRaw(::grpc::ClientContext* context, const ::flyteidl::admin::WorkflowExecutionGetMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::WorkflowExecutionGetMetricsResponse>::Create(channel_.get(), cq, rpcmethod_GetExecutionMetrics_, context, request, false);
}

AdminService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::TaskCreateRequest, ::flyteidl::admin::TaskCreateResponse>(
          std::mem_fn(&AdminService::Service::CreateTask), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::ObjectGetRequest, ::flyteidl::admin::Task>(
          std::mem_fn(&AdminService::Service::GetTask), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::NamedEntityIdentifierListRequest, ::flyteidl::admin::NamedEntityIdentifierList>(
          std::mem_fn(&AdminService::Service::ListTaskIds), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::ResourceListRequest, ::flyteidl::admin::TaskList>(
          std::mem_fn(&AdminService::Service::ListTasks), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::WorkflowCreateRequest, ::flyteidl::admin::WorkflowCreateResponse>(
          std::mem_fn(&AdminService::Service::CreateWorkflow), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::ObjectGetRequest, ::flyteidl::admin::Workflow>(
          std::mem_fn(&AdminService::Service::GetWorkflow), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::NamedEntityIdentifierListRequest, ::flyteidl::admin::NamedEntityIdentifierList>(
          std::mem_fn(&AdminService::Service::ListWorkflowIds), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::ResourceListRequest, ::flyteidl::admin::WorkflowList>(
          std::mem_fn(&AdminService::Service::ListWorkflows), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::LaunchPlanCreateRequest, ::flyteidl::admin::LaunchPlanCreateResponse>(
          std::mem_fn(&AdminService::Service::CreateLaunchPlan), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::ObjectGetRequest, ::flyteidl::admin::LaunchPlan>(
          std::mem_fn(&AdminService::Service::GetLaunchPlan), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::ActiveLaunchPlanRequest, ::flyteidl::admin::LaunchPlan>(
          std::mem_fn(&AdminService::Service::GetActiveLaunchPlan), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::ActiveLaunchPlanListRequest, ::flyteidl::admin::LaunchPlanList>(
          std::mem_fn(&AdminService::Service::ListActiveLaunchPlans), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::NamedEntityIdentifierListRequest, ::flyteidl::admin::NamedEntityIdentifierList>(
          std::mem_fn(&AdminService::Service::ListLaunchPlanIds), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::ResourceListRequest, ::flyteidl::admin::LaunchPlanList>(
          std::mem_fn(&AdminService::Service::ListLaunchPlans), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::LaunchPlanUpdateRequest, ::flyteidl::admin::LaunchPlanUpdateResponse>(
          std::mem_fn(&AdminService::Service::UpdateLaunchPlan), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::ExecutionCreateRequest, ::flyteidl::admin::ExecutionCreateResponse>(
          std::mem_fn(&AdminService::Service::CreateExecution), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::ExecutionRelaunchRequest, ::flyteidl::admin::ExecutionCreateResponse>(
          std::mem_fn(&AdminService::Service::RelaunchExecution), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::ExecutionRecoverRequest, ::flyteidl::admin::ExecutionCreateResponse>(
          std::mem_fn(&AdminService::Service::RecoverExecution), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::WorkflowExecutionGetRequest, ::flyteidl::admin::Execution>(
          std::mem_fn(&AdminService::Service::GetExecution), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::ExecutionUpdateRequest, ::flyteidl::admin::ExecutionUpdateResponse>(
          std::mem_fn(&AdminService::Service::UpdateExecution), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::WorkflowExecutionGetDataRequest, ::flyteidl::admin::WorkflowExecutionGetDataResponse>(
          std::mem_fn(&AdminService::Service::GetExecutionData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::ResourceListRequest, ::flyteidl::admin::ExecutionList>(
          std::mem_fn(&AdminService::Service::ListExecutions), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::ExecutionTerminateRequest, ::flyteidl::admin::ExecutionTerminateResponse>(
          std::mem_fn(&AdminService::Service::TerminateExecution), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::NodeExecutionGetRequest, ::flyteidl::admin::NodeExecution>(
          std::mem_fn(&AdminService::Service::GetNodeExecution), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::NodeExecutionListRequest, ::flyteidl::admin::NodeExecutionList>(
          std::mem_fn(&AdminService::Service::ListNodeExecutions), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::NodeExecutionForTaskListRequest, ::flyteidl::admin::NodeExecutionList>(
          std::mem_fn(&AdminService::Service::ListNodeExecutionsForTask), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::NodeExecutionGetDataRequest, ::flyteidl::admin::NodeExecutionGetDataResponse>(
          std::mem_fn(&AdminService::Service::GetNodeExecutionData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::ProjectRegisterRequest, ::flyteidl::admin::ProjectRegisterResponse>(
          std::mem_fn(&AdminService::Service::RegisterProject), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::Project, ::flyteidl::admin::ProjectUpdateResponse>(
          std::mem_fn(&AdminService::Service::UpdateProject), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::ProjectListRequest, ::flyteidl::admin::Projects>(
          std::mem_fn(&AdminService::Service::ListProjects), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::WorkflowExecutionEventRequest, ::flyteidl::admin::WorkflowExecutionEventResponse>(
          std::mem_fn(&AdminService::Service::CreateWorkflowEvent), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::NodeExecutionEventRequest, ::flyteidl::admin::NodeExecutionEventResponse>(
          std::mem_fn(&AdminService::Service::CreateNodeEvent), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::TaskExecutionEventRequest, ::flyteidl::admin::TaskExecutionEventResponse>(
          std::mem_fn(&AdminService::Service::CreateTaskEvent), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::TaskExecutionGetRequest, ::flyteidl::admin::TaskExecution>(
          std::mem_fn(&AdminService::Service::GetTaskExecution), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::TaskExecutionListRequest, ::flyteidl::admin::TaskExecutionList>(
          std::mem_fn(&AdminService::Service::ListTaskExecutions), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::TaskExecutionGetDataRequest, ::flyteidl::admin::TaskExecutionGetDataResponse>(
          std::mem_fn(&AdminService::Service::GetTaskExecutionData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::ProjectDomainAttributesUpdateRequest, ::flyteidl::admin::ProjectDomainAttributesUpdateResponse>(
          std::mem_fn(&AdminService::Service::UpdateProjectDomainAttributes), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::ProjectDomainAttributesGetRequest, ::flyteidl::admin::ProjectDomainAttributesGetResponse>(
          std::mem_fn(&AdminService::Service::GetProjectDomainAttributes), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::ProjectDomainAttributesDeleteRequest, ::flyteidl::admin::ProjectDomainAttributesDeleteResponse>(
          std::mem_fn(&AdminService::Service::DeleteProjectDomainAttributes), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::ProjectAttributesUpdateRequest, ::flyteidl::admin::ProjectAttributesUpdateResponse>(
          std::mem_fn(&AdminService::Service::UpdateProjectAttributes), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::ProjectAttributesGetRequest, ::flyteidl::admin::ProjectAttributesGetResponse>(
          std::mem_fn(&AdminService::Service::GetProjectAttributes), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::ProjectAttributesDeleteRequest, ::flyteidl::admin::ProjectAttributesDeleteResponse>(
          std::mem_fn(&AdminService::Service::DeleteProjectAttributes), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::WorkflowAttributesUpdateRequest, ::flyteidl::admin::WorkflowAttributesUpdateResponse>(
          std::mem_fn(&AdminService::Service::UpdateWorkflowAttributes), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::WorkflowAttributesGetRequest, ::flyteidl::admin::WorkflowAttributesGetResponse>(
          std::mem_fn(&AdminService::Service::GetWorkflowAttributes), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[44],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::WorkflowAttributesDeleteRequest, ::flyteidl::admin::WorkflowAttributesDeleteResponse>(
          std::mem_fn(&AdminService::Service::DeleteWorkflowAttributes), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[45],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::ListMatchableAttributesRequest, ::flyteidl::admin::ListMatchableAttributesResponse>(
          std::mem_fn(&AdminService::Service::ListMatchableAttributes), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[46],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::NamedEntityListRequest, ::flyteidl::admin::NamedEntityList>(
          std::mem_fn(&AdminService::Service::ListNamedEntities), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[47],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::NamedEntityGetRequest, ::flyteidl::admin::NamedEntity>(
          std::mem_fn(&AdminService::Service::GetNamedEntity), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[48],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::NamedEntityUpdateRequest, ::flyteidl::admin::NamedEntityUpdateResponse>(
          std::mem_fn(&AdminService::Service::UpdateNamedEntity), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[49],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::GetVersionRequest, ::flyteidl::admin::GetVersionResponse>(
          std::mem_fn(&AdminService::Service::GetVersion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[50],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::ObjectGetRequest, ::flyteidl::admin::DescriptionEntity>(
          std::mem_fn(&AdminService::Service::GetDescriptionEntity), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[51],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::DescriptionEntityListRequest, ::flyteidl::admin::DescriptionEntityList>(
          std::mem_fn(&AdminService::Service::ListDescriptionEntities), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdminService_method_names[52],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdminService::Service, ::flyteidl::admin::WorkflowExecutionGetMetricsRequest, ::flyteidl::admin::WorkflowExecutionGetMetricsResponse>(
          std::mem_fn(&AdminService::Service::GetExecutionMetrics), this)));
}

AdminService::Service::~Service() {
}

::grpc::Status AdminService::Service::CreateTask(::grpc::ServerContext* context, const ::flyteidl::admin::TaskCreateRequest* request, ::flyteidl::admin::TaskCreateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::GetTask(::grpc::ServerContext* context, const ::flyteidl::admin::ObjectGetRequest* request, ::flyteidl::admin::Task* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::ListTaskIds(::grpc::ServerContext* context, const ::flyteidl::admin::NamedEntityIdentifierListRequest* request, ::flyteidl::admin::NamedEntityIdentifierList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::ListTasks(::grpc::ServerContext* context, const ::flyteidl::admin::ResourceListRequest* request, ::flyteidl::admin::TaskList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::CreateWorkflow(::grpc::ServerContext* context, const ::flyteidl::admin::WorkflowCreateRequest* request, ::flyteidl::admin::WorkflowCreateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::GetWorkflow(::grpc::ServerContext* context, const ::flyteidl::admin::ObjectGetRequest* request, ::flyteidl::admin::Workflow* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::ListWorkflowIds(::grpc::ServerContext* context, const ::flyteidl::admin::NamedEntityIdentifierListRequest* request, ::flyteidl::admin::NamedEntityIdentifierList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::ListWorkflows(::grpc::ServerContext* context, const ::flyteidl::admin::ResourceListRequest* request, ::flyteidl::admin::WorkflowList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::CreateLaunchPlan(::grpc::ServerContext* context, const ::flyteidl::admin::LaunchPlanCreateRequest* request, ::flyteidl::admin::LaunchPlanCreateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::GetLaunchPlan(::grpc::ServerContext* context, const ::flyteidl::admin::ObjectGetRequest* request, ::flyteidl::admin::LaunchPlan* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::GetActiveLaunchPlan(::grpc::ServerContext* context, const ::flyteidl::admin::ActiveLaunchPlanRequest* request, ::flyteidl::admin::LaunchPlan* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::ListActiveLaunchPlans(::grpc::ServerContext* context, const ::flyteidl::admin::ActiveLaunchPlanListRequest* request, ::flyteidl::admin::LaunchPlanList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::ListLaunchPlanIds(::grpc::ServerContext* context, const ::flyteidl::admin::NamedEntityIdentifierListRequest* request, ::flyteidl::admin::NamedEntityIdentifierList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::ListLaunchPlans(::grpc::ServerContext* context, const ::flyteidl::admin::ResourceListRequest* request, ::flyteidl::admin::LaunchPlanList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::UpdateLaunchPlan(::grpc::ServerContext* context, const ::flyteidl::admin::LaunchPlanUpdateRequest* request, ::flyteidl::admin::LaunchPlanUpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::CreateExecution(::grpc::ServerContext* context, const ::flyteidl::admin::ExecutionCreateRequest* request, ::flyteidl::admin::ExecutionCreateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::RelaunchExecution(::grpc::ServerContext* context, const ::flyteidl::admin::ExecutionRelaunchRequest* request, ::flyteidl::admin::ExecutionCreateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::RecoverExecution(::grpc::ServerContext* context, const ::flyteidl::admin::ExecutionRecoverRequest* request, ::flyteidl::admin::ExecutionCreateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::GetExecution(::grpc::ServerContext* context, const ::flyteidl::admin::WorkflowExecutionGetRequest* request, ::flyteidl::admin::Execution* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::UpdateExecution(::grpc::ServerContext* context, const ::flyteidl::admin::ExecutionUpdateRequest* request, ::flyteidl::admin::ExecutionUpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::GetExecutionData(::grpc::ServerContext* context, const ::flyteidl::admin::WorkflowExecutionGetDataRequest* request, ::flyteidl::admin::WorkflowExecutionGetDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::ListExecutions(::grpc::ServerContext* context, const ::flyteidl::admin::ResourceListRequest* request, ::flyteidl::admin::ExecutionList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::TerminateExecution(::grpc::ServerContext* context, const ::flyteidl::admin::ExecutionTerminateRequest* request, ::flyteidl::admin::ExecutionTerminateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::GetNodeExecution(::grpc::ServerContext* context, const ::flyteidl::admin::NodeExecutionGetRequest* request, ::flyteidl::admin::NodeExecution* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::ListNodeExecutions(::grpc::ServerContext* context, const ::flyteidl::admin::NodeExecutionListRequest* request, ::flyteidl::admin::NodeExecutionList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::ListNodeExecutionsForTask(::grpc::ServerContext* context, const ::flyteidl::admin::NodeExecutionForTaskListRequest* request, ::flyteidl::admin::NodeExecutionList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::GetNodeExecutionData(::grpc::ServerContext* context, const ::flyteidl::admin::NodeExecutionGetDataRequest* request, ::flyteidl::admin::NodeExecutionGetDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::RegisterProject(::grpc::ServerContext* context, const ::flyteidl::admin::ProjectRegisterRequest* request, ::flyteidl::admin::ProjectRegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::UpdateProject(::grpc::ServerContext* context, const ::flyteidl::admin::Project* request, ::flyteidl::admin::ProjectUpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::ListProjects(::grpc::ServerContext* context, const ::flyteidl::admin::ProjectListRequest* request, ::flyteidl::admin::Projects* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::CreateWorkflowEvent(::grpc::ServerContext* context, const ::flyteidl::admin::WorkflowExecutionEventRequest* request, ::flyteidl::admin::WorkflowExecutionEventResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::CreateNodeEvent(::grpc::ServerContext* context, const ::flyteidl::admin::NodeExecutionEventRequest* request, ::flyteidl::admin::NodeExecutionEventResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::CreateTaskEvent(::grpc::ServerContext* context, const ::flyteidl::admin::TaskExecutionEventRequest* request, ::flyteidl::admin::TaskExecutionEventResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::GetTaskExecution(::grpc::ServerContext* context, const ::flyteidl::admin::TaskExecutionGetRequest* request, ::flyteidl::admin::TaskExecution* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::ListTaskExecutions(::grpc::ServerContext* context, const ::flyteidl::admin::TaskExecutionListRequest* request, ::flyteidl::admin::TaskExecutionList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::GetTaskExecutionData(::grpc::ServerContext* context, const ::flyteidl::admin::TaskExecutionGetDataRequest* request, ::flyteidl::admin::TaskExecutionGetDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::UpdateProjectDomainAttributes(::grpc::ServerContext* context, const ::flyteidl::admin::ProjectDomainAttributesUpdateRequest* request, ::flyteidl::admin::ProjectDomainAttributesUpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::GetProjectDomainAttributes(::grpc::ServerContext* context, const ::flyteidl::admin::ProjectDomainAttributesGetRequest* request, ::flyteidl::admin::ProjectDomainAttributesGetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::DeleteProjectDomainAttributes(::grpc::ServerContext* context, const ::flyteidl::admin::ProjectDomainAttributesDeleteRequest* request, ::flyteidl::admin::ProjectDomainAttributesDeleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::UpdateProjectAttributes(::grpc::ServerContext* context, const ::flyteidl::admin::ProjectAttributesUpdateRequest* request, ::flyteidl::admin::ProjectAttributesUpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::GetProjectAttributes(::grpc::ServerContext* context, const ::flyteidl::admin::ProjectAttributesGetRequest* request, ::flyteidl::admin::ProjectAttributesGetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::DeleteProjectAttributes(::grpc::ServerContext* context, const ::flyteidl::admin::ProjectAttributesDeleteRequest* request, ::flyteidl::admin::ProjectAttributesDeleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::UpdateWorkflowAttributes(::grpc::ServerContext* context, const ::flyteidl::admin::WorkflowAttributesUpdateRequest* request, ::flyteidl::admin::WorkflowAttributesUpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::GetWorkflowAttributes(::grpc::ServerContext* context, const ::flyteidl::admin::WorkflowAttributesGetRequest* request, ::flyteidl::admin::WorkflowAttributesGetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::DeleteWorkflowAttributes(::grpc::ServerContext* context, const ::flyteidl::admin::WorkflowAttributesDeleteRequest* request, ::flyteidl::admin::WorkflowAttributesDeleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::ListMatchableAttributes(::grpc::ServerContext* context, const ::flyteidl::admin::ListMatchableAttributesRequest* request, ::flyteidl::admin::ListMatchableAttributesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::ListNamedEntities(::grpc::ServerContext* context, const ::flyteidl::admin::NamedEntityListRequest* request, ::flyteidl::admin::NamedEntityList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::GetNamedEntity(::grpc::ServerContext* context, const ::flyteidl::admin::NamedEntityGetRequest* request, ::flyteidl::admin::NamedEntity* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::UpdateNamedEntity(::grpc::ServerContext* context, const ::flyteidl::admin::NamedEntityUpdateRequest* request, ::flyteidl::admin::NamedEntityUpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::GetVersion(::grpc::ServerContext* context, const ::flyteidl::admin::GetVersionRequest* request, ::flyteidl::admin::GetVersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::GetDescriptionEntity(::grpc::ServerContext* context, const ::flyteidl::admin::ObjectGetRequest* request, ::flyteidl::admin::DescriptionEntity* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::ListDescriptionEntities(::grpc::ServerContext* context, const ::flyteidl::admin::DescriptionEntityListRequest* request, ::flyteidl::admin::DescriptionEntityList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdminService::Service::GetExecutionMetrics(::grpc::ServerContext* context, const ::flyteidl::admin::WorkflowExecutionGetMetricsRequest* request, ::flyteidl::admin::WorkflowExecutionGetMetricsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace flyteidl
}  // namespace service

