// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/cluster_assignment.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2fcluster_5fassignment_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2fcluster_5fassignment_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcluster_5fassignment_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fadmin_2fcluster_5fassignment_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2fcluster_5fassignment_2eproto;
namespace flyteidl {
namespace admin {
class Affinity;
struct AffinityDefaultTypeInternal;
extern AffinityDefaultTypeInternal _Affinity_default_instance_;
class ClusterAssignment;
struct ClusterAssignmentDefaultTypeInternal;
extern ClusterAssignmentDefaultTypeInternal _ClusterAssignment_default_instance_;
class Selector;
struct SelectorDefaultTypeInternal;
extern SelectorDefaultTypeInternal _Selector_default_instance_;
class Toleration;
struct TolerationDefaultTypeInternal;
extern TolerationDefaultTypeInternal _Toleration_default_instance_;
}  // namespace admin
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::admin::Affinity* Arena::CreateMaybeMessage<::flyteidl::admin::Affinity>(Arena*);
template<> ::flyteidl::admin::ClusterAssignment* Arena::CreateMaybeMessage<::flyteidl::admin::ClusterAssignment>(Arena*);
template<> ::flyteidl::admin::Selector* Arena::CreateMaybeMessage<::flyteidl::admin::Selector>(Arena*);
template<> ::flyteidl::admin::Toleration* Arena::CreateMaybeMessage<::flyteidl::admin::Toleration>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace admin {

enum Selector_Operator : int {
  Selector_Operator_EQUALS = 0,
  Selector_Operator_NOT_EQUALS = 1,
  Selector_Operator_IN = 2,
  Selector_Operator_NOT_IN = 3,
  Selector_Operator_EXISTS = 4,
  Selector_Operator_Selector_Operator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Selector_Operator_Selector_Operator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Selector_Operator_IsValid(int value);
constexpr Selector_Operator Selector_Operator_Operator_MIN = Selector_Operator_EQUALS;
constexpr Selector_Operator Selector_Operator_Operator_MAX = Selector_Operator_EXISTS;
constexpr int Selector_Operator_Operator_ARRAYSIZE = Selector_Operator_Operator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Selector_Operator_descriptor();
template<typename T>
inline const std::string& Selector_Operator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Selector_Operator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Selector_Operator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Selector_Operator_descriptor(), enum_t_value);
}
inline bool Selector_Operator_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Selector_Operator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Selector_Operator>(
    Selector_Operator_descriptor(), name, value);
}
// ===================================================================

class ClusterAssignment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ClusterAssignment) */ {
 public:
  inline ClusterAssignment() : ClusterAssignment(nullptr) {}
  ~ClusterAssignment() override;
  explicit constexpr ClusterAssignment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClusterAssignment(const ClusterAssignment& from);
  ClusterAssignment(ClusterAssignment&& from) noexcept
    : ClusterAssignment() {
    *this = ::std::move(from);
  }

  inline ClusterAssignment& operator=(const ClusterAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClusterAssignment& operator=(ClusterAssignment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClusterAssignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClusterAssignment* internal_default_instance() {
    return reinterpret_cast<const ClusterAssignment*>(
               &_ClusterAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClusterAssignment& a, ClusterAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(ClusterAssignment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClusterAssignment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClusterAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClusterAssignment>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterAssignment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.ClusterAssignment";
  }
  protected:
  explicit ClusterAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAffinityFieldNumber = 1,
    kTolerationFieldNumber = 2,
  };
  // .flyteidl.admin.Affinity affinity = 1 [json_name = "affinity"];
  bool has_affinity() const;
  private:
  bool _internal_has_affinity() const;
  public:
  void clear_affinity();
  const ::flyteidl::admin::Affinity& affinity() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::Affinity* release_affinity();
  ::flyteidl::admin::Affinity* mutable_affinity();
  void set_allocated_affinity(::flyteidl::admin::Affinity* affinity);
  private:
  const ::flyteidl::admin::Affinity& _internal_affinity() const;
  ::flyteidl::admin::Affinity* _internal_mutable_affinity();
  public:
  void unsafe_arena_set_allocated_affinity(
      ::flyteidl::admin::Affinity* affinity);
  ::flyteidl::admin::Affinity* unsafe_arena_release_affinity();

  // .flyteidl.admin.Toleration toleration = 2 [json_name = "toleration"];
  bool has_toleration() const;
  private:
  bool _internal_has_toleration() const;
  public:
  void clear_toleration();
  const ::flyteidl::admin::Toleration& toleration() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::Toleration* release_toleration();
  ::flyteidl::admin::Toleration* mutable_toleration();
  void set_allocated_toleration(::flyteidl::admin::Toleration* toleration);
  private:
  const ::flyteidl::admin::Toleration& _internal_toleration() const;
  ::flyteidl::admin::Toleration* _internal_mutable_toleration();
  public:
  void unsafe_arena_set_allocated_toleration(
      ::flyteidl::admin::Toleration* toleration);
  ::flyteidl::admin::Toleration* unsafe_arena_release_toleration();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ClusterAssignment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::admin::Affinity* affinity_;
  ::flyteidl::admin::Toleration* toleration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fcluster_5fassignment_2eproto;
};
// -------------------------------------------------------------------

class Affinity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Affinity) */ {
 public:
  inline Affinity() : Affinity(nullptr) {}
  ~Affinity() override;
  explicit constexpr Affinity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Affinity(const Affinity& from);
  Affinity(Affinity&& from) noexcept
    : Affinity() {
    *this = ::std::move(from);
  }

  inline Affinity& operator=(const Affinity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Affinity& operator=(Affinity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Affinity& default_instance() {
    return *internal_default_instance();
  }
  static inline const Affinity* internal_default_instance() {
    return reinterpret_cast<const Affinity*>(
               &_Affinity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Affinity& a, Affinity& b) {
    a.Swap(&b);
  }
  inline void Swap(Affinity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Affinity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Affinity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Affinity>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Affinity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.Affinity";
  }
  protected:
  explicit Affinity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectorsFieldNumber = 1,
  };
  // repeated .flyteidl.admin.Selector selectors = 1 [json_name = "selectors"];
  int selectors_size() const;
  private:
  int _internal_selectors_size() const;
  public:
  void clear_selectors();
  ::flyteidl::admin::Selector* mutable_selectors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Selector >*
      mutable_selectors();
  private:
  const ::flyteidl::admin::Selector& _internal_selectors(int index) const;
  ::flyteidl::admin::Selector* _internal_add_selectors();
  public:
  const ::flyteidl::admin::Selector& selectors(int index) const;
  ::flyteidl::admin::Selector* add_selectors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Selector >&
      selectors() const;

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Affinity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Selector > selectors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fcluster_5fassignment_2eproto;
};
// -------------------------------------------------------------------

class Toleration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Toleration) */ {
 public:
  inline Toleration() : Toleration(nullptr) {}
  ~Toleration() override;
  explicit constexpr Toleration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Toleration(const Toleration& from);
  Toleration(Toleration&& from) noexcept
    : Toleration() {
    *this = ::std::move(from);
  }

  inline Toleration& operator=(const Toleration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Toleration& operator=(Toleration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Toleration& default_instance() {
    return *internal_default_instance();
  }
  static inline const Toleration* internal_default_instance() {
    return reinterpret_cast<const Toleration*>(
               &_Toleration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Toleration& a, Toleration& b) {
    a.Swap(&b);
  }
  inline void Swap(Toleration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Toleration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Toleration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Toleration>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Toleration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.Toleration";
  }
  protected:
  explicit Toleration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectorsFieldNumber = 1,
  };
  // repeated .flyteidl.admin.Selector selectors = 1 [json_name = "selectors"];
  int selectors_size() const;
  private:
  int _internal_selectors_size() const;
  public:
  void clear_selectors();
  ::flyteidl::admin::Selector* mutable_selectors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Selector >*
      mutable_selectors();
  private:
  const ::flyteidl::admin::Selector& _internal_selectors(int index) const;
  ::flyteidl::admin::Selector* _internal_add_selectors();
  public:
  const ::flyteidl::admin::Selector& selectors(int index) const;
  ::flyteidl::admin::Selector* add_selectors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Selector >&
      selectors() const;

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Toleration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Selector > selectors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fcluster_5fassignment_2eproto;
};
// -------------------------------------------------------------------

class Selector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Selector) */ {
 public:
  inline Selector() : Selector(nullptr) {}
  ~Selector() override;
  explicit constexpr Selector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Selector(const Selector& from);
  Selector(Selector&& from) noexcept
    : Selector() {
    *this = ::std::move(from);
  }

  inline Selector& operator=(const Selector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Selector& operator=(Selector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Selector& default_instance() {
    return *internal_default_instance();
  }
  static inline const Selector* internal_default_instance() {
    return reinterpret_cast<const Selector*>(
               &_Selector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Selector& a, Selector& b) {
    a.Swap(&b);
  }
  inline void Swap(Selector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Selector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Selector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Selector>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Selector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.Selector";
  }
  protected:
  explicit Selector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Selector_Operator Operator;
  static constexpr Operator EQUALS =
    Selector_Operator_EQUALS;
  static constexpr Operator NOT_EQUALS =
    Selector_Operator_NOT_EQUALS;
  static constexpr Operator IN =
    Selector_Operator_IN;
  static constexpr Operator NOT_IN =
    Selector_Operator_NOT_IN;
  static constexpr Operator EXISTS =
    Selector_Operator_EXISTS;
  static inline bool Operator_IsValid(int value) {
    return Selector_Operator_IsValid(value);
  }
  static constexpr Operator Operator_MIN =
    Selector_Operator_Operator_MIN;
  static constexpr Operator Operator_MAX =
    Selector_Operator_Operator_MAX;
  static constexpr int Operator_ARRAYSIZE =
    Selector_Operator_Operator_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Operator_descriptor() {
    return Selector_Operator_descriptor();
  }
  template<typename T>
  static inline const std::string& Operator_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operator>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operator_Name.");
    return Selector_Operator_Name(enum_t_value);
  }
  static inline bool Operator_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Operator* value) {
    return Selector_Operator_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyFieldNumber = 1,
    kOperatorFieldNumber = 3,
  };
  // repeated string value = 2 [json_name = "value"];
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  const std::string& value(int index) const;
  std::string* mutable_value(int index);
  void set_value(int index, const std::string& value);
  void set_value(int index, std::string&& value);
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  std::string* add_value();
  void add_value(const std::string& value);
  void add_value(std::string&& value);
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_value();
  private:
  const std::string& _internal_value(int index) const;
  std::string* _internal_add_value();
  public:

  // string key = 1 [json_name = "key"];
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .flyteidl.admin.Selector.Operator operator = 3 [json_name = "operator"];
  void clear_operator_();
  ::flyteidl::admin::Selector_Operator operator_() const;
  void set_operator_(::flyteidl::admin::Selector_Operator value);
  private:
  ::flyteidl::admin::Selector_Operator _internal_operator_() const;
  void _internal_set_operator_(::flyteidl::admin::Selector_Operator value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Selector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  int operator__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fcluster_5fassignment_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClusterAssignment

// .flyteidl.admin.Affinity affinity = 1 [json_name = "affinity"];
inline bool ClusterAssignment::_internal_has_affinity() const {
  return this != internal_default_instance() && affinity_ != nullptr;
}
inline bool ClusterAssignment::has_affinity() const {
  return _internal_has_affinity();
}
inline void ClusterAssignment::clear_affinity() {
  if (GetArenaForAllocation() == nullptr && affinity_ != nullptr) {
    delete affinity_;
  }
  affinity_ = nullptr;
}
inline const ::flyteidl::admin::Affinity& ClusterAssignment::_internal_affinity() const {
  const ::flyteidl::admin::Affinity* p = affinity_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::Affinity&>(
      ::flyteidl::admin::_Affinity_default_instance_);
}
inline const ::flyteidl::admin::Affinity& ClusterAssignment::affinity() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ClusterAssignment.affinity)
  return _internal_affinity();
}
inline void ClusterAssignment::unsafe_arena_set_allocated_affinity(
    ::flyteidl::admin::Affinity* affinity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(affinity_);
  }
  affinity_ = affinity;
  if (affinity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.ClusterAssignment.affinity)
}
inline ::flyteidl::admin::Affinity* ClusterAssignment::release_affinity() {
  
  ::flyteidl::admin::Affinity* temp = affinity_;
  affinity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::Affinity* ClusterAssignment::unsafe_arena_release_affinity() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ClusterAssignment.affinity)
  
  ::flyteidl::admin::Affinity* temp = affinity_;
  affinity_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Affinity* ClusterAssignment::_internal_mutable_affinity() {
  
  if (affinity_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Affinity>(GetArenaForAllocation());
    affinity_ = p;
  }
  return affinity_;
}
inline ::flyteidl::admin::Affinity* ClusterAssignment::mutable_affinity() {
  ::flyteidl::admin::Affinity* _msg = _internal_mutable_affinity();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ClusterAssignment.affinity)
  return _msg;
}
inline void ClusterAssignment::set_allocated_affinity(::flyteidl::admin::Affinity* affinity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete affinity_;
  }
  if (affinity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::Affinity>::GetOwningArena(affinity);
    if (message_arena != submessage_arena) {
      affinity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, affinity, submessage_arena);
    }
    
  } else {
    
  }
  affinity_ = affinity;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ClusterAssignment.affinity)
}

// .flyteidl.admin.Toleration toleration = 2 [json_name = "toleration"];
inline bool ClusterAssignment::_internal_has_toleration() const {
  return this != internal_default_instance() && toleration_ != nullptr;
}
inline bool ClusterAssignment::has_toleration() const {
  return _internal_has_toleration();
}
inline void ClusterAssignment::clear_toleration() {
  if (GetArenaForAllocation() == nullptr && toleration_ != nullptr) {
    delete toleration_;
  }
  toleration_ = nullptr;
}
inline const ::flyteidl::admin::Toleration& ClusterAssignment::_internal_toleration() const {
  const ::flyteidl::admin::Toleration* p = toleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::Toleration&>(
      ::flyteidl::admin::_Toleration_default_instance_);
}
inline const ::flyteidl::admin::Toleration& ClusterAssignment::toleration() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ClusterAssignment.toleration)
  return _internal_toleration();
}
inline void ClusterAssignment::unsafe_arena_set_allocated_toleration(
    ::flyteidl::admin::Toleration* toleration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(toleration_);
  }
  toleration_ = toleration;
  if (toleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.ClusterAssignment.toleration)
}
inline ::flyteidl::admin::Toleration* ClusterAssignment::release_toleration() {
  
  ::flyteidl::admin::Toleration* temp = toleration_;
  toleration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::Toleration* ClusterAssignment::unsafe_arena_release_toleration() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ClusterAssignment.toleration)
  
  ::flyteidl::admin::Toleration* temp = toleration_;
  toleration_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Toleration* ClusterAssignment::_internal_mutable_toleration() {
  
  if (toleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Toleration>(GetArenaForAllocation());
    toleration_ = p;
  }
  return toleration_;
}
inline ::flyteidl::admin::Toleration* ClusterAssignment::mutable_toleration() {
  ::flyteidl::admin::Toleration* _msg = _internal_mutable_toleration();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ClusterAssignment.toleration)
  return _msg;
}
inline void ClusterAssignment::set_allocated_toleration(::flyteidl::admin::Toleration* toleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete toleration_;
  }
  if (toleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::Toleration>::GetOwningArena(toleration);
    if (message_arena != submessage_arena) {
      toleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, toleration, submessage_arena);
    }
    
  } else {
    
  }
  toleration_ = toleration;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ClusterAssignment.toleration)
}

// -------------------------------------------------------------------

// Affinity

// repeated .flyteidl.admin.Selector selectors = 1 [json_name = "selectors"];
inline int Affinity::_internal_selectors_size() const {
  return selectors_.size();
}
inline int Affinity::selectors_size() const {
  return _internal_selectors_size();
}
inline void Affinity::clear_selectors() {
  selectors_.Clear();
}
inline ::flyteidl::admin::Selector* Affinity::mutable_selectors(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Affinity.selectors)
  return selectors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Selector >*
Affinity::mutable_selectors() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.Affinity.selectors)
  return &selectors_;
}
inline const ::flyteidl::admin::Selector& Affinity::_internal_selectors(int index) const {
  return selectors_.Get(index);
}
inline const ::flyteidl::admin::Selector& Affinity::selectors(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Affinity.selectors)
  return _internal_selectors(index);
}
inline ::flyteidl::admin::Selector* Affinity::_internal_add_selectors() {
  return selectors_.Add();
}
inline ::flyteidl::admin::Selector* Affinity::add_selectors() {
  ::flyteidl::admin::Selector* _add = _internal_add_selectors();
  // @@protoc_insertion_point(field_add:flyteidl.admin.Affinity.selectors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Selector >&
Affinity::selectors() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.Affinity.selectors)
  return selectors_;
}

// -------------------------------------------------------------------

// Toleration

// repeated .flyteidl.admin.Selector selectors = 1 [json_name = "selectors"];
inline int Toleration::_internal_selectors_size() const {
  return selectors_.size();
}
inline int Toleration::selectors_size() const {
  return _internal_selectors_size();
}
inline void Toleration::clear_selectors() {
  selectors_.Clear();
}
inline ::flyteidl::admin::Selector* Toleration::mutable_selectors(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Toleration.selectors)
  return selectors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Selector >*
Toleration::mutable_selectors() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.Toleration.selectors)
  return &selectors_;
}
inline const ::flyteidl::admin::Selector& Toleration::_internal_selectors(int index) const {
  return selectors_.Get(index);
}
inline const ::flyteidl::admin::Selector& Toleration::selectors(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Toleration.selectors)
  return _internal_selectors(index);
}
inline ::flyteidl::admin::Selector* Toleration::_internal_add_selectors() {
  return selectors_.Add();
}
inline ::flyteidl::admin::Selector* Toleration::add_selectors() {
  ::flyteidl::admin::Selector* _add = _internal_add_selectors();
  // @@protoc_insertion_point(field_add:flyteidl.admin.Toleration.selectors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Selector >&
Toleration::selectors() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.Toleration.selectors)
  return selectors_;
}

// -------------------------------------------------------------------

// Selector

// string key = 1 [json_name = "key"];
inline void Selector::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Selector::key() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Selector.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Selector::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.Selector.key)
}
inline std::string* Selector::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Selector.key)
  return _s;
}
inline const std::string& Selector::_internal_key() const {
  return key_.Get();
}
inline void Selector::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Selector::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Selector::release_key() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Selector.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Selector::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Selector.key)
}

// repeated string value = 2 [json_name = "value"];
inline int Selector::_internal_value_size() const {
  return value_.size();
}
inline int Selector::value_size() const {
  return _internal_value_size();
}
inline void Selector::clear_value() {
  value_.Clear();
}
inline std::string* Selector::add_value() {
  std::string* _s = _internal_add_value();
  // @@protoc_insertion_point(field_add_mutable:flyteidl.admin.Selector.value)
  return _s;
}
inline const std::string& Selector::_internal_value(int index) const {
  return value_.Get(index);
}
inline const std::string& Selector::value(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Selector.value)
  return _internal_value(index);
}
inline std::string* Selector::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Selector.value)
  return value_.Mutable(index);
}
inline void Selector::set_value(int index, const std::string& value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.Selector.value)
}
inline void Selector::set_value(int index, std::string&& value) {
  value_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flyteidl.admin.Selector.value)
}
inline void Selector::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.Selector.value)
}
inline void Selector::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.Selector.value)
}
inline std::string* Selector::_internal_add_value() {
  return value_.Add();
}
inline void Selector::add_value(const std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.admin.Selector.value)
}
inline void Selector::add_value(std::string&& value) {
  value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.admin.Selector.value)
}
inline void Selector::add_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.admin.Selector.value)
}
inline void Selector::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.admin.Selector.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Selector::value() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.Selector.value)
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Selector::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.Selector.value)
  return &value_;
}

// .flyteidl.admin.Selector.Operator operator = 3 [json_name = "operator"];
inline void Selector::clear_operator_() {
  operator__ = 0;
}
inline ::flyteidl::admin::Selector_Operator Selector::_internal_operator_() const {
  return static_cast< ::flyteidl::admin::Selector_Operator >(operator__);
}
inline ::flyteidl::admin::Selector_Operator Selector::operator_() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Selector.operator)
  return _internal_operator_();
}
inline void Selector::_internal_set_operator_(::flyteidl::admin::Selector_Operator value) {
  
  operator__ = value;
}
inline void Selector::set_operator_(::flyteidl::admin::Selector_Operator value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.Selector.operator)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::flyteidl::admin::Selector_Operator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::admin::Selector_Operator>() {
  return ::flyteidl::admin::Selector_Operator_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2fcluster_5fassignment_2eproto
