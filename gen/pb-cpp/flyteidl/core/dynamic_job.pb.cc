// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/dynamic_job.proto

#include "flyteidl/core/dynamic_job.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace core {
constexpr DynamicJobSpec::DynamicJobSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nodes_()
  , outputs_()
  , tasks_()
  , subworkflows_()
  , min_successes_(int64_t{0}){}
struct DynamicJobSpecDefaultTypeInternal {
  constexpr DynamicJobSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DynamicJobSpecDefaultTypeInternal() {}
  union {
    DynamicJobSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DynamicJobSpecDefaultTypeInternal _DynamicJobSpec_default_instance_;
}  // namespace core
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fcore_2fdynamic_5fjob_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fcore_2fdynamic_5fjob_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fcore_2fdynamic_5fjob_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fcore_2fdynamic_5fjob_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::DynamicJobSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::DynamicJobSpec, nodes_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::DynamicJobSpec, min_successes_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::DynamicJobSpec, outputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::DynamicJobSpec, tasks_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::DynamicJobSpec, subworkflows_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::core::DynamicJobSpec)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_DynamicJobSpec_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fcore_2fdynamic_5fjob_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037flyteidl/core/dynamic_job.proto\022\rflyte"
  "idl.core\032\031flyteidl/core/tasks.proto\032\034fly"
  "teidl/core/workflow.proto\032\034flyteidl/core"
  "/literals.proto\"\212\002\n\016DynamicJobSpec\022)\n\005no"
  "des\030\001 \003(\0132\023.flyteidl.core.NodeR\005nodes\022#\n"
  "\rmin_successes\030\002 \001(\003R\014minSuccesses\0220\n\007ou"
  "tputs\030\003 \003(\0132\026.flyteidl.core.BindingR\007out"
  "puts\0221\n\005tasks\030\004 \003(\0132\033.flyteidl.core.Task"
  "TemplateR\005tasks\022C\n\014subworkflows\030\005 \003(\0132\037."
  "flyteidl.core.WorkflowTemplateR\014subworkf"
  "lowsB\262\001\n\021com.flyteidl.coreB\017DynamicJobPr"
  "otoH\002Z4github.com/flyteorg/flyteidl/gen/"
  "pb-go/flyteidl/core\370\001\000\242\002\003FCX\252\002\rFlyteidl."
  "Core\312\002\rFlyteidl\\Core\342\002\031Flyteidl\\Core\\GPB"
  "Metadata\352\002\016Flyteidl::Coreb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flyteidl_2fcore_2fdynamic_5fjob_2eproto_deps[3] = {
  &::descriptor_table_flyteidl_2fcore_2fliterals_2eproto,
  &::descriptor_table_flyteidl_2fcore_2ftasks_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fworkflow_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fcore_2fdynamic_5fjob_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fcore_2fdynamic_5fjob_2eproto = {
  false, false, 593, descriptor_table_protodef_flyteidl_2fcore_2fdynamic_5fjob_2eproto, "flyteidl/core/dynamic_job.proto", 
  &descriptor_table_flyteidl_2fcore_2fdynamic_5fjob_2eproto_once, descriptor_table_flyteidl_2fcore_2fdynamic_5fjob_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_flyteidl_2fcore_2fdynamic_5fjob_2eproto::offsets,
  file_level_metadata_flyteidl_2fcore_2fdynamic_5fjob_2eproto, file_level_enum_descriptors_flyteidl_2fcore_2fdynamic_5fjob_2eproto, file_level_service_descriptors_flyteidl_2fcore_2fdynamic_5fjob_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fcore_2fdynamic_5fjob_2eproto_getter() {
  return &descriptor_table_flyteidl_2fcore_2fdynamic_5fjob_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fcore_2fdynamic_5fjob_2eproto(&descriptor_table_flyteidl_2fcore_2fdynamic_5fjob_2eproto);
namespace flyteidl {
namespace core {

// ===================================================================

class DynamicJobSpec::_Internal {
 public:
};

void DynamicJobSpec::clear_nodes() {
  nodes_.Clear();
}
void DynamicJobSpec::clear_outputs() {
  outputs_.Clear();
}
void DynamicJobSpec::clear_tasks() {
  tasks_.Clear();
}
void DynamicJobSpec::clear_subworkflows() {
  subworkflows_.Clear();
}
DynamicJobSpec::DynamicJobSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nodes_(arena),
  outputs_(arena),
  tasks_(arena),
  subworkflows_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.DynamicJobSpec)
}
DynamicJobSpec::DynamicJobSpec(const DynamicJobSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nodes_(from.nodes_),
      outputs_(from.outputs_),
      tasks_(from.tasks_),
      subworkflows_(from.subworkflows_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  min_successes_ = from.min_successes_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.DynamicJobSpec)
}

inline void DynamicJobSpec::SharedCtor() {
min_successes_ = int64_t{0};
}

DynamicJobSpec::~DynamicJobSpec() {
  // @@protoc_insertion_point(destructor:flyteidl.core.DynamicJobSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DynamicJobSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DynamicJobSpec::ArenaDtor(void* object) {
  DynamicJobSpec* _this = reinterpret_cast< DynamicJobSpec* >(object);
  (void)_this;
}
void DynamicJobSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DynamicJobSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DynamicJobSpec::InternalSwap(DynamicJobSpec* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata DynamicJobSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fdynamic_5fjob_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fdynamic_5fjob_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fdynamic_5fjob_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::core::DynamicJobSpec* Arena::CreateMaybeMessage< ::flyteidl::core::DynamicJobSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::DynamicJobSpec >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
