# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from flyteidl.admin import signal_pb2 as flyteidl_dot_admin_dot_signal__pb2


class SignalServiceStub(object):
  """TODO hamersaw - document
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.CreateSignal = channel.unary_unary(
        '/flyteidl.service.SignalService/CreateSignal',
        request_serializer=flyteidl_dot_admin_dot_signal__pb2.SignalCreateRequest.SerializeToString,
        response_deserializer=flyteidl_dot_admin_dot_signal__pb2.SignalCreateResponse.FromString,
        )
    self.GetSignal = channel.unary_unary(
        '/flyteidl.service.SignalService/GetSignal',
        request_serializer=flyteidl_dot_admin_dot_signal__pb2.SignalGetRequest.SerializeToString,
        response_deserializer=flyteidl_dot_admin_dot_signal__pb2.Signal.FromString,
        )


class SignalServiceServicer(object):
  """TODO hamersaw - document
  """

  def CreateSignal(self, request, context):
    """Create and upload a :ref:`ref_flyteidl.admin.Signal` definition
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetSignal(self, request, context):
    """Fetches a :ref:`ref_flyteidl.admin.Signal`.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SignalServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'CreateSignal': grpc.unary_unary_rpc_method_handler(
          servicer.CreateSignal,
          request_deserializer=flyteidl_dot_admin_dot_signal__pb2.SignalCreateRequest.FromString,
          response_serializer=flyteidl_dot_admin_dot_signal__pb2.SignalCreateResponse.SerializeToString,
      ),
      'GetSignal': grpc.unary_unary_rpc_method_handler(
          servicer.GetSignal,
          request_deserializer=flyteidl_dot_admin_dot_signal__pb2.SignalGetRequest.FromString,
          response_serializer=flyteidl_dot_admin_dot_signal__pb2.Signal.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'flyteidl.service.SignalService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
