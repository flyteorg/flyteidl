// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/waitable.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fplugins_2fwaitable_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fplugins_2fwaitable_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/execution.pb.h"
#include "flyteidl/core/identifier.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fwaitable_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fplugins_2fwaitable_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fplugins_2fwaitable_2eproto;
namespace flyteidl {
namespace plugins {
class Waitable;
struct WaitableDefaultTypeInternal;
extern WaitableDefaultTypeInternal _Waitable_default_instance_;
}  // namespace plugins
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::plugins::Waitable* Arena::CreateMaybeMessage<::flyteidl::plugins::Waitable>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace plugins {

// ===================================================================

class Waitable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.Waitable) */ {
 public:
  inline Waitable() : Waitable(nullptr) {}
  ~Waitable() override;
  explicit constexpr Waitable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Waitable(const Waitable& from);
  Waitable(Waitable&& from) noexcept
    : Waitable() {
    *this = ::std::move(from);
  }

  inline Waitable& operator=(const Waitable& from) {
    CopyFrom(from);
    return *this;
  }
  inline Waitable& operator=(Waitable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Waitable& default_instance() {
    return *internal_default_instance();
  }
  static inline const Waitable* internal_default_instance() {
    return reinterpret_cast<const Waitable*>(
               &_Waitable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Waitable& a, Waitable& b) {
    a.Swap(&b);
  }
  inline void Swap(Waitable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Waitable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Waitable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Waitable>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Waitable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.plugins.Waitable";
  }
  protected:
  explicit Waitable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkflowIdFieldNumber = 3,
    kWfExecIdFieldNumber = 1,
    kPhaseFieldNumber = 2,
  };
  // string workflow_id = 3 [json_name = "workflowId"];
  void clear_workflow_id();
  const std::string& workflow_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workflow_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workflow_id();
  PROTOBUF_NODISCARD std::string* release_workflow_id();
  void set_allocated_workflow_id(std::string* workflow_id);
  private:
  const std::string& _internal_workflow_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workflow_id(const std::string& value);
  std::string* _internal_mutable_workflow_id();
  public:

  // .flyteidl.core.WorkflowExecutionIdentifier wf_exec_id = 1 [json_name = "wfExecId"];
  bool has_wf_exec_id() const;
  private:
  bool _internal_has_wf_exec_id() const;
  public:
  void clear_wf_exec_id();
  const ::flyteidl::core::WorkflowExecutionIdentifier& wf_exec_id() const;
  PROTOBUF_NODISCARD ::flyteidl::core::WorkflowExecutionIdentifier* release_wf_exec_id();
  ::flyteidl::core::WorkflowExecutionIdentifier* mutable_wf_exec_id();
  void set_allocated_wf_exec_id(::flyteidl::core::WorkflowExecutionIdentifier* wf_exec_id);
  private:
  const ::flyteidl::core::WorkflowExecutionIdentifier& _internal_wf_exec_id() const;
  ::flyteidl::core::WorkflowExecutionIdentifier* _internal_mutable_wf_exec_id();
  public:
  void unsafe_arena_set_allocated_wf_exec_id(
      ::flyteidl::core::WorkflowExecutionIdentifier* wf_exec_id);
  ::flyteidl::core::WorkflowExecutionIdentifier* unsafe_arena_release_wf_exec_id();

  // .flyteidl.core.WorkflowExecution.Phase phase = 2 [json_name = "phase"];
  void clear_phase();
  ::flyteidl::core::WorkflowExecution_Phase phase() const;
  void set_phase(::flyteidl::core::WorkflowExecution_Phase value);
  private:
  ::flyteidl::core::WorkflowExecution_Phase _internal_phase() const;
  void _internal_set_phase(::flyteidl::core::WorkflowExecution_Phase value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.Waitable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_id_;
  ::flyteidl::core::WorkflowExecutionIdentifier* wf_exec_id_;
  int phase_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fwaitable_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Waitable

// .flyteidl.core.WorkflowExecutionIdentifier wf_exec_id = 1 [json_name = "wfExecId"];
inline bool Waitable::_internal_has_wf_exec_id() const {
  return this != internal_default_instance() && wf_exec_id_ != nullptr;
}
inline bool Waitable::has_wf_exec_id() const {
  return _internal_has_wf_exec_id();
}
inline const ::flyteidl::core::WorkflowExecutionIdentifier& Waitable::_internal_wf_exec_id() const {
  const ::flyteidl::core::WorkflowExecutionIdentifier* p = wf_exec_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::WorkflowExecutionIdentifier&>(
      ::flyteidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline const ::flyteidl::core::WorkflowExecutionIdentifier& Waitable::wf_exec_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.Waitable.wf_exec_id)
  return _internal_wf_exec_id();
}
inline void Waitable::unsafe_arena_set_allocated_wf_exec_id(
    ::flyteidl::core::WorkflowExecutionIdentifier* wf_exec_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wf_exec_id_);
  }
  wf_exec_id_ = wf_exec_id;
  if (wf_exec_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.plugins.Waitable.wf_exec_id)
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* Waitable::release_wf_exec_id() {
  
  ::flyteidl::core::WorkflowExecutionIdentifier* temp = wf_exec_id_;
  wf_exec_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* Waitable::unsafe_arena_release_wf_exec_id() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.Waitable.wf_exec_id)
  
  ::flyteidl::core::WorkflowExecutionIdentifier* temp = wf_exec_id_;
  wf_exec_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* Waitable::_internal_mutable_wf_exec_id() {
  
  if (wf_exec_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::WorkflowExecutionIdentifier>(GetArenaForAllocation());
    wf_exec_id_ = p;
  }
  return wf_exec_id_;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* Waitable::mutable_wf_exec_id() {
  ::flyteidl::core::WorkflowExecutionIdentifier* _msg = _internal_mutable_wf_exec_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.Waitable.wf_exec_id)
  return _msg;
}
inline void Waitable::set_allocated_wf_exec_id(::flyteidl::core::WorkflowExecutionIdentifier* wf_exec_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(wf_exec_id_);
  }
  if (wf_exec_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wf_exec_id));
    if (message_arena != submessage_arena) {
      wf_exec_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wf_exec_id, submessage_arena);
    }
    
  } else {
    
  }
  wf_exec_id_ = wf_exec_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.Waitable.wf_exec_id)
}

// .flyteidl.core.WorkflowExecution.Phase phase = 2 [json_name = "phase"];
inline void Waitable::clear_phase() {
  phase_ = 0;
}
inline ::flyteidl::core::WorkflowExecution_Phase Waitable::_internal_phase() const {
  return static_cast< ::flyteidl::core::WorkflowExecution_Phase >(phase_);
}
inline ::flyteidl::core::WorkflowExecution_Phase Waitable::phase() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.Waitable.phase)
  return _internal_phase();
}
inline void Waitable::_internal_set_phase(::flyteidl::core::WorkflowExecution_Phase value) {
  
  phase_ = value;
}
inline void Waitable::set_phase(::flyteidl::core::WorkflowExecution_Phase value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.Waitable.phase)
}

// string workflow_id = 3 [json_name = "workflowId"];
inline void Waitable::clear_workflow_id() {
  workflow_id_.ClearToEmpty();
}
inline const std::string& Waitable::workflow_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.Waitable.workflow_id)
  return _internal_workflow_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Waitable::set_workflow_id(ArgT0&& arg0, ArgT... args) {
 
 workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.plugins.Waitable.workflow_id)
}
inline std::string* Waitable::mutable_workflow_id() {
  std::string* _s = _internal_mutable_workflow_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.Waitable.workflow_id)
  return _s;
}
inline const std::string& Waitable::_internal_workflow_id() const {
  return workflow_id_.Get();
}
inline void Waitable::_internal_set_workflow_id(const std::string& value) {
  
  workflow_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Waitable::_internal_mutable_workflow_id() {
  
  return workflow_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Waitable::release_workflow_id() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.Waitable.workflow_id)
  return workflow_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Waitable::set_allocated_workflow_id(std::string* workflow_id) {
  if (workflow_id != nullptr) {
    
  } else {
    
  }
  workflow_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (workflow_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    workflow_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.Waitable.workflow_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace plugins
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fplugins_2fwaitable_2eproto
