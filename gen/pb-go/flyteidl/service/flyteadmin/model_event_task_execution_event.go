/*
 * flyteidl/service/admin.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: version not set
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package flyteadmin

import (
	"time"
)

// Plugin specific execution event information. For tasks like Python, Hive, Spark, DynamicJob.
type EventTaskExecutionEvent struct {
	// ID of the task. In combination with the retryAttempt this will indicate the task execution uniquely for a given parent node execution.
	TaskId *CoreIdentifier `json:"task_id,omitempty"`
	ParentNodeExecutionId *CoreNodeExecutionIdentifier `json:"parent_node_execution_id,omitempty"`
	RetryAttempt int64 `json:"retry_attempt,omitempty"`
	Phase *CoreTaskExecutionPhase `json:"phase,omitempty"`
	ProducerId string `json:"producer_id,omitempty"`
	Logs []CoreTaskLog `json:"logs,omitempty"`
	// This timestamp represents when the original event occurred, it is generated by the executor of the task.
	OccurredAt time.Time `json:"occurred_at,omitempty"`
	// URI of the input file, it encodes all the information including Cloud source provider. ie., s3://...
	InputUri string `json:"input_uri,omitempty"`
	// Raw input data consumed by this task execution.
	InputData *CoreLiteralMap `json:"input_data,omitempty"`
	// URI to the output of the execution, it will be in a format that encodes all the information including Cloud source provider. ie., s3://...
	OutputUri string `json:"output_uri,omitempty"`
	Error_ *CoreExecutionError `json:"error,omitempty"`
	// Raw output data produced by this task execution.
	OutputData *CoreLiteralMap `json:"output_data,omitempty"`
	// Custom data that the task plugin sends back. This is extensible to allow various plugins in the system.
	CustomInfo *ProtobufStruct `json:"custom_info,omitempty"`
	// Some phases, like RUNNING, can send multiple events with changed metadata (new logs, additional custom_info, etc) that should be recorded regardless of the lack of phase change. The version field should be incremented when metadata changes across the duration of an individual phase.
	PhaseVersion int64 `json:"phase_version,omitempty"`
	// An optional explanation for the phase transition.
	Reason string `json:"reason,omitempty"`
	// A predefined yet extensible Task type identifier. If the task definition is already registered in flyte admin this type will be identical, but not all task executions necessarily use pre-registered definitions and this type is useful to render the task in the UI, filter task executions, etc.
	TaskType string `json:"task_type,omitempty"`
	// Metadata around how a task was executed.
	Metadata *EventTaskExecutionMetadata `json:"metadata,omitempty"`
	// The event version is used to indicate versioned changes in how data is reported using this proto message. For example, event_verison > 0 means that maps tasks report logs using the TaskExecutionMetadata ExternalResourceInfo fields for each subtask rather than the TaskLog in this message.
	EventVersion int32 `json:"event_version,omitempty"`
	// This timestamp represents the instant when the event was reported by the executing framework. For example, a k8s pod task may be marked completed at (ie. `occurred_at`) the instant the container running user code completes, but this event will not be reported until the pod is marked as completed. Extracting both of these timestamps facilitates a more accurate portrayal of the evaluation time-series.
	ReportedAt time.Time `json:"reported_at,omitempty"`
}
