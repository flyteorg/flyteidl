// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: flyteidl/service/signal.proto

#include "flyteidl/service/signal.pb.h"
#include "flyteidl/service/signal.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace flyteidl {
namespace service {

static const char* SignalService_method_names[] = {
  "/flyteidl.service.SignalService/GetOrCreateSignal",
  "/flyteidl.service.SignalService/ListSignals",
  "/flyteidl.service.SignalService/SetSignal",
};

std::unique_ptr< SignalService::Stub> SignalService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SignalService::Stub> stub(new SignalService::Stub(channel));
  return stub;
}

SignalService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetOrCreateSignal_(SignalService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListSignals_(SignalService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSignal_(SignalService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SignalService::Stub::GetOrCreateSignal(::grpc::ClientContext* context, const ::flyteidl::admin::SignalGetOrCreateRequest& request, ::flyteidl::admin::Signal* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetOrCreateSignal_, context, request, response);
}

void SignalService::Stub::experimental_async::GetOrCreateSignal(::grpc::ClientContext* context, const ::flyteidl::admin::SignalGetOrCreateRequest* request, ::flyteidl::admin::Signal* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetOrCreateSignal_, context, request, response, std::move(f));
}

void SignalService::Stub::experimental_async::GetOrCreateSignal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::Signal* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetOrCreateSignal_, context, request, response, std::move(f));
}

void SignalService::Stub::experimental_async::GetOrCreateSignal(::grpc::ClientContext* context, const ::flyteidl::admin::SignalGetOrCreateRequest* request, ::flyteidl::admin::Signal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetOrCreateSignal_, context, request, response, reactor);
}

void SignalService::Stub::experimental_async::GetOrCreateSignal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::Signal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetOrCreateSignal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::Signal>* SignalService::Stub::AsyncGetOrCreateSignalRaw(::grpc::ClientContext* context, const ::flyteidl::admin::SignalGetOrCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::Signal>::Create(channel_.get(), cq, rpcmethod_GetOrCreateSignal_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::Signal>* SignalService::Stub::PrepareAsyncGetOrCreateSignalRaw(::grpc::ClientContext* context, const ::flyteidl::admin::SignalGetOrCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::Signal>::Create(channel_.get(), cq, rpcmethod_GetOrCreateSignal_, context, request, false);
}

::grpc::Status SignalService::Stub::ListSignals(::grpc::ClientContext* context, const ::flyteidl::admin::SignalListRequest& request, ::flyteidl::admin::SignalList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListSignals_, context, request, response);
}

void SignalService::Stub::experimental_async::ListSignals(::grpc::ClientContext* context, const ::flyteidl::admin::SignalListRequest* request, ::flyteidl::admin::SignalList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListSignals_, context, request, response, std::move(f));
}

void SignalService::Stub::experimental_async::ListSignals(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::SignalList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListSignals_, context, request, response, std::move(f));
}

void SignalService::Stub::experimental_async::ListSignals(::grpc::ClientContext* context, const ::flyteidl::admin::SignalListRequest* request, ::flyteidl::admin::SignalList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListSignals_, context, request, response, reactor);
}

void SignalService::Stub::experimental_async::ListSignals(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::SignalList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListSignals_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::SignalList>* SignalService::Stub::AsyncListSignalsRaw(::grpc::ClientContext* context, const ::flyteidl::admin::SignalListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::SignalList>::Create(channel_.get(), cq, rpcmethod_ListSignals_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::SignalList>* SignalService::Stub::PrepareAsyncListSignalsRaw(::grpc::ClientContext* context, const ::flyteidl::admin::SignalListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::SignalList>::Create(channel_.get(), cq, rpcmethod_ListSignals_, context, request, false);
}

::grpc::Status SignalService::Stub::SetSignal(::grpc::ClientContext* context, const ::flyteidl::admin::SignalSetRequest& request, ::flyteidl::admin::SignalSetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetSignal_, context, request, response);
}

void SignalService::Stub::experimental_async::SetSignal(::grpc::ClientContext* context, const ::flyteidl::admin::SignalSetRequest* request, ::flyteidl::admin::SignalSetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetSignal_, context, request, response, std::move(f));
}

void SignalService::Stub::experimental_async::SetSignal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::SignalSetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetSignal_, context, request, response, std::move(f));
}

void SignalService::Stub::experimental_async::SetSignal(::grpc::ClientContext* context, const ::flyteidl::admin::SignalSetRequest* request, ::flyteidl::admin::SignalSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetSignal_, context, request, response, reactor);
}

void SignalService::Stub::experimental_async::SetSignal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::SignalSetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetSignal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::SignalSetResponse>* SignalService::Stub::AsyncSetSignalRaw(::grpc::ClientContext* context, const ::flyteidl::admin::SignalSetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::SignalSetResponse>::Create(channel_.get(), cq, rpcmethod_SetSignal_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::SignalSetResponse>* SignalService::Stub::PrepareAsyncSetSignalRaw(::grpc::ClientContext* context, const ::flyteidl::admin::SignalSetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::SignalSetResponse>::Create(channel_.get(), cq, rpcmethod_SetSignal_, context, request, false);
}

SignalService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SignalService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SignalService::Service, ::flyteidl::admin::SignalGetOrCreateRequest, ::flyteidl::admin::Signal>(
          std::mem_fn(&SignalService::Service::GetOrCreateSignal), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SignalService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SignalService::Service, ::flyteidl::admin::SignalListRequest, ::flyteidl::admin::SignalList>(
          std::mem_fn(&SignalService::Service::ListSignals), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SignalService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SignalService::Service, ::flyteidl::admin::SignalSetRequest, ::flyteidl::admin::SignalSetResponse>(
          std::mem_fn(&SignalService::Service::SetSignal), this)));
}

SignalService::Service::~Service() {
}

::grpc::Status SignalService::Service::GetOrCreateSignal(::grpc::ServerContext* context, const ::flyteidl::admin::SignalGetOrCreateRequest* request, ::flyteidl::admin::Signal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SignalService::Service::ListSignals(::grpc::ServerContext* context, const ::flyteidl::admin::SignalListRequest* request, ::flyteidl::admin::SignalList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SignalService::Service::SetSignal(::grpc::ServerContext* context, const ::flyteidl::admin::SignalSetRequest* request, ::flyteidl::admin::SignalSetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace flyteidl
}  // namespace service

