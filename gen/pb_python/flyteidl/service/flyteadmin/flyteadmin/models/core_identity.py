# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyteadmin.models.core_o_auth2_client import CoreOAuth2Client  # noqa: F401,E501


class CoreIdentity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'iam_role': 'str',
        'k8s_service_account': 'str',
        'oauth2_client': 'CoreOAuth2Client'
    }

    attribute_map = {
        'iam_role': 'iam_role',
        'k8s_service_account': 'k8s_service_account',
        'oauth2_client': 'oauth2_client'
    }

    def __init__(self, iam_role=None, k8s_service_account=None, oauth2_client=None):  # noqa: E501
        """CoreIdentity - a model defined in Swagger"""  # noqa: E501

        self._iam_role = None
        self._k8s_service_account = None
        self._oauth2_client = None
        self.discriminator = None

        if iam_role is not None:
            self.iam_role = iam_role
        if k8s_service_account is not None:
            self.k8s_service_account = k8s_service_account
        if oauth2_client is not None:
            self.oauth2_client = oauth2_client

    @property
    def iam_role(self):
        """Gets the iam_role of this CoreIdentity.  # noqa: E501

        iam_role references the fully qualified name of Identity & Access Management role to impersonate.  # noqa: E501

        :return: The iam_role of this CoreIdentity.  # noqa: E501
        :rtype: str
        """
        return self._iam_role

    @iam_role.setter
    def iam_role(self, iam_role):
        """Sets the iam_role of this CoreIdentity.

        iam_role references the fully qualified name of Identity & Access Management role to impersonate.  # noqa: E501

        :param iam_role: The iam_role of this CoreIdentity.  # noqa: E501
        :type: str
        """

        self._iam_role = iam_role

    @property
    def k8s_service_account(self):
        """Gets the k8s_service_account of this CoreIdentity.  # noqa: E501

        k8s_service_account references a kubernetes service account to impersonate.  # noqa: E501

        :return: The k8s_service_account of this CoreIdentity.  # noqa: E501
        :rtype: str
        """
        return self._k8s_service_account

    @k8s_service_account.setter
    def k8s_service_account(self, k8s_service_account):
        """Sets the k8s_service_account of this CoreIdentity.

        k8s_service_account references a kubernetes service account to impersonate.  # noqa: E501

        :param k8s_service_account: The k8s_service_account of this CoreIdentity.  # noqa: E501
        :type: str
        """

        self._k8s_service_account = k8s_service_account

    @property
    def oauth2_client(self):
        """Gets the oauth2_client of this CoreIdentity.  # noqa: E501

        oauth2_client references an oauth2 client. Backend plugins can use this information to impersonate the client when making external calls.  # noqa: E501

        :return: The oauth2_client of this CoreIdentity.  # noqa: E501
        :rtype: CoreOAuth2Client
        """
        return self._oauth2_client

    @oauth2_client.setter
    def oauth2_client(self, oauth2_client):
        """Sets the oauth2_client of this CoreIdentity.

        oauth2_client references an oauth2 client. Backend plugins can use this information to impersonate the client when making external calls.  # noqa: E501

        :param oauth2_client: The oauth2_client of this CoreIdentity.  # noqa: E501
        :type: CoreOAuth2Client
        """

        self._oauth2_client = oauth2_client

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoreIdentity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreIdentity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
