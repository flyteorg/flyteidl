// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/service/auth.proto

#include "flyteidl/service/auth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace flyteidl {
namespace service {
class OAuth2MetadataRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OAuth2MetadataRequest> _instance;
} _OAuth2MetadataRequest_default_instance_;
class OAuth2MetadataResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OAuth2MetadataResponse> _instance;
} _OAuth2MetadataResponse_default_instance_;
class FlyteClientRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlyteClientRequest> _instance;
} _FlyteClientRequest_default_instance_;
class FlyteClientResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlyteClientResponse> _instance;
} _FlyteClientResponse_default_instance_;
}  // namespace service
}  // namespace flyteidl
static void InitDefaultsOAuth2MetadataRequest_flyteidl_2fservice_2fauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::service::_OAuth2MetadataRequest_default_instance_;
    new (ptr) ::flyteidl::service::OAuth2MetadataRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::service::OAuth2MetadataRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OAuth2MetadataRequest_flyteidl_2fservice_2fauth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOAuth2MetadataRequest_flyteidl_2fservice_2fauth_2eproto}, {}};

static void InitDefaultsOAuth2MetadataResponse_flyteidl_2fservice_2fauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::service::_OAuth2MetadataResponse_default_instance_;
    new (ptr) ::flyteidl::service::OAuth2MetadataResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::service::OAuth2MetadataResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OAuth2MetadataResponse_flyteidl_2fservice_2fauth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOAuth2MetadataResponse_flyteidl_2fservice_2fauth_2eproto}, {}};

static void InitDefaultsFlyteClientRequest_flyteidl_2fservice_2fauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::service::_FlyteClientRequest_default_instance_;
    new (ptr) ::flyteidl::service::FlyteClientRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::service::FlyteClientRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FlyteClientRequest_flyteidl_2fservice_2fauth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFlyteClientRequest_flyteidl_2fservice_2fauth_2eproto}, {}};

static void InitDefaultsFlyteClientResponse_flyteidl_2fservice_2fauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::service::_FlyteClientResponse_default_instance_;
    new (ptr) ::flyteidl::service::FlyteClientResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::service::FlyteClientResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FlyteClientResponse_flyteidl_2fservice_2fauth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFlyteClientResponse_flyteidl_2fservice_2fauth_2eproto}, {}};

void InitDefaults_flyteidl_2fservice_2fauth_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_OAuth2MetadataRequest_flyteidl_2fservice_2fauth_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OAuth2MetadataResponse_flyteidl_2fservice_2fauth_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlyteClientRequest_flyteidl_2fservice_2fauth_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FlyteClientResponse_flyteidl_2fservice_2fauth_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fservice_2fauth_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fservice_2fauth_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fservice_2fauth_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fservice_2fauth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::service::OAuth2MetadataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::service::OAuth2MetadataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::service::OAuth2MetadataResponse, issuer_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::service::OAuth2MetadataResponse, authorization_endpoint_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::service::OAuth2MetadataResponse, token_endpoint_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::service::OAuth2MetadataResponse, response_types_supported_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::service::OAuth2MetadataResponse, scopes_supported_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::service::OAuth2MetadataResponse, token_endpoint_auth_methods_supported_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::service::OAuth2MetadataResponse, jwks_uri_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::service::OAuth2MetadataResponse, code_challenge_methods_supported_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::service::OAuth2MetadataResponse, grant_types_supported_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::service::FlyteClientRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::service::FlyteClientResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::service::FlyteClientResponse, client_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::service::FlyteClientResponse, redirect_uri_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::service::FlyteClientResponse, scopes_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::service::FlyteClientResponse, authorization_metadata_key_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::service::OAuth2MetadataRequest)},
  { 5, -1, sizeof(::flyteidl::service::OAuth2MetadataResponse)},
  { 19, -1, sizeof(::flyteidl::service::FlyteClientRequest)},
  { 24, -1, sizeof(::flyteidl::service::FlyteClientResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::service::_OAuth2MetadataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::service::_OAuth2MetadataResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::service::_FlyteClientRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::service::_FlyteClientResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fservice_2fauth_2eproto = {
  {}, AddDescriptors_flyteidl_2fservice_2fauth_2eproto, "flyteidl/service/auth.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fservice_2fauth_2eproto::offsets,
  file_level_metadata_flyteidl_2fservice_2fauth_2eproto, 4, file_level_enum_descriptors_flyteidl_2fservice_2fauth_2eproto, file_level_service_descriptors_flyteidl_2fservice_2fauth_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fservice_2fauth_2eproto[] =
  "\n\033flyteidl/service/auth.proto\022\020flyteidl."
  "service\032\034google/api/annotations.proto\032\034f"
  "lyteidl/admin/project.proto\032.flyteidl/ad"
  "min/project_domain_attributes.proto\032\031fly"
  "teidl/admin/task.proto\032\035flyteidl/admin/w"
  "orkflow.proto\032(flyteidl/admin/workflow_a"
  "ttributes.proto\032 flyteidl/admin/launch_p"
  "lan.proto\032\032flyteidl/admin/event.proto\032\036f"
  "lyteidl/admin/execution.proto\032\'flyteidl/"
  "admin/matchable_resource.proto\032#flyteidl"
  "/admin/node_execution.proto\032#flyteidl/ad"
  "min/task_execution.proto\032\034flyteidl/admin"
  "/version.proto\032\033flyteidl/admin/common.pr"
  "oto\032,protoc-gen-swagger/options/annotati"
  "ons.proto\"\027\n\025OAuth2MetadataRequest\"\246\002\n\026O"
  "Auth2MetadataResponse\022\016\n\006issuer\030\001 \001(\t\022\036\n"
  "\026authorization_endpoint\030\002 \001(\t\022\026\n\016token_e"
  "ndpoint\030\003 \001(\t\022 \n\030response_types_supporte"
  "d\030\004 \003(\t\022\030\n\020scopes_supported\030\005 \003(\t\022-\n%tok"
  "en_endpoint_auth_methods_supported\030\006 \003(\t"
  "\022\020\n\010jwks_uri\030\007 \001(\t\022(\n code_challenge_met"
  "hods_supported\030\010 \003(\t\022\035\n\025grant_types_supp"
  "orted\030\t \003(\t\"\024\n\022FlyteClientRequest\"r\n\023Fly"
  "teClientResponse\022\021\n\tclient_id\030\001 \001(\t\022\024\n\014r"
  "edirect_uri\030\002 \001(\t\022\016\n\006scopes\030\003 \003(\t\022\"\n\032aut"
  "horization_metadata_key\030\004 \001(\t2\331\003\n\023AuthMe"
  "tadataService\022\362\001\n\016OAuth2Metadata\022\'.flyte"
  "idl.service.OAuth2MetadataRequest\032(.flyt"
  "eidl.service.OAuth2MetadataResponse\"\214\001\202\323"
  "\344\223\002)\022\'/.well-known/oauth-authorization-s"
  "erver\222AZ\032XRetrieves OAuth2 authorization"
  " server metadata. This endpoint is anony"
  "mously accessible.\022\314\001\n\013FlyteClient\022$.fly"
  "teidl.service.FlyteClientRequest\032%.flyte"
  "idl.service.FlyteClientResponse\"p\202\323\344\223\002\031\022"
  "\027/config/v1/flyte_client\222AN\032LRetrieves p"
  "ublic flyte client info. This endpoint i"
  "s anonymously accessible.B9Z7github.com/"
  "flyteorg/flyteidl/gen/pb-go/flyteidl/ser"
  "viceb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fservice_2fauth_2eproto = {
  false, InitDefaults_flyteidl_2fservice_2fauth_2eproto, 
  descriptor_table_protodef_flyteidl_2fservice_2fauth_2eproto,
  "flyteidl/service/auth.proto", &assign_descriptors_table_flyteidl_2fservice_2fauth_2eproto, 1572,
};

void AddDescriptors_flyteidl_2fservice_2fauth_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[15] =
  {
    ::AddDescriptors_google_2fapi_2fannotations_2eproto,
    ::AddDescriptors_flyteidl_2fadmin_2fproject_2eproto,
    ::AddDescriptors_flyteidl_2fadmin_2fproject_5fdomain_5fattributes_2eproto,
    ::AddDescriptors_flyteidl_2fadmin_2ftask_2eproto,
    ::AddDescriptors_flyteidl_2fadmin_2fworkflow_2eproto,
    ::AddDescriptors_flyteidl_2fadmin_2fworkflow_5fattributes_2eproto,
    ::AddDescriptors_flyteidl_2fadmin_2flaunch_5fplan_2eproto,
    ::AddDescriptors_flyteidl_2fadmin_2fevent_2eproto,
    ::AddDescriptors_flyteidl_2fadmin_2fexecution_2eproto,
    ::AddDescriptors_flyteidl_2fadmin_2fmatchable_5fresource_2eproto,
    ::AddDescriptors_flyteidl_2fadmin_2fnode_5fexecution_2eproto,
    ::AddDescriptors_flyteidl_2fadmin_2ftask_5fexecution_2eproto,
    ::AddDescriptors_flyteidl_2fadmin_2fversion_2eproto,
    ::AddDescriptors_flyteidl_2fadmin_2fcommon_2eproto,
    ::AddDescriptors_protoc_2dgen_2dswagger_2foptions_2fannotations_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fservice_2fauth_2eproto, deps, 15);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fservice_2fauth_2eproto = []() { AddDescriptors_flyteidl_2fservice_2fauth_2eproto(); return true; }();
namespace flyteidl {
namespace service {

// ===================================================================

void OAuth2MetadataRequest::InitAsDefaultInstance() {
}
class OAuth2MetadataRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OAuth2MetadataRequest::OAuth2MetadataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.service.OAuth2MetadataRequest)
}
OAuth2MetadataRequest::OAuth2MetadataRequest(const OAuth2MetadataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.service.OAuth2MetadataRequest)
}

void OAuth2MetadataRequest::SharedCtor() {
}

OAuth2MetadataRequest::~OAuth2MetadataRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.service.OAuth2MetadataRequest)
  SharedDtor();
}

void OAuth2MetadataRequest::SharedDtor() {
}

void OAuth2MetadataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OAuth2MetadataRequest& OAuth2MetadataRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OAuth2MetadataRequest_flyteidl_2fservice_2fauth_2eproto.base);
  return *internal_default_instance();
}


void OAuth2MetadataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.service.OAuth2MetadataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OAuth2MetadataRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OAuth2MetadataRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OAuth2MetadataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.service.OAuth2MetadataRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.service.OAuth2MetadataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.service.OAuth2MetadataRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OAuth2MetadataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.service.OAuth2MetadataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.service.OAuth2MetadataRequest)
}

::google::protobuf::uint8* OAuth2MetadataRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.service.OAuth2MetadataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.service.OAuth2MetadataRequest)
  return target;
}

size_t OAuth2MetadataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.service.OAuth2MetadataRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OAuth2MetadataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.service.OAuth2MetadataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OAuth2MetadataRequest* source =
      ::google::protobuf::DynamicCastToGenerated<OAuth2MetadataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.service.OAuth2MetadataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.service.OAuth2MetadataRequest)
    MergeFrom(*source);
  }
}

void OAuth2MetadataRequest::MergeFrom(const OAuth2MetadataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.service.OAuth2MetadataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void OAuth2MetadataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.service.OAuth2MetadataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OAuth2MetadataRequest::CopyFrom(const OAuth2MetadataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.service.OAuth2MetadataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OAuth2MetadataRequest::IsInitialized() const {
  return true;
}

void OAuth2MetadataRequest::Swap(OAuth2MetadataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OAuth2MetadataRequest::InternalSwap(OAuth2MetadataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OAuth2MetadataRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fservice_2fauth_2eproto);
  return ::file_level_metadata_flyteidl_2fservice_2fauth_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OAuth2MetadataResponse::InitAsDefaultInstance() {
}
class OAuth2MetadataResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OAuth2MetadataResponse::kIssuerFieldNumber;
const int OAuth2MetadataResponse::kAuthorizationEndpointFieldNumber;
const int OAuth2MetadataResponse::kTokenEndpointFieldNumber;
const int OAuth2MetadataResponse::kResponseTypesSupportedFieldNumber;
const int OAuth2MetadataResponse::kScopesSupportedFieldNumber;
const int OAuth2MetadataResponse::kTokenEndpointAuthMethodsSupportedFieldNumber;
const int OAuth2MetadataResponse::kJwksUriFieldNumber;
const int OAuth2MetadataResponse::kCodeChallengeMethodsSupportedFieldNumber;
const int OAuth2MetadataResponse::kGrantTypesSupportedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OAuth2MetadataResponse::OAuth2MetadataResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.service.OAuth2MetadataResponse)
}
OAuth2MetadataResponse::OAuth2MetadataResponse(const OAuth2MetadataResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      response_types_supported_(from.response_types_supported_),
      scopes_supported_(from.scopes_supported_),
      token_endpoint_auth_methods_supported_(from.token_endpoint_auth_methods_supported_),
      code_challenge_methods_supported_(from.code_challenge_methods_supported_),
      grant_types_supported_(from.grant_types_supported_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  issuer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.issuer().size() > 0) {
    issuer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issuer_);
  }
  authorization_endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.authorization_endpoint().size() > 0) {
    authorization_endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authorization_endpoint_);
  }
  token_endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token_endpoint().size() > 0) {
    token_endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_endpoint_);
  }
  jwks_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.jwks_uri().size() > 0) {
    jwks_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jwks_uri_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.service.OAuth2MetadataResponse)
}

void OAuth2MetadataResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OAuth2MetadataResponse_flyteidl_2fservice_2fauth_2eproto.base);
  issuer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authorization_endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jwks_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OAuth2MetadataResponse::~OAuth2MetadataResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.service.OAuth2MetadataResponse)
  SharedDtor();
}

void OAuth2MetadataResponse::SharedDtor() {
  issuer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authorization_endpoint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_endpoint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jwks_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OAuth2MetadataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OAuth2MetadataResponse& OAuth2MetadataResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OAuth2MetadataResponse_flyteidl_2fservice_2fauth_2eproto.base);
  return *internal_default_instance();
}


void OAuth2MetadataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.service.OAuth2MetadataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_types_supported_.Clear();
  scopes_supported_.Clear();
  token_endpoint_auth_methods_supported_.Clear();
  code_challenge_methods_supported_.Clear();
  grant_types_supported_.Clear();
  issuer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authorization_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jwks_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OAuth2MetadataResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OAuth2MetadataResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string issuer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.service.OAuth2MetadataResponse.issuer");
        object = msg->mutable_issuer();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string authorization_endpoint = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.service.OAuth2MetadataResponse.authorization_endpoint");
        object = msg->mutable_authorization_endpoint();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string token_endpoint = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.service.OAuth2MetadataResponse.token_endpoint");
        object = msg->mutable_token_endpoint();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string response_types_supported = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("flyteidl.service.OAuth2MetadataResponse.response_types_supported");
          object = msg->add_response_types_supported();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated string scopes_supported = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("flyteidl.service.OAuth2MetadataResponse.scopes_supported");
          object = msg->add_scopes_supported();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // repeated string token_endpoint_auth_methods_supported = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported");
          object = msg->add_token_endpoint_auth_methods_supported();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // string jwks_uri = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.service.OAuth2MetadataResponse.jwks_uri");
        object = msg->mutable_jwks_uri();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string code_challenge_methods_supported = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported");
          object = msg->add_code_challenge_methods_supported();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 66 && (ptr += 1));
        break;
      }
      // repeated string grant_types_supported = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("flyteidl.service.OAuth2MetadataResponse.grant_types_supported");
          object = msg->add_grant_types_supported();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 74 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OAuth2MetadataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.service.OAuth2MetadataResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string issuer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_issuer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->issuer().data(), static_cast<int>(this->issuer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.service.OAuth2MetadataResponse.issuer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string authorization_endpoint = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authorization_endpoint()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->authorization_endpoint().data(), static_cast<int>(this->authorization_endpoint().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.service.OAuth2MetadataResponse.authorization_endpoint"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token_endpoint = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token_endpoint()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token_endpoint().data(), static_cast<int>(this->token_endpoint().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.service.OAuth2MetadataResponse.token_endpoint"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string response_types_supported = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_response_types_supported()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->response_types_supported(this->response_types_supported_size() - 1).data(),
            static_cast<int>(this->response_types_supported(this->response_types_supported_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.service.OAuth2MetadataResponse.response_types_supported"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string scopes_supported = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_scopes_supported()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->scopes_supported(this->scopes_supported_size() - 1).data(),
            static_cast<int>(this->scopes_supported(this->scopes_supported_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.service.OAuth2MetadataResponse.scopes_supported"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string token_endpoint_auth_methods_supported = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_token_endpoint_auth_methods_supported()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token_endpoint_auth_methods_supported(this->token_endpoint_auth_methods_supported_size() - 1).data(),
            static_cast<int>(this->token_endpoint_auth_methods_supported(this->token_endpoint_auth_methods_supported_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string jwks_uri = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jwks_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->jwks_uri().data(), static_cast<int>(this->jwks_uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.service.OAuth2MetadataResponse.jwks_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string code_challenge_methods_supported = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_code_challenge_methods_supported()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->code_challenge_methods_supported(this->code_challenge_methods_supported_size() - 1).data(),
            static_cast<int>(this->code_challenge_methods_supported(this->code_challenge_methods_supported_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string grant_types_supported = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_grant_types_supported()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->grant_types_supported(this->grant_types_supported_size() - 1).data(),
            static_cast<int>(this->grant_types_supported(this->grant_types_supported_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.service.OAuth2MetadataResponse.grant_types_supported"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.service.OAuth2MetadataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.service.OAuth2MetadataResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OAuth2MetadataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.service.OAuth2MetadataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string issuer = 1;
  if (this->issuer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->issuer().data(), static_cast<int>(this->issuer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.service.OAuth2MetadataResponse.issuer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->issuer(), output);
  }

  // string authorization_endpoint = 2;
  if (this->authorization_endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->authorization_endpoint().data(), static_cast<int>(this->authorization_endpoint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.service.OAuth2MetadataResponse.authorization_endpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->authorization_endpoint(), output);
  }

  // string token_endpoint = 3;
  if (this->token_endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token_endpoint().data(), static_cast<int>(this->token_endpoint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.service.OAuth2MetadataResponse.token_endpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token_endpoint(), output);
  }

  // repeated string response_types_supported = 4;
  for (int i = 0, n = this->response_types_supported_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response_types_supported(i).data(), static_cast<int>(this->response_types_supported(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.service.OAuth2MetadataResponse.response_types_supported");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->response_types_supported(i), output);
  }

  // repeated string scopes_supported = 5;
  for (int i = 0, n = this->scopes_supported_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scopes_supported(i).data(), static_cast<int>(this->scopes_supported(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.service.OAuth2MetadataResponse.scopes_supported");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->scopes_supported(i), output);
  }

  // repeated string token_endpoint_auth_methods_supported = 6;
  for (int i = 0, n = this->token_endpoint_auth_methods_supported_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token_endpoint_auth_methods_supported(i).data(), static_cast<int>(this->token_endpoint_auth_methods_supported(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->token_endpoint_auth_methods_supported(i), output);
  }

  // string jwks_uri = 7;
  if (this->jwks_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jwks_uri().data(), static_cast<int>(this->jwks_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.service.OAuth2MetadataResponse.jwks_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->jwks_uri(), output);
  }

  // repeated string code_challenge_methods_supported = 8;
  for (int i = 0, n = this->code_challenge_methods_supported_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code_challenge_methods_supported(i).data(), static_cast<int>(this->code_challenge_methods_supported(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->code_challenge_methods_supported(i), output);
  }

  // repeated string grant_types_supported = 9;
  for (int i = 0, n = this->grant_types_supported_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->grant_types_supported(i).data(), static_cast<int>(this->grant_types_supported(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.service.OAuth2MetadataResponse.grant_types_supported");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->grant_types_supported(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.service.OAuth2MetadataResponse)
}

::google::protobuf::uint8* OAuth2MetadataResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.service.OAuth2MetadataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string issuer = 1;
  if (this->issuer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->issuer().data(), static_cast<int>(this->issuer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.service.OAuth2MetadataResponse.issuer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->issuer(), target);
  }

  // string authorization_endpoint = 2;
  if (this->authorization_endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->authorization_endpoint().data(), static_cast<int>(this->authorization_endpoint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.service.OAuth2MetadataResponse.authorization_endpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->authorization_endpoint(), target);
  }

  // string token_endpoint = 3;
  if (this->token_endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token_endpoint().data(), static_cast<int>(this->token_endpoint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.service.OAuth2MetadataResponse.token_endpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token_endpoint(), target);
  }

  // repeated string response_types_supported = 4;
  for (int i = 0, n = this->response_types_supported_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response_types_supported(i).data(), static_cast<int>(this->response_types_supported(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.service.OAuth2MetadataResponse.response_types_supported");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->response_types_supported(i), target);
  }

  // repeated string scopes_supported = 5;
  for (int i = 0, n = this->scopes_supported_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scopes_supported(i).data(), static_cast<int>(this->scopes_supported(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.service.OAuth2MetadataResponse.scopes_supported");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->scopes_supported(i), target);
  }

  // repeated string token_endpoint_auth_methods_supported = 6;
  for (int i = 0, n = this->token_endpoint_auth_methods_supported_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token_endpoint_auth_methods_supported(i).data(), static_cast<int>(this->token_endpoint_auth_methods_supported(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->token_endpoint_auth_methods_supported(i), target);
  }

  // string jwks_uri = 7;
  if (this->jwks_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jwks_uri().data(), static_cast<int>(this->jwks_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.service.OAuth2MetadataResponse.jwks_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->jwks_uri(), target);
  }

  // repeated string code_challenge_methods_supported = 8;
  for (int i = 0, n = this->code_challenge_methods_supported_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code_challenge_methods_supported(i).data(), static_cast<int>(this->code_challenge_methods_supported(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->code_challenge_methods_supported(i), target);
  }

  // repeated string grant_types_supported = 9;
  for (int i = 0, n = this->grant_types_supported_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->grant_types_supported(i).data(), static_cast<int>(this->grant_types_supported(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.service.OAuth2MetadataResponse.grant_types_supported");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->grant_types_supported(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.service.OAuth2MetadataResponse)
  return target;
}

size_t OAuth2MetadataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.service.OAuth2MetadataResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string response_types_supported = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->response_types_supported_size());
  for (int i = 0, n = this->response_types_supported_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->response_types_supported(i));
  }

  // repeated string scopes_supported = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->scopes_supported_size());
  for (int i = 0, n = this->scopes_supported_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->scopes_supported(i));
  }

  // repeated string token_endpoint_auth_methods_supported = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->token_endpoint_auth_methods_supported_size());
  for (int i = 0, n = this->token_endpoint_auth_methods_supported_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->token_endpoint_auth_methods_supported(i));
  }

  // repeated string code_challenge_methods_supported = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->code_challenge_methods_supported_size());
  for (int i = 0, n = this->code_challenge_methods_supported_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->code_challenge_methods_supported(i));
  }

  // repeated string grant_types_supported = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->grant_types_supported_size());
  for (int i = 0, n = this->grant_types_supported_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->grant_types_supported(i));
  }

  // string issuer = 1;
  if (this->issuer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->issuer());
  }

  // string authorization_endpoint = 2;
  if (this->authorization_endpoint().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->authorization_endpoint());
  }

  // string token_endpoint = 3;
  if (this->token_endpoint().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token_endpoint());
  }

  // string jwks_uri = 7;
  if (this->jwks_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->jwks_uri());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OAuth2MetadataResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.service.OAuth2MetadataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OAuth2MetadataResponse* source =
      ::google::protobuf::DynamicCastToGenerated<OAuth2MetadataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.service.OAuth2MetadataResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.service.OAuth2MetadataResponse)
    MergeFrom(*source);
  }
}

void OAuth2MetadataResponse::MergeFrom(const OAuth2MetadataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.service.OAuth2MetadataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  response_types_supported_.MergeFrom(from.response_types_supported_);
  scopes_supported_.MergeFrom(from.scopes_supported_);
  token_endpoint_auth_methods_supported_.MergeFrom(from.token_endpoint_auth_methods_supported_);
  code_challenge_methods_supported_.MergeFrom(from.code_challenge_methods_supported_);
  grant_types_supported_.MergeFrom(from.grant_types_supported_);
  if (from.issuer().size() > 0) {

    issuer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issuer_);
  }
  if (from.authorization_endpoint().size() > 0) {

    authorization_endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authorization_endpoint_);
  }
  if (from.token_endpoint().size() > 0) {

    token_endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_endpoint_);
  }
  if (from.jwks_uri().size() > 0) {

    jwks_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jwks_uri_);
  }
}

void OAuth2MetadataResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.service.OAuth2MetadataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OAuth2MetadataResponse::CopyFrom(const OAuth2MetadataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.service.OAuth2MetadataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OAuth2MetadataResponse::IsInitialized() const {
  return true;
}

void OAuth2MetadataResponse::Swap(OAuth2MetadataResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OAuth2MetadataResponse::InternalSwap(OAuth2MetadataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  response_types_supported_.InternalSwap(CastToBase(&other->response_types_supported_));
  scopes_supported_.InternalSwap(CastToBase(&other->scopes_supported_));
  token_endpoint_auth_methods_supported_.InternalSwap(CastToBase(&other->token_endpoint_auth_methods_supported_));
  code_challenge_methods_supported_.InternalSwap(CastToBase(&other->code_challenge_methods_supported_));
  grant_types_supported_.InternalSwap(CastToBase(&other->grant_types_supported_));
  issuer_.Swap(&other->issuer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  authorization_endpoint_.Swap(&other->authorization_endpoint_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_endpoint_.Swap(&other->token_endpoint_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  jwks_uri_.Swap(&other->jwks_uri_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata OAuth2MetadataResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fservice_2fauth_2eproto);
  return ::file_level_metadata_flyteidl_2fservice_2fauth_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FlyteClientRequest::InitAsDefaultInstance() {
}
class FlyteClientRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlyteClientRequest::FlyteClientRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.service.FlyteClientRequest)
}
FlyteClientRequest::FlyteClientRequest(const FlyteClientRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.service.FlyteClientRequest)
}

void FlyteClientRequest::SharedCtor() {
}

FlyteClientRequest::~FlyteClientRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.service.FlyteClientRequest)
  SharedDtor();
}

void FlyteClientRequest::SharedDtor() {
}

void FlyteClientRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlyteClientRequest& FlyteClientRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FlyteClientRequest_flyteidl_2fservice_2fauth_2eproto.base);
  return *internal_default_instance();
}


void FlyteClientRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.service.FlyteClientRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FlyteClientRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FlyteClientRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FlyteClientRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.service.FlyteClientRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.service.FlyteClientRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.service.FlyteClientRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FlyteClientRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.service.FlyteClientRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.service.FlyteClientRequest)
}

::google::protobuf::uint8* FlyteClientRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.service.FlyteClientRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.service.FlyteClientRequest)
  return target;
}

size_t FlyteClientRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.service.FlyteClientRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlyteClientRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.service.FlyteClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FlyteClientRequest* source =
      ::google::protobuf::DynamicCastToGenerated<FlyteClientRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.service.FlyteClientRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.service.FlyteClientRequest)
    MergeFrom(*source);
  }
}

void FlyteClientRequest::MergeFrom(const FlyteClientRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.service.FlyteClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FlyteClientRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.service.FlyteClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlyteClientRequest::CopyFrom(const FlyteClientRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.service.FlyteClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlyteClientRequest::IsInitialized() const {
  return true;
}

void FlyteClientRequest::Swap(FlyteClientRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlyteClientRequest::InternalSwap(FlyteClientRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FlyteClientRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fservice_2fauth_2eproto);
  return ::file_level_metadata_flyteidl_2fservice_2fauth_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FlyteClientResponse::InitAsDefaultInstance() {
}
class FlyteClientResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlyteClientResponse::kClientIdFieldNumber;
const int FlyteClientResponse::kRedirectUriFieldNumber;
const int FlyteClientResponse::kScopesFieldNumber;
const int FlyteClientResponse::kAuthorizationMetadataKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlyteClientResponse::FlyteClientResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.service.FlyteClientResponse)
}
FlyteClientResponse::FlyteClientResponse(const FlyteClientResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      scopes_(from.scopes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  redirect_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.redirect_uri().size() > 0) {
    redirect_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirect_uri_);
  }
  authorization_metadata_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.authorization_metadata_key().size() > 0) {
    authorization_metadata_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authorization_metadata_key_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.service.FlyteClientResponse)
}

void FlyteClientResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FlyteClientResponse_flyteidl_2fservice_2fauth_2eproto.base);
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redirect_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authorization_metadata_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FlyteClientResponse::~FlyteClientResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.service.FlyteClientResponse)
  SharedDtor();
}

void FlyteClientResponse::SharedDtor() {
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redirect_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authorization_metadata_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FlyteClientResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlyteClientResponse& FlyteClientResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FlyteClientResponse_flyteidl_2fservice_2fauth_2eproto.base);
  return *internal_default_instance();
}


void FlyteClientResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.service.FlyteClientResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scopes_.Clear();
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redirect_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authorization_metadata_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FlyteClientResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FlyteClientResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.service.FlyteClientResponse.client_id");
        object = msg->mutable_client_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string redirect_uri = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.service.FlyteClientResponse.redirect_uri");
        object = msg->mutable_redirect_uri();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string scopes = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("flyteidl.service.FlyteClientResponse.scopes");
          object = msg->add_scopes();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // string authorization_metadata_key = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.service.FlyteClientResponse.authorization_metadata_key");
        object = msg->mutable_authorization_metadata_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FlyteClientResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.service.FlyteClientResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string client_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), static_cast<int>(this->client_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.service.FlyteClientResponse.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string redirect_uri = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redirect_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->redirect_uri().data(), static_cast<int>(this->redirect_uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.service.FlyteClientResponse.redirect_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string scopes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_scopes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->scopes(this->scopes_size() - 1).data(),
            static_cast<int>(this->scopes(this->scopes_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.service.FlyteClientResponse.scopes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string authorization_metadata_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authorization_metadata_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->authorization_metadata_key().data(), static_cast<int>(this->authorization_metadata_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.service.FlyteClientResponse.authorization_metadata_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.service.FlyteClientResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.service.FlyteClientResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FlyteClientResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.service.FlyteClientResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.service.FlyteClientResponse.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_id(), output);
  }

  // string redirect_uri = 2;
  if (this->redirect_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->redirect_uri().data(), static_cast<int>(this->redirect_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.service.FlyteClientResponse.redirect_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->redirect_uri(), output);
  }

  // repeated string scopes = 3;
  for (int i = 0, n = this->scopes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scopes(i).data(), static_cast<int>(this->scopes(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.service.FlyteClientResponse.scopes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->scopes(i), output);
  }

  // string authorization_metadata_key = 4;
  if (this->authorization_metadata_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->authorization_metadata_key().data(), static_cast<int>(this->authorization_metadata_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.service.FlyteClientResponse.authorization_metadata_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->authorization_metadata_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.service.FlyteClientResponse)
}

::google::protobuf::uint8* FlyteClientResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.service.FlyteClientResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.service.FlyteClientResponse.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_id(), target);
  }

  // string redirect_uri = 2;
  if (this->redirect_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->redirect_uri().data(), static_cast<int>(this->redirect_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.service.FlyteClientResponse.redirect_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->redirect_uri(), target);
  }

  // repeated string scopes = 3;
  for (int i = 0, n = this->scopes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scopes(i).data(), static_cast<int>(this->scopes(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.service.FlyteClientResponse.scopes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->scopes(i), target);
  }

  // string authorization_metadata_key = 4;
  if (this->authorization_metadata_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->authorization_metadata_key().data(), static_cast<int>(this->authorization_metadata_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.service.FlyteClientResponse.authorization_metadata_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->authorization_metadata_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.service.FlyteClientResponse)
  return target;
}

size_t FlyteClientResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.service.FlyteClientResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string scopes = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->scopes_size());
  for (int i = 0, n = this->scopes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->scopes(i));
  }

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // string redirect_uri = 2;
  if (this->redirect_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->redirect_uri());
  }

  // string authorization_metadata_key = 4;
  if (this->authorization_metadata_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->authorization_metadata_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlyteClientResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.service.FlyteClientResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FlyteClientResponse* source =
      ::google::protobuf::DynamicCastToGenerated<FlyteClientResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.service.FlyteClientResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.service.FlyteClientResponse)
    MergeFrom(*source);
  }
}

void FlyteClientResponse::MergeFrom(const FlyteClientResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.service.FlyteClientResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scopes_.MergeFrom(from.scopes_);
  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.redirect_uri().size() > 0) {

    redirect_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirect_uri_);
  }
  if (from.authorization_metadata_key().size() > 0) {

    authorization_metadata_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authorization_metadata_key_);
  }
}

void FlyteClientResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.service.FlyteClientResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlyteClientResponse::CopyFrom(const FlyteClientResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.service.FlyteClientResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlyteClientResponse::IsInitialized() const {
  return true;
}

void FlyteClientResponse::Swap(FlyteClientResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlyteClientResponse::InternalSwap(FlyteClientResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  scopes_.InternalSwap(CastToBase(&other->scopes_));
  client_id_.Swap(&other->client_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  redirect_uri_.Swap(&other->redirect_uri_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  authorization_metadata_key_.Swap(&other->authorization_metadata_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata FlyteClientResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fservice_2fauth_2eproto);
  return ::file_level_metadata_flyteidl_2fservice_2fauth_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace service
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::service::OAuth2MetadataRequest* Arena::CreateMaybeMessage< ::flyteidl::service::OAuth2MetadataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::service::OAuth2MetadataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::service::OAuth2MetadataResponse* Arena::CreateMaybeMessage< ::flyteidl::service::OAuth2MetadataResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::service::OAuth2MetadataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::service::FlyteClientRequest* Arena::CreateMaybeMessage< ::flyteidl::service::FlyteClientRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::service::FlyteClientRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::service::FlyteClientResponse* Arena::CreateMaybeMessage< ::flyteidl::service::FlyteClientResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::service::FlyteClientResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
