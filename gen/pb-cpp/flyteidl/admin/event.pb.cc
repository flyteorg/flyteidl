// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/event.proto

#include "flyteidl/admin/event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace admin {
constexpr EventErrorAlreadyInTerminalState::EventErrorAlreadyInTerminalState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : current_phase_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct EventErrorAlreadyInTerminalStateDefaultTypeInternal {
  constexpr EventErrorAlreadyInTerminalStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventErrorAlreadyInTerminalStateDefaultTypeInternal() {}
  union {
    EventErrorAlreadyInTerminalState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventErrorAlreadyInTerminalStateDefaultTypeInternal _EventErrorAlreadyInTerminalState_default_instance_;
constexpr EventErrorIncompatibleCluster::EventErrorIncompatibleCluster(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cluster_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct EventErrorIncompatibleClusterDefaultTypeInternal {
  constexpr EventErrorIncompatibleClusterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventErrorIncompatibleClusterDefaultTypeInternal() {}
  union {
    EventErrorIncompatibleCluster _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventErrorIncompatibleClusterDefaultTypeInternal _EventErrorIncompatibleCluster_default_instance_;
constexpr EventFailureReason::EventFailureReason(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct EventFailureReasonDefaultTypeInternal {
  constexpr EventFailureReasonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventFailureReasonDefaultTypeInternal() {}
  union {
    EventFailureReason _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventFailureReasonDefaultTypeInternal _EventFailureReason_default_instance_;
constexpr WorkflowExecutionEventRequest::WorkflowExecutionEventRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_(nullptr){}
struct WorkflowExecutionEventRequestDefaultTypeInternal {
  constexpr WorkflowExecutionEventRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowExecutionEventRequestDefaultTypeInternal() {}
  union {
    WorkflowExecutionEventRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowExecutionEventRequestDefaultTypeInternal _WorkflowExecutionEventRequest_default_instance_;
constexpr WorkflowExecutionEventResponse::WorkflowExecutionEventResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct WorkflowExecutionEventResponseDefaultTypeInternal {
  constexpr WorkflowExecutionEventResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowExecutionEventResponseDefaultTypeInternal() {}
  union {
    WorkflowExecutionEventResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowExecutionEventResponseDefaultTypeInternal _WorkflowExecutionEventResponse_default_instance_;
constexpr NodeExecutionEventRequest::NodeExecutionEventRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_(nullptr){}
struct NodeExecutionEventRequestDefaultTypeInternal {
  constexpr NodeExecutionEventRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeExecutionEventRequestDefaultTypeInternal() {}
  union {
    NodeExecutionEventRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeExecutionEventRequestDefaultTypeInternal _NodeExecutionEventRequest_default_instance_;
constexpr NodeExecutionEventResponse::NodeExecutionEventResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NodeExecutionEventResponseDefaultTypeInternal {
  constexpr NodeExecutionEventResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeExecutionEventResponseDefaultTypeInternal() {}
  union {
    NodeExecutionEventResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeExecutionEventResponseDefaultTypeInternal _NodeExecutionEventResponse_default_instance_;
constexpr TaskExecutionEventRequest::TaskExecutionEventRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_(nullptr){}
struct TaskExecutionEventRequestDefaultTypeInternal {
  constexpr TaskExecutionEventRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskExecutionEventRequestDefaultTypeInternal() {}
  union {
    TaskExecutionEventRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskExecutionEventRequestDefaultTypeInternal _TaskExecutionEventRequest_default_instance_;
constexpr TaskExecutionEventResponse::TaskExecutionEventResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TaskExecutionEventResponseDefaultTypeInternal {
  constexpr TaskExecutionEventResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskExecutionEventResponseDefaultTypeInternal() {}
  union {
    TaskExecutionEventResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskExecutionEventResponseDefaultTypeInternal _TaskExecutionEventResponse_default_instance_;
}  // namespace admin
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fadmin_2fevent_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fadmin_2fevent_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fadmin_2fevent_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fadmin_2fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::EventErrorAlreadyInTerminalState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::EventErrorAlreadyInTerminalState, current_phase_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::EventErrorIncompatibleCluster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::EventErrorIncompatibleCluster, cluster_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::EventFailureReason, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::EventFailureReason, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::EventFailureReason, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionEventRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionEventRequest, request_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionEventRequest, event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionEventResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionEventRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionEventRequest, request_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionEventRequest, event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionEventResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionEventRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionEventRequest, request_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionEventRequest, event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionEventResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::admin::EventErrorAlreadyInTerminalState)},
  { 7, -1, -1, sizeof(::flyteidl::admin::EventErrorIncompatibleCluster)},
  { 14, -1, -1, sizeof(::flyteidl::admin::EventFailureReason)},
  { 23, -1, -1, sizeof(::flyteidl::admin::WorkflowExecutionEventRequest)},
  { 31, -1, -1, sizeof(::flyteidl::admin::WorkflowExecutionEventResponse)},
  { 37, -1, -1, sizeof(::flyteidl::admin::NodeExecutionEventRequest)},
  { 45, -1, -1, sizeof(::flyteidl::admin::NodeExecutionEventResponse)},
  { 51, -1, -1, sizeof(::flyteidl::admin::TaskExecutionEventRequest)},
  { 59, -1, -1, sizeof(::flyteidl::admin::TaskExecutionEventResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_EventErrorAlreadyInTerminalState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_EventErrorIncompatibleCluster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_EventFailureReason_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_WorkflowExecutionEventRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_WorkflowExecutionEventResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_NodeExecutionEventRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_NodeExecutionEventResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_TaskExecutionEventRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_TaskExecutionEventResponse_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fadmin_2fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032flyteidl/admin/event.proto\022\016flyteidl.a"
  "dmin\032\032flyteidl/event/event.proto\"G\n Even"
  "tErrorAlreadyInTerminalState\022#\n\rcurrent_"
  "phase\030\001 \001(\tR\014currentPhase\"9\n\035EventErrorI"
  "ncompatibleCluster\022\030\n\007cluster\030\001 \001(\tR\007clu"
  "ster\"\361\001\n\022EventFailureReason\022m\n\031already_i"
  "n_terminal_state\030\001 \001(\01320.flyteidl.admin."
  "EventErrorAlreadyInTerminalStateH\000R\026alre"
  "adyInTerminalState\022b\n\024incompatible_clust"
  "er\030\002 \001(\0132-.flyteidl.admin.EventErrorInco"
  "mpatibleClusterH\000R\023incompatibleClusterB\010"
  "\n\006reason\"|\n\035WorkflowExecutionEventReques"
  "t\022\035\n\nrequest_id\030\001 \001(\tR\trequestId\022<\n\005even"
  "t\030\002 \001(\0132&.flyteidl.event.WorkflowExecuti"
  "onEventR\005event\" \n\036WorkflowExecutionEvent"
  "Response\"t\n\031NodeExecutionEventRequest\022\035\n"
  "\nrequest_id\030\001 \001(\tR\trequestId\0228\n\005event\030\002 "
  "\001(\0132\".flyteidl.event.NodeExecutionEventR"
  "\005event\"\034\n\032NodeExecutionEventResponse\"t\n\031"
  "TaskExecutionEventRequest\022\035\n\nrequest_id\030"
  "\001 \001(\tR\trequestId\0228\n\005event\030\002 \001(\0132\".flytei"
  "dl.event.TaskExecutionEventR\005event\"\034\n\032Ta"
  "skExecutionEventResponseB\263\001\n\022com.flyteid"
  "l.adminB\nEventProtoH\002Z5github.com/flyteo"
  "rg/flyteidl/gen/pb-go/flyteidl/admin\370\001\000\242"
  "\002\003FAX\252\002\016Flyteidl.Admin\312\002\016Flyteidl\\Admin\342"
  "\002\032Flyteidl\\Admin\\GPBMetadata\352\002\017Flyteidl:"
  ":Adminb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flyteidl_2fadmin_2fevent_2eproto_deps[1] = {
  &::descriptor_table_flyteidl_2fevent_2fevent_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fadmin_2fevent_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2fevent_2eproto = {
  false, false, 1094, descriptor_table_protodef_flyteidl_2fadmin_2fevent_2eproto, "flyteidl/admin/event.proto", 
  &descriptor_table_flyteidl_2fadmin_2fevent_2eproto_once, descriptor_table_flyteidl_2fadmin_2fevent_2eproto_deps, 1, 9,
  schemas, file_default_instances, TableStruct_flyteidl_2fadmin_2fevent_2eproto::offsets,
  file_level_metadata_flyteidl_2fadmin_2fevent_2eproto, file_level_enum_descriptors_flyteidl_2fadmin_2fevent_2eproto, file_level_service_descriptors_flyteidl_2fadmin_2fevent_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fadmin_2fevent_2eproto_getter() {
  return &descriptor_table_flyteidl_2fadmin_2fevent_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fadmin_2fevent_2eproto(&descriptor_table_flyteidl_2fadmin_2fevent_2eproto);
namespace flyteidl {
namespace admin {

// ===================================================================

class EventErrorAlreadyInTerminalState::_Internal {
 public:
};

EventErrorAlreadyInTerminalState::EventErrorAlreadyInTerminalState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.EventErrorAlreadyInTerminalState)
}
EventErrorAlreadyInTerminalState::EventErrorAlreadyInTerminalState(const EventErrorAlreadyInTerminalState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  current_phase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    current_phase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_current_phase().empty()) {
    current_phase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_current_phase(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.EventErrorAlreadyInTerminalState)
}

inline void EventErrorAlreadyInTerminalState::SharedCtor() {
current_phase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  current_phase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventErrorAlreadyInTerminalState::~EventErrorAlreadyInTerminalState() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.EventErrorAlreadyInTerminalState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EventErrorAlreadyInTerminalState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  current_phase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EventErrorAlreadyInTerminalState::ArenaDtor(void* object) {
  EventErrorAlreadyInTerminalState* _this = reinterpret_cast< EventErrorAlreadyInTerminalState* >(object);
  (void)_this;
}
void EventErrorAlreadyInTerminalState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventErrorAlreadyInTerminalState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventErrorAlreadyInTerminalState::InternalSwap(EventErrorAlreadyInTerminalState* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata EventErrorAlreadyInTerminalState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fevent_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fevent_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fevent_2eproto[0]);
}

// ===================================================================

class EventErrorIncompatibleCluster::_Internal {
 public:
};

EventErrorIncompatibleCluster::EventErrorIncompatibleCluster(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.EventErrorIncompatibleCluster)
}
EventErrorIncompatibleCluster::EventErrorIncompatibleCluster(const EventErrorIncompatibleCluster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cluster_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cluster_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cluster().empty()) {
    cluster_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cluster(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.EventErrorIncompatibleCluster)
}

inline void EventErrorIncompatibleCluster::SharedCtor() {
cluster_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cluster_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventErrorIncompatibleCluster::~EventErrorIncompatibleCluster() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.EventErrorIncompatibleCluster)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EventErrorIncompatibleCluster::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cluster_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EventErrorIncompatibleCluster::ArenaDtor(void* object) {
  EventErrorIncompatibleCluster* _this = reinterpret_cast< EventErrorIncompatibleCluster* >(object);
  (void)_this;
}
void EventErrorIncompatibleCluster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventErrorIncompatibleCluster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventErrorIncompatibleCluster::InternalSwap(EventErrorIncompatibleCluster* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata EventErrorIncompatibleCluster::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fevent_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fevent_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fevent_2eproto[1]);
}

// ===================================================================

class EventFailureReason::_Internal {
 public:
  static const ::flyteidl::admin::EventErrorAlreadyInTerminalState& already_in_terminal_state(const EventFailureReason* msg);
  static const ::flyteidl::admin::EventErrorIncompatibleCluster& incompatible_cluster(const EventFailureReason* msg);
};

const ::flyteidl::admin::EventErrorAlreadyInTerminalState&
EventFailureReason::_Internal::already_in_terminal_state(const EventFailureReason* msg) {
  return *msg->reason_.already_in_terminal_state_;
}
const ::flyteidl::admin::EventErrorIncompatibleCluster&
EventFailureReason::_Internal::incompatible_cluster(const EventFailureReason* msg) {
  return *msg->reason_.incompatible_cluster_;
}
void EventFailureReason::set_allocated_already_in_terminal_state(::flyteidl::admin::EventErrorAlreadyInTerminalState* already_in_terminal_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_reason();
  if (already_in_terminal_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::EventErrorAlreadyInTerminalState>::GetOwningArena(already_in_terminal_state);
    if (message_arena != submessage_arena) {
      already_in_terminal_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, already_in_terminal_state, submessage_arena);
    }
    set_has_already_in_terminal_state();
    reason_.already_in_terminal_state_ = already_in_terminal_state;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.EventFailureReason.already_in_terminal_state)
}
void EventFailureReason::set_allocated_incompatible_cluster(::flyteidl::admin::EventErrorIncompatibleCluster* incompatible_cluster) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_reason();
  if (incompatible_cluster) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::EventErrorIncompatibleCluster>::GetOwningArena(incompatible_cluster);
    if (message_arena != submessage_arena) {
      incompatible_cluster = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, incompatible_cluster, submessage_arena);
    }
    set_has_incompatible_cluster();
    reason_.incompatible_cluster_ = incompatible_cluster;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.EventFailureReason.incompatible_cluster)
}
EventFailureReason::EventFailureReason(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.EventFailureReason)
}
EventFailureReason::EventFailureReason(const EventFailureReason& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_reason();
  switch (from.reason_case()) {
    case kAlreadyInTerminalState: {
      _internal_mutable_already_in_terminal_state()->::flyteidl::admin::EventErrorAlreadyInTerminalState::MergeFrom(from._internal_already_in_terminal_state());
      break;
    }
    case kIncompatibleCluster: {
      _internal_mutable_incompatible_cluster()->::flyteidl::admin::EventErrorIncompatibleCluster::MergeFrom(from._internal_incompatible_cluster());
      break;
    }
    case REASON_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.EventFailureReason)
}

inline void EventFailureReason::SharedCtor() {
clear_has_reason();
}

EventFailureReason::~EventFailureReason() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.EventFailureReason)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EventFailureReason::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_reason()) {
    clear_reason();
  }
}

void EventFailureReason::ArenaDtor(void* object) {
  EventFailureReason* _this = reinterpret_cast< EventFailureReason* >(object);
  (void)_this;
}
void EventFailureReason::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventFailureReason::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventFailureReason::clear_reason() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.admin.EventFailureReason)
  switch (reason_case()) {
    case kAlreadyInTerminalState: {
      if (GetArenaForAllocation() == nullptr) {
        delete reason_.already_in_terminal_state_;
      }
      break;
    }
    case kIncompatibleCluster: {
      if (GetArenaForAllocation() == nullptr) {
        delete reason_.incompatible_cluster_;
      }
      break;
    }
    case REASON_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REASON_NOT_SET;
}


void EventFailureReason::InternalSwap(EventFailureReason* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata EventFailureReason::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fevent_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fevent_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fevent_2eproto[2]);
}

// ===================================================================

class WorkflowExecutionEventRequest::_Internal {
 public:
  static const ::flyteidl::event::WorkflowExecutionEvent& event(const WorkflowExecutionEventRequest* msg);
};

const ::flyteidl::event::WorkflowExecutionEvent&
WorkflowExecutionEventRequest::_Internal::event(const WorkflowExecutionEventRequest* msg) {
  return *msg->event_;
}
void WorkflowExecutionEventRequest::clear_event() {
  if (GetArenaForAllocation() == nullptr && event_ != nullptr) {
    delete event_;
  }
  event_ = nullptr;
}
WorkflowExecutionEventRequest::WorkflowExecutionEventRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.WorkflowExecutionEventRequest)
}
WorkflowExecutionEventRequest::WorkflowExecutionEventRequest(const WorkflowExecutionEventRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_event()) {
    event_ = new ::flyteidl::event::WorkflowExecutionEvent(*from.event_);
  } else {
    event_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowExecutionEventRequest)
}

inline void WorkflowExecutionEventRequest::SharedCtor() {
request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
event_ = nullptr;
}

WorkflowExecutionEventRequest::~WorkflowExecutionEventRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowExecutionEventRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkflowExecutionEventRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete event_;
}

void WorkflowExecutionEventRequest::ArenaDtor(void* object) {
  WorkflowExecutionEventRequest* _this = reinterpret_cast< WorkflowExecutionEventRequest* >(object);
  (void)_this;
}
void WorkflowExecutionEventRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkflowExecutionEventRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkflowExecutionEventRequest::InternalSwap(WorkflowExecutionEventRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowExecutionEventRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fevent_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fevent_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fevent_2eproto[3]);
}

// ===================================================================

class WorkflowExecutionEventResponse::_Internal {
 public:
};

WorkflowExecutionEventResponse::WorkflowExecutionEventResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.WorkflowExecutionEventResponse)
}
WorkflowExecutionEventResponse::WorkflowExecutionEventResponse(const WorkflowExecutionEventResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowExecutionEventResponse)
}



::PROTOBUF_NAMESPACE_ID::Metadata WorkflowExecutionEventResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fevent_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fevent_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fevent_2eproto[4]);
}

// ===================================================================

class NodeExecutionEventRequest::_Internal {
 public:
  static const ::flyteidl::event::NodeExecutionEvent& event(const NodeExecutionEventRequest* msg);
};

const ::flyteidl::event::NodeExecutionEvent&
NodeExecutionEventRequest::_Internal::event(const NodeExecutionEventRequest* msg) {
  return *msg->event_;
}
void NodeExecutionEventRequest::clear_event() {
  if (GetArenaForAllocation() == nullptr && event_ != nullptr) {
    delete event_;
  }
  event_ = nullptr;
}
NodeExecutionEventRequest::NodeExecutionEventRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.NodeExecutionEventRequest)
}
NodeExecutionEventRequest::NodeExecutionEventRequest(const NodeExecutionEventRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_event()) {
    event_ = new ::flyteidl::event::NodeExecutionEvent(*from.event_);
  } else {
    event_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.NodeExecutionEventRequest)
}

inline void NodeExecutionEventRequest::SharedCtor() {
request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
event_ = nullptr;
}

NodeExecutionEventRequest::~NodeExecutionEventRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.NodeExecutionEventRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeExecutionEventRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete event_;
}

void NodeExecutionEventRequest::ArenaDtor(void* object) {
  NodeExecutionEventRequest* _this = reinterpret_cast< NodeExecutionEventRequest* >(object);
  (void)_this;
}
void NodeExecutionEventRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeExecutionEventRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeExecutionEventRequest::InternalSwap(NodeExecutionEventRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata NodeExecutionEventRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fevent_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fevent_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fevent_2eproto[5]);
}

// ===================================================================

class NodeExecutionEventResponse::_Internal {
 public:
};

NodeExecutionEventResponse::NodeExecutionEventResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.NodeExecutionEventResponse)
}
NodeExecutionEventResponse::NodeExecutionEventResponse(const NodeExecutionEventResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.NodeExecutionEventResponse)
}



::PROTOBUF_NAMESPACE_ID::Metadata NodeExecutionEventResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fevent_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fevent_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fevent_2eproto[6]);
}

// ===================================================================

class TaskExecutionEventRequest::_Internal {
 public:
  static const ::flyteidl::event::TaskExecutionEvent& event(const TaskExecutionEventRequest* msg);
};

const ::flyteidl::event::TaskExecutionEvent&
TaskExecutionEventRequest::_Internal::event(const TaskExecutionEventRequest* msg) {
  return *msg->event_;
}
void TaskExecutionEventRequest::clear_event() {
  if (GetArenaForAllocation() == nullptr && event_ != nullptr) {
    delete event_;
  }
  event_ = nullptr;
}
TaskExecutionEventRequest::TaskExecutionEventRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.TaskExecutionEventRequest)
}
TaskExecutionEventRequest::TaskExecutionEventRequest(const TaskExecutionEventRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_event()) {
    event_ = new ::flyteidl::event::TaskExecutionEvent(*from.event_);
  } else {
    event_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskExecutionEventRequest)
}

inline void TaskExecutionEventRequest::SharedCtor() {
request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
event_ = nullptr;
}

TaskExecutionEventRequest::~TaskExecutionEventRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskExecutionEventRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskExecutionEventRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete event_;
}

void TaskExecutionEventRequest::ArenaDtor(void* object) {
  TaskExecutionEventRequest* _this = reinterpret_cast< TaskExecutionEventRequest* >(object);
  (void)_this;
}
void TaskExecutionEventRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskExecutionEventRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskExecutionEventRequest::InternalSwap(TaskExecutionEventRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata TaskExecutionEventRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fevent_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fevent_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fevent_2eproto[7]);
}

// ===================================================================

class TaskExecutionEventResponse::_Internal {
 public:
};

TaskExecutionEventResponse::TaskExecutionEventResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.TaskExecutionEventResponse)
}
TaskExecutionEventResponse::TaskExecutionEventResponse(const TaskExecutionEventResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskExecutionEventResponse)
}



::PROTOBUF_NAMESPACE_ID::Metadata TaskExecutionEventResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fevent_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fevent_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fevent_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::admin::EventErrorAlreadyInTerminalState* Arena::CreateMaybeMessage< ::flyteidl::admin::EventErrorAlreadyInTerminalState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::EventErrorAlreadyInTerminalState >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::EventErrorIncompatibleCluster* Arena::CreateMaybeMessage< ::flyteidl::admin::EventErrorIncompatibleCluster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::EventErrorIncompatibleCluster >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::EventFailureReason* Arena::CreateMaybeMessage< ::flyteidl::admin::EventFailureReason >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::EventFailureReason >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::WorkflowExecutionEventRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::WorkflowExecutionEventRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::WorkflowExecutionEventRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::WorkflowExecutionEventResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::WorkflowExecutionEventResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::WorkflowExecutionEventResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::NodeExecutionEventRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::NodeExecutionEventRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::NodeExecutionEventRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::NodeExecutionEventResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::NodeExecutionEventResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::NodeExecutionEventResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskExecutionEventRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskExecutionEventRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::TaskExecutionEventRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskExecutionEventResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskExecutionEventResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::TaskExecutionEventResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
