// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/service/external_plugin_service.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fservice_2fexternal_5fplugin_5fservice_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fservice_2fexternal_5fplugin_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/literals.pb.h"
#include "flyteidl/core/tasks.pb.h"
#include "flyteidl/core/interface.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fservice_2fexternal_5fplugin_5fservice_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fservice_2fexternal_5fplugin_5fservice_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fservice_2fexternal_5fplugin_5fservice_2eproto();
namespace flyteidl {
namespace service {
class TaskCreateRequest;
class TaskCreateRequestDefaultTypeInternal;
extern TaskCreateRequestDefaultTypeInternal _TaskCreateRequest_default_instance_;
class TaskCreateResponse;
class TaskCreateResponseDefaultTypeInternal;
extern TaskCreateResponseDefaultTypeInternal _TaskCreateResponse_default_instance_;
class TaskDeleteRequest;
class TaskDeleteRequestDefaultTypeInternal;
extern TaskDeleteRequestDefaultTypeInternal _TaskDeleteRequest_default_instance_;
class TaskDeleteResponse;
class TaskDeleteResponseDefaultTypeInternal;
extern TaskDeleteResponseDefaultTypeInternal _TaskDeleteResponse_default_instance_;
class TaskGetRequest;
class TaskGetRequestDefaultTypeInternal;
extern TaskGetRequestDefaultTypeInternal _TaskGetRequest_default_instance_;
class TaskGetResponse;
class TaskGetResponseDefaultTypeInternal;
extern TaskGetResponseDefaultTypeInternal _TaskGetResponse_default_instance_;
}  // namespace service
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::service::TaskCreateRequest* Arena::CreateMaybeMessage<::flyteidl::service::TaskCreateRequest>(Arena*);
template<> ::flyteidl::service::TaskCreateResponse* Arena::CreateMaybeMessage<::flyteidl::service::TaskCreateResponse>(Arena*);
template<> ::flyteidl::service::TaskDeleteRequest* Arena::CreateMaybeMessage<::flyteidl::service::TaskDeleteRequest>(Arena*);
template<> ::flyteidl::service::TaskDeleteResponse* Arena::CreateMaybeMessage<::flyteidl::service::TaskDeleteResponse>(Arena*);
template<> ::flyteidl::service::TaskGetRequest* Arena::CreateMaybeMessage<::flyteidl::service::TaskGetRequest>(Arena*);
template<> ::flyteidl::service::TaskGetResponse* Arena::CreateMaybeMessage<::flyteidl::service::TaskGetResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace service {

enum State {
  RETRYABLE_FAILURE = 0,
  PERMANENT_FAILURE = 1,
  PENDING = 2,
  RUNNING = 3,
  SUCCEEDED = 4,
  State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool State_IsValid(int value);
const State State_MIN = RETRYABLE_FAILURE;
const State State_MAX = SUCCEEDED;
const int State_ARRAYSIZE = State_MAX + 1;

const ::google::protobuf::EnumDescriptor* State_descriptor();
inline const ::std::string& State_Name(State value) {
  return ::google::protobuf::internal::NameOfEnum(
    State_descriptor(), value);
}
inline bool State_Parse(
    const ::std::string& name, State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<State>(
    State_descriptor(), name, value);
}
// ===================================================================

class TaskCreateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.service.TaskCreateRequest) */ {
 public:
  TaskCreateRequest();
  virtual ~TaskCreateRequest();

  TaskCreateRequest(const TaskCreateRequest& from);

  inline TaskCreateRequest& operator=(const TaskCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskCreateRequest(TaskCreateRequest&& from) noexcept
    : TaskCreateRequest() {
    *this = ::std::move(from);
  }

  inline TaskCreateRequest& operator=(TaskCreateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskCreateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskCreateRequest* internal_default_instance() {
    return reinterpret_cast<const TaskCreateRequest*>(
               &_TaskCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TaskCreateRequest* other);
  friend void swap(TaskCreateRequest& a, TaskCreateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskCreateRequest* New() const final {
    return CreateMaybeMessage<TaskCreateRequest>(nullptr);
  }

  TaskCreateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskCreateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskCreateRequest& from);
  void MergeFrom(const TaskCreateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskCreateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string output_prefix = 3;
  void clear_output_prefix();
  static const int kOutputPrefixFieldNumber = 3;
  const ::std::string& output_prefix() const;
  void set_output_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_output_prefix(::std::string&& value);
  #endif
  void set_output_prefix(const char* value);
  void set_output_prefix(const char* value, size_t size);
  ::std::string* mutable_output_prefix();
  ::std::string* release_output_prefix();
  void set_allocated_output_prefix(::std::string* output_prefix);

  // .flyteidl.core.LiteralMap inputs = 1;
  bool has_inputs() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 1;
  const ::flyteidl::core::LiteralMap& inputs() const;
  ::flyteidl::core::LiteralMap* release_inputs();
  ::flyteidl::core::LiteralMap* mutable_inputs();
  void set_allocated_inputs(::flyteidl::core::LiteralMap* inputs);

  // .flyteidl.core.TaskTemplate template = 2;
  bool has_template_() const;
  void clear_template_();
  static const int kTemplateFieldNumber = 2;
  const ::flyteidl::core::TaskTemplate& template_() const;
  ::flyteidl::core::TaskTemplate* release_template_();
  ::flyteidl::core::TaskTemplate* mutable_template_();
  void set_allocated_template_(::flyteidl::core::TaskTemplate* template_);

  // @@protoc_insertion_point(class_scope:flyteidl.service.TaskCreateRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr output_prefix_;
  ::flyteidl::core::LiteralMap* inputs_;
  ::flyteidl::core::TaskTemplate* template__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fservice_2fexternal_5fplugin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TaskCreateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.service.TaskCreateResponse) */ {
 public:
  TaskCreateResponse();
  virtual ~TaskCreateResponse();

  TaskCreateResponse(const TaskCreateResponse& from);

  inline TaskCreateResponse& operator=(const TaskCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskCreateResponse(TaskCreateResponse&& from) noexcept
    : TaskCreateResponse() {
    *this = ::std::move(from);
  }

  inline TaskCreateResponse& operator=(TaskCreateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskCreateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskCreateResponse* internal_default_instance() {
    return reinterpret_cast<const TaskCreateResponse*>(
               &_TaskCreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TaskCreateResponse* other);
  friend void swap(TaskCreateResponse& a, TaskCreateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskCreateResponse* New() const final {
    return CreateMaybeMessage<TaskCreateResponse>(nullptr);
  }

  TaskCreateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskCreateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskCreateResponse& from);
  void MergeFrom(const TaskCreateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskCreateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string job_id = 1;
  void clear_job_id();
  static const int kJobIdFieldNumber = 1;
  const ::std::string& job_id() const;
  void set_job_id(const ::std::string& value);
  #if LANG_CXX11
  void set_job_id(::std::string&& value);
  #endif
  void set_job_id(const char* value);
  void set_job_id(const char* value, size_t size);
  ::std::string* mutable_job_id();
  ::std::string* release_job_id();
  void set_allocated_job_id(::std::string* job_id);

  // @@protoc_insertion_point(class_scope:flyteidl.service.TaskCreateResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr job_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fservice_2fexternal_5fplugin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TaskGetRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.service.TaskGetRequest) */ {
 public:
  TaskGetRequest();
  virtual ~TaskGetRequest();

  TaskGetRequest(const TaskGetRequest& from);

  inline TaskGetRequest& operator=(const TaskGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskGetRequest(TaskGetRequest&& from) noexcept
    : TaskGetRequest() {
    *this = ::std::move(from);
  }

  inline TaskGetRequest& operator=(TaskGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskGetRequest* internal_default_instance() {
    return reinterpret_cast<const TaskGetRequest*>(
               &_TaskGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TaskGetRequest* other);
  friend void swap(TaskGetRequest& a, TaskGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskGetRequest* New() const final {
    return CreateMaybeMessage<TaskGetRequest>(nullptr);
  }

  TaskGetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskGetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskGetRequest& from);
  void MergeFrom(const TaskGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskGetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string task_type = 1;
  void clear_task_type();
  static const int kTaskTypeFieldNumber = 1;
  const ::std::string& task_type() const;
  void set_task_type(const ::std::string& value);
  #if LANG_CXX11
  void set_task_type(::std::string&& value);
  #endif
  void set_task_type(const char* value);
  void set_task_type(const char* value, size_t size);
  ::std::string* mutable_task_type();
  ::std::string* release_task_type();
  void set_allocated_task_type(::std::string* task_type);

  // string job_id = 2;
  void clear_job_id();
  static const int kJobIdFieldNumber = 2;
  const ::std::string& job_id() const;
  void set_job_id(const ::std::string& value);
  #if LANG_CXX11
  void set_job_id(::std::string&& value);
  #endif
  void set_job_id(const char* value);
  void set_job_id(const char* value, size_t size);
  ::std::string* mutable_job_id();
  ::std::string* release_job_id();
  void set_allocated_job_id(::std::string* job_id);

  // @@protoc_insertion_point(class_scope:flyteidl.service.TaskGetRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr task_type_;
  ::google::protobuf::internal::ArenaStringPtr job_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fservice_2fexternal_5fplugin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TaskGetResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.service.TaskGetResponse) */ {
 public:
  TaskGetResponse();
  virtual ~TaskGetResponse();

  TaskGetResponse(const TaskGetResponse& from);

  inline TaskGetResponse& operator=(const TaskGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskGetResponse(TaskGetResponse&& from) noexcept
    : TaskGetResponse() {
    *this = ::std::move(from);
  }

  inline TaskGetResponse& operator=(TaskGetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskGetResponse* internal_default_instance() {
    return reinterpret_cast<const TaskGetResponse*>(
               &_TaskGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TaskGetResponse* other);
  friend void swap(TaskGetResponse& a, TaskGetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskGetResponse* New() const final {
    return CreateMaybeMessage<TaskGetResponse>(nullptr);
  }

  TaskGetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskGetResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskGetResponse& from);
  void MergeFrom(const TaskGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskGetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.LiteralMap outputs = 2;
  bool has_outputs() const;
  void clear_outputs();
  static const int kOutputsFieldNumber = 2;
  const ::flyteidl::core::LiteralMap& outputs() const;
  ::flyteidl::core::LiteralMap* release_outputs();
  ::flyteidl::core::LiteralMap* mutable_outputs();
  void set_allocated_outputs(::flyteidl::core::LiteralMap* outputs);

  // .flyteidl.service.State state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::flyteidl::service::State state() const;
  void set_state(::flyteidl::service::State value);

  // @@protoc_insertion_point(class_scope:flyteidl.service.TaskGetResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::LiteralMap* outputs_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fservice_2fexternal_5fplugin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TaskDeleteRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.service.TaskDeleteRequest) */ {
 public:
  TaskDeleteRequest();
  virtual ~TaskDeleteRequest();

  TaskDeleteRequest(const TaskDeleteRequest& from);

  inline TaskDeleteRequest& operator=(const TaskDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskDeleteRequest(TaskDeleteRequest&& from) noexcept
    : TaskDeleteRequest() {
    *this = ::std::move(from);
  }

  inline TaskDeleteRequest& operator=(TaskDeleteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskDeleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const TaskDeleteRequest*>(
               &_TaskDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TaskDeleteRequest* other);
  friend void swap(TaskDeleteRequest& a, TaskDeleteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskDeleteRequest* New() const final {
    return CreateMaybeMessage<TaskDeleteRequest>(nullptr);
  }

  TaskDeleteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskDeleteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskDeleteRequest& from);
  void MergeFrom(const TaskDeleteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskDeleteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string task_type = 1;
  void clear_task_type();
  static const int kTaskTypeFieldNumber = 1;
  const ::std::string& task_type() const;
  void set_task_type(const ::std::string& value);
  #if LANG_CXX11
  void set_task_type(::std::string&& value);
  #endif
  void set_task_type(const char* value);
  void set_task_type(const char* value, size_t size);
  ::std::string* mutable_task_type();
  ::std::string* release_task_type();
  void set_allocated_task_type(::std::string* task_type);

  // string job_id = 2;
  void clear_job_id();
  static const int kJobIdFieldNumber = 2;
  const ::std::string& job_id() const;
  void set_job_id(const ::std::string& value);
  #if LANG_CXX11
  void set_job_id(::std::string&& value);
  #endif
  void set_job_id(const char* value);
  void set_job_id(const char* value, size_t size);
  ::std::string* mutable_job_id();
  ::std::string* release_job_id();
  void set_allocated_job_id(::std::string* job_id);

  // @@protoc_insertion_point(class_scope:flyteidl.service.TaskDeleteRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr task_type_;
  ::google::protobuf::internal::ArenaStringPtr job_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fservice_2fexternal_5fplugin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TaskDeleteResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.service.TaskDeleteResponse) */ {
 public:
  TaskDeleteResponse();
  virtual ~TaskDeleteResponse();

  TaskDeleteResponse(const TaskDeleteResponse& from);

  inline TaskDeleteResponse& operator=(const TaskDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskDeleteResponse(TaskDeleteResponse&& from) noexcept
    : TaskDeleteResponse() {
    *this = ::std::move(from);
  }

  inline TaskDeleteResponse& operator=(TaskDeleteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskDeleteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskDeleteResponse* internal_default_instance() {
    return reinterpret_cast<const TaskDeleteResponse*>(
               &_TaskDeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TaskDeleteResponse* other);
  friend void swap(TaskDeleteResponse& a, TaskDeleteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskDeleteResponse* New() const final {
    return CreateMaybeMessage<TaskDeleteResponse>(nullptr);
  }

  TaskDeleteResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskDeleteResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskDeleteResponse& from);
  void MergeFrom(const TaskDeleteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskDeleteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.service.TaskDeleteResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fservice_2fexternal_5fplugin_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskCreateRequest

// .flyteidl.core.LiteralMap inputs = 1;
inline bool TaskCreateRequest::has_inputs() const {
  return this != internal_default_instance() && inputs_ != nullptr;
}
inline const ::flyteidl::core::LiteralMap& TaskCreateRequest::inputs() const {
  const ::flyteidl::core::LiteralMap* p = inputs_;
  // @@protoc_insertion_point(field_get:flyteidl.service.TaskCreateRequest.inputs)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::LiteralMap*>(
      &::flyteidl::core::_LiteralMap_default_instance_);
}
inline ::flyteidl::core::LiteralMap* TaskCreateRequest::release_inputs() {
  // @@protoc_insertion_point(field_release:flyteidl.service.TaskCreateRequest.inputs)
  
  ::flyteidl::core::LiteralMap* temp = inputs_;
  inputs_ = nullptr;
  return temp;
}
inline ::flyteidl::core::LiteralMap* TaskCreateRequest::mutable_inputs() {
  
  if (inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::LiteralMap>(GetArenaNoVirtual());
    inputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.service.TaskCreateRequest.inputs)
  return inputs_;
}
inline void TaskCreateRequest::set_allocated_inputs(::flyteidl::core::LiteralMap* inputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(inputs_);
  }
  if (inputs) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inputs, submessage_arena);
    }
    
  } else {
    
  }
  inputs_ = inputs;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.TaskCreateRequest.inputs)
}

// .flyteidl.core.TaskTemplate template = 2;
inline bool TaskCreateRequest::has_template_() const {
  return this != internal_default_instance() && template__ != nullptr;
}
inline const ::flyteidl::core::TaskTemplate& TaskCreateRequest::template_() const {
  const ::flyteidl::core::TaskTemplate* p = template__;
  // @@protoc_insertion_point(field_get:flyteidl.service.TaskCreateRequest.template)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::TaskTemplate*>(
      &::flyteidl::core::_TaskTemplate_default_instance_);
}
inline ::flyteidl::core::TaskTemplate* TaskCreateRequest::release_template_() {
  // @@protoc_insertion_point(field_release:flyteidl.service.TaskCreateRequest.template)
  
  ::flyteidl::core::TaskTemplate* temp = template__;
  template__ = nullptr;
  return temp;
}
inline ::flyteidl::core::TaskTemplate* TaskCreateRequest::mutable_template_() {
  
  if (template__ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::TaskTemplate>(GetArenaNoVirtual());
    template__ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.service.TaskCreateRequest.template)
  return template__;
}
inline void TaskCreateRequest::set_allocated_template_(::flyteidl::core::TaskTemplate* template_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(template__);
  }
  if (template_) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      template_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, template_, submessage_arena);
    }
    
  } else {
    
  }
  template__ = template_;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.TaskCreateRequest.template)
}

// string output_prefix = 3;
inline void TaskCreateRequest::clear_output_prefix() {
  output_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskCreateRequest::output_prefix() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.TaskCreateRequest.output_prefix)
  return output_prefix_.GetNoArena();
}
inline void TaskCreateRequest::set_output_prefix(const ::std::string& value) {
  
  output_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.service.TaskCreateRequest.output_prefix)
}
#if LANG_CXX11
inline void TaskCreateRequest::set_output_prefix(::std::string&& value) {
  
  output_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.service.TaskCreateRequest.output_prefix)
}
#endif
inline void TaskCreateRequest::set_output_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  output_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.service.TaskCreateRequest.output_prefix)
}
inline void TaskCreateRequest::set_output_prefix(const char* value, size_t size) {
  
  output_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.TaskCreateRequest.output_prefix)
}
inline ::std::string* TaskCreateRequest::mutable_output_prefix() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.service.TaskCreateRequest.output_prefix)
  return output_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskCreateRequest::release_output_prefix() {
  // @@protoc_insertion_point(field_release:flyteidl.service.TaskCreateRequest.output_prefix)
  
  return output_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskCreateRequest::set_allocated_output_prefix(::std::string* output_prefix) {
  if (output_prefix != nullptr) {
    
  } else {
    
  }
  output_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_prefix);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.TaskCreateRequest.output_prefix)
}

// -------------------------------------------------------------------

// TaskCreateResponse

// string job_id = 1;
inline void TaskCreateResponse::clear_job_id() {
  job_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskCreateResponse::job_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.TaskCreateResponse.job_id)
  return job_id_.GetNoArena();
}
inline void TaskCreateResponse::set_job_id(const ::std::string& value) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.service.TaskCreateResponse.job_id)
}
#if LANG_CXX11
inline void TaskCreateResponse::set_job_id(::std::string&& value) {
  
  job_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.service.TaskCreateResponse.job_id)
}
#endif
inline void TaskCreateResponse::set_job_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.service.TaskCreateResponse.job_id)
}
inline void TaskCreateResponse::set_job_id(const char* value, size_t size) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.TaskCreateResponse.job_id)
}
inline ::std::string* TaskCreateResponse::mutable_job_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.service.TaskCreateResponse.job_id)
  return job_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskCreateResponse::release_job_id() {
  // @@protoc_insertion_point(field_release:flyteidl.service.TaskCreateResponse.job_id)
  
  return job_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskCreateResponse::set_allocated_job_id(::std::string* job_id) {
  if (job_id != nullptr) {
    
  } else {
    
  }
  job_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job_id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.TaskCreateResponse.job_id)
}

// -------------------------------------------------------------------

// TaskGetRequest

// string task_type = 1;
inline void TaskGetRequest::clear_task_type() {
  task_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskGetRequest::task_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.TaskGetRequest.task_type)
  return task_type_.GetNoArena();
}
inline void TaskGetRequest::set_task_type(const ::std::string& value) {
  
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.service.TaskGetRequest.task_type)
}
#if LANG_CXX11
inline void TaskGetRequest::set_task_type(::std::string&& value) {
  
  task_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.service.TaskGetRequest.task_type)
}
#endif
inline void TaskGetRequest::set_task_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.service.TaskGetRequest.task_type)
}
inline void TaskGetRequest::set_task_type(const char* value, size_t size) {
  
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.TaskGetRequest.task_type)
}
inline ::std::string* TaskGetRequest::mutable_task_type() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.service.TaskGetRequest.task_type)
  return task_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskGetRequest::release_task_type() {
  // @@protoc_insertion_point(field_release:flyteidl.service.TaskGetRequest.task_type)
  
  return task_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskGetRequest::set_allocated_task_type(::std::string* task_type) {
  if (task_type != nullptr) {
    
  } else {
    
  }
  task_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_type);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.TaskGetRequest.task_type)
}

// string job_id = 2;
inline void TaskGetRequest::clear_job_id() {
  job_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskGetRequest::job_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.TaskGetRequest.job_id)
  return job_id_.GetNoArena();
}
inline void TaskGetRequest::set_job_id(const ::std::string& value) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.service.TaskGetRequest.job_id)
}
#if LANG_CXX11
inline void TaskGetRequest::set_job_id(::std::string&& value) {
  
  job_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.service.TaskGetRequest.job_id)
}
#endif
inline void TaskGetRequest::set_job_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.service.TaskGetRequest.job_id)
}
inline void TaskGetRequest::set_job_id(const char* value, size_t size) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.TaskGetRequest.job_id)
}
inline ::std::string* TaskGetRequest::mutable_job_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.service.TaskGetRequest.job_id)
  return job_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskGetRequest::release_job_id() {
  // @@protoc_insertion_point(field_release:flyteidl.service.TaskGetRequest.job_id)
  
  return job_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskGetRequest::set_allocated_job_id(::std::string* job_id) {
  if (job_id != nullptr) {
    
  } else {
    
  }
  job_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job_id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.TaskGetRequest.job_id)
}

// -------------------------------------------------------------------

// TaskGetResponse

// .flyteidl.service.State state = 1;
inline void TaskGetResponse::clear_state() {
  state_ = 0;
}
inline ::flyteidl::service::State TaskGetResponse::state() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.TaskGetResponse.state)
  return static_cast< ::flyteidl::service::State >(state_);
}
inline void TaskGetResponse::set_state(::flyteidl::service::State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.service.TaskGetResponse.state)
}

// .flyteidl.core.LiteralMap outputs = 2;
inline bool TaskGetResponse::has_outputs() const {
  return this != internal_default_instance() && outputs_ != nullptr;
}
inline const ::flyteidl::core::LiteralMap& TaskGetResponse::outputs() const {
  const ::flyteidl::core::LiteralMap* p = outputs_;
  // @@protoc_insertion_point(field_get:flyteidl.service.TaskGetResponse.outputs)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::LiteralMap*>(
      &::flyteidl::core::_LiteralMap_default_instance_);
}
inline ::flyteidl::core::LiteralMap* TaskGetResponse::release_outputs() {
  // @@protoc_insertion_point(field_release:flyteidl.service.TaskGetResponse.outputs)
  
  ::flyteidl::core::LiteralMap* temp = outputs_;
  outputs_ = nullptr;
  return temp;
}
inline ::flyteidl::core::LiteralMap* TaskGetResponse::mutable_outputs() {
  
  if (outputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::LiteralMap>(GetArenaNoVirtual());
    outputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.service.TaskGetResponse.outputs)
  return outputs_;
}
inline void TaskGetResponse::set_allocated_outputs(::flyteidl::core::LiteralMap* outputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(outputs_);
  }
  if (outputs) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      outputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, outputs, submessage_arena);
    }
    
  } else {
    
  }
  outputs_ = outputs;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.TaskGetResponse.outputs)
}

// -------------------------------------------------------------------

// TaskDeleteRequest

// string task_type = 1;
inline void TaskDeleteRequest::clear_task_type() {
  task_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskDeleteRequest::task_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.TaskDeleteRequest.task_type)
  return task_type_.GetNoArena();
}
inline void TaskDeleteRequest::set_task_type(const ::std::string& value) {
  
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.service.TaskDeleteRequest.task_type)
}
#if LANG_CXX11
inline void TaskDeleteRequest::set_task_type(::std::string&& value) {
  
  task_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.service.TaskDeleteRequest.task_type)
}
#endif
inline void TaskDeleteRequest::set_task_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.service.TaskDeleteRequest.task_type)
}
inline void TaskDeleteRequest::set_task_type(const char* value, size_t size) {
  
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.TaskDeleteRequest.task_type)
}
inline ::std::string* TaskDeleteRequest::mutable_task_type() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.service.TaskDeleteRequest.task_type)
  return task_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskDeleteRequest::release_task_type() {
  // @@protoc_insertion_point(field_release:flyteidl.service.TaskDeleteRequest.task_type)
  
  return task_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskDeleteRequest::set_allocated_task_type(::std::string* task_type) {
  if (task_type != nullptr) {
    
  } else {
    
  }
  task_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_type);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.TaskDeleteRequest.task_type)
}

// string job_id = 2;
inline void TaskDeleteRequest::clear_job_id() {
  job_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskDeleteRequest::job_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.TaskDeleteRequest.job_id)
  return job_id_.GetNoArena();
}
inline void TaskDeleteRequest::set_job_id(const ::std::string& value) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.service.TaskDeleteRequest.job_id)
}
#if LANG_CXX11
inline void TaskDeleteRequest::set_job_id(::std::string&& value) {
  
  job_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.service.TaskDeleteRequest.job_id)
}
#endif
inline void TaskDeleteRequest::set_job_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.service.TaskDeleteRequest.job_id)
}
inline void TaskDeleteRequest::set_job_id(const char* value, size_t size) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.TaskDeleteRequest.job_id)
}
inline ::std::string* TaskDeleteRequest::mutable_job_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.service.TaskDeleteRequest.job_id)
  return job_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskDeleteRequest::release_job_id() {
  // @@protoc_insertion_point(field_release:flyteidl.service.TaskDeleteRequest.job_id)
  
  return job_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskDeleteRequest::set_allocated_job_id(::std::string* job_id) {
  if (job_id != nullptr) {
    
  } else {
    
  }
  job_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job_id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.TaskDeleteRequest.job_id)
}

// -------------------------------------------------------------------

// TaskDeleteResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service
}  // namespace flyteidl

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::flyteidl::service::State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::service::State>() {
  return ::flyteidl::service::State_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fservice_2fexternal_5fplugin_5fservice_2eproto
