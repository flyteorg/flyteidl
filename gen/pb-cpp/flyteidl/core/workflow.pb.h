// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/workflow.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fcore_2fworkflow_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fcore_2fworkflow_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/condition.pb.h"
#include "flyteidl/core/execution.pb.h"
#include "flyteidl/core/identifier.pb.h"
#include "flyteidl/core/interface.pb.h"
#include "flyteidl/core/literals.pb.h"
#include "flyteidl/core/tasks.pb.h"
#include "flyteidl/core/types.pb.h"
#include "flyteidl/core/security.pb.h"
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fworkflow_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fcore_2fworkflow_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fcore_2fworkflow_2eproto;
namespace flyteidl {
namespace core {
class Alias;
struct AliasDefaultTypeInternal;
extern AliasDefaultTypeInternal _Alias_default_instance_;
class BranchNode;
struct BranchNodeDefaultTypeInternal;
extern BranchNodeDefaultTypeInternal _BranchNode_default_instance_;
class IfBlock;
struct IfBlockDefaultTypeInternal;
extern IfBlockDefaultTypeInternal _IfBlock_default_instance_;
class IfElseBlock;
struct IfElseBlockDefaultTypeInternal;
extern IfElseBlockDefaultTypeInternal _IfElseBlock_default_instance_;
class Node;
struct NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class NodeMetadata;
struct NodeMetadataDefaultTypeInternal;
extern NodeMetadataDefaultTypeInternal _NodeMetadata_default_instance_;
class TaskNode;
struct TaskNodeDefaultTypeInternal;
extern TaskNodeDefaultTypeInternal _TaskNode_default_instance_;
class TaskNodeOverrides;
struct TaskNodeOverridesDefaultTypeInternal;
extern TaskNodeOverridesDefaultTypeInternal _TaskNodeOverrides_default_instance_;
class WorkflowMetadata;
struct WorkflowMetadataDefaultTypeInternal;
extern WorkflowMetadataDefaultTypeInternal _WorkflowMetadata_default_instance_;
class WorkflowMetadataDefaults;
struct WorkflowMetadataDefaultsDefaultTypeInternal;
extern WorkflowMetadataDefaultsDefaultTypeInternal _WorkflowMetadataDefaults_default_instance_;
class WorkflowNode;
struct WorkflowNodeDefaultTypeInternal;
extern WorkflowNodeDefaultTypeInternal _WorkflowNode_default_instance_;
class WorkflowTemplate;
struct WorkflowTemplateDefaultTypeInternal;
extern WorkflowTemplateDefaultTypeInternal _WorkflowTemplate_default_instance_;
}  // namespace core
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::core::Alias* Arena::CreateMaybeMessage<::flyteidl::core::Alias>(Arena*);
template<> ::flyteidl::core::BranchNode* Arena::CreateMaybeMessage<::flyteidl::core::BranchNode>(Arena*);
template<> ::flyteidl::core::IfBlock* Arena::CreateMaybeMessage<::flyteidl::core::IfBlock>(Arena*);
template<> ::flyteidl::core::IfElseBlock* Arena::CreateMaybeMessage<::flyteidl::core::IfElseBlock>(Arena*);
template<> ::flyteidl::core::Node* Arena::CreateMaybeMessage<::flyteidl::core::Node>(Arena*);
template<> ::flyteidl::core::NodeMetadata* Arena::CreateMaybeMessage<::flyteidl::core::NodeMetadata>(Arena*);
template<> ::flyteidl::core::TaskNode* Arena::CreateMaybeMessage<::flyteidl::core::TaskNode>(Arena*);
template<> ::flyteidl::core::TaskNodeOverrides* Arena::CreateMaybeMessage<::flyteidl::core::TaskNodeOverrides>(Arena*);
template<> ::flyteidl::core::WorkflowMetadata* Arena::CreateMaybeMessage<::flyteidl::core::WorkflowMetadata>(Arena*);
template<> ::flyteidl::core::WorkflowMetadataDefaults* Arena::CreateMaybeMessage<::flyteidl::core::WorkflowMetadataDefaults>(Arena*);
template<> ::flyteidl::core::WorkflowNode* Arena::CreateMaybeMessage<::flyteidl::core::WorkflowNode>(Arena*);
template<> ::flyteidl::core::WorkflowTemplate* Arena::CreateMaybeMessage<::flyteidl::core::WorkflowTemplate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace core {

enum WorkflowMetadata_OnFailurePolicy : int {
  WorkflowMetadata_OnFailurePolicy_FAIL_IMMEDIATELY = 0,
  WorkflowMetadata_OnFailurePolicy_FAIL_AFTER_EXECUTABLE_NODES_COMPLETE = 1,
  WorkflowMetadata_OnFailurePolicy_WorkflowMetadata_OnFailurePolicy_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WorkflowMetadata_OnFailurePolicy_WorkflowMetadata_OnFailurePolicy_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WorkflowMetadata_OnFailurePolicy_IsValid(int value);
constexpr WorkflowMetadata_OnFailurePolicy WorkflowMetadata_OnFailurePolicy_OnFailurePolicy_MIN = WorkflowMetadata_OnFailurePolicy_FAIL_IMMEDIATELY;
constexpr WorkflowMetadata_OnFailurePolicy WorkflowMetadata_OnFailurePolicy_OnFailurePolicy_MAX = WorkflowMetadata_OnFailurePolicy_FAIL_AFTER_EXECUTABLE_NODES_COMPLETE;
constexpr int WorkflowMetadata_OnFailurePolicy_OnFailurePolicy_ARRAYSIZE = WorkflowMetadata_OnFailurePolicy_OnFailurePolicy_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkflowMetadata_OnFailurePolicy_descriptor();
template<typename T>
inline const std::string& WorkflowMetadata_OnFailurePolicy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WorkflowMetadata_OnFailurePolicy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WorkflowMetadata_OnFailurePolicy_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WorkflowMetadata_OnFailurePolicy_descriptor(), enum_t_value);
}
inline bool WorkflowMetadata_OnFailurePolicy_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WorkflowMetadata_OnFailurePolicy* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WorkflowMetadata_OnFailurePolicy>(
    WorkflowMetadata_OnFailurePolicy_descriptor(), name, value);
}
// ===================================================================

class IfBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.IfBlock) */ {
 public:
  inline IfBlock() : IfBlock(nullptr) {}
  ~IfBlock() override;
  explicit constexpr IfBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IfBlock(const IfBlock& from);
  IfBlock(IfBlock&& from) noexcept
    : IfBlock() {
    *this = ::std::move(from);
  }

  inline IfBlock& operator=(const IfBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline IfBlock& operator=(IfBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IfBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const IfBlock* internal_default_instance() {
    return reinterpret_cast<const IfBlock*>(
               &_IfBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IfBlock& a, IfBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(IfBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IfBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IfBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IfBlock>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IfBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.IfBlock";
  }
  protected:
  explicit IfBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConditionFieldNumber = 1,
    kThenNodeFieldNumber = 2,
  };
  // .flyteidl.core.BooleanExpression condition = 1 [json_name = "condition"];
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::flyteidl::core::BooleanExpression& condition() const;
  PROTOBUF_NODISCARD ::flyteidl::core::BooleanExpression* release_condition();
  ::flyteidl::core::BooleanExpression* mutable_condition();
  void set_allocated_condition(::flyteidl::core::BooleanExpression* condition);
  private:
  const ::flyteidl::core::BooleanExpression& _internal_condition() const;
  ::flyteidl::core::BooleanExpression* _internal_mutable_condition();
  public:
  void unsafe_arena_set_allocated_condition(
      ::flyteidl::core::BooleanExpression* condition);
  ::flyteidl::core::BooleanExpression* unsafe_arena_release_condition();

  // .flyteidl.core.Node then_node = 2 [json_name = "thenNode"];
  bool has_then_node() const;
  private:
  bool _internal_has_then_node() const;
  public:
  void clear_then_node();
  const ::flyteidl::core::Node& then_node() const;
  PROTOBUF_NODISCARD ::flyteidl::core::Node* release_then_node();
  ::flyteidl::core::Node* mutable_then_node();
  void set_allocated_then_node(::flyteidl::core::Node* then_node);
  private:
  const ::flyteidl::core::Node& _internal_then_node() const;
  ::flyteidl::core::Node* _internal_mutable_then_node();
  public:
  void unsafe_arena_set_allocated_then_node(
      ::flyteidl::core::Node* then_node);
  ::flyteidl::core::Node* unsafe_arena_release_then_node();

  // @@protoc_insertion_point(class_scope:flyteidl.core.IfBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::BooleanExpression* condition_;
  ::flyteidl::core::Node* then_node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class IfElseBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.IfElseBlock) */ {
 public:
  inline IfElseBlock() : IfElseBlock(nullptr) {}
  ~IfElseBlock() override;
  explicit constexpr IfElseBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IfElseBlock(const IfElseBlock& from);
  IfElseBlock(IfElseBlock&& from) noexcept
    : IfElseBlock() {
    *this = ::std::move(from);
  }

  inline IfElseBlock& operator=(const IfElseBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline IfElseBlock& operator=(IfElseBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IfElseBlock& default_instance() {
    return *internal_default_instance();
  }
  enum DefaultCase {
    kElseNode = 3,
    kError = 4,
    DEFAULT_NOT_SET = 0,
  };

  static inline const IfElseBlock* internal_default_instance() {
    return reinterpret_cast<const IfElseBlock*>(
               &_IfElseBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IfElseBlock& a, IfElseBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(IfElseBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IfElseBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IfElseBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IfElseBlock>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IfElseBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.IfElseBlock";
  }
  protected:
  explicit IfElseBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOtherFieldNumber = 2,
    kCaseFieldNumber = 1,
    kElseNodeFieldNumber = 3,
    kErrorFieldNumber = 4,
  };
  // repeated .flyteidl.core.IfBlock other = 2 [json_name = "other"];
  int other_size() const;
  private:
  int _internal_other_size() const;
  public:
  void clear_other();
  ::flyteidl::core::IfBlock* mutable_other(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::IfBlock >*
      mutable_other();
  private:
  const ::flyteidl::core::IfBlock& _internal_other(int index) const;
  ::flyteidl::core::IfBlock* _internal_add_other();
  public:
  const ::flyteidl::core::IfBlock& other(int index) const;
  ::flyteidl::core::IfBlock* add_other();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::IfBlock >&
      other() const;

  // .flyteidl.core.IfBlock case = 1 [json_name = "case"];
  bool has_case_() const;
  private:
  bool _internal_has_case_() const;
  public:
  void clear_case_();
  const ::flyteidl::core::IfBlock& case_() const;
  PROTOBUF_NODISCARD ::flyteidl::core::IfBlock* release_case_();
  ::flyteidl::core::IfBlock* mutable_case_();
  void set_allocated_case_(::flyteidl::core::IfBlock* case_);
  private:
  const ::flyteidl::core::IfBlock& _internal_case_() const;
  ::flyteidl::core::IfBlock* _internal_mutable_case_();
  public:
  void unsafe_arena_set_allocated_case_(
      ::flyteidl::core::IfBlock* case_);
  ::flyteidl::core::IfBlock* unsafe_arena_release_case_();

  // .flyteidl.core.Node else_node = 3 [json_name = "elseNode"];
  bool has_else_node() const;
  private:
  bool _internal_has_else_node() const;
  public:
  void clear_else_node();
  const ::flyteidl::core::Node& else_node() const;
  PROTOBUF_NODISCARD ::flyteidl::core::Node* release_else_node();
  ::flyteidl::core::Node* mutable_else_node();
  void set_allocated_else_node(::flyteidl::core::Node* else_node);
  private:
  const ::flyteidl::core::Node& _internal_else_node() const;
  ::flyteidl::core::Node* _internal_mutable_else_node();
  public:
  void unsafe_arena_set_allocated_else_node(
      ::flyteidl::core::Node* else_node);
  ::flyteidl::core::Node* unsafe_arena_release_else_node();

  // .flyteidl.core.Error error = 4 [json_name = "error"];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::flyteidl::core::Error& error() const;
  PROTOBUF_NODISCARD ::flyteidl::core::Error* release_error();
  ::flyteidl::core::Error* mutable_error();
  void set_allocated_error(::flyteidl::core::Error* error);
  private:
  const ::flyteidl::core::Error& _internal_error() const;
  ::flyteidl::core::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::flyteidl::core::Error* error);
  ::flyteidl::core::Error* unsafe_arena_release_error();

  void clear_default();
  DefaultCase default_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.core.IfElseBlock)
 private:
  class _Internal;
  void set_has_else_node();
  void set_has_error();

  inline bool has_default() const;
  inline void clear_has_default();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::IfBlock > other_;
  ::flyteidl::core::IfBlock* case__;
  union DefaultUnion {
    constexpr DefaultUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::flyteidl::core::Node* else_node_;
    ::flyteidl::core::Error* error_;
  } default_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class BranchNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.BranchNode) */ {
 public:
  inline BranchNode() : BranchNode(nullptr) {}
  ~BranchNode() override;
  explicit constexpr BranchNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BranchNode(const BranchNode& from);
  BranchNode(BranchNode&& from) noexcept
    : BranchNode() {
    *this = ::std::move(from);
  }

  inline BranchNode& operator=(const BranchNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline BranchNode& operator=(BranchNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BranchNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const BranchNode* internal_default_instance() {
    return reinterpret_cast<const BranchNode*>(
               &_BranchNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BranchNode& a, BranchNode& b) {
    a.Swap(&b);
  }
  inline void Swap(BranchNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BranchNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BranchNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BranchNode>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BranchNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.BranchNode";
  }
  protected:
  explicit BranchNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIfElseFieldNumber = 1,
  };
  // .flyteidl.core.IfElseBlock if_else = 1 [json_name = "ifElse"];
  bool has_if_else() const;
  private:
  bool _internal_has_if_else() const;
  public:
  void clear_if_else();
  const ::flyteidl::core::IfElseBlock& if_else() const;
  PROTOBUF_NODISCARD ::flyteidl::core::IfElseBlock* release_if_else();
  ::flyteidl::core::IfElseBlock* mutable_if_else();
  void set_allocated_if_else(::flyteidl::core::IfElseBlock* if_else);
  private:
  const ::flyteidl::core::IfElseBlock& _internal_if_else() const;
  ::flyteidl::core::IfElseBlock* _internal_mutable_if_else();
  public:
  void unsafe_arena_set_allocated_if_else(
      ::flyteidl::core::IfElseBlock* if_else);
  ::flyteidl::core::IfElseBlock* unsafe_arena_release_if_else();

  // @@protoc_insertion_point(class_scope:flyteidl.core.BranchNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::IfElseBlock* if_else_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class TaskNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.TaskNode) */ {
 public:
  inline TaskNode() : TaskNode(nullptr) {}
  ~TaskNode() override;
  explicit constexpr TaskNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskNode(const TaskNode& from);
  TaskNode(TaskNode&& from) noexcept
    : TaskNode() {
    *this = ::std::move(from);
  }

  inline TaskNode& operator=(const TaskNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskNode& operator=(TaskNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskNode& default_instance() {
    return *internal_default_instance();
  }
  enum ReferenceCase {
    kReferenceId = 1,
    REFERENCE_NOT_SET = 0,
  };

  static inline const TaskNode* internal_default_instance() {
    return reinterpret_cast<const TaskNode*>(
               &_TaskNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TaskNode& a, TaskNode& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskNode>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.TaskNode";
  }
  protected:
  explicit TaskNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverridesFieldNumber = 2,
    kReferenceIdFieldNumber = 1,
  };
  // .flyteidl.core.TaskNodeOverrides overrides = 2 [json_name = "overrides"];
  bool has_overrides() const;
  private:
  bool _internal_has_overrides() const;
  public:
  void clear_overrides();
  const ::flyteidl::core::TaskNodeOverrides& overrides() const;
  PROTOBUF_NODISCARD ::flyteidl::core::TaskNodeOverrides* release_overrides();
  ::flyteidl::core::TaskNodeOverrides* mutable_overrides();
  void set_allocated_overrides(::flyteidl::core::TaskNodeOverrides* overrides);
  private:
  const ::flyteidl::core::TaskNodeOverrides& _internal_overrides() const;
  ::flyteidl::core::TaskNodeOverrides* _internal_mutable_overrides();
  public:
  void unsafe_arena_set_allocated_overrides(
      ::flyteidl::core::TaskNodeOverrides* overrides);
  ::flyteidl::core::TaskNodeOverrides* unsafe_arena_release_overrides();

  // .flyteidl.core.Identifier reference_id = 1 [json_name = "referenceId"];
  bool has_reference_id() const;
  private:
  bool _internal_has_reference_id() const;
  public:
  void clear_reference_id();
  const ::flyteidl::core::Identifier& reference_id() const;
  PROTOBUF_NODISCARD ::flyteidl::core::Identifier* release_reference_id();
  ::flyteidl::core::Identifier* mutable_reference_id();
  void set_allocated_reference_id(::flyteidl::core::Identifier* reference_id);
  private:
  const ::flyteidl::core::Identifier& _internal_reference_id() const;
  ::flyteidl::core::Identifier* _internal_mutable_reference_id();
  public:
  void unsafe_arena_set_allocated_reference_id(
      ::flyteidl::core::Identifier* reference_id);
  ::flyteidl::core::Identifier* unsafe_arena_release_reference_id();

  void clear_reference();
  ReferenceCase reference_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.core.TaskNode)
 private:
  class _Internal;
  void set_has_reference_id();

  inline bool has_reference() const;
  inline void clear_has_reference();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::TaskNodeOverrides* overrides_;
  union ReferenceUnion {
    constexpr ReferenceUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::flyteidl::core::Identifier* reference_id_;
  } reference_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class WorkflowNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.WorkflowNode) */ {
 public:
  inline WorkflowNode() : WorkflowNode(nullptr) {}
  ~WorkflowNode() override;
  explicit constexpr WorkflowNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowNode(const WorkflowNode& from);
  WorkflowNode(WorkflowNode&& from) noexcept
    : WorkflowNode() {
    *this = ::std::move(from);
  }

  inline WorkflowNode& operator=(const WorkflowNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowNode& operator=(WorkflowNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowNode& default_instance() {
    return *internal_default_instance();
  }
  enum ReferenceCase {
    kLaunchplanRef = 1,
    kSubWorkflowRef = 2,
    REFERENCE_NOT_SET = 0,
  };

  static inline const WorkflowNode* internal_default_instance() {
    return reinterpret_cast<const WorkflowNode*>(
               &_WorkflowNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WorkflowNode& a, WorkflowNode& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkflowNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkflowNode>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.WorkflowNode";
  }
  protected:
  explicit WorkflowNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaunchplanRefFieldNumber = 1,
    kSubWorkflowRefFieldNumber = 2,
  };
  // .flyteidl.core.Identifier launchplan_ref = 1 [json_name = "launchplanRef"];
  bool has_launchplan_ref() const;
  private:
  bool _internal_has_launchplan_ref() const;
  public:
  void clear_launchplan_ref();
  const ::flyteidl::core::Identifier& launchplan_ref() const;
  PROTOBUF_NODISCARD ::flyteidl::core::Identifier* release_launchplan_ref();
  ::flyteidl::core::Identifier* mutable_launchplan_ref();
  void set_allocated_launchplan_ref(::flyteidl::core::Identifier* launchplan_ref);
  private:
  const ::flyteidl::core::Identifier& _internal_launchplan_ref() const;
  ::flyteidl::core::Identifier* _internal_mutable_launchplan_ref();
  public:
  void unsafe_arena_set_allocated_launchplan_ref(
      ::flyteidl::core::Identifier* launchplan_ref);
  ::flyteidl::core::Identifier* unsafe_arena_release_launchplan_ref();

  // .flyteidl.core.Identifier sub_workflow_ref = 2 [json_name = "subWorkflowRef"];
  bool has_sub_workflow_ref() const;
  private:
  bool _internal_has_sub_workflow_ref() const;
  public:
  void clear_sub_workflow_ref();
  const ::flyteidl::core::Identifier& sub_workflow_ref() const;
  PROTOBUF_NODISCARD ::flyteidl::core::Identifier* release_sub_workflow_ref();
  ::flyteidl::core::Identifier* mutable_sub_workflow_ref();
  void set_allocated_sub_workflow_ref(::flyteidl::core::Identifier* sub_workflow_ref);
  private:
  const ::flyteidl::core::Identifier& _internal_sub_workflow_ref() const;
  ::flyteidl::core::Identifier* _internal_mutable_sub_workflow_ref();
  public:
  void unsafe_arena_set_allocated_sub_workflow_ref(
      ::flyteidl::core::Identifier* sub_workflow_ref);
  ::flyteidl::core::Identifier* unsafe_arena_release_sub_workflow_ref();

  void clear_reference();
  ReferenceCase reference_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.core.WorkflowNode)
 private:
  class _Internal;
  void set_has_launchplan_ref();
  void set_has_sub_workflow_ref();

  inline bool has_reference() const;
  inline void clear_has_reference();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ReferenceUnion {
    constexpr ReferenceUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::flyteidl::core::Identifier* launchplan_ref_;
    ::flyteidl::core::Identifier* sub_workflow_ref_;
  } reference_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class NodeMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.NodeMetadata) */ {
 public:
  inline NodeMetadata() : NodeMetadata(nullptr) {}
  ~NodeMetadata() override;
  explicit constexpr NodeMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeMetadata(const NodeMetadata& from);
  NodeMetadata(NodeMetadata&& from) noexcept
    : NodeMetadata() {
    *this = ::std::move(from);
  }

  inline NodeMetadata& operator=(const NodeMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeMetadata& operator=(NodeMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeMetadata& default_instance() {
    return *internal_default_instance();
  }
  enum InterruptibleValueCase {
    kInterruptible = 6,
    INTERRUPTIBLE_VALUE_NOT_SET = 0,
  };

  static inline const NodeMetadata* internal_default_instance() {
    return reinterpret_cast<const NodeMetadata*>(
               &_NodeMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NodeMetadata& a, NodeMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeMetadata>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.NodeMetadata";
  }
  protected:
  explicit NodeMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTimeoutFieldNumber = 4,
    kRetriesFieldNumber = 5,
    kInterruptibleFieldNumber = 6,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Duration timeout = 4 [json_name = "timeout"];
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  const ::PROTOBUF_NAMESPACE_ID::Duration& timeout() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_timeout();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_timeout();
  void set_allocated_timeout(::PROTOBUF_NAMESPACE_ID::Duration* timeout);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_timeout() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_timeout();
  public:
  void unsafe_arena_set_allocated_timeout(
      ::PROTOBUF_NAMESPACE_ID::Duration* timeout);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_timeout();

  // .flyteidl.core.RetryStrategy retries = 5 [json_name = "retries"];
  bool has_retries() const;
  private:
  bool _internal_has_retries() const;
  public:
  void clear_retries();
  const ::flyteidl::core::RetryStrategy& retries() const;
  PROTOBUF_NODISCARD ::flyteidl::core::RetryStrategy* release_retries();
  ::flyteidl::core::RetryStrategy* mutable_retries();
  void set_allocated_retries(::flyteidl::core::RetryStrategy* retries);
  private:
  const ::flyteidl::core::RetryStrategy& _internal_retries() const;
  ::flyteidl::core::RetryStrategy* _internal_mutable_retries();
  public:
  void unsafe_arena_set_allocated_retries(
      ::flyteidl::core::RetryStrategy* retries);
  ::flyteidl::core::RetryStrategy* unsafe_arena_release_retries();

  // bool interruptible = 6 [json_name = "interruptible"];
  bool has_interruptible() const;
  private:
  bool _internal_has_interruptible() const;
  public:
  void clear_interruptible();
  bool interruptible() const;
  void set_interruptible(bool value);
  private:
  bool _internal_interruptible() const;
  void _internal_set_interruptible(bool value);
  public:

  void clear_interruptible_value();
  InterruptibleValueCase interruptible_value_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.core.NodeMetadata)
 private:
  class _Internal;
  void set_has_interruptible();

  inline bool has_interruptible_value() const;
  inline void clear_has_interruptible_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::Duration* timeout_;
  ::flyteidl::core::RetryStrategy* retries_;
  union InterruptibleValueUnion {
    constexpr InterruptibleValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool interruptible_;
  } interruptible_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class Alias final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.Alias) */ {
 public:
  inline Alias() : Alias(nullptr) {}
  ~Alias() override;
  explicit constexpr Alias(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Alias(const Alias& from);
  Alias(Alias&& from) noexcept
    : Alias() {
    *this = ::std::move(from);
  }

  inline Alias& operator=(const Alias& from) {
    CopyFrom(from);
    return *this;
  }
  inline Alias& operator=(Alias&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Alias& default_instance() {
    return *internal_default_instance();
  }
  static inline const Alias* internal_default_instance() {
    return reinterpret_cast<const Alias*>(
               &_Alias_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Alias& a, Alias& b) {
    a.Swap(&b);
  }
  inline void Swap(Alias* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Alias* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Alias* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Alias>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Alias* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.Alias";
  }
  protected:
  explicit Alias(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarFieldNumber = 1,
    kAliasFieldNumber = 2,
  };
  // string var = 1 [json_name = "var"];
  void clear_var();
  const std::string& var() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var();
  PROTOBUF_NODISCARD std::string* release_var();
  void set_allocated_var(std::string* var);
  private:
  const std::string& _internal_var() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var(const std::string& value);
  std::string* _internal_mutable_var();
  public:

  // string alias = 2 [json_name = "alias"];
  void clear_alias();
  const std::string& alias() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alias(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alias();
  PROTOBUF_NODISCARD std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.core.Alias)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class Node final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.Node) */ {
 public:
  inline Node() : Node(nullptr) {}
  ~Node() override;
  explicit constexpr Node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Node& default_instance() {
    return *internal_default_instance();
  }
  enum TargetCase {
    kTaskNode = 6,
    kWorkflowNode = 7,
    kBranchNode = 8,
    TARGET_NOT_SET = 0,
  };

  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.Node";
  }
  protected:
  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 3,
    kUpstreamNodeIdsFieldNumber = 4,
    kOutputAliasesFieldNumber = 5,
    kIdFieldNumber = 1,
    kMetadataFieldNumber = 2,
    kTaskNodeFieldNumber = 6,
    kWorkflowNodeFieldNumber = 7,
    kBranchNodeFieldNumber = 8,
  };
  // repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::flyteidl::core::Binding* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Binding >*
      mutable_inputs();
  private:
  const ::flyteidl::core::Binding& _internal_inputs(int index) const;
  ::flyteidl::core::Binding* _internal_add_inputs();
  public:
  const ::flyteidl::core::Binding& inputs(int index) const;
  ::flyteidl::core::Binding* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Binding >&
      inputs() const;

  // repeated string upstream_node_ids = 4 [json_name = "upstreamNodeIds"];
  int upstream_node_ids_size() const;
  private:
  int _internal_upstream_node_ids_size() const;
  public:
  void clear_upstream_node_ids();
  const std::string& upstream_node_ids(int index) const;
  std::string* mutable_upstream_node_ids(int index);
  void set_upstream_node_ids(int index, const std::string& value);
  void set_upstream_node_ids(int index, std::string&& value);
  void set_upstream_node_ids(int index, const char* value);
  void set_upstream_node_ids(int index, const char* value, size_t size);
  std::string* add_upstream_node_ids();
  void add_upstream_node_ids(const std::string& value);
  void add_upstream_node_ids(std::string&& value);
  void add_upstream_node_ids(const char* value);
  void add_upstream_node_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& upstream_node_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_upstream_node_ids();
  private:
  const std::string& _internal_upstream_node_ids(int index) const;
  std::string* _internal_add_upstream_node_ids();
  public:

  // repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];
  int output_aliases_size() const;
  private:
  int _internal_output_aliases_size() const;
  public:
  void clear_output_aliases();
  ::flyteidl::core::Alias* mutable_output_aliases(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Alias >*
      mutable_output_aliases();
  private:
  const ::flyteidl::core::Alias& _internal_output_aliases(int index) const;
  ::flyteidl::core::Alias* _internal_add_output_aliases();
  public:
  const ::flyteidl::core::Alias& output_aliases(int index) const;
  ::flyteidl::core::Alias* add_output_aliases();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Alias >&
      output_aliases() const;

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .flyteidl.core.NodeMetadata metadata = 2 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::flyteidl::core::NodeMetadata& metadata() const;
  PROTOBUF_NODISCARD ::flyteidl::core::NodeMetadata* release_metadata();
  ::flyteidl::core::NodeMetadata* mutable_metadata();
  void set_allocated_metadata(::flyteidl::core::NodeMetadata* metadata);
  private:
  const ::flyteidl::core::NodeMetadata& _internal_metadata() const;
  ::flyteidl::core::NodeMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::flyteidl::core::NodeMetadata* metadata);
  ::flyteidl::core::NodeMetadata* unsafe_arena_release_metadata();

  // .flyteidl.core.TaskNode task_node = 6 [json_name = "taskNode"];
  bool has_task_node() const;
  private:
  bool _internal_has_task_node() const;
  public:
  void clear_task_node();
  const ::flyteidl::core::TaskNode& task_node() const;
  PROTOBUF_NODISCARD ::flyteidl::core::TaskNode* release_task_node();
  ::flyteidl::core::TaskNode* mutable_task_node();
  void set_allocated_task_node(::flyteidl::core::TaskNode* task_node);
  private:
  const ::flyteidl::core::TaskNode& _internal_task_node() const;
  ::flyteidl::core::TaskNode* _internal_mutable_task_node();
  public:
  void unsafe_arena_set_allocated_task_node(
      ::flyteidl::core::TaskNode* task_node);
  ::flyteidl::core::TaskNode* unsafe_arena_release_task_node();

  // .flyteidl.core.WorkflowNode workflow_node = 7 [json_name = "workflowNode"];
  bool has_workflow_node() const;
  private:
  bool _internal_has_workflow_node() const;
  public:
  void clear_workflow_node();
  const ::flyteidl::core::WorkflowNode& workflow_node() const;
  PROTOBUF_NODISCARD ::flyteidl::core::WorkflowNode* release_workflow_node();
  ::flyteidl::core::WorkflowNode* mutable_workflow_node();
  void set_allocated_workflow_node(::flyteidl::core::WorkflowNode* workflow_node);
  private:
  const ::flyteidl::core::WorkflowNode& _internal_workflow_node() const;
  ::flyteidl::core::WorkflowNode* _internal_mutable_workflow_node();
  public:
  void unsafe_arena_set_allocated_workflow_node(
      ::flyteidl::core::WorkflowNode* workflow_node);
  ::flyteidl::core::WorkflowNode* unsafe_arena_release_workflow_node();

  // .flyteidl.core.BranchNode branch_node = 8 [json_name = "branchNode"];
  bool has_branch_node() const;
  private:
  bool _internal_has_branch_node() const;
  public:
  void clear_branch_node();
  const ::flyteidl::core::BranchNode& branch_node() const;
  PROTOBUF_NODISCARD ::flyteidl::core::BranchNode* release_branch_node();
  ::flyteidl::core::BranchNode* mutable_branch_node();
  void set_allocated_branch_node(::flyteidl::core::BranchNode* branch_node);
  private:
  const ::flyteidl::core::BranchNode& _internal_branch_node() const;
  ::flyteidl::core::BranchNode* _internal_mutable_branch_node();
  public:
  void unsafe_arena_set_allocated_branch_node(
      ::flyteidl::core::BranchNode* branch_node);
  ::flyteidl::core::BranchNode* unsafe_arena_release_branch_node();

  void clear_target();
  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.core.Node)
 private:
  class _Internal;
  void set_has_task_node();
  void set_has_workflow_node();
  void set_has_branch_node();

  inline bool has_target() const;
  inline void clear_has_target();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Binding > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> upstream_node_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Alias > output_aliases_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::flyteidl::core::NodeMetadata* metadata_;
  union TargetUnion {
    constexpr TargetUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::flyteidl::core::TaskNode* task_node_;
    ::flyteidl::core::WorkflowNode* workflow_node_;
    ::flyteidl::core::BranchNode* branch_node_;
  } target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class WorkflowMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.WorkflowMetadata) */ {
 public:
  inline WorkflowMetadata() : WorkflowMetadata(nullptr) {}
  ~WorkflowMetadata() override;
  explicit constexpr WorkflowMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowMetadata(const WorkflowMetadata& from);
  WorkflowMetadata(WorkflowMetadata&& from) noexcept
    : WorkflowMetadata() {
    *this = ::std::move(from);
  }

  inline WorkflowMetadata& operator=(const WorkflowMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowMetadata& operator=(WorkflowMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowMetadata* internal_default_instance() {
    return reinterpret_cast<const WorkflowMetadata*>(
               &_WorkflowMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(WorkflowMetadata& a, WorkflowMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkflowMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkflowMetadata>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.WorkflowMetadata";
  }
  protected:
  explicit WorkflowMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WorkflowMetadata_OnFailurePolicy OnFailurePolicy;
  static constexpr OnFailurePolicy FAIL_IMMEDIATELY =
    WorkflowMetadata_OnFailurePolicy_FAIL_IMMEDIATELY;
  static constexpr OnFailurePolicy FAIL_AFTER_EXECUTABLE_NODES_COMPLETE =
    WorkflowMetadata_OnFailurePolicy_FAIL_AFTER_EXECUTABLE_NODES_COMPLETE;
  static inline bool OnFailurePolicy_IsValid(int value) {
    return WorkflowMetadata_OnFailurePolicy_IsValid(value);
  }
  static constexpr OnFailurePolicy OnFailurePolicy_MIN =
    WorkflowMetadata_OnFailurePolicy_OnFailurePolicy_MIN;
  static constexpr OnFailurePolicy OnFailurePolicy_MAX =
    WorkflowMetadata_OnFailurePolicy_OnFailurePolicy_MAX;
  static constexpr int OnFailurePolicy_ARRAYSIZE =
    WorkflowMetadata_OnFailurePolicy_OnFailurePolicy_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OnFailurePolicy_descriptor() {
    return WorkflowMetadata_OnFailurePolicy_descriptor();
  }
  template<typename T>
  static inline const std::string& OnFailurePolicy_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OnFailurePolicy>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OnFailurePolicy_Name.");
    return WorkflowMetadata_OnFailurePolicy_Name(enum_t_value);
  }
  static inline bool OnFailurePolicy_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OnFailurePolicy* value) {
    return WorkflowMetadata_OnFailurePolicy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kQualityOfServiceFieldNumber = 1,
    kOnFailureFieldNumber = 2,
  };
  // .flyteidl.core.QualityOfService quality_of_service = 1 [json_name = "qualityOfService"];
  bool has_quality_of_service() const;
  private:
  bool _internal_has_quality_of_service() const;
  public:
  void clear_quality_of_service();
  const ::flyteidl::core::QualityOfService& quality_of_service() const;
  PROTOBUF_NODISCARD ::flyteidl::core::QualityOfService* release_quality_of_service();
  ::flyteidl::core::QualityOfService* mutable_quality_of_service();
  void set_allocated_quality_of_service(::flyteidl::core::QualityOfService* quality_of_service);
  private:
  const ::flyteidl::core::QualityOfService& _internal_quality_of_service() const;
  ::flyteidl::core::QualityOfService* _internal_mutable_quality_of_service();
  public:
  void unsafe_arena_set_allocated_quality_of_service(
      ::flyteidl::core::QualityOfService* quality_of_service);
  ::flyteidl::core::QualityOfService* unsafe_arena_release_quality_of_service();

  // .flyteidl.core.WorkflowMetadata.OnFailurePolicy on_failure = 2 [json_name = "onFailure"];
  void clear_on_failure();
  ::flyteidl::core::WorkflowMetadata_OnFailurePolicy on_failure() const;
  void set_on_failure(::flyteidl::core::WorkflowMetadata_OnFailurePolicy value);
  private:
  ::flyteidl::core::WorkflowMetadata_OnFailurePolicy _internal_on_failure() const;
  void _internal_set_on_failure(::flyteidl::core::WorkflowMetadata_OnFailurePolicy value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.core.WorkflowMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::QualityOfService* quality_of_service_;
  int on_failure_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class WorkflowMetadataDefaults final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.WorkflowMetadataDefaults) */ {
 public:
  inline WorkflowMetadataDefaults() : WorkflowMetadataDefaults(nullptr) {}
  ~WorkflowMetadataDefaults() override;
  explicit constexpr WorkflowMetadataDefaults(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowMetadataDefaults(const WorkflowMetadataDefaults& from);
  WorkflowMetadataDefaults(WorkflowMetadataDefaults&& from) noexcept
    : WorkflowMetadataDefaults() {
    *this = ::std::move(from);
  }

  inline WorkflowMetadataDefaults& operator=(const WorkflowMetadataDefaults& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowMetadataDefaults& operator=(WorkflowMetadataDefaults&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowMetadataDefaults& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowMetadataDefaults* internal_default_instance() {
    return reinterpret_cast<const WorkflowMetadataDefaults*>(
               &_WorkflowMetadataDefaults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(WorkflowMetadataDefaults& a, WorkflowMetadataDefaults& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowMetadataDefaults* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowMetadataDefaults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkflowMetadataDefaults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkflowMetadataDefaults>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowMetadataDefaults* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.WorkflowMetadataDefaults";
  }
  protected:
  explicit WorkflowMetadataDefaults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterruptibleFieldNumber = 1,
  };
  // bool interruptible = 1 [json_name = "interruptible"];
  void clear_interruptible();
  bool interruptible() const;
  void set_interruptible(bool value);
  private:
  bool _internal_interruptible() const;
  void _internal_set_interruptible(bool value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.core.WorkflowMetadataDefaults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool interruptible_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class WorkflowTemplate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.WorkflowTemplate) */ {
 public:
  inline WorkflowTemplate() : WorkflowTemplate(nullptr) {}
  ~WorkflowTemplate() override;
  explicit constexpr WorkflowTemplate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowTemplate(const WorkflowTemplate& from);
  WorkflowTemplate(WorkflowTemplate&& from) noexcept
    : WorkflowTemplate() {
    *this = ::std::move(from);
  }

  inline WorkflowTemplate& operator=(const WorkflowTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowTemplate& operator=(WorkflowTemplate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowTemplate& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowTemplate* internal_default_instance() {
    return reinterpret_cast<const WorkflowTemplate*>(
               &_WorkflowTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(WorkflowTemplate& a, WorkflowTemplate& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowTemplate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowTemplate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkflowTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkflowTemplate>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowTemplate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.WorkflowTemplate";
  }
  protected:
  explicit WorkflowTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 4,
    kOutputsFieldNumber = 5,
    kIdFieldNumber = 1,
    kMetadataFieldNumber = 2,
    kInterfaceFieldNumber = 3,
    kFailureNodeFieldNumber = 6,
    kMetadataDefaultsFieldNumber = 7,
  };
  // repeated .flyteidl.core.Node nodes = 4 [json_name = "nodes"];
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::flyteidl::core::Node* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Node >*
      mutable_nodes();
  private:
  const ::flyteidl::core::Node& _internal_nodes(int index) const;
  ::flyteidl::core::Node* _internal_add_nodes();
  public:
  const ::flyteidl::core::Node& nodes(int index) const;
  ::flyteidl::core::Node* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Node >&
      nodes() const;

  // repeated .flyteidl.core.Binding outputs = 5 [json_name = "outputs"];
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::flyteidl::core::Binding* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Binding >*
      mutable_outputs();
  private:
  const ::flyteidl::core::Binding& _internal_outputs(int index) const;
  ::flyteidl::core::Binding* _internal_add_outputs();
  public:
  const ::flyteidl::core::Binding& outputs(int index) const;
  ::flyteidl::core::Binding* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Binding >&
      outputs() const;

  // .flyteidl.core.Identifier id = 1 [json_name = "id"];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::flyteidl::core::Identifier& id() const;
  PROTOBUF_NODISCARD ::flyteidl::core::Identifier* release_id();
  ::flyteidl::core::Identifier* mutable_id();
  void set_allocated_id(::flyteidl::core::Identifier* id);
  private:
  const ::flyteidl::core::Identifier& _internal_id() const;
  ::flyteidl::core::Identifier* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::flyteidl::core::Identifier* id);
  ::flyteidl::core::Identifier* unsafe_arena_release_id();

  // .flyteidl.core.WorkflowMetadata metadata = 2 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::flyteidl::core::WorkflowMetadata& metadata() const;
  PROTOBUF_NODISCARD ::flyteidl::core::WorkflowMetadata* release_metadata();
  ::flyteidl::core::WorkflowMetadata* mutable_metadata();
  void set_allocated_metadata(::flyteidl::core::WorkflowMetadata* metadata);
  private:
  const ::flyteidl::core::WorkflowMetadata& _internal_metadata() const;
  ::flyteidl::core::WorkflowMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::flyteidl::core::WorkflowMetadata* metadata);
  ::flyteidl::core::WorkflowMetadata* unsafe_arena_release_metadata();

  // .flyteidl.core.TypedInterface interface = 3 [json_name = "interface"];
  bool has_interface() const;
  private:
  bool _internal_has_interface() const;
  public:
  void clear_interface();
  const ::flyteidl::core::TypedInterface& interface() const;
  PROTOBUF_NODISCARD ::flyteidl::core::TypedInterface* release_interface();
  ::flyteidl::core::TypedInterface* mutable_interface();
  void set_allocated_interface(::flyteidl::core::TypedInterface* interface);
  private:
  const ::flyteidl::core::TypedInterface& _internal_interface() const;
  ::flyteidl::core::TypedInterface* _internal_mutable_interface();
  public:
  void unsafe_arena_set_allocated_interface(
      ::flyteidl::core::TypedInterface* interface);
  ::flyteidl::core::TypedInterface* unsafe_arena_release_interface();

  // .flyteidl.core.Node failure_node = 6 [json_name = "failureNode"];
  bool has_failure_node() const;
  private:
  bool _internal_has_failure_node() const;
  public:
  void clear_failure_node();
  const ::flyteidl::core::Node& failure_node() const;
  PROTOBUF_NODISCARD ::flyteidl::core::Node* release_failure_node();
  ::flyteidl::core::Node* mutable_failure_node();
  void set_allocated_failure_node(::flyteidl::core::Node* failure_node);
  private:
  const ::flyteidl::core::Node& _internal_failure_node() const;
  ::flyteidl::core::Node* _internal_mutable_failure_node();
  public:
  void unsafe_arena_set_allocated_failure_node(
      ::flyteidl::core::Node* failure_node);
  ::flyteidl::core::Node* unsafe_arena_release_failure_node();

  // .flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7 [json_name = "metadataDefaults"];
  bool has_metadata_defaults() const;
  private:
  bool _internal_has_metadata_defaults() const;
  public:
  void clear_metadata_defaults();
  const ::flyteidl::core::WorkflowMetadataDefaults& metadata_defaults() const;
  PROTOBUF_NODISCARD ::flyteidl::core::WorkflowMetadataDefaults* release_metadata_defaults();
  ::flyteidl::core::WorkflowMetadataDefaults* mutable_metadata_defaults();
  void set_allocated_metadata_defaults(::flyteidl::core::WorkflowMetadataDefaults* metadata_defaults);
  private:
  const ::flyteidl::core::WorkflowMetadataDefaults& _internal_metadata_defaults() const;
  ::flyteidl::core::WorkflowMetadataDefaults* _internal_mutable_metadata_defaults();
  public:
  void unsafe_arena_set_allocated_metadata_defaults(
      ::flyteidl::core::WorkflowMetadataDefaults* metadata_defaults);
  ::flyteidl::core::WorkflowMetadataDefaults* unsafe_arena_release_metadata_defaults();

  // @@protoc_insertion_point(class_scope:flyteidl.core.WorkflowTemplate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Node > nodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Binding > outputs_;
  ::flyteidl::core::Identifier* id_;
  ::flyteidl::core::WorkflowMetadata* metadata_;
  ::flyteidl::core::TypedInterface* interface_;
  ::flyteidl::core::Node* failure_node_;
  ::flyteidl::core::WorkflowMetadataDefaults* metadata_defaults_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class TaskNodeOverrides final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.TaskNodeOverrides) */ {
 public:
  inline TaskNodeOverrides() : TaskNodeOverrides(nullptr) {}
  ~TaskNodeOverrides() override;
  explicit constexpr TaskNodeOverrides(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskNodeOverrides(const TaskNodeOverrides& from);
  TaskNodeOverrides(TaskNodeOverrides&& from) noexcept
    : TaskNodeOverrides() {
    *this = ::std::move(from);
  }

  inline TaskNodeOverrides& operator=(const TaskNodeOverrides& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskNodeOverrides& operator=(TaskNodeOverrides&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskNodeOverrides& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskNodeOverrides* internal_default_instance() {
    return reinterpret_cast<const TaskNodeOverrides*>(
               &_TaskNodeOverrides_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TaskNodeOverrides& a, TaskNodeOverrides& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskNodeOverrides* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskNodeOverrides* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskNodeOverrides* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskNodeOverrides>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskNodeOverrides* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.TaskNodeOverrides";
  }
  protected:
  explicit TaskNodeOverrides(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourcesFieldNumber = 1,
  };
  // .flyteidl.core.Resources resources = 1 [json_name = "resources"];
  bool has_resources() const;
  private:
  bool _internal_has_resources() const;
  public:
  void clear_resources();
  const ::flyteidl::core::Resources& resources() const;
  PROTOBUF_NODISCARD ::flyteidl::core::Resources* release_resources();
  ::flyteidl::core::Resources* mutable_resources();
  void set_allocated_resources(::flyteidl::core::Resources* resources);
  private:
  const ::flyteidl::core::Resources& _internal_resources() const;
  ::flyteidl::core::Resources* _internal_mutable_resources();
  public:
  void unsafe_arena_set_allocated_resources(
      ::flyteidl::core::Resources* resources);
  ::flyteidl::core::Resources* unsafe_arena_release_resources();

  // @@protoc_insertion_point(class_scope:flyteidl.core.TaskNodeOverrides)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::Resources* resources_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IfBlock

// .flyteidl.core.BooleanExpression condition = 1 [json_name = "condition"];
inline bool IfBlock::_internal_has_condition() const {
  return this != internal_default_instance() && condition_ != nullptr;
}
inline bool IfBlock::has_condition() const {
  return _internal_has_condition();
}
inline const ::flyteidl::core::BooleanExpression& IfBlock::_internal_condition() const {
  const ::flyteidl::core::BooleanExpression* p = condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::BooleanExpression&>(
      ::flyteidl::core::_BooleanExpression_default_instance_);
}
inline const ::flyteidl::core::BooleanExpression& IfBlock::condition() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.IfBlock.condition)
  return _internal_condition();
}
inline void IfBlock::unsafe_arena_set_allocated_condition(
    ::flyteidl::core::BooleanExpression* condition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition_);
  }
  condition_ = condition;
  if (condition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.IfBlock.condition)
}
inline ::flyteidl::core::BooleanExpression* IfBlock::release_condition() {
  
  ::flyteidl::core::BooleanExpression* temp = condition_;
  condition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::BooleanExpression* IfBlock::unsafe_arena_release_condition() {
  // @@protoc_insertion_point(field_release:flyteidl.core.IfBlock.condition)
  
  ::flyteidl::core::BooleanExpression* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::flyteidl::core::BooleanExpression* IfBlock::_internal_mutable_condition() {
  
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::BooleanExpression>(GetArenaForAllocation());
    condition_ = p;
  }
  return condition_;
}
inline ::flyteidl::core::BooleanExpression* IfBlock::mutable_condition() {
  ::flyteidl::core::BooleanExpression* _msg = _internal_mutable_condition();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.IfBlock.condition)
  return _msg;
}
inline void IfBlock::set_allocated_condition(::flyteidl::core::BooleanExpression* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition_);
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition));
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.IfBlock.condition)
}

// .flyteidl.core.Node then_node = 2 [json_name = "thenNode"];
inline bool IfBlock::_internal_has_then_node() const {
  return this != internal_default_instance() && then_node_ != nullptr;
}
inline bool IfBlock::has_then_node() const {
  return _internal_has_then_node();
}
inline void IfBlock::clear_then_node() {
  if (GetArenaForAllocation() == nullptr && then_node_ != nullptr) {
    delete then_node_;
  }
  then_node_ = nullptr;
}
inline const ::flyteidl::core::Node& IfBlock::_internal_then_node() const {
  const ::flyteidl::core::Node* p = then_node_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::Node&>(
      ::flyteidl::core::_Node_default_instance_);
}
inline const ::flyteidl::core::Node& IfBlock::then_node() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.IfBlock.then_node)
  return _internal_then_node();
}
inline void IfBlock::unsafe_arena_set_allocated_then_node(
    ::flyteidl::core::Node* then_node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(then_node_);
  }
  then_node_ = then_node;
  if (then_node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.IfBlock.then_node)
}
inline ::flyteidl::core::Node* IfBlock::release_then_node() {
  
  ::flyteidl::core::Node* temp = then_node_;
  then_node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::Node* IfBlock::unsafe_arena_release_then_node() {
  // @@protoc_insertion_point(field_release:flyteidl.core.IfBlock.then_node)
  
  ::flyteidl::core::Node* temp = then_node_;
  then_node_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Node* IfBlock::_internal_mutable_then_node() {
  
  if (then_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Node>(GetArenaForAllocation());
    then_node_ = p;
  }
  return then_node_;
}
inline ::flyteidl::core::Node* IfBlock::mutable_then_node() {
  ::flyteidl::core::Node* _msg = _internal_mutable_then_node();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.IfBlock.then_node)
  return _msg;
}
inline void IfBlock::set_allocated_then_node(::flyteidl::core::Node* then_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete then_node_;
  }
  if (then_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::Node>::GetOwningArena(then_node);
    if (message_arena != submessage_arena) {
      then_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, then_node, submessage_arena);
    }
    
  } else {
    
  }
  then_node_ = then_node;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.IfBlock.then_node)
}

// -------------------------------------------------------------------

// IfElseBlock

// .flyteidl.core.IfBlock case = 1 [json_name = "case"];
inline bool IfElseBlock::_internal_has_case_() const {
  return this != internal_default_instance() && case__ != nullptr;
}
inline bool IfElseBlock::has_case_() const {
  return _internal_has_case_();
}
inline void IfElseBlock::clear_case_() {
  if (GetArenaForAllocation() == nullptr && case__ != nullptr) {
    delete case__;
  }
  case__ = nullptr;
}
inline const ::flyteidl::core::IfBlock& IfElseBlock::_internal_case_() const {
  const ::flyteidl::core::IfBlock* p = case__;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::IfBlock&>(
      ::flyteidl::core::_IfBlock_default_instance_);
}
inline const ::flyteidl::core::IfBlock& IfElseBlock::case_() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.IfElseBlock.case)
  return _internal_case_();
}
inline void IfElseBlock::unsafe_arena_set_allocated_case_(
    ::flyteidl::core::IfBlock* case_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(case__);
  }
  case__ = case_;
  if (case_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.IfElseBlock.case)
}
inline ::flyteidl::core::IfBlock* IfElseBlock::release_case_() {
  
  ::flyteidl::core::IfBlock* temp = case__;
  case__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::IfBlock* IfElseBlock::unsafe_arena_release_case_() {
  // @@protoc_insertion_point(field_release:flyteidl.core.IfElseBlock.case)
  
  ::flyteidl::core::IfBlock* temp = case__;
  case__ = nullptr;
  return temp;
}
inline ::flyteidl::core::IfBlock* IfElseBlock::_internal_mutable_case_() {
  
  if (case__ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::IfBlock>(GetArenaForAllocation());
    case__ = p;
  }
  return case__;
}
inline ::flyteidl::core::IfBlock* IfElseBlock::mutable_case_() {
  ::flyteidl::core::IfBlock* _msg = _internal_mutable_case_();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.IfElseBlock.case)
  return _msg;
}
inline void IfElseBlock::set_allocated_case_(::flyteidl::core::IfBlock* case_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete case__;
  }
  if (case_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::IfBlock>::GetOwningArena(case_);
    if (message_arena != submessage_arena) {
      case_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, case_, submessage_arena);
    }
    
  } else {
    
  }
  case__ = case_;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.IfElseBlock.case)
}

// repeated .flyteidl.core.IfBlock other = 2 [json_name = "other"];
inline int IfElseBlock::_internal_other_size() const {
  return other_.size();
}
inline int IfElseBlock::other_size() const {
  return _internal_other_size();
}
inline void IfElseBlock::clear_other() {
  other_.Clear();
}
inline ::flyteidl::core::IfBlock* IfElseBlock::mutable_other(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.IfElseBlock.other)
  return other_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::IfBlock >*
IfElseBlock::mutable_other() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.IfElseBlock.other)
  return &other_;
}
inline const ::flyteidl::core::IfBlock& IfElseBlock::_internal_other(int index) const {
  return other_.Get(index);
}
inline const ::flyteidl::core::IfBlock& IfElseBlock::other(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.IfElseBlock.other)
  return _internal_other(index);
}
inline ::flyteidl::core::IfBlock* IfElseBlock::_internal_add_other() {
  return other_.Add();
}
inline ::flyteidl::core::IfBlock* IfElseBlock::add_other() {
  ::flyteidl::core::IfBlock* _add = _internal_add_other();
  // @@protoc_insertion_point(field_add:flyteidl.core.IfElseBlock.other)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::IfBlock >&
IfElseBlock::other() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.IfElseBlock.other)
  return other_;
}

// .flyteidl.core.Node else_node = 3 [json_name = "elseNode"];
inline bool IfElseBlock::_internal_has_else_node() const {
  return default_case() == kElseNode;
}
inline bool IfElseBlock::has_else_node() const {
  return _internal_has_else_node();
}
inline void IfElseBlock::set_has_else_node() {
  _oneof_case_[0] = kElseNode;
}
inline void IfElseBlock::clear_else_node() {
  if (_internal_has_else_node()) {
    if (GetArenaForAllocation() == nullptr) {
      delete default_.else_node_;
    }
    clear_has_default();
  }
}
inline ::flyteidl::core::Node* IfElseBlock::release_else_node() {
  // @@protoc_insertion_point(field_release:flyteidl.core.IfElseBlock.else_node)
  if (_internal_has_else_node()) {
    clear_has_default();
      ::flyteidl::core::Node* temp = default_.else_node_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    default_.else_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::Node& IfElseBlock::_internal_else_node() const {
  return _internal_has_else_node()
      ? *default_.else_node_
      : reinterpret_cast< ::flyteidl::core::Node&>(::flyteidl::core::_Node_default_instance_);
}
inline const ::flyteidl::core::Node& IfElseBlock::else_node() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.IfElseBlock.else_node)
  return _internal_else_node();
}
inline ::flyteidl::core::Node* IfElseBlock::unsafe_arena_release_else_node() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.core.IfElseBlock.else_node)
  if (_internal_has_else_node()) {
    clear_has_default();
    ::flyteidl::core::Node* temp = default_.else_node_;
    default_.else_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void IfElseBlock::unsafe_arena_set_allocated_else_node(::flyteidl::core::Node* else_node) {
  clear_default();
  if (else_node) {
    set_has_else_node();
    default_.else_node_ = else_node;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.IfElseBlock.else_node)
}
inline ::flyteidl::core::Node* IfElseBlock::_internal_mutable_else_node() {
  if (!_internal_has_else_node()) {
    clear_default();
    set_has_else_node();
    default_.else_node_ = CreateMaybeMessage< ::flyteidl::core::Node >(GetArenaForAllocation());
  }
  return default_.else_node_;
}
inline ::flyteidl::core::Node* IfElseBlock::mutable_else_node() {
  ::flyteidl::core::Node* _msg = _internal_mutable_else_node();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.IfElseBlock.else_node)
  return _msg;
}

// .flyteidl.core.Error error = 4 [json_name = "error"];
inline bool IfElseBlock::_internal_has_error() const {
  return default_case() == kError;
}
inline bool IfElseBlock::has_error() const {
  return _internal_has_error();
}
inline void IfElseBlock::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::flyteidl::core::Error* IfElseBlock::release_error() {
  // @@protoc_insertion_point(field_release:flyteidl.core.IfElseBlock.error)
  if (_internal_has_error()) {
    clear_has_default();
      ::flyteidl::core::Error* temp = default_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    default_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::Error& IfElseBlock::_internal_error() const {
  return _internal_has_error()
      ? *default_.error_
      : reinterpret_cast< ::flyteidl::core::Error&>(::flyteidl::core::_Error_default_instance_);
}
inline const ::flyteidl::core::Error& IfElseBlock::error() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.IfElseBlock.error)
  return _internal_error();
}
inline ::flyteidl::core::Error* IfElseBlock::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.core.IfElseBlock.error)
  if (_internal_has_error()) {
    clear_has_default();
    ::flyteidl::core::Error* temp = default_.error_;
    default_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void IfElseBlock::unsafe_arena_set_allocated_error(::flyteidl::core::Error* error) {
  clear_default();
  if (error) {
    set_has_error();
    default_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.IfElseBlock.error)
}
inline ::flyteidl::core::Error* IfElseBlock::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_default();
    set_has_error();
    default_.error_ = CreateMaybeMessage< ::flyteidl::core::Error >(GetArenaForAllocation());
  }
  return default_.error_;
}
inline ::flyteidl::core::Error* IfElseBlock::mutable_error() {
  ::flyteidl::core::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.IfElseBlock.error)
  return _msg;
}

inline bool IfElseBlock::has_default() const {
  return default_case() != DEFAULT_NOT_SET;
}
inline void IfElseBlock::clear_has_default() {
  _oneof_case_[0] = DEFAULT_NOT_SET;
}
inline IfElseBlock::DefaultCase IfElseBlock::default_case() const {
  return IfElseBlock::DefaultCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BranchNode

// .flyteidl.core.IfElseBlock if_else = 1 [json_name = "ifElse"];
inline bool BranchNode::_internal_has_if_else() const {
  return this != internal_default_instance() && if_else_ != nullptr;
}
inline bool BranchNode::has_if_else() const {
  return _internal_has_if_else();
}
inline void BranchNode::clear_if_else() {
  if (GetArenaForAllocation() == nullptr && if_else_ != nullptr) {
    delete if_else_;
  }
  if_else_ = nullptr;
}
inline const ::flyteidl::core::IfElseBlock& BranchNode::_internal_if_else() const {
  const ::flyteidl::core::IfElseBlock* p = if_else_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::IfElseBlock&>(
      ::flyteidl::core::_IfElseBlock_default_instance_);
}
inline const ::flyteidl::core::IfElseBlock& BranchNode::if_else() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.BranchNode.if_else)
  return _internal_if_else();
}
inline void BranchNode::unsafe_arena_set_allocated_if_else(
    ::flyteidl::core::IfElseBlock* if_else) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(if_else_);
  }
  if_else_ = if_else;
  if (if_else) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.BranchNode.if_else)
}
inline ::flyteidl::core::IfElseBlock* BranchNode::release_if_else() {
  
  ::flyteidl::core::IfElseBlock* temp = if_else_;
  if_else_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::IfElseBlock* BranchNode::unsafe_arena_release_if_else() {
  // @@protoc_insertion_point(field_release:flyteidl.core.BranchNode.if_else)
  
  ::flyteidl::core::IfElseBlock* temp = if_else_;
  if_else_ = nullptr;
  return temp;
}
inline ::flyteidl::core::IfElseBlock* BranchNode::_internal_mutable_if_else() {
  
  if (if_else_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::IfElseBlock>(GetArenaForAllocation());
    if_else_ = p;
  }
  return if_else_;
}
inline ::flyteidl::core::IfElseBlock* BranchNode::mutable_if_else() {
  ::flyteidl::core::IfElseBlock* _msg = _internal_mutable_if_else();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.BranchNode.if_else)
  return _msg;
}
inline void BranchNode::set_allocated_if_else(::flyteidl::core::IfElseBlock* if_else) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete if_else_;
  }
  if (if_else) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::IfElseBlock>::GetOwningArena(if_else);
    if (message_arena != submessage_arena) {
      if_else = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, if_else, submessage_arena);
    }
    
  } else {
    
  }
  if_else_ = if_else;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.BranchNode.if_else)
}

// -------------------------------------------------------------------

// TaskNode

// .flyteidl.core.Identifier reference_id = 1 [json_name = "referenceId"];
inline bool TaskNode::_internal_has_reference_id() const {
  return reference_case() == kReferenceId;
}
inline bool TaskNode::has_reference_id() const {
  return _internal_has_reference_id();
}
inline void TaskNode::set_has_reference_id() {
  _oneof_case_[0] = kReferenceId;
}
inline ::flyteidl::core::Identifier* TaskNode::release_reference_id() {
  // @@protoc_insertion_point(field_release:flyteidl.core.TaskNode.reference_id)
  if (_internal_has_reference_id()) {
    clear_has_reference();
      ::flyteidl::core::Identifier* temp = reference_.reference_id_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    reference_.reference_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::Identifier& TaskNode::_internal_reference_id() const {
  return _internal_has_reference_id()
      ? *reference_.reference_id_
      : reinterpret_cast< ::flyteidl::core::Identifier&>(::flyteidl::core::_Identifier_default_instance_);
}
inline const ::flyteidl::core::Identifier& TaskNode::reference_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.TaskNode.reference_id)
  return _internal_reference_id();
}
inline ::flyteidl::core::Identifier* TaskNode::unsafe_arena_release_reference_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.core.TaskNode.reference_id)
  if (_internal_has_reference_id()) {
    clear_has_reference();
    ::flyteidl::core::Identifier* temp = reference_.reference_id_;
    reference_.reference_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskNode::unsafe_arena_set_allocated_reference_id(::flyteidl::core::Identifier* reference_id) {
  clear_reference();
  if (reference_id) {
    set_has_reference_id();
    reference_.reference_id_ = reference_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.TaskNode.reference_id)
}
inline ::flyteidl::core::Identifier* TaskNode::_internal_mutable_reference_id() {
  if (!_internal_has_reference_id()) {
    clear_reference();
    set_has_reference_id();
    reference_.reference_id_ = CreateMaybeMessage< ::flyteidl::core::Identifier >(GetArenaForAllocation());
  }
  return reference_.reference_id_;
}
inline ::flyteidl::core::Identifier* TaskNode::mutable_reference_id() {
  ::flyteidl::core::Identifier* _msg = _internal_mutable_reference_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.TaskNode.reference_id)
  return _msg;
}

// .flyteidl.core.TaskNodeOverrides overrides = 2 [json_name = "overrides"];
inline bool TaskNode::_internal_has_overrides() const {
  return this != internal_default_instance() && overrides_ != nullptr;
}
inline bool TaskNode::has_overrides() const {
  return _internal_has_overrides();
}
inline void TaskNode::clear_overrides() {
  if (GetArenaForAllocation() == nullptr && overrides_ != nullptr) {
    delete overrides_;
  }
  overrides_ = nullptr;
}
inline const ::flyteidl::core::TaskNodeOverrides& TaskNode::_internal_overrides() const {
  const ::flyteidl::core::TaskNodeOverrides* p = overrides_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::TaskNodeOverrides&>(
      ::flyteidl::core::_TaskNodeOverrides_default_instance_);
}
inline const ::flyteidl::core::TaskNodeOverrides& TaskNode::overrides() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.TaskNode.overrides)
  return _internal_overrides();
}
inline void TaskNode::unsafe_arena_set_allocated_overrides(
    ::flyteidl::core::TaskNodeOverrides* overrides) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(overrides_);
  }
  overrides_ = overrides;
  if (overrides) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.TaskNode.overrides)
}
inline ::flyteidl::core::TaskNodeOverrides* TaskNode::release_overrides() {
  
  ::flyteidl::core::TaskNodeOverrides* temp = overrides_;
  overrides_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::TaskNodeOverrides* TaskNode::unsafe_arena_release_overrides() {
  // @@protoc_insertion_point(field_release:flyteidl.core.TaskNode.overrides)
  
  ::flyteidl::core::TaskNodeOverrides* temp = overrides_;
  overrides_ = nullptr;
  return temp;
}
inline ::flyteidl::core::TaskNodeOverrides* TaskNode::_internal_mutable_overrides() {
  
  if (overrides_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::TaskNodeOverrides>(GetArenaForAllocation());
    overrides_ = p;
  }
  return overrides_;
}
inline ::flyteidl::core::TaskNodeOverrides* TaskNode::mutable_overrides() {
  ::flyteidl::core::TaskNodeOverrides* _msg = _internal_mutable_overrides();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.TaskNode.overrides)
  return _msg;
}
inline void TaskNode::set_allocated_overrides(::flyteidl::core::TaskNodeOverrides* overrides) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete overrides_;
  }
  if (overrides) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::TaskNodeOverrides>::GetOwningArena(overrides);
    if (message_arena != submessage_arena) {
      overrides = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overrides, submessage_arena);
    }
    
  } else {
    
  }
  overrides_ = overrides;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.TaskNode.overrides)
}

inline bool TaskNode::has_reference() const {
  return reference_case() != REFERENCE_NOT_SET;
}
inline void TaskNode::clear_has_reference() {
  _oneof_case_[0] = REFERENCE_NOT_SET;
}
inline TaskNode::ReferenceCase TaskNode::reference_case() const {
  return TaskNode::ReferenceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// WorkflowNode

// .flyteidl.core.Identifier launchplan_ref = 1 [json_name = "launchplanRef"];
inline bool WorkflowNode::_internal_has_launchplan_ref() const {
  return reference_case() == kLaunchplanRef;
}
inline bool WorkflowNode::has_launchplan_ref() const {
  return _internal_has_launchplan_ref();
}
inline void WorkflowNode::set_has_launchplan_ref() {
  _oneof_case_[0] = kLaunchplanRef;
}
inline ::flyteidl::core::Identifier* WorkflowNode::release_launchplan_ref() {
  // @@protoc_insertion_point(field_release:flyteidl.core.WorkflowNode.launchplan_ref)
  if (_internal_has_launchplan_ref()) {
    clear_has_reference();
      ::flyteidl::core::Identifier* temp = reference_.launchplan_ref_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    reference_.launchplan_ref_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::Identifier& WorkflowNode::_internal_launchplan_ref() const {
  return _internal_has_launchplan_ref()
      ? *reference_.launchplan_ref_
      : reinterpret_cast< ::flyteidl::core::Identifier&>(::flyteidl::core::_Identifier_default_instance_);
}
inline const ::flyteidl::core::Identifier& WorkflowNode::launchplan_ref() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowNode.launchplan_ref)
  return _internal_launchplan_ref();
}
inline ::flyteidl::core::Identifier* WorkflowNode::unsafe_arena_release_launchplan_ref() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.core.WorkflowNode.launchplan_ref)
  if (_internal_has_launchplan_ref()) {
    clear_has_reference();
    ::flyteidl::core::Identifier* temp = reference_.launchplan_ref_;
    reference_.launchplan_ref_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WorkflowNode::unsafe_arena_set_allocated_launchplan_ref(::flyteidl::core::Identifier* launchplan_ref) {
  clear_reference();
  if (launchplan_ref) {
    set_has_launchplan_ref();
    reference_.launchplan_ref_ = launchplan_ref;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.WorkflowNode.launchplan_ref)
}
inline ::flyteidl::core::Identifier* WorkflowNode::_internal_mutable_launchplan_ref() {
  if (!_internal_has_launchplan_ref()) {
    clear_reference();
    set_has_launchplan_ref();
    reference_.launchplan_ref_ = CreateMaybeMessage< ::flyteidl::core::Identifier >(GetArenaForAllocation());
  }
  return reference_.launchplan_ref_;
}
inline ::flyteidl::core::Identifier* WorkflowNode::mutable_launchplan_ref() {
  ::flyteidl::core::Identifier* _msg = _internal_mutable_launchplan_ref();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowNode.launchplan_ref)
  return _msg;
}

// .flyteidl.core.Identifier sub_workflow_ref = 2 [json_name = "subWorkflowRef"];
inline bool WorkflowNode::_internal_has_sub_workflow_ref() const {
  return reference_case() == kSubWorkflowRef;
}
inline bool WorkflowNode::has_sub_workflow_ref() const {
  return _internal_has_sub_workflow_ref();
}
inline void WorkflowNode::set_has_sub_workflow_ref() {
  _oneof_case_[0] = kSubWorkflowRef;
}
inline ::flyteidl::core::Identifier* WorkflowNode::release_sub_workflow_ref() {
  // @@protoc_insertion_point(field_release:flyteidl.core.WorkflowNode.sub_workflow_ref)
  if (_internal_has_sub_workflow_ref()) {
    clear_has_reference();
      ::flyteidl::core::Identifier* temp = reference_.sub_workflow_ref_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    reference_.sub_workflow_ref_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::Identifier& WorkflowNode::_internal_sub_workflow_ref() const {
  return _internal_has_sub_workflow_ref()
      ? *reference_.sub_workflow_ref_
      : reinterpret_cast< ::flyteidl::core::Identifier&>(::flyteidl::core::_Identifier_default_instance_);
}
inline const ::flyteidl::core::Identifier& WorkflowNode::sub_workflow_ref() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowNode.sub_workflow_ref)
  return _internal_sub_workflow_ref();
}
inline ::flyteidl::core::Identifier* WorkflowNode::unsafe_arena_release_sub_workflow_ref() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.core.WorkflowNode.sub_workflow_ref)
  if (_internal_has_sub_workflow_ref()) {
    clear_has_reference();
    ::flyteidl::core::Identifier* temp = reference_.sub_workflow_ref_;
    reference_.sub_workflow_ref_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WorkflowNode::unsafe_arena_set_allocated_sub_workflow_ref(::flyteidl::core::Identifier* sub_workflow_ref) {
  clear_reference();
  if (sub_workflow_ref) {
    set_has_sub_workflow_ref();
    reference_.sub_workflow_ref_ = sub_workflow_ref;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.WorkflowNode.sub_workflow_ref)
}
inline ::flyteidl::core::Identifier* WorkflowNode::_internal_mutable_sub_workflow_ref() {
  if (!_internal_has_sub_workflow_ref()) {
    clear_reference();
    set_has_sub_workflow_ref();
    reference_.sub_workflow_ref_ = CreateMaybeMessage< ::flyteidl::core::Identifier >(GetArenaForAllocation());
  }
  return reference_.sub_workflow_ref_;
}
inline ::flyteidl::core::Identifier* WorkflowNode::mutable_sub_workflow_ref() {
  ::flyteidl::core::Identifier* _msg = _internal_mutable_sub_workflow_ref();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowNode.sub_workflow_ref)
  return _msg;
}

inline bool WorkflowNode::has_reference() const {
  return reference_case() != REFERENCE_NOT_SET;
}
inline void WorkflowNode::clear_has_reference() {
  _oneof_case_[0] = REFERENCE_NOT_SET;
}
inline WorkflowNode::ReferenceCase WorkflowNode::reference_case() const {
  return WorkflowNode::ReferenceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NodeMetadata

// string name = 1 [json_name = "name"];
inline void NodeMetadata::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& NodeMetadata::name() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.NodeMetadata.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeMetadata::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.core.NodeMetadata.name)
}
inline std::string* NodeMetadata::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.NodeMetadata.name)
  return _s;
}
inline const std::string& NodeMetadata::_internal_name() const {
  return name_.Get();
}
inline void NodeMetadata::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NodeMetadata::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NodeMetadata::release_name() {
  // @@protoc_insertion_point(field_release:flyteidl.core.NodeMetadata.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NodeMetadata::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.NodeMetadata.name)
}

// .google.protobuf.Duration timeout = 4 [json_name = "timeout"];
inline bool NodeMetadata::_internal_has_timeout() const {
  return this != internal_default_instance() && timeout_ != nullptr;
}
inline bool NodeMetadata::has_timeout() const {
  return _internal_has_timeout();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& NodeMetadata::_internal_timeout() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = timeout_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& NodeMetadata::timeout() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.NodeMetadata.timeout)
  return _internal_timeout();
}
inline void NodeMetadata::unsafe_arena_set_allocated_timeout(
    ::PROTOBUF_NAMESPACE_ID::Duration* timeout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout_);
  }
  timeout_ = timeout;
  if (timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.NodeMetadata.timeout)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* NodeMetadata::release_timeout() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = timeout_;
  timeout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* NodeMetadata::unsafe_arena_release_timeout() {
  // @@protoc_insertion_point(field_release:flyteidl.core.NodeMetadata.timeout)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = timeout_;
  timeout_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* NodeMetadata::_internal_mutable_timeout() {
  
  if (timeout_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    timeout_ = p;
  }
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* NodeMetadata::mutable_timeout() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_timeout();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.NodeMetadata.timeout)
  return _msg;
}
inline void NodeMetadata::set_allocated_timeout(::PROTOBUF_NAMESPACE_ID::Duration* timeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout_);
  }
  if (timeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout));
    if (message_arena != submessage_arena) {
      timeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeout, submessage_arena);
    }
    
  } else {
    
  }
  timeout_ = timeout;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.NodeMetadata.timeout)
}

// .flyteidl.core.RetryStrategy retries = 5 [json_name = "retries"];
inline bool NodeMetadata::_internal_has_retries() const {
  return this != internal_default_instance() && retries_ != nullptr;
}
inline bool NodeMetadata::has_retries() const {
  return _internal_has_retries();
}
inline const ::flyteidl::core::RetryStrategy& NodeMetadata::_internal_retries() const {
  const ::flyteidl::core::RetryStrategy* p = retries_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::RetryStrategy&>(
      ::flyteidl::core::_RetryStrategy_default_instance_);
}
inline const ::flyteidl::core::RetryStrategy& NodeMetadata::retries() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.NodeMetadata.retries)
  return _internal_retries();
}
inline void NodeMetadata::unsafe_arena_set_allocated_retries(
    ::flyteidl::core::RetryStrategy* retries) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(retries_);
  }
  retries_ = retries;
  if (retries) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.NodeMetadata.retries)
}
inline ::flyteidl::core::RetryStrategy* NodeMetadata::release_retries() {
  
  ::flyteidl::core::RetryStrategy* temp = retries_;
  retries_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::RetryStrategy* NodeMetadata::unsafe_arena_release_retries() {
  // @@protoc_insertion_point(field_release:flyteidl.core.NodeMetadata.retries)
  
  ::flyteidl::core::RetryStrategy* temp = retries_;
  retries_ = nullptr;
  return temp;
}
inline ::flyteidl::core::RetryStrategy* NodeMetadata::_internal_mutable_retries() {
  
  if (retries_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::RetryStrategy>(GetArenaForAllocation());
    retries_ = p;
  }
  return retries_;
}
inline ::flyteidl::core::RetryStrategy* NodeMetadata::mutable_retries() {
  ::flyteidl::core::RetryStrategy* _msg = _internal_mutable_retries();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.NodeMetadata.retries)
  return _msg;
}
inline void NodeMetadata::set_allocated_retries(::flyteidl::core::RetryStrategy* retries) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(retries_);
  }
  if (retries) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(retries));
    if (message_arena != submessage_arena) {
      retries = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, retries, submessage_arena);
    }
    
  } else {
    
  }
  retries_ = retries;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.NodeMetadata.retries)
}

// bool interruptible = 6 [json_name = "interruptible"];
inline bool NodeMetadata::_internal_has_interruptible() const {
  return interruptible_value_case() == kInterruptible;
}
inline bool NodeMetadata::has_interruptible() const {
  return _internal_has_interruptible();
}
inline void NodeMetadata::set_has_interruptible() {
  _oneof_case_[0] = kInterruptible;
}
inline void NodeMetadata::clear_interruptible() {
  if (_internal_has_interruptible()) {
    interruptible_value_.interruptible_ = false;
    clear_has_interruptible_value();
  }
}
inline bool NodeMetadata::_internal_interruptible() const {
  if (_internal_has_interruptible()) {
    return interruptible_value_.interruptible_;
  }
  return false;
}
inline void NodeMetadata::_internal_set_interruptible(bool value) {
  if (!_internal_has_interruptible()) {
    clear_interruptible_value();
    set_has_interruptible();
  }
  interruptible_value_.interruptible_ = value;
}
inline bool NodeMetadata::interruptible() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.NodeMetadata.interruptible)
  return _internal_interruptible();
}
inline void NodeMetadata::set_interruptible(bool value) {
  _internal_set_interruptible(value);
  // @@protoc_insertion_point(field_set:flyteidl.core.NodeMetadata.interruptible)
}

inline bool NodeMetadata::has_interruptible_value() const {
  return interruptible_value_case() != INTERRUPTIBLE_VALUE_NOT_SET;
}
inline void NodeMetadata::clear_has_interruptible_value() {
  _oneof_case_[0] = INTERRUPTIBLE_VALUE_NOT_SET;
}
inline NodeMetadata::InterruptibleValueCase NodeMetadata::interruptible_value_case() const {
  return NodeMetadata::InterruptibleValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Alias

// string var = 1 [json_name = "var"];
inline void Alias::clear_var() {
  var_.ClearToEmpty();
}
inline const std::string& Alias::var() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Alias.var)
  return _internal_var();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Alias::set_var(ArgT0&& arg0, ArgT... args) {
 
 var_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.core.Alias.var)
}
inline std::string* Alias::mutable_var() {
  std::string* _s = _internal_mutable_var();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Alias.var)
  return _s;
}
inline const std::string& Alias::_internal_var() const {
  return var_.Get();
}
inline void Alias::_internal_set_var(const std::string& value) {
  
  var_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Alias::_internal_mutable_var() {
  
  return var_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Alias::release_var() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Alias.var)
  return var_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Alias::set_allocated_var(std::string* var) {
  if (var != nullptr) {
    
  } else {
    
  }
  var_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (var_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    var_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Alias.var)
}

// string alias = 2 [json_name = "alias"];
inline void Alias::clear_alias() {
  alias_.ClearToEmpty();
}
inline const std::string& Alias::alias() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Alias.alias)
  return _internal_alias();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Alias::set_alias(ArgT0&& arg0, ArgT... args) {
 
 alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.core.Alias.alias)
}
inline std::string* Alias::mutable_alias() {
  std::string* _s = _internal_mutable_alias();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Alias.alias)
  return _s;
}
inline const std::string& Alias::_internal_alias() const {
  return alias_.Get();
}
inline void Alias::_internal_set_alias(const std::string& value) {
  
  alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Alias::_internal_mutable_alias() {
  
  return alias_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Alias::release_alias() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Alias.alias)
  return alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Alias::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (alias_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Alias.alias)
}

// -------------------------------------------------------------------

// Node

// string id = 1 [json_name = "id"];
inline void Node::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Node::id() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Node.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Node::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.core.Node.id)
}
inline std::string* Node::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Node.id)
  return _s;
}
inline const std::string& Node::_internal_id() const {
  return id_.Get();
}
inline void Node::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Node::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Node::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Node.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Node::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Node.id)
}

// .flyteidl.core.NodeMetadata metadata = 2 [json_name = "metadata"];
inline bool Node::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool Node::has_metadata() const {
  return _internal_has_metadata();
}
inline void Node::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::flyteidl::core::NodeMetadata& Node::_internal_metadata() const {
  const ::flyteidl::core::NodeMetadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::NodeMetadata&>(
      ::flyteidl::core::_NodeMetadata_default_instance_);
}
inline const ::flyteidl::core::NodeMetadata& Node::metadata() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Node.metadata)
  return _internal_metadata();
}
inline void Node::unsafe_arena_set_allocated_metadata(
    ::flyteidl::core::NodeMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.Node.metadata)
}
inline ::flyteidl::core::NodeMetadata* Node::release_metadata() {
  
  ::flyteidl::core::NodeMetadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::NodeMetadata* Node::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Node.metadata)
  
  ::flyteidl::core::NodeMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::flyteidl::core::NodeMetadata* Node::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::NodeMetadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::flyteidl::core::NodeMetadata* Node::mutable_metadata() {
  ::flyteidl::core::NodeMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Node.metadata)
  return _msg;
}
inline void Node::set_allocated_metadata(::flyteidl::core::NodeMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::NodeMetadata>::GetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Node.metadata)
}

// repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];
inline int Node::_internal_inputs_size() const {
  return inputs_.size();
}
inline int Node::inputs_size() const {
  return _internal_inputs_size();
}
inline ::flyteidl::core::Binding* Node::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Node.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Binding >*
Node::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.Node.inputs)
  return &inputs_;
}
inline const ::flyteidl::core::Binding& Node::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::flyteidl::core::Binding& Node::inputs(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Node.inputs)
  return _internal_inputs(index);
}
inline ::flyteidl::core::Binding* Node::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::flyteidl::core::Binding* Node::add_inputs() {
  ::flyteidl::core::Binding* _add = _internal_add_inputs();
  // @@protoc_insertion_point(field_add:flyteidl.core.Node.inputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Binding >&
Node::inputs() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.Node.inputs)
  return inputs_;
}

// repeated string upstream_node_ids = 4 [json_name = "upstreamNodeIds"];
inline int Node::_internal_upstream_node_ids_size() const {
  return upstream_node_ids_.size();
}
inline int Node::upstream_node_ids_size() const {
  return _internal_upstream_node_ids_size();
}
inline void Node::clear_upstream_node_ids() {
  upstream_node_ids_.Clear();
}
inline std::string* Node::add_upstream_node_ids() {
  std::string* _s = _internal_add_upstream_node_ids();
  // @@protoc_insertion_point(field_add_mutable:flyteidl.core.Node.upstream_node_ids)
  return _s;
}
inline const std::string& Node::_internal_upstream_node_ids(int index) const {
  return upstream_node_ids_.Get(index);
}
inline const std::string& Node::upstream_node_ids(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Node.upstream_node_ids)
  return _internal_upstream_node_ids(index);
}
inline std::string* Node::mutable_upstream_node_ids(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Node.upstream_node_ids)
  return upstream_node_ids_.Mutable(index);
}
inline void Node::set_upstream_node_ids(int index, const std::string& value) {
  upstream_node_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flyteidl.core.Node.upstream_node_ids)
}
inline void Node::set_upstream_node_ids(int index, std::string&& value) {
  upstream_node_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flyteidl.core.Node.upstream_node_ids)
}
inline void Node::set_upstream_node_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  upstream_node_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.core.Node.upstream_node_ids)
}
inline void Node::set_upstream_node_ids(int index, const char* value, size_t size) {
  upstream_node_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.Node.upstream_node_ids)
}
inline std::string* Node::_internal_add_upstream_node_ids() {
  return upstream_node_ids_.Add();
}
inline void Node::add_upstream_node_ids(const std::string& value) {
  upstream_node_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.core.Node.upstream_node_ids)
}
inline void Node::add_upstream_node_ids(std::string&& value) {
  upstream_node_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.core.Node.upstream_node_ids)
}
inline void Node::add_upstream_node_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  upstream_node_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.core.Node.upstream_node_ids)
}
inline void Node::add_upstream_node_ids(const char* value, size_t size) {
  upstream_node_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.core.Node.upstream_node_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Node::upstream_node_ids() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.Node.upstream_node_ids)
  return upstream_node_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Node::mutable_upstream_node_ids() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.Node.upstream_node_ids)
  return &upstream_node_ids_;
}

// repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];
inline int Node::_internal_output_aliases_size() const {
  return output_aliases_.size();
}
inline int Node::output_aliases_size() const {
  return _internal_output_aliases_size();
}
inline void Node::clear_output_aliases() {
  output_aliases_.Clear();
}
inline ::flyteidl::core::Alias* Node::mutable_output_aliases(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Node.output_aliases)
  return output_aliases_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Alias >*
Node::mutable_output_aliases() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.Node.output_aliases)
  return &output_aliases_;
}
inline const ::flyteidl::core::Alias& Node::_internal_output_aliases(int index) const {
  return output_aliases_.Get(index);
}
inline const ::flyteidl::core::Alias& Node::output_aliases(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Node.output_aliases)
  return _internal_output_aliases(index);
}
inline ::flyteidl::core::Alias* Node::_internal_add_output_aliases() {
  return output_aliases_.Add();
}
inline ::flyteidl::core::Alias* Node::add_output_aliases() {
  ::flyteidl::core::Alias* _add = _internal_add_output_aliases();
  // @@protoc_insertion_point(field_add:flyteidl.core.Node.output_aliases)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Alias >&
Node::output_aliases() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.Node.output_aliases)
  return output_aliases_;
}

// .flyteidl.core.TaskNode task_node = 6 [json_name = "taskNode"];
inline bool Node::_internal_has_task_node() const {
  return target_case() == kTaskNode;
}
inline bool Node::has_task_node() const {
  return _internal_has_task_node();
}
inline void Node::set_has_task_node() {
  _oneof_case_[0] = kTaskNode;
}
inline void Node::clear_task_node() {
  if (_internal_has_task_node()) {
    if (GetArenaForAllocation() == nullptr) {
      delete target_.task_node_;
    }
    clear_has_target();
  }
}
inline ::flyteidl::core::TaskNode* Node::release_task_node() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Node.task_node)
  if (_internal_has_task_node()) {
    clear_has_target();
      ::flyteidl::core::TaskNode* temp = target_.task_node_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    target_.task_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::TaskNode& Node::_internal_task_node() const {
  return _internal_has_task_node()
      ? *target_.task_node_
      : reinterpret_cast< ::flyteidl::core::TaskNode&>(::flyteidl::core::_TaskNode_default_instance_);
}
inline const ::flyteidl::core::TaskNode& Node::task_node() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Node.task_node)
  return _internal_task_node();
}
inline ::flyteidl::core::TaskNode* Node::unsafe_arena_release_task_node() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.core.Node.task_node)
  if (_internal_has_task_node()) {
    clear_has_target();
    ::flyteidl::core::TaskNode* temp = target_.task_node_;
    target_.task_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Node::unsafe_arena_set_allocated_task_node(::flyteidl::core::TaskNode* task_node) {
  clear_target();
  if (task_node) {
    set_has_task_node();
    target_.task_node_ = task_node;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.Node.task_node)
}
inline ::flyteidl::core::TaskNode* Node::_internal_mutable_task_node() {
  if (!_internal_has_task_node()) {
    clear_target();
    set_has_task_node();
    target_.task_node_ = CreateMaybeMessage< ::flyteidl::core::TaskNode >(GetArenaForAllocation());
  }
  return target_.task_node_;
}
inline ::flyteidl::core::TaskNode* Node::mutable_task_node() {
  ::flyteidl::core::TaskNode* _msg = _internal_mutable_task_node();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Node.task_node)
  return _msg;
}

// .flyteidl.core.WorkflowNode workflow_node = 7 [json_name = "workflowNode"];
inline bool Node::_internal_has_workflow_node() const {
  return target_case() == kWorkflowNode;
}
inline bool Node::has_workflow_node() const {
  return _internal_has_workflow_node();
}
inline void Node::set_has_workflow_node() {
  _oneof_case_[0] = kWorkflowNode;
}
inline void Node::clear_workflow_node() {
  if (_internal_has_workflow_node()) {
    if (GetArenaForAllocation() == nullptr) {
      delete target_.workflow_node_;
    }
    clear_has_target();
  }
}
inline ::flyteidl::core::WorkflowNode* Node::release_workflow_node() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Node.workflow_node)
  if (_internal_has_workflow_node()) {
    clear_has_target();
      ::flyteidl::core::WorkflowNode* temp = target_.workflow_node_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    target_.workflow_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::WorkflowNode& Node::_internal_workflow_node() const {
  return _internal_has_workflow_node()
      ? *target_.workflow_node_
      : reinterpret_cast< ::flyteidl::core::WorkflowNode&>(::flyteidl::core::_WorkflowNode_default_instance_);
}
inline const ::flyteidl::core::WorkflowNode& Node::workflow_node() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Node.workflow_node)
  return _internal_workflow_node();
}
inline ::flyteidl::core::WorkflowNode* Node::unsafe_arena_release_workflow_node() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.core.Node.workflow_node)
  if (_internal_has_workflow_node()) {
    clear_has_target();
    ::flyteidl::core::WorkflowNode* temp = target_.workflow_node_;
    target_.workflow_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Node::unsafe_arena_set_allocated_workflow_node(::flyteidl::core::WorkflowNode* workflow_node) {
  clear_target();
  if (workflow_node) {
    set_has_workflow_node();
    target_.workflow_node_ = workflow_node;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.Node.workflow_node)
}
inline ::flyteidl::core::WorkflowNode* Node::_internal_mutable_workflow_node() {
  if (!_internal_has_workflow_node()) {
    clear_target();
    set_has_workflow_node();
    target_.workflow_node_ = CreateMaybeMessage< ::flyteidl::core::WorkflowNode >(GetArenaForAllocation());
  }
  return target_.workflow_node_;
}
inline ::flyteidl::core::WorkflowNode* Node::mutable_workflow_node() {
  ::flyteidl::core::WorkflowNode* _msg = _internal_mutable_workflow_node();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Node.workflow_node)
  return _msg;
}

// .flyteidl.core.BranchNode branch_node = 8 [json_name = "branchNode"];
inline bool Node::_internal_has_branch_node() const {
  return target_case() == kBranchNode;
}
inline bool Node::has_branch_node() const {
  return _internal_has_branch_node();
}
inline void Node::set_has_branch_node() {
  _oneof_case_[0] = kBranchNode;
}
inline void Node::clear_branch_node() {
  if (_internal_has_branch_node()) {
    if (GetArenaForAllocation() == nullptr) {
      delete target_.branch_node_;
    }
    clear_has_target();
  }
}
inline ::flyteidl::core::BranchNode* Node::release_branch_node() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Node.branch_node)
  if (_internal_has_branch_node()) {
    clear_has_target();
      ::flyteidl::core::BranchNode* temp = target_.branch_node_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    target_.branch_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::BranchNode& Node::_internal_branch_node() const {
  return _internal_has_branch_node()
      ? *target_.branch_node_
      : reinterpret_cast< ::flyteidl::core::BranchNode&>(::flyteidl::core::_BranchNode_default_instance_);
}
inline const ::flyteidl::core::BranchNode& Node::branch_node() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Node.branch_node)
  return _internal_branch_node();
}
inline ::flyteidl::core::BranchNode* Node::unsafe_arena_release_branch_node() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.core.Node.branch_node)
  if (_internal_has_branch_node()) {
    clear_has_target();
    ::flyteidl::core::BranchNode* temp = target_.branch_node_;
    target_.branch_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Node::unsafe_arena_set_allocated_branch_node(::flyteidl::core::BranchNode* branch_node) {
  clear_target();
  if (branch_node) {
    set_has_branch_node();
    target_.branch_node_ = branch_node;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.Node.branch_node)
}
inline ::flyteidl::core::BranchNode* Node::_internal_mutable_branch_node() {
  if (!_internal_has_branch_node()) {
    clear_target();
    set_has_branch_node();
    target_.branch_node_ = CreateMaybeMessage< ::flyteidl::core::BranchNode >(GetArenaForAllocation());
  }
  return target_.branch_node_;
}
inline ::flyteidl::core::BranchNode* Node::mutable_branch_node() {
  ::flyteidl::core::BranchNode* _msg = _internal_mutable_branch_node();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Node.branch_node)
  return _msg;
}

inline bool Node::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void Node::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
inline Node::TargetCase Node::target_case() const {
  return Node::TargetCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// WorkflowMetadata

// .flyteidl.core.QualityOfService quality_of_service = 1 [json_name = "qualityOfService"];
inline bool WorkflowMetadata::_internal_has_quality_of_service() const {
  return this != internal_default_instance() && quality_of_service_ != nullptr;
}
inline bool WorkflowMetadata::has_quality_of_service() const {
  return _internal_has_quality_of_service();
}
inline const ::flyteidl::core::QualityOfService& WorkflowMetadata::_internal_quality_of_service() const {
  const ::flyteidl::core::QualityOfService* p = quality_of_service_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::QualityOfService&>(
      ::flyteidl::core::_QualityOfService_default_instance_);
}
inline const ::flyteidl::core::QualityOfService& WorkflowMetadata::quality_of_service() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowMetadata.quality_of_service)
  return _internal_quality_of_service();
}
inline void WorkflowMetadata::unsafe_arena_set_allocated_quality_of_service(
    ::flyteidl::core::QualityOfService* quality_of_service) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quality_of_service_);
  }
  quality_of_service_ = quality_of_service;
  if (quality_of_service) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.WorkflowMetadata.quality_of_service)
}
inline ::flyteidl::core::QualityOfService* WorkflowMetadata::release_quality_of_service() {
  
  ::flyteidl::core::QualityOfService* temp = quality_of_service_;
  quality_of_service_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::QualityOfService* WorkflowMetadata::unsafe_arena_release_quality_of_service() {
  // @@protoc_insertion_point(field_release:flyteidl.core.WorkflowMetadata.quality_of_service)
  
  ::flyteidl::core::QualityOfService* temp = quality_of_service_;
  quality_of_service_ = nullptr;
  return temp;
}
inline ::flyteidl::core::QualityOfService* WorkflowMetadata::_internal_mutable_quality_of_service() {
  
  if (quality_of_service_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::QualityOfService>(GetArenaForAllocation());
    quality_of_service_ = p;
  }
  return quality_of_service_;
}
inline ::flyteidl::core::QualityOfService* WorkflowMetadata::mutable_quality_of_service() {
  ::flyteidl::core::QualityOfService* _msg = _internal_mutable_quality_of_service();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowMetadata.quality_of_service)
  return _msg;
}
inline void WorkflowMetadata::set_allocated_quality_of_service(::flyteidl::core::QualityOfService* quality_of_service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(quality_of_service_);
  }
  if (quality_of_service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quality_of_service));
    if (message_arena != submessage_arena) {
      quality_of_service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quality_of_service, submessage_arena);
    }
    
  } else {
    
  }
  quality_of_service_ = quality_of_service;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.WorkflowMetadata.quality_of_service)
}

// .flyteidl.core.WorkflowMetadata.OnFailurePolicy on_failure = 2 [json_name = "onFailure"];
inline void WorkflowMetadata::clear_on_failure() {
  on_failure_ = 0;
}
inline ::flyteidl::core::WorkflowMetadata_OnFailurePolicy WorkflowMetadata::_internal_on_failure() const {
  return static_cast< ::flyteidl::core::WorkflowMetadata_OnFailurePolicy >(on_failure_);
}
inline ::flyteidl::core::WorkflowMetadata_OnFailurePolicy WorkflowMetadata::on_failure() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowMetadata.on_failure)
  return _internal_on_failure();
}
inline void WorkflowMetadata::_internal_set_on_failure(::flyteidl::core::WorkflowMetadata_OnFailurePolicy value) {
  
  on_failure_ = value;
}
inline void WorkflowMetadata::set_on_failure(::flyteidl::core::WorkflowMetadata_OnFailurePolicy value) {
  _internal_set_on_failure(value);
  // @@protoc_insertion_point(field_set:flyteidl.core.WorkflowMetadata.on_failure)
}

// -------------------------------------------------------------------

// WorkflowMetadataDefaults

// bool interruptible = 1 [json_name = "interruptible"];
inline void WorkflowMetadataDefaults::clear_interruptible() {
  interruptible_ = false;
}
inline bool WorkflowMetadataDefaults::_internal_interruptible() const {
  return interruptible_;
}
inline bool WorkflowMetadataDefaults::interruptible() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowMetadataDefaults.interruptible)
  return _internal_interruptible();
}
inline void WorkflowMetadataDefaults::_internal_set_interruptible(bool value) {
  
  interruptible_ = value;
}
inline void WorkflowMetadataDefaults::set_interruptible(bool value) {
  _internal_set_interruptible(value);
  // @@protoc_insertion_point(field_set:flyteidl.core.WorkflowMetadataDefaults.interruptible)
}

// -------------------------------------------------------------------

// WorkflowTemplate

// .flyteidl.core.Identifier id = 1 [json_name = "id"];
inline bool WorkflowTemplate::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool WorkflowTemplate::has_id() const {
  return _internal_has_id();
}
inline const ::flyteidl::core::Identifier& WorkflowTemplate::_internal_id() const {
  const ::flyteidl::core::Identifier* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::Identifier&>(
      ::flyteidl::core::_Identifier_default_instance_);
}
inline const ::flyteidl::core::Identifier& WorkflowTemplate::id() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowTemplate.id)
  return _internal_id();
}
inline void WorkflowTemplate::unsafe_arena_set_allocated_id(
    ::flyteidl::core::Identifier* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.WorkflowTemplate.id)
}
inline ::flyteidl::core::Identifier* WorkflowTemplate::release_id() {
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::Identifier* WorkflowTemplate::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.core.WorkflowTemplate.id)
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identifier* WorkflowTemplate::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identifier>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::flyteidl::core::Identifier* WorkflowTemplate::mutable_id() {
  ::flyteidl::core::Identifier* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowTemplate.id)
  return _msg;
}
inline void WorkflowTemplate::set_allocated_id(::flyteidl::core::Identifier* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.WorkflowTemplate.id)
}

// .flyteidl.core.WorkflowMetadata metadata = 2 [json_name = "metadata"];
inline bool WorkflowTemplate::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool WorkflowTemplate::has_metadata() const {
  return _internal_has_metadata();
}
inline void WorkflowTemplate::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::flyteidl::core::WorkflowMetadata& WorkflowTemplate::_internal_metadata() const {
  const ::flyteidl::core::WorkflowMetadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::WorkflowMetadata&>(
      ::flyteidl::core::_WorkflowMetadata_default_instance_);
}
inline const ::flyteidl::core::WorkflowMetadata& WorkflowTemplate::metadata() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowTemplate.metadata)
  return _internal_metadata();
}
inline void WorkflowTemplate::unsafe_arena_set_allocated_metadata(
    ::flyteidl::core::WorkflowMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.WorkflowTemplate.metadata)
}
inline ::flyteidl::core::WorkflowMetadata* WorkflowTemplate::release_metadata() {
  
  ::flyteidl::core::WorkflowMetadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::WorkflowMetadata* WorkflowTemplate::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:flyteidl.core.WorkflowTemplate.metadata)
  
  ::flyteidl::core::WorkflowMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::flyteidl::core::WorkflowMetadata* WorkflowTemplate::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::WorkflowMetadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::flyteidl::core::WorkflowMetadata* WorkflowTemplate::mutable_metadata() {
  ::flyteidl::core::WorkflowMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowTemplate.metadata)
  return _msg;
}
inline void WorkflowTemplate::set_allocated_metadata(::flyteidl::core::WorkflowMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::WorkflowMetadata>::GetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.WorkflowTemplate.metadata)
}

// .flyteidl.core.TypedInterface interface = 3 [json_name = "interface"];
inline bool WorkflowTemplate::_internal_has_interface() const {
  return this != internal_default_instance() && interface_ != nullptr;
}
inline bool WorkflowTemplate::has_interface() const {
  return _internal_has_interface();
}
inline const ::flyteidl::core::TypedInterface& WorkflowTemplate::_internal_interface() const {
  const ::flyteidl::core::TypedInterface* p = interface_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::TypedInterface&>(
      ::flyteidl::core::_TypedInterface_default_instance_);
}
inline const ::flyteidl::core::TypedInterface& WorkflowTemplate::interface() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowTemplate.interface)
  return _internal_interface();
}
inline void WorkflowTemplate::unsafe_arena_set_allocated_interface(
    ::flyteidl::core::TypedInterface* interface) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interface_);
  }
  interface_ = interface;
  if (interface) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.WorkflowTemplate.interface)
}
inline ::flyteidl::core::TypedInterface* WorkflowTemplate::release_interface() {
  
  ::flyteidl::core::TypedInterface* temp = interface_;
  interface_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::TypedInterface* WorkflowTemplate::unsafe_arena_release_interface() {
  // @@protoc_insertion_point(field_release:flyteidl.core.WorkflowTemplate.interface)
  
  ::flyteidl::core::TypedInterface* temp = interface_;
  interface_ = nullptr;
  return temp;
}
inline ::flyteidl::core::TypedInterface* WorkflowTemplate::_internal_mutable_interface() {
  
  if (interface_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::TypedInterface>(GetArenaForAllocation());
    interface_ = p;
  }
  return interface_;
}
inline ::flyteidl::core::TypedInterface* WorkflowTemplate::mutable_interface() {
  ::flyteidl::core::TypedInterface* _msg = _internal_mutable_interface();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowTemplate.interface)
  return _msg;
}
inline void WorkflowTemplate::set_allocated_interface(::flyteidl::core::TypedInterface* interface) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(interface_);
  }
  if (interface) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interface));
    if (message_arena != submessage_arena) {
      interface = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interface, submessage_arena);
    }
    
  } else {
    
  }
  interface_ = interface;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.WorkflowTemplate.interface)
}

// repeated .flyteidl.core.Node nodes = 4 [json_name = "nodes"];
inline int WorkflowTemplate::_internal_nodes_size() const {
  return nodes_.size();
}
inline int WorkflowTemplate::nodes_size() const {
  return _internal_nodes_size();
}
inline void WorkflowTemplate::clear_nodes() {
  nodes_.Clear();
}
inline ::flyteidl::core::Node* WorkflowTemplate::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowTemplate.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Node >*
WorkflowTemplate::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.WorkflowTemplate.nodes)
  return &nodes_;
}
inline const ::flyteidl::core::Node& WorkflowTemplate::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::flyteidl::core::Node& WorkflowTemplate::nodes(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowTemplate.nodes)
  return _internal_nodes(index);
}
inline ::flyteidl::core::Node* WorkflowTemplate::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::flyteidl::core::Node* WorkflowTemplate::add_nodes() {
  ::flyteidl::core::Node* _add = _internal_add_nodes();
  // @@protoc_insertion_point(field_add:flyteidl.core.WorkflowTemplate.nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Node >&
WorkflowTemplate::nodes() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.WorkflowTemplate.nodes)
  return nodes_;
}

// repeated .flyteidl.core.Binding outputs = 5 [json_name = "outputs"];
inline int WorkflowTemplate::_internal_outputs_size() const {
  return outputs_.size();
}
inline int WorkflowTemplate::outputs_size() const {
  return _internal_outputs_size();
}
inline ::flyteidl::core::Binding* WorkflowTemplate::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowTemplate.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Binding >*
WorkflowTemplate::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.WorkflowTemplate.outputs)
  return &outputs_;
}
inline const ::flyteidl::core::Binding& WorkflowTemplate::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::flyteidl::core::Binding& WorkflowTemplate::outputs(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowTemplate.outputs)
  return _internal_outputs(index);
}
inline ::flyteidl::core::Binding* WorkflowTemplate::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::flyteidl::core::Binding* WorkflowTemplate::add_outputs() {
  ::flyteidl::core::Binding* _add = _internal_add_outputs();
  // @@protoc_insertion_point(field_add:flyteidl.core.WorkflowTemplate.outputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Binding >&
WorkflowTemplate::outputs() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.WorkflowTemplate.outputs)
  return outputs_;
}

// .flyteidl.core.Node failure_node = 6 [json_name = "failureNode"];
inline bool WorkflowTemplate::_internal_has_failure_node() const {
  return this != internal_default_instance() && failure_node_ != nullptr;
}
inline bool WorkflowTemplate::has_failure_node() const {
  return _internal_has_failure_node();
}
inline void WorkflowTemplate::clear_failure_node() {
  if (GetArenaForAllocation() == nullptr && failure_node_ != nullptr) {
    delete failure_node_;
  }
  failure_node_ = nullptr;
}
inline const ::flyteidl::core::Node& WorkflowTemplate::_internal_failure_node() const {
  const ::flyteidl::core::Node* p = failure_node_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::Node&>(
      ::flyteidl::core::_Node_default_instance_);
}
inline const ::flyteidl::core::Node& WorkflowTemplate::failure_node() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowTemplate.failure_node)
  return _internal_failure_node();
}
inline void WorkflowTemplate::unsafe_arena_set_allocated_failure_node(
    ::flyteidl::core::Node* failure_node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(failure_node_);
  }
  failure_node_ = failure_node;
  if (failure_node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.WorkflowTemplate.failure_node)
}
inline ::flyteidl::core::Node* WorkflowTemplate::release_failure_node() {
  
  ::flyteidl::core::Node* temp = failure_node_;
  failure_node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::Node* WorkflowTemplate::unsafe_arena_release_failure_node() {
  // @@protoc_insertion_point(field_release:flyteidl.core.WorkflowTemplate.failure_node)
  
  ::flyteidl::core::Node* temp = failure_node_;
  failure_node_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Node* WorkflowTemplate::_internal_mutable_failure_node() {
  
  if (failure_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Node>(GetArenaForAllocation());
    failure_node_ = p;
  }
  return failure_node_;
}
inline ::flyteidl::core::Node* WorkflowTemplate::mutable_failure_node() {
  ::flyteidl::core::Node* _msg = _internal_mutable_failure_node();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowTemplate.failure_node)
  return _msg;
}
inline void WorkflowTemplate::set_allocated_failure_node(::flyteidl::core::Node* failure_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete failure_node_;
  }
  if (failure_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::Node>::GetOwningArena(failure_node);
    if (message_arena != submessage_arena) {
      failure_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, failure_node, submessage_arena);
    }
    
  } else {
    
  }
  failure_node_ = failure_node;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.WorkflowTemplate.failure_node)
}

// .flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7 [json_name = "metadataDefaults"];
inline bool WorkflowTemplate::_internal_has_metadata_defaults() const {
  return this != internal_default_instance() && metadata_defaults_ != nullptr;
}
inline bool WorkflowTemplate::has_metadata_defaults() const {
  return _internal_has_metadata_defaults();
}
inline void WorkflowTemplate::clear_metadata_defaults() {
  if (GetArenaForAllocation() == nullptr && metadata_defaults_ != nullptr) {
    delete metadata_defaults_;
  }
  metadata_defaults_ = nullptr;
}
inline const ::flyteidl::core::WorkflowMetadataDefaults& WorkflowTemplate::_internal_metadata_defaults() const {
  const ::flyteidl::core::WorkflowMetadataDefaults* p = metadata_defaults_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::WorkflowMetadataDefaults&>(
      ::flyteidl::core::_WorkflowMetadataDefaults_default_instance_);
}
inline const ::flyteidl::core::WorkflowMetadataDefaults& WorkflowTemplate::metadata_defaults() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowTemplate.metadata_defaults)
  return _internal_metadata_defaults();
}
inline void WorkflowTemplate::unsafe_arena_set_allocated_metadata_defaults(
    ::flyteidl::core::WorkflowMetadataDefaults* metadata_defaults) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_defaults_);
  }
  metadata_defaults_ = metadata_defaults;
  if (metadata_defaults) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.WorkflowTemplate.metadata_defaults)
}
inline ::flyteidl::core::WorkflowMetadataDefaults* WorkflowTemplate::release_metadata_defaults() {
  
  ::flyteidl::core::WorkflowMetadataDefaults* temp = metadata_defaults_;
  metadata_defaults_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::WorkflowMetadataDefaults* WorkflowTemplate::unsafe_arena_release_metadata_defaults() {
  // @@protoc_insertion_point(field_release:flyteidl.core.WorkflowTemplate.metadata_defaults)
  
  ::flyteidl::core::WorkflowMetadataDefaults* temp = metadata_defaults_;
  metadata_defaults_ = nullptr;
  return temp;
}
inline ::flyteidl::core::WorkflowMetadataDefaults* WorkflowTemplate::_internal_mutable_metadata_defaults() {
  
  if (metadata_defaults_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::WorkflowMetadataDefaults>(GetArenaForAllocation());
    metadata_defaults_ = p;
  }
  return metadata_defaults_;
}
inline ::flyteidl::core::WorkflowMetadataDefaults* WorkflowTemplate::mutable_metadata_defaults() {
  ::flyteidl::core::WorkflowMetadataDefaults* _msg = _internal_mutable_metadata_defaults();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowTemplate.metadata_defaults)
  return _msg;
}
inline void WorkflowTemplate::set_allocated_metadata_defaults(::flyteidl::core::WorkflowMetadataDefaults* metadata_defaults) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_defaults_;
  }
  if (metadata_defaults) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::WorkflowMetadataDefaults>::GetOwningArena(metadata_defaults);
    if (message_arena != submessage_arena) {
      metadata_defaults = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata_defaults, submessage_arena);
    }
    
  } else {
    
  }
  metadata_defaults_ = metadata_defaults;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.WorkflowTemplate.metadata_defaults)
}

// -------------------------------------------------------------------

// TaskNodeOverrides

// .flyteidl.core.Resources resources = 1 [json_name = "resources"];
inline bool TaskNodeOverrides::_internal_has_resources() const {
  return this != internal_default_instance() && resources_ != nullptr;
}
inline bool TaskNodeOverrides::has_resources() const {
  return _internal_has_resources();
}
inline const ::flyteidl::core::Resources& TaskNodeOverrides::_internal_resources() const {
  const ::flyteidl::core::Resources* p = resources_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::Resources&>(
      ::flyteidl::core::_Resources_default_instance_);
}
inline const ::flyteidl::core::Resources& TaskNodeOverrides::resources() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.TaskNodeOverrides.resources)
  return _internal_resources();
}
inline void TaskNodeOverrides::unsafe_arena_set_allocated_resources(
    ::flyteidl::core::Resources* resources) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resources_);
  }
  resources_ = resources;
  if (resources) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.TaskNodeOverrides.resources)
}
inline ::flyteidl::core::Resources* TaskNodeOverrides::release_resources() {
  
  ::flyteidl::core::Resources* temp = resources_;
  resources_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::Resources* TaskNodeOverrides::unsafe_arena_release_resources() {
  // @@protoc_insertion_point(field_release:flyteidl.core.TaskNodeOverrides.resources)
  
  ::flyteidl::core::Resources* temp = resources_;
  resources_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Resources* TaskNodeOverrides::_internal_mutable_resources() {
  
  if (resources_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Resources>(GetArenaForAllocation());
    resources_ = p;
  }
  return resources_;
}
inline ::flyteidl::core::Resources* TaskNodeOverrides::mutable_resources() {
  ::flyteidl::core::Resources* _msg = _internal_mutable_resources();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.TaskNodeOverrides.resources)
  return _msg;
}
inline void TaskNodeOverrides::set_allocated_resources(::flyteidl::core::Resources* resources) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(resources_);
  }
  if (resources) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resources));
    if (message_arena != submessage_arena) {
      resources = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resources, submessage_arena);
    }
    
  } else {
    
  }
  resources_ = resources;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.TaskNodeOverrides.resources)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace flyteidl

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::flyteidl::core::WorkflowMetadata_OnFailurePolicy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::core::WorkflowMetadata_OnFailurePolicy>() {
  return ::flyteidl::core::WorkflowMetadata_OnFailurePolicy_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fcore_2fworkflow_2eproto
