// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/launch_plan.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2flaunch_5fplan_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2flaunch_5fplan_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/execution.pb.h"
#include "flyteidl/core/literals.pb.h"
#include "flyteidl/core/identifier.pb.h"
#include "flyteidl/core/interface.pb.h"
#include "flyteidl/core/security.pb.h"
#include "flyteidl/admin/schedule.pb.h"
#include "flyteidl/admin/common.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2flaunch_5fplan_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
namespace flyteidl {
namespace admin {
class ActiveLaunchPlanListRequest;
struct ActiveLaunchPlanListRequestDefaultTypeInternal;
extern ActiveLaunchPlanListRequestDefaultTypeInternal _ActiveLaunchPlanListRequest_default_instance_;
class ActiveLaunchPlanRequest;
struct ActiveLaunchPlanRequestDefaultTypeInternal;
extern ActiveLaunchPlanRequestDefaultTypeInternal _ActiveLaunchPlanRequest_default_instance_;
class Auth;
struct AuthDefaultTypeInternal;
extern AuthDefaultTypeInternal _Auth_default_instance_;
class LaunchPlan;
struct LaunchPlanDefaultTypeInternal;
extern LaunchPlanDefaultTypeInternal _LaunchPlan_default_instance_;
class LaunchPlanClosure;
struct LaunchPlanClosureDefaultTypeInternal;
extern LaunchPlanClosureDefaultTypeInternal _LaunchPlanClosure_default_instance_;
class LaunchPlanCreateRequest;
struct LaunchPlanCreateRequestDefaultTypeInternal;
extern LaunchPlanCreateRequestDefaultTypeInternal _LaunchPlanCreateRequest_default_instance_;
class LaunchPlanCreateResponse;
struct LaunchPlanCreateResponseDefaultTypeInternal;
extern LaunchPlanCreateResponseDefaultTypeInternal _LaunchPlanCreateResponse_default_instance_;
class LaunchPlanList;
struct LaunchPlanListDefaultTypeInternal;
extern LaunchPlanListDefaultTypeInternal _LaunchPlanList_default_instance_;
class LaunchPlanMetadata;
struct LaunchPlanMetadataDefaultTypeInternal;
extern LaunchPlanMetadataDefaultTypeInternal _LaunchPlanMetadata_default_instance_;
class LaunchPlanSpec;
struct LaunchPlanSpecDefaultTypeInternal;
extern LaunchPlanSpecDefaultTypeInternal _LaunchPlanSpec_default_instance_;
class LaunchPlanUpdateRequest;
struct LaunchPlanUpdateRequestDefaultTypeInternal;
extern LaunchPlanUpdateRequestDefaultTypeInternal _LaunchPlanUpdateRequest_default_instance_;
class LaunchPlanUpdateResponse;
struct LaunchPlanUpdateResponseDefaultTypeInternal;
extern LaunchPlanUpdateResponseDefaultTypeInternal _LaunchPlanUpdateResponse_default_instance_;
}  // namespace admin
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::admin::ActiveLaunchPlanListRequest* Arena::CreateMaybeMessage<::flyteidl::admin::ActiveLaunchPlanListRequest>(Arena*);
template<> ::flyteidl::admin::ActiveLaunchPlanRequest* Arena::CreateMaybeMessage<::flyteidl::admin::ActiveLaunchPlanRequest>(Arena*);
template<> ::flyteidl::admin::Auth* Arena::CreateMaybeMessage<::flyteidl::admin::Auth>(Arena*);
template<> ::flyteidl::admin::LaunchPlan* Arena::CreateMaybeMessage<::flyteidl::admin::LaunchPlan>(Arena*);
template<> ::flyteidl::admin::LaunchPlanClosure* Arena::CreateMaybeMessage<::flyteidl::admin::LaunchPlanClosure>(Arena*);
template<> ::flyteidl::admin::LaunchPlanCreateRequest* Arena::CreateMaybeMessage<::flyteidl::admin::LaunchPlanCreateRequest>(Arena*);
template<> ::flyteidl::admin::LaunchPlanCreateResponse* Arena::CreateMaybeMessage<::flyteidl::admin::LaunchPlanCreateResponse>(Arena*);
template<> ::flyteidl::admin::LaunchPlanList* Arena::CreateMaybeMessage<::flyteidl::admin::LaunchPlanList>(Arena*);
template<> ::flyteidl::admin::LaunchPlanMetadata* Arena::CreateMaybeMessage<::flyteidl::admin::LaunchPlanMetadata>(Arena*);
template<> ::flyteidl::admin::LaunchPlanSpec* Arena::CreateMaybeMessage<::flyteidl::admin::LaunchPlanSpec>(Arena*);
template<> ::flyteidl::admin::LaunchPlanUpdateRequest* Arena::CreateMaybeMessage<::flyteidl::admin::LaunchPlanUpdateRequest>(Arena*);
template<> ::flyteidl::admin::LaunchPlanUpdateResponse* Arena::CreateMaybeMessage<::flyteidl::admin::LaunchPlanUpdateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace admin {

enum LaunchPlanState : int {
  INACTIVE = 0,
  ACTIVE = 1,
  LaunchPlanState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LaunchPlanState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LaunchPlanState_IsValid(int value);
constexpr LaunchPlanState LaunchPlanState_MIN = INACTIVE;
constexpr LaunchPlanState LaunchPlanState_MAX = ACTIVE;
constexpr int LaunchPlanState_ARRAYSIZE = LaunchPlanState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaunchPlanState_descriptor();
template<typename T>
inline const std::string& LaunchPlanState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LaunchPlanState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LaunchPlanState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LaunchPlanState_descriptor(), enum_t_value);
}
inline bool LaunchPlanState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LaunchPlanState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LaunchPlanState>(
    LaunchPlanState_descriptor(), name, value);
}
// ===================================================================

class LaunchPlanCreateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.LaunchPlanCreateRequest) */ {
 public:
  inline LaunchPlanCreateRequest() : LaunchPlanCreateRequest(nullptr) {}
  ~LaunchPlanCreateRequest() override;
  explicit constexpr LaunchPlanCreateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaunchPlanCreateRequest(const LaunchPlanCreateRequest& from);
  LaunchPlanCreateRequest(LaunchPlanCreateRequest&& from) noexcept
    : LaunchPlanCreateRequest() {
    *this = ::std::move(from);
  }

  inline LaunchPlanCreateRequest& operator=(const LaunchPlanCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaunchPlanCreateRequest& operator=(LaunchPlanCreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaunchPlanCreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaunchPlanCreateRequest* internal_default_instance() {
    return reinterpret_cast<const LaunchPlanCreateRequest*>(
               &_LaunchPlanCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LaunchPlanCreateRequest& a, LaunchPlanCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LaunchPlanCreateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaunchPlanCreateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaunchPlanCreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaunchPlanCreateRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchPlanCreateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.LaunchPlanCreateRequest";
  }
  protected:
  explicit LaunchPlanCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSpecFieldNumber = 2,
  };
  // .flyteidl.core.Identifier id = 1 [json_name = "id"];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::flyteidl::core::Identifier& id() const;
  PROTOBUF_NODISCARD ::flyteidl::core::Identifier* release_id();
  ::flyteidl::core::Identifier* mutable_id();
  void set_allocated_id(::flyteidl::core::Identifier* id);
  private:
  const ::flyteidl::core::Identifier& _internal_id() const;
  ::flyteidl::core::Identifier* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::flyteidl::core::Identifier* id);
  ::flyteidl::core::Identifier* unsafe_arena_release_id();

  // .flyteidl.admin.LaunchPlanSpec spec = 2 [json_name = "spec"];
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::flyteidl::admin::LaunchPlanSpec& spec() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::LaunchPlanSpec* release_spec();
  ::flyteidl::admin::LaunchPlanSpec* mutable_spec();
  void set_allocated_spec(::flyteidl::admin::LaunchPlanSpec* spec);
  private:
  const ::flyteidl::admin::LaunchPlanSpec& _internal_spec() const;
  ::flyteidl::admin::LaunchPlanSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::flyteidl::admin::LaunchPlanSpec* spec);
  ::flyteidl::admin::LaunchPlanSpec* unsafe_arena_release_spec();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.LaunchPlanCreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::Identifier* id_;
  ::flyteidl::admin::LaunchPlanSpec* spec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
};
// -------------------------------------------------------------------

class LaunchPlanCreateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:flyteidl.admin.LaunchPlanCreateResponse) */ {
 public:
  inline LaunchPlanCreateResponse() : LaunchPlanCreateResponse(nullptr) {}
  explicit constexpr LaunchPlanCreateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaunchPlanCreateResponse(const LaunchPlanCreateResponse& from);
  LaunchPlanCreateResponse(LaunchPlanCreateResponse&& from) noexcept
    : LaunchPlanCreateResponse() {
    *this = ::std::move(from);
  }

  inline LaunchPlanCreateResponse& operator=(const LaunchPlanCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaunchPlanCreateResponse& operator=(LaunchPlanCreateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaunchPlanCreateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaunchPlanCreateResponse* internal_default_instance() {
    return reinterpret_cast<const LaunchPlanCreateResponse*>(
               &_LaunchPlanCreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LaunchPlanCreateResponse& a, LaunchPlanCreateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LaunchPlanCreateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaunchPlanCreateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaunchPlanCreateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaunchPlanCreateResponse>(arena);
  }

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.LaunchPlanCreateResponse";
  }
  protected:
  explicit LaunchPlanCreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.LaunchPlanCreateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
};
// -------------------------------------------------------------------

class LaunchPlan final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.LaunchPlan) */ {
 public:
  inline LaunchPlan() : LaunchPlan(nullptr) {}
  ~LaunchPlan() override;
  explicit constexpr LaunchPlan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaunchPlan(const LaunchPlan& from);
  LaunchPlan(LaunchPlan&& from) noexcept
    : LaunchPlan() {
    *this = ::std::move(from);
  }

  inline LaunchPlan& operator=(const LaunchPlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaunchPlan& operator=(LaunchPlan&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaunchPlan& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaunchPlan* internal_default_instance() {
    return reinterpret_cast<const LaunchPlan*>(
               &_LaunchPlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LaunchPlan& a, LaunchPlan& b) {
    a.Swap(&b);
  }
  inline void Swap(LaunchPlan* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaunchPlan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaunchPlan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaunchPlan>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchPlan* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.LaunchPlan";
  }
  protected:
  explicit LaunchPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSpecFieldNumber = 2,
    kClosureFieldNumber = 3,
  };
  // .flyteidl.core.Identifier id = 1 [json_name = "id"];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::flyteidl::core::Identifier& id() const;
  PROTOBUF_NODISCARD ::flyteidl::core::Identifier* release_id();
  ::flyteidl::core::Identifier* mutable_id();
  void set_allocated_id(::flyteidl::core::Identifier* id);
  private:
  const ::flyteidl::core::Identifier& _internal_id() const;
  ::flyteidl::core::Identifier* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::flyteidl::core::Identifier* id);
  ::flyteidl::core::Identifier* unsafe_arena_release_id();

  // .flyteidl.admin.LaunchPlanSpec spec = 2 [json_name = "spec"];
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::flyteidl::admin::LaunchPlanSpec& spec() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::LaunchPlanSpec* release_spec();
  ::flyteidl::admin::LaunchPlanSpec* mutable_spec();
  void set_allocated_spec(::flyteidl::admin::LaunchPlanSpec* spec);
  private:
  const ::flyteidl::admin::LaunchPlanSpec& _internal_spec() const;
  ::flyteidl::admin::LaunchPlanSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::flyteidl::admin::LaunchPlanSpec* spec);
  ::flyteidl::admin::LaunchPlanSpec* unsafe_arena_release_spec();

  // .flyteidl.admin.LaunchPlanClosure closure = 3 [json_name = "closure"];
  bool has_closure() const;
  private:
  bool _internal_has_closure() const;
  public:
  void clear_closure();
  const ::flyteidl::admin::LaunchPlanClosure& closure() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::LaunchPlanClosure* release_closure();
  ::flyteidl::admin::LaunchPlanClosure* mutable_closure();
  void set_allocated_closure(::flyteidl::admin::LaunchPlanClosure* closure);
  private:
  const ::flyteidl::admin::LaunchPlanClosure& _internal_closure() const;
  ::flyteidl::admin::LaunchPlanClosure* _internal_mutable_closure();
  public:
  void unsafe_arena_set_allocated_closure(
      ::flyteidl::admin::LaunchPlanClosure* closure);
  ::flyteidl::admin::LaunchPlanClosure* unsafe_arena_release_closure();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.LaunchPlan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::Identifier* id_;
  ::flyteidl::admin::LaunchPlanSpec* spec_;
  ::flyteidl::admin::LaunchPlanClosure* closure_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
};
// -------------------------------------------------------------------

class LaunchPlanList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.LaunchPlanList) */ {
 public:
  inline LaunchPlanList() : LaunchPlanList(nullptr) {}
  ~LaunchPlanList() override;
  explicit constexpr LaunchPlanList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaunchPlanList(const LaunchPlanList& from);
  LaunchPlanList(LaunchPlanList&& from) noexcept
    : LaunchPlanList() {
    *this = ::std::move(from);
  }

  inline LaunchPlanList& operator=(const LaunchPlanList& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaunchPlanList& operator=(LaunchPlanList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaunchPlanList& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaunchPlanList* internal_default_instance() {
    return reinterpret_cast<const LaunchPlanList*>(
               &_LaunchPlanList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LaunchPlanList& a, LaunchPlanList& b) {
    a.Swap(&b);
  }
  inline void Swap(LaunchPlanList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaunchPlanList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaunchPlanList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaunchPlanList>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchPlanList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.LaunchPlanList";
  }
  protected:
  explicit LaunchPlanList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaunchPlansFieldNumber = 1,
    kTokenFieldNumber = 2,
  };
  // repeated .flyteidl.admin.LaunchPlan launch_plans = 1 [json_name = "launchPlans"];
  int launch_plans_size() const;
  private:
  int _internal_launch_plans_size() const;
  public:
  void clear_launch_plans();
  ::flyteidl::admin::LaunchPlan* mutable_launch_plans(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::LaunchPlan >*
      mutable_launch_plans();
  private:
  const ::flyteidl::admin::LaunchPlan& _internal_launch_plans(int index) const;
  ::flyteidl::admin::LaunchPlan* _internal_add_launch_plans();
  public:
  const ::flyteidl::admin::LaunchPlan& launch_plans(int index) const;
  ::flyteidl::admin::LaunchPlan* add_launch_plans();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::LaunchPlan >&
      launch_plans() const;

  // string token = 2 [json_name = "token"];
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.LaunchPlanList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::LaunchPlan > launch_plans_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
};
// -------------------------------------------------------------------

class Auth final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Auth) */ {
 public:
  inline Auth() : Auth(nullptr) {}
  ~Auth() override;
  explicit constexpr Auth(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Auth(const Auth& from);
  Auth(Auth&& from) noexcept
    : Auth() {
    *this = ::std::move(from);
  }

  inline Auth& operator=(const Auth& from) {
    CopyFrom(from);
    return *this;
  }
  inline Auth& operator=(Auth&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Auth& default_instance() {
    return *internal_default_instance();
  }
  static inline const Auth* internal_default_instance() {
    return reinterpret_cast<const Auth*>(
               &_Auth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Auth& a, Auth& b) {
    a.Swap(&b);
  }
  inline void Swap(Auth* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Auth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Auth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Auth>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Auth* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.Auth";
  }
  protected:
  explicit Auth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssumableIamRoleFieldNumber = 1,
    kKubernetesServiceAccountFieldNumber = 2,
  };
  // string assumable_iam_role = 1 [json_name = "assumableIamRole"];
  void clear_assumable_iam_role();
  const std::string& assumable_iam_role() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_assumable_iam_role(ArgT0&& arg0, ArgT... args);
  std::string* mutable_assumable_iam_role();
  PROTOBUF_NODISCARD std::string* release_assumable_iam_role();
  void set_allocated_assumable_iam_role(std::string* assumable_iam_role);
  private:
  const std::string& _internal_assumable_iam_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_assumable_iam_role(const std::string& value);
  std::string* _internal_mutable_assumable_iam_role();
  public:

  // string kubernetes_service_account = 2 [json_name = "kubernetesServiceAccount"];
  void clear_kubernetes_service_account();
  const std::string& kubernetes_service_account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kubernetes_service_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kubernetes_service_account();
  PROTOBUF_NODISCARD std::string* release_kubernetes_service_account();
  void set_allocated_kubernetes_service_account(std::string* kubernetes_service_account);
  private:
  const std::string& _internal_kubernetes_service_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kubernetes_service_account(const std::string& value);
  std::string* _internal_mutable_kubernetes_service_account();
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Auth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assumable_iam_role_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kubernetes_service_account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
};
// -------------------------------------------------------------------

class LaunchPlanSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.LaunchPlanSpec) */ {
 public:
  inline LaunchPlanSpec() : LaunchPlanSpec(nullptr) {}
  ~LaunchPlanSpec() override;
  explicit constexpr LaunchPlanSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaunchPlanSpec(const LaunchPlanSpec& from);
  LaunchPlanSpec(LaunchPlanSpec&& from) noexcept
    : LaunchPlanSpec() {
    *this = ::std::move(from);
  }

  inline LaunchPlanSpec& operator=(const LaunchPlanSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaunchPlanSpec& operator=(LaunchPlanSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaunchPlanSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaunchPlanSpec* internal_default_instance() {
    return reinterpret_cast<const LaunchPlanSpec*>(
               &_LaunchPlanSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LaunchPlanSpec& a, LaunchPlanSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(LaunchPlanSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaunchPlanSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaunchPlanSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaunchPlanSpec>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchPlanSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.LaunchPlanSpec";
  }
  protected:
  explicit LaunchPlanSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 5,
    kWorkflowIdFieldNumber = 1,
    kEntityMetadataFieldNumber = 2,
    kDefaultInputsFieldNumber = 3,
    kFixedInputsFieldNumber = 4,
    kLabelsFieldNumber = 6,
    kAnnotationsFieldNumber = 7,
    kAuthFieldNumber = 8,
    kAuthRoleFieldNumber = 9,
    kSecurityContextFieldNumber = 10,
    kQualityOfServiceFieldNumber = 16,
    kRawOutputDataConfigFieldNumber = 17,
    kMaxParallelismFieldNumber = 18,
  };
  // string role = 5 [json_name = "role", deprecated = true];
  PROTOBUF_DEPRECATED void clear_role();
  PROTOBUF_DEPRECATED const std::string& role() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_role(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_role();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_role();
  PROTOBUF_DEPRECATED void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // .flyteidl.core.Identifier workflow_id = 1 [json_name = "workflowId"];
  bool has_workflow_id() const;
  private:
  bool _internal_has_workflow_id() const;
  public:
  void clear_workflow_id();
  const ::flyteidl::core::Identifier& workflow_id() const;
  PROTOBUF_NODISCARD ::flyteidl::core::Identifier* release_workflow_id();
  ::flyteidl::core::Identifier* mutable_workflow_id();
  void set_allocated_workflow_id(::flyteidl::core::Identifier* workflow_id);
  private:
  const ::flyteidl::core::Identifier& _internal_workflow_id() const;
  ::flyteidl::core::Identifier* _internal_mutable_workflow_id();
  public:
  void unsafe_arena_set_allocated_workflow_id(
      ::flyteidl::core::Identifier* workflow_id);
  ::flyteidl::core::Identifier* unsafe_arena_release_workflow_id();

  // .flyteidl.admin.LaunchPlanMetadata entity_metadata = 2 [json_name = "entityMetadata"];
  bool has_entity_metadata() const;
  private:
  bool _internal_has_entity_metadata() const;
  public:
  void clear_entity_metadata();
  const ::flyteidl::admin::LaunchPlanMetadata& entity_metadata() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::LaunchPlanMetadata* release_entity_metadata();
  ::flyteidl::admin::LaunchPlanMetadata* mutable_entity_metadata();
  void set_allocated_entity_metadata(::flyteidl::admin::LaunchPlanMetadata* entity_metadata);
  private:
  const ::flyteidl::admin::LaunchPlanMetadata& _internal_entity_metadata() const;
  ::flyteidl::admin::LaunchPlanMetadata* _internal_mutable_entity_metadata();
  public:
  void unsafe_arena_set_allocated_entity_metadata(
      ::flyteidl::admin::LaunchPlanMetadata* entity_metadata);
  ::flyteidl::admin::LaunchPlanMetadata* unsafe_arena_release_entity_metadata();

  // .flyteidl.core.ParameterMap default_inputs = 3 [json_name = "defaultInputs"];
  bool has_default_inputs() const;
  private:
  bool _internal_has_default_inputs() const;
  public:
  void clear_default_inputs();
  const ::flyteidl::core::ParameterMap& default_inputs() const;
  PROTOBUF_NODISCARD ::flyteidl::core::ParameterMap* release_default_inputs();
  ::flyteidl::core::ParameterMap* mutable_default_inputs();
  void set_allocated_default_inputs(::flyteidl::core::ParameterMap* default_inputs);
  private:
  const ::flyteidl::core::ParameterMap& _internal_default_inputs() const;
  ::flyteidl::core::ParameterMap* _internal_mutable_default_inputs();
  public:
  void unsafe_arena_set_allocated_default_inputs(
      ::flyteidl::core::ParameterMap* default_inputs);
  ::flyteidl::core::ParameterMap* unsafe_arena_release_default_inputs();

  // .flyteidl.core.LiteralMap fixed_inputs = 4 [json_name = "fixedInputs"];
  bool has_fixed_inputs() const;
  private:
  bool _internal_has_fixed_inputs() const;
  public:
  void clear_fixed_inputs();
  const ::flyteidl::core::LiteralMap& fixed_inputs() const;
  PROTOBUF_NODISCARD ::flyteidl::core::LiteralMap* release_fixed_inputs();
  ::flyteidl::core::LiteralMap* mutable_fixed_inputs();
  void set_allocated_fixed_inputs(::flyteidl::core::LiteralMap* fixed_inputs);
  private:
  const ::flyteidl::core::LiteralMap& _internal_fixed_inputs() const;
  ::flyteidl::core::LiteralMap* _internal_mutable_fixed_inputs();
  public:
  void unsafe_arena_set_allocated_fixed_inputs(
      ::flyteidl::core::LiteralMap* fixed_inputs);
  ::flyteidl::core::LiteralMap* unsafe_arena_release_fixed_inputs();

  // .flyteidl.admin.Labels labels = 6 [json_name = "labels"];
  bool has_labels() const;
  private:
  bool _internal_has_labels() const;
  public:
  void clear_labels();
  const ::flyteidl::admin::Labels& labels() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::Labels* release_labels();
  ::flyteidl::admin::Labels* mutable_labels();
  void set_allocated_labels(::flyteidl::admin::Labels* labels);
  private:
  const ::flyteidl::admin::Labels& _internal_labels() const;
  ::flyteidl::admin::Labels* _internal_mutable_labels();
  public:
  void unsafe_arena_set_allocated_labels(
      ::flyteidl::admin::Labels* labels);
  ::flyteidl::admin::Labels* unsafe_arena_release_labels();

  // .flyteidl.admin.Annotations annotations = 7 [json_name = "annotations"];
  bool has_annotations() const;
  private:
  bool _internal_has_annotations() const;
  public:
  void clear_annotations();
  const ::flyteidl::admin::Annotations& annotations() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::Annotations* release_annotations();
  ::flyteidl::admin::Annotations* mutable_annotations();
  void set_allocated_annotations(::flyteidl::admin::Annotations* annotations);
  private:
  const ::flyteidl::admin::Annotations& _internal_annotations() const;
  ::flyteidl::admin::Annotations* _internal_mutable_annotations();
  public:
  void unsafe_arena_set_allocated_annotations(
      ::flyteidl::admin::Annotations* annotations);
  ::flyteidl::admin::Annotations* unsafe_arena_release_annotations();

  // .flyteidl.admin.Auth auth = 8 [json_name = "auth", deprecated = true];
  PROTOBUF_DEPRECATED bool has_auth() const;
  private:
  bool _internal_has_auth() const;
  public:
  PROTOBUF_DEPRECATED void clear_auth();
  PROTOBUF_DEPRECATED const ::flyteidl::admin::Auth& auth() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::flyteidl::admin::Auth* release_auth();
  PROTOBUF_DEPRECATED ::flyteidl::admin::Auth* mutable_auth();
  PROTOBUF_DEPRECATED void set_allocated_auth(::flyteidl::admin::Auth* auth);
  private:
  const ::flyteidl::admin::Auth& _internal_auth() const;
  ::flyteidl::admin::Auth* _internal_mutable_auth();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_auth(
      ::flyteidl::admin::Auth* auth);
  PROTOBUF_DEPRECATED ::flyteidl::admin::Auth* unsafe_arena_release_auth();

  // .flyteidl.admin.AuthRole auth_role = 9 [json_name = "authRole", deprecated = true];
  PROTOBUF_DEPRECATED bool has_auth_role() const;
  private:
  bool _internal_has_auth_role() const;
  public:
  PROTOBUF_DEPRECATED void clear_auth_role();
  PROTOBUF_DEPRECATED const ::flyteidl::admin::AuthRole& auth_role() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::flyteidl::admin::AuthRole* release_auth_role();
  PROTOBUF_DEPRECATED ::flyteidl::admin::AuthRole* mutable_auth_role();
  PROTOBUF_DEPRECATED void set_allocated_auth_role(::flyteidl::admin::AuthRole* auth_role);
  private:
  const ::flyteidl::admin::AuthRole& _internal_auth_role() const;
  ::flyteidl::admin::AuthRole* _internal_mutable_auth_role();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_auth_role(
      ::flyteidl::admin::AuthRole* auth_role);
  PROTOBUF_DEPRECATED ::flyteidl::admin::AuthRole* unsafe_arena_release_auth_role();

  // .flyteidl.core.SecurityContext security_context = 10 [json_name = "securityContext"];
  bool has_security_context() const;
  private:
  bool _internal_has_security_context() const;
  public:
  void clear_security_context();
  const ::flyteidl::core::SecurityContext& security_context() const;
  PROTOBUF_NODISCARD ::flyteidl::core::SecurityContext* release_security_context();
  ::flyteidl::core::SecurityContext* mutable_security_context();
  void set_allocated_security_context(::flyteidl::core::SecurityContext* security_context);
  private:
  const ::flyteidl::core::SecurityContext& _internal_security_context() const;
  ::flyteidl::core::SecurityContext* _internal_mutable_security_context();
  public:
  void unsafe_arena_set_allocated_security_context(
      ::flyteidl::core::SecurityContext* security_context);
  ::flyteidl::core::SecurityContext* unsafe_arena_release_security_context();

  // .flyteidl.core.QualityOfService quality_of_service = 16 [json_name = "qualityOfService"];
  bool has_quality_of_service() const;
  private:
  bool _internal_has_quality_of_service() const;
  public:
  void clear_quality_of_service();
  const ::flyteidl::core::QualityOfService& quality_of_service() const;
  PROTOBUF_NODISCARD ::flyteidl::core::QualityOfService* release_quality_of_service();
  ::flyteidl::core::QualityOfService* mutable_quality_of_service();
  void set_allocated_quality_of_service(::flyteidl::core::QualityOfService* quality_of_service);
  private:
  const ::flyteidl::core::QualityOfService& _internal_quality_of_service() const;
  ::flyteidl::core::QualityOfService* _internal_mutable_quality_of_service();
  public:
  void unsafe_arena_set_allocated_quality_of_service(
      ::flyteidl::core::QualityOfService* quality_of_service);
  ::flyteidl::core::QualityOfService* unsafe_arena_release_quality_of_service();

  // .flyteidl.admin.RawOutputDataConfig raw_output_data_config = 17 [json_name = "rawOutputDataConfig"];
  bool has_raw_output_data_config() const;
  private:
  bool _internal_has_raw_output_data_config() const;
  public:
  void clear_raw_output_data_config();
  const ::flyteidl::admin::RawOutputDataConfig& raw_output_data_config() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::RawOutputDataConfig* release_raw_output_data_config();
  ::flyteidl::admin::RawOutputDataConfig* mutable_raw_output_data_config();
  void set_allocated_raw_output_data_config(::flyteidl::admin::RawOutputDataConfig* raw_output_data_config);
  private:
  const ::flyteidl::admin::RawOutputDataConfig& _internal_raw_output_data_config() const;
  ::flyteidl::admin::RawOutputDataConfig* _internal_mutable_raw_output_data_config();
  public:
  void unsafe_arena_set_allocated_raw_output_data_config(
      ::flyteidl::admin::RawOutputDataConfig* raw_output_data_config);
  ::flyteidl::admin::RawOutputDataConfig* unsafe_arena_release_raw_output_data_config();

  // int32 max_parallelism = 18 [json_name = "maxParallelism"];
  void clear_max_parallelism();
  int32_t max_parallelism() const;
  void set_max_parallelism(int32_t value);
  private:
  int32_t _internal_max_parallelism() const;
  void _internal_set_max_parallelism(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.LaunchPlanSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
  ::flyteidl::core::Identifier* workflow_id_;
  ::flyteidl::admin::LaunchPlanMetadata* entity_metadata_;
  ::flyteidl::core::ParameterMap* default_inputs_;
  ::flyteidl::core::LiteralMap* fixed_inputs_;
  ::flyteidl::admin::Labels* labels_;
  ::flyteidl::admin::Annotations* annotations_;
  ::flyteidl::admin::Auth* auth_;
  ::flyteidl::admin::AuthRole* auth_role_;
  ::flyteidl::core::SecurityContext* security_context_;
  ::flyteidl::core::QualityOfService* quality_of_service_;
  ::flyteidl::admin::RawOutputDataConfig* raw_output_data_config_;
  int32_t max_parallelism_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
};
// -------------------------------------------------------------------

class LaunchPlanClosure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.LaunchPlanClosure) */ {
 public:
  inline LaunchPlanClosure() : LaunchPlanClosure(nullptr) {}
  ~LaunchPlanClosure() override;
  explicit constexpr LaunchPlanClosure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaunchPlanClosure(const LaunchPlanClosure& from);
  LaunchPlanClosure(LaunchPlanClosure&& from) noexcept
    : LaunchPlanClosure() {
    *this = ::std::move(from);
  }

  inline LaunchPlanClosure& operator=(const LaunchPlanClosure& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaunchPlanClosure& operator=(LaunchPlanClosure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaunchPlanClosure& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaunchPlanClosure* internal_default_instance() {
    return reinterpret_cast<const LaunchPlanClosure*>(
               &_LaunchPlanClosure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LaunchPlanClosure& a, LaunchPlanClosure& b) {
    a.Swap(&b);
  }
  inline void Swap(LaunchPlanClosure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaunchPlanClosure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaunchPlanClosure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaunchPlanClosure>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchPlanClosure* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.LaunchPlanClosure";
  }
  protected:
  explicit LaunchPlanClosure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpectedInputsFieldNumber = 2,
    kExpectedOutputsFieldNumber = 3,
    kCreatedAtFieldNumber = 4,
    kUpdatedAtFieldNumber = 5,
    kStateFieldNumber = 1,
  };
  // .flyteidl.core.ParameterMap expected_inputs = 2 [json_name = "expectedInputs"];
  bool has_expected_inputs() const;
  private:
  bool _internal_has_expected_inputs() const;
  public:
  void clear_expected_inputs();
  const ::flyteidl::core::ParameterMap& expected_inputs() const;
  PROTOBUF_NODISCARD ::flyteidl::core::ParameterMap* release_expected_inputs();
  ::flyteidl::core::ParameterMap* mutable_expected_inputs();
  void set_allocated_expected_inputs(::flyteidl::core::ParameterMap* expected_inputs);
  private:
  const ::flyteidl::core::ParameterMap& _internal_expected_inputs() const;
  ::flyteidl::core::ParameterMap* _internal_mutable_expected_inputs();
  public:
  void unsafe_arena_set_allocated_expected_inputs(
      ::flyteidl::core::ParameterMap* expected_inputs);
  ::flyteidl::core::ParameterMap* unsafe_arena_release_expected_inputs();

  // .flyteidl.core.VariableMap expected_outputs = 3 [json_name = "expectedOutputs"];
  bool has_expected_outputs() const;
  private:
  bool _internal_has_expected_outputs() const;
  public:
  void clear_expected_outputs();
  const ::flyteidl::core::VariableMap& expected_outputs() const;
  PROTOBUF_NODISCARD ::flyteidl::core::VariableMap* release_expected_outputs();
  ::flyteidl::core::VariableMap* mutable_expected_outputs();
  void set_allocated_expected_outputs(::flyteidl::core::VariableMap* expected_outputs);
  private:
  const ::flyteidl::core::VariableMap& _internal_expected_outputs() const;
  ::flyteidl::core::VariableMap* _internal_mutable_expected_outputs();
  public:
  void unsafe_arena_set_allocated_expected_outputs(
      ::flyteidl::core::VariableMap* expected_outputs);
  ::flyteidl::core::VariableMap* unsafe_arena_release_expected_outputs();

  // .google.protobuf.Timestamp created_at = 4 [json_name = "createdAt"];
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 5 [json_name = "updatedAt"];
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // .flyteidl.admin.LaunchPlanState state = 1 [json_name = "state"];
  void clear_state();
  ::flyteidl::admin::LaunchPlanState state() const;
  void set_state(::flyteidl::admin::LaunchPlanState value);
  private:
  ::flyteidl::admin::LaunchPlanState _internal_state() const;
  void _internal_set_state(::flyteidl::admin::LaunchPlanState value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.LaunchPlanClosure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::ParameterMap* expected_inputs_;
  ::flyteidl::core::VariableMap* expected_outputs_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
};
// -------------------------------------------------------------------

class LaunchPlanMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.LaunchPlanMetadata) */ {
 public:
  inline LaunchPlanMetadata() : LaunchPlanMetadata(nullptr) {}
  ~LaunchPlanMetadata() override;
  explicit constexpr LaunchPlanMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaunchPlanMetadata(const LaunchPlanMetadata& from);
  LaunchPlanMetadata(LaunchPlanMetadata&& from) noexcept
    : LaunchPlanMetadata() {
    *this = ::std::move(from);
  }

  inline LaunchPlanMetadata& operator=(const LaunchPlanMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaunchPlanMetadata& operator=(LaunchPlanMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaunchPlanMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaunchPlanMetadata* internal_default_instance() {
    return reinterpret_cast<const LaunchPlanMetadata*>(
               &_LaunchPlanMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LaunchPlanMetadata& a, LaunchPlanMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(LaunchPlanMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaunchPlanMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaunchPlanMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaunchPlanMetadata>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchPlanMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.LaunchPlanMetadata";
  }
  protected:
  explicit LaunchPlanMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotificationsFieldNumber = 2,
    kScheduleFieldNumber = 1,
  };
  // repeated .flyteidl.admin.Notification notifications = 2 [json_name = "notifications"];
  int notifications_size() const;
  private:
  int _internal_notifications_size() const;
  public:
  void clear_notifications();
  ::flyteidl::admin::Notification* mutable_notifications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Notification >*
      mutable_notifications();
  private:
  const ::flyteidl::admin::Notification& _internal_notifications(int index) const;
  ::flyteidl::admin::Notification* _internal_add_notifications();
  public:
  const ::flyteidl::admin::Notification& notifications(int index) const;
  ::flyteidl::admin::Notification* add_notifications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Notification >&
      notifications() const;

  // .flyteidl.admin.Schedule schedule = 1 [json_name = "schedule"];
  bool has_schedule() const;
  private:
  bool _internal_has_schedule() const;
  public:
  void clear_schedule();
  const ::flyteidl::admin::Schedule& schedule() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::Schedule* release_schedule();
  ::flyteidl::admin::Schedule* mutable_schedule();
  void set_allocated_schedule(::flyteidl::admin::Schedule* schedule);
  private:
  const ::flyteidl::admin::Schedule& _internal_schedule() const;
  ::flyteidl::admin::Schedule* _internal_mutable_schedule();
  public:
  void unsafe_arena_set_allocated_schedule(
      ::flyteidl::admin::Schedule* schedule);
  ::flyteidl::admin::Schedule* unsafe_arena_release_schedule();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.LaunchPlanMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Notification > notifications_;
  ::flyteidl::admin::Schedule* schedule_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
};
// -------------------------------------------------------------------

class LaunchPlanUpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.LaunchPlanUpdateRequest) */ {
 public:
  inline LaunchPlanUpdateRequest() : LaunchPlanUpdateRequest(nullptr) {}
  ~LaunchPlanUpdateRequest() override;
  explicit constexpr LaunchPlanUpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaunchPlanUpdateRequest(const LaunchPlanUpdateRequest& from);
  LaunchPlanUpdateRequest(LaunchPlanUpdateRequest&& from) noexcept
    : LaunchPlanUpdateRequest() {
    *this = ::std::move(from);
  }

  inline LaunchPlanUpdateRequest& operator=(const LaunchPlanUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaunchPlanUpdateRequest& operator=(LaunchPlanUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaunchPlanUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaunchPlanUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const LaunchPlanUpdateRequest*>(
               &_LaunchPlanUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LaunchPlanUpdateRequest& a, LaunchPlanUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LaunchPlanUpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaunchPlanUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaunchPlanUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaunchPlanUpdateRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchPlanUpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.LaunchPlanUpdateRequest";
  }
  protected:
  explicit LaunchPlanUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .flyteidl.core.Identifier id = 1 [json_name = "id"];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::flyteidl::core::Identifier& id() const;
  PROTOBUF_NODISCARD ::flyteidl::core::Identifier* release_id();
  ::flyteidl::core::Identifier* mutable_id();
  void set_allocated_id(::flyteidl::core::Identifier* id);
  private:
  const ::flyteidl::core::Identifier& _internal_id() const;
  ::flyteidl::core::Identifier* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::flyteidl::core::Identifier* id);
  ::flyteidl::core::Identifier* unsafe_arena_release_id();

  // .flyteidl.admin.LaunchPlanState state = 2 [json_name = "state"];
  void clear_state();
  ::flyteidl::admin::LaunchPlanState state() const;
  void set_state(::flyteidl::admin::LaunchPlanState value);
  private:
  ::flyteidl::admin::LaunchPlanState _internal_state() const;
  void _internal_set_state(::flyteidl::admin::LaunchPlanState value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.LaunchPlanUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::Identifier* id_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
};
// -------------------------------------------------------------------

class LaunchPlanUpdateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:flyteidl.admin.LaunchPlanUpdateResponse) */ {
 public:
  inline LaunchPlanUpdateResponse() : LaunchPlanUpdateResponse(nullptr) {}
  explicit constexpr LaunchPlanUpdateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaunchPlanUpdateResponse(const LaunchPlanUpdateResponse& from);
  LaunchPlanUpdateResponse(LaunchPlanUpdateResponse&& from) noexcept
    : LaunchPlanUpdateResponse() {
    *this = ::std::move(from);
  }

  inline LaunchPlanUpdateResponse& operator=(const LaunchPlanUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaunchPlanUpdateResponse& operator=(LaunchPlanUpdateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaunchPlanUpdateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaunchPlanUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const LaunchPlanUpdateResponse*>(
               &_LaunchPlanUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LaunchPlanUpdateResponse& a, LaunchPlanUpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LaunchPlanUpdateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaunchPlanUpdateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaunchPlanUpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaunchPlanUpdateResponse>(arena);
  }

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.LaunchPlanUpdateResponse";
  }
  protected:
  explicit LaunchPlanUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.LaunchPlanUpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
};
// -------------------------------------------------------------------

class ActiveLaunchPlanRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ActiveLaunchPlanRequest) */ {
 public:
  inline ActiveLaunchPlanRequest() : ActiveLaunchPlanRequest(nullptr) {}
  ~ActiveLaunchPlanRequest() override;
  explicit constexpr ActiveLaunchPlanRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActiveLaunchPlanRequest(const ActiveLaunchPlanRequest& from);
  ActiveLaunchPlanRequest(ActiveLaunchPlanRequest&& from) noexcept
    : ActiveLaunchPlanRequest() {
    *this = ::std::move(from);
  }

  inline ActiveLaunchPlanRequest& operator=(const ActiveLaunchPlanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveLaunchPlanRequest& operator=(ActiveLaunchPlanRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActiveLaunchPlanRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActiveLaunchPlanRequest* internal_default_instance() {
    return reinterpret_cast<const ActiveLaunchPlanRequest*>(
               &_ActiveLaunchPlanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ActiveLaunchPlanRequest& a, ActiveLaunchPlanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ActiveLaunchPlanRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActiveLaunchPlanRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActiveLaunchPlanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActiveLaunchPlanRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActiveLaunchPlanRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.ActiveLaunchPlanRequest";
  }
  protected:
  explicit ActiveLaunchPlanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // .flyteidl.admin.NamedEntityIdentifier id = 1 [json_name = "id"];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::flyteidl::admin::NamedEntityIdentifier& id() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::NamedEntityIdentifier* release_id();
  ::flyteidl::admin::NamedEntityIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::admin::NamedEntityIdentifier* id);
  private:
  const ::flyteidl::admin::NamedEntityIdentifier& _internal_id() const;
  ::flyteidl::admin::NamedEntityIdentifier* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::flyteidl::admin::NamedEntityIdentifier* id);
  ::flyteidl::admin::NamedEntityIdentifier* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ActiveLaunchPlanRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::admin::NamedEntityIdentifier* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
};
// -------------------------------------------------------------------

class ActiveLaunchPlanListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ActiveLaunchPlanListRequest) */ {
 public:
  inline ActiveLaunchPlanListRequest() : ActiveLaunchPlanListRequest(nullptr) {}
  ~ActiveLaunchPlanListRequest() override;
  explicit constexpr ActiveLaunchPlanListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActiveLaunchPlanListRequest(const ActiveLaunchPlanListRequest& from);
  ActiveLaunchPlanListRequest(ActiveLaunchPlanListRequest&& from) noexcept
    : ActiveLaunchPlanListRequest() {
    *this = ::std::move(from);
  }

  inline ActiveLaunchPlanListRequest& operator=(const ActiveLaunchPlanListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveLaunchPlanListRequest& operator=(ActiveLaunchPlanListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActiveLaunchPlanListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActiveLaunchPlanListRequest* internal_default_instance() {
    return reinterpret_cast<const ActiveLaunchPlanListRequest*>(
               &_ActiveLaunchPlanListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ActiveLaunchPlanListRequest& a, ActiveLaunchPlanListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ActiveLaunchPlanListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActiveLaunchPlanListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActiveLaunchPlanListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActiveLaunchPlanListRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActiveLaunchPlanListRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.ActiveLaunchPlanListRequest";
  }
  protected:
  explicit ActiveLaunchPlanListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectFieldNumber = 1,
    kDomainFieldNumber = 2,
    kTokenFieldNumber = 4,
    kSortByFieldNumber = 5,
    kLimitFieldNumber = 3,
  };
  // string project = 1 [json_name = "project"];
  void clear_project();
  const std::string& project() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project();
  PROTOBUF_NODISCARD std::string* release_project();
  void set_allocated_project(std::string* project);
  private:
  const std::string& _internal_project() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project(const std::string& value);
  std::string* _internal_mutable_project();
  public:

  // string domain = 2 [json_name = "domain"];
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // string token = 4 [json_name = "token"];
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .flyteidl.admin.Sort sort_by = 5 [json_name = "sortBy"];
  bool has_sort_by() const;
  private:
  bool _internal_has_sort_by() const;
  public:
  void clear_sort_by();
  const ::flyteidl::admin::Sort& sort_by() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::Sort* release_sort_by();
  ::flyteidl::admin::Sort* mutable_sort_by();
  void set_allocated_sort_by(::flyteidl::admin::Sort* sort_by);
  private:
  const ::flyteidl::admin::Sort& _internal_sort_by() const;
  ::flyteidl::admin::Sort* _internal_mutable_sort_by();
  public:
  void unsafe_arena_set_allocated_sort_by(
      ::flyteidl::admin::Sort* sort_by);
  ::flyteidl::admin::Sort* unsafe_arena_release_sort_by();

  // uint32 limit = 3 [json_name = "limit"];
  void clear_limit();
  uint32_t limit() const;
  void set_limit(uint32_t value);
  private:
  uint32_t _internal_limit() const;
  void _internal_set_limit(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ActiveLaunchPlanListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::flyteidl::admin::Sort* sort_by_;
  uint32_t limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LaunchPlanCreateRequest

// .flyteidl.core.Identifier id = 1 [json_name = "id"];
inline bool LaunchPlanCreateRequest::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool LaunchPlanCreateRequest::has_id() const {
  return _internal_has_id();
}
inline const ::flyteidl::core::Identifier& LaunchPlanCreateRequest::_internal_id() const {
  const ::flyteidl::core::Identifier* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::Identifier&>(
      ::flyteidl::core::_Identifier_default_instance_);
}
inline const ::flyteidl::core::Identifier& LaunchPlanCreateRequest::id() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanCreateRequest.id)
  return _internal_id();
}
inline void LaunchPlanCreateRequest::unsafe_arena_set_allocated_id(
    ::flyteidl::core::Identifier* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.LaunchPlanCreateRequest.id)
}
inline ::flyteidl::core::Identifier* LaunchPlanCreateRequest::release_id() {
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::Identifier* LaunchPlanCreateRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanCreateRequest.id)
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identifier* LaunchPlanCreateRequest::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identifier>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::flyteidl::core::Identifier* LaunchPlanCreateRequest::mutable_id() {
  ::flyteidl::core::Identifier* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanCreateRequest.id)
  return _msg;
}
inline void LaunchPlanCreateRequest::set_allocated_id(::flyteidl::core::Identifier* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanCreateRequest.id)
}

// .flyteidl.admin.LaunchPlanSpec spec = 2 [json_name = "spec"];
inline bool LaunchPlanCreateRequest::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool LaunchPlanCreateRequest::has_spec() const {
  return _internal_has_spec();
}
inline void LaunchPlanCreateRequest::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::flyteidl::admin::LaunchPlanSpec& LaunchPlanCreateRequest::_internal_spec() const {
  const ::flyteidl::admin::LaunchPlanSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::LaunchPlanSpec&>(
      ::flyteidl::admin::_LaunchPlanSpec_default_instance_);
}
inline const ::flyteidl::admin::LaunchPlanSpec& LaunchPlanCreateRequest::spec() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanCreateRequest.spec)
  return _internal_spec();
}
inline void LaunchPlanCreateRequest::unsafe_arena_set_allocated_spec(
    ::flyteidl::admin::LaunchPlanSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.LaunchPlanCreateRequest.spec)
}
inline ::flyteidl::admin::LaunchPlanSpec* LaunchPlanCreateRequest::release_spec() {
  
  ::flyteidl::admin::LaunchPlanSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::LaunchPlanSpec* LaunchPlanCreateRequest::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanCreateRequest.spec)
  
  ::flyteidl::admin::LaunchPlanSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::LaunchPlanSpec* LaunchPlanCreateRequest::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::LaunchPlanSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::flyteidl::admin::LaunchPlanSpec* LaunchPlanCreateRequest::mutable_spec() {
  ::flyteidl::admin::LaunchPlanSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanCreateRequest.spec)
  return _msg;
}
inline void LaunchPlanCreateRequest::set_allocated_spec(::flyteidl::admin::LaunchPlanSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::LaunchPlanSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanCreateRequest.spec)
}

// -------------------------------------------------------------------

// LaunchPlanCreateResponse

// -------------------------------------------------------------------

// LaunchPlan

// .flyteidl.core.Identifier id = 1 [json_name = "id"];
inline bool LaunchPlan::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool LaunchPlan::has_id() const {
  return _internal_has_id();
}
inline const ::flyteidl::core::Identifier& LaunchPlan::_internal_id() const {
  const ::flyteidl::core::Identifier* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::Identifier&>(
      ::flyteidl::core::_Identifier_default_instance_);
}
inline const ::flyteidl::core::Identifier& LaunchPlan::id() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlan.id)
  return _internal_id();
}
inline void LaunchPlan::unsafe_arena_set_allocated_id(
    ::flyteidl::core::Identifier* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.LaunchPlan.id)
}
inline ::flyteidl::core::Identifier* LaunchPlan::release_id() {
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::Identifier* LaunchPlan::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlan.id)
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identifier* LaunchPlan::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identifier>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::flyteidl::core::Identifier* LaunchPlan::mutable_id() {
  ::flyteidl::core::Identifier* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlan.id)
  return _msg;
}
inline void LaunchPlan::set_allocated_id(::flyteidl::core::Identifier* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlan.id)
}

// .flyteidl.admin.LaunchPlanSpec spec = 2 [json_name = "spec"];
inline bool LaunchPlan::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool LaunchPlan::has_spec() const {
  return _internal_has_spec();
}
inline void LaunchPlan::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::flyteidl::admin::LaunchPlanSpec& LaunchPlan::_internal_spec() const {
  const ::flyteidl::admin::LaunchPlanSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::LaunchPlanSpec&>(
      ::flyteidl::admin::_LaunchPlanSpec_default_instance_);
}
inline const ::flyteidl::admin::LaunchPlanSpec& LaunchPlan::spec() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlan.spec)
  return _internal_spec();
}
inline void LaunchPlan::unsafe_arena_set_allocated_spec(
    ::flyteidl::admin::LaunchPlanSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.LaunchPlan.spec)
}
inline ::flyteidl::admin::LaunchPlanSpec* LaunchPlan::release_spec() {
  
  ::flyteidl::admin::LaunchPlanSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::LaunchPlanSpec* LaunchPlan::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlan.spec)
  
  ::flyteidl::admin::LaunchPlanSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::LaunchPlanSpec* LaunchPlan::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::LaunchPlanSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::flyteidl::admin::LaunchPlanSpec* LaunchPlan::mutable_spec() {
  ::flyteidl::admin::LaunchPlanSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlan.spec)
  return _msg;
}
inline void LaunchPlan::set_allocated_spec(::flyteidl::admin::LaunchPlanSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::LaunchPlanSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlan.spec)
}

// .flyteidl.admin.LaunchPlanClosure closure = 3 [json_name = "closure"];
inline bool LaunchPlan::_internal_has_closure() const {
  return this != internal_default_instance() && closure_ != nullptr;
}
inline bool LaunchPlan::has_closure() const {
  return _internal_has_closure();
}
inline void LaunchPlan::clear_closure() {
  if (GetArenaForAllocation() == nullptr && closure_ != nullptr) {
    delete closure_;
  }
  closure_ = nullptr;
}
inline const ::flyteidl::admin::LaunchPlanClosure& LaunchPlan::_internal_closure() const {
  const ::flyteidl::admin::LaunchPlanClosure* p = closure_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::LaunchPlanClosure&>(
      ::flyteidl::admin::_LaunchPlanClosure_default_instance_);
}
inline const ::flyteidl::admin::LaunchPlanClosure& LaunchPlan::closure() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlan.closure)
  return _internal_closure();
}
inline void LaunchPlan::unsafe_arena_set_allocated_closure(
    ::flyteidl::admin::LaunchPlanClosure* closure) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(closure_);
  }
  closure_ = closure;
  if (closure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.LaunchPlan.closure)
}
inline ::flyteidl::admin::LaunchPlanClosure* LaunchPlan::release_closure() {
  
  ::flyteidl::admin::LaunchPlanClosure* temp = closure_;
  closure_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::LaunchPlanClosure* LaunchPlan::unsafe_arena_release_closure() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlan.closure)
  
  ::flyteidl::admin::LaunchPlanClosure* temp = closure_;
  closure_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::LaunchPlanClosure* LaunchPlan::_internal_mutable_closure() {
  
  if (closure_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::LaunchPlanClosure>(GetArenaForAllocation());
    closure_ = p;
  }
  return closure_;
}
inline ::flyteidl::admin::LaunchPlanClosure* LaunchPlan::mutable_closure() {
  ::flyteidl::admin::LaunchPlanClosure* _msg = _internal_mutable_closure();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlan.closure)
  return _msg;
}
inline void LaunchPlan::set_allocated_closure(::flyteidl::admin::LaunchPlanClosure* closure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete closure_;
  }
  if (closure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::LaunchPlanClosure>::GetOwningArena(closure);
    if (message_arena != submessage_arena) {
      closure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, closure, submessage_arena);
    }
    
  } else {
    
  }
  closure_ = closure;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlan.closure)
}

// -------------------------------------------------------------------

// LaunchPlanList

// repeated .flyteidl.admin.LaunchPlan launch_plans = 1 [json_name = "launchPlans"];
inline int LaunchPlanList::_internal_launch_plans_size() const {
  return launch_plans_.size();
}
inline int LaunchPlanList::launch_plans_size() const {
  return _internal_launch_plans_size();
}
inline void LaunchPlanList::clear_launch_plans() {
  launch_plans_.Clear();
}
inline ::flyteidl::admin::LaunchPlan* LaunchPlanList::mutable_launch_plans(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanList.launch_plans)
  return launch_plans_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::LaunchPlan >*
LaunchPlanList::mutable_launch_plans() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.LaunchPlanList.launch_plans)
  return &launch_plans_;
}
inline const ::flyteidl::admin::LaunchPlan& LaunchPlanList::_internal_launch_plans(int index) const {
  return launch_plans_.Get(index);
}
inline const ::flyteidl::admin::LaunchPlan& LaunchPlanList::launch_plans(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanList.launch_plans)
  return _internal_launch_plans(index);
}
inline ::flyteidl::admin::LaunchPlan* LaunchPlanList::_internal_add_launch_plans() {
  return launch_plans_.Add();
}
inline ::flyteidl::admin::LaunchPlan* LaunchPlanList::add_launch_plans() {
  ::flyteidl::admin::LaunchPlan* _add = _internal_add_launch_plans();
  // @@protoc_insertion_point(field_add:flyteidl.admin.LaunchPlanList.launch_plans)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::LaunchPlan >&
LaunchPlanList::launch_plans() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.LaunchPlanList.launch_plans)
  return launch_plans_;
}

// string token = 2 [json_name = "token"];
inline void LaunchPlanList::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& LaunchPlanList::token() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanList.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LaunchPlanList::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchPlanList.token)
}
inline std::string* LaunchPlanList::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanList.token)
  return _s;
}
inline const std::string& LaunchPlanList::_internal_token() const {
  return token_.Get();
}
inline void LaunchPlanList::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LaunchPlanList::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LaunchPlanList::release_token() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanList.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LaunchPlanList::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanList.token)
}

// -------------------------------------------------------------------

// Auth

// string assumable_iam_role = 1 [json_name = "assumableIamRole"];
inline void Auth::clear_assumable_iam_role() {
  assumable_iam_role_.ClearToEmpty();
}
inline const std::string& Auth::assumable_iam_role() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Auth.assumable_iam_role)
  return _internal_assumable_iam_role();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Auth::set_assumable_iam_role(ArgT0&& arg0, ArgT... args) {
 
 assumable_iam_role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.Auth.assumable_iam_role)
}
inline std::string* Auth::mutable_assumable_iam_role() {
  std::string* _s = _internal_mutable_assumable_iam_role();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Auth.assumable_iam_role)
  return _s;
}
inline const std::string& Auth::_internal_assumable_iam_role() const {
  return assumable_iam_role_.Get();
}
inline void Auth::_internal_set_assumable_iam_role(const std::string& value) {
  
  assumable_iam_role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Auth::_internal_mutable_assumable_iam_role() {
  
  return assumable_iam_role_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Auth::release_assumable_iam_role() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Auth.assumable_iam_role)
  return assumable_iam_role_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Auth::set_allocated_assumable_iam_role(std::string* assumable_iam_role) {
  if (assumable_iam_role != nullptr) {
    
  } else {
    
  }
  assumable_iam_role_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), assumable_iam_role,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (assumable_iam_role_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    assumable_iam_role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Auth.assumable_iam_role)
}

// string kubernetes_service_account = 2 [json_name = "kubernetesServiceAccount"];
inline void Auth::clear_kubernetes_service_account() {
  kubernetes_service_account_.ClearToEmpty();
}
inline const std::string& Auth::kubernetes_service_account() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Auth.kubernetes_service_account)
  return _internal_kubernetes_service_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Auth::set_kubernetes_service_account(ArgT0&& arg0, ArgT... args) {
 
 kubernetes_service_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.Auth.kubernetes_service_account)
}
inline std::string* Auth::mutable_kubernetes_service_account() {
  std::string* _s = _internal_mutable_kubernetes_service_account();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Auth.kubernetes_service_account)
  return _s;
}
inline const std::string& Auth::_internal_kubernetes_service_account() const {
  return kubernetes_service_account_.Get();
}
inline void Auth::_internal_set_kubernetes_service_account(const std::string& value) {
  
  kubernetes_service_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Auth::_internal_mutable_kubernetes_service_account() {
  
  return kubernetes_service_account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Auth::release_kubernetes_service_account() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Auth.kubernetes_service_account)
  return kubernetes_service_account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Auth::set_allocated_kubernetes_service_account(std::string* kubernetes_service_account) {
  if (kubernetes_service_account != nullptr) {
    
  } else {
    
  }
  kubernetes_service_account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kubernetes_service_account,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (kubernetes_service_account_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    kubernetes_service_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Auth.kubernetes_service_account)
}

// -------------------------------------------------------------------

// LaunchPlanSpec

// .flyteidl.core.Identifier workflow_id = 1 [json_name = "workflowId"];
inline bool LaunchPlanSpec::_internal_has_workflow_id() const {
  return this != internal_default_instance() && workflow_id_ != nullptr;
}
inline bool LaunchPlanSpec::has_workflow_id() const {
  return _internal_has_workflow_id();
}
inline const ::flyteidl::core::Identifier& LaunchPlanSpec::_internal_workflow_id() const {
  const ::flyteidl::core::Identifier* p = workflow_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::Identifier&>(
      ::flyteidl::core::_Identifier_default_instance_);
}
inline const ::flyteidl::core::Identifier& LaunchPlanSpec::workflow_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanSpec.workflow_id)
  return _internal_workflow_id();
}
inline void LaunchPlanSpec::unsafe_arena_set_allocated_workflow_id(
    ::flyteidl::core::Identifier* workflow_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(workflow_id_);
  }
  workflow_id_ = workflow_id;
  if (workflow_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.LaunchPlanSpec.workflow_id)
}
inline ::flyteidl::core::Identifier* LaunchPlanSpec::release_workflow_id() {
  
  ::flyteidl::core::Identifier* temp = workflow_id_;
  workflow_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::Identifier* LaunchPlanSpec::unsafe_arena_release_workflow_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanSpec.workflow_id)
  
  ::flyteidl::core::Identifier* temp = workflow_id_;
  workflow_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identifier* LaunchPlanSpec::_internal_mutable_workflow_id() {
  
  if (workflow_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identifier>(GetArenaForAllocation());
    workflow_id_ = p;
  }
  return workflow_id_;
}
inline ::flyteidl::core::Identifier* LaunchPlanSpec::mutable_workflow_id() {
  ::flyteidl::core::Identifier* _msg = _internal_mutable_workflow_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanSpec.workflow_id)
  return _msg;
}
inline void LaunchPlanSpec::set_allocated_workflow_id(::flyteidl::core::Identifier* workflow_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(workflow_id_);
  }
  if (workflow_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(workflow_id));
    if (message_arena != submessage_arena) {
      workflow_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workflow_id, submessage_arena);
    }
    
  } else {
    
  }
  workflow_id_ = workflow_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanSpec.workflow_id)
}

// .flyteidl.admin.LaunchPlanMetadata entity_metadata = 2 [json_name = "entityMetadata"];
inline bool LaunchPlanSpec::_internal_has_entity_metadata() const {
  return this != internal_default_instance() && entity_metadata_ != nullptr;
}
inline bool LaunchPlanSpec::has_entity_metadata() const {
  return _internal_has_entity_metadata();
}
inline void LaunchPlanSpec::clear_entity_metadata() {
  if (GetArenaForAllocation() == nullptr && entity_metadata_ != nullptr) {
    delete entity_metadata_;
  }
  entity_metadata_ = nullptr;
}
inline const ::flyteidl::admin::LaunchPlanMetadata& LaunchPlanSpec::_internal_entity_metadata() const {
  const ::flyteidl::admin::LaunchPlanMetadata* p = entity_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::LaunchPlanMetadata&>(
      ::flyteidl::admin::_LaunchPlanMetadata_default_instance_);
}
inline const ::flyteidl::admin::LaunchPlanMetadata& LaunchPlanSpec::entity_metadata() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanSpec.entity_metadata)
  return _internal_entity_metadata();
}
inline void LaunchPlanSpec::unsafe_arena_set_allocated_entity_metadata(
    ::flyteidl::admin::LaunchPlanMetadata* entity_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_metadata_);
  }
  entity_metadata_ = entity_metadata;
  if (entity_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.LaunchPlanSpec.entity_metadata)
}
inline ::flyteidl::admin::LaunchPlanMetadata* LaunchPlanSpec::release_entity_metadata() {
  
  ::flyteidl::admin::LaunchPlanMetadata* temp = entity_metadata_;
  entity_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::LaunchPlanMetadata* LaunchPlanSpec::unsafe_arena_release_entity_metadata() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanSpec.entity_metadata)
  
  ::flyteidl::admin::LaunchPlanMetadata* temp = entity_metadata_;
  entity_metadata_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::LaunchPlanMetadata* LaunchPlanSpec::_internal_mutable_entity_metadata() {
  
  if (entity_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::LaunchPlanMetadata>(GetArenaForAllocation());
    entity_metadata_ = p;
  }
  return entity_metadata_;
}
inline ::flyteidl::admin::LaunchPlanMetadata* LaunchPlanSpec::mutable_entity_metadata() {
  ::flyteidl::admin::LaunchPlanMetadata* _msg = _internal_mutable_entity_metadata();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanSpec.entity_metadata)
  return _msg;
}
inline void LaunchPlanSpec::set_allocated_entity_metadata(::flyteidl::admin::LaunchPlanMetadata* entity_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete entity_metadata_;
  }
  if (entity_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::LaunchPlanMetadata>::GetOwningArena(entity_metadata);
    if (message_arena != submessage_arena) {
      entity_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_metadata, submessage_arena);
    }
    
  } else {
    
  }
  entity_metadata_ = entity_metadata;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanSpec.entity_metadata)
}

// .flyteidl.core.ParameterMap default_inputs = 3 [json_name = "defaultInputs"];
inline bool LaunchPlanSpec::_internal_has_default_inputs() const {
  return this != internal_default_instance() && default_inputs_ != nullptr;
}
inline bool LaunchPlanSpec::has_default_inputs() const {
  return _internal_has_default_inputs();
}
inline const ::flyteidl::core::ParameterMap& LaunchPlanSpec::_internal_default_inputs() const {
  const ::flyteidl::core::ParameterMap* p = default_inputs_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::ParameterMap&>(
      ::flyteidl::core::_ParameterMap_default_instance_);
}
inline const ::flyteidl::core::ParameterMap& LaunchPlanSpec::default_inputs() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanSpec.default_inputs)
  return _internal_default_inputs();
}
inline void LaunchPlanSpec::unsafe_arena_set_allocated_default_inputs(
    ::flyteidl::core::ParameterMap* default_inputs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_inputs_);
  }
  default_inputs_ = default_inputs;
  if (default_inputs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.LaunchPlanSpec.default_inputs)
}
inline ::flyteidl::core::ParameterMap* LaunchPlanSpec::release_default_inputs() {
  
  ::flyteidl::core::ParameterMap* temp = default_inputs_;
  default_inputs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::ParameterMap* LaunchPlanSpec::unsafe_arena_release_default_inputs() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanSpec.default_inputs)
  
  ::flyteidl::core::ParameterMap* temp = default_inputs_;
  default_inputs_ = nullptr;
  return temp;
}
inline ::flyteidl::core::ParameterMap* LaunchPlanSpec::_internal_mutable_default_inputs() {
  
  if (default_inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::ParameterMap>(GetArenaForAllocation());
    default_inputs_ = p;
  }
  return default_inputs_;
}
inline ::flyteidl::core::ParameterMap* LaunchPlanSpec::mutable_default_inputs() {
  ::flyteidl::core::ParameterMap* _msg = _internal_mutable_default_inputs();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanSpec.default_inputs)
  return _msg;
}
inline void LaunchPlanSpec::set_allocated_default_inputs(::flyteidl::core::ParameterMap* default_inputs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_inputs_);
  }
  if (default_inputs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_inputs));
    if (message_arena != submessage_arena) {
      default_inputs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_inputs, submessage_arena);
    }
    
  } else {
    
  }
  default_inputs_ = default_inputs;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanSpec.default_inputs)
}

// .flyteidl.core.LiteralMap fixed_inputs = 4 [json_name = "fixedInputs"];
inline bool LaunchPlanSpec::_internal_has_fixed_inputs() const {
  return this != internal_default_instance() && fixed_inputs_ != nullptr;
}
inline bool LaunchPlanSpec::has_fixed_inputs() const {
  return _internal_has_fixed_inputs();
}
inline const ::flyteidl::core::LiteralMap& LaunchPlanSpec::_internal_fixed_inputs() const {
  const ::flyteidl::core::LiteralMap* p = fixed_inputs_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::LiteralMap&>(
      ::flyteidl::core::_LiteralMap_default_instance_);
}
inline const ::flyteidl::core::LiteralMap& LaunchPlanSpec::fixed_inputs() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanSpec.fixed_inputs)
  return _internal_fixed_inputs();
}
inline void LaunchPlanSpec::unsafe_arena_set_allocated_fixed_inputs(
    ::flyteidl::core::LiteralMap* fixed_inputs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fixed_inputs_);
  }
  fixed_inputs_ = fixed_inputs;
  if (fixed_inputs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.LaunchPlanSpec.fixed_inputs)
}
inline ::flyteidl::core::LiteralMap* LaunchPlanSpec::release_fixed_inputs() {
  
  ::flyteidl::core::LiteralMap* temp = fixed_inputs_;
  fixed_inputs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::LiteralMap* LaunchPlanSpec::unsafe_arena_release_fixed_inputs() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanSpec.fixed_inputs)
  
  ::flyteidl::core::LiteralMap* temp = fixed_inputs_;
  fixed_inputs_ = nullptr;
  return temp;
}
inline ::flyteidl::core::LiteralMap* LaunchPlanSpec::_internal_mutable_fixed_inputs() {
  
  if (fixed_inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::LiteralMap>(GetArenaForAllocation());
    fixed_inputs_ = p;
  }
  return fixed_inputs_;
}
inline ::flyteidl::core::LiteralMap* LaunchPlanSpec::mutable_fixed_inputs() {
  ::flyteidl::core::LiteralMap* _msg = _internal_mutable_fixed_inputs();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanSpec.fixed_inputs)
  return _msg;
}
inline void LaunchPlanSpec::set_allocated_fixed_inputs(::flyteidl::core::LiteralMap* fixed_inputs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fixed_inputs_);
  }
  if (fixed_inputs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fixed_inputs));
    if (message_arena != submessage_arena) {
      fixed_inputs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_inputs, submessage_arena);
    }
    
  } else {
    
  }
  fixed_inputs_ = fixed_inputs;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanSpec.fixed_inputs)
}

// string role = 5 [json_name = "role", deprecated = true];
inline void LaunchPlanSpec::clear_role() {
  role_.ClearToEmpty();
}
inline const std::string& LaunchPlanSpec::role() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanSpec.role)
  return _internal_role();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LaunchPlanSpec::set_role(ArgT0&& arg0, ArgT... args) {
 
 role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchPlanSpec.role)
}
inline std::string* LaunchPlanSpec::mutable_role() {
  std::string* _s = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanSpec.role)
  return _s;
}
inline const std::string& LaunchPlanSpec::_internal_role() const {
  return role_.Get();
}
inline void LaunchPlanSpec::_internal_set_role(const std::string& value) {
  
  role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LaunchPlanSpec::_internal_mutable_role() {
  
  return role_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LaunchPlanSpec::release_role() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanSpec.role)
  return role_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LaunchPlanSpec::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  role_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (role_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanSpec.role)
}

// .flyteidl.admin.Labels labels = 6 [json_name = "labels"];
inline bool LaunchPlanSpec::_internal_has_labels() const {
  return this != internal_default_instance() && labels_ != nullptr;
}
inline bool LaunchPlanSpec::has_labels() const {
  return _internal_has_labels();
}
inline const ::flyteidl::admin::Labels& LaunchPlanSpec::_internal_labels() const {
  const ::flyteidl::admin::Labels* p = labels_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::Labels&>(
      ::flyteidl::admin::_Labels_default_instance_);
}
inline const ::flyteidl::admin::Labels& LaunchPlanSpec::labels() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanSpec.labels)
  return _internal_labels();
}
inline void LaunchPlanSpec::unsafe_arena_set_allocated_labels(
    ::flyteidl::admin::Labels* labels) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(labels_);
  }
  labels_ = labels;
  if (labels) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.LaunchPlanSpec.labels)
}
inline ::flyteidl::admin::Labels* LaunchPlanSpec::release_labels() {
  
  ::flyteidl::admin::Labels* temp = labels_;
  labels_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::Labels* LaunchPlanSpec::unsafe_arena_release_labels() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanSpec.labels)
  
  ::flyteidl::admin::Labels* temp = labels_;
  labels_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Labels* LaunchPlanSpec::_internal_mutable_labels() {
  
  if (labels_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Labels>(GetArenaForAllocation());
    labels_ = p;
  }
  return labels_;
}
inline ::flyteidl::admin::Labels* LaunchPlanSpec::mutable_labels() {
  ::flyteidl::admin::Labels* _msg = _internal_mutable_labels();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanSpec.labels)
  return _msg;
}
inline void LaunchPlanSpec::set_allocated_labels(::flyteidl::admin::Labels* labels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(labels_);
  }
  if (labels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(labels));
    if (message_arena != submessage_arena) {
      labels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, labels, submessage_arena);
    }
    
  } else {
    
  }
  labels_ = labels;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanSpec.labels)
}

// .flyteidl.admin.Annotations annotations = 7 [json_name = "annotations"];
inline bool LaunchPlanSpec::_internal_has_annotations() const {
  return this != internal_default_instance() && annotations_ != nullptr;
}
inline bool LaunchPlanSpec::has_annotations() const {
  return _internal_has_annotations();
}
inline const ::flyteidl::admin::Annotations& LaunchPlanSpec::_internal_annotations() const {
  const ::flyteidl::admin::Annotations* p = annotations_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::Annotations&>(
      ::flyteidl::admin::_Annotations_default_instance_);
}
inline const ::flyteidl::admin::Annotations& LaunchPlanSpec::annotations() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanSpec.annotations)
  return _internal_annotations();
}
inline void LaunchPlanSpec::unsafe_arena_set_allocated_annotations(
    ::flyteidl::admin::Annotations* annotations) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotations_);
  }
  annotations_ = annotations;
  if (annotations) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.LaunchPlanSpec.annotations)
}
inline ::flyteidl::admin::Annotations* LaunchPlanSpec::release_annotations() {
  
  ::flyteidl::admin::Annotations* temp = annotations_;
  annotations_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::Annotations* LaunchPlanSpec::unsafe_arena_release_annotations() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanSpec.annotations)
  
  ::flyteidl::admin::Annotations* temp = annotations_;
  annotations_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Annotations* LaunchPlanSpec::_internal_mutable_annotations() {
  
  if (annotations_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Annotations>(GetArenaForAllocation());
    annotations_ = p;
  }
  return annotations_;
}
inline ::flyteidl::admin::Annotations* LaunchPlanSpec::mutable_annotations() {
  ::flyteidl::admin::Annotations* _msg = _internal_mutable_annotations();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanSpec.annotations)
  return _msg;
}
inline void LaunchPlanSpec::set_allocated_annotations(::flyteidl::admin::Annotations* annotations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotations_);
  }
  if (annotations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotations));
    if (message_arena != submessage_arena) {
      annotations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotations, submessage_arena);
    }
    
  } else {
    
  }
  annotations_ = annotations;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanSpec.annotations)
}

// .flyteidl.admin.Auth auth = 8 [json_name = "auth", deprecated = true];
inline bool LaunchPlanSpec::_internal_has_auth() const {
  return this != internal_default_instance() && auth_ != nullptr;
}
inline bool LaunchPlanSpec::has_auth() const {
  return _internal_has_auth();
}
inline void LaunchPlanSpec::clear_auth() {
  if (GetArenaForAllocation() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
}
inline const ::flyteidl::admin::Auth& LaunchPlanSpec::_internal_auth() const {
  const ::flyteidl::admin::Auth* p = auth_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::Auth&>(
      ::flyteidl::admin::_Auth_default_instance_);
}
inline const ::flyteidl::admin::Auth& LaunchPlanSpec::auth() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanSpec.auth)
  return _internal_auth();
}
inline void LaunchPlanSpec::unsafe_arena_set_allocated_auth(
    ::flyteidl::admin::Auth* auth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_);
  }
  auth_ = auth;
  if (auth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.LaunchPlanSpec.auth)
}
inline ::flyteidl::admin::Auth* LaunchPlanSpec::release_auth() {
  
  ::flyteidl::admin::Auth* temp = auth_;
  auth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::Auth* LaunchPlanSpec::unsafe_arena_release_auth() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanSpec.auth)
  
  ::flyteidl::admin::Auth* temp = auth_;
  auth_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Auth* LaunchPlanSpec::_internal_mutable_auth() {
  
  if (auth_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Auth>(GetArenaForAllocation());
    auth_ = p;
  }
  return auth_;
}
inline ::flyteidl::admin::Auth* LaunchPlanSpec::mutable_auth() {
  ::flyteidl::admin::Auth* _msg = _internal_mutable_auth();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanSpec.auth)
  return _msg;
}
inline void LaunchPlanSpec::set_allocated_auth(::flyteidl::admin::Auth* auth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete auth_;
  }
  if (auth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::Auth>::GetOwningArena(auth);
    if (message_arena != submessage_arena) {
      auth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth, submessage_arena);
    }
    
  } else {
    
  }
  auth_ = auth;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanSpec.auth)
}

// .flyteidl.admin.AuthRole auth_role = 9 [json_name = "authRole", deprecated = true];
inline bool LaunchPlanSpec::_internal_has_auth_role() const {
  return this != internal_default_instance() && auth_role_ != nullptr;
}
inline bool LaunchPlanSpec::has_auth_role() const {
  return _internal_has_auth_role();
}
inline const ::flyteidl::admin::AuthRole& LaunchPlanSpec::_internal_auth_role() const {
  const ::flyteidl::admin::AuthRole* p = auth_role_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::AuthRole&>(
      ::flyteidl::admin::_AuthRole_default_instance_);
}
inline const ::flyteidl::admin::AuthRole& LaunchPlanSpec::auth_role() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanSpec.auth_role)
  return _internal_auth_role();
}
inline void LaunchPlanSpec::unsafe_arena_set_allocated_auth_role(
    ::flyteidl::admin::AuthRole* auth_role) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_role_);
  }
  auth_role_ = auth_role;
  if (auth_role) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.LaunchPlanSpec.auth_role)
}
inline ::flyteidl::admin::AuthRole* LaunchPlanSpec::release_auth_role() {
  
  ::flyteidl::admin::AuthRole* temp = auth_role_;
  auth_role_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::AuthRole* LaunchPlanSpec::unsafe_arena_release_auth_role() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanSpec.auth_role)
  
  ::flyteidl::admin::AuthRole* temp = auth_role_;
  auth_role_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::AuthRole* LaunchPlanSpec::_internal_mutable_auth_role() {
  
  if (auth_role_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::AuthRole>(GetArenaForAllocation());
    auth_role_ = p;
  }
  return auth_role_;
}
inline ::flyteidl::admin::AuthRole* LaunchPlanSpec::mutable_auth_role() {
  ::flyteidl::admin::AuthRole* _msg = _internal_mutable_auth_role();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanSpec.auth_role)
  return _msg;
}
inline void LaunchPlanSpec::set_allocated_auth_role(::flyteidl::admin::AuthRole* auth_role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_role_);
  }
  if (auth_role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_role));
    if (message_arena != submessage_arena) {
      auth_role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_role, submessage_arena);
    }
    
  } else {
    
  }
  auth_role_ = auth_role;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanSpec.auth_role)
}

// .flyteidl.core.SecurityContext security_context = 10 [json_name = "securityContext"];
inline bool LaunchPlanSpec::_internal_has_security_context() const {
  return this != internal_default_instance() && security_context_ != nullptr;
}
inline bool LaunchPlanSpec::has_security_context() const {
  return _internal_has_security_context();
}
inline const ::flyteidl::core::SecurityContext& LaunchPlanSpec::_internal_security_context() const {
  const ::flyteidl::core::SecurityContext* p = security_context_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::SecurityContext&>(
      ::flyteidl::core::_SecurityContext_default_instance_);
}
inline const ::flyteidl::core::SecurityContext& LaunchPlanSpec::security_context() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanSpec.security_context)
  return _internal_security_context();
}
inline void LaunchPlanSpec::unsafe_arena_set_allocated_security_context(
    ::flyteidl::core::SecurityContext* security_context) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_context_);
  }
  security_context_ = security_context;
  if (security_context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.LaunchPlanSpec.security_context)
}
inline ::flyteidl::core::SecurityContext* LaunchPlanSpec::release_security_context() {
  
  ::flyteidl::core::SecurityContext* temp = security_context_;
  security_context_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::SecurityContext* LaunchPlanSpec::unsafe_arena_release_security_context() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanSpec.security_context)
  
  ::flyteidl::core::SecurityContext* temp = security_context_;
  security_context_ = nullptr;
  return temp;
}
inline ::flyteidl::core::SecurityContext* LaunchPlanSpec::_internal_mutable_security_context() {
  
  if (security_context_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::SecurityContext>(GetArenaForAllocation());
    security_context_ = p;
  }
  return security_context_;
}
inline ::flyteidl::core::SecurityContext* LaunchPlanSpec::mutable_security_context() {
  ::flyteidl::core::SecurityContext* _msg = _internal_mutable_security_context();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanSpec.security_context)
  return _msg;
}
inline void LaunchPlanSpec::set_allocated_security_context(::flyteidl::core::SecurityContext* security_context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_context_);
  }
  if (security_context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_context));
    if (message_arena != submessage_arena) {
      security_context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, security_context, submessage_arena);
    }
    
  } else {
    
  }
  security_context_ = security_context;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanSpec.security_context)
}

// .flyteidl.core.QualityOfService quality_of_service = 16 [json_name = "qualityOfService"];
inline bool LaunchPlanSpec::_internal_has_quality_of_service() const {
  return this != internal_default_instance() && quality_of_service_ != nullptr;
}
inline bool LaunchPlanSpec::has_quality_of_service() const {
  return _internal_has_quality_of_service();
}
inline const ::flyteidl::core::QualityOfService& LaunchPlanSpec::_internal_quality_of_service() const {
  const ::flyteidl::core::QualityOfService* p = quality_of_service_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::QualityOfService&>(
      ::flyteidl::core::_QualityOfService_default_instance_);
}
inline const ::flyteidl::core::QualityOfService& LaunchPlanSpec::quality_of_service() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanSpec.quality_of_service)
  return _internal_quality_of_service();
}
inline void LaunchPlanSpec::unsafe_arena_set_allocated_quality_of_service(
    ::flyteidl::core::QualityOfService* quality_of_service) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quality_of_service_);
  }
  quality_of_service_ = quality_of_service;
  if (quality_of_service) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.LaunchPlanSpec.quality_of_service)
}
inline ::flyteidl::core::QualityOfService* LaunchPlanSpec::release_quality_of_service() {
  
  ::flyteidl::core::QualityOfService* temp = quality_of_service_;
  quality_of_service_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::QualityOfService* LaunchPlanSpec::unsafe_arena_release_quality_of_service() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanSpec.quality_of_service)
  
  ::flyteidl::core::QualityOfService* temp = quality_of_service_;
  quality_of_service_ = nullptr;
  return temp;
}
inline ::flyteidl::core::QualityOfService* LaunchPlanSpec::_internal_mutable_quality_of_service() {
  
  if (quality_of_service_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::QualityOfService>(GetArenaForAllocation());
    quality_of_service_ = p;
  }
  return quality_of_service_;
}
inline ::flyteidl::core::QualityOfService* LaunchPlanSpec::mutable_quality_of_service() {
  ::flyteidl::core::QualityOfService* _msg = _internal_mutable_quality_of_service();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanSpec.quality_of_service)
  return _msg;
}
inline void LaunchPlanSpec::set_allocated_quality_of_service(::flyteidl::core::QualityOfService* quality_of_service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(quality_of_service_);
  }
  if (quality_of_service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quality_of_service));
    if (message_arena != submessage_arena) {
      quality_of_service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quality_of_service, submessage_arena);
    }
    
  } else {
    
  }
  quality_of_service_ = quality_of_service;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanSpec.quality_of_service)
}

// .flyteidl.admin.RawOutputDataConfig raw_output_data_config = 17 [json_name = "rawOutputDataConfig"];
inline bool LaunchPlanSpec::_internal_has_raw_output_data_config() const {
  return this != internal_default_instance() && raw_output_data_config_ != nullptr;
}
inline bool LaunchPlanSpec::has_raw_output_data_config() const {
  return _internal_has_raw_output_data_config();
}
inline const ::flyteidl::admin::RawOutputDataConfig& LaunchPlanSpec::_internal_raw_output_data_config() const {
  const ::flyteidl::admin::RawOutputDataConfig* p = raw_output_data_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::RawOutputDataConfig&>(
      ::flyteidl::admin::_RawOutputDataConfig_default_instance_);
}
inline const ::flyteidl::admin::RawOutputDataConfig& LaunchPlanSpec::raw_output_data_config() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanSpec.raw_output_data_config)
  return _internal_raw_output_data_config();
}
inline void LaunchPlanSpec::unsafe_arena_set_allocated_raw_output_data_config(
    ::flyteidl::admin::RawOutputDataConfig* raw_output_data_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(raw_output_data_config_);
  }
  raw_output_data_config_ = raw_output_data_config;
  if (raw_output_data_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.LaunchPlanSpec.raw_output_data_config)
}
inline ::flyteidl::admin::RawOutputDataConfig* LaunchPlanSpec::release_raw_output_data_config() {
  
  ::flyteidl::admin::RawOutputDataConfig* temp = raw_output_data_config_;
  raw_output_data_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::RawOutputDataConfig* LaunchPlanSpec::unsafe_arena_release_raw_output_data_config() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanSpec.raw_output_data_config)
  
  ::flyteidl::admin::RawOutputDataConfig* temp = raw_output_data_config_;
  raw_output_data_config_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::RawOutputDataConfig* LaunchPlanSpec::_internal_mutable_raw_output_data_config() {
  
  if (raw_output_data_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::RawOutputDataConfig>(GetArenaForAllocation());
    raw_output_data_config_ = p;
  }
  return raw_output_data_config_;
}
inline ::flyteidl::admin::RawOutputDataConfig* LaunchPlanSpec::mutable_raw_output_data_config() {
  ::flyteidl::admin::RawOutputDataConfig* _msg = _internal_mutable_raw_output_data_config();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanSpec.raw_output_data_config)
  return _msg;
}
inline void LaunchPlanSpec::set_allocated_raw_output_data_config(::flyteidl::admin::RawOutputDataConfig* raw_output_data_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(raw_output_data_config_);
  }
  if (raw_output_data_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(raw_output_data_config));
    if (message_arena != submessage_arena) {
      raw_output_data_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raw_output_data_config, submessage_arena);
    }
    
  } else {
    
  }
  raw_output_data_config_ = raw_output_data_config;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanSpec.raw_output_data_config)
}

// int32 max_parallelism = 18 [json_name = "maxParallelism"];
inline void LaunchPlanSpec::clear_max_parallelism() {
  max_parallelism_ = 0;
}
inline int32_t LaunchPlanSpec::_internal_max_parallelism() const {
  return max_parallelism_;
}
inline int32_t LaunchPlanSpec::max_parallelism() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanSpec.max_parallelism)
  return _internal_max_parallelism();
}
inline void LaunchPlanSpec::_internal_set_max_parallelism(int32_t value) {
  
  max_parallelism_ = value;
}
inline void LaunchPlanSpec::set_max_parallelism(int32_t value) {
  _internal_set_max_parallelism(value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchPlanSpec.max_parallelism)
}

// -------------------------------------------------------------------

// LaunchPlanClosure

// .flyteidl.admin.LaunchPlanState state = 1 [json_name = "state"];
inline void LaunchPlanClosure::clear_state() {
  state_ = 0;
}
inline ::flyteidl::admin::LaunchPlanState LaunchPlanClosure::_internal_state() const {
  return static_cast< ::flyteidl::admin::LaunchPlanState >(state_);
}
inline ::flyteidl::admin::LaunchPlanState LaunchPlanClosure::state() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanClosure.state)
  return _internal_state();
}
inline void LaunchPlanClosure::_internal_set_state(::flyteidl::admin::LaunchPlanState value) {
  
  state_ = value;
}
inline void LaunchPlanClosure::set_state(::flyteidl::admin::LaunchPlanState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchPlanClosure.state)
}

// .flyteidl.core.ParameterMap expected_inputs = 2 [json_name = "expectedInputs"];
inline bool LaunchPlanClosure::_internal_has_expected_inputs() const {
  return this != internal_default_instance() && expected_inputs_ != nullptr;
}
inline bool LaunchPlanClosure::has_expected_inputs() const {
  return _internal_has_expected_inputs();
}
inline const ::flyteidl::core::ParameterMap& LaunchPlanClosure::_internal_expected_inputs() const {
  const ::flyteidl::core::ParameterMap* p = expected_inputs_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::ParameterMap&>(
      ::flyteidl::core::_ParameterMap_default_instance_);
}
inline const ::flyteidl::core::ParameterMap& LaunchPlanClosure::expected_inputs() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanClosure.expected_inputs)
  return _internal_expected_inputs();
}
inline void LaunchPlanClosure::unsafe_arena_set_allocated_expected_inputs(
    ::flyteidl::core::ParameterMap* expected_inputs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expected_inputs_);
  }
  expected_inputs_ = expected_inputs;
  if (expected_inputs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.LaunchPlanClosure.expected_inputs)
}
inline ::flyteidl::core::ParameterMap* LaunchPlanClosure::release_expected_inputs() {
  
  ::flyteidl::core::ParameterMap* temp = expected_inputs_;
  expected_inputs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::ParameterMap* LaunchPlanClosure::unsafe_arena_release_expected_inputs() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanClosure.expected_inputs)
  
  ::flyteidl::core::ParameterMap* temp = expected_inputs_;
  expected_inputs_ = nullptr;
  return temp;
}
inline ::flyteidl::core::ParameterMap* LaunchPlanClosure::_internal_mutable_expected_inputs() {
  
  if (expected_inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::ParameterMap>(GetArenaForAllocation());
    expected_inputs_ = p;
  }
  return expected_inputs_;
}
inline ::flyteidl::core::ParameterMap* LaunchPlanClosure::mutable_expected_inputs() {
  ::flyteidl::core::ParameterMap* _msg = _internal_mutable_expected_inputs();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanClosure.expected_inputs)
  return _msg;
}
inline void LaunchPlanClosure::set_allocated_expected_inputs(::flyteidl::core::ParameterMap* expected_inputs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expected_inputs_);
  }
  if (expected_inputs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expected_inputs));
    if (message_arena != submessage_arena) {
      expected_inputs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expected_inputs, submessage_arena);
    }
    
  } else {
    
  }
  expected_inputs_ = expected_inputs;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanClosure.expected_inputs)
}

// .flyteidl.core.VariableMap expected_outputs = 3 [json_name = "expectedOutputs"];
inline bool LaunchPlanClosure::_internal_has_expected_outputs() const {
  return this != internal_default_instance() && expected_outputs_ != nullptr;
}
inline bool LaunchPlanClosure::has_expected_outputs() const {
  return _internal_has_expected_outputs();
}
inline const ::flyteidl::core::VariableMap& LaunchPlanClosure::_internal_expected_outputs() const {
  const ::flyteidl::core::VariableMap* p = expected_outputs_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::VariableMap&>(
      ::flyteidl::core::_VariableMap_default_instance_);
}
inline const ::flyteidl::core::VariableMap& LaunchPlanClosure::expected_outputs() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanClosure.expected_outputs)
  return _internal_expected_outputs();
}
inline void LaunchPlanClosure::unsafe_arena_set_allocated_expected_outputs(
    ::flyteidl::core::VariableMap* expected_outputs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expected_outputs_);
  }
  expected_outputs_ = expected_outputs;
  if (expected_outputs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.LaunchPlanClosure.expected_outputs)
}
inline ::flyteidl::core::VariableMap* LaunchPlanClosure::release_expected_outputs() {
  
  ::flyteidl::core::VariableMap* temp = expected_outputs_;
  expected_outputs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::VariableMap* LaunchPlanClosure::unsafe_arena_release_expected_outputs() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanClosure.expected_outputs)
  
  ::flyteidl::core::VariableMap* temp = expected_outputs_;
  expected_outputs_ = nullptr;
  return temp;
}
inline ::flyteidl::core::VariableMap* LaunchPlanClosure::_internal_mutable_expected_outputs() {
  
  if (expected_outputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::VariableMap>(GetArenaForAllocation());
    expected_outputs_ = p;
  }
  return expected_outputs_;
}
inline ::flyteidl::core::VariableMap* LaunchPlanClosure::mutable_expected_outputs() {
  ::flyteidl::core::VariableMap* _msg = _internal_mutable_expected_outputs();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanClosure.expected_outputs)
  return _msg;
}
inline void LaunchPlanClosure::set_allocated_expected_outputs(::flyteidl::core::VariableMap* expected_outputs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expected_outputs_);
  }
  if (expected_outputs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expected_outputs));
    if (message_arena != submessage_arena) {
      expected_outputs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expected_outputs, submessage_arena);
    }
    
  } else {
    
  }
  expected_outputs_ = expected_outputs;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanClosure.expected_outputs)
}

// .google.protobuf.Timestamp created_at = 4 [json_name = "createdAt"];
inline bool LaunchPlanClosure::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool LaunchPlanClosure::has_created_at() const {
  return _internal_has_created_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LaunchPlanClosure::_internal_created_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LaunchPlanClosure::created_at() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanClosure.created_at)
  return _internal_created_at();
}
inline void LaunchPlanClosure::unsafe_arena_set_allocated_created_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.LaunchPlanClosure.created_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LaunchPlanClosure::release_created_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LaunchPlanClosure::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanClosure.created_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LaunchPlanClosure::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    created_at_ = p;
  }
  return created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LaunchPlanClosure::mutable_created_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanClosure.created_at)
  return _msg;
}
inline void LaunchPlanClosure::set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at));
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanClosure.created_at)
}

// .google.protobuf.Timestamp updated_at = 5 [json_name = "updatedAt"];
inline bool LaunchPlanClosure::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool LaunchPlanClosure::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LaunchPlanClosure::_internal_updated_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& LaunchPlanClosure::updated_at() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanClosure.updated_at)
  return _internal_updated_at();
}
inline void LaunchPlanClosure::unsafe_arena_set_allocated_updated_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.LaunchPlanClosure.updated_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LaunchPlanClosure::release_updated_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LaunchPlanClosure::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanClosure.updated_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LaunchPlanClosure::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    updated_at_ = p;
  }
  return updated_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* LaunchPlanClosure::mutable_updated_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanClosure.updated_at)
  return _msg;
}
inline void LaunchPlanClosure::set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at));
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanClosure.updated_at)
}

// -------------------------------------------------------------------

// LaunchPlanMetadata

// .flyteidl.admin.Schedule schedule = 1 [json_name = "schedule"];
inline bool LaunchPlanMetadata::_internal_has_schedule() const {
  return this != internal_default_instance() && schedule_ != nullptr;
}
inline bool LaunchPlanMetadata::has_schedule() const {
  return _internal_has_schedule();
}
inline const ::flyteidl::admin::Schedule& LaunchPlanMetadata::_internal_schedule() const {
  const ::flyteidl::admin::Schedule* p = schedule_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::Schedule&>(
      ::flyteidl::admin::_Schedule_default_instance_);
}
inline const ::flyteidl::admin::Schedule& LaunchPlanMetadata::schedule() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanMetadata.schedule)
  return _internal_schedule();
}
inline void LaunchPlanMetadata::unsafe_arena_set_allocated_schedule(
    ::flyteidl::admin::Schedule* schedule) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(schedule_);
  }
  schedule_ = schedule;
  if (schedule) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.LaunchPlanMetadata.schedule)
}
inline ::flyteidl::admin::Schedule* LaunchPlanMetadata::release_schedule() {
  
  ::flyteidl::admin::Schedule* temp = schedule_;
  schedule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::Schedule* LaunchPlanMetadata::unsafe_arena_release_schedule() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanMetadata.schedule)
  
  ::flyteidl::admin::Schedule* temp = schedule_;
  schedule_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Schedule* LaunchPlanMetadata::_internal_mutable_schedule() {
  
  if (schedule_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Schedule>(GetArenaForAllocation());
    schedule_ = p;
  }
  return schedule_;
}
inline ::flyteidl::admin::Schedule* LaunchPlanMetadata::mutable_schedule() {
  ::flyteidl::admin::Schedule* _msg = _internal_mutable_schedule();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanMetadata.schedule)
  return _msg;
}
inline void LaunchPlanMetadata::set_allocated_schedule(::flyteidl::admin::Schedule* schedule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(schedule_);
  }
  if (schedule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(schedule));
    if (message_arena != submessage_arena) {
      schedule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schedule, submessage_arena);
    }
    
  } else {
    
  }
  schedule_ = schedule;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanMetadata.schedule)
}

// repeated .flyteidl.admin.Notification notifications = 2 [json_name = "notifications"];
inline int LaunchPlanMetadata::_internal_notifications_size() const {
  return notifications_.size();
}
inline int LaunchPlanMetadata::notifications_size() const {
  return _internal_notifications_size();
}
inline ::flyteidl::admin::Notification* LaunchPlanMetadata::mutable_notifications(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanMetadata.notifications)
  return notifications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Notification >*
LaunchPlanMetadata::mutable_notifications() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.LaunchPlanMetadata.notifications)
  return &notifications_;
}
inline const ::flyteidl::admin::Notification& LaunchPlanMetadata::_internal_notifications(int index) const {
  return notifications_.Get(index);
}
inline const ::flyteidl::admin::Notification& LaunchPlanMetadata::notifications(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanMetadata.notifications)
  return _internal_notifications(index);
}
inline ::flyteidl::admin::Notification* LaunchPlanMetadata::_internal_add_notifications() {
  return notifications_.Add();
}
inline ::flyteidl::admin::Notification* LaunchPlanMetadata::add_notifications() {
  ::flyteidl::admin::Notification* _add = _internal_add_notifications();
  // @@protoc_insertion_point(field_add:flyteidl.admin.LaunchPlanMetadata.notifications)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Notification >&
LaunchPlanMetadata::notifications() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.LaunchPlanMetadata.notifications)
  return notifications_;
}

// -------------------------------------------------------------------

// LaunchPlanUpdateRequest

// .flyteidl.core.Identifier id = 1 [json_name = "id"];
inline bool LaunchPlanUpdateRequest::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool LaunchPlanUpdateRequest::has_id() const {
  return _internal_has_id();
}
inline const ::flyteidl::core::Identifier& LaunchPlanUpdateRequest::_internal_id() const {
  const ::flyteidl::core::Identifier* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::Identifier&>(
      ::flyteidl::core::_Identifier_default_instance_);
}
inline const ::flyteidl::core::Identifier& LaunchPlanUpdateRequest::id() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanUpdateRequest.id)
  return _internal_id();
}
inline void LaunchPlanUpdateRequest::unsafe_arena_set_allocated_id(
    ::flyteidl::core::Identifier* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.LaunchPlanUpdateRequest.id)
}
inline ::flyteidl::core::Identifier* LaunchPlanUpdateRequest::release_id() {
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::Identifier* LaunchPlanUpdateRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanUpdateRequest.id)
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identifier* LaunchPlanUpdateRequest::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identifier>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::flyteidl::core::Identifier* LaunchPlanUpdateRequest::mutable_id() {
  ::flyteidl::core::Identifier* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanUpdateRequest.id)
  return _msg;
}
inline void LaunchPlanUpdateRequest::set_allocated_id(::flyteidl::core::Identifier* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanUpdateRequest.id)
}

// .flyteidl.admin.LaunchPlanState state = 2 [json_name = "state"];
inline void LaunchPlanUpdateRequest::clear_state() {
  state_ = 0;
}
inline ::flyteidl::admin::LaunchPlanState LaunchPlanUpdateRequest::_internal_state() const {
  return static_cast< ::flyteidl::admin::LaunchPlanState >(state_);
}
inline ::flyteidl::admin::LaunchPlanState LaunchPlanUpdateRequest::state() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanUpdateRequest.state)
  return _internal_state();
}
inline void LaunchPlanUpdateRequest::_internal_set_state(::flyteidl::admin::LaunchPlanState value) {
  
  state_ = value;
}
inline void LaunchPlanUpdateRequest::set_state(::flyteidl::admin::LaunchPlanState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchPlanUpdateRequest.state)
}

// -------------------------------------------------------------------

// LaunchPlanUpdateResponse

// -------------------------------------------------------------------

// ActiveLaunchPlanRequest

// .flyteidl.admin.NamedEntityIdentifier id = 1 [json_name = "id"];
inline bool ActiveLaunchPlanRequest::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool ActiveLaunchPlanRequest::has_id() const {
  return _internal_has_id();
}
inline const ::flyteidl::admin::NamedEntityIdentifier& ActiveLaunchPlanRequest::_internal_id() const {
  const ::flyteidl::admin::NamedEntityIdentifier* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::NamedEntityIdentifier&>(
      ::flyteidl::admin::_NamedEntityIdentifier_default_instance_);
}
inline const ::flyteidl::admin::NamedEntityIdentifier& ActiveLaunchPlanRequest::id() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ActiveLaunchPlanRequest.id)
  return _internal_id();
}
inline void ActiveLaunchPlanRequest::unsafe_arena_set_allocated_id(
    ::flyteidl::admin::NamedEntityIdentifier* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.ActiveLaunchPlanRequest.id)
}
inline ::flyteidl::admin::NamedEntityIdentifier* ActiveLaunchPlanRequest::release_id() {
  
  ::flyteidl::admin::NamedEntityIdentifier* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::NamedEntityIdentifier* ActiveLaunchPlanRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ActiveLaunchPlanRequest.id)
  
  ::flyteidl::admin::NamedEntityIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::NamedEntityIdentifier* ActiveLaunchPlanRequest::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::NamedEntityIdentifier>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::flyteidl::admin::NamedEntityIdentifier* ActiveLaunchPlanRequest::mutable_id() {
  ::flyteidl::admin::NamedEntityIdentifier* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ActiveLaunchPlanRequest.id)
  return _msg;
}
inline void ActiveLaunchPlanRequest::set_allocated_id(::flyteidl::admin::NamedEntityIdentifier* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ActiveLaunchPlanRequest.id)
}

// -------------------------------------------------------------------

// ActiveLaunchPlanListRequest

// string project = 1 [json_name = "project"];
inline void ActiveLaunchPlanListRequest::clear_project() {
  project_.ClearToEmpty();
}
inline const std::string& ActiveLaunchPlanListRequest::project() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ActiveLaunchPlanListRequest.project)
  return _internal_project();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActiveLaunchPlanListRequest::set_project(ArgT0&& arg0, ArgT... args) {
 
 project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.ActiveLaunchPlanListRequest.project)
}
inline std::string* ActiveLaunchPlanListRequest::mutable_project() {
  std::string* _s = _internal_mutable_project();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ActiveLaunchPlanListRequest.project)
  return _s;
}
inline const std::string& ActiveLaunchPlanListRequest::_internal_project() const {
  return project_.Get();
}
inline void ActiveLaunchPlanListRequest::_internal_set_project(const std::string& value) {
  
  project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ActiveLaunchPlanListRequest::_internal_mutable_project() {
  
  return project_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ActiveLaunchPlanListRequest::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ActiveLaunchPlanListRequest.project)
  return project_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ActiveLaunchPlanListRequest::set_allocated_project(std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (project_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    project_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ActiveLaunchPlanListRequest.project)
}

// string domain = 2 [json_name = "domain"];
inline void ActiveLaunchPlanListRequest::clear_domain() {
  domain_.ClearToEmpty();
}
inline const std::string& ActiveLaunchPlanListRequest::domain() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ActiveLaunchPlanListRequest.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActiveLaunchPlanListRequest::set_domain(ArgT0&& arg0, ArgT... args) {
 
 domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.ActiveLaunchPlanListRequest.domain)
}
inline std::string* ActiveLaunchPlanListRequest::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ActiveLaunchPlanListRequest.domain)
  return _s;
}
inline const std::string& ActiveLaunchPlanListRequest::_internal_domain() const {
  return domain_.Get();
}
inline void ActiveLaunchPlanListRequest::_internal_set_domain(const std::string& value) {
  
  domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ActiveLaunchPlanListRequest::_internal_mutable_domain() {
  
  return domain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ActiveLaunchPlanListRequest::release_domain() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ActiveLaunchPlanListRequest.domain)
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ActiveLaunchPlanListRequest::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (domain_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ActiveLaunchPlanListRequest.domain)
}

// uint32 limit = 3 [json_name = "limit"];
inline void ActiveLaunchPlanListRequest::clear_limit() {
  limit_ = 0u;
}
inline uint32_t ActiveLaunchPlanListRequest::_internal_limit() const {
  return limit_;
}
inline uint32_t ActiveLaunchPlanListRequest::limit() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ActiveLaunchPlanListRequest.limit)
  return _internal_limit();
}
inline void ActiveLaunchPlanListRequest::_internal_set_limit(uint32_t value) {
  
  limit_ = value;
}
inline void ActiveLaunchPlanListRequest::set_limit(uint32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.ActiveLaunchPlanListRequest.limit)
}

// string token = 4 [json_name = "token"];
inline void ActiveLaunchPlanListRequest::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& ActiveLaunchPlanListRequest::token() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ActiveLaunchPlanListRequest.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActiveLaunchPlanListRequest::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.ActiveLaunchPlanListRequest.token)
}
inline std::string* ActiveLaunchPlanListRequest::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ActiveLaunchPlanListRequest.token)
  return _s;
}
inline const std::string& ActiveLaunchPlanListRequest::_internal_token() const {
  return token_.Get();
}
inline void ActiveLaunchPlanListRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ActiveLaunchPlanListRequest::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ActiveLaunchPlanListRequest::release_token() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ActiveLaunchPlanListRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ActiveLaunchPlanListRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ActiveLaunchPlanListRequest.token)
}

// .flyteidl.admin.Sort sort_by = 5 [json_name = "sortBy"];
inline bool ActiveLaunchPlanListRequest::_internal_has_sort_by() const {
  return this != internal_default_instance() && sort_by_ != nullptr;
}
inline bool ActiveLaunchPlanListRequest::has_sort_by() const {
  return _internal_has_sort_by();
}
inline const ::flyteidl::admin::Sort& ActiveLaunchPlanListRequest::_internal_sort_by() const {
  const ::flyteidl::admin::Sort* p = sort_by_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::Sort&>(
      ::flyteidl::admin::_Sort_default_instance_);
}
inline const ::flyteidl::admin::Sort& ActiveLaunchPlanListRequest::sort_by() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ActiveLaunchPlanListRequest.sort_by)
  return _internal_sort_by();
}
inline void ActiveLaunchPlanListRequest::unsafe_arena_set_allocated_sort_by(
    ::flyteidl::admin::Sort* sort_by) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sort_by_);
  }
  sort_by_ = sort_by;
  if (sort_by) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.ActiveLaunchPlanListRequest.sort_by)
}
inline ::flyteidl::admin::Sort* ActiveLaunchPlanListRequest::release_sort_by() {
  
  ::flyteidl::admin::Sort* temp = sort_by_;
  sort_by_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::Sort* ActiveLaunchPlanListRequest::unsafe_arena_release_sort_by() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ActiveLaunchPlanListRequest.sort_by)
  
  ::flyteidl::admin::Sort* temp = sort_by_;
  sort_by_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Sort* ActiveLaunchPlanListRequest::_internal_mutable_sort_by() {
  
  if (sort_by_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Sort>(GetArenaForAllocation());
    sort_by_ = p;
  }
  return sort_by_;
}
inline ::flyteidl::admin::Sort* ActiveLaunchPlanListRequest::mutable_sort_by() {
  ::flyteidl::admin::Sort* _msg = _internal_mutable_sort_by();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ActiveLaunchPlanListRequest.sort_by)
  return _msg;
}
inline void ActiveLaunchPlanListRequest::set_allocated_sort_by(::flyteidl::admin::Sort* sort_by) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sort_by_);
  }
  if (sort_by) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sort_by));
    if (message_arena != submessage_arena) {
      sort_by = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sort_by, submessage_arena);
    }
    
  } else {
    
  }
  sort_by_ = sort_by;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ActiveLaunchPlanListRequest.sort_by)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::flyteidl::admin::LaunchPlanState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::admin::LaunchPlanState>() {
  return ::flyteidl::admin::LaunchPlanState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2flaunch_5fplan_2eproto
