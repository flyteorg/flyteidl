// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/signal.proto

#include "flyteidl/admin/signal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Sort_flyteidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fsignal_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Signal_flyteidl_2fadmin_2fsignal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WorkflowExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SignalIdentifier_flyteidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fliterals_2eproto ::google::protobuf::internal::SCCInfo<9> scc_info_Literal_flyteidl_2fcore_2fliterals_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2ftypes_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_LiteralType_flyteidl_2fcore_2ftypes_2eproto;
namespace flyteidl {
namespace admin {
class SignalGetOrCreateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignalGetOrCreateRequest> _instance;
} _SignalGetOrCreateRequest_default_instance_;
class SignalListRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignalListRequest> _instance;
} _SignalListRequest_default_instance_;
class SignalListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignalList> _instance;
} _SignalList_default_instance_;
class SignalSetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignalSetRequest> _instance;
} _SignalSetRequest_default_instance_;
class SignalSetResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignalSetResponse> _instance;
} _SignalSetResponse_default_instance_;
class SignalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Signal> _instance;
} _Signal_default_instance_;
}  // namespace admin
}  // namespace flyteidl
static void InitDefaultsSignalGetOrCreateRequest_flyteidl_2fadmin_2fsignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_SignalGetOrCreateRequest_default_instance_;
    new (ptr) ::flyteidl::admin::SignalGetOrCreateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::SignalGetOrCreateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SignalGetOrCreateRequest_flyteidl_2fadmin_2fsignal_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSignalGetOrCreateRequest_flyteidl_2fadmin_2fsignal_2eproto}, {
      &scc_info_SignalIdentifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_LiteralType_flyteidl_2fcore_2ftypes_2eproto.base,}};

static void InitDefaultsSignalListRequest_flyteidl_2fadmin_2fsignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_SignalListRequest_default_instance_;
    new (ptr) ::flyteidl::admin::SignalListRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::SignalListRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SignalListRequest_flyteidl_2fadmin_2fsignal_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSignalListRequest_flyteidl_2fadmin_2fsignal_2eproto}, {
      &scc_info_WorkflowExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_Sort_flyteidl_2fadmin_2fcommon_2eproto.base,}};

static void InitDefaultsSignalList_flyteidl_2fadmin_2fsignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_SignalList_default_instance_;
    new (ptr) ::flyteidl::admin::SignalList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::SignalList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SignalList_flyteidl_2fadmin_2fsignal_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSignalList_flyteidl_2fadmin_2fsignal_2eproto}, {
      &scc_info_Signal_flyteidl_2fadmin_2fsignal_2eproto.base,}};

static void InitDefaultsSignalSetRequest_flyteidl_2fadmin_2fsignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_SignalSetRequest_default_instance_;
    new (ptr) ::flyteidl::admin::SignalSetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::SignalSetRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SignalSetRequest_flyteidl_2fadmin_2fsignal_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSignalSetRequest_flyteidl_2fadmin_2fsignal_2eproto}, {
      &scc_info_SignalIdentifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_Literal_flyteidl_2fcore_2fliterals_2eproto.base,}};

static void InitDefaultsSignalSetResponse_flyteidl_2fadmin_2fsignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_SignalSetResponse_default_instance_;
    new (ptr) ::flyteidl::admin::SignalSetResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::SignalSetResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SignalSetResponse_flyteidl_2fadmin_2fsignal_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSignalSetResponse_flyteidl_2fadmin_2fsignal_2eproto}, {}};

static void InitDefaultsSignal_flyteidl_2fadmin_2fsignal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_Signal_default_instance_;
    new (ptr) ::flyteidl::admin::Signal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::Signal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Signal_flyteidl_2fadmin_2fsignal_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsSignal_flyteidl_2fadmin_2fsignal_2eproto}, {
      &scc_info_SignalIdentifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_LiteralType_flyteidl_2fcore_2ftypes_2eproto.base,
      &scc_info_Literal_flyteidl_2fcore_2fliterals_2eproto.base,}};

void InitDefaults_flyteidl_2fadmin_2fsignal_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_SignalGetOrCreateRequest_flyteidl_2fadmin_2fsignal_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SignalListRequest_flyteidl_2fadmin_2fsignal_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SignalList_flyteidl_2fadmin_2fsignal_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SignalSetRequest_flyteidl_2fadmin_2fsignal_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SignalSetResponse_flyteidl_2fadmin_2fsignal_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Signal_flyteidl_2fadmin_2fsignal_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fadmin_2fsignal_2eproto[6];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fadmin_2fsignal_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fadmin_2fsignal_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fadmin_2fsignal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SignalGetOrCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SignalGetOrCreateRequest, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SignalGetOrCreateRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SignalListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SignalListRequest, workflow_execution_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SignalListRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SignalListRequest, token_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SignalListRequest, filters_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SignalListRequest, sort_by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SignalList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SignalList, signals_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SignalList, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SignalSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SignalSetRequest, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SignalSetRequest, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SignalSetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Signal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Signal, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Signal, type_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Signal, value_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::admin::SignalGetOrCreateRequest)},
  { 7, -1, sizeof(::flyteidl::admin::SignalListRequest)},
  { 17, -1, sizeof(::flyteidl::admin::SignalList)},
  { 24, -1, sizeof(::flyteidl::admin::SignalSetRequest)},
  { 31, -1, sizeof(::flyteidl::admin::SignalSetResponse)},
  { 36, -1, sizeof(::flyteidl::admin::Signal)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_SignalGetOrCreateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_SignalListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_SignalList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_SignalSetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_SignalSetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_Signal_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fadmin_2fsignal_2eproto = {
  {}, AddDescriptors_flyteidl_2fadmin_2fsignal_2eproto, "flyteidl/admin/signal.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fadmin_2fsignal_2eproto::offsets,
  file_level_metadata_flyteidl_2fadmin_2fsignal_2eproto, 6, file_level_enum_descriptors_flyteidl_2fadmin_2fsignal_2eproto, file_level_service_descriptors_flyteidl_2fadmin_2fsignal_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fadmin_2fsignal_2eproto[] =
  "\n\033flyteidl/admin/signal.proto\022\016flyteidl."
  "admin\032\033flyteidl/admin/common.proto\032\036flyt"
  "eidl/core/identifier.proto\032\034flyteidl/cor"
  "e/literals.proto\032\031flyteidl/core/types.pr"
  "oto\"q\n\030SignalGetOrCreateRequest\022+\n\002id\030\001 "
  "\001(\0132\037.flyteidl.core.SignalIdentifier\022(\n\004"
  "type\030\002 \001(\0132\032.flyteidl.core.LiteralType\"\264"
  "\001\n\021SignalListRequest\022I\n\025workflow_executi"
  "on_id\030\001 \001(\0132*.flyteidl.core.WorkflowExec"
  "utionIdentifier\022\r\n\005limit\030\002 \001(\r\022\r\n\005token\030"
  "\003 \001(\t\022\017\n\007filters\030\004 \001(\t\022%\n\007sort_by\030\005 \001(\0132"
  "\024.flyteidl.admin.Sort\"D\n\nSignalList\022\'\n\007s"
  "ignals\030\001 \003(\0132\026.flyteidl.admin.Signal\022\r\n\005"
  "token\030\002 \001(\t\"f\n\020SignalSetRequest\022+\n\002id\030\001 "
  "\001(\0132\037.flyteidl.core.SignalIdentifier\022%\n\005"
  "value\030\002 \001(\0132\026.flyteidl.core.Literal\"\023\n\021S"
  "ignalSetResponse\"\206\001\n\006Signal\022+\n\002id\030\001 \001(\0132"
  "\037.flyteidl.core.SignalIdentifier\022(\n\004type"
  "\030\002 \001(\0132\032.flyteidl.core.LiteralType\022%\n\005va"
  "lue\030\003 \001(\0132\026.flyteidl.core.LiteralB7Z5git"
  "hub.com/flyteorg/flyteidl/gen/pb-go/flyt"
  "eidl/adminb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2fsignal_2eproto = {
  false, InitDefaults_flyteidl_2fadmin_2fsignal_2eproto, 
  descriptor_table_protodef_flyteidl_2fadmin_2fsignal_2eproto,
  "flyteidl/admin/signal.proto", &assign_descriptors_table_flyteidl_2fadmin_2fsignal_2eproto, 858,
};

void AddDescriptors_flyteidl_2fadmin_2fsignal_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[4] =
  {
    ::AddDescriptors_flyteidl_2fadmin_2fcommon_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fidentifier_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fliterals_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2ftypes_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fadmin_2fsignal_2eproto, deps, 4);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fadmin_2fsignal_2eproto = []() { AddDescriptors_flyteidl_2fadmin_2fsignal_2eproto(); return true; }();
namespace flyteidl {
namespace admin {

// ===================================================================

void SignalGetOrCreateRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_SignalGetOrCreateRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::SignalIdentifier*>(
      ::flyteidl::core::SignalIdentifier::internal_default_instance());
  ::flyteidl::admin::_SignalGetOrCreateRequest_default_instance_._instance.get_mutable()->type_ = const_cast< ::flyteidl::core::LiteralType*>(
      ::flyteidl::core::LiteralType::internal_default_instance());
}
class SignalGetOrCreateRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::SignalIdentifier& id(const SignalGetOrCreateRequest* msg);
  static const ::flyteidl::core::LiteralType& type(const SignalGetOrCreateRequest* msg);
};

const ::flyteidl::core::SignalIdentifier&
SignalGetOrCreateRequest::HasBitSetters::id(const SignalGetOrCreateRequest* msg) {
  return *msg->id_;
}
const ::flyteidl::core::LiteralType&
SignalGetOrCreateRequest::HasBitSetters::type(const SignalGetOrCreateRequest* msg) {
  return *msg->type_;
}
void SignalGetOrCreateRequest::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void SignalGetOrCreateRequest::clear_type() {
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignalGetOrCreateRequest::kIdFieldNumber;
const int SignalGetOrCreateRequest::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignalGetOrCreateRequest::SignalGetOrCreateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.SignalGetOrCreateRequest)
}
SignalGetOrCreateRequest::SignalGetOrCreateRequest(const SignalGetOrCreateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::SignalIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_type()) {
    type_ = new ::flyteidl::core::LiteralType(*from.type_);
  } else {
    type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.SignalGetOrCreateRequest)
}

void SignalGetOrCreateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SignalGetOrCreateRequest_flyteidl_2fadmin_2fsignal_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

SignalGetOrCreateRequest::~SignalGetOrCreateRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.SignalGetOrCreateRequest)
  SharedDtor();
}

void SignalGetOrCreateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete type_;
}

void SignalGetOrCreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalGetOrCreateRequest& SignalGetOrCreateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SignalGetOrCreateRequest_flyteidl_2fadmin_2fsignal_2eproto.base);
  return *internal_default_instance();
}


void SignalGetOrCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.SignalGetOrCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SignalGetOrCreateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SignalGetOrCreateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.SignalIdentifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::SignalIdentifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.LiteralType type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::LiteralType::_InternalParse;
        object = msg->mutable_type();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SignalGetOrCreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.SignalGetOrCreateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.SignalIdentifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.LiteralType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.SignalGetOrCreateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.SignalGetOrCreateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SignalGetOrCreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.SignalGetOrCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.SignalIdentifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  // .flyteidl.core.LiteralType type = 2;
  if (this->has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::type(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.SignalGetOrCreateRequest)
}

::google::protobuf::uint8* SignalGetOrCreateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.SignalGetOrCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.SignalIdentifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  // .flyteidl.core.LiteralType type = 2;
  if (this->has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::type(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.SignalGetOrCreateRequest)
  return target;
}

size_t SignalGetOrCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.SignalGetOrCreateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.SignalIdentifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .flyteidl.core.LiteralType type = 2;
  if (this->has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *type_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalGetOrCreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.SignalGetOrCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalGetOrCreateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SignalGetOrCreateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.SignalGetOrCreateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.SignalGetOrCreateRequest)
    MergeFrom(*source);
  }
}

void SignalGetOrCreateRequest::MergeFrom(const SignalGetOrCreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.SignalGetOrCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::SignalIdentifier::MergeFrom(from.id());
  }
  if (from.has_type()) {
    mutable_type()->::flyteidl::core::LiteralType::MergeFrom(from.type());
  }
}

void SignalGetOrCreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.SignalGetOrCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalGetOrCreateRequest::CopyFrom(const SignalGetOrCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.SignalGetOrCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalGetOrCreateRequest::IsInitialized() const {
  return true;
}

void SignalGetOrCreateRequest::Swap(SignalGetOrCreateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignalGetOrCreateRequest::InternalSwap(SignalGetOrCreateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata SignalGetOrCreateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsignal_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsignal_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SignalListRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_SignalListRequest_default_instance_._instance.get_mutable()->workflow_execution_id_ = const_cast< ::flyteidl::core::WorkflowExecutionIdentifier*>(
      ::flyteidl::core::WorkflowExecutionIdentifier::internal_default_instance());
  ::flyteidl::admin::_SignalListRequest_default_instance_._instance.get_mutable()->sort_by_ = const_cast< ::flyteidl::admin::Sort*>(
      ::flyteidl::admin::Sort::internal_default_instance());
}
class SignalListRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::WorkflowExecutionIdentifier& workflow_execution_id(const SignalListRequest* msg);
  static const ::flyteidl::admin::Sort& sort_by(const SignalListRequest* msg);
};

const ::flyteidl::core::WorkflowExecutionIdentifier&
SignalListRequest::HasBitSetters::workflow_execution_id(const SignalListRequest* msg) {
  return *msg->workflow_execution_id_;
}
const ::flyteidl::admin::Sort&
SignalListRequest::HasBitSetters::sort_by(const SignalListRequest* msg) {
  return *msg->sort_by_;
}
void SignalListRequest::clear_workflow_execution_id() {
  if (GetArenaNoVirtual() == nullptr && workflow_execution_id_ != nullptr) {
    delete workflow_execution_id_;
  }
  workflow_execution_id_ = nullptr;
}
void SignalListRequest::clear_sort_by() {
  if (GetArenaNoVirtual() == nullptr && sort_by_ != nullptr) {
    delete sort_by_;
  }
  sort_by_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignalListRequest::kWorkflowExecutionIdFieldNumber;
const int SignalListRequest::kLimitFieldNumber;
const int SignalListRequest::kTokenFieldNumber;
const int SignalListRequest::kFiltersFieldNumber;
const int SignalListRequest::kSortByFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignalListRequest::SignalListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.SignalListRequest)
}
SignalListRequest::SignalListRequest(const SignalListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  filters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filters().size() > 0) {
    filters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filters_);
  }
  if (from.has_workflow_execution_id()) {
    workflow_execution_id_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.workflow_execution_id_);
  } else {
    workflow_execution_id_ = nullptr;
  }
  if (from.has_sort_by()) {
    sort_by_ = new ::flyteidl::admin::Sort(*from.sort_by_);
  } else {
    sort_by_ = nullptr;
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.SignalListRequest)
}

void SignalListRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SignalListRequest_flyteidl_2fadmin_2fsignal_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&workflow_execution_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&workflow_execution_id_)) + sizeof(limit_));
}

SignalListRequest::~SignalListRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.SignalListRequest)
  SharedDtor();
}

void SignalListRequest::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete workflow_execution_id_;
  if (this != internal_default_instance()) delete sort_by_;
}

void SignalListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalListRequest& SignalListRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SignalListRequest_flyteidl_2fadmin_2fsignal_2eproto.base);
  return *internal_default_instance();
}


void SignalListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.SignalListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && workflow_execution_id_ != nullptr) {
    delete workflow_execution_id_;
  }
  workflow_execution_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sort_by_ != nullptr) {
    delete sort_by_;
  }
  sort_by_ = nullptr;
  limit_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SignalListRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SignalListRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.WorkflowExecutionIdentifier workflow_execution_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::WorkflowExecutionIdentifier::_InternalParse;
        object = msg->mutable_workflow_execution_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // uint32 limit = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string token = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.SignalListRequest.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string filters = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.SignalListRequest.filters");
        object = msg->mutable_filters();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.admin.Sort sort_by = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::Sort::_InternalParse;
        object = msg->mutable_sort_by();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SignalListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.SignalListRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.WorkflowExecutionIdentifier workflow_execution_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_workflow_execution_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.SignalListRequest.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filters = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filters()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filters().data(), static_cast<int>(this->filters().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.SignalListRequest.filters"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.Sort sort_by = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sort_by()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.SignalListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.SignalListRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SignalListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.SignalListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier workflow_execution_id = 1;
  if (this->has_workflow_execution_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::workflow_execution_id(this), output);
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  // string token = 3;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.SignalListRequest.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  // string filters = 4;
  if (this->filters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filters().data(), static_cast<int>(this->filters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.SignalListRequest.filters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filters(), output);
  }

  // .flyteidl.admin.Sort sort_by = 5;
  if (this->has_sort_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::sort_by(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.SignalListRequest)
}

::google::protobuf::uint8* SignalListRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.SignalListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowExecutionIdentifier workflow_execution_id = 1;
  if (this->has_workflow_execution_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::workflow_execution_id(this), target);
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  // string token = 3;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.SignalListRequest.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // string filters = 4;
  if (this->filters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filters().data(), static_cast<int>(this->filters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.SignalListRequest.filters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filters(), target);
  }

  // .flyteidl.admin.Sort sort_by = 5;
  if (this->has_sort_by()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::sort_by(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.SignalListRequest)
  return target;
}

size_t SignalListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.SignalListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 3;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string filters = 4;
  if (this->filters().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filters());
  }

  // .flyteidl.core.WorkflowExecutionIdentifier workflow_execution_id = 1;
  if (this->has_workflow_execution_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *workflow_execution_id_);
  }

  // .flyteidl.admin.Sort sort_by = 5;
  if (this->has_sort_by()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sort_by_);
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.SignalListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalListRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SignalListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.SignalListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.SignalListRequest)
    MergeFrom(*source);
  }
}

void SignalListRequest::MergeFrom(const SignalListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.SignalListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.filters().size() > 0) {

    filters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filters_);
  }
  if (from.has_workflow_execution_id()) {
    mutable_workflow_execution_id()->::flyteidl::core::WorkflowExecutionIdentifier::MergeFrom(from.workflow_execution_id());
  }
  if (from.has_sort_by()) {
    mutable_sort_by()->::flyteidl::admin::Sort::MergeFrom(from.sort_by());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void SignalListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.SignalListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalListRequest::CopyFrom(const SignalListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.SignalListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalListRequest::IsInitialized() const {
  return true;
}

void SignalListRequest::Swap(SignalListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignalListRequest::InternalSwap(SignalListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filters_.Swap(&other->filters_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(workflow_execution_id_, other->workflow_execution_id_);
  swap(sort_by_, other->sort_by_);
  swap(limit_, other->limit_);
}

::google::protobuf::Metadata SignalListRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsignal_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsignal_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SignalList::InitAsDefaultInstance() {
}
class SignalList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignalList::kSignalsFieldNumber;
const int SignalList::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignalList::SignalList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.SignalList)
}
SignalList::SignalList(const SignalList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      signals_(from.signals_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.SignalList)
}

void SignalList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SignalList_flyteidl_2fadmin_2fsignal_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SignalList::~SignalList() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.SignalList)
  SharedDtor();
}

void SignalList::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SignalList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalList& SignalList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SignalList_flyteidl_2fadmin_2fsignal_2eproto.base);
  return *internal_default_instance();
}


void SignalList::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.SignalList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signals_.Clear();
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SignalList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SignalList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .flyteidl.admin.Signal signals = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::admin::Signal::_InternalParse;
          object = msg->add_signals();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.SignalList.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SignalList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.SignalList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .flyteidl.admin.Signal signals = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_signals()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.SignalList.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.SignalList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.SignalList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SignalList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.SignalList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.admin.Signal signals = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signals_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->signals(static_cast<int>(i)),
      output);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.SignalList.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.SignalList)
}

::google::protobuf::uint8* SignalList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.SignalList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.admin.Signal signals = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signals_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->signals(static_cast<int>(i)), target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.SignalList.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.SignalList)
  return target;
}

size_t SignalList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.SignalList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.admin.Signal signals = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->signals_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->signals(static_cast<int>(i)));
    }
  }

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.SignalList)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalList* source =
      ::google::protobuf::DynamicCastToGenerated<SignalList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.SignalList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.SignalList)
    MergeFrom(*source);
  }
}

void SignalList::MergeFrom(const SignalList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.SignalList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signals_.MergeFrom(from.signals_);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void SignalList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.SignalList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalList::CopyFrom(const SignalList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.SignalList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalList::IsInitialized() const {
  return true;
}

void SignalList::Swap(SignalList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignalList::InternalSwap(SignalList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&signals_)->InternalSwap(CastToBase(&other->signals_));
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata SignalList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsignal_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsignal_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SignalSetRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_SignalSetRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::SignalIdentifier*>(
      ::flyteidl::core::SignalIdentifier::internal_default_instance());
  ::flyteidl::admin::_SignalSetRequest_default_instance_._instance.get_mutable()->value_ = const_cast< ::flyteidl::core::Literal*>(
      ::flyteidl::core::Literal::internal_default_instance());
}
class SignalSetRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::SignalIdentifier& id(const SignalSetRequest* msg);
  static const ::flyteidl::core::Literal& value(const SignalSetRequest* msg);
};

const ::flyteidl::core::SignalIdentifier&
SignalSetRequest::HasBitSetters::id(const SignalSetRequest* msg) {
  return *msg->id_;
}
const ::flyteidl::core::Literal&
SignalSetRequest::HasBitSetters::value(const SignalSetRequest* msg) {
  return *msg->value_;
}
void SignalSetRequest::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void SignalSetRequest::clear_value() {
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignalSetRequest::kIdFieldNumber;
const int SignalSetRequest::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignalSetRequest::SignalSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.SignalSetRequest)
}
SignalSetRequest::SignalSetRequest(const SignalSetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::SignalIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_value()) {
    value_ = new ::flyteidl::core::Literal(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.SignalSetRequest)
}

void SignalSetRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SignalSetRequest_flyteidl_2fadmin_2fsignal_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&id_)) + sizeof(value_));
}

SignalSetRequest::~SignalSetRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.SignalSetRequest)
  SharedDtor();
}

void SignalSetRequest::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete value_;
}

void SignalSetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalSetRequest& SignalSetRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SignalSetRequest_flyteidl_2fadmin_2fsignal_2eproto.base);
  return *internal_default_instance();
}


void SignalSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.SignalSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SignalSetRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SignalSetRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.SignalIdentifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::SignalIdentifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.Literal value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Literal::_InternalParse;
        object = msg->mutable_value();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SignalSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.SignalSetRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.SignalIdentifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Literal value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.SignalSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.SignalSetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SignalSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.SignalSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.SignalIdentifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  // .flyteidl.core.Literal value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::value(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.SignalSetRequest)
}

::google::protobuf::uint8* SignalSetRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.SignalSetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.SignalIdentifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  // .flyteidl.core.Literal value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::value(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.SignalSetRequest)
  return target;
}

size_t SignalSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.SignalSetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.SignalIdentifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .flyteidl.core.Literal value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.SignalSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalSetRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SignalSetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.SignalSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.SignalSetRequest)
    MergeFrom(*source);
  }
}

void SignalSetRequest::MergeFrom(const SignalSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.SignalSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::SignalIdentifier::MergeFrom(from.id());
  }
  if (from.has_value()) {
    mutable_value()->::flyteidl::core::Literal::MergeFrom(from.value());
  }
}

void SignalSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.SignalSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalSetRequest::CopyFrom(const SignalSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.SignalSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalSetRequest::IsInitialized() const {
  return true;
}

void SignalSetRequest::Swap(SignalSetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignalSetRequest::InternalSwap(SignalSetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(value_, other->value_);
}

::google::protobuf::Metadata SignalSetRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsignal_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsignal_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SignalSetResponse::InitAsDefaultInstance() {
}
class SignalSetResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignalSetResponse::SignalSetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.SignalSetResponse)
}
SignalSetResponse::SignalSetResponse(const SignalSetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.SignalSetResponse)
}

void SignalSetResponse::SharedCtor() {
}

SignalSetResponse::~SignalSetResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.SignalSetResponse)
  SharedDtor();
}

void SignalSetResponse::SharedDtor() {
}

void SignalSetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalSetResponse& SignalSetResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SignalSetResponse_flyteidl_2fadmin_2fsignal_2eproto.base);
  return *internal_default_instance();
}


void SignalSetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.SignalSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SignalSetResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SignalSetResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SignalSetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.SignalSetResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.SignalSetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.SignalSetResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SignalSetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.SignalSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.SignalSetResponse)
}

::google::protobuf::uint8* SignalSetResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.SignalSetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.SignalSetResponse)
  return target;
}

size_t SignalSetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.SignalSetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalSetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.SignalSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalSetResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SignalSetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.SignalSetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.SignalSetResponse)
    MergeFrom(*source);
  }
}

void SignalSetResponse::MergeFrom(const SignalSetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.SignalSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SignalSetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.SignalSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalSetResponse::CopyFrom(const SignalSetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.SignalSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalSetResponse::IsInitialized() const {
  return true;
}

void SignalSetResponse::Swap(SignalSetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignalSetResponse::InternalSwap(SignalSetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SignalSetResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsignal_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsignal_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Signal::InitAsDefaultInstance() {
  ::flyteidl::admin::_Signal_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::SignalIdentifier*>(
      ::flyteidl::core::SignalIdentifier::internal_default_instance());
  ::flyteidl::admin::_Signal_default_instance_._instance.get_mutable()->type_ = const_cast< ::flyteidl::core::LiteralType*>(
      ::flyteidl::core::LiteralType::internal_default_instance());
  ::flyteidl::admin::_Signal_default_instance_._instance.get_mutable()->value_ = const_cast< ::flyteidl::core::Literal*>(
      ::flyteidl::core::Literal::internal_default_instance());
}
class Signal::HasBitSetters {
 public:
  static const ::flyteidl::core::SignalIdentifier& id(const Signal* msg);
  static const ::flyteidl::core::LiteralType& type(const Signal* msg);
  static const ::flyteidl::core::Literal& value(const Signal* msg);
};

const ::flyteidl::core::SignalIdentifier&
Signal::HasBitSetters::id(const Signal* msg) {
  return *msg->id_;
}
const ::flyteidl::core::LiteralType&
Signal::HasBitSetters::type(const Signal* msg) {
  return *msg->type_;
}
const ::flyteidl::core::Literal&
Signal::HasBitSetters::value(const Signal* msg) {
  return *msg->value_;
}
void Signal::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void Signal::clear_type() {
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
void Signal::clear_value() {
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signal::kIdFieldNumber;
const int Signal::kTypeFieldNumber;
const int Signal::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signal::Signal()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.Signal)
}
Signal::Signal(const Signal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::SignalIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_type()) {
    type_ = new ::flyteidl::core::LiteralType(*from.type_);
  } else {
    type_ = nullptr;
  }
  if (from.has_value()) {
    value_ = new ::flyteidl::core::Literal(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Signal)
}

void Signal::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Signal_flyteidl_2fadmin_2fsignal_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&id_)) + sizeof(value_));
}

Signal::~Signal() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Signal)
  SharedDtor();
}

void Signal::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete type_;
  if (this != internal_default_instance()) delete value_;
}

void Signal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Signal& Signal::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Signal_flyteidl_2fadmin_2fsignal_2eproto.base);
  return *internal_default_instance();
}


void Signal::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Signal::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Signal*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.SignalIdentifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::SignalIdentifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.LiteralType type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::LiteralType::_InternalParse;
        object = msg->mutable_type();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.Literal value = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Literal::_InternalParse;
        object = msg->mutable_value();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Signal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.Signal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.SignalIdentifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.LiteralType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Literal value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.Signal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.Signal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Signal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.SignalIdentifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  // .flyteidl.core.LiteralType type = 2;
  if (this->has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::type(this), output);
  }

  // .flyteidl.core.Literal value = 3;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::value(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.Signal)
}

::google::protobuf::uint8* Signal::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.SignalIdentifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  // .flyteidl.core.LiteralType type = 2;
  if (this->has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::type(this), target);
  }

  // .flyteidl.core.Literal value = 3;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::value(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.Signal)
  return target;
}

size_t Signal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.Signal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.SignalIdentifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .flyteidl.core.LiteralType type = 2;
  if (this->has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // .flyteidl.core.Literal value = 3;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  const Signal* source =
      ::google::protobuf::DynamicCastToGenerated<Signal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.Signal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.Signal)
    MergeFrom(*source);
  }
}

void Signal::MergeFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::SignalIdentifier::MergeFrom(from.id());
  }
  if (from.has_type()) {
    mutable_type()->::flyteidl::core::LiteralType::MergeFrom(from.type());
  }
  if (from.has_value()) {
    mutable_value()->::flyteidl::core::Literal::MergeFrom(from.value());
  }
}

void Signal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal::CopyFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {
  return true;
}

void Signal::Swap(Signal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signal::InternalSwap(Signal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(value_, other->value_);
}

::google::protobuf::Metadata Signal::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsignal_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsignal_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::admin::SignalGetOrCreateRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::SignalGetOrCreateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::SignalGetOrCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::SignalListRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::SignalListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::SignalListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::SignalList* Arena::CreateMaybeMessage< ::flyteidl::admin::SignalList >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::SignalList >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::SignalSetRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::SignalSetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::SignalSetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::SignalSetResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::SignalSetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::SignalSetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Signal* Arena::CreateMaybeMessage< ::flyteidl::admin::Signal >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::Signal >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
