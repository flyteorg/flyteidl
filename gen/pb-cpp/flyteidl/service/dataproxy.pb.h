// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/service/dataproxy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fservice_2fdataproxy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fservice_2fdataproxy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "protoc-gen-swagger/options/annotations.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fservice_2fdataproxy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fservice_2fdataproxy_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fservice_2fdataproxy_2eproto;
namespace flyteidl {
namespace service {
class CreateUploadLocationRequest;
struct CreateUploadLocationRequestDefaultTypeInternal;
extern CreateUploadLocationRequestDefaultTypeInternal _CreateUploadLocationRequest_default_instance_;
class CreateUploadLocationResponse;
struct CreateUploadLocationResponseDefaultTypeInternal;
extern CreateUploadLocationResponseDefaultTypeInternal _CreateUploadLocationResponse_default_instance_;
}  // namespace service
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::service::CreateUploadLocationRequest* Arena::CreateMaybeMessage<::flyteidl::service::CreateUploadLocationRequest>(Arena*);
template<> ::flyteidl::service::CreateUploadLocationResponse* Arena::CreateMaybeMessage<::flyteidl::service::CreateUploadLocationResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace service {

// ===================================================================

class CreateUploadLocationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.service.CreateUploadLocationResponse) */ {
 public:
  inline CreateUploadLocationResponse() : CreateUploadLocationResponse(nullptr) {}
  ~CreateUploadLocationResponse() override;
  explicit constexpr CreateUploadLocationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateUploadLocationResponse(const CreateUploadLocationResponse& from);
  CreateUploadLocationResponse(CreateUploadLocationResponse&& from) noexcept
    : CreateUploadLocationResponse() {
    *this = ::std::move(from);
  }

  inline CreateUploadLocationResponse& operator=(const CreateUploadLocationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateUploadLocationResponse& operator=(CreateUploadLocationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateUploadLocationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateUploadLocationResponse* internal_default_instance() {
    return reinterpret_cast<const CreateUploadLocationResponse*>(
               &_CreateUploadLocationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateUploadLocationResponse& a, CreateUploadLocationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateUploadLocationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateUploadLocationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateUploadLocationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateUploadLocationResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUploadLocationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.service.CreateUploadLocationResponse";
  }
  protected:
  explicit CreateUploadLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignedUrlFieldNumber = 1,
    kNativeUrlFieldNumber = 2,
    kExpiresAtFieldNumber = 3,
  };
  // string signed_url = 1 [json_name = "signedUrl"];
  void clear_signed_url();
  const std::string& signed_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signed_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signed_url();
  PROTOBUF_NODISCARD std::string* release_signed_url();
  void set_allocated_signed_url(std::string* signed_url);
  private:
  const std::string& _internal_signed_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signed_url(const std::string& value);
  std::string* _internal_mutable_signed_url();
  public:

  // string native_url = 2 [json_name = "nativeUrl"];
  void clear_native_url();
  const std::string& native_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_native_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_native_url();
  PROTOBUF_NODISCARD std::string* release_native_url();
  void set_allocated_native_url(std::string* native_url);
  private:
  const std::string& _internal_native_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_native_url(const std::string& value);
  std::string* _internal_mutable_native_url();
  public:

  // .google.protobuf.Timestamp expires_at = 3 [json_name = "expiresAt"];
  bool has_expires_at() const;
  private:
  bool _internal_has_expires_at() const;
  public:
  void clear_expires_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& expires_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_expires_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expires_at();
  void set_allocated_expires_at(::PROTOBUF_NAMESPACE_ID::Timestamp* expires_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expires_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expires_at();
  public:
  void unsafe_arena_set_allocated_expires_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* expires_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expires_at();

  // @@protoc_insertion_point(class_scope:flyteidl.service.CreateUploadLocationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signed_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr native_url_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* expires_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fservice_2fdataproxy_2eproto;
};
// -------------------------------------------------------------------

class CreateUploadLocationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.service.CreateUploadLocationRequest) */ {
 public:
  inline CreateUploadLocationRequest() : CreateUploadLocationRequest(nullptr) {}
  ~CreateUploadLocationRequest() override;
  explicit constexpr CreateUploadLocationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateUploadLocationRequest(const CreateUploadLocationRequest& from);
  CreateUploadLocationRequest(CreateUploadLocationRequest&& from) noexcept
    : CreateUploadLocationRequest() {
    *this = ::std::move(from);
  }

  inline CreateUploadLocationRequest& operator=(const CreateUploadLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateUploadLocationRequest& operator=(CreateUploadLocationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateUploadLocationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateUploadLocationRequest* internal_default_instance() {
    return reinterpret_cast<const CreateUploadLocationRequest*>(
               &_CreateUploadLocationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateUploadLocationRequest& a, CreateUploadLocationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateUploadLocationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateUploadLocationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateUploadLocationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateUploadLocationRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUploadLocationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.service.CreateUploadLocationRequest";
  }
  protected:
  explicit CreateUploadLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectFieldNumber = 1,
    kDomainFieldNumber = 2,
    kFilenameFieldNumber = 3,
    kContentMd5FieldNumber = 5,
    kExpiresInFieldNumber = 4,
  };
  // string project = 1 [json_name = "project"];
  void clear_project();
  const std::string& project() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project();
  PROTOBUF_NODISCARD std::string* release_project();
  void set_allocated_project(std::string* project);
  private:
  const std::string& _internal_project() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project(const std::string& value);
  std::string* _internal_mutable_project();
  public:

  // string domain = 2 [json_name = "domain"];
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // string filename = 3 [json_name = "filename"];
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // bytes content_md5 = 5 [json_name = "contentMd5"];
  void clear_content_md5();
  const std::string& content_md5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content_md5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content_md5();
  PROTOBUF_NODISCARD std::string* release_content_md5();
  void set_allocated_content_md5(std::string* content_md5);
  private:
  const std::string& _internal_content_md5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_md5(const std::string& value);
  std::string* _internal_mutable_content_md5();
  public:

  // .google.protobuf.Duration expires_in = 4 [json_name = "expiresIn"];
  bool has_expires_in() const;
  private:
  bool _internal_has_expires_in() const;
  public:
  void clear_expires_in();
  const ::PROTOBUF_NAMESPACE_ID::Duration& expires_in() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_expires_in();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_expires_in();
  void set_allocated_expires_in(::PROTOBUF_NAMESPACE_ID::Duration* expires_in);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_expires_in() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_expires_in();
  public:
  void unsafe_arena_set_allocated_expires_in(
      ::PROTOBUF_NAMESPACE_ID::Duration* expires_in);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_expires_in();

  // @@protoc_insertion_point(class_scope:flyteidl.service.CreateUploadLocationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_md5_;
  ::PROTOBUF_NAMESPACE_ID::Duration* expires_in_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fservice_2fdataproxy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateUploadLocationResponse

// string signed_url = 1 [json_name = "signedUrl"];
inline void CreateUploadLocationResponse::clear_signed_url() {
  signed_url_.ClearToEmpty();
}
inline const std::string& CreateUploadLocationResponse::signed_url() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateUploadLocationResponse.signed_url)
  return _internal_signed_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUploadLocationResponse::set_signed_url(ArgT0&& arg0, ArgT... args) {
 
 signed_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.service.CreateUploadLocationResponse.signed_url)
}
inline std::string* CreateUploadLocationResponse::mutable_signed_url() {
  std::string* _s = _internal_mutable_signed_url();
  // @@protoc_insertion_point(field_mutable:flyteidl.service.CreateUploadLocationResponse.signed_url)
  return _s;
}
inline const std::string& CreateUploadLocationResponse::_internal_signed_url() const {
  return signed_url_.Get();
}
inline void CreateUploadLocationResponse::_internal_set_signed_url(const std::string& value) {
  
  signed_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUploadLocationResponse::_internal_mutable_signed_url() {
  
  return signed_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUploadLocationResponse::release_signed_url() {
  // @@protoc_insertion_point(field_release:flyteidl.service.CreateUploadLocationResponse.signed_url)
  return signed_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUploadLocationResponse::set_allocated_signed_url(std::string* signed_url) {
  if (signed_url != nullptr) {
    
  } else {
    
  }
  signed_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signed_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signed_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    signed_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.CreateUploadLocationResponse.signed_url)
}

// string native_url = 2 [json_name = "nativeUrl"];
inline void CreateUploadLocationResponse::clear_native_url() {
  native_url_.ClearToEmpty();
}
inline const std::string& CreateUploadLocationResponse::native_url() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateUploadLocationResponse.native_url)
  return _internal_native_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUploadLocationResponse::set_native_url(ArgT0&& arg0, ArgT... args) {
 
 native_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.service.CreateUploadLocationResponse.native_url)
}
inline std::string* CreateUploadLocationResponse::mutable_native_url() {
  std::string* _s = _internal_mutable_native_url();
  // @@protoc_insertion_point(field_mutable:flyteidl.service.CreateUploadLocationResponse.native_url)
  return _s;
}
inline const std::string& CreateUploadLocationResponse::_internal_native_url() const {
  return native_url_.Get();
}
inline void CreateUploadLocationResponse::_internal_set_native_url(const std::string& value) {
  
  native_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUploadLocationResponse::_internal_mutable_native_url() {
  
  return native_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUploadLocationResponse::release_native_url() {
  // @@protoc_insertion_point(field_release:flyteidl.service.CreateUploadLocationResponse.native_url)
  return native_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUploadLocationResponse::set_allocated_native_url(std::string* native_url) {
  if (native_url != nullptr) {
    
  } else {
    
  }
  native_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), native_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (native_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    native_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.CreateUploadLocationResponse.native_url)
}

// .google.protobuf.Timestamp expires_at = 3 [json_name = "expiresAt"];
inline bool CreateUploadLocationResponse::_internal_has_expires_at() const {
  return this != internal_default_instance() && expires_at_ != nullptr;
}
inline bool CreateUploadLocationResponse::has_expires_at() const {
  return _internal_has_expires_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CreateUploadLocationResponse::_internal_expires_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = expires_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CreateUploadLocationResponse::expires_at() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateUploadLocationResponse.expires_at)
  return _internal_expires_at();
}
inline void CreateUploadLocationResponse::unsafe_arena_set_allocated_expires_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expires_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at_);
  }
  expires_at_ = expires_at;
  if (expires_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.service.CreateUploadLocationResponse.expires_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CreateUploadLocationResponse::release_expires_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = expires_at_;
  expires_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CreateUploadLocationResponse::unsafe_arena_release_expires_at() {
  // @@protoc_insertion_point(field_release:flyteidl.service.CreateUploadLocationResponse.expires_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = expires_at_;
  expires_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CreateUploadLocationResponse::_internal_mutable_expires_at() {
  
  if (expires_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    expires_at_ = p;
  }
  return expires_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CreateUploadLocationResponse::mutable_expires_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_expires_at();
  // @@protoc_insertion_point(field_mutable:flyteidl.service.CreateUploadLocationResponse.expires_at)
  return _msg;
}
inline void CreateUploadLocationResponse::set_allocated_expires_at(::PROTOBUF_NAMESPACE_ID::Timestamp* expires_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at_);
  }
  if (expires_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at));
    if (message_arena != submessage_arena) {
      expires_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expires_at, submessage_arena);
    }
    
  } else {
    
  }
  expires_at_ = expires_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.CreateUploadLocationResponse.expires_at)
}

// -------------------------------------------------------------------

// CreateUploadLocationRequest

// string project = 1 [json_name = "project"];
inline void CreateUploadLocationRequest::clear_project() {
  project_.ClearToEmpty();
}
inline const std::string& CreateUploadLocationRequest::project() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateUploadLocationRequest.project)
  return _internal_project();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUploadLocationRequest::set_project(ArgT0&& arg0, ArgT... args) {
 
 project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.service.CreateUploadLocationRequest.project)
}
inline std::string* CreateUploadLocationRequest::mutable_project() {
  std::string* _s = _internal_mutable_project();
  // @@protoc_insertion_point(field_mutable:flyteidl.service.CreateUploadLocationRequest.project)
  return _s;
}
inline const std::string& CreateUploadLocationRequest::_internal_project() const {
  return project_.Get();
}
inline void CreateUploadLocationRequest::_internal_set_project(const std::string& value) {
  
  project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUploadLocationRequest::_internal_mutable_project() {
  
  return project_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUploadLocationRequest::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.service.CreateUploadLocationRequest.project)
  return project_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUploadLocationRequest::set_allocated_project(std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (project_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    project_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.CreateUploadLocationRequest.project)
}

// string domain = 2 [json_name = "domain"];
inline void CreateUploadLocationRequest::clear_domain() {
  domain_.ClearToEmpty();
}
inline const std::string& CreateUploadLocationRequest::domain() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateUploadLocationRequest.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUploadLocationRequest::set_domain(ArgT0&& arg0, ArgT... args) {
 
 domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.service.CreateUploadLocationRequest.domain)
}
inline std::string* CreateUploadLocationRequest::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:flyteidl.service.CreateUploadLocationRequest.domain)
  return _s;
}
inline const std::string& CreateUploadLocationRequest::_internal_domain() const {
  return domain_.Get();
}
inline void CreateUploadLocationRequest::_internal_set_domain(const std::string& value) {
  
  domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUploadLocationRequest::_internal_mutable_domain() {
  
  return domain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUploadLocationRequest::release_domain() {
  // @@protoc_insertion_point(field_release:flyteidl.service.CreateUploadLocationRequest.domain)
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUploadLocationRequest::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (domain_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.CreateUploadLocationRequest.domain)
}

// string filename = 3 [json_name = "filename"];
inline void CreateUploadLocationRequest::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& CreateUploadLocationRequest::filename() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateUploadLocationRequest.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUploadLocationRequest::set_filename(ArgT0&& arg0, ArgT... args) {
 
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.service.CreateUploadLocationRequest.filename)
}
inline std::string* CreateUploadLocationRequest::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:flyteidl.service.CreateUploadLocationRequest.filename)
  return _s;
}
inline const std::string& CreateUploadLocationRequest::_internal_filename() const {
  return filename_.Get();
}
inline void CreateUploadLocationRequest::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUploadLocationRequest::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUploadLocationRequest::release_filename() {
  // @@protoc_insertion_point(field_release:flyteidl.service.CreateUploadLocationRequest.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUploadLocationRequest::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.CreateUploadLocationRequest.filename)
}

// .google.protobuf.Duration expires_in = 4 [json_name = "expiresIn"];
inline bool CreateUploadLocationRequest::_internal_has_expires_in() const {
  return this != internal_default_instance() && expires_in_ != nullptr;
}
inline bool CreateUploadLocationRequest::has_expires_in() const {
  return _internal_has_expires_in();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& CreateUploadLocationRequest::_internal_expires_in() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = expires_in_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& CreateUploadLocationRequest::expires_in() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateUploadLocationRequest.expires_in)
  return _internal_expires_in();
}
inline void CreateUploadLocationRequest::unsafe_arena_set_allocated_expires_in(
    ::PROTOBUF_NAMESPACE_ID::Duration* expires_in) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_in_);
  }
  expires_in_ = expires_in;
  if (expires_in) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.service.CreateUploadLocationRequest.expires_in)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* CreateUploadLocationRequest::release_expires_in() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = expires_in_;
  expires_in_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* CreateUploadLocationRequest::unsafe_arena_release_expires_in() {
  // @@protoc_insertion_point(field_release:flyteidl.service.CreateUploadLocationRequest.expires_in)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = expires_in_;
  expires_in_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* CreateUploadLocationRequest::_internal_mutable_expires_in() {
  
  if (expires_in_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    expires_in_ = p;
  }
  return expires_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* CreateUploadLocationRequest::mutable_expires_in() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_expires_in();
  // @@protoc_insertion_point(field_mutable:flyteidl.service.CreateUploadLocationRequest.expires_in)
  return _msg;
}
inline void CreateUploadLocationRequest::set_allocated_expires_in(::PROTOBUF_NAMESPACE_ID::Duration* expires_in) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_in_);
  }
  if (expires_in) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_in));
    if (message_arena != submessage_arena) {
      expires_in = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expires_in, submessage_arena);
    }
    
  } else {
    
  }
  expires_in_ = expires_in;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.CreateUploadLocationRequest.expires_in)
}

// bytes content_md5 = 5 [json_name = "contentMd5"];
inline void CreateUploadLocationRequest::clear_content_md5() {
  content_md5_.ClearToEmpty();
}
inline const std::string& CreateUploadLocationRequest::content_md5() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateUploadLocationRequest.content_md5)
  return _internal_content_md5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUploadLocationRequest::set_content_md5(ArgT0&& arg0, ArgT... args) {
 
 content_md5_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.service.CreateUploadLocationRequest.content_md5)
}
inline std::string* CreateUploadLocationRequest::mutable_content_md5() {
  std::string* _s = _internal_mutable_content_md5();
  // @@protoc_insertion_point(field_mutable:flyteidl.service.CreateUploadLocationRequest.content_md5)
  return _s;
}
inline const std::string& CreateUploadLocationRequest::_internal_content_md5() const {
  return content_md5_.Get();
}
inline void CreateUploadLocationRequest::_internal_set_content_md5(const std::string& value) {
  
  content_md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUploadLocationRequest::_internal_mutable_content_md5() {
  
  return content_md5_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUploadLocationRequest::release_content_md5() {
  // @@protoc_insertion_point(field_release:flyteidl.service.CreateUploadLocationRequest.content_md5)
  return content_md5_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUploadLocationRequest::set_allocated_content_md5(std::string* content_md5) {
  if (content_md5 != nullptr) {
    
  } else {
    
  }
  content_md5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content_md5,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_md5_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    content_md5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.CreateUploadLocationRequest.content_md5)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fservice_2fdataproxy_2eproto
