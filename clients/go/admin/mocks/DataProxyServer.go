// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	service "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/service"
	mock "github.com/stretchr/testify/mock"
)

// DataProxyServer is an autogenerated mock type for the DataProxyServer type
type DataProxyServer struct {
	mock.Mock
}

type DataProxyServer_CreateUploadLocation struct {
	*mock.Call
}

func (_m DataProxyServer_CreateUploadLocation) Return(_a0 *service.CreateUploadLocationResponse, _a1 error) *DataProxyServer_CreateUploadLocation {
	return &DataProxyServer_CreateUploadLocation{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *DataProxyServer) OnCreateUploadLocation(_a0 context.Context, _a1 *service.CreateUploadLocationRequest) *DataProxyServer_CreateUploadLocation {
	c := _m.On("CreateUploadLocation", _a0, _a1)
	return &DataProxyServer_CreateUploadLocation{Call: c}
}

func (_m *DataProxyServer) OnCreateUploadLocationMatch(matchers ...interface{}) *DataProxyServer_CreateUploadLocation {
	c := _m.On("CreateUploadLocation", matchers...)
	return &DataProxyServer_CreateUploadLocation{Call: c}
}

// CreateUploadLocation provides a mock function with given fields: _a0, _a1
func (_m *DataProxyServer) CreateUploadLocation(_a0 context.Context, _a1 *service.CreateUploadLocationRequest) (*service.CreateUploadLocationResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *service.CreateUploadLocationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *service.CreateUploadLocationRequest) *service.CreateUploadLocationResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.CreateUploadLocationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *service.CreateUploadLocationRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
