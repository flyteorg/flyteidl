// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/datacatalog/datacatalog.proto

#include "flyteidl/datacatalog/datacatalog.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fliterals_2eproto ::google::protobuf::internal::SCCInfo<9> scc_info_Literal_flyteidl_2fcore_2fliterals_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fdatacatalog_2fdatacatalog_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ArtifactPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fdatacatalog_2fdatacatalog_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DatasetID_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fdatacatalog_2fdatacatalog_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DatasetPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fdatacatalog_2fdatacatalog_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_KeyValuePair_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fdatacatalog_2fdatacatalog_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Metadata_KeyMapEntry_DoNotUse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fdatacatalog_2fdatacatalog_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PaginationOptions_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fdatacatalog_2fdatacatalog_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Partition_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fdatacatalog_2fdatacatalog_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TagPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fdatacatalog_2fdatacatalog_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ArtifactData_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fdatacatalog_2fdatacatalog_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FilterExpression_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fdatacatalog_2fdatacatalog_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fdatacatalog_2fdatacatalog_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PartitionPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fdatacatalog_2fdatacatalog_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ReservationID_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fdatacatalog_2fdatacatalog_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Tag_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fdatacatalog_2fdatacatalog_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Dataset_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fdatacatalog_2fdatacatalog_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Reservation_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fdatacatalog_2fdatacatalog_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_SinglePropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fdatacatalog_2fdatacatalog_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_Artifact_flyteidl_2fdatacatalog_2fdatacatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace datacatalog {
class CreateDatasetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateDatasetRequest> _instance;
} _CreateDatasetRequest_default_instance_;
class CreateDatasetResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateDatasetResponse> _instance;
} _CreateDatasetResponse_default_instance_;
class GetDatasetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetDatasetRequest> _instance;
} _GetDatasetRequest_default_instance_;
class GetDatasetResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetDatasetResponse> _instance;
} _GetDatasetResponse_default_instance_;
class GetArtifactRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetArtifactRequest> _instance;
  ::google::protobuf::internal::ArenaStringPtr artifact_id_;
  ::google::protobuf::internal::ArenaStringPtr tag_name_;
} _GetArtifactRequest_default_instance_;
class GetArtifactResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetArtifactResponse> _instance;
} _GetArtifactResponse_default_instance_;
class CreateArtifactRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateArtifactRequest> _instance;
} _CreateArtifactRequest_default_instance_;
class CreateArtifactResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateArtifactResponse> _instance;
} _CreateArtifactResponse_default_instance_;
class AddTagRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddTagRequest> _instance;
} _AddTagRequest_default_instance_;
class AddTagResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddTagResponse> _instance;
} _AddTagResponse_default_instance_;
class ListArtifactsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListArtifactsRequest> _instance;
} _ListArtifactsRequest_default_instance_;
class ListArtifactsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListArtifactsResponse> _instance;
} _ListArtifactsResponse_default_instance_;
class ListDatasetsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListDatasetsRequest> _instance;
} _ListDatasetsRequest_default_instance_;
class ListDatasetsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListDatasetsResponse> _instance;
} _ListDatasetsResponse_default_instance_;
class UpdateArtifactRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateArtifactRequest> _instance;
  ::google::protobuf::internal::ArenaStringPtr artifact_id_;
  ::google::protobuf::internal::ArenaStringPtr tag_name_;
} _UpdateArtifactRequest_default_instance_;
class UpdateArtifactResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateArtifactResponse> _instance;
} _UpdateArtifactResponse_default_instance_;
class ReservationIDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReservationID> _instance;
} _ReservationID_default_instance_;
class GetOrExtendReservationRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetOrExtendReservationRequest> _instance;
} _GetOrExtendReservationRequest_default_instance_;
class ReservationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Reservation> _instance;
} _Reservation_default_instance_;
class GetOrExtendReservationResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetOrExtendReservationResponse> _instance;
} _GetOrExtendReservationResponse_default_instance_;
class ReleaseReservationRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReleaseReservationRequest> _instance;
} _ReleaseReservationRequest_default_instance_;
class ReleaseReservationResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReleaseReservationResponse> _instance;
} _ReleaseReservationResponse_default_instance_;
class DatasetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Dataset> _instance;
} _Dataset_default_instance_;
class PartitionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Partition> _instance;
} _Partition_default_instance_;
class DatasetIDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DatasetID> _instance;
} _DatasetID_default_instance_;
class ArtifactDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Artifact> _instance;
} _Artifact_default_instance_;
class ArtifactDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ArtifactData> _instance;
} _ArtifactData_default_instance_;
class TagDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tag> _instance;
} _Tag_default_instance_;
class Metadata_KeyMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Metadata_KeyMapEntry_DoNotUse> _instance;
} _Metadata_KeyMapEntry_DoNotUse_default_instance_;
class MetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Metadata> _instance;
} _Metadata_default_instance_;
class FilterExpressionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FilterExpression> _instance;
} _FilterExpression_default_instance_;
class SinglePropertyFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SinglePropertyFilter> _instance;
  const ::datacatalog::TagPropertyFilter* tag_filter_;
  const ::datacatalog::PartitionPropertyFilter* partition_filter_;
  const ::datacatalog::ArtifactPropertyFilter* artifact_filter_;
  const ::datacatalog::DatasetPropertyFilter* dataset_filter_;
} _SinglePropertyFilter_default_instance_;
class ArtifactPropertyFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ArtifactPropertyFilter> _instance;
  ::google::protobuf::internal::ArenaStringPtr artifact_id_;
} _ArtifactPropertyFilter_default_instance_;
class TagPropertyFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TagPropertyFilter> _instance;
  ::google::protobuf::internal::ArenaStringPtr tag_name_;
} _TagPropertyFilter_default_instance_;
class PartitionPropertyFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PartitionPropertyFilter> _instance;
  const ::datacatalog::KeyValuePair* key_val_;
} _PartitionPropertyFilter_default_instance_;
class KeyValuePairDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeyValuePair> _instance;
} _KeyValuePair_default_instance_;
class DatasetPropertyFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DatasetPropertyFilter> _instance;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr version_;
} _DatasetPropertyFilter_default_instance_;
class PaginationOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PaginationOptions> _instance;
} _PaginationOptions_default_instance_;
}  // namespace datacatalog
static void InitDefaultsCreateDatasetRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_CreateDatasetRequest_default_instance_;
    new (ptr) ::datacatalog::CreateDatasetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::CreateDatasetRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CreateDatasetRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCreateDatasetRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_Dataset_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsCreateDatasetResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_CreateDatasetResponse_default_instance_;
    new (ptr) ::datacatalog::CreateDatasetResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::CreateDatasetResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CreateDatasetResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCreateDatasetResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {}};

static void InitDefaultsGetDatasetRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_GetDatasetRequest_default_instance_;
    new (ptr) ::datacatalog::GetDatasetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::GetDatasetRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetDatasetRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetDatasetRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_DatasetID_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsGetDatasetResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_GetDatasetResponse_default_instance_;
    new (ptr) ::datacatalog::GetDatasetResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::GetDatasetResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetDatasetResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetDatasetResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_Dataset_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsGetArtifactRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_GetArtifactRequest_default_instance_;
    new (ptr) ::datacatalog::GetArtifactRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::GetArtifactRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetArtifactRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetArtifactRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_DatasetID_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsGetArtifactResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_GetArtifactResponse_default_instance_;
    new (ptr) ::datacatalog::GetArtifactResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::GetArtifactResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetArtifactResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetArtifactResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_Artifact_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsCreateArtifactRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_CreateArtifactRequest_default_instance_;
    new (ptr) ::datacatalog::CreateArtifactRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::CreateArtifactRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CreateArtifactRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCreateArtifactRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_Artifact_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsCreateArtifactResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_CreateArtifactResponse_default_instance_;
    new (ptr) ::datacatalog::CreateArtifactResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::CreateArtifactResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CreateArtifactResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCreateArtifactResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {}};

static void InitDefaultsAddTagRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_AddTagRequest_default_instance_;
    new (ptr) ::datacatalog::AddTagRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::AddTagRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AddTagRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAddTagRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_Tag_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsAddTagResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_AddTagResponse_default_instance_;
    new (ptr) ::datacatalog::AddTagResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::AddTagResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AddTagResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAddTagResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {}};

static void InitDefaultsListArtifactsRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_ListArtifactsRequest_default_instance_;
    new (ptr) ::datacatalog::ListArtifactsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::ListArtifactsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ListArtifactsRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsListArtifactsRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_DatasetID_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,
      &scc_info_FilterExpression_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,
      &scc_info_PaginationOptions_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsListArtifactsResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_ListArtifactsResponse_default_instance_;
    new (ptr) ::datacatalog::ListArtifactsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::ListArtifactsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListArtifactsResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListArtifactsResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_Artifact_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsListDatasetsRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_ListDatasetsRequest_default_instance_;
    new (ptr) ::datacatalog::ListDatasetsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::ListDatasetsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ListDatasetsRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsListDatasetsRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_FilterExpression_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,
      &scc_info_PaginationOptions_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsListDatasetsResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_ListDatasetsResponse_default_instance_;
    new (ptr) ::datacatalog::ListDatasetsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::ListDatasetsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListDatasetsResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListDatasetsResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_Dataset_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsUpdateArtifactRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_UpdateArtifactRequest_default_instance_;
    new (ptr) ::datacatalog::UpdateArtifactRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::UpdateArtifactRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UpdateArtifactRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUpdateArtifactRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_DatasetID_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,
      &scc_info_ArtifactData_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsUpdateArtifactResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_UpdateArtifactResponse_default_instance_;
    new (ptr) ::datacatalog::UpdateArtifactResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::UpdateArtifactResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UpdateArtifactResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUpdateArtifactResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {}};

static void InitDefaultsReservationID_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_ReservationID_default_instance_;
    new (ptr) ::datacatalog::ReservationID();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::ReservationID::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReservationID_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReservationID_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_DatasetID_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsGetOrExtendReservationRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_GetOrExtendReservationRequest_default_instance_;
    new (ptr) ::datacatalog::GetOrExtendReservationRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::GetOrExtendReservationRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GetOrExtendReservationRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGetOrExtendReservationRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_ReservationID_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsReservation_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_Reservation_default_instance_;
    new (ptr) ::datacatalog::Reservation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::Reservation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Reservation_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsReservation_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_ReservationID_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsGetOrExtendReservationResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_GetOrExtendReservationResponse_default_instance_;
    new (ptr) ::datacatalog::GetOrExtendReservationResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::GetOrExtendReservationResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetOrExtendReservationResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetOrExtendReservationResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_Reservation_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsReleaseReservationRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_ReleaseReservationRequest_default_instance_;
    new (ptr) ::datacatalog::ReleaseReservationRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::ReleaseReservationRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReleaseReservationRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReleaseReservationRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_ReservationID_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsReleaseReservationResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_ReleaseReservationResponse_default_instance_;
    new (ptr) ::datacatalog::ReleaseReservationResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::ReleaseReservationResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReleaseReservationResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReleaseReservationResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {}};

static void InitDefaultsDataset_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_Dataset_default_instance_;
    new (ptr) ::datacatalog::Dataset();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::Dataset::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Dataset_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDataset_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_DatasetID_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,
      &scc_info_Metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsPartition_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_Partition_default_instance_;
    new (ptr) ::datacatalog::Partition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::Partition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Partition_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPartition_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {}};

static void InitDefaultsDatasetID_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_DatasetID_default_instance_;
    new (ptr) ::datacatalog::DatasetID();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::DatasetID::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DatasetID_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDatasetID_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {}};

static void InitDefaultsArtifact_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_Artifact_default_instance_;
    new (ptr) ::datacatalog::Artifact();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::Artifact::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_Artifact_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsArtifact_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_DatasetID_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,
      &scc_info_ArtifactData_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,
      &scc_info_Metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,
      &scc_info_Partition_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,
      &scc_info_Tag_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsArtifactData_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_ArtifactData_default_instance_;
    new (ptr) ::datacatalog::ArtifactData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::ArtifactData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ArtifactData_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsArtifactData_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_Literal_flyteidl_2fcore_2fliterals_2eproto.base,}};

static void InitDefaultsTag_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_Tag_default_instance_;
    new (ptr) ::datacatalog::Tag();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::Tag::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Tag_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTag_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_DatasetID_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsMetadata_KeyMapEntry_DoNotUse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_Metadata_KeyMapEntry_DoNotUse_default_instance_;
    new (ptr) ::datacatalog::Metadata_KeyMapEntry_DoNotUse();
  }
  ::datacatalog::Metadata_KeyMapEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Metadata_KeyMapEntry_DoNotUse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMetadata_KeyMapEntry_DoNotUse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {}};

static void InitDefaultsMetadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_Metadata_default_instance_;
    new (ptr) ::datacatalog::Metadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::Metadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMetadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_Metadata_KeyMapEntry_DoNotUse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsFilterExpression_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_FilterExpression_default_instance_;
    new (ptr) ::datacatalog::FilterExpression();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::FilterExpression::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FilterExpression_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFilterExpression_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_SinglePropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsSinglePropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_SinglePropertyFilter_default_instance_;
    new (ptr) ::datacatalog::SinglePropertyFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::SinglePropertyFilter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_SinglePropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsSinglePropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_TagPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,
      &scc_info_PartitionPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,
      &scc_info_ArtifactPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,
      &scc_info_DatasetPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsArtifactPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_ArtifactPropertyFilter_default_instance_;
    new (ptr) ::datacatalog::ArtifactPropertyFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::ArtifactPropertyFilter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ArtifactPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsArtifactPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {}};

static void InitDefaultsTagPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_TagPropertyFilter_default_instance_;
    new (ptr) ::datacatalog::TagPropertyFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::TagPropertyFilter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TagPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTagPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {}};

static void InitDefaultsPartitionPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_PartitionPropertyFilter_default_instance_;
    new (ptr) ::datacatalog::PartitionPropertyFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::PartitionPropertyFilter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PartitionPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPartitionPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {
      &scc_info_KeyValuePair_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base,}};

static void InitDefaultsKeyValuePair_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_KeyValuePair_default_instance_;
    new (ptr) ::datacatalog::KeyValuePair();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::KeyValuePair::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KeyValuePair_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKeyValuePair_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {}};

static void InitDefaultsDatasetPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_DatasetPropertyFilter_default_instance_;
    new (ptr) ::datacatalog::DatasetPropertyFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::DatasetPropertyFilter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DatasetPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDatasetPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {}};

static void InitDefaultsPaginationOptions_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datacatalog::_PaginationOptions_default_instance_;
    new (ptr) ::datacatalog::PaginationOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datacatalog::PaginationOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PaginationOptions_flyteidl_2fdatacatalog_2fdatacatalog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPaginationOptions_flyteidl_2fdatacatalog_2fdatacatalog_2eproto}, {}};

void InitDefaults_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CreateDatasetRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateDatasetResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetDatasetRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetDatasetResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetArtifactRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetArtifactResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateArtifactRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateArtifactResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddTagRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddTagResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListArtifactsRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListArtifactsResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListDatasetsRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListDatasetsResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateArtifactRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateArtifactResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReservationID_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetOrExtendReservationRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Reservation_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetOrExtendReservationResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReleaseReservationRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReleaseReservationResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Dataset_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Partition_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DatasetID_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Artifact_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ArtifactData_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Tag_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Metadata_KeyMapEntry_DoNotUse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FilterExpression_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SinglePropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ArtifactPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TagPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PartitionPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KeyValuePair_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DatasetPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PaginationOptions_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[38];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[3];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fdatacatalog_2fdatacatalog_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fdatacatalog_2fdatacatalog_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::CreateDatasetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::CreateDatasetRequest, dataset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::CreateDatasetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetDatasetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetDatasetRequest, dataset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetDatasetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetDatasetResponse, dataset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetArtifactRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetArtifactRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetArtifactRequest, dataset_),
  offsetof(::datacatalog::GetArtifactRequestDefaultTypeInternal, artifact_id_),
  offsetof(::datacatalog::GetArtifactRequestDefaultTypeInternal, tag_name_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetArtifactRequest, query_handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetArtifactResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetArtifactResponse, artifact_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::CreateArtifactRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::CreateArtifactRequest, artifact_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::CreateArtifactResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::AddTagRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::AddTagRequest, tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::AddTagResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ListArtifactsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ListArtifactsRequest, dataset_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::ListArtifactsRequest, filter_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::ListArtifactsRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ListArtifactsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ListArtifactsResponse, artifacts_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::ListArtifactsResponse, next_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ListDatasetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ListDatasetsRequest, filter_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::ListDatasetsRequest, pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ListDatasetsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ListDatasetsResponse, datasets_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::ListDatasetsResponse, next_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::UpdateArtifactRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::datacatalog::UpdateArtifactRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::UpdateArtifactRequest, dataset_),
  offsetof(::datacatalog::UpdateArtifactRequestDefaultTypeInternal, artifact_id_),
  offsetof(::datacatalog::UpdateArtifactRequestDefaultTypeInternal, tag_name_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::UpdateArtifactRequest, data_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::UpdateArtifactRequest, query_handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::UpdateArtifactResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::UpdateArtifactResponse, artifact_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ReservationID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ReservationID, dataset_id_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::ReservationID, tag_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetOrExtendReservationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetOrExtendReservationRequest, reservation_id_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetOrExtendReservationRequest, owner_id_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetOrExtendReservationRequest, heartbeat_interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::Reservation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::Reservation, reservation_id_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Reservation, owner_id_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Reservation, heartbeat_interval_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Reservation, expires_at_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Reservation, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetOrExtendReservationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::GetOrExtendReservationResponse, reservation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ReleaseReservationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ReleaseReservationRequest, reservation_id_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::ReleaseReservationRequest, owner_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ReleaseReservationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::Dataset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::Dataset, id_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Dataset, metadata_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Dataset, partitionkeys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::Partition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::Partition, key_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Partition, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::DatasetID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::DatasetID, project_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::DatasetID, name_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::DatasetID, domain_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::DatasetID, version_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::DatasetID, uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::Artifact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::Artifact, id_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Artifact, dataset_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Artifact, data_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Artifact, metadata_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Artifact, partitions_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Artifact, tags_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Artifact, created_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ArtifactData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ArtifactData, name_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::ArtifactData, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::Tag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::Tag, name_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Tag, artifact_id_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Tag, dataset_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Metadata_KeyMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Metadata_KeyMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::Metadata_KeyMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::Metadata_KeyMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::Metadata, key_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::FilterExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::FilterExpression, filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::SinglePropertyFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::datacatalog::SinglePropertyFilter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::datacatalog::SinglePropertyFilterDefaultTypeInternal, tag_filter_),
  offsetof(::datacatalog::SinglePropertyFilterDefaultTypeInternal, partition_filter_),
  offsetof(::datacatalog::SinglePropertyFilterDefaultTypeInternal, artifact_filter_),
  offsetof(::datacatalog::SinglePropertyFilterDefaultTypeInternal, dataset_filter_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::SinglePropertyFilter, operator__),
  PROTOBUF_FIELD_OFFSET(::datacatalog::SinglePropertyFilter, property_filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ArtifactPropertyFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::datacatalog::ArtifactPropertyFilter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::datacatalog::ArtifactPropertyFilterDefaultTypeInternal, artifact_id_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::ArtifactPropertyFilter, property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::TagPropertyFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::datacatalog::TagPropertyFilter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::datacatalog::TagPropertyFilterDefaultTypeInternal, tag_name_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::TagPropertyFilter, property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::PartitionPropertyFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::datacatalog::PartitionPropertyFilter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::datacatalog::PartitionPropertyFilterDefaultTypeInternal, key_val_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::PartitionPropertyFilter, property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::KeyValuePair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::KeyValuePair, key_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::KeyValuePair, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::DatasetPropertyFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::datacatalog::DatasetPropertyFilter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::datacatalog::DatasetPropertyFilterDefaultTypeInternal, project_),
  offsetof(::datacatalog::DatasetPropertyFilterDefaultTypeInternal, name_),
  offsetof(::datacatalog::DatasetPropertyFilterDefaultTypeInternal, domain_),
  offsetof(::datacatalog::DatasetPropertyFilterDefaultTypeInternal, version_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::DatasetPropertyFilter, property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datacatalog::PaginationOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datacatalog::PaginationOptions, limit_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::PaginationOptions, token_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::PaginationOptions, sortkey_),
  PROTOBUF_FIELD_OFFSET(::datacatalog::PaginationOptions, sortorder_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::datacatalog::CreateDatasetRequest)},
  { 6, -1, sizeof(::datacatalog::CreateDatasetResponse)},
  { 11, -1, sizeof(::datacatalog::GetDatasetRequest)},
  { 17, -1, sizeof(::datacatalog::GetDatasetResponse)},
  { 23, -1, sizeof(::datacatalog::GetArtifactRequest)},
  { 32, -1, sizeof(::datacatalog::GetArtifactResponse)},
  { 38, -1, sizeof(::datacatalog::CreateArtifactRequest)},
  { 44, -1, sizeof(::datacatalog::CreateArtifactResponse)},
  { 49, -1, sizeof(::datacatalog::AddTagRequest)},
  { 55, -1, sizeof(::datacatalog::AddTagResponse)},
  { 60, -1, sizeof(::datacatalog::ListArtifactsRequest)},
  { 68, -1, sizeof(::datacatalog::ListArtifactsResponse)},
  { 75, -1, sizeof(::datacatalog::ListDatasetsRequest)},
  { 82, -1, sizeof(::datacatalog::ListDatasetsResponse)},
  { 89, -1, sizeof(::datacatalog::UpdateArtifactRequest)},
  { 99, -1, sizeof(::datacatalog::UpdateArtifactResponse)},
  { 105, -1, sizeof(::datacatalog::ReservationID)},
  { 112, -1, sizeof(::datacatalog::GetOrExtendReservationRequest)},
  { 120, -1, sizeof(::datacatalog::Reservation)},
  { 130, -1, sizeof(::datacatalog::GetOrExtendReservationResponse)},
  { 136, -1, sizeof(::datacatalog::ReleaseReservationRequest)},
  { 143, -1, sizeof(::datacatalog::ReleaseReservationResponse)},
  { 148, -1, sizeof(::datacatalog::Dataset)},
  { 156, -1, sizeof(::datacatalog::Partition)},
  { 163, -1, sizeof(::datacatalog::DatasetID)},
  { 173, -1, sizeof(::datacatalog::Artifact)},
  { 185, -1, sizeof(::datacatalog::ArtifactData)},
  { 192, -1, sizeof(::datacatalog::Tag)},
  { 200, 207, sizeof(::datacatalog::Metadata_KeyMapEntry_DoNotUse)},
  { 209, -1, sizeof(::datacatalog::Metadata)},
  { 215, -1, sizeof(::datacatalog::FilterExpression)},
  { 221, -1, sizeof(::datacatalog::SinglePropertyFilter)},
  { 232, -1, sizeof(::datacatalog::ArtifactPropertyFilter)},
  { 239, -1, sizeof(::datacatalog::TagPropertyFilter)},
  { 246, -1, sizeof(::datacatalog::PartitionPropertyFilter)},
  { 253, -1, sizeof(::datacatalog::KeyValuePair)},
  { 260, -1, sizeof(::datacatalog::DatasetPropertyFilter)},
  { 270, -1, sizeof(::datacatalog::PaginationOptions)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_CreateDatasetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_CreateDatasetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_GetDatasetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_GetDatasetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_GetArtifactRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_GetArtifactResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_CreateArtifactRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_CreateArtifactResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_AddTagRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_AddTagResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_ListArtifactsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_ListArtifactsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_ListDatasetsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_ListDatasetsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_UpdateArtifactRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_UpdateArtifactResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_ReservationID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_GetOrExtendReservationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_Reservation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_GetOrExtendReservationResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_ReleaseReservationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_ReleaseReservationResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_Dataset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_Partition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_DatasetID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_Artifact_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_ArtifactData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_Tag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_Metadata_KeyMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_Metadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_FilterExpression_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_SinglePropertyFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_ArtifactPropertyFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_TagPropertyFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_PartitionPropertyFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_KeyValuePair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_DatasetPropertyFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::datacatalog::_PaginationOptions_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto = {
  {}, AddDescriptors_flyteidl_2fdatacatalog_2fdatacatalog_2eproto, "flyteidl/datacatalog/datacatalog.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fdatacatalog_2fdatacatalog_2eproto::offsets,
  file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto, 38, file_level_enum_descriptors_flyteidl_2fdatacatalog_2fdatacatalog_2eproto, file_level_service_descriptors_flyteidl_2fdatacatalog_2fdatacatalog_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[] =
  "\n&flyteidl/datacatalog/datacatalog.proto"
  "\022\013datacatalog\032\034flyteidl/core/literals.pr"
  "oto\032\036google/protobuf/duration.proto\032\037goo"
  "gle/protobuf/timestamp.proto\"=\n\024CreateDa"
  "tasetRequest\022%\n\007dataset\030\001 \001(\0132\024.datacata"
  "log.Dataset\"\027\n\025CreateDatasetResponse\"<\n\021"
  "GetDatasetRequest\022\'\n\007dataset\030\001 \001(\0132\026.dat"
  "acatalog.DatasetID\";\n\022GetDatasetResponse"
  "\022%\n\007dataset\030\001 \001(\0132\024.datacatalog.Dataset\""
  "x\n\022GetArtifactRequest\022\'\n\007dataset\030\001 \001(\0132\026"
  ".datacatalog.DatasetID\022\025\n\013artifact_id\030\002 "
  "\001(\tH\000\022\022\n\010tag_name\030\003 \001(\tH\000B\016\n\014query_handl"
  "e\">\n\023GetArtifactResponse\022\'\n\010artifact\030\001 \001"
  "(\0132\025.datacatalog.Artifact\"@\n\025CreateArtif"
  "actRequest\022\'\n\010artifact\030\001 \001(\0132\025.datacatal"
  "og.Artifact\"\030\n\026CreateArtifactResponse\".\n"
  "\rAddTagRequest\022\035\n\003tag\030\001 \001(\0132\020.datacatalo"
  "g.Tag\"\020\n\016AddTagResponse\"\242\001\n\024ListArtifact"
  "sRequest\022\'\n\007dataset\030\001 \001(\0132\026.datacatalog."
  "DatasetID\022-\n\006filter\030\002 \001(\0132\035.datacatalog."
  "FilterExpression\0222\n\npagination\030\003 \001(\0132\036.d"
  "atacatalog.PaginationOptions\"U\n\025ListArti"
  "factsResponse\022(\n\tartifacts\030\001 \003(\0132\025.datac"
  "atalog.Artifact\022\022\n\nnext_token\030\002 \001(\t\"x\n\023L"
  "istDatasetsRequest\022-\n\006filter\030\001 \001(\0132\035.dat"
  "acatalog.FilterExpression\0222\n\npagination\030"
  "\002 \001(\0132\036.datacatalog.PaginationOptions\"R\n"
  "\024ListDatasetsResponse\022&\n\010datasets\030\001 \003(\0132"
  "\024.datacatalog.Dataset\022\022\n\nnext_token\030\002 \001("
  "\t\"\244\001\n\025UpdateArtifactRequest\022\'\n\007dataset\030\001"
  " \001(\0132\026.datacatalog.DatasetID\022\025\n\013artifact"
  "_id\030\002 \001(\tH\000\022\022\n\010tag_name\030\003 \001(\tH\000\022\'\n\004data\030"
  "\004 \003(\0132\031.datacatalog.ArtifactDataB\016\n\014quer"
  "y_handle\"-\n\026UpdateArtifactResponse\022\023\n\013ar"
  "tifact_id\030\001 \001(\t\"M\n\rReservationID\022*\n\ndata"
  "set_id\030\001 \001(\0132\026.datacatalog.DatasetID\022\020\n\010"
  "tag_name\030\002 \001(\t\"\234\001\n\035GetOrExtendReservatio"
  "nRequest\0222\n\016reservation_id\030\001 \001(\0132\032.datac"
  "atalog.ReservationID\022\020\n\010owner_id\030\002 \001(\t\0225"
  "\n\022heartbeat_interval\030\003 \001(\0132\031.google.prot"
  "obuf.Duration\"\343\001\n\013Reservation\0222\n\016reserva"
  "tion_id\030\001 \001(\0132\032.datacatalog.ReservationI"
  "D\022\020\n\010owner_id\030\002 \001(\t\0225\n\022heartbeat_interva"
  "l\030\003 \001(\0132\031.google.protobuf.Duration\022.\n\nex"
  "pires_at\030\004 \001(\0132\032.google.protobuf.Timesta"
  "mp\022\'\n\010metadata\030\006 \001(\0132\025.datacatalog.Metad"
  "ata\"O\n\036GetOrExtendReservationResponse\022-\n"
  "\013reservation\030\001 \001(\0132\030.datacatalog.Reserva"
  "tion\"a\n\031ReleaseReservationRequest\0222\n\016res"
  "ervation_id\030\001 \001(\0132\032.datacatalog.Reservat"
  "ionID\022\020\n\010owner_id\030\002 \001(\t\"\034\n\032ReleaseReserv"
  "ationResponse\"m\n\007Dataset\022\"\n\002id\030\001 \001(\0132\026.d"
  "atacatalog.DatasetID\022\'\n\010metadata\030\002 \001(\0132\025"
  ".datacatalog.Metadata\022\025\n\rpartitionKeys\030\003"
  " \003(\t\"\'\n\tPartition\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
  "\002 \001(\t\"Y\n\tDatasetID\022\017\n\007project\030\001 \001(\t\022\014\n\004n"
  "ame\030\002 \001(\t\022\016\n\006domain\030\003 \001(\t\022\017\n\007version\030\004 \001"
  "(\t\022\014\n\004UUID\030\005 \001(\t\"\215\002\n\010Artifact\022\n\n\002id\030\001 \001("
  "\t\022\'\n\007dataset\030\002 \001(\0132\026.datacatalog.Dataset"
  "ID\022\'\n\004data\030\003 \003(\0132\031.datacatalog.ArtifactD"
  "ata\022\'\n\010metadata\030\004 \001(\0132\025.datacatalog.Meta"
  "data\022*\n\npartitions\030\005 \003(\0132\026.datacatalog.P"
  "artition\022\036\n\004tags\030\006 \003(\0132\020.datacatalog.Tag"
  "\022.\n\ncreated_at\030\007 \001(\0132\032.google.protobuf.T"
  "imestamp\"C\n\014ArtifactData\022\014\n\004name\030\001 \001(\t\022%"
  "\n\005value\030\002 \001(\0132\026.flyteidl.core.Literal\"Q\n"
  "\003Tag\022\014\n\004name\030\001 \001(\t\022\023\n\013artifact_id\030\002 \001(\t\022"
  "\'\n\007dataset\030\003 \001(\0132\026.datacatalog.DatasetID"
  "\"m\n\010Metadata\0222\n\007key_map\030\001 \003(\0132!.datacata"
  "log.Metadata.KeyMapEntry\032-\n\013KeyMapEntry\022"
  "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"F\n\020Filte"
  "rExpression\0222\n\007filters\030\001 \003(\0132!.datacatal"
  "og.SinglePropertyFilter\"\211\003\n\024SingleProper"
  "tyFilter\0224\n\ntag_filter\030\001 \001(\0132\036.datacatal"
  "og.TagPropertyFilterH\000\022@\n\020partition_filt"
  "er\030\002 \001(\0132$.datacatalog.PartitionProperty"
  "FilterH\000\022>\n\017artifact_filter\030\003 \001(\0132#.data"
  "catalog.ArtifactPropertyFilterH\000\022<\n\016data"
  "set_filter\030\004 \001(\0132\".datacatalog.DatasetPr"
  "opertyFilterH\000\022F\n\010operator\030\n \001(\01624.datac"
  "atalog.SinglePropertyFilter.ComparisonOp"
  "erator\" \n\022ComparisonOperator\022\n\n\006EQUALS\020\000"
  "B\021\n\017property_filter\";\n\026ArtifactPropertyF"
  "ilter\022\025\n\013artifact_id\030\001 \001(\tH\000B\n\n\010property"
  "\"3\n\021TagPropertyFilter\022\022\n\010tag_name\030\001 \001(\tH"
  "\000B\n\n\010property\"S\n\027PartitionPropertyFilter"
  "\022,\n\007key_val\030\001 \001(\0132\031.datacatalog.KeyValue"
  "PairH\000B\n\n\010property\"*\n\014KeyValuePair\022\013\n\003ke"
  "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"k\n\025DatasetPropert"
  "yFilter\022\021\n\007project\030\001 \001(\tH\000\022\016\n\004name\030\002 \001(\t"
  "H\000\022\020\n\006domain\030\003 \001(\tH\000\022\021\n\007version\030\004 \001(\tH\000B"
  "\n\n\010property\"\361\001\n\021PaginationOptions\022\r\n\005lim"
  "it\030\001 \001(\r\022\r\n\005token\030\002 \001(\t\0227\n\007sortKey\030\003 \001(\016"
  "2&.datacatalog.PaginationOptions.SortKey"
  "\022;\n\tsortOrder\030\004 \001(\0162(.datacatalog.Pagina"
  "tionOptions.SortOrder\"*\n\tSortOrder\022\016\n\nDE"
  "SCENDING\020\000\022\r\n\tASCENDING\020\001\"\034\n\007SortKey\022\021\n\r"
  "CREATION_TIME\020\0002\206\007\n\013DataCatalog\022V\n\rCreat"
  "eDataset\022!.datacatalog.CreateDatasetRequ"
  "est\032\".datacatalog.CreateDatasetResponse\022"
  "M\n\nGetDataset\022\036.datacatalog.GetDatasetRe"
  "quest\032\037.datacatalog.GetDatasetResponse\022Y"
  "\n\016CreateArtifact\022\".datacatalog.CreateArt"
  "ifactRequest\032#.datacatalog.CreateArtifac"
  "tResponse\022P\n\013GetArtifact\022\037.datacatalog.G"
  "etArtifactRequest\032 .datacatalog.GetArtif"
  "actResponse\022A\n\006AddTag\022\032.datacatalog.AddT"
  "agRequest\032\033.datacatalog.AddTagResponse\022V"
  "\n\rListArtifacts\022!.datacatalog.ListArtifa"
  "ctsRequest\032\".datacatalog.ListArtifactsRe"
  "sponse\022S\n\014ListDatasets\022 .datacatalog.Lis"
  "tDatasetsRequest\032!.datacatalog.ListDatas"
  "etsResponse\022Y\n\016UpdateArtifact\022\".datacata"
  "log.UpdateArtifactRequest\032#.datacatalog."
  "UpdateArtifactResponse\022q\n\026GetOrExtendRes"
  "ervation\022*.datacatalog.GetOrExtendReserv"
  "ationRequest\032+.datacatalog.GetOrExtendRe"
  "servationResponse\022e\n\022ReleaseReservation\022"
  "&.datacatalog.ReleaseReservationRequest\032"
  "\'.datacatalog.ReleaseReservationResponse"
  "B=Z;github.com/flyteorg/flyteidl/gen/pb-"
  "go/flyteidl/datacatalogb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto = {
  false, InitDefaults_flyteidl_2fdatacatalog_2fdatacatalog_2eproto, 
  descriptor_table_protodef_flyteidl_2fdatacatalog_2fdatacatalog_2eproto,
  "flyteidl/datacatalog/datacatalog.proto", &assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto, 4871,
};

void AddDescriptors_flyteidl_2fdatacatalog_2fdatacatalog_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[3] =
  {
    ::AddDescriptors_flyteidl_2fcore_2fliterals_2eproto,
    ::AddDescriptors_google_2fprotobuf_2fduration_2eproto,
    ::AddDescriptors_google_2fprotobuf_2ftimestamp_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto, deps, 3);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fdatacatalog_2fdatacatalog_2eproto = []() { AddDescriptors_flyteidl_2fdatacatalog_2fdatacatalog_2eproto(); return true; }();
namespace datacatalog {
const ::google::protobuf::EnumDescriptor* SinglePropertyFilter_ComparisonOperator_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return file_level_enum_descriptors_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[0];
}
bool SinglePropertyFilter_ComparisonOperator_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SinglePropertyFilter_ComparisonOperator SinglePropertyFilter::EQUALS;
const SinglePropertyFilter_ComparisonOperator SinglePropertyFilter::ComparisonOperator_MIN;
const SinglePropertyFilter_ComparisonOperator SinglePropertyFilter::ComparisonOperator_MAX;
const int SinglePropertyFilter::ComparisonOperator_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PaginationOptions_SortOrder_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return file_level_enum_descriptors_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[1];
}
bool PaginationOptions_SortOrder_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PaginationOptions_SortOrder PaginationOptions::DESCENDING;
const PaginationOptions_SortOrder PaginationOptions::ASCENDING;
const PaginationOptions_SortOrder PaginationOptions::SortOrder_MIN;
const PaginationOptions_SortOrder PaginationOptions::SortOrder_MAX;
const int PaginationOptions::SortOrder_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PaginationOptions_SortKey_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return file_level_enum_descriptors_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[2];
}
bool PaginationOptions_SortKey_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PaginationOptions_SortKey PaginationOptions::CREATION_TIME;
const PaginationOptions_SortKey PaginationOptions::SortKey_MIN;
const PaginationOptions_SortKey PaginationOptions::SortKey_MAX;
const int PaginationOptions::SortKey_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void CreateDatasetRequest::InitAsDefaultInstance() {
  ::datacatalog::_CreateDatasetRequest_default_instance_._instance.get_mutable()->dataset_ = const_cast< ::datacatalog::Dataset*>(
      ::datacatalog::Dataset::internal_default_instance());
}
class CreateDatasetRequest::HasBitSetters {
 public:
  static const ::datacatalog::Dataset& dataset(const CreateDatasetRequest* msg);
};

const ::datacatalog::Dataset&
CreateDatasetRequest::HasBitSetters::dataset(const CreateDatasetRequest* msg) {
  return *msg->dataset_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateDatasetRequest::kDatasetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateDatasetRequest::CreateDatasetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.CreateDatasetRequest)
}
CreateDatasetRequest::CreateDatasetRequest(const CreateDatasetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dataset()) {
    dataset_ = new ::datacatalog::Dataset(*from.dataset_);
  } else {
    dataset_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.CreateDatasetRequest)
}

void CreateDatasetRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateDatasetRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  dataset_ = nullptr;
}

CreateDatasetRequest::~CreateDatasetRequest() {
  // @@protoc_insertion_point(destructor:datacatalog.CreateDatasetRequest)
  SharedDtor();
}

void CreateDatasetRequest::SharedDtor() {
  if (this != internal_default_instance()) delete dataset_;
}

void CreateDatasetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateDatasetRequest& CreateDatasetRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateDatasetRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void CreateDatasetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.CreateDatasetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && dataset_ != nullptr) {
    delete dataset_;
  }
  dataset_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateDatasetRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateDatasetRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .datacatalog.Dataset dataset = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::Dataset::_InternalParse;
        object = msg->mutable_dataset();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateDatasetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.CreateDatasetRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .datacatalog.Dataset dataset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dataset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.CreateDatasetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.CreateDatasetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateDatasetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.CreateDatasetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.Dataset dataset = 1;
  if (this->has_dataset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::dataset(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.CreateDatasetRequest)
}

::google::protobuf::uint8* CreateDatasetRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.CreateDatasetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.Dataset dataset = 1;
  if (this->has_dataset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::dataset(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.CreateDatasetRequest)
  return target;
}

size_t CreateDatasetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.CreateDatasetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .datacatalog.Dataset dataset = 1;
  if (this->has_dataset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dataset_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateDatasetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.CreateDatasetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateDatasetRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CreateDatasetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.CreateDatasetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.CreateDatasetRequest)
    MergeFrom(*source);
  }
}

void CreateDatasetRequest::MergeFrom(const CreateDatasetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.CreateDatasetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dataset()) {
    mutable_dataset()->::datacatalog::Dataset::MergeFrom(from.dataset());
  }
}

void CreateDatasetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.CreateDatasetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDatasetRequest::CopyFrom(const CreateDatasetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.CreateDatasetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDatasetRequest::IsInitialized() const {
  return true;
}

void CreateDatasetRequest::Swap(CreateDatasetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateDatasetRequest::InternalSwap(CreateDatasetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(dataset_, other->dataset_);
}

::google::protobuf::Metadata CreateDatasetRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateDatasetResponse::InitAsDefaultInstance() {
}
class CreateDatasetResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateDatasetResponse::CreateDatasetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.CreateDatasetResponse)
}
CreateDatasetResponse::CreateDatasetResponse(const CreateDatasetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:datacatalog.CreateDatasetResponse)
}

void CreateDatasetResponse::SharedCtor() {
}

CreateDatasetResponse::~CreateDatasetResponse() {
  // @@protoc_insertion_point(destructor:datacatalog.CreateDatasetResponse)
  SharedDtor();
}

void CreateDatasetResponse::SharedDtor() {
}

void CreateDatasetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateDatasetResponse& CreateDatasetResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateDatasetResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void CreateDatasetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.CreateDatasetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateDatasetResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateDatasetResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateDatasetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.CreateDatasetResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.CreateDatasetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.CreateDatasetResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateDatasetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.CreateDatasetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.CreateDatasetResponse)
}

::google::protobuf::uint8* CreateDatasetResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.CreateDatasetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.CreateDatasetResponse)
  return target;
}

size_t CreateDatasetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.CreateDatasetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateDatasetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.CreateDatasetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateDatasetResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CreateDatasetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.CreateDatasetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.CreateDatasetResponse)
    MergeFrom(*source);
  }
}

void CreateDatasetResponse::MergeFrom(const CreateDatasetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.CreateDatasetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CreateDatasetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.CreateDatasetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDatasetResponse::CopyFrom(const CreateDatasetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.CreateDatasetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDatasetResponse::IsInitialized() const {
  return true;
}

void CreateDatasetResponse::Swap(CreateDatasetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateDatasetResponse::InternalSwap(CreateDatasetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CreateDatasetResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetDatasetRequest::InitAsDefaultInstance() {
  ::datacatalog::_GetDatasetRequest_default_instance_._instance.get_mutable()->dataset_ = const_cast< ::datacatalog::DatasetID*>(
      ::datacatalog::DatasetID::internal_default_instance());
}
class GetDatasetRequest::HasBitSetters {
 public:
  static const ::datacatalog::DatasetID& dataset(const GetDatasetRequest* msg);
};

const ::datacatalog::DatasetID&
GetDatasetRequest::HasBitSetters::dataset(const GetDatasetRequest* msg) {
  return *msg->dataset_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDatasetRequest::kDatasetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDatasetRequest::GetDatasetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.GetDatasetRequest)
}
GetDatasetRequest::GetDatasetRequest(const GetDatasetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dataset()) {
    dataset_ = new ::datacatalog::DatasetID(*from.dataset_);
  } else {
    dataset_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.GetDatasetRequest)
}

void GetDatasetRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetDatasetRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  dataset_ = nullptr;
}

GetDatasetRequest::~GetDatasetRequest() {
  // @@protoc_insertion_point(destructor:datacatalog.GetDatasetRequest)
  SharedDtor();
}

void GetDatasetRequest::SharedDtor() {
  if (this != internal_default_instance()) delete dataset_;
}

void GetDatasetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDatasetRequest& GetDatasetRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetDatasetRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void GetDatasetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.GetDatasetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && dataset_ != nullptr) {
    delete dataset_;
  }
  dataset_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetDatasetRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetDatasetRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .datacatalog.DatasetID dataset = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::DatasetID::_InternalParse;
        object = msg->mutable_dataset();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetDatasetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.GetDatasetRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .datacatalog.DatasetID dataset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dataset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.GetDatasetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.GetDatasetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetDatasetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.GetDatasetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.DatasetID dataset = 1;
  if (this->has_dataset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::dataset(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.GetDatasetRequest)
}

::google::protobuf::uint8* GetDatasetRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.GetDatasetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.DatasetID dataset = 1;
  if (this->has_dataset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::dataset(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.GetDatasetRequest)
  return target;
}

size_t GetDatasetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.GetDatasetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .datacatalog.DatasetID dataset = 1;
  if (this->has_dataset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dataset_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDatasetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.GetDatasetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDatasetRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetDatasetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.GetDatasetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.GetDatasetRequest)
    MergeFrom(*source);
  }
}

void GetDatasetRequest::MergeFrom(const GetDatasetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.GetDatasetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dataset()) {
    mutable_dataset()->::datacatalog::DatasetID::MergeFrom(from.dataset());
  }
}

void GetDatasetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.GetDatasetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDatasetRequest::CopyFrom(const GetDatasetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.GetDatasetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatasetRequest::IsInitialized() const {
  return true;
}

void GetDatasetRequest::Swap(GetDatasetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDatasetRequest::InternalSwap(GetDatasetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(dataset_, other->dataset_);
}

::google::protobuf::Metadata GetDatasetRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetDatasetResponse::InitAsDefaultInstance() {
  ::datacatalog::_GetDatasetResponse_default_instance_._instance.get_mutable()->dataset_ = const_cast< ::datacatalog::Dataset*>(
      ::datacatalog::Dataset::internal_default_instance());
}
class GetDatasetResponse::HasBitSetters {
 public:
  static const ::datacatalog::Dataset& dataset(const GetDatasetResponse* msg);
};

const ::datacatalog::Dataset&
GetDatasetResponse::HasBitSetters::dataset(const GetDatasetResponse* msg) {
  return *msg->dataset_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDatasetResponse::kDatasetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDatasetResponse::GetDatasetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.GetDatasetResponse)
}
GetDatasetResponse::GetDatasetResponse(const GetDatasetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dataset()) {
    dataset_ = new ::datacatalog::Dataset(*from.dataset_);
  } else {
    dataset_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.GetDatasetResponse)
}

void GetDatasetResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetDatasetResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  dataset_ = nullptr;
}

GetDatasetResponse::~GetDatasetResponse() {
  // @@protoc_insertion_point(destructor:datacatalog.GetDatasetResponse)
  SharedDtor();
}

void GetDatasetResponse::SharedDtor() {
  if (this != internal_default_instance()) delete dataset_;
}

void GetDatasetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDatasetResponse& GetDatasetResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetDatasetResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void GetDatasetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.GetDatasetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && dataset_ != nullptr) {
    delete dataset_;
  }
  dataset_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetDatasetResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetDatasetResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .datacatalog.Dataset dataset = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::Dataset::_InternalParse;
        object = msg->mutable_dataset();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetDatasetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.GetDatasetResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .datacatalog.Dataset dataset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dataset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.GetDatasetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.GetDatasetResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetDatasetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.GetDatasetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.Dataset dataset = 1;
  if (this->has_dataset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::dataset(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.GetDatasetResponse)
}

::google::protobuf::uint8* GetDatasetResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.GetDatasetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.Dataset dataset = 1;
  if (this->has_dataset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::dataset(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.GetDatasetResponse)
  return target;
}

size_t GetDatasetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.GetDatasetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .datacatalog.Dataset dataset = 1;
  if (this->has_dataset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dataset_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDatasetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.GetDatasetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDatasetResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetDatasetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.GetDatasetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.GetDatasetResponse)
    MergeFrom(*source);
  }
}

void GetDatasetResponse::MergeFrom(const GetDatasetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.GetDatasetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dataset()) {
    mutable_dataset()->::datacatalog::Dataset::MergeFrom(from.dataset());
  }
}

void GetDatasetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.GetDatasetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDatasetResponse::CopyFrom(const GetDatasetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.GetDatasetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatasetResponse::IsInitialized() const {
  return true;
}

void GetDatasetResponse::Swap(GetDatasetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDatasetResponse::InternalSwap(GetDatasetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(dataset_, other->dataset_);
}

::google::protobuf::Metadata GetDatasetResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetArtifactRequest::InitAsDefaultInstance() {
  ::datacatalog::_GetArtifactRequest_default_instance_._instance.get_mutable()->dataset_ = const_cast< ::datacatalog::DatasetID*>(
      ::datacatalog::DatasetID::internal_default_instance());
  ::datacatalog::_GetArtifactRequest_default_instance_.artifact_id_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::datacatalog::_GetArtifactRequest_default_instance_.tag_name_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
class GetArtifactRequest::HasBitSetters {
 public:
  static const ::datacatalog::DatasetID& dataset(const GetArtifactRequest* msg);
};

const ::datacatalog::DatasetID&
GetArtifactRequest::HasBitSetters::dataset(const GetArtifactRequest* msg) {
  return *msg->dataset_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetArtifactRequest::kDatasetFieldNumber;
const int GetArtifactRequest::kArtifactIdFieldNumber;
const int GetArtifactRequest::kTagNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetArtifactRequest::GetArtifactRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.GetArtifactRequest)
}
GetArtifactRequest::GetArtifactRequest(const GetArtifactRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dataset()) {
    dataset_ = new ::datacatalog::DatasetID(*from.dataset_);
  } else {
    dataset_ = nullptr;
  }
  clear_has_query_handle();
  switch (from.query_handle_case()) {
    case kArtifactId: {
      set_artifact_id(from.artifact_id());
      break;
    }
    case kTagName: {
      set_tag_name(from.tag_name());
      break;
    }
    case QUERY_HANDLE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.GetArtifactRequest)
}

void GetArtifactRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetArtifactRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  dataset_ = nullptr;
  clear_has_query_handle();
}

GetArtifactRequest::~GetArtifactRequest() {
  // @@protoc_insertion_point(destructor:datacatalog.GetArtifactRequest)
  SharedDtor();
}

void GetArtifactRequest::SharedDtor() {
  if (this != internal_default_instance()) delete dataset_;
  if (has_query_handle()) {
    clear_query_handle();
  }
}

void GetArtifactRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetArtifactRequest& GetArtifactRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetArtifactRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void GetArtifactRequest::clear_query_handle() {
// @@protoc_insertion_point(one_of_clear_start:datacatalog.GetArtifactRequest)
  switch (query_handle_case()) {
    case kArtifactId: {
      query_handle_.artifact_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kTagName: {
      query_handle_.tag_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case QUERY_HANDLE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = QUERY_HANDLE_NOT_SET;
}


void GetArtifactRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.GetArtifactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && dataset_ != nullptr) {
    delete dataset_;
  }
  dataset_ = nullptr;
  clear_query_handle();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetArtifactRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetArtifactRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .datacatalog.DatasetID dataset = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::DatasetID::_InternalParse;
        object = msg->mutable_dataset();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string artifact_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.GetArtifactRequest.artifact_id");
        object = msg->mutable_artifact_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string tag_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.GetArtifactRequest.tag_name");
        object = msg->mutable_tag_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetArtifactRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.GetArtifactRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .datacatalog.DatasetID dataset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dataset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string artifact_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artifact_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->artifact_id().data(), static_cast<int>(this->artifact_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.GetArtifactRequest.artifact_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tag_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tag_name().data(), static_cast<int>(this->tag_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.GetArtifactRequest.tag_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.GetArtifactRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.GetArtifactRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetArtifactRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.GetArtifactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.DatasetID dataset = 1;
  if (this->has_dataset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::dataset(this), output);
  }

  // string artifact_id = 2;
  if (has_artifact_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artifact_id().data(), static_cast<int>(this->artifact_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.GetArtifactRequest.artifact_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->artifact_id(), output);
  }

  // string tag_name = 3;
  if (has_tag_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag_name().data(), static_cast<int>(this->tag_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.GetArtifactRequest.tag_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tag_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.GetArtifactRequest)
}

::google::protobuf::uint8* GetArtifactRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.GetArtifactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.DatasetID dataset = 1;
  if (this->has_dataset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::dataset(this), target);
  }

  // string artifact_id = 2;
  if (has_artifact_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artifact_id().data(), static_cast<int>(this->artifact_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.GetArtifactRequest.artifact_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->artifact_id(), target);
  }

  // string tag_name = 3;
  if (has_tag_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag_name().data(), static_cast<int>(this->tag_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.GetArtifactRequest.tag_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tag_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.GetArtifactRequest)
  return target;
}

size_t GetArtifactRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.GetArtifactRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .datacatalog.DatasetID dataset = 1;
  if (this->has_dataset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dataset_);
  }

  switch (query_handle_case()) {
    // string artifact_id = 2;
    case kArtifactId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->artifact_id());
      break;
    }
    // string tag_name = 3;
    case kTagName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag_name());
      break;
    }
    case QUERY_HANDLE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetArtifactRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.GetArtifactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetArtifactRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetArtifactRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.GetArtifactRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.GetArtifactRequest)
    MergeFrom(*source);
  }
}

void GetArtifactRequest::MergeFrom(const GetArtifactRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.GetArtifactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dataset()) {
    mutable_dataset()->::datacatalog::DatasetID::MergeFrom(from.dataset());
  }
  switch (from.query_handle_case()) {
    case kArtifactId: {
      set_artifact_id(from.artifact_id());
      break;
    }
    case kTagName: {
      set_tag_name(from.tag_name());
      break;
    }
    case QUERY_HANDLE_NOT_SET: {
      break;
    }
  }
}

void GetArtifactRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.GetArtifactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetArtifactRequest::CopyFrom(const GetArtifactRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.GetArtifactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetArtifactRequest::IsInitialized() const {
  return true;
}

void GetArtifactRequest::Swap(GetArtifactRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetArtifactRequest::InternalSwap(GetArtifactRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(dataset_, other->dataset_);
  swap(query_handle_, other->query_handle_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata GetArtifactRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetArtifactResponse::InitAsDefaultInstance() {
  ::datacatalog::_GetArtifactResponse_default_instance_._instance.get_mutable()->artifact_ = const_cast< ::datacatalog::Artifact*>(
      ::datacatalog::Artifact::internal_default_instance());
}
class GetArtifactResponse::HasBitSetters {
 public:
  static const ::datacatalog::Artifact& artifact(const GetArtifactResponse* msg);
};

const ::datacatalog::Artifact&
GetArtifactResponse::HasBitSetters::artifact(const GetArtifactResponse* msg) {
  return *msg->artifact_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetArtifactResponse::kArtifactFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetArtifactResponse::GetArtifactResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.GetArtifactResponse)
}
GetArtifactResponse::GetArtifactResponse(const GetArtifactResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_artifact()) {
    artifact_ = new ::datacatalog::Artifact(*from.artifact_);
  } else {
    artifact_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.GetArtifactResponse)
}

void GetArtifactResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetArtifactResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  artifact_ = nullptr;
}

GetArtifactResponse::~GetArtifactResponse() {
  // @@protoc_insertion_point(destructor:datacatalog.GetArtifactResponse)
  SharedDtor();
}

void GetArtifactResponse::SharedDtor() {
  if (this != internal_default_instance()) delete artifact_;
}

void GetArtifactResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetArtifactResponse& GetArtifactResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetArtifactResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void GetArtifactResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.GetArtifactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && artifact_ != nullptr) {
    delete artifact_;
  }
  artifact_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetArtifactResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetArtifactResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .datacatalog.Artifact artifact = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::Artifact::_InternalParse;
        object = msg->mutable_artifact();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetArtifactResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.GetArtifactResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .datacatalog.Artifact artifact = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_artifact()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.GetArtifactResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.GetArtifactResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetArtifactResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.GetArtifactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.Artifact artifact = 1;
  if (this->has_artifact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::artifact(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.GetArtifactResponse)
}

::google::protobuf::uint8* GetArtifactResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.GetArtifactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.Artifact artifact = 1;
  if (this->has_artifact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::artifact(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.GetArtifactResponse)
  return target;
}

size_t GetArtifactResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.GetArtifactResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .datacatalog.Artifact artifact = 1;
  if (this->has_artifact()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *artifact_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetArtifactResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.GetArtifactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetArtifactResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetArtifactResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.GetArtifactResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.GetArtifactResponse)
    MergeFrom(*source);
  }
}

void GetArtifactResponse::MergeFrom(const GetArtifactResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.GetArtifactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_artifact()) {
    mutable_artifact()->::datacatalog::Artifact::MergeFrom(from.artifact());
  }
}

void GetArtifactResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.GetArtifactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetArtifactResponse::CopyFrom(const GetArtifactResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.GetArtifactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetArtifactResponse::IsInitialized() const {
  return true;
}

void GetArtifactResponse::Swap(GetArtifactResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetArtifactResponse::InternalSwap(GetArtifactResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(artifact_, other->artifact_);
}

::google::protobuf::Metadata GetArtifactResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateArtifactRequest::InitAsDefaultInstance() {
  ::datacatalog::_CreateArtifactRequest_default_instance_._instance.get_mutable()->artifact_ = const_cast< ::datacatalog::Artifact*>(
      ::datacatalog::Artifact::internal_default_instance());
}
class CreateArtifactRequest::HasBitSetters {
 public:
  static const ::datacatalog::Artifact& artifact(const CreateArtifactRequest* msg);
};

const ::datacatalog::Artifact&
CreateArtifactRequest::HasBitSetters::artifact(const CreateArtifactRequest* msg) {
  return *msg->artifact_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateArtifactRequest::kArtifactFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateArtifactRequest::CreateArtifactRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.CreateArtifactRequest)
}
CreateArtifactRequest::CreateArtifactRequest(const CreateArtifactRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_artifact()) {
    artifact_ = new ::datacatalog::Artifact(*from.artifact_);
  } else {
    artifact_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.CreateArtifactRequest)
}

void CreateArtifactRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateArtifactRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  artifact_ = nullptr;
}

CreateArtifactRequest::~CreateArtifactRequest() {
  // @@protoc_insertion_point(destructor:datacatalog.CreateArtifactRequest)
  SharedDtor();
}

void CreateArtifactRequest::SharedDtor() {
  if (this != internal_default_instance()) delete artifact_;
}

void CreateArtifactRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateArtifactRequest& CreateArtifactRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateArtifactRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void CreateArtifactRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.CreateArtifactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && artifact_ != nullptr) {
    delete artifact_;
  }
  artifact_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateArtifactRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateArtifactRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .datacatalog.Artifact artifact = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::Artifact::_InternalParse;
        object = msg->mutable_artifact();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateArtifactRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.CreateArtifactRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .datacatalog.Artifact artifact = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_artifact()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.CreateArtifactRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.CreateArtifactRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateArtifactRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.CreateArtifactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.Artifact artifact = 1;
  if (this->has_artifact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::artifact(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.CreateArtifactRequest)
}

::google::protobuf::uint8* CreateArtifactRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.CreateArtifactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.Artifact artifact = 1;
  if (this->has_artifact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::artifact(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.CreateArtifactRequest)
  return target;
}

size_t CreateArtifactRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.CreateArtifactRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .datacatalog.Artifact artifact = 1;
  if (this->has_artifact()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *artifact_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateArtifactRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.CreateArtifactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateArtifactRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CreateArtifactRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.CreateArtifactRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.CreateArtifactRequest)
    MergeFrom(*source);
  }
}

void CreateArtifactRequest::MergeFrom(const CreateArtifactRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.CreateArtifactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_artifact()) {
    mutable_artifact()->::datacatalog::Artifact::MergeFrom(from.artifact());
  }
}

void CreateArtifactRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.CreateArtifactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateArtifactRequest::CopyFrom(const CreateArtifactRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.CreateArtifactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateArtifactRequest::IsInitialized() const {
  return true;
}

void CreateArtifactRequest::Swap(CreateArtifactRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateArtifactRequest::InternalSwap(CreateArtifactRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(artifact_, other->artifact_);
}

::google::protobuf::Metadata CreateArtifactRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateArtifactResponse::InitAsDefaultInstance() {
}
class CreateArtifactResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateArtifactResponse::CreateArtifactResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.CreateArtifactResponse)
}
CreateArtifactResponse::CreateArtifactResponse(const CreateArtifactResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:datacatalog.CreateArtifactResponse)
}

void CreateArtifactResponse::SharedCtor() {
}

CreateArtifactResponse::~CreateArtifactResponse() {
  // @@protoc_insertion_point(destructor:datacatalog.CreateArtifactResponse)
  SharedDtor();
}

void CreateArtifactResponse::SharedDtor() {
}

void CreateArtifactResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateArtifactResponse& CreateArtifactResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateArtifactResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void CreateArtifactResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.CreateArtifactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateArtifactResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateArtifactResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateArtifactResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.CreateArtifactResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.CreateArtifactResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.CreateArtifactResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateArtifactResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.CreateArtifactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.CreateArtifactResponse)
}

::google::protobuf::uint8* CreateArtifactResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.CreateArtifactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.CreateArtifactResponse)
  return target;
}

size_t CreateArtifactResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.CreateArtifactResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateArtifactResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.CreateArtifactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateArtifactResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CreateArtifactResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.CreateArtifactResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.CreateArtifactResponse)
    MergeFrom(*source);
  }
}

void CreateArtifactResponse::MergeFrom(const CreateArtifactResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.CreateArtifactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CreateArtifactResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.CreateArtifactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateArtifactResponse::CopyFrom(const CreateArtifactResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.CreateArtifactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateArtifactResponse::IsInitialized() const {
  return true;
}

void CreateArtifactResponse::Swap(CreateArtifactResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateArtifactResponse::InternalSwap(CreateArtifactResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CreateArtifactResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AddTagRequest::InitAsDefaultInstance() {
  ::datacatalog::_AddTagRequest_default_instance_._instance.get_mutable()->tag_ = const_cast< ::datacatalog::Tag*>(
      ::datacatalog::Tag::internal_default_instance());
}
class AddTagRequest::HasBitSetters {
 public:
  static const ::datacatalog::Tag& tag(const AddTagRequest* msg);
};

const ::datacatalog::Tag&
AddTagRequest::HasBitSetters::tag(const AddTagRequest* msg) {
  return *msg->tag_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddTagRequest::kTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddTagRequest::AddTagRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.AddTagRequest)
}
AddTagRequest::AddTagRequest(const AddTagRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tag()) {
    tag_ = new ::datacatalog::Tag(*from.tag_);
  } else {
    tag_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.AddTagRequest)
}

void AddTagRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AddTagRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  tag_ = nullptr;
}

AddTagRequest::~AddTagRequest() {
  // @@protoc_insertion_point(destructor:datacatalog.AddTagRequest)
  SharedDtor();
}

void AddTagRequest::SharedDtor() {
  if (this != internal_default_instance()) delete tag_;
}

void AddTagRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddTagRequest& AddTagRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AddTagRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void AddTagRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.AddTagRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && tag_ != nullptr) {
    delete tag_;
  }
  tag_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AddTagRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AddTagRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .datacatalog.Tag tag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::Tag::_InternalParse;
        object = msg->mutable_tag();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AddTagRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.AddTagRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .datacatalog.Tag tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.AddTagRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.AddTagRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AddTagRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.AddTagRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.Tag tag = 1;
  if (this->has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::tag(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.AddTagRequest)
}

::google::protobuf::uint8* AddTagRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.AddTagRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.Tag tag = 1;
  if (this->has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::tag(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.AddTagRequest)
  return target;
}

size_t AddTagRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.AddTagRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .datacatalog.Tag tag = 1;
  if (this->has_tag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tag_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddTagRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.AddTagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddTagRequest* source =
      ::google::protobuf::DynamicCastToGenerated<AddTagRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.AddTagRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.AddTagRequest)
    MergeFrom(*source);
  }
}

void AddTagRequest::MergeFrom(const AddTagRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.AddTagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tag()) {
    mutable_tag()->::datacatalog::Tag::MergeFrom(from.tag());
  }
}

void AddTagRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.AddTagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTagRequest::CopyFrom(const AddTagRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.AddTagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTagRequest::IsInitialized() const {
  return true;
}

void AddTagRequest::Swap(AddTagRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddTagRequest::InternalSwap(AddTagRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(tag_, other->tag_);
}

::google::protobuf::Metadata AddTagRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AddTagResponse::InitAsDefaultInstance() {
}
class AddTagResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddTagResponse::AddTagResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.AddTagResponse)
}
AddTagResponse::AddTagResponse(const AddTagResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:datacatalog.AddTagResponse)
}

void AddTagResponse::SharedCtor() {
}

AddTagResponse::~AddTagResponse() {
  // @@protoc_insertion_point(destructor:datacatalog.AddTagResponse)
  SharedDtor();
}

void AddTagResponse::SharedDtor() {
}

void AddTagResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddTagResponse& AddTagResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AddTagResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void AddTagResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.AddTagResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AddTagResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AddTagResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AddTagResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.AddTagResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.AddTagResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.AddTagResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AddTagResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.AddTagResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.AddTagResponse)
}

::google::protobuf::uint8* AddTagResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.AddTagResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.AddTagResponse)
  return target;
}

size_t AddTagResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.AddTagResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddTagResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.AddTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddTagResponse* source =
      ::google::protobuf::DynamicCastToGenerated<AddTagResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.AddTagResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.AddTagResponse)
    MergeFrom(*source);
  }
}

void AddTagResponse::MergeFrom(const AddTagResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.AddTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AddTagResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.AddTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTagResponse::CopyFrom(const AddTagResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.AddTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTagResponse::IsInitialized() const {
  return true;
}

void AddTagResponse::Swap(AddTagResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddTagResponse::InternalSwap(AddTagResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddTagResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListArtifactsRequest::InitAsDefaultInstance() {
  ::datacatalog::_ListArtifactsRequest_default_instance_._instance.get_mutable()->dataset_ = const_cast< ::datacatalog::DatasetID*>(
      ::datacatalog::DatasetID::internal_default_instance());
  ::datacatalog::_ListArtifactsRequest_default_instance_._instance.get_mutable()->filter_ = const_cast< ::datacatalog::FilterExpression*>(
      ::datacatalog::FilterExpression::internal_default_instance());
  ::datacatalog::_ListArtifactsRequest_default_instance_._instance.get_mutable()->pagination_ = const_cast< ::datacatalog::PaginationOptions*>(
      ::datacatalog::PaginationOptions::internal_default_instance());
}
class ListArtifactsRequest::HasBitSetters {
 public:
  static const ::datacatalog::DatasetID& dataset(const ListArtifactsRequest* msg);
  static const ::datacatalog::FilterExpression& filter(const ListArtifactsRequest* msg);
  static const ::datacatalog::PaginationOptions& pagination(const ListArtifactsRequest* msg);
};

const ::datacatalog::DatasetID&
ListArtifactsRequest::HasBitSetters::dataset(const ListArtifactsRequest* msg) {
  return *msg->dataset_;
}
const ::datacatalog::FilterExpression&
ListArtifactsRequest::HasBitSetters::filter(const ListArtifactsRequest* msg) {
  return *msg->filter_;
}
const ::datacatalog::PaginationOptions&
ListArtifactsRequest::HasBitSetters::pagination(const ListArtifactsRequest* msg) {
  return *msg->pagination_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListArtifactsRequest::kDatasetFieldNumber;
const int ListArtifactsRequest::kFilterFieldNumber;
const int ListArtifactsRequest::kPaginationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListArtifactsRequest::ListArtifactsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.ListArtifactsRequest)
}
ListArtifactsRequest::ListArtifactsRequest(const ListArtifactsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dataset()) {
    dataset_ = new ::datacatalog::DatasetID(*from.dataset_);
  } else {
    dataset_ = nullptr;
  }
  if (from.has_filter()) {
    filter_ = new ::datacatalog::FilterExpression(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  if (from.has_pagination()) {
    pagination_ = new ::datacatalog::PaginationOptions(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.ListArtifactsRequest)
}

void ListArtifactsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListArtifactsRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::memset(&dataset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagination_) -
      reinterpret_cast<char*>(&dataset_)) + sizeof(pagination_));
}

ListArtifactsRequest::~ListArtifactsRequest() {
  // @@protoc_insertion_point(destructor:datacatalog.ListArtifactsRequest)
  SharedDtor();
}

void ListArtifactsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete dataset_;
  if (this != internal_default_instance()) delete filter_;
  if (this != internal_default_instance()) delete pagination_;
}

void ListArtifactsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListArtifactsRequest& ListArtifactsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListArtifactsRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void ListArtifactsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.ListArtifactsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && dataset_ != nullptr) {
    delete dataset_;
  }
  dataset_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListArtifactsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListArtifactsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .datacatalog.DatasetID dataset = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::DatasetID::_InternalParse;
        object = msg->mutable_dataset();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .datacatalog.FilterExpression filter = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::FilterExpression::_InternalParse;
        object = msg->mutable_filter();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .datacatalog.PaginationOptions pagination = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::PaginationOptions::_InternalParse;
        object = msg->mutable_pagination();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListArtifactsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.ListArtifactsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .datacatalog.DatasetID dataset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dataset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .datacatalog.FilterExpression filter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .datacatalog.PaginationOptions pagination = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pagination()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.ListArtifactsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.ListArtifactsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListArtifactsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.ListArtifactsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.DatasetID dataset = 1;
  if (this->has_dataset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::dataset(this), output);
  }

  // .datacatalog.FilterExpression filter = 2;
  if (this->has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::filter(this), output);
  }

  // .datacatalog.PaginationOptions pagination = 3;
  if (this->has_pagination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::pagination(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.ListArtifactsRequest)
}

::google::protobuf::uint8* ListArtifactsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.ListArtifactsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.DatasetID dataset = 1;
  if (this->has_dataset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::dataset(this), target);
  }

  // .datacatalog.FilterExpression filter = 2;
  if (this->has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::filter(this), target);
  }

  // .datacatalog.PaginationOptions pagination = 3;
  if (this->has_pagination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::pagination(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.ListArtifactsRequest)
  return target;
}

size_t ListArtifactsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.ListArtifactsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .datacatalog.DatasetID dataset = 1;
  if (this->has_dataset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dataset_);
  }

  // .datacatalog.FilterExpression filter = 2;
  if (this->has_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  // .datacatalog.PaginationOptions pagination = 3;
  if (this->has_pagination()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListArtifactsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.ListArtifactsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListArtifactsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ListArtifactsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.ListArtifactsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.ListArtifactsRequest)
    MergeFrom(*source);
  }
}

void ListArtifactsRequest::MergeFrom(const ListArtifactsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.ListArtifactsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dataset()) {
    mutable_dataset()->::datacatalog::DatasetID::MergeFrom(from.dataset());
  }
  if (from.has_filter()) {
    mutable_filter()->::datacatalog::FilterExpression::MergeFrom(from.filter());
  }
  if (from.has_pagination()) {
    mutable_pagination()->::datacatalog::PaginationOptions::MergeFrom(from.pagination());
  }
}

void ListArtifactsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.ListArtifactsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListArtifactsRequest::CopyFrom(const ListArtifactsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.ListArtifactsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListArtifactsRequest::IsInitialized() const {
  return true;
}

void ListArtifactsRequest::Swap(ListArtifactsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListArtifactsRequest::InternalSwap(ListArtifactsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(dataset_, other->dataset_);
  swap(filter_, other->filter_);
  swap(pagination_, other->pagination_);
}

::google::protobuf::Metadata ListArtifactsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListArtifactsResponse::InitAsDefaultInstance() {
}
class ListArtifactsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListArtifactsResponse::kArtifactsFieldNumber;
const int ListArtifactsResponse::kNextTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListArtifactsResponse::ListArtifactsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.ListArtifactsResponse)
}
ListArtifactsResponse::ListArtifactsResponse(const ListArtifactsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      artifacts_(from.artifacts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_token().size() > 0) {
    next_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_token_);
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.ListArtifactsResponse)
}

void ListArtifactsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListArtifactsResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  next_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ListArtifactsResponse::~ListArtifactsResponse() {
  // @@protoc_insertion_point(destructor:datacatalog.ListArtifactsResponse)
  SharedDtor();
}

void ListArtifactsResponse::SharedDtor() {
  next_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListArtifactsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListArtifactsResponse& ListArtifactsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListArtifactsResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void ListArtifactsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.ListArtifactsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  artifacts_.Clear();
  next_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListArtifactsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListArtifactsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .datacatalog.Artifact artifacts = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::datacatalog::Artifact::_InternalParse;
          object = msg->add_artifacts();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string next_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.ListArtifactsResponse.next_token");
        object = msg->mutable_next_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListArtifactsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.ListArtifactsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .datacatalog.Artifact artifacts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_artifacts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_token().data(), static_cast<int>(this->next_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.ListArtifactsResponse.next_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.ListArtifactsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.ListArtifactsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListArtifactsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.ListArtifactsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .datacatalog.Artifact artifacts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->artifacts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->artifacts(static_cast<int>(i)),
      output);
  }

  // string next_token = 2;
  if (this->next_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_token().data(), static_cast<int>(this->next_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.ListArtifactsResponse.next_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.ListArtifactsResponse)
}

::google::protobuf::uint8* ListArtifactsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.ListArtifactsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .datacatalog.Artifact artifacts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->artifacts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->artifacts(static_cast<int>(i)), target);
  }

  // string next_token = 2;
  if (this->next_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_token().data(), static_cast<int>(this->next_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.ListArtifactsResponse.next_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.ListArtifactsResponse)
  return target;
}

size_t ListArtifactsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.ListArtifactsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .datacatalog.Artifact artifacts = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->artifacts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->artifacts(static_cast<int>(i)));
    }
  }

  // string next_token = 2;
  if (this->next_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListArtifactsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.ListArtifactsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListArtifactsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ListArtifactsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.ListArtifactsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.ListArtifactsResponse)
    MergeFrom(*source);
  }
}

void ListArtifactsResponse::MergeFrom(const ListArtifactsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.ListArtifactsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  artifacts_.MergeFrom(from.artifacts_);
  if (from.next_token().size() > 0) {

    next_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_token_);
  }
}

void ListArtifactsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.ListArtifactsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListArtifactsResponse::CopyFrom(const ListArtifactsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.ListArtifactsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListArtifactsResponse::IsInitialized() const {
  return true;
}

void ListArtifactsResponse::Swap(ListArtifactsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListArtifactsResponse::InternalSwap(ListArtifactsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&artifacts_)->InternalSwap(CastToBase(&other->artifacts_));
  next_token_.Swap(&other->next_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ListArtifactsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListDatasetsRequest::InitAsDefaultInstance() {
  ::datacatalog::_ListDatasetsRequest_default_instance_._instance.get_mutable()->filter_ = const_cast< ::datacatalog::FilterExpression*>(
      ::datacatalog::FilterExpression::internal_default_instance());
  ::datacatalog::_ListDatasetsRequest_default_instance_._instance.get_mutable()->pagination_ = const_cast< ::datacatalog::PaginationOptions*>(
      ::datacatalog::PaginationOptions::internal_default_instance());
}
class ListDatasetsRequest::HasBitSetters {
 public:
  static const ::datacatalog::FilterExpression& filter(const ListDatasetsRequest* msg);
  static const ::datacatalog::PaginationOptions& pagination(const ListDatasetsRequest* msg);
};

const ::datacatalog::FilterExpression&
ListDatasetsRequest::HasBitSetters::filter(const ListDatasetsRequest* msg) {
  return *msg->filter_;
}
const ::datacatalog::PaginationOptions&
ListDatasetsRequest::HasBitSetters::pagination(const ListDatasetsRequest* msg) {
  return *msg->pagination_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListDatasetsRequest::kFilterFieldNumber;
const int ListDatasetsRequest::kPaginationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListDatasetsRequest::ListDatasetsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.ListDatasetsRequest)
}
ListDatasetsRequest::ListDatasetsRequest(const ListDatasetsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_filter()) {
    filter_ = new ::datacatalog::FilterExpression(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  if (from.has_pagination()) {
    pagination_ = new ::datacatalog::PaginationOptions(*from.pagination_);
  } else {
    pagination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.ListDatasetsRequest)
}

void ListDatasetsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListDatasetsRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::memset(&filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pagination_) -
      reinterpret_cast<char*>(&filter_)) + sizeof(pagination_));
}

ListDatasetsRequest::~ListDatasetsRequest() {
  // @@protoc_insertion_point(destructor:datacatalog.ListDatasetsRequest)
  SharedDtor();
}

void ListDatasetsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete filter_;
  if (this != internal_default_instance()) delete pagination_;
}

void ListDatasetsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListDatasetsRequest& ListDatasetsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListDatasetsRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void ListDatasetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.ListDatasetsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pagination_ != nullptr) {
    delete pagination_;
  }
  pagination_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListDatasetsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListDatasetsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .datacatalog.FilterExpression filter = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::FilterExpression::_InternalParse;
        object = msg->mutable_filter();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .datacatalog.PaginationOptions pagination = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::PaginationOptions::_InternalParse;
        object = msg->mutable_pagination();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListDatasetsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.ListDatasetsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .datacatalog.FilterExpression filter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .datacatalog.PaginationOptions pagination = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pagination()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.ListDatasetsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.ListDatasetsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListDatasetsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.ListDatasetsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.FilterExpression filter = 1;
  if (this->has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::filter(this), output);
  }

  // .datacatalog.PaginationOptions pagination = 2;
  if (this->has_pagination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pagination(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.ListDatasetsRequest)
}

::google::protobuf::uint8* ListDatasetsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.ListDatasetsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.FilterExpression filter = 1;
  if (this->has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::filter(this), target);
  }

  // .datacatalog.PaginationOptions pagination = 2;
  if (this->has_pagination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pagination(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.ListDatasetsRequest)
  return target;
}

size_t ListDatasetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.ListDatasetsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .datacatalog.FilterExpression filter = 1;
  if (this->has_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  // .datacatalog.PaginationOptions pagination = 2;
  if (this->has_pagination()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pagination_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListDatasetsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.ListDatasetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDatasetsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ListDatasetsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.ListDatasetsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.ListDatasetsRequest)
    MergeFrom(*source);
  }
}

void ListDatasetsRequest::MergeFrom(const ListDatasetsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.ListDatasetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_filter()) {
    mutable_filter()->::datacatalog::FilterExpression::MergeFrom(from.filter());
  }
  if (from.has_pagination()) {
    mutable_pagination()->::datacatalog::PaginationOptions::MergeFrom(from.pagination());
  }
}

void ListDatasetsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.ListDatasetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDatasetsRequest::CopyFrom(const ListDatasetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.ListDatasetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDatasetsRequest::IsInitialized() const {
  return true;
}

void ListDatasetsRequest::Swap(ListDatasetsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListDatasetsRequest::InternalSwap(ListDatasetsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(filter_, other->filter_);
  swap(pagination_, other->pagination_);
}

::google::protobuf::Metadata ListDatasetsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListDatasetsResponse::InitAsDefaultInstance() {
}
class ListDatasetsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListDatasetsResponse::kDatasetsFieldNumber;
const int ListDatasetsResponse::kNextTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListDatasetsResponse::ListDatasetsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.ListDatasetsResponse)
}
ListDatasetsResponse::ListDatasetsResponse(const ListDatasetsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      datasets_(from.datasets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_token().size() > 0) {
    next_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_token_);
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.ListDatasetsResponse)
}

void ListDatasetsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListDatasetsResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  next_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ListDatasetsResponse::~ListDatasetsResponse() {
  // @@protoc_insertion_point(destructor:datacatalog.ListDatasetsResponse)
  SharedDtor();
}

void ListDatasetsResponse::SharedDtor() {
  next_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListDatasetsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListDatasetsResponse& ListDatasetsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListDatasetsResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void ListDatasetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.ListDatasetsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datasets_.Clear();
  next_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListDatasetsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListDatasetsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .datacatalog.Dataset datasets = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::datacatalog::Dataset::_InternalParse;
          object = msg->add_datasets();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string next_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.ListDatasetsResponse.next_token");
        object = msg->mutable_next_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListDatasetsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.ListDatasetsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .datacatalog.Dataset datasets = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_datasets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_token().data(), static_cast<int>(this->next_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.ListDatasetsResponse.next_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.ListDatasetsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.ListDatasetsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListDatasetsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.ListDatasetsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .datacatalog.Dataset datasets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->datasets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->datasets(static_cast<int>(i)),
      output);
  }

  // string next_token = 2;
  if (this->next_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_token().data(), static_cast<int>(this->next_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.ListDatasetsResponse.next_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.ListDatasetsResponse)
}

::google::protobuf::uint8* ListDatasetsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.ListDatasetsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .datacatalog.Dataset datasets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->datasets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->datasets(static_cast<int>(i)), target);
  }

  // string next_token = 2;
  if (this->next_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_token().data(), static_cast<int>(this->next_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.ListDatasetsResponse.next_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.ListDatasetsResponse)
  return target;
}

size_t ListDatasetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.ListDatasetsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .datacatalog.Dataset datasets = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->datasets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->datasets(static_cast<int>(i)));
    }
  }

  // string next_token = 2;
  if (this->next_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListDatasetsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.ListDatasetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDatasetsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ListDatasetsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.ListDatasetsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.ListDatasetsResponse)
    MergeFrom(*source);
  }
}

void ListDatasetsResponse::MergeFrom(const ListDatasetsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.ListDatasetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datasets_.MergeFrom(from.datasets_);
  if (from.next_token().size() > 0) {

    next_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_token_);
  }
}

void ListDatasetsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.ListDatasetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDatasetsResponse::CopyFrom(const ListDatasetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.ListDatasetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDatasetsResponse::IsInitialized() const {
  return true;
}

void ListDatasetsResponse::Swap(ListDatasetsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListDatasetsResponse::InternalSwap(ListDatasetsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&datasets_)->InternalSwap(CastToBase(&other->datasets_));
  next_token_.Swap(&other->next_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ListDatasetsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateArtifactRequest::InitAsDefaultInstance() {
  ::datacatalog::_UpdateArtifactRequest_default_instance_._instance.get_mutable()->dataset_ = const_cast< ::datacatalog::DatasetID*>(
      ::datacatalog::DatasetID::internal_default_instance());
  ::datacatalog::_UpdateArtifactRequest_default_instance_.artifact_id_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::datacatalog::_UpdateArtifactRequest_default_instance_.tag_name_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
class UpdateArtifactRequest::HasBitSetters {
 public:
  static const ::datacatalog::DatasetID& dataset(const UpdateArtifactRequest* msg);
};

const ::datacatalog::DatasetID&
UpdateArtifactRequest::HasBitSetters::dataset(const UpdateArtifactRequest* msg) {
  return *msg->dataset_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateArtifactRequest::kDatasetFieldNumber;
const int UpdateArtifactRequest::kArtifactIdFieldNumber;
const int UpdateArtifactRequest::kTagNameFieldNumber;
const int UpdateArtifactRequest::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateArtifactRequest::UpdateArtifactRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.UpdateArtifactRequest)
}
UpdateArtifactRequest::UpdateArtifactRequest(const UpdateArtifactRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dataset()) {
    dataset_ = new ::datacatalog::DatasetID(*from.dataset_);
  } else {
    dataset_ = nullptr;
  }
  clear_has_query_handle();
  switch (from.query_handle_case()) {
    case kArtifactId: {
      set_artifact_id(from.artifact_id());
      break;
    }
    case kTagName: {
      set_tag_name(from.tag_name());
      break;
    }
    case QUERY_HANDLE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.UpdateArtifactRequest)
}

void UpdateArtifactRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateArtifactRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  dataset_ = nullptr;
  clear_has_query_handle();
}

UpdateArtifactRequest::~UpdateArtifactRequest() {
  // @@protoc_insertion_point(destructor:datacatalog.UpdateArtifactRequest)
  SharedDtor();
}

void UpdateArtifactRequest::SharedDtor() {
  if (this != internal_default_instance()) delete dataset_;
  if (has_query_handle()) {
    clear_query_handle();
  }
}

void UpdateArtifactRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateArtifactRequest& UpdateArtifactRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateArtifactRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void UpdateArtifactRequest::clear_query_handle() {
// @@protoc_insertion_point(one_of_clear_start:datacatalog.UpdateArtifactRequest)
  switch (query_handle_case()) {
    case kArtifactId: {
      query_handle_.artifact_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kTagName: {
      query_handle_.tag_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case QUERY_HANDLE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = QUERY_HANDLE_NOT_SET;
}


void UpdateArtifactRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.UpdateArtifactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  if (GetArenaNoVirtual() == nullptr && dataset_ != nullptr) {
    delete dataset_;
  }
  dataset_ = nullptr;
  clear_query_handle();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateArtifactRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateArtifactRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .datacatalog.DatasetID dataset = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::DatasetID::_InternalParse;
        object = msg->mutable_dataset();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string artifact_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.UpdateArtifactRequest.artifact_id");
        object = msg->mutable_artifact_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string tag_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.UpdateArtifactRequest.tag_name");
        object = msg->mutable_tag_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .datacatalog.ArtifactData data = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::datacatalog::ArtifactData::_InternalParse;
          object = msg->add_data();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateArtifactRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.UpdateArtifactRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .datacatalog.DatasetID dataset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dataset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string artifact_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artifact_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->artifact_id().data(), static_cast<int>(this->artifact_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.UpdateArtifactRequest.artifact_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tag_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tag_name().data(), static_cast<int>(this->tag_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.UpdateArtifactRequest.tag_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .datacatalog.ArtifactData data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.UpdateArtifactRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.UpdateArtifactRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateArtifactRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.UpdateArtifactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.DatasetID dataset = 1;
  if (this->has_dataset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::dataset(this), output);
  }

  // string artifact_id = 2;
  if (has_artifact_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artifact_id().data(), static_cast<int>(this->artifact_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.UpdateArtifactRequest.artifact_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->artifact_id(), output);
  }

  // string tag_name = 3;
  if (has_tag_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag_name().data(), static_cast<int>(this->tag_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.UpdateArtifactRequest.tag_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tag_name(), output);
  }

  // repeated .datacatalog.ArtifactData data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->data(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.UpdateArtifactRequest)
}

::google::protobuf::uint8* UpdateArtifactRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.UpdateArtifactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.DatasetID dataset = 1;
  if (this->has_dataset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::dataset(this), target);
  }

  // string artifact_id = 2;
  if (has_artifact_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artifact_id().data(), static_cast<int>(this->artifact_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.UpdateArtifactRequest.artifact_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->artifact_id(), target);
  }

  // string tag_name = 3;
  if (has_tag_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag_name().data(), static_cast<int>(this->tag_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.UpdateArtifactRequest.tag_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tag_name(), target);
  }

  // repeated .datacatalog.ArtifactData data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->data(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.UpdateArtifactRequest)
  return target;
}

size_t UpdateArtifactRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.UpdateArtifactRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .datacatalog.ArtifactData data = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  // .datacatalog.DatasetID dataset = 1;
  if (this->has_dataset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dataset_);
  }

  switch (query_handle_case()) {
    // string artifact_id = 2;
    case kArtifactId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->artifact_id());
      break;
    }
    // string tag_name = 3;
    case kTagName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag_name());
      break;
    }
    case QUERY_HANDLE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateArtifactRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.UpdateArtifactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateArtifactRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateArtifactRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.UpdateArtifactRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.UpdateArtifactRequest)
    MergeFrom(*source);
  }
}

void UpdateArtifactRequest::MergeFrom(const UpdateArtifactRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.UpdateArtifactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.has_dataset()) {
    mutable_dataset()->::datacatalog::DatasetID::MergeFrom(from.dataset());
  }
  switch (from.query_handle_case()) {
    case kArtifactId: {
      set_artifact_id(from.artifact_id());
      break;
    }
    case kTagName: {
      set_tag_name(from.tag_name());
      break;
    }
    case QUERY_HANDLE_NOT_SET: {
      break;
    }
  }
}

void UpdateArtifactRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.UpdateArtifactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateArtifactRequest::CopyFrom(const UpdateArtifactRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.UpdateArtifactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateArtifactRequest::IsInitialized() const {
  return true;
}

void UpdateArtifactRequest::Swap(UpdateArtifactRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateArtifactRequest::InternalSwap(UpdateArtifactRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&data_)->InternalSwap(CastToBase(&other->data_));
  swap(dataset_, other->dataset_);
  swap(query_handle_, other->query_handle_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata UpdateArtifactRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateArtifactResponse::InitAsDefaultInstance() {
}
class UpdateArtifactResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateArtifactResponse::kArtifactIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateArtifactResponse::UpdateArtifactResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.UpdateArtifactResponse)
}
UpdateArtifactResponse::UpdateArtifactResponse(const UpdateArtifactResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  artifact_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.artifact_id().size() > 0) {
    artifact_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artifact_id_);
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.UpdateArtifactResponse)
}

void UpdateArtifactResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateArtifactResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  artifact_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UpdateArtifactResponse::~UpdateArtifactResponse() {
  // @@protoc_insertion_point(destructor:datacatalog.UpdateArtifactResponse)
  SharedDtor();
}

void UpdateArtifactResponse::SharedDtor() {
  artifact_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpdateArtifactResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateArtifactResponse& UpdateArtifactResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateArtifactResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void UpdateArtifactResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.UpdateArtifactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  artifact_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateArtifactResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateArtifactResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string artifact_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.UpdateArtifactResponse.artifact_id");
        object = msg->mutable_artifact_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateArtifactResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.UpdateArtifactResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string artifact_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artifact_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->artifact_id().data(), static_cast<int>(this->artifact_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.UpdateArtifactResponse.artifact_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.UpdateArtifactResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.UpdateArtifactResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateArtifactResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.UpdateArtifactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string artifact_id = 1;
  if (this->artifact_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artifact_id().data(), static_cast<int>(this->artifact_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.UpdateArtifactResponse.artifact_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->artifact_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.UpdateArtifactResponse)
}

::google::protobuf::uint8* UpdateArtifactResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.UpdateArtifactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string artifact_id = 1;
  if (this->artifact_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artifact_id().data(), static_cast<int>(this->artifact_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.UpdateArtifactResponse.artifact_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->artifact_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.UpdateArtifactResponse)
  return target;
}

size_t UpdateArtifactResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.UpdateArtifactResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string artifact_id = 1;
  if (this->artifact_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->artifact_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateArtifactResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.UpdateArtifactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateArtifactResponse* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateArtifactResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.UpdateArtifactResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.UpdateArtifactResponse)
    MergeFrom(*source);
  }
}

void UpdateArtifactResponse::MergeFrom(const UpdateArtifactResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.UpdateArtifactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.artifact_id().size() > 0) {

    artifact_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artifact_id_);
  }
}

void UpdateArtifactResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.UpdateArtifactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateArtifactResponse::CopyFrom(const UpdateArtifactResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.UpdateArtifactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateArtifactResponse::IsInitialized() const {
  return true;
}

void UpdateArtifactResponse::Swap(UpdateArtifactResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateArtifactResponse::InternalSwap(UpdateArtifactResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  artifact_id_.Swap(&other->artifact_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata UpdateArtifactResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ReservationID::InitAsDefaultInstance() {
  ::datacatalog::_ReservationID_default_instance_._instance.get_mutable()->dataset_id_ = const_cast< ::datacatalog::DatasetID*>(
      ::datacatalog::DatasetID::internal_default_instance());
}
class ReservationID::HasBitSetters {
 public:
  static const ::datacatalog::DatasetID& dataset_id(const ReservationID* msg);
};

const ::datacatalog::DatasetID&
ReservationID::HasBitSetters::dataset_id(const ReservationID* msg) {
  return *msg->dataset_id_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReservationID::kDatasetIdFieldNumber;
const int ReservationID::kTagNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReservationID::ReservationID()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.ReservationID)
}
ReservationID::ReservationID(const ReservationID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tag_name().size() > 0) {
    tag_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_name_);
  }
  if (from.has_dataset_id()) {
    dataset_id_ = new ::datacatalog::DatasetID(*from.dataset_id_);
  } else {
    dataset_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.ReservationID)
}

void ReservationID::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ReservationID_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  tag_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_id_ = nullptr;
}

ReservationID::~ReservationID() {
  // @@protoc_insertion_point(destructor:datacatalog.ReservationID)
  SharedDtor();
}

void ReservationID::SharedDtor() {
  tag_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dataset_id_;
}

void ReservationID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReservationID& ReservationID::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReservationID_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void ReservationID::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.ReservationID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && dataset_id_ != nullptr) {
    delete dataset_id_;
  }
  dataset_id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReservationID::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReservationID*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .datacatalog.DatasetID dataset_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::DatasetID::_InternalParse;
        object = msg->mutable_dataset_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string tag_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.ReservationID.tag_name");
        object = msg->mutable_tag_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReservationID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.ReservationID)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .datacatalog.DatasetID dataset_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dataset_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tag_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tag_name().data(), static_cast<int>(this->tag_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.ReservationID.tag_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.ReservationID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.ReservationID)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReservationID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.ReservationID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.DatasetID dataset_id = 1;
  if (this->has_dataset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::dataset_id(this), output);
  }

  // string tag_name = 2;
  if (this->tag_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag_name().data(), static_cast<int>(this->tag_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.ReservationID.tag_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tag_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.ReservationID)
}

::google::protobuf::uint8* ReservationID::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.ReservationID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.DatasetID dataset_id = 1;
  if (this->has_dataset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::dataset_id(this), target);
  }

  // string tag_name = 2;
  if (this->tag_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag_name().data(), static_cast<int>(this->tag_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.ReservationID.tag_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tag_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.ReservationID)
  return target;
}

size_t ReservationID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.ReservationID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag_name = 2;
  if (this->tag_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tag_name());
  }

  // .datacatalog.DatasetID dataset_id = 1;
  if (this->has_dataset_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dataset_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReservationID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.ReservationID)
  GOOGLE_DCHECK_NE(&from, this);
  const ReservationID* source =
      ::google::protobuf::DynamicCastToGenerated<ReservationID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.ReservationID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.ReservationID)
    MergeFrom(*source);
  }
}

void ReservationID::MergeFrom(const ReservationID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.ReservationID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tag_name().size() > 0) {

    tag_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_name_);
  }
  if (from.has_dataset_id()) {
    mutable_dataset_id()->::datacatalog::DatasetID::MergeFrom(from.dataset_id());
  }
}

void ReservationID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.ReservationID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReservationID::CopyFrom(const ReservationID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.ReservationID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReservationID::IsInitialized() const {
  return true;
}

void ReservationID::Swap(ReservationID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReservationID::InternalSwap(ReservationID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tag_name_.Swap(&other->tag_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dataset_id_, other->dataset_id_);
}

::google::protobuf::Metadata ReservationID::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetOrExtendReservationRequest::InitAsDefaultInstance() {
  ::datacatalog::_GetOrExtendReservationRequest_default_instance_._instance.get_mutable()->reservation_id_ = const_cast< ::datacatalog::ReservationID*>(
      ::datacatalog::ReservationID::internal_default_instance());
  ::datacatalog::_GetOrExtendReservationRequest_default_instance_._instance.get_mutable()->heartbeat_interval_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
class GetOrExtendReservationRequest::HasBitSetters {
 public:
  static const ::datacatalog::ReservationID& reservation_id(const GetOrExtendReservationRequest* msg);
  static const ::google::protobuf::Duration& heartbeat_interval(const GetOrExtendReservationRequest* msg);
};

const ::datacatalog::ReservationID&
GetOrExtendReservationRequest::HasBitSetters::reservation_id(const GetOrExtendReservationRequest* msg) {
  return *msg->reservation_id_;
}
const ::google::protobuf::Duration&
GetOrExtendReservationRequest::HasBitSetters::heartbeat_interval(const GetOrExtendReservationRequest* msg) {
  return *msg->heartbeat_interval_;
}
void GetOrExtendReservationRequest::clear_heartbeat_interval() {
  if (GetArenaNoVirtual() == nullptr && heartbeat_interval_ != nullptr) {
    delete heartbeat_interval_;
  }
  heartbeat_interval_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetOrExtendReservationRequest::kReservationIdFieldNumber;
const int GetOrExtendReservationRequest::kOwnerIdFieldNumber;
const int GetOrExtendReservationRequest::kHeartbeatIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetOrExtendReservationRequest::GetOrExtendReservationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.GetOrExtendReservationRequest)
}
GetOrExtendReservationRequest::GetOrExtendReservationRequest(const GetOrExtendReservationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.owner_id().size() > 0) {
    owner_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_id_);
  }
  if (from.has_reservation_id()) {
    reservation_id_ = new ::datacatalog::ReservationID(*from.reservation_id_);
  } else {
    reservation_id_ = nullptr;
  }
  if (from.has_heartbeat_interval()) {
    heartbeat_interval_ = new ::google::protobuf::Duration(*from.heartbeat_interval_);
  } else {
    heartbeat_interval_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.GetOrExtendReservationRequest)
}

void GetOrExtendReservationRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetOrExtendReservationRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  owner_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&reservation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heartbeat_interval_) -
      reinterpret_cast<char*>(&reservation_id_)) + sizeof(heartbeat_interval_));
}

GetOrExtendReservationRequest::~GetOrExtendReservationRequest() {
  // @@protoc_insertion_point(destructor:datacatalog.GetOrExtendReservationRequest)
  SharedDtor();
}

void GetOrExtendReservationRequest::SharedDtor() {
  owner_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reservation_id_;
  if (this != internal_default_instance()) delete heartbeat_interval_;
}

void GetOrExtendReservationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOrExtendReservationRequest& GetOrExtendReservationRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetOrExtendReservationRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void GetOrExtendReservationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.GetOrExtendReservationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && reservation_id_ != nullptr) {
    delete reservation_id_;
  }
  reservation_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && heartbeat_interval_ != nullptr) {
    delete heartbeat_interval_;
  }
  heartbeat_interval_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetOrExtendReservationRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetOrExtendReservationRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .datacatalog.ReservationID reservation_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::ReservationID::_InternalParse;
        object = msg->mutable_reservation_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string owner_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.GetOrExtendReservationRequest.owner_id");
        object = msg->mutable_owner_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Duration heartbeat_interval = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Duration::_InternalParse;
        object = msg->mutable_heartbeat_interval();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetOrExtendReservationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.GetOrExtendReservationRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .datacatalog.ReservationID reservation_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reservation_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string owner_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->owner_id().data(), static_cast<int>(this->owner_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.GetOrExtendReservationRequest.owner_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration heartbeat_interval = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_heartbeat_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.GetOrExtendReservationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.GetOrExtendReservationRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetOrExtendReservationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.GetOrExtendReservationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.ReservationID reservation_id = 1;
  if (this->has_reservation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::reservation_id(this), output);
  }

  // string owner_id = 2;
  if (this->owner_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_id().data(), static_cast<int>(this->owner_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.GetOrExtendReservationRequest.owner_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->owner_id(), output);
  }

  // .google.protobuf.Duration heartbeat_interval = 3;
  if (this->has_heartbeat_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::heartbeat_interval(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.GetOrExtendReservationRequest)
}

::google::protobuf::uint8* GetOrExtendReservationRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.GetOrExtendReservationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.ReservationID reservation_id = 1;
  if (this->has_reservation_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::reservation_id(this), target);
  }

  // string owner_id = 2;
  if (this->owner_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_id().data(), static_cast<int>(this->owner_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.GetOrExtendReservationRequest.owner_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->owner_id(), target);
  }

  // .google.protobuf.Duration heartbeat_interval = 3;
  if (this->has_heartbeat_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::heartbeat_interval(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.GetOrExtendReservationRequest)
  return target;
}

size_t GetOrExtendReservationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.GetOrExtendReservationRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner_id = 2;
  if (this->owner_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->owner_id());
  }

  // .datacatalog.ReservationID reservation_id = 1;
  if (this->has_reservation_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reservation_id_);
  }

  // .google.protobuf.Duration heartbeat_interval = 3;
  if (this->has_heartbeat_interval()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *heartbeat_interval_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOrExtendReservationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.GetOrExtendReservationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOrExtendReservationRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetOrExtendReservationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.GetOrExtendReservationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.GetOrExtendReservationRequest)
    MergeFrom(*source);
  }
}

void GetOrExtendReservationRequest::MergeFrom(const GetOrExtendReservationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.GetOrExtendReservationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_id().size() > 0) {

    owner_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_id_);
  }
  if (from.has_reservation_id()) {
    mutable_reservation_id()->::datacatalog::ReservationID::MergeFrom(from.reservation_id());
  }
  if (from.has_heartbeat_interval()) {
    mutable_heartbeat_interval()->::google::protobuf::Duration::MergeFrom(from.heartbeat_interval());
  }
}

void GetOrExtendReservationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.GetOrExtendReservationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOrExtendReservationRequest::CopyFrom(const GetOrExtendReservationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.GetOrExtendReservationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOrExtendReservationRequest::IsInitialized() const {
  return true;
}

void GetOrExtendReservationRequest::Swap(GetOrExtendReservationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetOrExtendReservationRequest::InternalSwap(GetOrExtendReservationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  owner_id_.Swap(&other->owner_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reservation_id_, other->reservation_id_);
  swap(heartbeat_interval_, other->heartbeat_interval_);
}

::google::protobuf::Metadata GetOrExtendReservationRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Reservation::InitAsDefaultInstance() {
  ::datacatalog::_Reservation_default_instance_._instance.get_mutable()->reservation_id_ = const_cast< ::datacatalog::ReservationID*>(
      ::datacatalog::ReservationID::internal_default_instance());
  ::datacatalog::_Reservation_default_instance_._instance.get_mutable()->heartbeat_interval_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::datacatalog::_Reservation_default_instance_._instance.get_mutable()->expires_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::datacatalog::_Reservation_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::datacatalog::Metadata*>(
      ::datacatalog::Metadata::internal_default_instance());
}
class Reservation::HasBitSetters {
 public:
  static const ::datacatalog::ReservationID& reservation_id(const Reservation* msg);
  static const ::google::protobuf::Duration& heartbeat_interval(const Reservation* msg);
  static const ::google::protobuf::Timestamp& expires_at(const Reservation* msg);
  static const ::datacatalog::Metadata& metadata(const Reservation* msg);
};

const ::datacatalog::ReservationID&
Reservation::HasBitSetters::reservation_id(const Reservation* msg) {
  return *msg->reservation_id_;
}
const ::google::protobuf::Duration&
Reservation::HasBitSetters::heartbeat_interval(const Reservation* msg) {
  return *msg->heartbeat_interval_;
}
const ::google::protobuf::Timestamp&
Reservation::HasBitSetters::expires_at(const Reservation* msg) {
  return *msg->expires_at_;
}
const ::datacatalog::Metadata&
Reservation::HasBitSetters::metadata(const Reservation* msg) {
  return *msg->metadata_;
}
void Reservation::clear_heartbeat_interval() {
  if (GetArenaNoVirtual() == nullptr && heartbeat_interval_ != nullptr) {
    delete heartbeat_interval_;
  }
  heartbeat_interval_ = nullptr;
}
void Reservation::clear_expires_at() {
  if (GetArenaNoVirtual() == nullptr && expires_at_ != nullptr) {
    delete expires_at_;
  }
  expires_at_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reservation::kReservationIdFieldNumber;
const int Reservation::kOwnerIdFieldNumber;
const int Reservation::kHeartbeatIntervalFieldNumber;
const int Reservation::kExpiresAtFieldNumber;
const int Reservation::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reservation::Reservation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.Reservation)
}
Reservation::Reservation(const Reservation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.owner_id().size() > 0) {
    owner_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_id_);
  }
  if (from.has_reservation_id()) {
    reservation_id_ = new ::datacatalog::ReservationID(*from.reservation_id_);
  } else {
    reservation_id_ = nullptr;
  }
  if (from.has_heartbeat_interval()) {
    heartbeat_interval_ = new ::google::protobuf::Duration(*from.heartbeat_interval_);
  } else {
    heartbeat_interval_ = nullptr;
  }
  if (from.has_expires_at()) {
    expires_at_ = new ::google::protobuf::Timestamp(*from.expires_at_);
  } else {
    expires_at_ = nullptr;
  }
  if (from.has_metadata()) {
    metadata_ = new ::datacatalog::Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.Reservation)
}

void Reservation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Reservation_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  owner_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&reservation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metadata_) -
      reinterpret_cast<char*>(&reservation_id_)) + sizeof(metadata_));
}

Reservation::~Reservation() {
  // @@protoc_insertion_point(destructor:datacatalog.Reservation)
  SharedDtor();
}

void Reservation::SharedDtor() {
  owner_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reservation_id_;
  if (this != internal_default_instance()) delete heartbeat_interval_;
  if (this != internal_default_instance()) delete expires_at_;
  if (this != internal_default_instance()) delete metadata_;
}

void Reservation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Reservation& Reservation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Reservation_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void Reservation::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.Reservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && reservation_id_ != nullptr) {
    delete reservation_id_;
  }
  reservation_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && heartbeat_interval_ != nullptr) {
    delete heartbeat_interval_;
  }
  heartbeat_interval_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && expires_at_ != nullptr) {
    delete expires_at_;
  }
  expires_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Reservation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Reservation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .datacatalog.ReservationID reservation_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::ReservationID::_InternalParse;
        object = msg->mutable_reservation_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string owner_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.Reservation.owner_id");
        object = msg->mutable_owner_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Duration heartbeat_interval = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Duration::_InternalParse;
        object = msg->mutable_heartbeat_interval();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp expires_at = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_expires_at();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .datacatalog.Metadata metadata = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::Metadata::_InternalParse;
        object = msg->mutable_metadata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Reservation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.Reservation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .datacatalog.ReservationID reservation_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reservation_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string owner_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->owner_id().data(), static_cast<int>(this->owner_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.Reservation.owner_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration heartbeat_interval = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_heartbeat_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp expires_at = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_expires_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .datacatalog.Metadata metadata = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.Reservation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.Reservation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Reservation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.Reservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.ReservationID reservation_id = 1;
  if (this->has_reservation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::reservation_id(this), output);
  }

  // string owner_id = 2;
  if (this->owner_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_id().data(), static_cast<int>(this->owner_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.Reservation.owner_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->owner_id(), output);
  }

  // .google.protobuf.Duration heartbeat_interval = 3;
  if (this->has_heartbeat_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::heartbeat_interval(this), output);
  }

  // .google.protobuf.Timestamp expires_at = 4;
  if (this->has_expires_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::expires_at(this), output);
  }

  // .datacatalog.Metadata metadata = 6;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::metadata(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.Reservation)
}

::google::protobuf::uint8* Reservation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.Reservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.ReservationID reservation_id = 1;
  if (this->has_reservation_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::reservation_id(this), target);
  }

  // string owner_id = 2;
  if (this->owner_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_id().data(), static_cast<int>(this->owner_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.Reservation.owner_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->owner_id(), target);
  }

  // .google.protobuf.Duration heartbeat_interval = 3;
  if (this->has_heartbeat_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::heartbeat_interval(this), target);
  }

  // .google.protobuf.Timestamp expires_at = 4;
  if (this->has_expires_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::expires_at(this), target);
  }

  // .datacatalog.Metadata metadata = 6;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::metadata(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.Reservation)
  return target;
}

size_t Reservation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.Reservation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner_id = 2;
  if (this->owner_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->owner_id());
  }

  // .datacatalog.ReservationID reservation_id = 1;
  if (this->has_reservation_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reservation_id_);
  }

  // .google.protobuf.Duration heartbeat_interval = 3;
  if (this->has_heartbeat_interval()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *heartbeat_interval_);
  }

  // .google.protobuf.Timestamp expires_at = 4;
  if (this->has_expires_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *expires_at_);
  }

  // .datacatalog.Metadata metadata = 6;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Reservation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.Reservation)
  GOOGLE_DCHECK_NE(&from, this);
  const Reservation* source =
      ::google::protobuf::DynamicCastToGenerated<Reservation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.Reservation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.Reservation)
    MergeFrom(*source);
  }
}

void Reservation::MergeFrom(const Reservation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.Reservation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_id().size() > 0) {

    owner_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_id_);
  }
  if (from.has_reservation_id()) {
    mutable_reservation_id()->::datacatalog::ReservationID::MergeFrom(from.reservation_id());
  }
  if (from.has_heartbeat_interval()) {
    mutable_heartbeat_interval()->::google::protobuf::Duration::MergeFrom(from.heartbeat_interval());
  }
  if (from.has_expires_at()) {
    mutable_expires_at()->::google::protobuf::Timestamp::MergeFrom(from.expires_at());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::datacatalog::Metadata::MergeFrom(from.metadata());
  }
}

void Reservation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.Reservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reservation::CopyFrom(const Reservation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.Reservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reservation::IsInitialized() const {
  return true;
}

void Reservation::Swap(Reservation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Reservation::InternalSwap(Reservation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  owner_id_.Swap(&other->owner_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reservation_id_, other->reservation_id_);
  swap(heartbeat_interval_, other->heartbeat_interval_);
  swap(expires_at_, other->expires_at_);
  swap(metadata_, other->metadata_);
}

::google::protobuf::Metadata Reservation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetOrExtendReservationResponse::InitAsDefaultInstance() {
  ::datacatalog::_GetOrExtendReservationResponse_default_instance_._instance.get_mutable()->reservation_ = const_cast< ::datacatalog::Reservation*>(
      ::datacatalog::Reservation::internal_default_instance());
}
class GetOrExtendReservationResponse::HasBitSetters {
 public:
  static const ::datacatalog::Reservation& reservation(const GetOrExtendReservationResponse* msg);
};

const ::datacatalog::Reservation&
GetOrExtendReservationResponse::HasBitSetters::reservation(const GetOrExtendReservationResponse* msg) {
  return *msg->reservation_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetOrExtendReservationResponse::kReservationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetOrExtendReservationResponse::GetOrExtendReservationResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.GetOrExtendReservationResponse)
}
GetOrExtendReservationResponse::GetOrExtendReservationResponse(const GetOrExtendReservationResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_reservation()) {
    reservation_ = new ::datacatalog::Reservation(*from.reservation_);
  } else {
    reservation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.GetOrExtendReservationResponse)
}

void GetOrExtendReservationResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetOrExtendReservationResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  reservation_ = nullptr;
}

GetOrExtendReservationResponse::~GetOrExtendReservationResponse() {
  // @@protoc_insertion_point(destructor:datacatalog.GetOrExtendReservationResponse)
  SharedDtor();
}

void GetOrExtendReservationResponse::SharedDtor() {
  if (this != internal_default_instance()) delete reservation_;
}

void GetOrExtendReservationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOrExtendReservationResponse& GetOrExtendReservationResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetOrExtendReservationResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void GetOrExtendReservationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.GetOrExtendReservationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && reservation_ != nullptr) {
    delete reservation_;
  }
  reservation_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetOrExtendReservationResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetOrExtendReservationResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .datacatalog.Reservation reservation = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::Reservation::_InternalParse;
        object = msg->mutable_reservation();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetOrExtendReservationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.GetOrExtendReservationResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .datacatalog.Reservation reservation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reservation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.GetOrExtendReservationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.GetOrExtendReservationResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetOrExtendReservationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.GetOrExtendReservationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.Reservation reservation = 1;
  if (this->has_reservation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::reservation(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.GetOrExtendReservationResponse)
}

::google::protobuf::uint8* GetOrExtendReservationResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.GetOrExtendReservationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.Reservation reservation = 1;
  if (this->has_reservation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::reservation(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.GetOrExtendReservationResponse)
  return target;
}

size_t GetOrExtendReservationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.GetOrExtendReservationResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .datacatalog.Reservation reservation = 1;
  if (this->has_reservation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reservation_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOrExtendReservationResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.GetOrExtendReservationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOrExtendReservationResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetOrExtendReservationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.GetOrExtendReservationResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.GetOrExtendReservationResponse)
    MergeFrom(*source);
  }
}

void GetOrExtendReservationResponse::MergeFrom(const GetOrExtendReservationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.GetOrExtendReservationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_reservation()) {
    mutable_reservation()->::datacatalog::Reservation::MergeFrom(from.reservation());
  }
}

void GetOrExtendReservationResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.GetOrExtendReservationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOrExtendReservationResponse::CopyFrom(const GetOrExtendReservationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.GetOrExtendReservationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOrExtendReservationResponse::IsInitialized() const {
  return true;
}

void GetOrExtendReservationResponse::Swap(GetOrExtendReservationResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetOrExtendReservationResponse::InternalSwap(GetOrExtendReservationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(reservation_, other->reservation_);
}

::google::protobuf::Metadata GetOrExtendReservationResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ReleaseReservationRequest::InitAsDefaultInstance() {
  ::datacatalog::_ReleaseReservationRequest_default_instance_._instance.get_mutable()->reservation_id_ = const_cast< ::datacatalog::ReservationID*>(
      ::datacatalog::ReservationID::internal_default_instance());
}
class ReleaseReservationRequest::HasBitSetters {
 public:
  static const ::datacatalog::ReservationID& reservation_id(const ReleaseReservationRequest* msg);
};

const ::datacatalog::ReservationID&
ReleaseReservationRequest::HasBitSetters::reservation_id(const ReleaseReservationRequest* msg) {
  return *msg->reservation_id_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReleaseReservationRequest::kReservationIdFieldNumber;
const int ReleaseReservationRequest::kOwnerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReleaseReservationRequest::ReleaseReservationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.ReleaseReservationRequest)
}
ReleaseReservationRequest::ReleaseReservationRequest(const ReleaseReservationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.owner_id().size() > 0) {
    owner_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_id_);
  }
  if (from.has_reservation_id()) {
    reservation_id_ = new ::datacatalog::ReservationID(*from.reservation_id_);
  } else {
    reservation_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.ReleaseReservationRequest)
}

void ReleaseReservationRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ReleaseReservationRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  owner_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reservation_id_ = nullptr;
}

ReleaseReservationRequest::~ReleaseReservationRequest() {
  // @@protoc_insertion_point(destructor:datacatalog.ReleaseReservationRequest)
  SharedDtor();
}

void ReleaseReservationRequest::SharedDtor() {
  owner_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reservation_id_;
}

void ReleaseReservationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleaseReservationRequest& ReleaseReservationRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReleaseReservationRequest_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void ReleaseReservationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.ReleaseReservationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && reservation_id_ != nullptr) {
    delete reservation_id_;
  }
  reservation_id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReleaseReservationRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReleaseReservationRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .datacatalog.ReservationID reservation_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::ReservationID::_InternalParse;
        object = msg->mutable_reservation_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string owner_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.ReleaseReservationRequest.owner_id");
        object = msg->mutable_owner_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReleaseReservationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.ReleaseReservationRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .datacatalog.ReservationID reservation_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reservation_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string owner_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->owner_id().data(), static_cast<int>(this->owner_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.ReleaseReservationRequest.owner_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.ReleaseReservationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.ReleaseReservationRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReleaseReservationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.ReleaseReservationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.ReservationID reservation_id = 1;
  if (this->has_reservation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::reservation_id(this), output);
  }

  // string owner_id = 2;
  if (this->owner_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_id().data(), static_cast<int>(this->owner_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.ReleaseReservationRequest.owner_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->owner_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.ReleaseReservationRequest)
}

::google::protobuf::uint8* ReleaseReservationRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.ReleaseReservationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.ReservationID reservation_id = 1;
  if (this->has_reservation_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::reservation_id(this), target);
  }

  // string owner_id = 2;
  if (this->owner_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_id().data(), static_cast<int>(this->owner_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.ReleaseReservationRequest.owner_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->owner_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.ReleaseReservationRequest)
  return target;
}

size_t ReleaseReservationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.ReleaseReservationRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner_id = 2;
  if (this->owner_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->owner_id());
  }

  // .datacatalog.ReservationID reservation_id = 1;
  if (this->has_reservation_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reservation_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleaseReservationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.ReleaseReservationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseReservationRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ReleaseReservationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.ReleaseReservationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.ReleaseReservationRequest)
    MergeFrom(*source);
  }
}

void ReleaseReservationRequest::MergeFrom(const ReleaseReservationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.ReleaseReservationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_id().size() > 0) {

    owner_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_id_);
  }
  if (from.has_reservation_id()) {
    mutable_reservation_id()->::datacatalog::ReservationID::MergeFrom(from.reservation_id());
  }
}

void ReleaseReservationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.ReleaseReservationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseReservationRequest::CopyFrom(const ReleaseReservationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.ReleaseReservationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseReservationRequest::IsInitialized() const {
  return true;
}

void ReleaseReservationRequest::Swap(ReleaseReservationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReleaseReservationRequest::InternalSwap(ReleaseReservationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  owner_id_.Swap(&other->owner_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reservation_id_, other->reservation_id_);
}

::google::protobuf::Metadata ReleaseReservationRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ReleaseReservationResponse::InitAsDefaultInstance() {
}
class ReleaseReservationResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReleaseReservationResponse::ReleaseReservationResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.ReleaseReservationResponse)
}
ReleaseReservationResponse::ReleaseReservationResponse(const ReleaseReservationResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:datacatalog.ReleaseReservationResponse)
}

void ReleaseReservationResponse::SharedCtor() {
}

ReleaseReservationResponse::~ReleaseReservationResponse() {
  // @@protoc_insertion_point(destructor:datacatalog.ReleaseReservationResponse)
  SharedDtor();
}

void ReleaseReservationResponse::SharedDtor() {
}

void ReleaseReservationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleaseReservationResponse& ReleaseReservationResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReleaseReservationResponse_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void ReleaseReservationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.ReleaseReservationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReleaseReservationResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReleaseReservationResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReleaseReservationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.ReleaseReservationResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.ReleaseReservationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.ReleaseReservationResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReleaseReservationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.ReleaseReservationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.ReleaseReservationResponse)
}

::google::protobuf::uint8* ReleaseReservationResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.ReleaseReservationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.ReleaseReservationResponse)
  return target;
}

size_t ReleaseReservationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.ReleaseReservationResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleaseReservationResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.ReleaseReservationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseReservationResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ReleaseReservationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.ReleaseReservationResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.ReleaseReservationResponse)
    MergeFrom(*source);
  }
}

void ReleaseReservationResponse::MergeFrom(const ReleaseReservationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.ReleaseReservationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReleaseReservationResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.ReleaseReservationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseReservationResponse::CopyFrom(const ReleaseReservationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.ReleaseReservationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseReservationResponse::IsInitialized() const {
  return true;
}

void ReleaseReservationResponse::Swap(ReleaseReservationResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReleaseReservationResponse::InternalSwap(ReleaseReservationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReleaseReservationResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Dataset::InitAsDefaultInstance() {
  ::datacatalog::_Dataset_default_instance_._instance.get_mutable()->id_ = const_cast< ::datacatalog::DatasetID*>(
      ::datacatalog::DatasetID::internal_default_instance());
  ::datacatalog::_Dataset_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::datacatalog::Metadata*>(
      ::datacatalog::Metadata::internal_default_instance());
}
class Dataset::HasBitSetters {
 public:
  static const ::datacatalog::DatasetID& id(const Dataset* msg);
  static const ::datacatalog::Metadata& metadata(const Dataset* msg);
};

const ::datacatalog::DatasetID&
Dataset::HasBitSetters::id(const Dataset* msg) {
  return *msg->id_;
}
const ::datacatalog::Metadata&
Dataset::HasBitSetters::metadata(const Dataset* msg) {
  return *msg->metadata_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dataset::kIdFieldNumber;
const int Dataset::kMetadataFieldNumber;
const int Dataset::kPartitionKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dataset::Dataset()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.Dataset)
}
Dataset::Dataset(const Dataset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      partitionkeys_(from.partitionkeys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::datacatalog::DatasetID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_metadata()) {
    metadata_ = new ::datacatalog::Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.Dataset)
}

void Dataset::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Dataset_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metadata_) -
      reinterpret_cast<char*>(&id_)) + sizeof(metadata_));
}

Dataset::~Dataset() {
  // @@protoc_insertion_point(destructor:datacatalog.Dataset)
  SharedDtor();
}

void Dataset::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete metadata_;
}

void Dataset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dataset& Dataset::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Dataset_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void Dataset::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.Dataset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partitionkeys_.Clear();
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Dataset::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Dataset*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .datacatalog.DatasetID id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::DatasetID::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .datacatalog.Metadata metadata = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::Metadata::_InternalParse;
        object = msg->mutable_metadata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated string partitionKeys = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("datacatalog.Dataset.partitionKeys");
          object = msg->add_partitionkeys();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Dataset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.Dataset)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .datacatalog.DatasetID id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .datacatalog.Metadata metadata = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string partitionKeys = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_partitionkeys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partitionkeys(this->partitionkeys_size() - 1).data(),
            static_cast<int>(this->partitionkeys(this->partitionkeys_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.Dataset.partitionKeys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.Dataset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.Dataset)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Dataset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.Dataset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.DatasetID id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  // .datacatalog.Metadata metadata = 2;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::metadata(this), output);
  }

  // repeated string partitionKeys = 3;
  for (int i = 0, n = this->partitionkeys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partitionkeys(i).data(), static_cast<int>(this->partitionkeys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.Dataset.partitionKeys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->partitionkeys(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.Dataset)
}

::google::protobuf::uint8* Dataset::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.Dataset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.DatasetID id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  // .datacatalog.Metadata metadata = 2;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::metadata(this), target);
  }

  // repeated string partitionKeys = 3;
  for (int i = 0, n = this->partitionkeys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partitionkeys(i).data(), static_cast<int>(this->partitionkeys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.Dataset.partitionKeys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->partitionkeys(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.Dataset)
  return target;
}

size_t Dataset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.Dataset)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string partitionKeys = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->partitionkeys_size());
  for (int i = 0, n = this->partitionkeys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->partitionkeys(i));
  }

  // .datacatalog.DatasetID id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .datacatalog.Metadata metadata = 2;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dataset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.Dataset)
  GOOGLE_DCHECK_NE(&from, this);
  const Dataset* source =
      ::google::protobuf::DynamicCastToGenerated<Dataset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.Dataset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.Dataset)
    MergeFrom(*source);
  }
}

void Dataset::MergeFrom(const Dataset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.Dataset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partitionkeys_.MergeFrom(from.partitionkeys_);
  if (from.has_id()) {
    mutable_id()->::datacatalog::DatasetID::MergeFrom(from.id());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::datacatalog::Metadata::MergeFrom(from.metadata());
  }
}

void Dataset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.Dataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dataset::CopyFrom(const Dataset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.Dataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dataset::IsInitialized() const {
  return true;
}

void Dataset::Swap(Dataset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dataset::InternalSwap(Dataset* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  partitionkeys_.InternalSwap(CastToBase(&other->partitionkeys_));
  swap(id_, other->id_);
  swap(metadata_, other->metadata_);
}

::google::protobuf::Metadata Dataset::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Partition::InitAsDefaultInstance() {
}
class Partition::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Partition::kKeyFieldNumber;
const int Partition::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Partition::Partition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.Partition)
}
Partition::Partition(const Partition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.Partition)
}

void Partition::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Partition_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Partition::~Partition() {
  // @@protoc_insertion_point(destructor:datacatalog.Partition)
  SharedDtor();
}

void Partition::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Partition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Partition& Partition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Partition_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void Partition::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.Partition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Partition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Partition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.Partition.key");
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.Partition.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Partition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.Partition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.Partition.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.Partition.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.Partition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.Partition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Partition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.Partition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.Partition.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.Partition.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.Partition)
}

::google::protobuf::uint8* Partition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.Partition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.Partition.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.Partition.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.Partition)
  return target;
}

size_t Partition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.Partition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Partition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.Partition)
  GOOGLE_DCHECK_NE(&from, this);
  const Partition* source =
      ::google::protobuf::DynamicCastToGenerated<Partition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.Partition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.Partition)
    MergeFrom(*source);
  }
}

void Partition::MergeFrom(const Partition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.Partition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void Partition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.Partition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Partition::CopyFrom(const Partition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.Partition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Partition::IsInitialized() const {
  return true;
}

void Partition::Swap(Partition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Partition::InternalSwap(Partition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Partition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DatasetID::InitAsDefaultInstance() {
}
class DatasetID::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatasetID::kProjectFieldNumber;
const int DatasetID::kNameFieldNumber;
const int DatasetID::kDomainFieldNumber;
const int DatasetID::kVersionFieldNumber;
const int DatasetID::kUUIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatasetID::DatasetID()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.DatasetID)
}
DatasetID::DatasetID(const DatasetID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project().size() > 0) {
    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain().size() > 0) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uuid().size() > 0) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.DatasetID)
}

void DatasetID::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DatasetID_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DatasetID::~DatasetID() {
  // @@protoc_insertion_point(destructor:datacatalog.DatasetID)
  SharedDtor();
}

void DatasetID::SharedDtor() {
  project_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DatasetID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DatasetID& DatasetID::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DatasetID_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void DatasetID::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.DatasetID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DatasetID::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DatasetID*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string project = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.DatasetID.project");
        object = msg->mutable_project();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.DatasetID.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string domain = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.DatasetID.domain");
        object = msg->mutable_domain();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string version = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.DatasetID.version");
        object = msg->mutable_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string UUID = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.DatasetID.UUID");
        object = msg->mutable_uuid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DatasetID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.DatasetID)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project().data(), static_cast<int>(this->project().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.DatasetID.project"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.DatasetID.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), static_cast<int>(this->domain().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.DatasetID.domain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.DatasetID.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string UUID = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), static_cast<int>(this->uuid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.DatasetID.UUID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.DatasetID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.DatasetID)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DatasetID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.DatasetID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.DatasetID.project");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.DatasetID.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string domain = 3;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.DatasetID.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->domain(), output);
  }

  // string version = 4;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.DatasetID.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->version(), output);
  }

  // string UUID = 5;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.DatasetID.UUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->uuid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.DatasetID)
}

::google::protobuf::uint8* DatasetID::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.DatasetID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.DatasetID.project");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.DatasetID.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string domain = 3;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.DatasetID.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->domain(), target);
  }

  // string version = 4;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.DatasetID.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }

  // string UUID = 5;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.DatasetID.UUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->uuid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.DatasetID)
  return target;
}

size_t DatasetID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.DatasetID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string domain = 3;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // string version = 4;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string UUID = 5;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatasetID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.DatasetID)
  GOOGLE_DCHECK_NE(&from, this);
  const DatasetID* source =
      ::google::protobuf::DynamicCastToGenerated<DatasetID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.DatasetID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.DatasetID)
    MergeFrom(*source);
  }
}

void DatasetID::MergeFrom(const DatasetID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.DatasetID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {

    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
}

void DatasetID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.DatasetID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetID::CopyFrom(const DatasetID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.DatasetID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetID::IsInitialized() const {
  return true;
}

void DatasetID::Swap(DatasetID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatasetID::InternalSwap(DatasetID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_.Swap(&other->project_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  domain_.Swap(&other->domain_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uuid_.Swap(&other->uuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata DatasetID::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Artifact::InitAsDefaultInstance() {
  ::datacatalog::_Artifact_default_instance_._instance.get_mutable()->dataset_ = const_cast< ::datacatalog::DatasetID*>(
      ::datacatalog::DatasetID::internal_default_instance());
  ::datacatalog::_Artifact_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::datacatalog::Metadata*>(
      ::datacatalog::Metadata::internal_default_instance());
  ::datacatalog::_Artifact_default_instance_._instance.get_mutable()->created_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class Artifact::HasBitSetters {
 public:
  static const ::datacatalog::DatasetID& dataset(const Artifact* msg);
  static const ::datacatalog::Metadata& metadata(const Artifact* msg);
  static const ::google::protobuf::Timestamp& created_at(const Artifact* msg);
};

const ::datacatalog::DatasetID&
Artifact::HasBitSetters::dataset(const Artifact* msg) {
  return *msg->dataset_;
}
const ::datacatalog::Metadata&
Artifact::HasBitSetters::metadata(const Artifact* msg) {
  return *msg->metadata_;
}
const ::google::protobuf::Timestamp&
Artifact::HasBitSetters::created_at(const Artifact* msg) {
  return *msg->created_at_;
}
void Artifact::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Artifact::kIdFieldNumber;
const int Artifact::kDatasetFieldNumber;
const int Artifact::kDataFieldNumber;
const int Artifact::kMetadataFieldNumber;
const int Artifact::kPartitionsFieldNumber;
const int Artifact::kTagsFieldNumber;
const int Artifact::kCreatedAtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Artifact::Artifact()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.Artifact)
}
Artifact::Artifact(const Artifact& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_),
      partitions_(from.partitions_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_dataset()) {
    dataset_ = new ::datacatalog::DatasetID(*from.dataset_);
  } else {
    dataset_ = nullptr;
  }
  if (from.has_metadata()) {
    metadata_ = new ::datacatalog::Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from.has_created_at()) {
    created_at_ = new ::google::protobuf::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.Artifact)
}

void Artifact::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Artifact_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dataset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&created_at_) -
      reinterpret_cast<char*>(&dataset_)) + sizeof(created_at_));
}

Artifact::~Artifact() {
  // @@protoc_insertion_point(destructor:datacatalog.Artifact)
  SharedDtor();
}

void Artifact::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dataset_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete created_at_;
}

void Artifact::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Artifact& Artifact::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Artifact_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void Artifact::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.Artifact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  partitions_.Clear();
  tags_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && dataset_ != nullptr) {
    delete dataset_;
  }
  dataset_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Artifact::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Artifact*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.Artifact.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .datacatalog.DatasetID dataset = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::DatasetID::_InternalParse;
        object = msg->mutable_dataset();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .datacatalog.ArtifactData data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::datacatalog::ArtifactData::_InternalParse;
          object = msg->add_data();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // .datacatalog.Metadata metadata = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::Metadata::_InternalParse;
        object = msg->mutable_metadata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .datacatalog.Partition partitions = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::datacatalog::Partition::_InternalParse;
          object = msg->add_partitions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // repeated .datacatalog.Tag tags = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::datacatalog::Tag::_InternalParse;
          object = msg->add_tags();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // .google.protobuf.Timestamp created_at = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_created_at();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Artifact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.Artifact)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.Artifact.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .datacatalog.DatasetID dataset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dataset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .datacatalog.ArtifactData data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .datacatalog.Metadata metadata = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .datacatalog.Partition partitions = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_partitions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .datacatalog.Tag tags = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp created_at = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_created_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.Artifact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.Artifact)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Artifact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.Artifact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.Artifact.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // .datacatalog.DatasetID dataset = 2;
  if (this->has_dataset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::dataset(this), output);
  }

  // repeated .datacatalog.ArtifactData data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->data(static_cast<int>(i)),
      output);
  }

  // .datacatalog.Metadata metadata = 4;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::metadata(this), output);
  }

  // repeated .datacatalog.Partition partitions = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->partitions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->partitions(static_cast<int>(i)),
      output);
  }

  // repeated .datacatalog.Tag tags = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->tags(static_cast<int>(i)),
      output);
  }

  // .google.protobuf.Timestamp created_at = 7;
  if (this->has_created_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::created_at(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.Artifact)
}

::google::protobuf::uint8* Artifact::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.Artifact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.Artifact.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // .datacatalog.DatasetID dataset = 2;
  if (this->has_dataset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::dataset(this), target);
  }

  // repeated .datacatalog.ArtifactData data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->data(static_cast<int>(i)), target);
  }

  // .datacatalog.Metadata metadata = 4;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::metadata(this), target);
  }

  // repeated .datacatalog.Partition partitions = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->partitions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->partitions(static_cast<int>(i)), target);
  }

  // repeated .datacatalog.Tag tags = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->tags(static_cast<int>(i)), target);
  }

  // .google.protobuf.Timestamp created_at = 7;
  if (this->has_created_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::created_at(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.Artifact)
  return target;
}

size_t Artifact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.Artifact)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .datacatalog.ArtifactData data = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  // repeated .datacatalog.Partition partitions = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->partitions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->partitions(static_cast<int>(i)));
    }
  }

  // repeated .datacatalog.Tag tags = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->tags_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tags(static_cast<int>(i)));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // .datacatalog.DatasetID dataset = 2;
  if (this->has_dataset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dataset_);
  }

  // .datacatalog.Metadata metadata = 4;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .google.protobuf.Timestamp created_at = 7;
  if (this->has_created_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Artifact::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.Artifact)
  GOOGLE_DCHECK_NE(&from, this);
  const Artifact* source =
      ::google::protobuf::DynamicCastToGenerated<Artifact>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.Artifact)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.Artifact)
    MergeFrom(*source);
  }
}

void Artifact::MergeFrom(const Artifact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.Artifact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  partitions_.MergeFrom(from.partitions_);
  tags_.MergeFrom(from.tags_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_dataset()) {
    mutable_dataset()->::datacatalog::DatasetID::MergeFrom(from.dataset());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::datacatalog::Metadata::MergeFrom(from.metadata());
  }
  if (from.has_created_at()) {
    mutable_created_at()->::google::protobuf::Timestamp::MergeFrom(from.created_at());
  }
}

void Artifact::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.Artifact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Artifact::CopyFrom(const Artifact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.Artifact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Artifact::IsInitialized() const {
  return true;
}

void Artifact::Swap(Artifact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Artifact::InternalSwap(Artifact* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&data_)->InternalSwap(CastToBase(&other->data_));
  CastToBase(&partitions_)->InternalSwap(CastToBase(&other->partitions_));
  CastToBase(&tags_)->InternalSwap(CastToBase(&other->tags_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dataset_, other->dataset_);
  swap(metadata_, other->metadata_);
  swap(created_at_, other->created_at_);
}

::google::protobuf::Metadata Artifact::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ArtifactData::InitAsDefaultInstance() {
  ::datacatalog::_ArtifactData_default_instance_._instance.get_mutable()->value_ = const_cast< ::flyteidl::core::Literal*>(
      ::flyteidl::core::Literal::internal_default_instance());
}
class ArtifactData::HasBitSetters {
 public:
  static const ::flyteidl::core::Literal& value(const ArtifactData* msg);
};

const ::flyteidl::core::Literal&
ArtifactData::HasBitSetters::value(const ArtifactData* msg) {
  return *msg->value_;
}
void ArtifactData::clear_value() {
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArtifactData::kNameFieldNumber;
const int ArtifactData::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArtifactData::ArtifactData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.ArtifactData)
}
ArtifactData::ArtifactData(const ArtifactData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_value()) {
    value_ = new ::flyteidl::core::Literal(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.ArtifactData)
}

void ArtifactData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ArtifactData_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = nullptr;
}

ArtifactData::~ArtifactData() {
  // @@protoc_insertion_point(destructor:datacatalog.ArtifactData)
  SharedDtor();
}

void ArtifactData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void ArtifactData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtifactData& ArtifactData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ArtifactData_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void ArtifactData::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.ArtifactData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ArtifactData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ArtifactData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.ArtifactData.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.core.Literal value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Literal::_InternalParse;
        object = msg->mutable_value();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ArtifactData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.ArtifactData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.ArtifactData.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Literal value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.ArtifactData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.ArtifactData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ArtifactData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.ArtifactData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.ArtifactData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .flyteidl.core.Literal value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::value(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.ArtifactData)
}

::google::protobuf::uint8* ArtifactData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.ArtifactData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.ArtifactData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .flyteidl.core.Literal value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::value(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.ArtifactData)
  return target;
}

size_t ArtifactData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.ArtifactData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .flyteidl.core.Literal value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtifactData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.ArtifactData)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtifactData* source =
      ::google::protobuf::DynamicCastToGenerated<ArtifactData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.ArtifactData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.ArtifactData)
    MergeFrom(*source);
  }
}

void ArtifactData::MergeFrom(const ArtifactData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.ArtifactData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_value()) {
    mutable_value()->::flyteidl::core::Literal::MergeFrom(from.value());
  }
}

void ArtifactData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.ArtifactData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactData::CopyFrom(const ArtifactData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.ArtifactData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactData::IsInitialized() const {
  return true;
}

void ArtifactData::Swap(ArtifactData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArtifactData::InternalSwap(ArtifactData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

::google::protobuf::Metadata ArtifactData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Tag::InitAsDefaultInstance() {
  ::datacatalog::_Tag_default_instance_._instance.get_mutable()->dataset_ = const_cast< ::datacatalog::DatasetID*>(
      ::datacatalog::DatasetID::internal_default_instance());
}
class Tag::HasBitSetters {
 public:
  static const ::datacatalog::DatasetID& dataset(const Tag* msg);
};

const ::datacatalog::DatasetID&
Tag::HasBitSetters::dataset(const Tag* msg) {
  return *msg->dataset_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tag::kNameFieldNumber;
const int Tag::kArtifactIdFieldNumber;
const int Tag::kDatasetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tag::Tag()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.Tag)
}
Tag::Tag(const Tag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  artifact_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.artifact_id().size() > 0) {
    artifact_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artifact_id_);
  }
  if (from.has_dataset()) {
    dataset_ = new ::datacatalog::DatasetID(*from.dataset_);
  } else {
    dataset_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.Tag)
}

void Tag::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Tag_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artifact_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_ = nullptr;
}

Tag::~Tag() {
  // @@protoc_insertion_point(destructor:datacatalog.Tag)
  SharedDtor();
}

void Tag::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artifact_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dataset_;
}

void Tag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tag& Tag::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Tag_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void Tag::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.Tag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artifact_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && dataset_ != nullptr) {
    delete dataset_;
  }
  dataset_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Tag::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Tag*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.Tag.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string artifact_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.Tag.artifact_id");
        object = msg->mutable_artifact_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .datacatalog.DatasetID dataset = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::DatasetID::_InternalParse;
        object = msg->mutable_dataset();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Tag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.Tag)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.Tag.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string artifact_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artifact_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->artifact_id().data(), static_cast<int>(this->artifact_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.Tag.artifact_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .datacatalog.DatasetID dataset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dataset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.Tag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.Tag)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Tag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.Tag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.Tag.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string artifact_id = 2;
  if (this->artifact_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artifact_id().data(), static_cast<int>(this->artifact_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.Tag.artifact_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->artifact_id(), output);
  }

  // .datacatalog.DatasetID dataset = 3;
  if (this->has_dataset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::dataset(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.Tag)
}

::google::protobuf::uint8* Tag::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.Tag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.Tag.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string artifact_id = 2;
  if (this->artifact_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artifact_id().data(), static_cast<int>(this->artifact_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.Tag.artifact_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->artifact_id(), target);
  }

  // .datacatalog.DatasetID dataset = 3;
  if (this->has_dataset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::dataset(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.Tag)
  return target;
}

size_t Tag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.Tag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string artifact_id = 2;
  if (this->artifact_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->artifact_id());
  }

  // .datacatalog.DatasetID dataset = 3;
  if (this->has_dataset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dataset_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  const Tag* source =
      ::google::protobuf::DynamicCastToGenerated<Tag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.Tag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.Tag)
    MergeFrom(*source);
  }
}

void Tag::MergeFrom(const Tag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.artifact_id().size() > 0) {

    artifact_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artifact_id_);
  }
  if (from.has_dataset()) {
    mutable_dataset()->::datacatalog::DatasetID::MergeFrom(from.dataset());
  }
}

void Tag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tag::CopyFrom(const Tag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tag::IsInitialized() const {
  return true;
}

void Tag::Swap(Tag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tag::InternalSwap(Tag* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  artifact_id_.Swap(&other->artifact_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dataset_, other->dataset_);
}

::google::protobuf::Metadata Tag::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

Metadata_KeyMapEntry_DoNotUse::Metadata_KeyMapEntry_DoNotUse() {}
Metadata_KeyMapEntry_DoNotUse::Metadata_KeyMapEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void Metadata_KeyMapEntry_DoNotUse::MergeFrom(const Metadata_KeyMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Metadata_KeyMapEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[28];
}
void Metadata_KeyMapEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Metadata_KeyMapEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      Metadata_KeyMapEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "datacatalog.Metadata.KeyMapEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "datacatalog.Metadata.KeyMapEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void Metadata::InitAsDefaultInstance() {
}
class Metadata::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Metadata::kKeyMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Metadata::Metadata()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.Metadata)
}
Metadata::Metadata(const Metadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_map_.MergeFrom(from.key_map_);
  // @@protoc_insertion_point(copy_constructor:datacatalog.Metadata)
}

void Metadata::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:datacatalog.Metadata)
  SharedDtor();
}

void Metadata::SharedDtor() {
}

void Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Metadata& Metadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.Metadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_map_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Metadata::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Metadata*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // map<string, string> key_map = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::datacatalog::Metadata_KeyMapEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->key_map_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Metadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.Metadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> key_map = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          Metadata_KeyMapEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Metadata_KeyMapEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&key_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.Metadata.KeyMapEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.Metadata.KeyMapEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.Metadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.Metadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Metadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.Metadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> key_map = 1;
  if (!this->key_map().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "datacatalog.Metadata.KeyMapEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "datacatalog.Metadata.KeyMapEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->key_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->key_map().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->key_map().begin();
          it != this->key_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Metadata_KeyMapEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(key_map_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Metadata_KeyMapEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->key_map().begin();
          it != this->key_map().end(); ++it) {
        entry.reset(key_map_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.Metadata)
}

::google::protobuf::uint8* Metadata::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.Metadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> key_map = 1;
  if (!this->key_map().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "datacatalog.Metadata.KeyMapEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "datacatalog.Metadata.KeyMapEntry.value");
      }
    };

    if (false &&
        this->key_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->key_map().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->key_map().begin();
          it != this->key_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Metadata_KeyMapEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(key_map_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Metadata_KeyMapEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->key_map().begin();
          it != this->key_map().end(); ++it) {
        entry.reset(key_map_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.Metadata)
  return target;
}

size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.Metadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> key_map = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->key_map_size());
  {
    ::std::unique_ptr<Metadata_KeyMapEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->key_map().begin();
        it != this->key_map().end(); ++it) {
      entry.reset(key_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Metadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  const Metadata* source =
      ::google::protobuf::DynamicCastToGenerated<Metadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.Metadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.Metadata)
    MergeFrom(*source);
  }
}

void Metadata::MergeFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_map_.MergeFrom(from.key_map_);
}

void Metadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  return true;
}

void Metadata::Swap(Metadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_map_.Swap(&other->key_map_);
}

::google::protobuf::Metadata Metadata::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FilterExpression::InitAsDefaultInstance() {
}
class FilterExpression::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FilterExpression::kFiltersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FilterExpression::FilterExpression()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.FilterExpression)
}
FilterExpression::FilterExpression(const FilterExpression& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      filters_(from.filters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:datacatalog.FilterExpression)
}

void FilterExpression::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FilterExpression_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
}

FilterExpression::~FilterExpression() {
  // @@protoc_insertion_point(destructor:datacatalog.FilterExpression)
  SharedDtor();
}

void FilterExpression::SharedDtor() {
}

void FilterExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilterExpression& FilterExpression::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FilterExpression_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void FilterExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.FilterExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filters_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FilterExpression::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FilterExpression*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .datacatalog.SinglePropertyFilter filters = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::datacatalog::SinglePropertyFilter::_InternalParse;
          object = msg->add_filters();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FilterExpression::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.FilterExpression)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .datacatalog.SinglePropertyFilter filters = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_filters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.FilterExpression)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.FilterExpression)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FilterExpression::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.FilterExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .datacatalog.SinglePropertyFilter filters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->filters(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.FilterExpression)
}

::google::protobuf::uint8* FilterExpression::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.FilterExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .datacatalog.SinglePropertyFilter filters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->filters(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.FilterExpression)
  return target;
}

size_t FilterExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.FilterExpression)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .datacatalog.SinglePropertyFilter filters = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->filters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->filters(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterExpression::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.FilterExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterExpression* source =
      ::google::protobuf::DynamicCastToGenerated<FilterExpression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.FilterExpression)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.FilterExpression)
    MergeFrom(*source);
  }
}

void FilterExpression::MergeFrom(const FilterExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.FilterExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
}

void FilterExpression::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.FilterExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterExpression::CopyFrom(const FilterExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.FilterExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterExpression::IsInitialized() const {
  return true;
}

void FilterExpression::Swap(FilterExpression* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FilterExpression::InternalSwap(FilterExpression* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&filters_)->InternalSwap(CastToBase(&other->filters_));
}

::google::protobuf::Metadata FilterExpression::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SinglePropertyFilter::InitAsDefaultInstance() {
  ::datacatalog::_SinglePropertyFilter_default_instance_.tag_filter_ = const_cast< ::datacatalog::TagPropertyFilter*>(
      ::datacatalog::TagPropertyFilter::internal_default_instance());
  ::datacatalog::_SinglePropertyFilter_default_instance_.partition_filter_ = const_cast< ::datacatalog::PartitionPropertyFilter*>(
      ::datacatalog::PartitionPropertyFilter::internal_default_instance());
  ::datacatalog::_SinglePropertyFilter_default_instance_.artifact_filter_ = const_cast< ::datacatalog::ArtifactPropertyFilter*>(
      ::datacatalog::ArtifactPropertyFilter::internal_default_instance());
  ::datacatalog::_SinglePropertyFilter_default_instance_.dataset_filter_ = const_cast< ::datacatalog::DatasetPropertyFilter*>(
      ::datacatalog::DatasetPropertyFilter::internal_default_instance());
}
class SinglePropertyFilter::HasBitSetters {
 public:
  static const ::datacatalog::TagPropertyFilter& tag_filter(const SinglePropertyFilter* msg);
  static const ::datacatalog::PartitionPropertyFilter& partition_filter(const SinglePropertyFilter* msg);
  static const ::datacatalog::ArtifactPropertyFilter& artifact_filter(const SinglePropertyFilter* msg);
  static const ::datacatalog::DatasetPropertyFilter& dataset_filter(const SinglePropertyFilter* msg);
};

const ::datacatalog::TagPropertyFilter&
SinglePropertyFilter::HasBitSetters::tag_filter(const SinglePropertyFilter* msg) {
  return *msg->property_filter_.tag_filter_;
}
const ::datacatalog::PartitionPropertyFilter&
SinglePropertyFilter::HasBitSetters::partition_filter(const SinglePropertyFilter* msg) {
  return *msg->property_filter_.partition_filter_;
}
const ::datacatalog::ArtifactPropertyFilter&
SinglePropertyFilter::HasBitSetters::artifact_filter(const SinglePropertyFilter* msg) {
  return *msg->property_filter_.artifact_filter_;
}
const ::datacatalog::DatasetPropertyFilter&
SinglePropertyFilter::HasBitSetters::dataset_filter(const SinglePropertyFilter* msg) {
  return *msg->property_filter_.dataset_filter_;
}
void SinglePropertyFilter::set_allocated_tag_filter(::datacatalog::TagPropertyFilter* tag_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_property_filter();
  if (tag_filter) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tag_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tag_filter, submessage_arena);
    }
    set_has_tag_filter();
    property_filter_.tag_filter_ = tag_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:datacatalog.SinglePropertyFilter.tag_filter)
}
void SinglePropertyFilter::set_allocated_partition_filter(::datacatalog::PartitionPropertyFilter* partition_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_property_filter();
  if (partition_filter) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      partition_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, partition_filter, submessage_arena);
    }
    set_has_partition_filter();
    property_filter_.partition_filter_ = partition_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:datacatalog.SinglePropertyFilter.partition_filter)
}
void SinglePropertyFilter::set_allocated_artifact_filter(::datacatalog::ArtifactPropertyFilter* artifact_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_property_filter();
  if (artifact_filter) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      artifact_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, artifact_filter, submessage_arena);
    }
    set_has_artifact_filter();
    property_filter_.artifact_filter_ = artifact_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:datacatalog.SinglePropertyFilter.artifact_filter)
}
void SinglePropertyFilter::set_allocated_dataset_filter(::datacatalog::DatasetPropertyFilter* dataset_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_property_filter();
  if (dataset_filter) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dataset_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dataset_filter, submessage_arena);
    }
    set_has_dataset_filter();
    property_filter_.dataset_filter_ = dataset_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:datacatalog.SinglePropertyFilter.dataset_filter)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SinglePropertyFilter::kTagFilterFieldNumber;
const int SinglePropertyFilter::kPartitionFilterFieldNumber;
const int SinglePropertyFilter::kArtifactFilterFieldNumber;
const int SinglePropertyFilter::kDatasetFilterFieldNumber;
const int SinglePropertyFilter::kOperatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SinglePropertyFilter::SinglePropertyFilter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.SinglePropertyFilter)
}
SinglePropertyFilter::SinglePropertyFilter(const SinglePropertyFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operator__ = from.operator__;
  clear_has_property_filter();
  switch (from.property_filter_case()) {
    case kTagFilter: {
      mutable_tag_filter()->::datacatalog::TagPropertyFilter::MergeFrom(from.tag_filter());
      break;
    }
    case kPartitionFilter: {
      mutable_partition_filter()->::datacatalog::PartitionPropertyFilter::MergeFrom(from.partition_filter());
      break;
    }
    case kArtifactFilter: {
      mutable_artifact_filter()->::datacatalog::ArtifactPropertyFilter::MergeFrom(from.artifact_filter());
      break;
    }
    case kDatasetFilter: {
      mutable_dataset_filter()->::datacatalog::DatasetPropertyFilter::MergeFrom(from.dataset_filter());
      break;
    }
    case PROPERTY_FILTER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.SinglePropertyFilter)
}

void SinglePropertyFilter::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SinglePropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  operator__ = 0;
  clear_has_property_filter();
}

SinglePropertyFilter::~SinglePropertyFilter() {
  // @@protoc_insertion_point(destructor:datacatalog.SinglePropertyFilter)
  SharedDtor();
}

void SinglePropertyFilter::SharedDtor() {
  if (has_property_filter()) {
    clear_property_filter();
  }
}

void SinglePropertyFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SinglePropertyFilter& SinglePropertyFilter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SinglePropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void SinglePropertyFilter::clear_property_filter() {
// @@protoc_insertion_point(one_of_clear_start:datacatalog.SinglePropertyFilter)
  switch (property_filter_case()) {
    case kTagFilter: {
      delete property_filter_.tag_filter_;
      break;
    }
    case kPartitionFilter: {
      delete property_filter_.partition_filter_;
      break;
    }
    case kArtifactFilter: {
      delete property_filter_.artifact_filter_;
      break;
    }
    case kDatasetFilter: {
      delete property_filter_.dataset_filter_;
      break;
    }
    case PROPERTY_FILTER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROPERTY_FILTER_NOT_SET;
}


void SinglePropertyFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.SinglePropertyFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operator__ = 0;
  clear_property_filter();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SinglePropertyFilter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SinglePropertyFilter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .datacatalog.TagPropertyFilter tag_filter = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::TagPropertyFilter::_InternalParse;
        object = msg->mutable_tag_filter();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .datacatalog.PartitionPropertyFilter partition_filter = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::PartitionPropertyFilter::_InternalParse;
        object = msg->mutable_partition_filter();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .datacatalog.ArtifactPropertyFilter artifact_filter = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::ArtifactPropertyFilter::_InternalParse;
        object = msg->mutable_artifact_filter();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .datacatalog.DatasetPropertyFilter dataset_filter = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::DatasetPropertyFilter::_InternalParse;
        object = msg->mutable_dataset_filter();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .datacatalog.SinglePropertyFilter.ComparisonOperator operator = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_operator_(static_cast<::datacatalog::SinglePropertyFilter_ComparisonOperator>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SinglePropertyFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.SinglePropertyFilter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .datacatalog.TagPropertyFilter tag_filter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tag_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .datacatalog.PartitionPropertyFilter partition_filter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_partition_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .datacatalog.ArtifactPropertyFilter artifact_filter = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_artifact_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .datacatalog.DatasetPropertyFilter dataset_filter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dataset_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .datacatalog.SinglePropertyFilter.ComparisonOperator operator = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operator_(static_cast< ::datacatalog::SinglePropertyFilter_ComparisonOperator >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.SinglePropertyFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.SinglePropertyFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SinglePropertyFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.SinglePropertyFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.TagPropertyFilter tag_filter = 1;
  if (has_tag_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::tag_filter(this), output);
  }

  // .datacatalog.PartitionPropertyFilter partition_filter = 2;
  if (has_partition_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::partition_filter(this), output);
  }

  // .datacatalog.ArtifactPropertyFilter artifact_filter = 3;
  if (has_artifact_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::artifact_filter(this), output);
  }

  // .datacatalog.DatasetPropertyFilter dataset_filter = 4;
  if (has_dataset_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::dataset_filter(this), output);
  }

  // .datacatalog.SinglePropertyFilter.ComparisonOperator operator = 10;
  if (this->operator_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->operator_(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.SinglePropertyFilter)
}

::google::protobuf::uint8* SinglePropertyFilter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.SinglePropertyFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.TagPropertyFilter tag_filter = 1;
  if (has_tag_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::tag_filter(this), target);
  }

  // .datacatalog.PartitionPropertyFilter partition_filter = 2;
  if (has_partition_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::partition_filter(this), target);
  }

  // .datacatalog.ArtifactPropertyFilter artifact_filter = 3;
  if (has_artifact_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::artifact_filter(this), target);
  }

  // .datacatalog.DatasetPropertyFilter dataset_filter = 4;
  if (has_dataset_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::dataset_filter(this), target);
  }

  // .datacatalog.SinglePropertyFilter.ComparisonOperator operator = 10;
  if (this->operator_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->operator_(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.SinglePropertyFilter)
  return target;
}

size_t SinglePropertyFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.SinglePropertyFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .datacatalog.SinglePropertyFilter.ComparisonOperator operator = 10;
  if (this->operator_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operator_());
  }

  switch (property_filter_case()) {
    // .datacatalog.TagPropertyFilter tag_filter = 1;
    case kTagFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *property_filter_.tag_filter_);
      break;
    }
    // .datacatalog.PartitionPropertyFilter partition_filter = 2;
    case kPartitionFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *property_filter_.partition_filter_);
      break;
    }
    // .datacatalog.ArtifactPropertyFilter artifact_filter = 3;
    case kArtifactFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *property_filter_.artifact_filter_);
      break;
    }
    // .datacatalog.DatasetPropertyFilter dataset_filter = 4;
    case kDatasetFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *property_filter_.dataset_filter_);
      break;
    }
    case PROPERTY_FILTER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SinglePropertyFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.SinglePropertyFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const SinglePropertyFilter* source =
      ::google::protobuf::DynamicCastToGenerated<SinglePropertyFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.SinglePropertyFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.SinglePropertyFilter)
    MergeFrom(*source);
  }
}

void SinglePropertyFilter::MergeFrom(const SinglePropertyFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.SinglePropertyFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.operator_() != 0) {
    set_operator_(from.operator_());
  }
  switch (from.property_filter_case()) {
    case kTagFilter: {
      mutable_tag_filter()->::datacatalog::TagPropertyFilter::MergeFrom(from.tag_filter());
      break;
    }
    case kPartitionFilter: {
      mutable_partition_filter()->::datacatalog::PartitionPropertyFilter::MergeFrom(from.partition_filter());
      break;
    }
    case kArtifactFilter: {
      mutable_artifact_filter()->::datacatalog::ArtifactPropertyFilter::MergeFrom(from.artifact_filter());
      break;
    }
    case kDatasetFilter: {
      mutable_dataset_filter()->::datacatalog::DatasetPropertyFilter::MergeFrom(from.dataset_filter());
      break;
    }
    case PROPERTY_FILTER_NOT_SET: {
      break;
    }
  }
}

void SinglePropertyFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.SinglePropertyFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SinglePropertyFilter::CopyFrom(const SinglePropertyFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.SinglePropertyFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SinglePropertyFilter::IsInitialized() const {
  return true;
}

void SinglePropertyFilter::Swap(SinglePropertyFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SinglePropertyFilter::InternalSwap(SinglePropertyFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(operator__, other->operator__);
  swap(property_filter_, other->property_filter_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata SinglePropertyFilter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ArtifactPropertyFilter::InitAsDefaultInstance() {
  ::datacatalog::_ArtifactPropertyFilter_default_instance_.artifact_id_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
class ArtifactPropertyFilter::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArtifactPropertyFilter::kArtifactIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArtifactPropertyFilter::ArtifactPropertyFilter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.ArtifactPropertyFilter)
}
ArtifactPropertyFilter::ArtifactPropertyFilter(const ArtifactPropertyFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_property();
  switch (from.property_case()) {
    case kArtifactId: {
      set_artifact_id(from.artifact_id());
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.ArtifactPropertyFilter)
}

void ArtifactPropertyFilter::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ArtifactPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  clear_has_property();
}

ArtifactPropertyFilter::~ArtifactPropertyFilter() {
  // @@protoc_insertion_point(destructor:datacatalog.ArtifactPropertyFilter)
  SharedDtor();
}

void ArtifactPropertyFilter::SharedDtor() {
  if (has_property()) {
    clear_property();
  }
}

void ArtifactPropertyFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtifactPropertyFilter& ArtifactPropertyFilter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ArtifactPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void ArtifactPropertyFilter::clear_property() {
// @@protoc_insertion_point(one_of_clear_start:datacatalog.ArtifactPropertyFilter)
  switch (property_case()) {
    case kArtifactId: {
      property_.artifact_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROPERTY_NOT_SET;
}


void ArtifactPropertyFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.ArtifactPropertyFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_property();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ArtifactPropertyFilter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ArtifactPropertyFilter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string artifact_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.ArtifactPropertyFilter.artifact_id");
        object = msg->mutable_artifact_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ArtifactPropertyFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.ArtifactPropertyFilter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string artifact_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artifact_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->artifact_id().data(), static_cast<int>(this->artifact_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.ArtifactPropertyFilter.artifact_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.ArtifactPropertyFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.ArtifactPropertyFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ArtifactPropertyFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.ArtifactPropertyFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string artifact_id = 1;
  if (has_artifact_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artifact_id().data(), static_cast<int>(this->artifact_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.ArtifactPropertyFilter.artifact_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->artifact_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.ArtifactPropertyFilter)
}

::google::protobuf::uint8* ArtifactPropertyFilter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.ArtifactPropertyFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string artifact_id = 1;
  if (has_artifact_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artifact_id().data(), static_cast<int>(this->artifact_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.ArtifactPropertyFilter.artifact_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->artifact_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.ArtifactPropertyFilter)
  return target;
}

size_t ArtifactPropertyFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.ArtifactPropertyFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (property_case()) {
    // string artifact_id = 1;
    case kArtifactId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->artifact_id());
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtifactPropertyFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.ArtifactPropertyFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtifactPropertyFilter* source =
      ::google::protobuf::DynamicCastToGenerated<ArtifactPropertyFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.ArtifactPropertyFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.ArtifactPropertyFilter)
    MergeFrom(*source);
  }
}

void ArtifactPropertyFilter::MergeFrom(const ArtifactPropertyFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.ArtifactPropertyFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.property_case()) {
    case kArtifactId: {
      set_artifact_id(from.artifact_id());
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
}

void ArtifactPropertyFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.ArtifactPropertyFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactPropertyFilter::CopyFrom(const ArtifactPropertyFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.ArtifactPropertyFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactPropertyFilter::IsInitialized() const {
  return true;
}

void ArtifactPropertyFilter::Swap(ArtifactPropertyFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArtifactPropertyFilter::InternalSwap(ArtifactPropertyFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(property_, other->property_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata ArtifactPropertyFilter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TagPropertyFilter::InitAsDefaultInstance() {
  ::datacatalog::_TagPropertyFilter_default_instance_.tag_name_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
class TagPropertyFilter::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TagPropertyFilter::kTagNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TagPropertyFilter::TagPropertyFilter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.TagPropertyFilter)
}
TagPropertyFilter::TagPropertyFilter(const TagPropertyFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_property();
  switch (from.property_case()) {
    case kTagName: {
      set_tag_name(from.tag_name());
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.TagPropertyFilter)
}

void TagPropertyFilter::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TagPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  clear_has_property();
}

TagPropertyFilter::~TagPropertyFilter() {
  // @@protoc_insertion_point(destructor:datacatalog.TagPropertyFilter)
  SharedDtor();
}

void TagPropertyFilter::SharedDtor() {
  if (has_property()) {
    clear_property();
  }
}

void TagPropertyFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TagPropertyFilter& TagPropertyFilter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TagPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void TagPropertyFilter::clear_property() {
// @@protoc_insertion_point(one_of_clear_start:datacatalog.TagPropertyFilter)
  switch (property_case()) {
    case kTagName: {
      property_.tag_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROPERTY_NOT_SET;
}


void TagPropertyFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.TagPropertyFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_property();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TagPropertyFilter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TagPropertyFilter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tag_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.TagPropertyFilter.tag_name");
        object = msg->mutable_tag_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TagPropertyFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.TagPropertyFilter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tag_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tag_name().data(), static_cast<int>(this->tag_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.TagPropertyFilter.tag_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.TagPropertyFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.TagPropertyFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TagPropertyFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.TagPropertyFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tag_name = 1;
  if (has_tag_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag_name().data(), static_cast<int>(this->tag_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.TagPropertyFilter.tag_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.TagPropertyFilter)
}

::google::protobuf::uint8* TagPropertyFilter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.TagPropertyFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tag_name = 1;
  if (has_tag_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag_name().data(), static_cast<int>(this->tag_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.TagPropertyFilter.tag_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tag_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.TagPropertyFilter)
  return target;
}

size_t TagPropertyFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.TagPropertyFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (property_case()) {
    // string tag_name = 1;
    case kTagName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag_name());
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TagPropertyFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.TagPropertyFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const TagPropertyFilter* source =
      ::google::protobuf::DynamicCastToGenerated<TagPropertyFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.TagPropertyFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.TagPropertyFilter)
    MergeFrom(*source);
  }
}

void TagPropertyFilter::MergeFrom(const TagPropertyFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.TagPropertyFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.property_case()) {
    case kTagName: {
      set_tag_name(from.tag_name());
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
}

void TagPropertyFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.TagPropertyFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TagPropertyFilter::CopyFrom(const TagPropertyFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.TagPropertyFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagPropertyFilter::IsInitialized() const {
  return true;
}

void TagPropertyFilter::Swap(TagPropertyFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TagPropertyFilter::InternalSwap(TagPropertyFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(property_, other->property_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata TagPropertyFilter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PartitionPropertyFilter::InitAsDefaultInstance() {
  ::datacatalog::_PartitionPropertyFilter_default_instance_.key_val_ = const_cast< ::datacatalog::KeyValuePair*>(
      ::datacatalog::KeyValuePair::internal_default_instance());
}
class PartitionPropertyFilter::HasBitSetters {
 public:
  static const ::datacatalog::KeyValuePair& key_val(const PartitionPropertyFilter* msg);
};

const ::datacatalog::KeyValuePair&
PartitionPropertyFilter::HasBitSetters::key_val(const PartitionPropertyFilter* msg) {
  return *msg->property_.key_val_;
}
void PartitionPropertyFilter::set_allocated_key_val(::datacatalog::KeyValuePair* key_val) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_property();
  if (key_val) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      key_val = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, key_val, submessage_arena);
    }
    set_has_key_val();
    property_.key_val_ = key_val;
  }
  // @@protoc_insertion_point(field_set_allocated:datacatalog.PartitionPropertyFilter.key_val)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartitionPropertyFilter::kKeyValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartitionPropertyFilter::PartitionPropertyFilter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.PartitionPropertyFilter)
}
PartitionPropertyFilter::PartitionPropertyFilter(const PartitionPropertyFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_property();
  switch (from.property_case()) {
    case kKeyVal: {
      mutable_key_val()->::datacatalog::KeyValuePair::MergeFrom(from.key_val());
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.PartitionPropertyFilter)
}

void PartitionPropertyFilter::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PartitionPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  clear_has_property();
}

PartitionPropertyFilter::~PartitionPropertyFilter() {
  // @@protoc_insertion_point(destructor:datacatalog.PartitionPropertyFilter)
  SharedDtor();
}

void PartitionPropertyFilter::SharedDtor() {
  if (has_property()) {
    clear_property();
  }
}

void PartitionPropertyFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartitionPropertyFilter& PartitionPropertyFilter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PartitionPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void PartitionPropertyFilter::clear_property() {
// @@protoc_insertion_point(one_of_clear_start:datacatalog.PartitionPropertyFilter)
  switch (property_case()) {
    case kKeyVal: {
      delete property_.key_val_;
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROPERTY_NOT_SET;
}


void PartitionPropertyFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.PartitionPropertyFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_property();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PartitionPropertyFilter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PartitionPropertyFilter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .datacatalog.KeyValuePair key_val = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::datacatalog::KeyValuePair::_InternalParse;
        object = msg->mutable_key_val();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PartitionPropertyFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.PartitionPropertyFilter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .datacatalog.KeyValuePair key_val = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_key_val()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.PartitionPropertyFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.PartitionPropertyFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PartitionPropertyFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.PartitionPropertyFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.KeyValuePair key_val = 1;
  if (has_key_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::key_val(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.PartitionPropertyFilter)
}

::google::protobuf::uint8* PartitionPropertyFilter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.PartitionPropertyFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .datacatalog.KeyValuePair key_val = 1;
  if (has_key_val()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::key_val(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.PartitionPropertyFilter)
  return target;
}

size_t PartitionPropertyFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.PartitionPropertyFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (property_case()) {
    // .datacatalog.KeyValuePair key_val = 1;
    case kKeyVal: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *property_.key_val_);
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartitionPropertyFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.PartitionPropertyFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const PartitionPropertyFilter* source =
      ::google::protobuf::DynamicCastToGenerated<PartitionPropertyFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.PartitionPropertyFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.PartitionPropertyFilter)
    MergeFrom(*source);
  }
}

void PartitionPropertyFilter::MergeFrom(const PartitionPropertyFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.PartitionPropertyFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.property_case()) {
    case kKeyVal: {
      mutable_key_val()->::datacatalog::KeyValuePair::MergeFrom(from.key_val());
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
}

void PartitionPropertyFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.PartitionPropertyFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartitionPropertyFilter::CopyFrom(const PartitionPropertyFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.PartitionPropertyFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionPropertyFilter::IsInitialized() const {
  return true;
}

void PartitionPropertyFilter::Swap(PartitionPropertyFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartitionPropertyFilter::InternalSwap(PartitionPropertyFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(property_, other->property_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata PartitionPropertyFilter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void KeyValuePair::InitAsDefaultInstance() {
}
class KeyValuePair::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyValuePair::kKeyFieldNumber;
const int KeyValuePair::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyValuePair::KeyValuePair()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.KeyValuePair)
}
KeyValuePair::KeyValuePair(const KeyValuePair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.KeyValuePair)
}

void KeyValuePair::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_KeyValuePair_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

KeyValuePair::~KeyValuePair() {
  // @@protoc_insertion_point(destructor:datacatalog.KeyValuePair)
  SharedDtor();
}

void KeyValuePair::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KeyValuePair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyValuePair& KeyValuePair::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_KeyValuePair_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void KeyValuePair::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.KeyValuePair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* KeyValuePair::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<KeyValuePair*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.KeyValuePair.key");
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.KeyValuePair.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool KeyValuePair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.KeyValuePair)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.KeyValuePair.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.KeyValuePair.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.KeyValuePair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.KeyValuePair)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void KeyValuePair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.KeyValuePair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.KeyValuePair.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.KeyValuePair.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.KeyValuePair)
}

::google::protobuf::uint8* KeyValuePair::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.KeyValuePair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.KeyValuePair.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.KeyValuePair.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.KeyValuePair)
  return target;
}

size_t KeyValuePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.KeyValuePair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyValuePair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.KeyValuePair)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyValuePair* source =
      ::google::protobuf::DynamicCastToGenerated<KeyValuePair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.KeyValuePair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.KeyValuePair)
    MergeFrom(*source);
  }
}

void KeyValuePair::MergeFrom(const KeyValuePair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.KeyValuePair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void KeyValuePair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.KeyValuePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValuePair::CopyFrom(const KeyValuePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.KeyValuePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValuePair::IsInitialized() const {
  return true;
}

void KeyValuePair::Swap(KeyValuePair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyValuePair::InternalSwap(KeyValuePair* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata KeyValuePair::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DatasetPropertyFilter::InitAsDefaultInstance() {
  ::datacatalog::_DatasetPropertyFilter_default_instance_.project_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::datacatalog::_DatasetPropertyFilter_default_instance_.name_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::datacatalog::_DatasetPropertyFilter_default_instance_.domain_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::datacatalog::_DatasetPropertyFilter_default_instance_.version_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
class DatasetPropertyFilter::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatasetPropertyFilter::kProjectFieldNumber;
const int DatasetPropertyFilter::kNameFieldNumber;
const int DatasetPropertyFilter::kDomainFieldNumber;
const int DatasetPropertyFilter::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatasetPropertyFilter::DatasetPropertyFilter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.DatasetPropertyFilter)
}
DatasetPropertyFilter::DatasetPropertyFilter(const DatasetPropertyFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_property();
  switch (from.property_case()) {
    case kProject: {
      set_project(from.project());
      break;
    }
    case kName: {
      set_name(from.name());
      break;
    }
    case kDomain: {
      set_domain(from.domain());
      break;
    }
    case kVersion: {
      set_version(from.version());
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:datacatalog.DatasetPropertyFilter)
}

void DatasetPropertyFilter::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DatasetPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  clear_has_property();
}

DatasetPropertyFilter::~DatasetPropertyFilter() {
  // @@protoc_insertion_point(destructor:datacatalog.DatasetPropertyFilter)
  SharedDtor();
}

void DatasetPropertyFilter::SharedDtor() {
  if (has_property()) {
    clear_property();
  }
}

void DatasetPropertyFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DatasetPropertyFilter& DatasetPropertyFilter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DatasetPropertyFilter_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void DatasetPropertyFilter::clear_property() {
// @@protoc_insertion_point(one_of_clear_start:datacatalog.DatasetPropertyFilter)
  switch (property_case()) {
    case kProject: {
      property_.project_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kName: {
      property_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kDomain: {
      property_.domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kVersion: {
      property_.version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROPERTY_NOT_SET;
}


void DatasetPropertyFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.DatasetPropertyFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_property();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DatasetPropertyFilter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DatasetPropertyFilter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string project = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.DatasetPropertyFilter.project");
        object = msg->mutable_project();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.DatasetPropertyFilter.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string domain = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.DatasetPropertyFilter.domain");
        object = msg->mutable_domain();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string version = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.DatasetPropertyFilter.version");
        object = msg->mutable_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DatasetPropertyFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.DatasetPropertyFilter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project().data(), static_cast<int>(this->project().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.DatasetPropertyFilter.project"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.DatasetPropertyFilter.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), static_cast<int>(this->domain().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.DatasetPropertyFilter.domain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.DatasetPropertyFilter.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.DatasetPropertyFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.DatasetPropertyFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DatasetPropertyFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.DatasetPropertyFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (has_project()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.DatasetPropertyFilter.project");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project(), output);
  }

  // string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.DatasetPropertyFilter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string domain = 3;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.DatasetPropertyFilter.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->domain(), output);
  }

  // string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.DatasetPropertyFilter.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.DatasetPropertyFilter)
}

::google::protobuf::uint8* DatasetPropertyFilter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.DatasetPropertyFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (has_project()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.DatasetPropertyFilter.project");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project(), target);
  }

  // string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.DatasetPropertyFilter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string domain = 3;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.DatasetPropertyFilter.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->domain(), target);
  }

  // string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.DatasetPropertyFilter.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.DatasetPropertyFilter)
  return target;
}

size_t DatasetPropertyFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.DatasetPropertyFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (property_case()) {
    // string project = 1;
    case kProject: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->project());
      break;
    }
    // string name = 2;
    case kName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
      break;
    }
    // string domain = 3;
    case kDomain: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
      break;
    }
    // string version = 4;
    case kVersion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatasetPropertyFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.DatasetPropertyFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const DatasetPropertyFilter* source =
      ::google::protobuf::DynamicCastToGenerated<DatasetPropertyFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.DatasetPropertyFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.DatasetPropertyFilter)
    MergeFrom(*source);
  }
}

void DatasetPropertyFilter::MergeFrom(const DatasetPropertyFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.DatasetPropertyFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.property_case()) {
    case kProject: {
      set_project(from.project());
      break;
    }
    case kName: {
      set_name(from.name());
      break;
    }
    case kDomain: {
      set_domain(from.domain());
      break;
    }
    case kVersion: {
      set_version(from.version());
      break;
    }
    case PROPERTY_NOT_SET: {
      break;
    }
  }
}

void DatasetPropertyFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.DatasetPropertyFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetPropertyFilter::CopyFrom(const DatasetPropertyFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.DatasetPropertyFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetPropertyFilter::IsInitialized() const {
  return true;
}

void DatasetPropertyFilter::Swap(DatasetPropertyFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatasetPropertyFilter::InternalSwap(DatasetPropertyFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(property_, other->property_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata DatasetPropertyFilter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PaginationOptions::InitAsDefaultInstance() {
}
class PaginationOptions::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PaginationOptions::kLimitFieldNumber;
const int PaginationOptions::kTokenFieldNumber;
const int PaginationOptions::kSortKeyFieldNumber;
const int PaginationOptions::kSortOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PaginationOptions::PaginationOptions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:datacatalog.PaginationOptions)
}
PaginationOptions::PaginationOptions(const PaginationOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  ::memcpy(&limit_, &from.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&sortorder_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(sortorder_));
  // @@protoc_insertion_point(copy_constructor:datacatalog.PaginationOptions)
}

void PaginationOptions::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PaginationOptions_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sortorder_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(sortorder_));
}

PaginationOptions::~PaginationOptions() {
  // @@protoc_insertion_point(destructor:datacatalog.PaginationOptions)
  SharedDtor();
}

void PaginationOptions::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PaginationOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PaginationOptions& PaginationOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PaginationOptions_flyteidl_2fdatacatalog_2fdatacatalog_2eproto.base);
  return *internal_default_instance();
}


void PaginationOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:datacatalog.PaginationOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sortorder_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(sortorder_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PaginationOptions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PaginationOptions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 limit = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("datacatalog.PaginationOptions.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .datacatalog.PaginationOptions.SortKey sortKey = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_sortkey(static_cast<::datacatalog::PaginationOptions_SortKey>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .datacatalog.PaginationOptions.SortOrder sortOrder = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_sortorder(static_cast<::datacatalog::PaginationOptions_SortOrder>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PaginationOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:datacatalog.PaginationOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 limit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "datacatalog.PaginationOptions.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .datacatalog.PaginationOptions.SortKey sortKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sortkey(static_cast< ::datacatalog::PaginationOptions_SortKey >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .datacatalog.PaginationOptions.SortOrder sortOrder = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sortorder(static_cast< ::datacatalog::PaginationOptions_SortOrder >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:datacatalog.PaginationOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:datacatalog.PaginationOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PaginationOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:datacatalog.PaginationOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->limit(), output);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.PaginationOptions.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // .datacatalog.PaginationOptions.SortKey sortKey = 3;
  if (this->sortkey() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sortkey(), output);
  }

  // .datacatalog.PaginationOptions.SortOrder sortOrder = 4;
  if (this->sortorder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->sortorder(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:datacatalog.PaginationOptions)
}

::google::protobuf::uint8* PaginationOptions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:datacatalog.PaginationOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->limit(), target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "datacatalog.PaginationOptions.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // .datacatalog.PaginationOptions.SortKey sortKey = 3;
  if (this->sortkey() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->sortkey(), target);
  }

  // .datacatalog.PaginationOptions.SortOrder sortOrder = 4;
  if (this->sortorder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->sortorder(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datacatalog.PaginationOptions)
  return target;
}

size_t PaginationOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datacatalog.PaginationOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // uint32 limit = 1;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit());
  }

  // .datacatalog.PaginationOptions.SortKey sortKey = 3;
  if (this->sortkey() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sortkey());
  }

  // .datacatalog.PaginationOptions.SortOrder sortOrder = 4;
  if (this->sortorder() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sortorder());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PaginationOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datacatalog.PaginationOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const PaginationOptions* source =
      ::google::protobuf::DynamicCastToGenerated<PaginationOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datacatalog.PaginationOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datacatalog.PaginationOptions)
    MergeFrom(*source);
  }
}

void PaginationOptions::MergeFrom(const PaginationOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datacatalog.PaginationOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
  if (from.sortkey() != 0) {
    set_sortkey(from.sortkey());
  }
  if (from.sortorder() != 0) {
    set_sortorder(from.sortorder());
  }
}

void PaginationOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datacatalog.PaginationOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaginationOptions::CopyFrom(const PaginationOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datacatalog.PaginationOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaginationOptions::IsInitialized() const {
  return true;
}

void PaginationOptions::Swap(PaginationOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PaginationOptions::InternalSwap(PaginationOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
  swap(sortkey_, other->sortkey_);
  swap(sortorder_, other->sortorder_);
}

::google::protobuf::Metadata PaginationOptions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fdatacatalog_2fdatacatalog_2eproto);
  return ::file_level_metadata_flyteidl_2fdatacatalog_2fdatacatalog_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace datacatalog
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::datacatalog::CreateDatasetRequest* Arena::CreateMaybeMessage< ::datacatalog::CreateDatasetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::CreateDatasetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::CreateDatasetResponse* Arena::CreateMaybeMessage< ::datacatalog::CreateDatasetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::CreateDatasetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::GetDatasetRequest* Arena::CreateMaybeMessage< ::datacatalog::GetDatasetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::GetDatasetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::GetDatasetResponse* Arena::CreateMaybeMessage< ::datacatalog::GetDatasetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::GetDatasetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::GetArtifactRequest* Arena::CreateMaybeMessage< ::datacatalog::GetArtifactRequest >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::GetArtifactRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::GetArtifactResponse* Arena::CreateMaybeMessage< ::datacatalog::GetArtifactResponse >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::GetArtifactResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::CreateArtifactRequest* Arena::CreateMaybeMessage< ::datacatalog::CreateArtifactRequest >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::CreateArtifactRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::CreateArtifactResponse* Arena::CreateMaybeMessage< ::datacatalog::CreateArtifactResponse >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::CreateArtifactResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::AddTagRequest* Arena::CreateMaybeMessage< ::datacatalog::AddTagRequest >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::AddTagRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::AddTagResponse* Arena::CreateMaybeMessage< ::datacatalog::AddTagResponse >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::AddTagResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::ListArtifactsRequest* Arena::CreateMaybeMessage< ::datacatalog::ListArtifactsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::ListArtifactsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::ListArtifactsResponse* Arena::CreateMaybeMessage< ::datacatalog::ListArtifactsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::ListArtifactsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::ListDatasetsRequest* Arena::CreateMaybeMessage< ::datacatalog::ListDatasetsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::ListDatasetsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::ListDatasetsResponse* Arena::CreateMaybeMessage< ::datacatalog::ListDatasetsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::ListDatasetsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::UpdateArtifactRequest* Arena::CreateMaybeMessage< ::datacatalog::UpdateArtifactRequest >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::UpdateArtifactRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::UpdateArtifactResponse* Arena::CreateMaybeMessage< ::datacatalog::UpdateArtifactResponse >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::UpdateArtifactResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::ReservationID* Arena::CreateMaybeMessage< ::datacatalog::ReservationID >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::ReservationID >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::GetOrExtendReservationRequest* Arena::CreateMaybeMessage< ::datacatalog::GetOrExtendReservationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::GetOrExtendReservationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::Reservation* Arena::CreateMaybeMessage< ::datacatalog::Reservation >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::Reservation >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::GetOrExtendReservationResponse* Arena::CreateMaybeMessage< ::datacatalog::GetOrExtendReservationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::GetOrExtendReservationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::ReleaseReservationRequest* Arena::CreateMaybeMessage< ::datacatalog::ReleaseReservationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::ReleaseReservationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::ReleaseReservationResponse* Arena::CreateMaybeMessage< ::datacatalog::ReleaseReservationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::ReleaseReservationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::Dataset* Arena::CreateMaybeMessage< ::datacatalog::Dataset >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::Dataset >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::Partition* Arena::CreateMaybeMessage< ::datacatalog::Partition >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::Partition >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::DatasetID* Arena::CreateMaybeMessage< ::datacatalog::DatasetID >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::DatasetID >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::Artifact* Arena::CreateMaybeMessage< ::datacatalog::Artifact >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::Artifact >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::ArtifactData* Arena::CreateMaybeMessage< ::datacatalog::ArtifactData >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::ArtifactData >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::Tag* Arena::CreateMaybeMessage< ::datacatalog::Tag >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::Tag >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::Metadata_KeyMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::datacatalog::Metadata_KeyMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::Metadata_KeyMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::Metadata* Arena::CreateMaybeMessage< ::datacatalog::Metadata >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::FilterExpression* Arena::CreateMaybeMessage< ::datacatalog::FilterExpression >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::FilterExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::SinglePropertyFilter* Arena::CreateMaybeMessage< ::datacatalog::SinglePropertyFilter >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::SinglePropertyFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::ArtifactPropertyFilter* Arena::CreateMaybeMessage< ::datacatalog::ArtifactPropertyFilter >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::ArtifactPropertyFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::TagPropertyFilter* Arena::CreateMaybeMessage< ::datacatalog::TagPropertyFilter >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::TagPropertyFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::PartitionPropertyFilter* Arena::CreateMaybeMessage< ::datacatalog::PartitionPropertyFilter >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::PartitionPropertyFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::KeyValuePair* Arena::CreateMaybeMessage< ::datacatalog::KeyValuePair >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::KeyValuePair >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::DatasetPropertyFilter* Arena::CreateMaybeMessage< ::datacatalog::DatasetPropertyFilter >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::DatasetPropertyFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::datacatalog::PaginationOptions* Arena::CreateMaybeMessage< ::datacatalog::PaginationOptions >(Arena* arena) {
  return Arena::CreateInternal< ::datacatalog::PaginationOptions >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
