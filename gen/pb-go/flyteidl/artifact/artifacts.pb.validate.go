// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl/artifact/artifacts.proto

package artifact

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _artifacts_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Artifact with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Artifact) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetArtifactId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArtifactValidationError{
				field:  "ArtifactId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArtifactValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ArtifactValidationError is the validation error returned by
// Artifact.Validate if the designated constraints aren't met.
type ArtifactValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArtifactValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArtifactValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArtifactValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArtifactValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArtifactValidationError) ErrorName() string { return "ArtifactValidationError" }

// Error satisfies the builtin error interface
func (e ArtifactValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArtifact.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArtifactValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArtifactValidationError{}

// Validate checks the field values on CreateArtifactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateArtifactRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetArtifactKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateArtifactRequestValidationError{
				field:  "ArtifactKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateArtifactRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Partitions

	// no validation rules for Tag

	return nil
}

// CreateArtifactRequestValidationError is the validation error returned by
// CreateArtifactRequest.Validate if the designated constraints aren't met.
type CreateArtifactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArtifactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArtifactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArtifactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArtifactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArtifactRequestValidationError) ErrorName() string {
	return "CreateArtifactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateArtifactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArtifactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArtifactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArtifactRequestValidationError{}

// Validate checks the field values on ArtifactSpec with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ArtifactSpec) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArtifactSpecValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArtifactSpecValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ShortDescription

	// no validation rules for LongDescription

	switch m.Source.(type) {

	case *ArtifactSpec_TaskExecution:

		if v, ok := interface{}(m.GetTaskExecution()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ArtifactSpecValidationError{
					field:  "TaskExecution",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ArtifactSpec_Execution:

		if v, ok := interface{}(m.GetExecution()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ArtifactSpecValidationError{
					field:  "Execution",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ArtifactSpec_Principal:
		// no validation rules for Principal

	}

	return nil
}

// ArtifactSpecValidationError is the validation error returned by
// ArtifactSpec.Validate if the designated constraints aren't met.
type ArtifactSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArtifactSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArtifactSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArtifactSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArtifactSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArtifactSpecValidationError) ErrorName() string { return "ArtifactSpecValidationError" }

// Error satisfies the builtin error interface
func (e ArtifactSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArtifactSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArtifactSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArtifactSpecValidationError{}

// Validate checks the field values on CreateArtifactResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateArtifactResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetArtifact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateArtifactResponseValidationError{
				field:  "Artifact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateArtifactResponseValidationError is the validation error returned by
// CreateArtifactResponse.Validate if the designated constraints aren't met.
type CreateArtifactResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArtifactResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArtifactResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArtifactResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArtifactResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArtifactResponseValidationError) ErrorName() string {
	return "CreateArtifactResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateArtifactResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArtifactResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArtifactResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArtifactResponseValidationError{}

// Validate checks the field values on GetArtifactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetArtifactRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetArtifactRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Details

	return nil
}

// GetArtifactRequestValidationError is the validation error returned by
// GetArtifactRequest.Validate if the designated constraints aren't met.
type GetArtifactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArtifactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArtifactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArtifactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArtifactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArtifactRequestValidationError) ErrorName() string {
	return "GetArtifactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetArtifactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArtifactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArtifactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArtifactRequestValidationError{}

// Validate checks the field values on GetArtifactResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetArtifactResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetArtifact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetArtifactResponseValidationError{
				field:  "Artifact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetArtifactResponseValidationError is the validation error returned by
// GetArtifactResponse.Validate if the designated constraints aren't met.
type GetArtifactResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArtifactResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArtifactResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArtifactResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArtifactResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArtifactResponseValidationError) ErrorName() string {
	return "GetArtifactResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetArtifactResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArtifactResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArtifactResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArtifactResponseValidationError{}

// Validate checks the field values on ListArtifactNamesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListArtifactNamesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Project

	// no validation rules for Domain

	return nil
}

// ListArtifactNamesRequestValidationError is the validation error returned by
// ListArtifactNamesRequest.Validate if the designated constraints aren't met.
type ListArtifactNamesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListArtifactNamesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListArtifactNamesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListArtifactNamesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListArtifactNamesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListArtifactNamesRequestValidationError) ErrorName() string {
	return "ListArtifactNamesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListArtifactNamesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListArtifactNamesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListArtifactNamesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListArtifactNamesRequestValidationError{}

// Validate checks the field values on ListArtifactNamesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListArtifactNamesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetArtifactKeys() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListArtifactNamesResponseValidationError{
					field:  fmt.Sprintf("ArtifactKeys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListArtifactNamesResponseValidationError is the validation error returned by
// ListArtifactNamesResponse.Validate if the designated constraints aren't met.
type ListArtifactNamesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListArtifactNamesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListArtifactNamesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListArtifactNamesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListArtifactNamesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListArtifactNamesResponseValidationError) ErrorName() string {
	return "ListArtifactNamesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListArtifactNamesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListArtifactNamesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListArtifactNamesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListArtifactNamesResponseValidationError{}

// Validate checks the field values on ListArtifactsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListArtifactsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetArtifactKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListArtifactsRequestValidationError{
				field:  "ArtifactKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListArtifactsRequestValidationError is the validation error returned by
// ListArtifactsRequest.Validate if the designated constraints aren't met.
type ListArtifactsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListArtifactsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListArtifactsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListArtifactsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListArtifactsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListArtifactsRequestValidationError) ErrorName() string {
	return "ListArtifactsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListArtifactsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListArtifactsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListArtifactsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListArtifactsRequestValidationError{}

// Validate checks the field values on ListArtifactsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListArtifactsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetArtifacts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListArtifactsResponseValidationError{
					field:  fmt.Sprintf("Artifacts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListArtifactsResponseValidationError is the validation error returned by
// ListArtifactsResponse.Validate if the designated constraints aren't met.
type ListArtifactsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListArtifactsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListArtifactsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListArtifactsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListArtifactsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListArtifactsResponseValidationError) ErrorName() string {
	return "ListArtifactsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListArtifactsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListArtifactsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListArtifactsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListArtifactsResponseValidationError{}

// Validate checks the field values on AddTagRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AddTagRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetArtifactId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddTagRequestValidationError{
				field:  "ArtifactId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Value

	// no validation rules for Overwrite

	return nil
}

// AddTagRequestValidationError is the validation error returned by
// AddTagRequest.Validate if the designated constraints aren't met.
type AddTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddTagRequestValidationError) ErrorName() string { return "AddTagRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddTagRequestValidationError{}

// Validate checks the field values on AddTagResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AddTagResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// AddTagResponseValidationError is the validation error returned by
// AddTagResponse.Validate if the designated constraints aren't met.
type AddTagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddTagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddTagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddTagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddTagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddTagResponseValidationError) ErrorName() string { return "AddTagResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddTagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddTagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddTagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddTagResponseValidationError{}

// Validate checks the field values on CreateTriggerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTriggerRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetArtifactKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTriggerRequestValidationError{
				field:  "ArtifactKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDownstreamId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTriggerRequestValidationError{
				field:  "DownstreamId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetInputs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTriggerRequestValidationError{
				field:  "Inputs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateTriggerRequestValidationError is the validation error returned by
// CreateTriggerRequest.Validate if the designated constraints aren't met.
type CreateTriggerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTriggerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTriggerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTriggerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTriggerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTriggerRequestValidationError) ErrorName() string {
	return "CreateTriggerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTriggerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTriggerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTriggerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTriggerRequestValidationError{}

// Validate checks the field values on CreateTriggerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTriggerResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateTriggerResponseValidationError is the validation error returned by
// CreateTriggerResponse.Validate if the designated constraints aren't met.
type CreateTriggerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTriggerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTriggerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTriggerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTriggerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTriggerResponseValidationError) ErrorName() string {
	return "CreateTriggerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTriggerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTriggerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTriggerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTriggerResponseValidationError{}

// Validate checks the field values on DeleteTriggerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteTriggerRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetArtifactKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteTriggerRequestValidationError{
				field:  "ArtifactKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDownstreamId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteTriggerRequestValidationError{
				field:  "DownstreamId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteTriggerRequestValidationError is the validation error returned by
// DeleteTriggerRequest.Validate if the designated constraints aren't met.
type DeleteTriggerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTriggerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTriggerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTriggerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTriggerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTriggerRequestValidationError) ErrorName() string {
	return "DeleteTriggerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTriggerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTriggerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTriggerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTriggerRequestValidationError{}

// Validate checks the field values on DeleteTriggerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteTriggerResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteTriggerResponseValidationError is the validation error returned by
// DeleteTriggerResponse.Validate if the designated constraints aren't met.
type DeleteTriggerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTriggerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTriggerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTriggerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTriggerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTriggerResponseValidationError) ErrorName() string {
	return "DeleteTriggerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTriggerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTriggerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTriggerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTriggerResponseValidationError{}
