// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/workflow.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fcore_2fworkflow_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fcore_2fworkflow_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/condition.pb.h"
#include "flyteidl/core/execution.pb.h"
#include "flyteidl/core/identifier.pb.h"
#include "flyteidl/core/interface.pb.h"
#include "flyteidl/core/literals.pb.h"
#include "flyteidl/core/tasks.pb.h"
#include "flyteidl/core/types.pb.h"
#include "flyteidl/core/security.pb.h"
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fworkflow_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fcore_2fworkflow_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fcore_2fworkflow_2eproto();
namespace flyteidl {
namespace core {
class Alias;
class AliasDefaultTypeInternal;
extern AliasDefaultTypeInternal _Alias_default_instance_;
class ApproveCondition;
class ApproveConditionDefaultTypeInternal;
extern ApproveConditionDefaultTypeInternal _ApproveCondition_default_instance_;
class BranchNode;
class BranchNodeDefaultTypeInternal;
extern BranchNodeDefaultTypeInternal _BranchNode_default_instance_;
class GateNode;
class GateNodeDefaultTypeInternal;
extern GateNodeDefaultTypeInternal _GateNode_default_instance_;
class IfBlock;
class IfBlockDefaultTypeInternal;
extern IfBlockDefaultTypeInternal _IfBlock_default_instance_;
class IfElseBlock;
class IfElseBlockDefaultTypeInternal;
extern IfElseBlockDefaultTypeInternal _IfElseBlock_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class NodeMetadata;
class NodeMetadataDefaultTypeInternal;
extern NodeMetadataDefaultTypeInternal _NodeMetadata_default_instance_;
class SignalCondition;
class SignalConditionDefaultTypeInternal;
extern SignalConditionDefaultTypeInternal _SignalCondition_default_instance_;
class SleepCondition;
class SleepConditionDefaultTypeInternal;
extern SleepConditionDefaultTypeInternal _SleepCondition_default_instance_;
class TaskNode;
class TaskNodeDefaultTypeInternal;
extern TaskNodeDefaultTypeInternal _TaskNode_default_instance_;
class TaskNodeOverrides;
class TaskNodeOverridesDefaultTypeInternal;
extern TaskNodeOverridesDefaultTypeInternal _TaskNodeOverrides_default_instance_;
class WorkflowMetadata;
class WorkflowMetadataDefaultTypeInternal;
extern WorkflowMetadataDefaultTypeInternal _WorkflowMetadata_default_instance_;
class WorkflowMetadataDefaults;
class WorkflowMetadataDefaultsDefaultTypeInternal;
extern WorkflowMetadataDefaultsDefaultTypeInternal _WorkflowMetadataDefaults_default_instance_;
class WorkflowMetadata_TagsEntry_DoNotUse;
class WorkflowMetadata_TagsEntry_DoNotUseDefaultTypeInternal;
extern WorkflowMetadata_TagsEntry_DoNotUseDefaultTypeInternal _WorkflowMetadata_TagsEntry_DoNotUse_default_instance_;
class WorkflowNode;
class WorkflowNodeDefaultTypeInternal;
extern WorkflowNodeDefaultTypeInternal _WorkflowNode_default_instance_;
class WorkflowTemplate;
class WorkflowTemplateDefaultTypeInternal;
extern WorkflowTemplateDefaultTypeInternal _WorkflowTemplate_default_instance_;
}  // namespace core
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::core::Alias* Arena::CreateMaybeMessage<::flyteidl::core::Alias>(Arena*);
template<> ::flyteidl::core::ApproveCondition* Arena::CreateMaybeMessage<::flyteidl::core::ApproveCondition>(Arena*);
template<> ::flyteidl::core::BranchNode* Arena::CreateMaybeMessage<::flyteidl::core::BranchNode>(Arena*);
template<> ::flyteidl::core::GateNode* Arena::CreateMaybeMessage<::flyteidl::core::GateNode>(Arena*);
template<> ::flyteidl::core::IfBlock* Arena::CreateMaybeMessage<::flyteidl::core::IfBlock>(Arena*);
template<> ::flyteidl::core::IfElseBlock* Arena::CreateMaybeMessage<::flyteidl::core::IfElseBlock>(Arena*);
template<> ::flyteidl::core::Node* Arena::CreateMaybeMessage<::flyteidl::core::Node>(Arena*);
template<> ::flyteidl::core::NodeMetadata* Arena::CreateMaybeMessage<::flyteidl::core::NodeMetadata>(Arena*);
template<> ::flyteidl::core::SignalCondition* Arena::CreateMaybeMessage<::flyteidl::core::SignalCondition>(Arena*);
template<> ::flyteidl::core::SleepCondition* Arena::CreateMaybeMessage<::flyteidl::core::SleepCondition>(Arena*);
template<> ::flyteidl::core::TaskNode* Arena::CreateMaybeMessage<::flyteidl::core::TaskNode>(Arena*);
template<> ::flyteidl::core::TaskNodeOverrides* Arena::CreateMaybeMessage<::flyteidl::core::TaskNodeOverrides>(Arena*);
template<> ::flyteidl::core::WorkflowMetadata* Arena::CreateMaybeMessage<::flyteidl::core::WorkflowMetadata>(Arena*);
template<> ::flyteidl::core::WorkflowMetadataDefaults* Arena::CreateMaybeMessage<::flyteidl::core::WorkflowMetadataDefaults>(Arena*);
template<> ::flyteidl::core::WorkflowMetadata_TagsEntry_DoNotUse* Arena::CreateMaybeMessage<::flyteidl::core::WorkflowMetadata_TagsEntry_DoNotUse>(Arena*);
template<> ::flyteidl::core::WorkflowNode* Arena::CreateMaybeMessage<::flyteidl::core::WorkflowNode>(Arena*);
template<> ::flyteidl::core::WorkflowTemplate* Arena::CreateMaybeMessage<::flyteidl::core::WorkflowTemplate>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace core {

enum WorkflowMetadata_OnFailurePolicy {
  WorkflowMetadata_OnFailurePolicy_FAIL_IMMEDIATELY = 0,
  WorkflowMetadata_OnFailurePolicy_FAIL_AFTER_EXECUTABLE_NODES_COMPLETE = 1,
  WorkflowMetadata_OnFailurePolicy_WorkflowMetadata_OnFailurePolicy_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  WorkflowMetadata_OnFailurePolicy_WorkflowMetadata_OnFailurePolicy_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool WorkflowMetadata_OnFailurePolicy_IsValid(int value);
const WorkflowMetadata_OnFailurePolicy WorkflowMetadata_OnFailurePolicy_OnFailurePolicy_MIN = WorkflowMetadata_OnFailurePolicy_FAIL_IMMEDIATELY;
const WorkflowMetadata_OnFailurePolicy WorkflowMetadata_OnFailurePolicy_OnFailurePolicy_MAX = WorkflowMetadata_OnFailurePolicy_FAIL_AFTER_EXECUTABLE_NODES_COMPLETE;
const int WorkflowMetadata_OnFailurePolicy_OnFailurePolicy_ARRAYSIZE = WorkflowMetadata_OnFailurePolicy_OnFailurePolicy_MAX + 1;

const ::google::protobuf::EnumDescriptor* WorkflowMetadata_OnFailurePolicy_descriptor();
inline const ::std::string& WorkflowMetadata_OnFailurePolicy_Name(WorkflowMetadata_OnFailurePolicy value) {
  return ::google::protobuf::internal::NameOfEnum(
    WorkflowMetadata_OnFailurePolicy_descriptor(), value);
}
inline bool WorkflowMetadata_OnFailurePolicy_Parse(
    const ::std::string& name, WorkflowMetadata_OnFailurePolicy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WorkflowMetadata_OnFailurePolicy>(
    WorkflowMetadata_OnFailurePolicy_descriptor(), name, value);
}
// ===================================================================

class IfBlock final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.IfBlock) */ {
 public:
  IfBlock();
  virtual ~IfBlock();

  IfBlock(const IfBlock& from);

  inline IfBlock& operator=(const IfBlock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IfBlock(IfBlock&& from) noexcept
    : IfBlock() {
    *this = ::std::move(from);
  }

  inline IfBlock& operator=(IfBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IfBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IfBlock* internal_default_instance() {
    return reinterpret_cast<const IfBlock*>(
               &_IfBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(IfBlock* other);
  friend void swap(IfBlock& a, IfBlock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IfBlock* New() const final {
    return CreateMaybeMessage<IfBlock>(nullptr);
  }

  IfBlock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IfBlock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IfBlock& from);
  void MergeFrom(const IfBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IfBlock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.BooleanExpression condition = 1;
  bool has_condition() const;
  void clear_condition();
  static const int kConditionFieldNumber = 1;
  const ::flyteidl::core::BooleanExpression& condition() const;
  ::flyteidl::core::BooleanExpression* release_condition();
  ::flyteidl::core::BooleanExpression* mutable_condition();
  void set_allocated_condition(::flyteidl::core::BooleanExpression* condition);

  // .flyteidl.core.Node then_node = 2;
  bool has_then_node() const;
  void clear_then_node();
  static const int kThenNodeFieldNumber = 2;
  const ::flyteidl::core::Node& then_node() const;
  ::flyteidl::core::Node* release_then_node();
  ::flyteidl::core::Node* mutable_then_node();
  void set_allocated_then_node(::flyteidl::core::Node* then_node);

  // @@protoc_insertion_point(class_scope:flyteidl.core.IfBlock)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::BooleanExpression* condition_;
  ::flyteidl::core::Node* then_node_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class IfElseBlock final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.IfElseBlock) */ {
 public:
  IfElseBlock();
  virtual ~IfElseBlock();

  IfElseBlock(const IfElseBlock& from);

  inline IfElseBlock& operator=(const IfElseBlock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IfElseBlock(IfElseBlock&& from) noexcept
    : IfElseBlock() {
    *this = ::std::move(from);
  }

  inline IfElseBlock& operator=(IfElseBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IfElseBlock& default_instance();

  enum DefaultCase {
    kElseNode = 3,
    kError = 4,
    DEFAULT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IfElseBlock* internal_default_instance() {
    return reinterpret_cast<const IfElseBlock*>(
               &_IfElseBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(IfElseBlock* other);
  friend void swap(IfElseBlock& a, IfElseBlock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IfElseBlock* New() const final {
    return CreateMaybeMessage<IfElseBlock>(nullptr);
  }

  IfElseBlock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IfElseBlock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IfElseBlock& from);
  void MergeFrom(const IfElseBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IfElseBlock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.core.IfBlock other = 2;
  int other_size() const;
  void clear_other();
  static const int kOtherFieldNumber = 2;
  ::flyteidl::core::IfBlock* mutable_other(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::IfBlock >*
      mutable_other();
  const ::flyteidl::core::IfBlock& other(int index) const;
  ::flyteidl::core::IfBlock* add_other();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::IfBlock >&
      other() const;

  // .flyteidl.core.IfBlock case = 1;
  bool has_case_() const;
  void clear_case_();
  static const int kCaseFieldNumber = 1;
  const ::flyteidl::core::IfBlock& case_() const;
  ::flyteidl::core::IfBlock* release_case_();
  ::flyteidl::core::IfBlock* mutable_case_();
  void set_allocated_case_(::flyteidl::core::IfBlock* case_);

  // .flyteidl.core.Node else_node = 3;
  bool has_else_node() const;
  void clear_else_node();
  static const int kElseNodeFieldNumber = 3;
  const ::flyteidl::core::Node& else_node() const;
  ::flyteidl::core::Node* release_else_node();
  ::flyteidl::core::Node* mutable_else_node();
  void set_allocated_else_node(::flyteidl::core::Node* else_node);

  // .flyteidl.core.Error error = 4;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 4;
  const ::flyteidl::core::Error& error() const;
  ::flyteidl::core::Error* release_error();
  ::flyteidl::core::Error* mutable_error();
  void set_allocated_error(::flyteidl::core::Error* error);

  void clear_default();
  DefaultCase default_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.core.IfElseBlock)
 private:
  class HasBitSetters;
  void set_has_else_node();
  void set_has_error();

  inline bool has_default() const;
  inline void clear_has_default();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::IfBlock > other_;
  ::flyteidl::core::IfBlock* case__;
  union DefaultUnion {
    DefaultUnion() {}
    ::flyteidl::core::Node* else_node_;
    ::flyteidl::core::Error* error_;
  } default_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class BranchNode final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.BranchNode) */ {
 public:
  BranchNode();
  virtual ~BranchNode();

  BranchNode(const BranchNode& from);

  inline BranchNode& operator=(const BranchNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BranchNode(BranchNode&& from) noexcept
    : BranchNode() {
    *this = ::std::move(from);
  }

  inline BranchNode& operator=(BranchNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BranchNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BranchNode* internal_default_instance() {
    return reinterpret_cast<const BranchNode*>(
               &_BranchNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(BranchNode* other);
  friend void swap(BranchNode& a, BranchNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BranchNode* New() const final {
    return CreateMaybeMessage<BranchNode>(nullptr);
  }

  BranchNode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BranchNode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BranchNode& from);
  void MergeFrom(const BranchNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BranchNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.IfElseBlock if_else = 1;
  bool has_if_else() const;
  void clear_if_else();
  static const int kIfElseFieldNumber = 1;
  const ::flyteidl::core::IfElseBlock& if_else() const;
  ::flyteidl::core::IfElseBlock* release_if_else();
  ::flyteidl::core::IfElseBlock* mutable_if_else();
  void set_allocated_if_else(::flyteidl::core::IfElseBlock* if_else);

  // @@protoc_insertion_point(class_scope:flyteidl.core.BranchNode)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::IfElseBlock* if_else_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class TaskNode final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.TaskNode) */ {
 public:
  TaskNode();
  virtual ~TaskNode();

  TaskNode(const TaskNode& from);

  inline TaskNode& operator=(const TaskNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskNode(TaskNode&& from) noexcept
    : TaskNode() {
    *this = ::std::move(from);
  }

  inline TaskNode& operator=(TaskNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskNode& default_instance();

  enum ReferenceCase {
    kReferenceId = 1,
    REFERENCE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskNode* internal_default_instance() {
    return reinterpret_cast<const TaskNode*>(
               &_TaskNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TaskNode* other);
  friend void swap(TaskNode& a, TaskNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskNode* New() const final {
    return CreateMaybeMessage<TaskNode>(nullptr);
  }

  TaskNode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskNode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskNode& from);
  void MergeFrom(const TaskNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.TaskNodeOverrides overrides = 2;
  bool has_overrides() const;
  void clear_overrides();
  static const int kOverridesFieldNumber = 2;
  const ::flyteidl::core::TaskNodeOverrides& overrides() const;
  ::flyteidl::core::TaskNodeOverrides* release_overrides();
  ::flyteidl::core::TaskNodeOverrides* mutable_overrides();
  void set_allocated_overrides(::flyteidl::core::TaskNodeOverrides* overrides);

  // .flyteidl.core.Identifier reference_id = 1;
  bool has_reference_id() const;
  void clear_reference_id();
  static const int kReferenceIdFieldNumber = 1;
  const ::flyteidl::core::Identifier& reference_id() const;
  ::flyteidl::core::Identifier* release_reference_id();
  ::flyteidl::core::Identifier* mutable_reference_id();
  void set_allocated_reference_id(::flyteidl::core::Identifier* reference_id);

  void clear_reference();
  ReferenceCase reference_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.core.TaskNode)
 private:
  class HasBitSetters;
  void set_has_reference_id();

  inline bool has_reference() const;
  inline void clear_has_reference();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::TaskNodeOverrides* overrides_;
  union ReferenceUnion {
    ReferenceUnion() {}
    ::flyteidl::core::Identifier* reference_id_;
  } reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class WorkflowNode final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.WorkflowNode) */ {
 public:
  WorkflowNode();
  virtual ~WorkflowNode();

  WorkflowNode(const WorkflowNode& from);

  inline WorkflowNode& operator=(const WorkflowNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowNode(WorkflowNode&& from) noexcept
    : WorkflowNode() {
    *this = ::std::move(from);
  }

  inline WorkflowNode& operator=(WorkflowNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WorkflowNode& default_instance();

  enum ReferenceCase {
    kLaunchplanRef = 1,
    kSubWorkflowRef = 2,
    REFERENCE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowNode* internal_default_instance() {
    return reinterpret_cast<const WorkflowNode*>(
               &_WorkflowNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(WorkflowNode* other);
  friend void swap(WorkflowNode& a, WorkflowNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowNode* New() const final {
    return CreateMaybeMessage<WorkflowNode>(nullptr);
  }

  WorkflowNode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowNode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WorkflowNode& from);
  void MergeFrom(const WorkflowNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.Identifier launchplan_ref = 1;
  bool has_launchplan_ref() const;
  void clear_launchplan_ref();
  static const int kLaunchplanRefFieldNumber = 1;
  const ::flyteidl::core::Identifier& launchplan_ref() const;
  ::flyteidl::core::Identifier* release_launchplan_ref();
  ::flyteidl::core::Identifier* mutable_launchplan_ref();
  void set_allocated_launchplan_ref(::flyteidl::core::Identifier* launchplan_ref);

  // .flyteidl.core.Identifier sub_workflow_ref = 2;
  bool has_sub_workflow_ref() const;
  void clear_sub_workflow_ref();
  static const int kSubWorkflowRefFieldNumber = 2;
  const ::flyteidl::core::Identifier& sub_workflow_ref() const;
  ::flyteidl::core::Identifier* release_sub_workflow_ref();
  ::flyteidl::core::Identifier* mutable_sub_workflow_ref();
  void set_allocated_sub_workflow_ref(::flyteidl::core::Identifier* sub_workflow_ref);

  void clear_reference();
  ReferenceCase reference_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.core.WorkflowNode)
 private:
  class HasBitSetters;
  void set_has_launchplan_ref();
  void set_has_sub_workflow_ref();

  inline bool has_reference() const;
  inline void clear_has_reference();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ReferenceUnion {
    ReferenceUnion() {}
    ::flyteidl::core::Identifier* launchplan_ref_;
    ::flyteidl::core::Identifier* sub_workflow_ref_;
  } reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class ApproveCondition final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.ApproveCondition) */ {
 public:
  ApproveCondition();
  virtual ~ApproveCondition();

  ApproveCondition(const ApproveCondition& from);

  inline ApproveCondition& operator=(const ApproveCondition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ApproveCondition(ApproveCondition&& from) noexcept
    : ApproveCondition() {
    *this = ::std::move(from);
  }

  inline ApproveCondition& operator=(ApproveCondition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ApproveCondition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApproveCondition* internal_default_instance() {
    return reinterpret_cast<const ApproveCondition*>(
               &_ApproveCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ApproveCondition* other);
  friend void swap(ApproveCondition& a, ApproveCondition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ApproveCondition* New() const final {
    return CreateMaybeMessage<ApproveCondition>(nullptr);
  }

  ApproveCondition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ApproveCondition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ApproveCondition& from);
  void MergeFrom(const ApproveCondition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApproveCondition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string signal_id = 1;
  void clear_signal_id();
  static const int kSignalIdFieldNumber = 1;
  const ::std::string& signal_id() const;
  void set_signal_id(const ::std::string& value);
  #if LANG_CXX11
  void set_signal_id(::std::string&& value);
  #endif
  void set_signal_id(const char* value);
  void set_signal_id(const char* value, size_t size);
  ::std::string* mutable_signal_id();
  ::std::string* release_signal_id();
  void set_allocated_signal_id(::std::string* signal_id);

  // @@protoc_insertion_point(class_scope:flyteidl.core.ApproveCondition)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr signal_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class SignalCondition final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.SignalCondition) */ {
 public:
  SignalCondition();
  virtual ~SignalCondition();

  SignalCondition(const SignalCondition& from);

  inline SignalCondition& operator=(const SignalCondition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignalCondition(SignalCondition&& from) noexcept
    : SignalCondition() {
    *this = ::std::move(from);
  }

  inline SignalCondition& operator=(SignalCondition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SignalCondition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignalCondition* internal_default_instance() {
    return reinterpret_cast<const SignalCondition*>(
               &_SignalCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(SignalCondition* other);
  friend void swap(SignalCondition& a, SignalCondition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignalCondition* New() const final {
    return CreateMaybeMessage<SignalCondition>(nullptr);
  }

  SignalCondition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SignalCondition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SignalCondition& from);
  void MergeFrom(const SignalCondition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalCondition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string signal_id = 1;
  void clear_signal_id();
  static const int kSignalIdFieldNumber = 1;
  const ::std::string& signal_id() const;
  void set_signal_id(const ::std::string& value);
  #if LANG_CXX11
  void set_signal_id(::std::string&& value);
  #endif
  void set_signal_id(const char* value);
  void set_signal_id(const char* value, size_t size);
  ::std::string* mutable_signal_id();
  ::std::string* release_signal_id();
  void set_allocated_signal_id(::std::string* signal_id);

  // string output_variable_name = 3;
  void clear_output_variable_name();
  static const int kOutputVariableNameFieldNumber = 3;
  const ::std::string& output_variable_name() const;
  void set_output_variable_name(const ::std::string& value);
  #if LANG_CXX11
  void set_output_variable_name(::std::string&& value);
  #endif
  void set_output_variable_name(const char* value);
  void set_output_variable_name(const char* value, size_t size);
  ::std::string* mutable_output_variable_name();
  ::std::string* release_output_variable_name();
  void set_allocated_output_variable_name(::std::string* output_variable_name);

  // .flyteidl.core.LiteralType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::flyteidl::core::LiteralType& type() const;
  ::flyteidl::core::LiteralType* release_type();
  ::flyteidl::core::LiteralType* mutable_type();
  void set_allocated_type(::flyteidl::core::LiteralType* type);

  // @@protoc_insertion_point(class_scope:flyteidl.core.SignalCondition)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr signal_id_;
  ::google::protobuf::internal::ArenaStringPtr output_variable_name_;
  ::flyteidl::core::LiteralType* type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class SleepCondition final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.SleepCondition) */ {
 public:
  SleepCondition();
  virtual ~SleepCondition();

  SleepCondition(const SleepCondition& from);

  inline SleepCondition& operator=(const SleepCondition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SleepCondition(SleepCondition&& from) noexcept
    : SleepCondition() {
    *this = ::std::move(from);
  }

  inline SleepCondition& operator=(SleepCondition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SleepCondition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SleepCondition* internal_default_instance() {
    return reinterpret_cast<const SleepCondition*>(
               &_SleepCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(SleepCondition* other);
  friend void swap(SleepCondition& a, SleepCondition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SleepCondition* New() const final {
    return CreateMaybeMessage<SleepCondition>(nullptr);
  }

  SleepCondition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SleepCondition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SleepCondition& from);
  void MergeFrom(const SleepCondition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SleepCondition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Duration duration = 1;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 1;
  const ::google::protobuf::Duration& duration() const;
  ::google::protobuf::Duration* release_duration();
  ::google::protobuf::Duration* mutable_duration();
  void set_allocated_duration(::google::protobuf::Duration* duration);

  // @@protoc_insertion_point(class_scope:flyteidl.core.SleepCondition)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Duration* duration_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class GateNode final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.GateNode) */ {
 public:
  GateNode();
  virtual ~GateNode();

  GateNode(const GateNode& from);

  inline GateNode& operator=(const GateNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GateNode(GateNode&& from) noexcept
    : GateNode() {
    *this = ::std::move(from);
  }

  inline GateNode& operator=(GateNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GateNode& default_instance();

  enum ConditionCase {
    kApprove = 1,
    kSignal = 2,
    kSleep = 3,
    CONDITION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GateNode* internal_default_instance() {
    return reinterpret_cast<const GateNode*>(
               &_GateNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(GateNode* other);
  friend void swap(GateNode& a, GateNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GateNode* New() const final {
    return CreateMaybeMessage<GateNode>(nullptr);
  }

  GateNode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GateNode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GateNode& from);
  void MergeFrom(const GateNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GateNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.ApproveCondition approve = 1;
  bool has_approve() const;
  void clear_approve();
  static const int kApproveFieldNumber = 1;
  const ::flyteidl::core::ApproveCondition& approve() const;
  ::flyteidl::core::ApproveCondition* release_approve();
  ::flyteidl::core::ApproveCondition* mutable_approve();
  void set_allocated_approve(::flyteidl::core::ApproveCondition* approve);

  // .flyteidl.core.SignalCondition signal = 2;
  bool has_signal() const;
  void clear_signal();
  static const int kSignalFieldNumber = 2;
  const ::flyteidl::core::SignalCondition& signal() const;
  ::flyteidl::core::SignalCondition* release_signal();
  ::flyteidl::core::SignalCondition* mutable_signal();
  void set_allocated_signal(::flyteidl::core::SignalCondition* signal);

  // .flyteidl.core.SleepCondition sleep = 3;
  bool has_sleep() const;
  void clear_sleep();
  static const int kSleepFieldNumber = 3;
  const ::flyteidl::core::SleepCondition& sleep() const;
  ::flyteidl::core::SleepCondition* release_sleep();
  ::flyteidl::core::SleepCondition* mutable_sleep();
  void set_allocated_sleep(::flyteidl::core::SleepCondition* sleep);

  void clear_condition();
  ConditionCase condition_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.core.GateNode)
 private:
  class HasBitSetters;
  void set_has_approve();
  void set_has_signal();
  void set_has_sleep();

  inline bool has_condition() const;
  inline void clear_has_condition();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ConditionUnion {
    ConditionUnion() {}
    ::flyteidl::core::ApproveCondition* approve_;
    ::flyteidl::core::SignalCondition* signal_;
    ::flyteidl::core::SleepCondition* sleep_;
  } condition_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class NodeMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.NodeMetadata) */ {
 public:
  NodeMetadata();
  virtual ~NodeMetadata();

  NodeMetadata(const NodeMetadata& from);

  inline NodeMetadata& operator=(const NodeMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeMetadata(NodeMetadata&& from) noexcept
    : NodeMetadata() {
    *this = ::std::move(from);
  }

  inline NodeMetadata& operator=(NodeMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeMetadata& default_instance();

  enum InterruptibleValueCase {
    kInterruptible = 6,
    INTERRUPTIBLE_VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeMetadata* internal_default_instance() {
    return reinterpret_cast<const NodeMetadata*>(
               &_NodeMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(NodeMetadata* other);
  friend void swap(NodeMetadata& a, NodeMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeMetadata* New() const final {
    return CreateMaybeMessage<NodeMetadata>(nullptr);
  }

  NodeMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeMetadata& from);
  void MergeFrom(const NodeMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.protobuf.Duration timeout = 4;
  bool has_timeout() const;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 4;
  const ::google::protobuf::Duration& timeout() const;
  ::google::protobuf::Duration* release_timeout();
  ::google::protobuf::Duration* mutable_timeout();
  void set_allocated_timeout(::google::protobuf::Duration* timeout);

  // .flyteidl.core.RetryStrategy retries = 5;
  bool has_retries() const;
  void clear_retries();
  static const int kRetriesFieldNumber = 5;
  const ::flyteidl::core::RetryStrategy& retries() const;
  ::flyteidl::core::RetryStrategy* release_retries();
  ::flyteidl::core::RetryStrategy* mutable_retries();
  void set_allocated_retries(::flyteidl::core::RetryStrategy* retries);

  // bool interruptible = 6;
  private:
  bool has_interruptible() const;
  public:
  void clear_interruptible();
  static const int kInterruptibleFieldNumber = 6;
  bool interruptible() const;
  void set_interruptible(bool value);

  void clear_interruptible_value();
  InterruptibleValueCase interruptible_value_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.core.NodeMetadata)
 private:
  class HasBitSetters;
  void set_has_interruptible();

  inline bool has_interruptible_value() const;
  inline void clear_has_interruptible_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Duration* timeout_;
  ::flyteidl::core::RetryStrategy* retries_;
  union InterruptibleValueUnion {
    InterruptibleValueUnion() {}
    bool interruptible_;
  } interruptible_value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class Alias final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.Alias) */ {
 public:
  Alias();
  virtual ~Alias();

  Alias(const Alias& from);

  inline Alias& operator=(const Alias& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Alias(Alias&& from) noexcept
    : Alias() {
    *this = ::std::move(from);
  }

  inline Alias& operator=(Alias&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Alias& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Alias* internal_default_instance() {
    return reinterpret_cast<const Alias*>(
               &_Alias_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Alias* other);
  friend void swap(Alias& a, Alias& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Alias* New() const final {
    return CreateMaybeMessage<Alias>(nullptr);
  }

  Alias* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Alias>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Alias& from);
  void MergeFrom(const Alias& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Alias* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string var = 1;
  void clear_var();
  static const int kVarFieldNumber = 1;
  const ::std::string& var() const;
  void set_var(const ::std::string& value);
  #if LANG_CXX11
  void set_var(::std::string&& value);
  #endif
  void set_var(const char* value);
  void set_var(const char* value, size_t size);
  ::std::string* mutable_var();
  ::std::string* release_var();
  void set_allocated_var(::std::string* var);

  // string alias = 2;
  void clear_alias();
  static const int kAliasFieldNumber = 2;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // @@protoc_insertion_point(class_scope:flyteidl.core.Alias)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr var_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class Node final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Node& default_instance();

  enum TargetCase {
    kTaskNode = 6,
    kWorkflowNode = 7,
    kBranchNode = 8,
    kGateNode = 9,
    TARGET_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Node* other);
  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const final {
    return CreateMaybeMessage<Node>(nullptr);
  }

  Node* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.core.Binding inputs = 3;
  int inputs_size() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 3;
  ::flyteidl::core::Binding* mutable_inputs(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Binding >*
      mutable_inputs();
  const ::flyteidl::core::Binding& inputs(int index) const;
  ::flyteidl::core::Binding* add_inputs();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Binding >&
      inputs() const;

  // repeated string upstream_node_ids = 4;
  int upstream_node_ids_size() const;
  void clear_upstream_node_ids();
  static const int kUpstreamNodeIdsFieldNumber = 4;
  const ::std::string& upstream_node_ids(int index) const;
  ::std::string* mutable_upstream_node_ids(int index);
  void set_upstream_node_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_upstream_node_ids(int index, ::std::string&& value);
  #endif
  void set_upstream_node_ids(int index, const char* value);
  void set_upstream_node_ids(int index, const char* value, size_t size);
  ::std::string* add_upstream_node_ids();
  void add_upstream_node_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_upstream_node_ids(::std::string&& value);
  #endif
  void add_upstream_node_ids(const char* value);
  void add_upstream_node_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& upstream_node_ids() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_upstream_node_ids();

  // repeated .flyteidl.core.Alias output_aliases = 5;
  int output_aliases_size() const;
  void clear_output_aliases();
  static const int kOutputAliasesFieldNumber = 5;
  ::flyteidl::core::Alias* mutable_output_aliases(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Alias >*
      mutable_output_aliases();
  const ::flyteidl::core::Alias& output_aliases(int index) const;
  ::flyteidl::core::Alias* add_output_aliases();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Alias >&
      output_aliases() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .flyteidl.core.NodeMetadata metadata = 2;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  const ::flyteidl::core::NodeMetadata& metadata() const;
  ::flyteidl::core::NodeMetadata* release_metadata();
  ::flyteidl::core::NodeMetadata* mutable_metadata();
  void set_allocated_metadata(::flyteidl::core::NodeMetadata* metadata);

  // .flyteidl.core.TaskNode task_node = 6;
  bool has_task_node() const;
  void clear_task_node();
  static const int kTaskNodeFieldNumber = 6;
  const ::flyteidl::core::TaskNode& task_node() const;
  ::flyteidl::core::TaskNode* release_task_node();
  ::flyteidl::core::TaskNode* mutable_task_node();
  void set_allocated_task_node(::flyteidl::core::TaskNode* task_node);

  // .flyteidl.core.WorkflowNode workflow_node = 7;
  bool has_workflow_node() const;
  void clear_workflow_node();
  static const int kWorkflowNodeFieldNumber = 7;
  const ::flyteidl::core::WorkflowNode& workflow_node() const;
  ::flyteidl::core::WorkflowNode* release_workflow_node();
  ::flyteidl::core::WorkflowNode* mutable_workflow_node();
  void set_allocated_workflow_node(::flyteidl::core::WorkflowNode* workflow_node);

  // .flyteidl.core.BranchNode branch_node = 8;
  bool has_branch_node() const;
  void clear_branch_node();
  static const int kBranchNodeFieldNumber = 8;
  const ::flyteidl::core::BranchNode& branch_node() const;
  ::flyteidl::core::BranchNode* release_branch_node();
  ::flyteidl::core::BranchNode* mutable_branch_node();
  void set_allocated_branch_node(::flyteidl::core::BranchNode* branch_node);

  // .flyteidl.core.GateNode gate_node = 9;
  bool has_gate_node() const;
  void clear_gate_node();
  static const int kGateNodeFieldNumber = 9;
  const ::flyteidl::core::GateNode& gate_node() const;
  ::flyteidl::core::GateNode* release_gate_node();
  ::flyteidl::core::GateNode* mutable_gate_node();
  void set_allocated_gate_node(::flyteidl::core::GateNode* gate_node);

  void clear_target();
  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.core.Node)
 private:
  class HasBitSetters;
  void set_has_task_node();
  void set_has_workflow_node();
  void set_has_branch_node();
  void set_has_gate_node();

  inline bool has_target() const;
  inline void clear_has_target();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Binding > inputs_;
  ::google::protobuf::RepeatedPtrField<::std::string> upstream_node_ids_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Alias > output_aliases_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::flyteidl::core::NodeMetadata* metadata_;
  union TargetUnion {
    TargetUnion() {}
    ::flyteidl::core::TaskNode* task_node_;
    ::flyteidl::core::WorkflowNode* workflow_node_;
    ::flyteidl::core::BranchNode* branch_node_;
    ::flyteidl::core::GateNode* gate_node_;
  } target_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class WorkflowMetadata_TagsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<WorkflowMetadata_TagsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<WorkflowMetadata_TagsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  WorkflowMetadata_TagsEntry_DoNotUse();
  WorkflowMetadata_TagsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const WorkflowMetadata_TagsEntry_DoNotUse& other);
  static const WorkflowMetadata_TagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const WorkflowMetadata_TagsEntry_DoNotUse*>(&_WorkflowMetadata_TagsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class WorkflowMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.WorkflowMetadata) */ {
 public:
  WorkflowMetadata();
  virtual ~WorkflowMetadata();

  WorkflowMetadata(const WorkflowMetadata& from);

  inline WorkflowMetadata& operator=(const WorkflowMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowMetadata(WorkflowMetadata&& from) noexcept
    : WorkflowMetadata() {
    *this = ::std::move(from);
  }

  inline WorkflowMetadata& operator=(WorkflowMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WorkflowMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowMetadata* internal_default_instance() {
    return reinterpret_cast<const WorkflowMetadata*>(
               &_WorkflowMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(WorkflowMetadata* other);
  friend void swap(WorkflowMetadata& a, WorkflowMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowMetadata* New() const final {
    return CreateMaybeMessage<WorkflowMetadata>(nullptr);
  }

  WorkflowMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WorkflowMetadata& from);
  void MergeFrom(const WorkflowMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef WorkflowMetadata_OnFailurePolicy OnFailurePolicy;
  static const OnFailurePolicy FAIL_IMMEDIATELY =
    WorkflowMetadata_OnFailurePolicy_FAIL_IMMEDIATELY;
  static const OnFailurePolicy FAIL_AFTER_EXECUTABLE_NODES_COMPLETE =
    WorkflowMetadata_OnFailurePolicy_FAIL_AFTER_EXECUTABLE_NODES_COMPLETE;
  static inline bool OnFailurePolicy_IsValid(int value) {
    return WorkflowMetadata_OnFailurePolicy_IsValid(value);
  }
  static const OnFailurePolicy OnFailurePolicy_MIN =
    WorkflowMetadata_OnFailurePolicy_OnFailurePolicy_MIN;
  static const OnFailurePolicy OnFailurePolicy_MAX =
    WorkflowMetadata_OnFailurePolicy_OnFailurePolicy_MAX;
  static const int OnFailurePolicy_ARRAYSIZE =
    WorkflowMetadata_OnFailurePolicy_OnFailurePolicy_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OnFailurePolicy_descriptor() {
    return WorkflowMetadata_OnFailurePolicy_descriptor();
  }
  static inline const ::std::string& OnFailurePolicy_Name(OnFailurePolicy value) {
    return WorkflowMetadata_OnFailurePolicy_Name(value);
  }
  static inline bool OnFailurePolicy_Parse(const ::std::string& name,
      OnFailurePolicy* value) {
    return WorkflowMetadata_OnFailurePolicy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // map<string, string> tags = 3;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      tags() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_tags();

  // .flyteidl.core.QualityOfService quality_of_service = 1;
  bool has_quality_of_service() const;
  void clear_quality_of_service();
  static const int kQualityOfServiceFieldNumber = 1;
  const ::flyteidl::core::QualityOfService& quality_of_service() const;
  ::flyteidl::core::QualityOfService* release_quality_of_service();
  ::flyteidl::core::QualityOfService* mutable_quality_of_service();
  void set_allocated_quality_of_service(::flyteidl::core::QualityOfService* quality_of_service);

  // .flyteidl.core.WorkflowMetadata.OnFailurePolicy on_failure = 2;
  void clear_on_failure();
  static const int kOnFailureFieldNumber = 2;
  ::flyteidl::core::WorkflowMetadata_OnFailurePolicy on_failure() const;
  void set_on_failure(::flyteidl::core::WorkflowMetadata_OnFailurePolicy value);

  // @@protoc_insertion_point(class_scope:flyteidl.core.WorkflowMetadata)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      WorkflowMetadata_TagsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > tags_;
  ::flyteidl::core::QualityOfService* quality_of_service_;
  int on_failure_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class WorkflowMetadataDefaults final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.WorkflowMetadataDefaults) */ {
 public:
  WorkflowMetadataDefaults();
  virtual ~WorkflowMetadataDefaults();

  WorkflowMetadataDefaults(const WorkflowMetadataDefaults& from);

  inline WorkflowMetadataDefaults& operator=(const WorkflowMetadataDefaults& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowMetadataDefaults(WorkflowMetadataDefaults&& from) noexcept
    : WorkflowMetadataDefaults() {
    *this = ::std::move(from);
  }

  inline WorkflowMetadataDefaults& operator=(WorkflowMetadataDefaults&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WorkflowMetadataDefaults& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowMetadataDefaults* internal_default_instance() {
    return reinterpret_cast<const WorkflowMetadataDefaults*>(
               &_WorkflowMetadataDefaults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(WorkflowMetadataDefaults* other);
  friend void swap(WorkflowMetadataDefaults& a, WorkflowMetadataDefaults& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowMetadataDefaults* New() const final {
    return CreateMaybeMessage<WorkflowMetadataDefaults>(nullptr);
  }

  WorkflowMetadataDefaults* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowMetadataDefaults>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WorkflowMetadataDefaults& from);
  void MergeFrom(const WorkflowMetadataDefaults& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowMetadataDefaults* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool interruptible = 1;
  void clear_interruptible();
  static const int kInterruptibleFieldNumber = 1;
  bool interruptible() const;
  void set_interruptible(bool value);

  // @@protoc_insertion_point(class_scope:flyteidl.core.WorkflowMetadataDefaults)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool interruptible_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class WorkflowTemplate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.WorkflowTemplate) */ {
 public:
  WorkflowTemplate();
  virtual ~WorkflowTemplate();

  WorkflowTemplate(const WorkflowTemplate& from);

  inline WorkflowTemplate& operator=(const WorkflowTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowTemplate(WorkflowTemplate&& from) noexcept
    : WorkflowTemplate() {
    *this = ::std::move(from);
  }

  inline WorkflowTemplate& operator=(WorkflowTemplate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WorkflowTemplate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowTemplate* internal_default_instance() {
    return reinterpret_cast<const WorkflowTemplate*>(
               &_WorkflowTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(WorkflowTemplate* other);
  friend void swap(WorkflowTemplate& a, WorkflowTemplate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowTemplate* New() const final {
    return CreateMaybeMessage<WorkflowTemplate>(nullptr);
  }

  WorkflowTemplate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowTemplate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WorkflowTemplate& from);
  void MergeFrom(const WorkflowTemplate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowTemplate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.core.Node nodes = 4;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 4;
  ::flyteidl::core::Node* mutable_nodes(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Node >*
      mutable_nodes();
  const ::flyteidl::core::Node& nodes(int index) const;
  ::flyteidl::core::Node* add_nodes();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Node >&
      nodes() const;

  // repeated .flyteidl.core.Binding outputs = 5;
  int outputs_size() const;
  void clear_outputs();
  static const int kOutputsFieldNumber = 5;
  ::flyteidl::core::Binding* mutable_outputs(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Binding >*
      mutable_outputs();
  const ::flyteidl::core::Binding& outputs(int index) const;
  ::flyteidl::core::Binding* add_outputs();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Binding >&
      outputs() const;

  // .flyteidl.core.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::Identifier& id() const;
  ::flyteidl::core::Identifier* release_id();
  ::flyteidl::core::Identifier* mutable_id();
  void set_allocated_id(::flyteidl::core::Identifier* id);

  // .flyteidl.core.WorkflowMetadata metadata = 2;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  const ::flyteidl::core::WorkflowMetadata& metadata() const;
  ::flyteidl::core::WorkflowMetadata* release_metadata();
  ::flyteidl::core::WorkflowMetadata* mutable_metadata();
  void set_allocated_metadata(::flyteidl::core::WorkflowMetadata* metadata);

  // .flyteidl.core.TypedInterface interface = 3;
  bool has_interface() const;
  void clear_interface();
  static const int kInterfaceFieldNumber = 3;
  const ::flyteidl::core::TypedInterface& interface() const;
  ::flyteidl::core::TypedInterface* release_interface();
  ::flyteidl::core::TypedInterface* mutable_interface();
  void set_allocated_interface(::flyteidl::core::TypedInterface* interface);

  // .flyteidl.core.Node failure_node = 6;
  bool has_failure_node() const;
  void clear_failure_node();
  static const int kFailureNodeFieldNumber = 6;
  const ::flyteidl::core::Node& failure_node() const;
  ::flyteidl::core::Node* release_failure_node();
  ::flyteidl::core::Node* mutable_failure_node();
  void set_allocated_failure_node(::flyteidl::core::Node* failure_node);

  // .flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7;
  bool has_metadata_defaults() const;
  void clear_metadata_defaults();
  static const int kMetadataDefaultsFieldNumber = 7;
  const ::flyteidl::core::WorkflowMetadataDefaults& metadata_defaults() const;
  ::flyteidl::core::WorkflowMetadataDefaults* release_metadata_defaults();
  ::flyteidl::core::WorkflowMetadataDefaults* mutable_metadata_defaults();
  void set_allocated_metadata_defaults(::flyteidl::core::WorkflowMetadataDefaults* metadata_defaults);

  // @@protoc_insertion_point(class_scope:flyteidl.core.WorkflowTemplate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Node > nodes_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Binding > outputs_;
  ::flyteidl::core::Identifier* id_;
  ::flyteidl::core::WorkflowMetadata* metadata_;
  ::flyteidl::core::TypedInterface* interface_;
  ::flyteidl::core::Node* failure_node_;
  ::flyteidl::core::WorkflowMetadataDefaults* metadata_defaults_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class TaskNodeOverrides final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.TaskNodeOverrides) */ {
 public:
  TaskNodeOverrides();
  virtual ~TaskNodeOverrides();

  TaskNodeOverrides(const TaskNodeOverrides& from);

  inline TaskNodeOverrides& operator=(const TaskNodeOverrides& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskNodeOverrides(TaskNodeOverrides&& from) noexcept
    : TaskNodeOverrides() {
    *this = ::std::move(from);
  }

  inline TaskNodeOverrides& operator=(TaskNodeOverrides&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskNodeOverrides& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskNodeOverrides* internal_default_instance() {
    return reinterpret_cast<const TaskNodeOverrides*>(
               &_TaskNodeOverrides_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(TaskNodeOverrides* other);
  friend void swap(TaskNodeOverrides& a, TaskNodeOverrides& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskNodeOverrides* New() const final {
    return CreateMaybeMessage<TaskNodeOverrides>(nullptr);
  }

  TaskNodeOverrides* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskNodeOverrides>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskNodeOverrides& from);
  void MergeFrom(const TaskNodeOverrides& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskNodeOverrides* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.Resources resources = 1;
  bool has_resources() const;
  void clear_resources();
  static const int kResourcesFieldNumber = 1;
  const ::flyteidl::core::Resources& resources() const;
  ::flyteidl::core::Resources* release_resources();
  ::flyteidl::core::Resources* mutable_resources();
  void set_allocated_resources(::flyteidl::core::Resources* resources);

  // @@protoc_insertion_point(class_scope:flyteidl.core.TaskNodeOverrides)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::Resources* resources_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IfBlock

// .flyteidl.core.BooleanExpression condition = 1;
inline bool IfBlock::has_condition() const {
  return this != internal_default_instance() && condition_ != nullptr;
}
inline const ::flyteidl::core::BooleanExpression& IfBlock::condition() const {
  const ::flyteidl::core::BooleanExpression* p = condition_;
  // @@protoc_insertion_point(field_get:flyteidl.core.IfBlock.condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::BooleanExpression*>(
      &::flyteidl::core::_BooleanExpression_default_instance_);
}
inline ::flyteidl::core::BooleanExpression* IfBlock::release_condition() {
  // @@protoc_insertion_point(field_release:flyteidl.core.IfBlock.condition)
  
  ::flyteidl::core::BooleanExpression* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::flyteidl::core::BooleanExpression* IfBlock::mutable_condition() {
  
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::BooleanExpression>(GetArenaNoVirtual());
    condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.IfBlock.condition)
  return condition_;
}
inline void IfBlock::set_allocated_condition(::flyteidl::core::BooleanExpression* condition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(condition_);
  }
  if (condition) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.IfBlock.condition)
}

// .flyteidl.core.Node then_node = 2;
inline bool IfBlock::has_then_node() const {
  return this != internal_default_instance() && then_node_ != nullptr;
}
inline void IfBlock::clear_then_node() {
  if (GetArenaNoVirtual() == nullptr && then_node_ != nullptr) {
    delete then_node_;
  }
  then_node_ = nullptr;
}
inline const ::flyteidl::core::Node& IfBlock::then_node() const {
  const ::flyteidl::core::Node* p = then_node_;
  // @@protoc_insertion_point(field_get:flyteidl.core.IfBlock.then_node)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Node*>(
      &::flyteidl::core::_Node_default_instance_);
}
inline ::flyteidl::core::Node* IfBlock::release_then_node() {
  // @@protoc_insertion_point(field_release:flyteidl.core.IfBlock.then_node)
  
  ::flyteidl::core::Node* temp = then_node_;
  then_node_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Node* IfBlock::mutable_then_node() {
  
  if (then_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Node>(GetArenaNoVirtual());
    then_node_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.IfBlock.then_node)
  return then_node_;
}
inline void IfBlock::set_allocated_then_node(::flyteidl::core::Node* then_node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete then_node_;
  }
  if (then_node) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      then_node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, then_node, submessage_arena);
    }
    
  } else {
    
  }
  then_node_ = then_node;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.IfBlock.then_node)
}

// -------------------------------------------------------------------

// IfElseBlock

// .flyteidl.core.IfBlock case = 1;
inline bool IfElseBlock::has_case_() const {
  return this != internal_default_instance() && case__ != nullptr;
}
inline void IfElseBlock::clear_case_() {
  if (GetArenaNoVirtual() == nullptr && case__ != nullptr) {
    delete case__;
  }
  case__ = nullptr;
}
inline const ::flyteidl::core::IfBlock& IfElseBlock::case_() const {
  const ::flyteidl::core::IfBlock* p = case__;
  // @@protoc_insertion_point(field_get:flyteidl.core.IfElseBlock.case)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::IfBlock*>(
      &::flyteidl::core::_IfBlock_default_instance_);
}
inline ::flyteidl::core::IfBlock* IfElseBlock::release_case_() {
  // @@protoc_insertion_point(field_release:flyteidl.core.IfElseBlock.case)
  
  ::flyteidl::core::IfBlock* temp = case__;
  case__ = nullptr;
  return temp;
}
inline ::flyteidl::core::IfBlock* IfElseBlock::mutable_case_() {
  
  if (case__ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::IfBlock>(GetArenaNoVirtual());
    case__ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.IfElseBlock.case)
  return case__;
}
inline void IfElseBlock::set_allocated_case_(::flyteidl::core::IfBlock* case_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete case__;
  }
  if (case_) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      case_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, case_, submessage_arena);
    }
    
  } else {
    
  }
  case__ = case_;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.IfElseBlock.case)
}

// repeated .flyteidl.core.IfBlock other = 2;
inline int IfElseBlock::other_size() const {
  return other_.size();
}
inline void IfElseBlock::clear_other() {
  other_.Clear();
}
inline ::flyteidl::core::IfBlock* IfElseBlock::mutable_other(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.IfElseBlock.other)
  return other_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::IfBlock >*
IfElseBlock::mutable_other() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.IfElseBlock.other)
  return &other_;
}
inline const ::flyteidl::core::IfBlock& IfElseBlock::other(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.IfElseBlock.other)
  return other_.Get(index);
}
inline ::flyteidl::core::IfBlock* IfElseBlock::add_other() {
  // @@protoc_insertion_point(field_add:flyteidl.core.IfElseBlock.other)
  return other_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::IfBlock >&
IfElseBlock::other() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.IfElseBlock.other)
  return other_;
}

// .flyteidl.core.Node else_node = 3;
inline bool IfElseBlock::has_else_node() const {
  return default_case() == kElseNode;
}
inline void IfElseBlock::set_has_else_node() {
  _oneof_case_[0] = kElseNode;
}
inline void IfElseBlock::clear_else_node() {
  if (has_else_node()) {
    delete default_.else_node_;
    clear_has_default();
  }
}
inline ::flyteidl::core::Node* IfElseBlock::release_else_node() {
  // @@protoc_insertion_point(field_release:flyteidl.core.IfElseBlock.else_node)
  if (has_else_node()) {
    clear_has_default();
      ::flyteidl::core::Node* temp = default_.else_node_;
    default_.else_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::Node& IfElseBlock::else_node() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.IfElseBlock.else_node)
  return has_else_node()
      ? *default_.else_node_
      : *reinterpret_cast< ::flyteidl::core::Node*>(&::flyteidl::core::_Node_default_instance_);
}
inline ::flyteidl::core::Node* IfElseBlock::mutable_else_node() {
  if (!has_else_node()) {
    clear_default();
    set_has_else_node();
    default_.else_node_ = CreateMaybeMessage< ::flyteidl::core::Node >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.IfElseBlock.else_node)
  return default_.else_node_;
}

// .flyteidl.core.Error error = 4;
inline bool IfElseBlock::has_error() const {
  return default_case() == kError;
}
inline void IfElseBlock::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::flyteidl::core::Error* IfElseBlock::release_error() {
  // @@protoc_insertion_point(field_release:flyteidl.core.IfElseBlock.error)
  if (has_error()) {
    clear_has_default();
      ::flyteidl::core::Error* temp = default_.error_;
    default_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::Error& IfElseBlock::error() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.IfElseBlock.error)
  return has_error()
      ? *default_.error_
      : *reinterpret_cast< ::flyteidl::core::Error*>(&::flyteidl::core::_Error_default_instance_);
}
inline ::flyteidl::core::Error* IfElseBlock::mutable_error() {
  if (!has_error()) {
    clear_default();
    set_has_error();
    default_.error_ = CreateMaybeMessage< ::flyteidl::core::Error >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.IfElseBlock.error)
  return default_.error_;
}

inline bool IfElseBlock::has_default() const {
  return default_case() != DEFAULT_NOT_SET;
}
inline void IfElseBlock::clear_has_default() {
  _oneof_case_[0] = DEFAULT_NOT_SET;
}
inline IfElseBlock::DefaultCase IfElseBlock::default_case() const {
  return IfElseBlock::DefaultCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BranchNode

// .flyteidl.core.IfElseBlock if_else = 1;
inline bool BranchNode::has_if_else() const {
  return this != internal_default_instance() && if_else_ != nullptr;
}
inline void BranchNode::clear_if_else() {
  if (GetArenaNoVirtual() == nullptr && if_else_ != nullptr) {
    delete if_else_;
  }
  if_else_ = nullptr;
}
inline const ::flyteidl::core::IfElseBlock& BranchNode::if_else() const {
  const ::flyteidl::core::IfElseBlock* p = if_else_;
  // @@protoc_insertion_point(field_get:flyteidl.core.BranchNode.if_else)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::IfElseBlock*>(
      &::flyteidl::core::_IfElseBlock_default_instance_);
}
inline ::flyteidl::core::IfElseBlock* BranchNode::release_if_else() {
  // @@protoc_insertion_point(field_release:flyteidl.core.BranchNode.if_else)
  
  ::flyteidl::core::IfElseBlock* temp = if_else_;
  if_else_ = nullptr;
  return temp;
}
inline ::flyteidl::core::IfElseBlock* BranchNode::mutable_if_else() {
  
  if (if_else_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::IfElseBlock>(GetArenaNoVirtual());
    if_else_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.BranchNode.if_else)
  return if_else_;
}
inline void BranchNode::set_allocated_if_else(::flyteidl::core::IfElseBlock* if_else) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete if_else_;
  }
  if (if_else) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      if_else = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, if_else, submessage_arena);
    }
    
  } else {
    
  }
  if_else_ = if_else;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.BranchNode.if_else)
}

// -------------------------------------------------------------------

// TaskNode

// .flyteidl.core.Identifier reference_id = 1;
inline bool TaskNode::has_reference_id() const {
  return reference_case() == kReferenceId;
}
inline void TaskNode::set_has_reference_id() {
  _oneof_case_[0] = kReferenceId;
}
inline ::flyteidl::core::Identifier* TaskNode::release_reference_id() {
  // @@protoc_insertion_point(field_release:flyteidl.core.TaskNode.reference_id)
  if (has_reference_id()) {
    clear_has_reference();
      ::flyteidl::core::Identifier* temp = reference_.reference_id_;
    reference_.reference_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::Identifier& TaskNode::reference_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.TaskNode.reference_id)
  return has_reference_id()
      ? *reference_.reference_id_
      : *reinterpret_cast< ::flyteidl::core::Identifier*>(&::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* TaskNode::mutable_reference_id() {
  if (!has_reference_id()) {
    clear_reference();
    set_has_reference_id();
    reference_.reference_id_ = CreateMaybeMessage< ::flyteidl::core::Identifier >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.TaskNode.reference_id)
  return reference_.reference_id_;
}

// .flyteidl.core.TaskNodeOverrides overrides = 2;
inline bool TaskNode::has_overrides() const {
  return this != internal_default_instance() && overrides_ != nullptr;
}
inline void TaskNode::clear_overrides() {
  if (GetArenaNoVirtual() == nullptr && overrides_ != nullptr) {
    delete overrides_;
  }
  overrides_ = nullptr;
}
inline const ::flyteidl::core::TaskNodeOverrides& TaskNode::overrides() const {
  const ::flyteidl::core::TaskNodeOverrides* p = overrides_;
  // @@protoc_insertion_point(field_get:flyteidl.core.TaskNode.overrides)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::TaskNodeOverrides*>(
      &::flyteidl::core::_TaskNodeOverrides_default_instance_);
}
inline ::flyteidl::core::TaskNodeOverrides* TaskNode::release_overrides() {
  // @@protoc_insertion_point(field_release:flyteidl.core.TaskNode.overrides)
  
  ::flyteidl::core::TaskNodeOverrides* temp = overrides_;
  overrides_ = nullptr;
  return temp;
}
inline ::flyteidl::core::TaskNodeOverrides* TaskNode::mutable_overrides() {
  
  if (overrides_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::TaskNodeOverrides>(GetArenaNoVirtual());
    overrides_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.TaskNode.overrides)
  return overrides_;
}
inline void TaskNode::set_allocated_overrides(::flyteidl::core::TaskNodeOverrides* overrides) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete overrides_;
  }
  if (overrides) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      overrides = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, overrides, submessage_arena);
    }
    
  } else {
    
  }
  overrides_ = overrides;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.TaskNode.overrides)
}

inline bool TaskNode::has_reference() const {
  return reference_case() != REFERENCE_NOT_SET;
}
inline void TaskNode::clear_has_reference() {
  _oneof_case_[0] = REFERENCE_NOT_SET;
}
inline TaskNode::ReferenceCase TaskNode::reference_case() const {
  return TaskNode::ReferenceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// WorkflowNode

// .flyteidl.core.Identifier launchplan_ref = 1;
inline bool WorkflowNode::has_launchplan_ref() const {
  return reference_case() == kLaunchplanRef;
}
inline void WorkflowNode::set_has_launchplan_ref() {
  _oneof_case_[0] = kLaunchplanRef;
}
inline ::flyteidl::core::Identifier* WorkflowNode::release_launchplan_ref() {
  // @@protoc_insertion_point(field_release:flyteidl.core.WorkflowNode.launchplan_ref)
  if (has_launchplan_ref()) {
    clear_has_reference();
      ::flyteidl::core::Identifier* temp = reference_.launchplan_ref_;
    reference_.launchplan_ref_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::Identifier& WorkflowNode::launchplan_ref() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowNode.launchplan_ref)
  return has_launchplan_ref()
      ? *reference_.launchplan_ref_
      : *reinterpret_cast< ::flyteidl::core::Identifier*>(&::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* WorkflowNode::mutable_launchplan_ref() {
  if (!has_launchplan_ref()) {
    clear_reference();
    set_has_launchplan_ref();
    reference_.launchplan_ref_ = CreateMaybeMessage< ::flyteidl::core::Identifier >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowNode.launchplan_ref)
  return reference_.launchplan_ref_;
}

// .flyteidl.core.Identifier sub_workflow_ref = 2;
inline bool WorkflowNode::has_sub_workflow_ref() const {
  return reference_case() == kSubWorkflowRef;
}
inline void WorkflowNode::set_has_sub_workflow_ref() {
  _oneof_case_[0] = kSubWorkflowRef;
}
inline ::flyteidl::core::Identifier* WorkflowNode::release_sub_workflow_ref() {
  // @@protoc_insertion_point(field_release:flyteidl.core.WorkflowNode.sub_workflow_ref)
  if (has_sub_workflow_ref()) {
    clear_has_reference();
      ::flyteidl::core::Identifier* temp = reference_.sub_workflow_ref_;
    reference_.sub_workflow_ref_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::Identifier& WorkflowNode::sub_workflow_ref() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowNode.sub_workflow_ref)
  return has_sub_workflow_ref()
      ? *reference_.sub_workflow_ref_
      : *reinterpret_cast< ::flyteidl::core::Identifier*>(&::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* WorkflowNode::mutable_sub_workflow_ref() {
  if (!has_sub_workflow_ref()) {
    clear_reference();
    set_has_sub_workflow_ref();
    reference_.sub_workflow_ref_ = CreateMaybeMessage< ::flyteidl::core::Identifier >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowNode.sub_workflow_ref)
  return reference_.sub_workflow_ref_;
}

inline bool WorkflowNode::has_reference() const {
  return reference_case() != REFERENCE_NOT_SET;
}
inline void WorkflowNode::clear_has_reference() {
  _oneof_case_[0] = REFERENCE_NOT_SET;
}
inline WorkflowNode::ReferenceCase WorkflowNode::reference_case() const {
  return WorkflowNode::ReferenceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ApproveCondition

// string signal_id = 1;
inline void ApproveCondition::clear_signal_id() {
  signal_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ApproveCondition::signal_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.ApproveCondition.signal_id)
  return signal_id_.GetNoArena();
}
inline void ApproveCondition::set_signal_id(const ::std::string& value) {
  
  signal_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.ApproveCondition.signal_id)
}
#if LANG_CXX11
inline void ApproveCondition::set_signal_id(::std::string&& value) {
  
  signal_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.ApproveCondition.signal_id)
}
#endif
inline void ApproveCondition::set_signal_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signal_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.ApproveCondition.signal_id)
}
inline void ApproveCondition::set_signal_id(const char* value, size_t size) {
  
  signal_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.ApproveCondition.signal_id)
}
inline ::std::string* ApproveCondition::mutable_signal_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.ApproveCondition.signal_id)
  return signal_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ApproveCondition::release_signal_id() {
  // @@protoc_insertion_point(field_release:flyteidl.core.ApproveCondition.signal_id)
  
  return signal_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ApproveCondition::set_allocated_signal_id(::std::string* signal_id) {
  if (signal_id != nullptr) {
    
  } else {
    
  }
  signal_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signal_id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.ApproveCondition.signal_id)
}

// -------------------------------------------------------------------

// SignalCondition

// string signal_id = 1;
inline void SignalCondition::clear_signal_id() {
  signal_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalCondition::signal_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.SignalCondition.signal_id)
  return signal_id_.GetNoArena();
}
inline void SignalCondition::set_signal_id(const ::std::string& value) {
  
  signal_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.SignalCondition.signal_id)
}
#if LANG_CXX11
inline void SignalCondition::set_signal_id(::std::string&& value) {
  
  signal_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.SignalCondition.signal_id)
}
#endif
inline void SignalCondition::set_signal_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signal_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.SignalCondition.signal_id)
}
inline void SignalCondition::set_signal_id(const char* value, size_t size) {
  
  signal_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.SignalCondition.signal_id)
}
inline ::std::string* SignalCondition::mutable_signal_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.SignalCondition.signal_id)
  return signal_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalCondition::release_signal_id() {
  // @@protoc_insertion_point(field_release:flyteidl.core.SignalCondition.signal_id)
  
  return signal_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalCondition::set_allocated_signal_id(::std::string* signal_id) {
  if (signal_id != nullptr) {
    
  } else {
    
  }
  signal_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signal_id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.SignalCondition.signal_id)
}

// .flyteidl.core.LiteralType type = 2;
inline bool SignalCondition::has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline const ::flyteidl::core::LiteralType& SignalCondition::type() const {
  const ::flyteidl::core::LiteralType* p = type_;
  // @@protoc_insertion_point(field_get:flyteidl.core.SignalCondition.type)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::LiteralType*>(
      &::flyteidl::core::_LiteralType_default_instance_);
}
inline ::flyteidl::core::LiteralType* SignalCondition::release_type() {
  // @@protoc_insertion_point(field_release:flyteidl.core.SignalCondition.type)
  
  ::flyteidl::core::LiteralType* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::flyteidl::core::LiteralType* SignalCondition::mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::LiteralType>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.SignalCondition.type)
  return type_;
}
inline void SignalCondition::set_allocated_type(::flyteidl::core::LiteralType* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_);
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.SignalCondition.type)
}

// string output_variable_name = 3;
inline void SignalCondition::clear_output_variable_name() {
  output_variable_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignalCondition::output_variable_name() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.SignalCondition.output_variable_name)
  return output_variable_name_.GetNoArena();
}
inline void SignalCondition::set_output_variable_name(const ::std::string& value) {
  
  output_variable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.SignalCondition.output_variable_name)
}
#if LANG_CXX11
inline void SignalCondition::set_output_variable_name(::std::string&& value) {
  
  output_variable_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.SignalCondition.output_variable_name)
}
#endif
inline void SignalCondition::set_output_variable_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  output_variable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.SignalCondition.output_variable_name)
}
inline void SignalCondition::set_output_variable_name(const char* value, size_t size) {
  
  output_variable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.SignalCondition.output_variable_name)
}
inline ::std::string* SignalCondition::mutable_output_variable_name() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.SignalCondition.output_variable_name)
  return output_variable_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignalCondition::release_output_variable_name() {
  // @@protoc_insertion_point(field_release:flyteidl.core.SignalCondition.output_variable_name)
  
  return output_variable_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignalCondition::set_allocated_output_variable_name(::std::string* output_variable_name) {
  if (output_variable_name != nullptr) {
    
  } else {
    
  }
  output_variable_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_variable_name);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.SignalCondition.output_variable_name)
}

// -------------------------------------------------------------------

// SleepCondition

// .google.protobuf.Duration duration = 1;
inline bool SleepCondition::has_duration() const {
  return this != internal_default_instance() && duration_ != nullptr;
}
inline const ::google::protobuf::Duration& SleepCondition::duration() const {
  const ::google::protobuf::Duration* p = duration_;
  // @@protoc_insertion_point(field_get:flyteidl.core.SleepCondition.duration)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* SleepCondition::release_duration() {
  // @@protoc_insertion_point(field_release:flyteidl.core.SleepCondition.duration)
  
  ::google::protobuf::Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* SleepCondition::mutable_duration() {
  
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.SleepCondition.duration)
  return duration_;
}
inline void SleepCondition::set_allocated_duration(::google::protobuf::Duration* duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(duration_);
  }
  if (duration) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(duration)->GetArena();
    if (message_arena != submessage_arena) {
      duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.SleepCondition.duration)
}

// -------------------------------------------------------------------

// GateNode

// .flyteidl.core.ApproveCondition approve = 1;
inline bool GateNode::has_approve() const {
  return condition_case() == kApprove;
}
inline void GateNode::set_has_approve() {
  _oneof_case_[0] = kApprove;
}
inline void GateNode::clear_approve() {
  if (has_approve()) {
    delete condition_.approve_;
    clear_has_condition();
  }
}
inline ::flyteidl::core::ApproveCondition* GateNode::release_approve() {
  // @@protoc_insertion_point(field_release:flyteidl.core.GateNode.approve)
  if (has_approve()) {
    clear_has_condition();
      ::flyteidl::core::ApproveCondition* temp = condition_.approve_;
    condition_.approve_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::ApproveCondition& GateNode::approve() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.GateNode.approve)
  return has_approve()
      ? *condition_.approve_
      : *reinterpret_cast< ::flyteidl::core::ApproveCondition*>(&::flyteidl::core::_ApproveCondition_default_instance_);
}
inline ::flyteidl::core::ApproveCondition* GateNode::mutable_approve() {
  if (!has_approve()) {
    clear_condition();
    set_has_approve();
    condition_.approve_ = CreateMaybeMessage< ::flyteidl::core::ApproveCondition >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.GateNode.approve)
  return condition_.approve_;
}

// .flyteidl.core.SignalCondition signal = 2;
inline bool GateNode::has_signal() const {
  return condition_case() == kSignal;
}
inline void GateNode::set_has_signal() {
  _oneof_case_[0] = kSignal;
}
inline void GateNode::clear_signal() {
  if (has_signal()) {
    delete condition_.signal_;
    clear_has_condition();
  }
}
inline ::flyteidl::core::SignalCondition* GateNode::release_signal() {
  // @@protoc_insertion_point(field_release:flyteidl.core.GateNode.signal)
  if (has_signal()) {
    clear_has_condition();
      ::flyteidl::core::SignalCondition* temp = condition_.signal_;
    condition_.signal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::SignalCondition& GateNode::signal() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.GateNode.signal)
  return has_signal()
      ? *condition_.signal_
      : *reinterpret_cast< ::flyteidl::core::SignalCondition*>(&::flyteidl::core::_SignalCondition_default_instance_);
}
inline ::flyteidl::core::SignalCondition* GateNode::mutable_signal() {
  if (!has_signal()) {
    clear_condition();
    set_has_signal();
    condition_.signal_ = CreateMaybeMessage< ::flyteidl::core::SignalCondition >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.GateNode.signal)
  return condition_.signal_;
}

// .flyteidl.core.SleepCondition sleep = 3;
inline bool GateNode::has_sleep() const {
  return condition_case() == kSleep;
}
inline void GateNode::set_has_sleep() {
  _oneof_case_[0] = kSleep;
}
inline void GateNode::clear_sleep() {
  if (has_sleep()) {
    delete condition_.sleep_;
    clear_has_condition();
  }
}
inline ::flyteidl::core::SleepCondition* GateNode::release_sleep() {
  // @@protoc_insertion_point(field_release:flyteidl.core.GateNode.sleep)
  if (has_sleep()) {
    clear_has_condition();
      ::flyteidl::core::SleepCondition* temp = condition_.sleep_;
    condition_.sleep_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::SleepCondition& GateNode::sleep() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.GateNode.sleep)
  return has_sleep()
      ? *condition_.sleep_
      : *reinterpret_cast< ::flyteidl::core::SleepCondition*>(&::flyteidl::core::_SleepCondition_default_instance_);
}
inline ::flyteidl::core::SleepCondition* GateNode::mutable_sleep() {
  if (!has_sleep()) {
    clear_condition();
    set_has_sleep();
    condition_.sleep_ = CreateMaybeMessage< ::flyteidl::core::SleepCondition >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.GateNode.sleep)
  return condition_.sleep_;
}

inline bool GateNode::has_condition() const {
  return condition_case() != CONDITION_NOT_SET;
}
inline void GateNode::clear_has_condition() {
  _oneof_case_[0] = CONDITION_NOT_SET;
}
inline GateNode::ConditionCase GateNode::condition_case() const {
  return GateNode::ConditionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NodeMetadata

// string name = 1;
inline void NodeMetadata::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeMetadata::name() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.NodeMetadata.name)
  return name_.GetNoArena();
}
inline void NodeMetadata::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.NodeMetadata.name)
}
#if LANG_CXX11
inline void NodeMetadata::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.NodeMetadata.name)
}
#endif
inline void NodeMetadata::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.NodeMetadata.name)
}
inline void NodeMetadata::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.NodeMetadata.name)
}
inline ::std::string* NodeMetadata::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.NodeMetadata.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeMetadata::release_name() {
  // @@protoc_insertion_point(field_release:flyteidl.core.NodeMetadata.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeMetadata::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.NodeMetadata.name)
}

// .google.protobuf.Duration timeout = 4;
inline bool NodeMetadata::has_timeout() const {
  return this != internal_default_instance() && timeout_ != nullptr;
}
inline const ::google::protobuf::Duration& NodeMetadata::timeout() const {
  const ::google::protobuf::Duration* p = timeout_;
  // @@protoc_insertion_point(field_get:flyteidl.core.NodeMetadata.timeout)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* NodeMetadata::release_timeout() {
  // @@protoc_insertion_point(field_release:flyteidl.core.NodeMetadata.timeout)
  
  ::google::protobuf::Duration* temp = timeout_;
  timeout_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* NodeMetadata::mutable_timeout() {
  
  if (timeout_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    timeout_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.NodeMetadata.timeout)
  return timeout_;
}
inline void NodeMetadata::set_allocated_timeout(::google::protobuf::Duration* timeout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timeout_);
  }
  if (timeout) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(timeout)->GetArena();
    if (message_arena != submessage_arena) {
      timeout = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timeout, submessage_arena);
    }
    
  } else {
    
  }
  timeout_ = timeout;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.NodeMetadata.timeout)
}

// .flyteidl.core.RetryStrategy retries = 5;
inline bool NodeMetadata::has_retries() const {
  return this != internal_default_instance() && retries_ != nullptr;
}
inline const ::flyteidl::core::RetryStrategy& NodeMetadata::retries() const {
  const ::flyteidl::core::RetryStrategy* p = retries_;
  // @@protoc_insertion_point(field_get:flyteidl.core.NodeMetadata.retries)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::RetryStrategy*>(
      &::flyteidl::core::_RetryStrategy_default_instance_);
}
inline ::flyteidl::core::RetryStrategy* NodeMetadata::release_retries() {
  // @@protoc_insertion_point(field_release:flyteidl.core.NodeMetadata.retries)
  
  ::flyteidl::core::RetryStrategy* temp = retries_;
  retries_ = nullptr;
  return temp;
}
inline ::flyteidl::core::RetryStrategy* NodeMetadata::mutable_retries() {
  
  if (retries_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::RetryStrategy>(GetArenaNoVirtual());
    retries_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.NodeMetadata.retries)
  return retries_;
}
inline void NodeMetadata::set_allocated_retries(::flyteidl::core::RetryStrategy* retries) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(retries_);
  }
  if (retries) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      retries = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, retries, submessage_arena);
    }
    
  } else {
    
  }
  retries_ = retries;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.NodeMetadata.retries)
}

// bool interruptible = 6;
inline bool NodeMetadata::has_interruptible() const {
  return interruptible_value_case() == kInterruptible;
}
inline void NodeMetadata::set_has_interruptible() {
  _oneof_case_[0] = kInterruptible;
}
inline void NodeMetadata::clear_interruptible() {
  if (has_interruptible()) {
    interruptible_value_.interruptible_ = false;
    clear_has_interruptible_value();
  }
}
inline bool NodeMetadata::interruptible() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.NodeMetadata.interruptible)
  if (has_interruptible()) {
    return interruptible_value_.interruptible_;
  }
  return false;
}
inline void NodeMetadata::set_interruptible(bool value) {
  if (!has_interruptible()) {
    clear_interruptible_value();
    set_has_interruptible();
  }
  interruptible_value_.interruptible_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.core.NodeMetadata.interruptible)
}

inline bool NodeMetadata::has_interruptible_value() const {
  return interruptible_value_case() != INTERRUPTIBLE_VALUE_NOT_SET;
}
inline void NodeMetadata::clear_has_interruptible_value() {
  _oneof_case_[0] = INTERRUPTIBLE_VALUE_NOT_SET;
}
inline NodeMetadata::InterruptibleValueCase NodeMetadata::interruptible_value_case() const {
  return NodeMetadata::InterruptibleValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Alias

// string var = 1;
inline void Alias::clear_var() {
  var_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Alias::var() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Alias.var)
  return var_.GetNoArena();
}
inline void Alias::set_var(const ::std::string& value) {
  
  var_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.Alias.var)
}
#if LANG_CXX11
inline void Alias::set_var(::std::string&& value) {
  
  var_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.Alias.var)
}
#endif
inline void Alias::set_var(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  var_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.Alias.var)
}
inline void Alias::set_var(const char* value, size_t size) {
  
  var_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.Alias.var)
}
inline ::std::string* Alias::mutable_var() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Alias.var)
  return var_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Alias::release_var() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Alias.var)
  
  return var_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Alias::set_allocated_var(::std::string* var) {
  if (var != nullptr) {
    
  } else {
    
  }
  var_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), var);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Alias.var)
}

// string alias = 2;
inline void Alias::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Alias::alias() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Alias.alias)
  return alias_.GetNoArena();
}
inline void Alias::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.Alias.alias)
}
#if LANG_CXX11
inline void Alias::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.Alias.alias)
}
#endif
inline void Alias::set_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.Alias.alias)
}
inline void Alias::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.Alias.alias)
}
inline ::std::string* Alias::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Alias.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Alias::release_alias() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Alias.alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Alias::set_allocated_alias(::std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Alias.alias)
}

// -------------------------------------------------------------------

// Node

// string id = 1;
inline void Node::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node::id() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Node.id)
  return id_.GetNoArena();
}
inline void Node::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.Node.id)
}
#if LANG_CXX11
inline void Node::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.Node.id)
}
#endif
inline void Node::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.Node.id)
}
inline void Node::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.Node.id)
}
inline ::std::string* Node::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Node.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Node.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Node.id)
}

// .flyteidl.core.NodeMetadata metadata = 2;
inline bool Node::has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline void Node::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::flyteidl::core::NodeMetadata& Node::metadata() const {
  const ::flyteidl::core::NodeMetadata* p = metadata_;
  // @@protoc_insertion_point(field_get:flyteidl.core.Node.metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::NodeMetadata*>(
      &::flyteidl::core::_NodeMetadata_default_instance_);
}
inline ::flyteidl::core::NodeMetadata* Node::release_metadata() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Node.metadata)
  
  ::flyteidl::core::NodeMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::flyteidl::core::NodeMetadata* Node::mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::NodeMetadata>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Node.metadata)
  return metadata_;
}
inline void Node::set_allocated_metadata(::flyteidl::core::NodeMetadata* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Node.metadata)
}

// repeated .flyteidl.core.Binding inputs = 3;
inline int Node::inputs_size() const {
  return inputs_.size();
}
inline ::flyteidl::core::Binding* Node::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Node.inputs)
  return inputs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Binding >*
Node::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.Node.inputs)
  return &inputs_;
}
inline const ::flyteidl::core::Binding& Node::inputs(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Node.inputs)
  return inputs_.Get(index);
}
inline ::flyteidl::core::Binding* Node::add_inputs() {
  // @@protoc_insertion_point(field_add:flyteidl.core.Node.inputs)
  return inputs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Binding >&
Node::inputs() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.Node.inputs)
  return inputs_;
}

// repeated string upstream_node_ids = 4;
inline int Node::upstream_node_ids_size() const {
  return upstream_node_ids_.size();
}
inline void Node::clear_upstream_node_ids() {
  upstream_node_ids_.Clear();
}
inline const ::std::string& Node::upstream_node_ids(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Node.upstream_node_ids)
  return upstream_node_ids_.Get(index);
}
inline ::std::string* Node::mutable_upstream_node_ids(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Node.upstream_node_ids)
  return upstream_node_ids_.Mutable(index);
}
inline void Node::set_upstream_node_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.core.Node.upstream_node_ids)
  upstream_node_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Node::set_upstream_node_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.core.Node.upstream_node_ids)
  upstream_node_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Node::set_upstream_node_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  upstream_node_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.core.Node.upstream_node_ids)
}
inline void Node::set_upstream_node_ids(int index, const char* value, size_t size) {
  upstream_node_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.Node.upstream_node_ids)
}
inline ::std::string* Node::add_upstream_node_ids() {
  // @@protoc_insertion_point(field_add_mutable:flyteidl.core.Node.upstream_node_ids)
  return upstream_node_ids_.Add();
}
inline void Node::add_upstream_node_ids(const ::std::string& value) {
  upstream_node_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.core.Node.upstream_node_ids)
}
#if LANG_CXX11
inline void Node::add_upstream_node_ids(::std::string&& value) {
  upstream_node_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.core.Node.upstream_node_ids)
}
#endif
inline void Node::add_upstream_node_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  upstream_node_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.core.Node.upstream_node_ids)
}
inline void Node::add_upstream_node_ids(const char* value, size_t size) {
  upstream_node_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.core.Node.upstream_node_ids)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Node::upstream_node_ids() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.Node.upstream_node_ids)
  return upstream_node_ids_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Node::mutable_upstream_node_ids() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.Node.upstream_node_ids)
  return &upstream_node_ids_;
}

// repeated .flyteidl.core.Alias output_aliases = 5;
inline int Node::output_aliases_size() const {
  return output_aliases_.size();
}
inline void Node::clear_output_aliases() {
  output_aliases_.Clear();
}
inline ::flyteidl::core::Alias* Node::mutable_output_aliases(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Node.output_aliases)
  return output_aliases_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Alias >*
Node::mutable_output_aliases() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.Node.output_aliases)
  return &output_aliases_;
}
inline const ::flyteidl::core::Alias& Node::output_aliases(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Node.output_aliases)
  return output_aliases_.Get(index);
}
inline ::flyteidl::core::Alias* Node::add_output_aliases() {
  // @@protoc_insertion_point(field_add:flyteidl.core.Node.output_aliases)
  return output_aliases_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Alias >&
Node::output_aliases() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.Node.output_aliases)
  return output_aliases_;
}

// .flyteidl.core.TaskNode task_node = 6;
inline bool Node::has_task_node() const {
  return target_case() == kTaskNode;
}
inline void Node::set_has_task_node() {
  _oneof_case_[0] = kTaskNode;
}
inline void Node::clear_task_node() {
  if (has_task_node()) {
    delete target_.task_node_;
    clear_has_target();
  }
}
inline ::flyteidl::core::TaskNode* Node::release_task_node() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Node.task_node)
  if (has_task_node()) {
    clear_has_target();
      ::flyteidl::core::TaskNode* temp = target_.task_node_;
    target_.task_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::TaskNode& Node::task_node() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Node.task_node)
  return has_task_node()
      ? *target_.task_node_
      : *reinterpret_cast< ::flyteidl::core::TaskNode*>(&::flyteidl::core::_TaskNode_default_instance_);
}
inline ::flyteidl::core::TaskNode* Node::mutable_task_node() {
  if (!has_task_node()) {
    clear_target();
    set_has_task_node();
    target_.task_node_ = CreateMaybeMessage< ::flyteidl::core::TaskNode >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Node.task_node)
  return target_.task_node_;
}

// .flyteidl.core.WorkflowNode workflow_node = 7;
inline bool Node::has_workflow_node() const {
  return target_case() == kWorkflowNode;
}
inline void Node::set_has_workflow_node() {
  _oneof_case_[0] = kWorkflowNode;
}
inline void Node::clear_workflow_node() {
  if (has_workflow_node()) {
    delete target_.workflow_node_;
    clear_has_target();
  }
}
inline ::flyteidl::core::WorkflowNode* Node::release_workflow_node() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Node.workflow_node)
  if (has_workflow_node()) {
    clear_has_target();
      ::flyteidl::core::WorkflowNode* temp = target_.workflow_node_;
    target_.workflow_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::WorkflowNode& Node::workflow_node() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Node.workflow_node)
  return has_workflow_node()
      ? *target_.workflow_node_
      : *reinterpret_cast< ::flyteidl::core::WorkflowNode*>(&::flyteidl::core::_WorkflowNode_default_instance_);
}
inline ::flyteidl::core::WorkflowNode* Node::mutable_workflow_node() {
  if (!has_workflow_node()) {
    clear_target();
    set_has_workflow_node();
    target_.workflow_node_ = CreateMaybeMessage< ::flyteidl::core::WorkflowNode >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Node.workflow_node)
  return target_.workflow_node_;
}

// .flyteidl.core.BranchNode branch_node = 8;
inline bool Node::has_branch_node() const {
  return target_case() == kBranchNode;
}
inline void Node::set_has_branch_node() {
  _oneof_case_[0] = kBranchNode;
}
inline void Node::clear_branch_node() {
  if (has_branch_node()) {
    delete target_.branch_node_;
    clear_has_target();
  }
}
inline ::flyteidl::core::BranchNode* Node::release_branch_node() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Node.branch_node)
  if (has_branch_node()) {
    clear_has_target();
      ::flyteidl::core::BranchNode* temp = target_.branch_node_;
    target_.branch_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::BranchNode& Node::branch_node() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Node.branch_node)
  return has_branch_node()
      ? *target_.branch_node_
      : *reinterpret_cast< ::flyteidl::core::BranchNode*>(&::flyteidl::core::_BranchNode_default_instance_);
}
inline ::flyteidl::core::BranchNode* Node::mutable_branch_node() {
  if (!has_branch_node()) {
    clear_target();
    set_has_branch_node();
    target_.branch_node_ = CreateMaybeMessage< ::flyteidl::core::BranchNode >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Node.branch_node)
  return target_.branch_node_;
}

// .flyteidl.core.GateNode gate_node = 9;
inline bool Node::has_gate_node() const {
  return target_case() == kGateNode;
}
inline void Node::set_has_gate_node() {
  _oneof_case_[0] = kGateNode;
}
inline void Node::clear_gate_node() {
  if (has_gate_node()) {
    delete target_.gate_node_;
    clear_has_target();
  }
}
inline ::flyteidl::core::GateNode* Node::release_gate_node() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Node.gate_node)
  if (has_gate_node()) {
    clear_has_target();
      ::flyteidl::core::GateNode* temp = target_.gate_node_;
    target_.gate_node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::GateNode& Node::gate_node() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Node.gate_node)
  return has_gate_node()
      ? *target_.gate_node_
      : *reinterpret_cast< ::flyteidl::core::GateNode*>(&::flyteidl::core::_GateNode_default_instance_);
}
inline ::flyteidl::core::GateNode* Node::mutable_gate_node() {
  if (!has_gate_node()) {
    clear_target();
    set_has_gate_node();
    target_.gate_node_ = CreateMaybeMessage< ::flyteidl::core::GateNode >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Node.gate_node)
  return target_.gate_node_;
}

inline bool Node::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void Node::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
inline Node::TargetCase Node::target_case() const {
  return Node::TargetCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// WorkflowMetadata

// .flyteidl.core.QualityOfService quality_of_service = 1;
inline bool WorkflowMetadata::has_quality_of_service() const {
  return this != internal_default_instance() && quality_of_service_ != nullptr;
}
inline const ::flyteidl::core::QualityOfService& WorkflowMetadata::quality_of_service() const {
  const ::flyteidl::core::QualityOfService* p = quality_of_service_;
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowMetadata.quality_of_service)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::QualityOfService*>(
      &::flyteidl::core::_QualityOfService_default_instance_);
}
inline ::flyteidl::core::QualityOfService* WorkflowMetadata::release_quality_of_service() {
  // @@protoc_insertion_point(field_release:flyteidl.core.WorkflowMetadata.quality_of_service)
  
  ::flyteidl::core::QualityOfService* temp = quality_of_service_;
  quality_of_service_ = nullptr;
  return temp;
}
inline ::flyteidl::core::QualityOfService* WorkflowMetadata::mutable_quality_of_service() {
  
  if (quality_of_service_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::QualityOfService>(GetArenaNoVirtual());
    quality_of_service_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowMetadata.quality_of_service)
  return quality_of_service_;
}
inline void WorkflowMetadata::set_allocated_quality_of_service(::flyteidl::core::QualityOfService* quality_of_service) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(quality_of_service_);
  }
  if (quality_of_service) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quality_of_service = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quality_of_service, submessage_arena);
    }
    
  } else {
    
  }
  quality_of_service_ = quality_of_service;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.WorkflowMetadata.quality_of_service)
}

// .flyteidl.core.WorkflowMetadata.OnFailurePolicy on_failure = 2;
inline void WorkflowMetadata::clear_on_failure() {
  on_failure_ = 0;
}
inline ::flyteidl::core::WorkflowMetadata_OnFailurePolicy WorkflowMetadata::on_failure() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowMetadata.on_failure)
  return static_cast< ::flyteidl::core::WorkflowMetadata_OnFailurePolicy >(on_failure_);
}
inline void WorkflowMetadata::set_on_failure(::flyteidl::core::WorkflowMetadata_OnFailurePolicy value) {
  
  on_failure_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.core.WorkflowMetadata.on_failure)
}

// map<string, string> tags = 3;
inline int WorkflowMetadata::tags_size() const {
  return tags_.size();
}
inline void WorkflowMetadata::clear_tags() {
  tags_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
WorkflowMetadata::tags() const {
  // @@protoc_insertion_point(field_map:flyteidl.core.WorkflowMetadata.tags)
  return tags_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
WorkflowMetadata::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:flyteidl.core.WorkflowMetadata.tags)
  return tags_.MutableMap();
}

// -------------------------------------------------------------------

// WorkflowMetadataDefaults

// bool interruptible = 1;
inline void WorkflowMetadataDefaults::clear_interruptible() {
  interruptible_ = false;
}
inline bool WorkflowMetadataDefaults::interruptible() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowMetadataDefaults.interruptible)
  return interruptible_;
}
inline void WorkflowMetadataDefaults::set_interruptible(bool value) {
  
  interruptible_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.core.WorkflowMetadataDefaults.interruptible)
}

// -------------------------------------------------------------------

// WorkflowTemplate

// .flyteidl.core.Identifier id = 1;
inline bool WorkflowTemplate::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::flyteidl::core::Identifier& WorkflowTemplate::id() const {
  const ::flyteidl::core::Identifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowTemplate.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Identifier*>(
      &::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* WorkflowTemplate::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.core.WorkflowTemplate.id)
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identifier* WorkflowTemplate::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowTemplate.id)
  return id_;
}
inline void WorkflowTemplate::set_allocated_id(::flyteidl::core::Identifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.WorkflowTemplate.id)
}

// .flyteidl.core.WorkflowMetadata metadata = 2;
inline bool WorkflowTemplate::has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline void WorkflowTemplate::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::flyteidl::core::WorkflowMetadata& WorkflowTemplate::metadata() const {
  const ::flyteidl::core::WorkflowMetadata* p = metadata_;
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowTemplate.metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::WorkflowMetadata*>(
      &::flyteidl::core::_WorkflowMetadata_default_instance_);
}
inline ::flyteidl::core::WorkflowMetadata* WorkflowTemplate::release_metadata() {
  // @@protoc_insertion_point(field_release:flyteidl.core.WorkflowTemplate.metadata)
  
  ::flyteidl::core::WorkflowMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::flyteidl::core::WorkflowMetadata* WorkflowTemplate::mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::WorkflowMetadata>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowTemplate.metadata)
  return metadata_;
}
inline void WorkflowTemplate::set_allocated_metadata(::flyteidl::core::WorkflowMetadata* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.WorkflowTemplate.metadata)
}

// .flyteidl.core.TypedInterface interface = 3;
inline bool WorkflowTemplate::has_interface() const {
  return this != internal_default_instance() && interface_ != nullptr;
}
inline const ::flyteidl::core::TypedInterface& WorkflowTemplate::interface() const {
  const ::flyteidl::core::TypedInterface* p = interface_;
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowTemplate.interface)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::TypedInterface*>(
      &::flyteidl::core::_TypedInterface_default_instance_);
}
inline ::flyteidl::core::TypedInterface* WorkflowTemplate::release_interface() {
  // @@protoc_insertion_point(field_release:flyteidl.core.WorkflowTemplate.interface)
  
  ::flyteidl::core::TypedInterface* temp = interface_;
  interface_ = nullptr;
  return temp;
}
inline ::flyteidl::core::TypedInterface* WorkflowTemplate::mutable_interface() {
  
  if (interface_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::TypedInterface>(GetArenaNoVirtual());
    interface_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowTemplate.interface)
  return interface_;
}
inline void WorkflowTemplate::set_allocated_interface(::flyteidl::core::TypedInterface* interface) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(interface_);
  }
  if (interface) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      interface = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interface, submessage_arena);
    }
    
  } else {
    
  }
  interface_ = interface;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.WorkflowTemplate.interface)
}

// repeated .flyteidl.core.Node nodes = 4;
inline int WorkflowTemplate::nodes_size() const {
  return nodes_.size();
}
inline void WorkflowTemplate::clear_nodes() {
  nodes_.Clear();
}
inline ::flyteidl::core::Node* WorkflowTemplate::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowTemplate.nodes)
  return nodes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Node >*
WorkflowTemplate::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.WorkflowTemplate.nodes)
  return &nodes_;
}
inline const ::flyteidl::core::Node& WorkflowTemplate::nodes(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowTemplate.nodes)
  return nodes_.Get(index);
}
inline ::flyteidl::core::Node* WorkflowTemplate::add_nodes() {
  // @@protoc_insertion_point(field_add:flyteidl.core.WorkflowTemplate.nodes)
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Node >&
WorkflowTemplate::nodes() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.WorkflowTemplate.nodes)
  return nodes_;
}

// repeated .flyteidl.core.Binding outputs = 5;
inline int WorkflowTemplate::outputs_size() const {
  return outputs_.size();
}
inline ::flyteidl::core::Binding* WorkflowTemplate::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowTemplate.outputs)
  return outputs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Binding >*
WorkflowTemplate::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.WorkflowTemplate.outputs)
  return &outputs_;
}
inline const ::flyteidl::core::Binding& WorkflowTemplate::outputs(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowTemplate.outputs)
  return outputs_.Get(index);
}
inline ::flyteidl::core::Binding* WorkflowTemplate::add_outputs() {
  // @@protoc_insertion_point(field_add:flyteidl.core.WorkflowTemplate.outputs)
  return outputs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Binding >&
WorkflowTemplate::outputs() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.WorkflowTemplate.outputs)
  return outputs_;
}

// .flyteidl.core.Node failure_node = 6;
inline bool WorkflowTemplate::has_failure_node() const {
  return this != internal_default_instance() && failure_node_ != nullptr;
}
inline void WorkflowTemplate::clear_failure_node() {
  if (GetArenaNoVirtual() == nullptr && failure_node_ != nullptr) {
    delete failure_node_;
  }
  failure_node_ = nullptr;
}
inline const ::flyteidl::core::Node& WorkflowTemplate::failure_node() const {
  const ::flyteidl::core::Node* p = failure_node_;
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowTemplate.failure_node)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Node*>(
      &::flyteidl::core::_Node_default_instance_);
}
inline ::flyteidl::core::Node* WorkflowTemplate::release_failure_node() {
  // @@protoc_insertion_point(field_release:flyteidl.core.WorkflowTemplate.failure_node)
  
  ::flyteidl::core::Node* temp = failure_node_;
  failure_node_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Node* WorkflowTemplate::mutable_failure_node() {
  
  if (failure_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Node>(GetArenaNoVirtual());
    failure_node_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowTemplate.failure_node)
  return failure_node_;
}
inline void WorkflowTemplate::set_allocated_failure_node(::flyteidl::core::Node* failure_node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete failure_node_;
  }
  if (failure_node) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      failure_node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, failure_node, submessage_arena);
    }
    
  } else {
    
  }
  failure_node_ = failure_node;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.WorkflowTemplate.failure_node)
}

// .flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7;
inline bool WorkflowTemplate::has_metadata_defaults() const {
  return this != internal_default_instance() && metadata_defaults_ != nullptr;
}
inline void WorkflowTemplate::clear_metadata_defaults() {
  if (GetArenaNoVirtual() == nullptr && metadata_defaults_ != nullptr) {
    delete metadata_defaults_;
  }
  metadata_defaults_ = nullptr;
}
inline const ::flyteidl::core::WorkflowMetadataDefaults& WorkflowTemplate::metadata_defaults() const {
  const ::flyteidl::core::WorkflowMetadataDefaults* p = metadata_defaults_;
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowTemplate.metadata_defaults)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::WorkflowMetadataDefaults*>(
      &::flyteidl::core::_WorkflowMetadataDefaults_default_instance_);
}
inline ::flyteidl::core::WorkflowMetadataDefaults* WorkflowTemplate::release_metadata_defaults() {
  // @@protoc_insertion_point(field_release:flyteidl.core.WorkflowTemplate.metadata_defaults)
  
  ::flyteidl::core::WorkflowMetadataDefaults* temp = metadata_defaults_;
  metadata_defaults_ = nullptr;
  return temp;
}
inline ::flyteidl::core::WorkflowMetadataDefaults* WorkflowTemplate::mutable_metadata_defaults() {
  
  if (metadata_defaults_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::WorkflowMetadataDefaults>(GetArenaNoVirtual());
    metadata_defaults_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowTemplate.metadata_defaults)
  return metadata_defaults_;
}
inline void WorkflowTemplate::set_allocated_metadata_defaults(::flyteidl::core::WorkflowMetadataDefaults* metadata_defaults) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metadata_defaults_;
  }
  if (metadata_defaults) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata_defaults = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metadata_defaults, submessage_arena);
    }
    
  } else {
    
  }
  metadata_defaults_ = metadata_defaults;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.WorkflowTemplate.metadata_defaults)
}

// -------------------------------------------------------------------

// TaskNodeOverrides

// .flyteidl.core.Resources resources = 1;
inline bool TaskNodeOverrides::has_resources() const {
  return this != internal_default_instance() && resources_ != nullptr;
}
inline const ::flyteidl::core::Resources& TaskNodeOverrides::resources() const {
  const ::flyteidl::core::Resources* p = resources_;
  // @@protoc_insertion_point(field_get:flyteidl.core.TaskNodeOverrides.resources)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Resources*>(
      &::flyteidl::core::_Resources_default_instance_);
}
inline ::flyteidl::core::Resources* TaskNodeOverrides::release_resources() {
  // @@protoc_insertion_point(field_release:flyteidl.core.TaskNodeOverrides.resources)
  
  ::flyteidl::core::Resources* temp = resources_;
  resources_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Resources* TaskNodeOverrides::mutable_resources() {
  
  if (resources_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Resources>(GetArenaNoVirtual());
    resources_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.TaskNodeOverrides.resources)
  return resources_;
}
inline void TaskNodeOverrides::set_allocated_resources(::flyteidl::core::Resources* resources) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(resources_);
  }
  if (resources) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resources = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resources, submessage_arena);
    }
    
  } else {
    
  }
  resources_ = resources;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.TaskNodeOverrides.resources)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace flyteidl

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::flyteidl::core::WorkflowMetadata_OnFailurePolicy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::core::WorkflowMetadata_OnFailurePolicy>() {
  return ::flyteidl::core::WorkflowMetadata_OnFailurePolicy_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fcore_2fworkflow_2eproto
