// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: flyteidl/service/dataproxy.proto

#include "flyteidl/service/dataproxy.pb.h"
#include "flyteidl/service/dataproxy.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace flyteidl {
namespace service {

static const char* DataProxyService_method_names[] = {
  "/flyteidl.service.DataProxyService/CreateUploadLocation",
  "/flyteidl.service.DataProxyService/CreateDownloadLocation",
  "/flyteidl.service.DataProxyService/CreateDownloadLink",
};

std::unique_ptr< DataProxyService::Stub> DataProxyService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DataProxyService::Stub> stub(new DataProxyService::Stub(channel));
  return stub;
}

DataProxyService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateUploadLocation_(DataProxyService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateDownloadLocation_(DataProxyService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateDownloadLink_(DataProxyService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DataProxyService::Stub::CreateUploadLocation(::grpc::ClientContext* context, const ::flyteidl::service::CreateUploadLocationRequest& request, ::flyteidl::service::CreateUploadLocationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateUploadLocation_, context, request, response);
}

void DataProxyService::Stub::experimental_async::CreateUploadLocation(::grpc::ClientContext* context, const ::flyteidl::service::CreateUploadLocationRequest* request, ::flyteidl::service::CreateUploadLocationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateUploadLocation_, context, request, response, std::move(f));
}

void DataProxyService::Stub::experimental_async::CreateUploadLocation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::service::CreateUploadLocationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateUploadLocation_, context, request, response, std::move(f));
}

void DataProxyService::Stub::experimental_async::CreateUploadLocation(::grpc::ClientContext* context, const ::flyteidl::service::CreateUploadLocationRequest* request, ::flyteidl::service::CreateUploadLocationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateUploadLocation_, context, request, response, reactor);
}

void DataProxyService::Stub::experimental_async::CreateUploadLocation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::service::CreateUploadLocationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateUploadLocation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::service::CreateUploadLocationResponse>* DataProxyService::Stub::AsyncCreateUploadLocationRaw(::grpc::ClientContext* context, const ::flyteidl::service::CreateUploadLocationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::service::CreateUploadLocationResponse>::Create(channel_.get(), cq, rpcmethod_CreateUploadLocation_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::service::CreateUploadLocationResponse>* DataProxyService::Stub::PrepareAsyncCreateUploadLocationRaw(::grpc::ClientContext* context, const ::flyteidl::service::CreateUploadLocationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::service::CreateUploadLocationResponse>::Create(channel_.get(), cq, rpcmethod_CreateUploadLocation_, context, request, false);
}

::grpc::Status DataProxyService::Stub::CreateDownloadLocation(::grpc::ClientContext* context, const ::flyteidl::service::CreateDownloadLocationRequest& request, ::flyteidl::service::CreateDownloadLocationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateDownloadLocation_, context, request, response);
}

void DataProxyService::Stub::experimental_async::CreateDownloadLocation(::grpc::ClientContext* context, const ::flyteidl::service::CreateDownloadLocationRequest* request, ::flyteidl::service::CreateDownloadLocationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateDownloadLocation_, context, request, response, std::move(f));
}

void DataProxyService::Stub::experimental_async::CreateDownloadLocation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::service::CreateDownloadLocationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateDownloadLocation_, context, request, response, std::move(f));
}

void DataProxyService::Stub::experimental_async::CreateDownloadLocation(::grpc::ClientContext* context, const ::flyteidl::service::CreateDownloadLocationRequest* request, ::flyteidl::service::CreateDownloadLocationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateDownloadLocation_, context, request, response, reactor);
}

void DataProxyService::Stub::experimental_async::CreateDownloadLocation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::service::CreateDownloadLocationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateDownloadLocation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::service::CreateDownloadLocationResponse>* DataProxyService::Stub::AsyncCreateDownloadLocationRaw(::grpc::ClientContext* context, const ::flyteidl::service::CreateDownloadLocationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::service::CreateDownloadLocationResponse>::Create(channel_.get(), cq, rpcmethod_CreateDownloadLocation_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::service::CreateDownloadLocationResponse>* DataProxyService::Stub::PrepareAsyncCreateDownloadLocationRaw(::grpc::ClientContext* context, const ::flyteidl::service::CreateDownloadLocationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::service::CreateDownloadLocationResponse>::Create(channel_.get(), cq, rpcmethod_CreateDownloadLocation_, context, request, false);
}

::grpc::Status DataProxyService::Stub::CreateDownloadLink(::grpc::ClientContext* context, const ::flyteidl::service::CreateDownloadLinkRequest& request, ::flyteidl::service::CreateDownloadLinkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateDownloadLink_, context, request, response);
}

void DataProxyService::Stub::experimental_async::CreateDownloadLink(::grpc::ClientContext* context, const ::flyteidl::service::CreateDownloadLinkRequest* request, ::flyteidl::service::CreateDownloadLinkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateDownloadLink_, context, request, response, std::move(f));
}

void DataProxyService::Stub::experimental_async::CreateDownloadLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::service::CreateDownloadLinkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateDownloadLink_, context, request, response, std::move(f));
}

void DataProxyService::Stub::experimental_async::CreateDownloadLink(::grpc::ClientContext* context, const ::flyteidl::service::CreateDownloadLinkRequest* request, ::flyteidl::service::CreateDownloadLinkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateDownloadLink_, context, request, response, reactor);
}

void DataProxyService::Stub::experimental_async::CreateDownloadLink(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::service::CreateDownloadLinkResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateDownloadLink_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::service::CreateDownloadLinkResponse>* DataProxyService::Stub::AsyncCreateDownloadLinkRaw(::grpc::ClientContext* context, const ::flyteidl::service::CreateDownloadLinkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::service::CreateDownloadLinkResponse>::Create(channel_.get(), cq, rpcmethod_CreateDownloadLink_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::service::CreateDownloadLinkResponse>* DataProxyService::Stub::PrepareAsyncCreateDownloadLinkRaw(::grpc::ClientContext* context, const ::flyteidl::service::CreateDownloadLinkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::service::CreateDownloadLinkResponse>::Create(channel_.get(), cq, rpcmethod_CreateDownloadLink_, context, request, false);
}

DataProxyService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataProxyService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataProxyService::Service, ::flyteidl::service::CreateUploadLocationRequest, ::flyteidl::service::CreateUploadLocationResponse>(
          std::mem_fn(&DataProxyService::Service::CreateUploadLocation), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataProxyService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataProxyService::Service, ::flyteidl::service::CreateDownloadLocationRequest, ::flyteidl::service::CreateDownloadLocationResponse>(
          std::mem_fn(&DataProxyService::Service::CreateDownloadLocation), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataProxyService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataProxyService::Service, ::flyteidl::service::CreateDownloadLinkRequest, ::flyteidl::service::CreateDownloadLinkResponse>(
          std::mem_fn(&DataProxyService::Service::CreateDownloadLink), this)));
}

DataProxyService::Service::~Service() {
}

::grpc::Status DataProxyService::Service::CreateUploadLocation(::grpc::ServerContext* context, const ::flyteidl::service::CreateUploadLocationRequest* request, ::flyteidl::service::CreateUploadLocationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataProxyService::Service::CreateDownloadLocation(::grpc::ServerContext* context, const ::flyteidl::service::CreateDownloadLocationRequest* request, ::flyteidl::service::CreateDownloadLocationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataProxyService::Service::CreateDownloadLink(::grpc::ServerContext* context, const ::flyteidl::service::CreateDownloadLinkRequest* request, ::flyteidl::service::CreateDownloadLinkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace flyteidl
}  // namespace service

