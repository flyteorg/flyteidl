// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	service "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/service"
	mock "github.com/stretchr/testify/mock"
)

// AuthMetadataServiceServer is an autogenerated mock type for the AuthMetadataServiceServer type
type AuthMetadataServiceServer struct {
	mock.Mock
}

type AuthMetadataServiceServer_GetOAuth2Metadata struct {
	*mock.Call
}

func (_m AuthMetadataServiceServer_GetOAuth2Metadata) Return(_a0 *service.OAuth2MetadataResponse, _a1 error) *AuthMetadataServiceServer_GetOAuth2Metadata {
	return &AuthMetadataServiceServer_GetOAuth2Metadata{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *AuthMetadataServiceServer) OnGetOAuth2Metadata(_a0 context.Context, _a1 *service.OAuth2MetadataRequest) *AuthMetadataServiceServer_GetOAuth2Metadata {
	c_call := _m.On("GetOAuth2Metadata", _a0, _a1)
	return &AuthMetadataServiceServer_GetOAuth2Metadata{Call: c_call}
}

func (_m *AuthMetadataServiceServer) OnGetOAuth2MetadataMatch(matchers ...interface{}) *AuthMetadataServiceServer_GetOAuth2Metadata {
	c_call := _m.On("GetOAuth2Metadata", matchers...)
	return &AuthMetadataServiceServer_GetOAuth2Metadata{Call: c_call}
}

// GetOAuth2Metadata provides a mock function with given fields: _a0, _a1
func (_m *AuthMetadataServiceServer) GetOAuth2Metadata(_a0 context.Context, _a1 *service.OAuth2MetadataRequest) (*service.OAuth2MetadataResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *service.OAuth2MetadataResponse
	if rf, ok := ret.Get(0).(func(context.Context, *service.OAuth2MetadataRequest) *service.OAuth2MetadataResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.OAuth2MetadataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *service.OAuth2MetadataRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type AuthMetadataServiceServer_GetPublicClientConfig struct {
	*mock.Call
}

func (_m AuthMetadataServiceServer_GetPublicClientConfig) Return(_a0 *service.PublicClientAuthConfigResponse, _a1 error) *AuthMetadataServiceServer_GetPublicClientConfig {
	return &AuthMetadataServiceServer_GetPublicClientConfig{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *AuthMetadataServiceServer) OnGetPublicClientConfig(_a0 context.Context, _a1 *service.PublicClientAuthConfigRequest) *AuthMetadataServiceServer_GetPublicClientConfig {
	c_call := _m.On("GetPublicClientConfig", _a0, _a1)
	return &AuthMetadataServiceServer_GetPublicClientConfig{Call: c_call}
}

func (_m *AuthMetadataServiceServer) OnGetPublicClientConfigMatch(matchers ...interface{}) *AuthMetadataServiceServer_GetPublicClientConfig {
	c_call := _m.On("GetPublicClientConfig", matchers...)
	return &AuthMetadataServiceServer_GetPublicClientConfig{Call: c_call}
}

// GetPublicClientConfig provides a mock function with given fields: _a0, _a1
func (_m *AuthMetadataServiceServer) GetPublicClientConfig(_a0 context.Context, _a1 *service.PublicClientAuthConfigRequest) (*service.PublicClientAuthConfigResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *service.PublicClientAuthConfigResponse
	if rf, ok := ret.Get(0).(func(context.Context, *service.PublicClientAuthConfigRequest) *service.PublicClientAuthConfigResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.PublicClientAuthConfigResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *service.PublicClientAuthConfigRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
