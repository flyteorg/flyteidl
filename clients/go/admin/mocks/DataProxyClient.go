// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	service "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/service"
)

// DataProxyClient is an autogenerated mock type for the DataProxyClient type
type DataProxyClient struct {
	mock.Mock
}

type DataProxyClient_CreateUploadLocation struct {
	*mock.Call
}

func (_m DataProxyClient_CreateUploadLocation) Return(_a0 *service.CreateUploadLocationResponse, _a1 error) *DataProxyClient_CreateUploadLocation {
	return &DataProxyClient_CreateUploadLocation{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *DataProxyClient) OnCreateUploadLocation(ctx context.Context, in *service.CreateUploadLocationRequest, opts ...grpc.CallOption) *DataProxyClient_CreateUploadLocation {
	c := _m.On("CreateUploadLocation", ctx, in, opts)
	return &DataProxyClient_CreateUploadLocation{Call: c}
}

func (_m *DataProxyClient) OnCreateUploadLocationMatch(matchers ...interface{}) *DataProxyClient_CreateUploadLocation {
	c := _m.On("CreateUploadLocation", matchers...)
	return &DataProxyClient_CreateUploadLocation{Call: c}
}

// CreateUploadLocation provides a mock function with given fields: ctx, in, opts
func (_m *DataProxyClient) CreateUploadLocation(ctx context.Context, in *service.CreateUploadLocationRequest, opts ...grpc.CallOption) (*service.CreateUploadLocationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *service.CreateUploadLocationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *service.CreateUploadLocationRequest, ...grpc.CallOption) *service.CreateUploadLocationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.CreateUploadLocationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *service.CreateUploadLocationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
