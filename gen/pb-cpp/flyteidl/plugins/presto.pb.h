// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/presto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fplugins_2fpresto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fplugins_2fpresto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fpresto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fplugins_2fpresto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fplugins_2fpresto_2eproto;
namespace flyteidl {
namespace plugins {
class PrestoQuery;
struct PrestoQueryDefaultTypeInternal;
extern PrestoQueryDefaultTypeInternal _PrestoQuery_default_instance_;
}  // namespace plugins
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::plugins::PrestoQuery* Arena::CreateMaybeMessage<::flyteidl::plugins::PrestoQuery>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace plugins {

// ===================================================================

class PrestoQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.PrestoQuery) */ {
 public:
  inline PrestoQuery() : PrestoQuery(nullptr) {}
  ~PrestoQuery() override;
  explicit constexpr PrestoQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrestoQuery(const PrestoQuery& from);
  PrestoQuery(PrestoQuery&& from) noexcept
    : PrestoQuery() {
    *this = ::std::move(from);
  }

  inline PrestoQuery& operator=(const PrestoQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrestoQuery& operator=(PrestoQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrestoQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrestoQuery* internal_default_instance() {
    return reinterpret_cast<const PrestoQuery*>(
               &_PrestoQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PrestoQuery& a, PrestoQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(PrestoQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrestoQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrestoQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrestoQuery>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrestoQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.plugins.PrestoQuery";
  }
  protected:
  explicit PrestoQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutingGroupFieldNumber = 1,
    kCatalogFieldNumber = 2,
    kSchemaFieldNumber = 3,
    kStatementFieldNumber = 4,
  };
  // string routing_group = 1 [json_name = "routingGroup"];
  void clear_routing_group();
  const std::string& routing_group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_routing_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_routing_group();
  PROTOBUF_NODISCARD std::string* release_routing_group();
  void set_allocated_routing_group(std::string* routing_group);
  private:
  const std::string& _internal_routing_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_routing_group(const std::string& value);
  std::string* _internal_mutable_routing_group();
  public:

  // string catalog = 2 [json_name = "catalog"];
  void clear_catalog();
  const std::string& catalog() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_catalog(ArgT0&& arg0, ArgT... args);
  std::string* mutable_catalog();
  PROTOBUF_NODISCARD std::string* release_catalog();
  void set_allocated_catalog(std::string* catalog);
  private:
  const std::string& _internal_catalog() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_catalog(const std::string& value);
  std::string* _internal_mutable_catalog();
  public:

  // string schema = 3 [json_name = "schema"];
  void clear_schema();
  const std::string& schema() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_schema(ArgT0&& arg0, ArgT... args);
  std::string* mutable_schema();
  PROTOBUF_NODISCARD std::string* release_schema();
  void set_allocated_schema(std::string* schema);
  private:
  const std::string& _internal_schema() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema(const std::string& value);
  std::string* _internal_mutable_schema();
  public:

  // string statement = 4 [json_name = "statement"];
  void clear_statement();
  const std::string& statement() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_statement(ArgT0&& arg0, ArgT... args);
  std::string* mutable_statement();
  PROTOBUF_NODISCARD std::string* release_statement();
  void set_allocated_statement(std::string* statement);
  private:
  const std::string& _internal_statement() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_statement(const std::string& value);
  std::string* _internal_mutable_statement();
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.PrestoQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr routing_group_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr catalog_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr statement_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fpresto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PrestoQuery

// string routing_group = 1 [json_name = "routingGroup"];
inline void PrestoQuery::clear_routing_group() {
  routing_group_.ClearToEmpty();
}
inline const std::string& PrestoQuery::routing_group() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.PrestoQuery.routing_group)
  return _internal_routing_group();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrestoQuery::set_routing_group(ArgT0&& arg0, ArgT... args) {
 
 routing_group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.plugins.PrestoQuery.routing_group)
}
inline std::string* PrestoQuery::mutable_routing_group() {
  std::string* _s = _internal_mutable_routing_group();
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.PrestoQuery.routing_group)
  return _s;
}
inline const std::string& PrestoQuery::_internal_routing_group() const {
  return routing_group_.Get();
}
inline void PrestoQuery::_internal_set_routing_group(const std::string& value) {
  
  routing_group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PrestoQuery::_internal_mutable_routing_group() {
  
  return routing_group_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PrestoQuery::release_routing_group() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.PrestoQuery.routing_group)
  return routing_group_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PrestoQuery::set_allocated_routing_group(std::string* routing_group) {
  if (routing_group != nullptr) {
    
  } else {
    
  }
  routing_group_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), routing_group,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (routing_group_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    routing_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.PrestoQuery.routing_group)
}

// string catalog = 2 [json_name = "catalog"];
inline void PrestoQuery::clear_catalog() {
  catalog_.ClearToEmpty();
}
inline const std::string& PrestoQuery::catalog() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.PrestoQuery.catalog)
  return _internal_catalog();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrestoQuery::set_catalog(ArgT0&& arg0, ArgT... args) {
 
 catalog_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.plugins.PrestoQuery.catalog)
}
inline std::string* PrestoQuery::mutable_catalog() {
  std::string* _s = _internal_mutable_catalog();
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.PrestoQuery.catalog)
  return _s;
}
inline const std::string& PrestoQuery::_internal_catalog() const {
  return catalog_.Get();
}
inline void PrestoQuery::_internal_set_catalog(const std::string& value) {
  
  catalog_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PrestoQuery::_internal_mutable_catalog() {
  
  return catalog_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PrestoQuery::release_catalog() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.PrestoQuery.catalog)
  return catalog_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PrestoQuery::set_allocated_catalog(std::string* catalog) {
  if (catalog != nullptr) {
    
  } else {
    
  }
  catalog_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), catalog,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (catalog_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    catalog_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.PrestoQuery.catalog)
}

// string schema = 3 [json_name = "schema"];
inline void PrestoQuery::clear_schema() {
  schema_.ClearToEmpty();
}
inline const std::string& PrestoQuery::schema() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.PrestoQuery.schema)
  return _internal_schema();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrestoQuery::set_schema(ArgT0&& arg0, ArgT... args) {
 
 schema_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.plugins.PrestoQuery.schema)
}
inline std::string* PrestoQuery::mutable_schema() {
  std::string* _s = _internal_mutable_schema();
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.PrestoQuery.schema)
  return _s;
}
inline const std::string& PrestoQuery::_internal_schema() const {
  return schema_.Get();
}
inline void PrestoQuery::_internal_set_schema(const std::string& value) {
  
  schema_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PrestoQuery::_internal_mutable_schema() {
  
  return schema_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PrestoQuery::release_schema() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.PrestoQuery.schema)
  return schema_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PrestoQuery::set_allocated_schema(std::string* schema) {
  if (schema != nullptr) {
    
  } else {
    
  }
  schema_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), schema,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (schema_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    schema_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.PrestoQuery.schema)
}

// string statement = 4 [json_name = "statement"];
inline void PrestoQuery::clear_statement() {
  statement_.ClearToEmpty();
}
inline const std::string& PrestoQuery::statement() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.PrestoQuery.statement)
  return _internal_statement();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrestoQuery::set_statement(ArgT0&& arg0, ArgT... args) {
 
 statement_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.plugins.PrestoQuery.statement)
}
inline std::string* PrestoQuery::mutable_statement() {
  std::string* _s = _internal_mutable_statement();
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.PrestoQuery.statement)
  return _s;
}
inline const std::string& PrestoQuery::_internal_statement() const {
  return statement_.Get();
}
inline void PrestoQuery::_internal_set_statement(const std::string& value) {
  
  statement_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PrestoQuery::_internal_mutable_statement() {
  
  return statement_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PrestoQuery::release_statement() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.PrestoQuery.statement)
  return statement_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PrestoQuery::set_allocated_statement(std::string* statement) {
  if (statement != nullptr) {
    
  } else {
    
  }
  statement_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), statement,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (statement_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    statement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.PrestoQuery.statement)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace plugins
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fplugins_2fpresto_2eproto
