// source: flyteidl/core/types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.flyteidl.core.LiteralType');
goog.provide('proto.flyteidl.core.LiteralType.TypeCase');
goog.provide('proto.flyteidl.core.StructuredDatasetType');
goog.provide('proto.flyteidl.core.StructuredDatasetType.DatasetColumn');
goog.provide('proto.flyteidl.core.UnionType');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.flyteidl.core.BlobType');
goog.require('proto.flyteidl.core.EnumType');
goog.require('proto.flyteidl.core.SchemaType');
goog.require('proto.flyteidl.core.TypeAnnotation');
goog.require('proto.flyteidl.core.TypeStructure');
goog.require('proto.google.protobuf.Struct');

goog.forwardDeclare('proto.flyteidl.core.SimpleType');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flyteidl.core.LiteralType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.flyteidl.core.LiteralType.oneofGroups_);
};
goog.inherits(proto.flyteidl.core.LiteralType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flyteidl.core.LiteralType.displayName = 'proto.flyteidl.core.LiteralType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flyteidl.core.StructuredDatasetType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.flyteidl.core.StructuredDatasetType.repeatedFields_, null);
};
goog.inherits(proto.flyteidl.core.StructuredDatasetType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flyteidl.core.StructuredDatasetType.displayName = 'proto.flyteidl.core.StructuredDatasetType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flyteidl.core.StructuredDatasetType.DatasetColumn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flyteidl.core.StructuredDatasetType.DatasetColumn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flyteidl.core.StructuredDatasetType.DatasetColumn.displayName = 'proto.flyteidl.core.StructuredDatasetType.DatasetColumn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flyteidl.core.UnionType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.flyteidl.core.UnionType.repeatedFields_, null);
};
goog.inherits(proto.flyteidl.core.UnionType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flyteidl.core.UnionType.displayName = 'proto.flyteidl.core.UnionType';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.flyteidl.core.LiteralType.oneofGroups_ = [[1,2,3,4,5,7,8,10]];

/**
 * @enum {number}
 */
proto.flyteidl.core.LiteralType.TypeCase = {
  TYPE_NOT_SET: 0,
  SIMPLE: 1,
  SCHEMA: 2,
  COLLECTION_TYPE: 3,
  MAP_VALUE_TYPE: 4,
  BLOB: 5,
  ENUM_TYPE: 7,
  STRUCTURED_DATASET_TYPE: 8,
  UNION_TYPE: 10
};

/**
 * @return {proto.flyteidl.core.LiteralType.TypeCase}
 */
proto.flyteidl.core.LiteralType.prototype.getTypeCase = function() {
  return /** @type {proto.flyteidl.core.LiteralType.TypeCase} */(jspb.Message.computeOneofCase(this, proto.flyteidl.core.LiteralType.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flyteidl.core.LiteralType.prototype.toObject = function(opt_includeInstance) {
  return proto.flyteidl.core.LiteralType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flyteidl.core.LiteralType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyteidl.core.LiteralType.toObject = function(includeInstance, msg) {
  var f, obj = {
    simple: jspb.Message.getFieldWithDefault(msg, 1, 0),
    schema: (f = msg.getSchema()) && proto.flyteidl.core.SchemaType.toObject(includeInstance, f),
    collectionType: (f = msg.getCollectionType()) && proto.flyteidl.core.LiteralType.toObject(includeInstance, f),
    mapValueType: (f = msg.getMapValueType()) && proto.flyteidl.core.LiteralType.toObject(includeInstance, f),
    blob: (f = msg.getBlob()) && proto.flyteidl.core.BlobType.toObject(includeInstance, f),
    enumType: (f = msg.getEnumType()) && proto.flyteidl.core.EnumType.toObject(includeInstance, f),
    structuredDatasetType: (f = msg.getStructuredDatasetType()) && proto.flyteidl.core.StructuredDatasetType.toObject(includeInstance, f),
    unionType: (f = msg.getUnionType()) && proto.flyteidl.core.UnionType.toObject(includeInstance, f),
    metadata: (f = msg.getMetadata()) && proto.google.protobuf.Struct.toObject(includeInstance, f),
    annotation: (f = msg.getAnnotation()) && proto.flyteidl.core.TypeAnnotation.toObject(includeInstance, f),
    structure: (f = msg.getStructure()) && proto.flyteidl.core.TypeStructure.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flyteidl.core.LiteralType}
 */
proto.flyteidl.core.LiteralType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flyteidl.core.LiteralType;
  return proto.flyteidl.core.LiteralType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flyteidl.core.LiteralType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flyteidl.core.LiteralType}
 */
proto.flyteidl.core.LiteralType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.flyteidl.core.SimpleType} */ (reader.readEnum());
      msg.setSimple(value);
      break;
    case 2:
      var value = new proto.flyteidl.core.SchemaType;
      reader.readMessage(value,proto.flyteidl.core.SchemaType.deserializeBinaryFromReader);
      msg.setSchema(value);
      break;
    case 3:
      var value = new proto.flyteidl.core.LiteralType;
      reader.readMessage(value,proto.flyteidl.core.LiteralType.deserializeBinaryFromReader);
      msg.setCollectionType(value);
      break;
    case 4:
      var value = new proto.flyteidl.core.LiteralType;
      reader.readMessage(value,proto.flyteidl.core.LiteralType.deserializeBinaryFromReader);
      msg.setMapValueType(value);
      break;
    case 5:
      var value = new proto.flyteidl.core.BlobType;
      reader.readMessage(value,proto.flyteidl.core.BlobType.deserializeBinaryFromReader);
      msg.setBlob(value);
      break;
    case 7:
      var value = new proto.flyteidl.core.EnumType;
      reader.readMessage(value,proto.flyteidl.core.EnumType.deserializeBinaryFromReader);
      msg.setEnumType(value);
      break;
    case 8:
      var value = new proto.flyteidl.core.StructuredDatasetType;
      reader.readMessage(value,proto.flyteidl.core.StructuredDatasetType.deserializeBinaryFromReader);
      msg.setStructuredDatasetType(value);
      break;
    case 10:
      var value = new proto.flyteidl.core.UnionType;
      reader.readMessage(value,proto.flyteidl.core.UnionType.deserializeBinaryFromReader);
      msg.setUnionType(value);
      break;
    case 6:
      var value = new proto.google.protobuf.Struct;
      reader.readMessage(value,proto.google.protobuf.Struct.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 9:
      var value = new proto.flyteidl.core.TypeAnnotation;
      reader.readMessage(value,proto.flyteidl.core.TypeAnnotation.deserializeBinaryFromReader);
      msg.setAnnotation(value);
      break;
    case 11:
      var value = new proto.flyteidl.core.TypeStructure;
      reader.readMessage(value,proto.flyteidl.core.TypeStructure.deserializeBinaryFromReader);
      msg.setStructure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flyteidl.core.LiteralType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flyteidl.core.LiteralType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flyteidl.core.LiteralType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyteidl.core.LiteralType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.flyteidl.core.SimpleType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSchema();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.flyteidl.core.SchemaType.serializeBinaryToWriter
    );
  }
  f = message.getCollectionType();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.flyteidl.core.LiteralType.serializeBinaryToWriter
    );
  }
  f = message.getMapValueType();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.flyteidl.core.LiteralType.serializeBinaryToWriter
    );
  }
  f = message.getBlob();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.flyteidl.core.BlobType.serializeBinaryToWriter
    );
  }
  f = message.getEnumType();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.flyteidl.core.EnumType.serializeBinaryToWriter
    );
  }
  f = message.getStructuredDatasetType();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.flyteidl.core.StructuredDatasetType.serializeBinaryToWriter
    );
  }
  f = message.getUnionType();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.flyteidl.core.UnionType.serializeBinaryToWriter
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.google.protobuf.Struct.serializeBinaryToWriter
    );
  }
  f = message.getAnnotation();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.flyteidl.core.TypeAnnotation.serializeBinaryToWriter
    );
  }
  f = message.getStructure();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.flyteidl.core.TypeStructure.serializeBinaryToWriter
    );
  }
};


/**
 * optional SimpleType simple = 1;
 * @return {!proto.flyteidl.core.SimpleType}
 */
proto.flyteidl.core.LiteralType.prototype.getSimple = function() {
  return /** @type {!proto.flyteidl.core.SimpleType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.flyteidl.core.SimpleType} value
 * @return {!proto.flyteidl.core.LiteralType} returns this
 */
proto.flyteidl.core.LiteralType.prototype.setSimple = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.flyteidl.core.LiteralType.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.flyteidl.core.LiteralType} returns this
 */
proto.flyteidl.core.LiteralType.prototype.clearSimple = function() {
  return jspb.Message.setOneofField(this, 1, proto.flyteidl.core.LiteralType.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flyteidl.core.LiteralType.prototype.hasSimple = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SchemaType schema = 2;
 * @return {?proto.flyteidl.core.SchemaType}
 */
proto.flyteidl.core.LiteralType.prototype.getSchema = function() {
  return /** @type{?proto.flyteidl.core.SchemaType} */ (
    jspb.Message.getWrapperField(this, proto.flyteidl.core.SchemaType, 2));
};


/**
 * @param {?proto.flyteidl.core.SchemaType|undefined} value
 * @return {!proto.flyteidl.core.LiteralType} returns this
*/
proto.flyteidl.core.LiteralType.prototype.setSchema = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.flyteidl.core.LiteralType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flyteidl.core.LiteralType} returns this
 */
proto.flyteidl.core.LiteralType.prototype.clearSchema = function() {
  return this.setSchema(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flyteidl.core.LiteralType.prototype.hasSchema = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LiteralType collection_type = 3;
 * @return {?proto.flyteidl.core.LiteralType}
 */
proto.flyteidl.core.LiteralType.prototype.getCollectionType = function() {
  return /** @type{?proto.flyteidl.core.LiteralType} */ (
    jspb.Message.getWrapperField(this, proto.flyteidl.core.LiteralType, 3));
};


/**
 * @param {?proto.flyteidl.core.LiteralType|undefined} value
 * @return {!proto.flyteidl.core.LiteralType} returns this
*/
proto.flyteidl.core.LiteralType.prototype.setCollectionType = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.flyteidl.core.LiteralType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flyteidl.core.LiteralType} returns this
 */
proto.flyteidl.core.LiteralType.prototype.clearCollectionType = function() {
  return this.setCollectionType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flyteidl.core.LiteralType.prototype.hasCollectionType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LiteralType map_value_type = 4;
 * @return {?proto.flyteidl.core.LiteralType}
 */
proto.flyteidl.core.LiteralType.prototype.getMapValueType = function() {
  return /** @type{?proto.flyteidl.core.LiteralType} */ (
    jspb.Message.getWrapperField(this, proto.flyteidl.core.LiteralType, 4));
};


/**
 * @param {?proto.flyteidl.core.LiteralType|undefined} value
 * @return {!proto.flyteidl.core.LiteralType} returns this
*/
proto.flyteidl.core.LiteralType.prototype.setMapValueType = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.flyteidl.core.LiteralType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flyteidl.core.LiteralType} returns this
 */
proto.flyteidl.core.LiteralType.prototype.clearMapValueType = function() {
  return this.setMapValueType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flyteidl.core.LiteralType.prototype.hasMapValueType = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional BlobType blob = 5;
 * @return {?proto.flyteidl.core.BlobType}
 */
proto.flyteidl.core.LiteralType.prototype.getBlob = function() {
  return /** @type{?proto.flyteidl.core.BlobType} */ (
    jspb.Message.getWrapperField(this, proto.flyteidl.core.BlobType, 5));
};


/**
 * @param {?proto.flyteidl.core.BlobType|undefined} value
 * @return {!proto.flyteidl.core.LiteralType} returns this
*/
proto.flyteidl.core.LiteralType.prototype.setBlob = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.flyteidl.core.LiteralType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flyteidl.core.LiteralType} returns this
 */
proto.flyteidl.core.LiteralType.prototype.clearBlob = function() {
  return this.setBlob(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flyteidl.core.LiteralType.prototype.hasBlob = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional EnumType enum_type = 7;
 * @return {?proto.flyteidl.core.EnumType}
 */
proto.flyteidl.core.LiteralType.prototype.getEnumType = function() {
  return /** @type{?proto.flyteidl.core.EnumType} */ (
    jspb.Message.getWrapperField(this, proto.flyteidl.core.EnumType, 7));
};


/**
 * @param {?proto.flyteidl.core.EnumType|undefined} value
 * @return {!proto.flyteidl.core.LiteralType} returns this
*/
proto.flyteidl.core.LiteralType.prototype.setEnumType = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.flyteidl.core.LiteralType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flyteidl.core.LiteralType} returns this
 */
proto.flyteidl.core.LiteralType.prototype.clearEnumType = function() {
  return this.setEnumType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flyteidl.core.LiteralType.prototype.hasEnumType = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional StructuredDatasetType structured_dataset_type = 8;
 * @return {?proto.flyteidl.core.StructuredDatasetType}
 */
proto.flyteidl.core.LiteralType.prototype.getStructuredDatasetType = function() {
  return /** @type{?proto.flyteidl.core.StructuredDatasetType} */ (
    jspb.Message.getWrapperField(this, proto.flyteidl.core.StructuredDatasetType, 8));
};


/**
 * @param {?proto.flyteidl.core.StructuredDatasetType|undefined} value
 * @return {!proto.flyteidl.core.LiteralType} returns this
*/
proto.flyteidl.core.LiteralType.prototype.setStructuredDatasetType = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.flyteidl.core.LiteralType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flyteidl.core.LiteralType} returns this
 */
proto.flyteidl.core.LiteralType.prototype.clearStructuredDatasetType = function() {
  return this.setStructuredDatasetType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flyteidl.core.LiteralType.prototype.hasStructuredDatasetType = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional UnionType union_type = 10;
 * @return {?proto.flyteidl.core.UnionType}
 */
proto.flyteidl.core.LiteralType.prototype.getUnionType = function() {
  return /** @type{?proto.flyteidl.core.UnionType} */ (
    jspb.Message.getWrapperField(this, proto.flyteidl.core.UnionType, 10));
};


/**
 * @param {?proto.flyteidl.core.UnionType|undefined} value
 * @return {!proto.flyteidl.core.LiteralType} returns this
*/
proto.flyteidl.core.LiteralType.prototype.setUnionType = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.flyteidl.core.LiteralType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flyteidl.core.LiteralType} returns this
 */
proto.flyteidl.core.LiteralType.prototype.clearUnionType = function() {
  return this.setUnionType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flyteidl.core.LiteralType.prototype.hasUnionType = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional google.protobuf.Struct metadata = 6;
 * @return {?proto.google.protobuf.Struct}
 */
proto.flyteidl.core.LiteralType.prototype.getMetadata = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Struct, 6));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.flyteidl.core.LiteralType} returns this
*/
proto.flyteidl.core.LiteralType.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flyteidl.core.LiteralType} returns this
 */
proto.flyteidl.core.LiteralType.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flyteidl.core.LiteralType.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional TypeAnnotation annotation = 9;
 * @return {?proto.flyteidl.core.TypeAnnotation}
 */
proto.flyteidl.core.LiteralType.prototype.getAnnotation = function() {
  return /** @type{?proto.flyteidl.core.TypeAnnotation} */ (
    jspb.Message.getWrapperField(this, proto.flyteidl.core.TypeAnnotation, 9));
};


/**
 * @param {?proto.flyteidl.core.TypeAnnotation|undefined} value
 * @return {!proto.flyteidl.core.LiteralType} returns this
*/
proto.flyteidl.core.LiteralType.prototype.setAnnotation = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flyteidl.core.LiteralType} returns this
 */
proto.flyteidl.core.LiteralType.prototype.clearAnnotation = function() {
  return this.setAnnotation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flyteidl.core.LiteralType.prototype.hasAnnotation = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional TypeStructure structure = 11;
 * @return {?proto.flyteidl.core.TypeStructure}
 */
proto.flyteidl.core.LiteralType.prototype.getStructure = function() {
  return /** @type{?proto.flyteidl.core.TypeStructure} */ (
    jspb.Message.getWrapperField(this, proto.flyteidl.core.TypeStructure, 11));
};


/**
 * @param {?proto.flyteidl.core.TypeStructure|undefined} value
 * @return {!proto.flyteidl.core.LiteralType} returns this
*/
proto.flyteidl.core.LiteralType.prototype.setStructure = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flyteidl.core.LiteralType} returns this
 */
proto.flyteidl.core.LiteralType.prototype.clearStructure = function() {
  return this.setStructure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flyteidl.core.LiteralType.prototype.hasStructure = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.flyteidl.core.StructuredDatasetType.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flyteidl.core.StructuredDatasetType.prototype.toObject = function(opt_includeInstance) {
  return proto.flyteidl.core.StructuredDatasetType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flyteidl.core.StructuredDatasetType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyteidl.core.StructuredDatasetType.toObject = function(includeInstance, msg) {
  var f, obj = {
    columnsList: jspb.Message.toObjectList(msg.getColumnsList(),
    proto.flyteidl.core.StructuredDatasetType.DatasetColumn.toObject, includeInstance),
    format: jspb.Message.getFieldWithDefault(msg, 2, ""),
    externalSchemaType: jspb.Message.getFieldWithDefault(msg, 3, ""),
    externalSchemaBytes: msg.getExternalSchemaBytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flyteidl.core.StructuredDatasetType}
 */
proto.flyteidl.core.StructuredDatasetType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flyteidl.core.StructuredDatasetType;
  return proto.flyteidl.core.StructuredDatasetType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flyteidl.core.StructuredDatasetType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flyteidl.core.StructuredDatasetType}
 */
proto.flyteidl.core.StructuredDatasetType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.flyteidl.core.StructuredDatasetType.DatasetColumn;
      reader.readMessage(value,proto.flyteidl.core.StructuredDatasetType.DatasetColumn.deserializeBinaryFromReader);
      msg.addColumns(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFormat(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setExternalSchemaType(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExternalSchemaBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flyteidl.core.StructuredDatasetType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flyteidl.core.StructuredDatasetType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flyteidl.core.StructuredDatasetType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyteidl.core.StructuredDatasetType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.flyteidl.core.StructuredDatasetType.DatasetColumn.serializeBinaryToWriter
    );
  }
  f = message.getFormat();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExternalSchemaType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getExternalSchemaBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flyteidl.core.StructuredDatasetType.DatasetColumn.prototype.toObject = function(opt_includeInstance) {
  return proto.flyteidl.core.StructuredDatasetType.DatasetColumn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flyteidl.core.StructuredDatasetType.DatasetColumn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyteidl.core.StructuredDatasetType.DatasetColumn.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    literalType: (f = msg.getLiteralType()) && proto.flyteidl.core.LiteralType.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flyteidl.core.StructuredDatasetType.DatasetColumn}
 */
proto.flyteidl.core.StructuredDatasetType.DatasetColumn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flyteidl.core.StructuredDatasetType.DatasetColumn;
  return proto.flyteidl.core.StructuredDatasetType.DatasetColumn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flyteidl.core.StructuredDatasetType.DatasetColumn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flyteidl.core.StructuredDatasetType.DatasetColumn}
 */
proto.flyteidl.core.StructuredDatasetType.DatasetColumn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.flyteidl.core.LiteralType;
      reader.readMessage(value,proto.flyteidl.core.LiteralType.deserializeBinaryFromReader);
      msg.setLiteralType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flyteidl.core.StructuredDatasetType.DatasetColumn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flyteidl.core.StructuredDatasetType.DatasetColumn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flyteidl.core.StructuredDatasetType.DatasetColumn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyteidl.core.StructuredDatasetType.DatasetColumn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLiteralType();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.flyteidl.core.LiteralType.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.flyteidl.core.StructuredDatasetType.DatasetColumn.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.flyteidl.core.StructuredDatasetType.DatasetColumn} returns this
 */
proto.flyteidl.core.StructuredDatasetType.DatasetColumn.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional LiteralType literal_type = 2;
 * @return {?proto.flyteidl.core.LiteralType}
 */
proto.flyteidl.core.StructuredDatasetType.DatasetColumn.prototype.getLiteralType = function() {
  return /** @type{?proto.flyteidl.core.LiteralType} */ (
    jspb.Message.getWrapperField(this, proto.flyteidl.core.LiteralType, 2));
};


/**
 * @param {?proto.flyteidl.core.LiteralType|undefined} value
 * @return {!proto.flyteidl.core.StructuredDatasetType.DatasetColumn} returns this
*/
proto.flyteidl.core.StructuredDatasetType.DatasetColumn.prototype.setLiteralType = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flyteidl.core.StructuredDatasetType.DatasetColumn} returns this
 */
proto.flyteidl.core.StructuredDatasetType.DatasetColumn.prototype.clearLiteralType = function() {
  return this.setLiteralType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flyteidl.core.StructuredDatasetType.DatasetColumn.prototype.hasLiteralType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated DatasetColumn columns = 1;
 * @return {!Array<!proto.flyteidl.core.StructuredDatasetType.DatasetColumn>}
 */
proto.flyteidl.core.StructuredDatasetType.prototype.getColumnsList = function() {
  return /** @type{!Array<!proto.flyteidl.core.StructuredDatasetType.DatasetColumn>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.flyteidl.core.StructuredDatasetType.DatasetColumn, 1));
};


/**
 * @param {!Array<!proto.flyteidl.core.StructuredDatasetType.DatasetColumn>} value
 * @return {!proto.flyteidl.core.StructuredDatasetType} returns this
*/
proto.flyteidl.core.StructuredDatasetType.prototype.setColumnsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.flyteidl.core.StructuredDatasetType.DatasetColumn=} opt_value
 * @param {number=} opt_index
 * @return {!proto.flyteidl.core.StructuredDatasetType.DatasetColumn}
 */
proto.flyteidl.core.StructuredDatasetType.prototype.addColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.flyteidl.core.StructuredDatasetType.DatasetColumn, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flyteidl.core.StructuredDatasetType} returns this
 */
proto.flyteidl.core.StructuredDatasetType.prototype.clearColumnsList = function() {
  return this.setColumnsList([]);
};


/**
 * optional string format = 2;
 * @return {string}
 */
proto.flyteidl.core.StructuredDatasetType.prototype.getFormat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.flyteidl.core.StructuredDatasetType} returns this
 */
proto.flyteidl.core.StructuredDatasetType.prototype.setFormat = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string external_schema_type = 3;
 * @return {string}
 */
proto.flyteidl.core.StructuredDatasetType.prototype.getExternalSchemaType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.flyteidl.core.StructuredDatasetType} returns this
 */
proto.flyteidl.core.StructuredDatasetType.prototype.setExternalSchemaType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes external_schema_bytes = 4;
 * @return {string}
 */
proto.flyteidl.core.StructuredDatasetType.prototype.getExternalSchemaBytes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes external_schema_bytes = 4;
 * This is a type-conversion wrapper around `getExternalSchemaBytes()`
 * @return {string}
 */
proto.flyteidl.core.StructuredDatasetType.prototype.getExternalSchemaBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExternalSchemaBytes()));
};


/**
 * optional bytes external_schema_bytes = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExternalSchemaBytes()`
 * @return {!Uint8Array}
 */
proto.flyteidl.core.StructuredDatasetType.prototype.getExternalSchemaBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExternalSchemaBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.flyteidl.core.StructuredDatasetType} returns this
 */
proto.flyteidl.core.StructuredDatasetType.prototype.setExternalSchemaBytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.flyteidl.core.UnionType.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flyteidl.core.UnionType.prototype.toObject = function(opt_includeInstance) {
  return proto.flyteidl.core.UnionType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flyteidl.core.UnionType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyteidl.core.UnionType.toObject = function(includeInstance, msg) {
  var f, obj = {
    variantsList: jspb.Message.toObjectList(msg.getVariantsList(),
    proto.flyteidl.core.LiteralType.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flyteidl.core.UnionType}
 */
proto.flyteidl.core.UnionType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flyteidl.core.UnionType;
  return proto.flyteidl.core.UnionType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flyteidl.core.UnionType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flyteidl.core.UnionType}
 */
proto.flyteidl.core.UnionType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.flyteidl.core.LiteralType;
      reader.readMessage(value,proto.flyteidl.core.LiteralType.deserializeBinaryFromReader);
      msg.addVariants(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flyteidl.core.UnionType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flyteidl.core.UnionType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flyteidl.core.UnionType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyteidl.core.UnionType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.flyteidl.core.LiteralType.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LiteralType variants = 1;
 * @return {!Array<!proto.flyteidl.core.LiteralType>}
 */
proto.flyteidl.core.UnionType.prototype.getVariantsList = function() {
  return /** @type{!Array<!proto.flyteidl.core.LiteralType>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.flyteidl.core.LiteralType, 1));
};


/**
 * @param {!Array<!proto.flyteidl.core.LiteralType>} value
 * @return {!proto.flyteidl.core.UnionType} returns this
*/
proto.flyteidl.core.UnionType.prototype.setVariantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.flyteidl.core.LiteralType=} opt_value
 * @param {number=} opt_index
 * @return {!proto.flyteidl.core.LiteralType}
 */
proto.flyteidl.core.UnionType.prototype.addVariants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.flyteidl.core.LiteralType, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flyteidl.core.UnionType} returns this
 */
proto.flyteidl.core.UnionType.prototype.clearVariantsList = function() {
  return this.setVariantsList([]);
};


