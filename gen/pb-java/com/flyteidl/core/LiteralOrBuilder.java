// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/literals.proto

package com.flyteidl.core;

public interface LiteralOrBuilder extends
    // @@protoc_insertion_point(interface_extends:flyteidl.core.Literal)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * A simple value.
   * </pre>
   *
   * <code>.flyteidl.core.Scalar scalar = 1 [json_name = "scalar"];</code>
   * @return Whether the scalar field is set.
   */
  boolean hasScalar();
  /**
   * <pre>
   * A simple value.
   * </pre>
   *
   * <code>.flyteidl.core.Scalar scalar = 1 [json_name = "scalar"];</code>
   * @return The scalar.
   */
  com.flyteidl.core.Scalar getScalar();
  /**
   * <pre>
   * A simple value.
   * </pre>
   *
   * <code>.flyteidl.core.Scalar scalar = 1 [json_name = "scalar"];</code>
   */
  com.flyteidl.core.ScalarOrBuilder getScalarOrBuilder();

  /**
   * <pre>
   * A collection of literals to allow nesting.
   * </pre>
   *
   * <code>.flyteidl.core.LiteralCollection collection = 2 [json_name = "collection"];</code>
   * @return Whether the collection field is set.
   */
  boolean hasCollection();
  /**
   * <pre>
   * A collection of literals to allow nesting.
   * </pre>
   *
   * <code>.flyteidl.core.LiteralCollection collection = 2 [json_name = "collection"];</code>
   * @return The collection.
   */
  com.flyteidl.core.LiteralCollection getCollection();
  /**
   * <pre>
   * A collection of literals to allow nesting.
   * </pre>
   *
   * <code>.flyteidl.core.LiteralCollection collection = 2 [json_name = "collection"];</code>
   */
  com.flyteidl.core.LiteralCollectionOrBuilder getCollectionOrBuilder();

  /**
   * <pre>
   * A map of strings to literals.
   * </pre>
   *
   * <code>.flyteidl.core.LiteralMap map = 3 [json_name = "map"];</code>
   * @return Whether the map field is set.
   */
  boolean hasMap();
  /**
   * <pre>
   * A map of strings to literals.
   * </pre>
   *
   * <code>.flyteidl.core.LiteralMap map = 3 [json_name = "map"];</code>
   * @return The map.
   */
  com.flyteidl.core.LiteralMap getMap();
  /**
   * <pre>
   * A map of strings to literals.
   * </pre>
   *
   * <code>.flyteidl.core.LiteralMap map = 3 [json_name = "map"];</code>
   */
  com.flyteidl.core.LiteralMapOrBuilder getMapOrBuilder();

  /**
   * <pre>
   * A hash representing this literal.
   * This is used for caching purposes. For more details refer to RFC 1893
   * (https://github.com/flyteorg/flyte/blob/master/rfc/system/1893-caching-of-offloaded-objects.md)
   * </pre>
   *
   * <code>string hash = 4 [json_name = "hash"];</code>
   * @return The hash.
   */
  java.lang.String getHash();
  /**
   * <pre>
   * A hash representing this literal.
   * This is used for caching purposes. For more details refer to RFC 1893
   * (https://github.com/flyteorg/flyte/blob/master/rfc/system/1893-caching-of-offloaded-objects.md)
   * </pre>
   *
   * <code>string hash = 4 [json_name = "hash"];</code>
   * @return The bytes for hash.
   */
  com.google.protobuf.ByteString
      getHashBytes();

  public com.flyteidl.core.Literal.ValueCase getValueCase();
}
