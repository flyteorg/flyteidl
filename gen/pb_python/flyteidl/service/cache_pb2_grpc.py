# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from flyteidl.service import cache_pb2 as flyteidl_dot_service_dot_cache__pb2


class CacheServiceStub(object):
    """CacheService defines an RPC Service for interacting with cached data in Flyte on a high level basis.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EvictExecutionCache = channel.unary_unary(
                '/flyteidl.service.CacheService/EvictExecutionCache',
                request_serializer=flyteidl_dot_service_dot_cache__pb2.EvictExecutionCacheRequest.SerializeToString,
                response_deserializer=flyteidl_dot_service_dot_cache__pb2.EvictCacheResponse.FromString,
                )
        self.EvictTaskExecutionCache = channel.unary_unary(
                '/flyteidl.service.CacheService/EvictTaskExecutionCache',
                request_serializer=flyteidl_dot_service_dot_cache__pb2.EvictTaskExecutionCacheRequest.SerializeToString,
                response_deserializer=flyteidl_dot_service_dot_cache__pb2.EvictCacheResponse.FromString,
                )


class CacheServiceServicer(object):
    """CacheService defines an RPC Service for interacting with cached data in Flyte on a high level basis.
    """

    def EvictExecutionCache(self, request, context):
        """Evicts all cached data for the referenced :ref:`ref_flyteidl.admin.Execution`.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EvictTaskExecutionCache(self, request, context):
        """Evicts all cached data for the referenced :ref:`ref_flyteidl.admin.TaskExecution`.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CacheServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EvictExecutionCache': grpc.unary_unary_rpc_method_handler(
                    servicer.EvictExecutionCache,
                    request_deserializer=flyteidl_dot_service_dot_cache__pb2.EvictExecutionCacheRequest.FromString,
                    response_serializer=flyteidl_dot_service_dot_cache__pb2.EvictCacheResponse.SerializeToString,
            ),
            'EvictTaskExecutionCache': grpc.unary_unary_rpc_method_handler(
                    servicer.EvictTaskExecutionCache,
                    request_deserializer=flyteidl_dot_service_dot_cache__pb2.EvictTaskExecutionCacheRequest.FromString,
                    response_serializer=flyteidl_dot_service_dot_cache__pb2.EvictCacheResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flyteidl.service.CacheService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CacheService(object):
    """CacheService defines an RPC Service for interacting with cached data in Flyte on a high level basis.
    """

    @staticmethod
    def EvictExecutionCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl.service.CacheService/EvictExecutionCache',
            flyteidl_dot_service_dot_cache__pb2.EvictExecutionCacheRequest.SerializeToString,
            flyteidl_dot_service_dot_cache__pb2.EvictCacheResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EvictTaskExecutionCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl.service.CacheService/EvictTaskExecutionCache',
            flyteidl_dot_service_dot_cache__pb2.EvictTaskExecutionCacheRequest.SerializeToString,
            flyteidl_dot_service_dot_cache__pb2.EvictCacheResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
