// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl/plugins/kubeflow/pytorch.proto

package plugins

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _pytorch_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ElasticConfig with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ElasticConfig) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RdzvBackend

	// no validation rules for MinReplicas

	// no validation rules for MaxReplicas

	// no validation rules for NprocPerNode

	// no validation rules for MaxRestarts

	return nil
}

// ElasticConfigValidationError is the validation error returned by
// ElasticConfig.Validate if the designated constraints aren't met.
type ElasticConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ElasticConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ElasticConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ElasticConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ElasticConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ElasticConfigValidationError) ErrorName() string { return "ElasticConfigValidationError" }

// Error satisfies the builtin error interface
func (e ElasticConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sElasticConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ElasticConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ElasticConfigValidationError{}

// Validate checks the field values on DistributedPyTorchTrainingTask with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DistributedPyTorchTrainingTask) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetWorkerReplicas()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DistributedPyTorchTrainingTaskValidationError{
				field:  "WorkerReplicas",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMasterReplicas()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DistributedPyTorchTrainingTaskValidationError{
				field:  "MasterReplicas",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRunPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DistributedPyTorchTrainingTaskValidationError{
				field:  "RunPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetElasticConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DistributedPyTorchTrainingTaskValidationError{
				field:  "ElasticConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DistributedPyTorchTrainingTaskValidationError is the validation error
// returned by DistributedPyTorchTrainingTask.Validate if the designated
// constraints aren't met.
type DistributedPyTorchTrainingTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistributedPyTorchTrainingTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistributedPyTorchTrainingTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistributedPyTorchTrainingTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistributedPyTorchTrainingTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistributedPyTorchTrainingTaskValidationError) ErrorName() string {
	return "DistributedPyTorchTrainingTaskValidationError"
}

// Error satisfies the builtin error interface
func (e DistributedPyTorchTrainingTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistributedPyTorchTrainingTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistributedPyTorchTrainingTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistributedPyTorchTrainingTaskValidationError{}

// Validate checks the field values on DistributedPyTorchTrainingReplicaSpec
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *DistributedPyTorchTrainingReplicaSpec) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Replicas

	// no validation rules for Image

	if v, ok := interface{}(m.GetResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DistributedPyTorchTrainingReplicaSpecValidationError{
				field:  "Resources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RestartPolicy

	return nil
}

// DistributedPyTorchTrainingReplicaSpecValidationError is the validation error
// returned by DistributedPyTorchTrainingReplicaSpec.Validate if the
// designated constraints aren't met.
type DistributedPyTorchTrainingReplicaSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistributedPyTorchTrainingReplicaSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistributedPyTorchTrainingReplicaSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistributedPyTorchTrainingReplicaSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistributedPyTorchTrainingReplicaSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistributedPyTorchTrainingReplicaSpecValidationError) ErrorName() string {
	return "DistributedPyTorchTrainingReplicaSpecValidationError"
}

// Error satisfies the builtin error interface
func (e DistributedPyTorchTrainingReplicaSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistributedPyTorchTrainingReplicaSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistributedPyTorchTrainingReplicaSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistributedPyTorchTrainingReplicaSpecValidationError{}
