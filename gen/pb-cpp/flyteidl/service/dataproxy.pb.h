// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/service/dataproxy.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fservice_2fdataproxy_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fservice_2fdataproxy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "flyteidl/core/artifact_id.pb.h"
#include "flyteidl/core/identifier.pb.h"
#include "flyteidl/core/literals.pb.h"
#include "flyteidl/artifact/artifacts.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fservice_2fdataproxy_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fservice_2fdataproxy_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fservice_2fdataproxy_2eproto();
namespace flyteidl {
namespace service {
class CreateDownloadLinkRequest;
class CreateDownloadLinkRequestDefaultTypeInternal;
extern CreateDownloadLinkRequestDefaultTypeInternal _CreateDownloadLinkRequest_default_instance_;
class CreateDownloadLinkResponse;
class CreateDownloadLinkResponseDefaultTypeInternal;
extern CreateDownloadLinkResponseDefaultTypeInternal _CreateDownloadLinkResponse_default_instance_;
class CreateDownloadLocationRequest;
class CreateDownloadLocationRequestDefaultTypeInternal;
extern CreateDownloadLocationRequestDefaultTypeInternal _CreateDownloadLocationRequest_default_instance_;
class CreateDownloadLocationResponse;
class CreateDownloadLocationResponseDefaultTypeInternal;
extern CreateDownloadLocationResponseDefaultTypeInternal _CreateDownloadLocationResponse_default_instance_;
class CreateUploadLocationRequest;
class CreateUploadLocationRequestDefaultTypeInternal;
extern CreateUploadLocationRequestDefaultTypeInternal _CreateUploadLocationRequest_default_instance_;
class CreateUploadLocationResponse;
class CreateUploadLocationResponseDefaultTypeInternal;
extern CreateUploadLocationResponseDefaultTypeInternal _CreateUploadLocationResponse_default_instance_;
class GetDataRequest;
class GetDataRequestDefaultTypeInternal;
extern GetDataRequestDefaultTypeInternal _GetDataRequest_default_instance_;
class GetDataResponse;
class GetDataResponseDefaultTypeInternal;
extern GetDataResponseDefaultTypeInternal _GetDataResponse_default_instance_;
class PreSignedURLs;
class PreSignedURLsDefaultTypeInternal;
extern PreSignedURLsDefaultTypeInternal _PreSignedURLs_default_instance_;
}  // namespace service
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::service::CreateDownloadLinkRequest* Arena::CreateMaybeMessage<::flyteidl::service::CreateDownloadLinkRequest>(Arena*);
template<> ::flyteidl::service::CreateDownloadLinkResponse* Arena::CreateMaybeMessage<::flyteidl::service::CreateDownloadLinkResponse>(Arena*);
template<> ::flyteidl::service::CreateDownloadLocationRequest* Arena::CreateMaybeMessage<::flyteidl::service::CreateDownloadLocationRequest>(Arena*);
template<> ::flyteidl::service::CreateDownloadLocationResponse* Arena::CreateMaybeMessage<::flyteidl::service::CreateDownloadLocationResponse>(Arena*);
template<> ::flyteidl::service::CreateUploadLocationRequest* Arena::CreateMaybeMessage<::flyteidl::service::CreateUploadLocationRequest>(Arena*);
template<> ::flyteidl::service::CreateUploadLocationResponse* Arena::CreateMaybeMessage<::flyteidl::service::CreateUploadLocationResponse>(Arena*);
template<> ::flyteidl::service::GetDataRequest* Arena::CreateMaybeMessage<::flyteidl::service::GetDataRequest>(Arena*);
template<> ::flyteidl::service::GetDataResponse* Arena::CreateMaybeMessage<::flyteidl::service::GetDataResponse>(Arena*);
template<> ::flyteidl::service::PreSignedURLs* Arena::CreateMaybeMessage<::flyteidl::service::PreSignedURLs>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace service {

enum ArtifactType {
  ARTIFACT_TYPE_UNDEFINED = 0,
  ARTIFACT_TYPE_DECK = 1,
  ArtifactType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ArtifactType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ArtifactType_IsValid(int value);
const ArtifactType ArtifactType_MIN = ARTIFACT_TYPE_UNDEFINED;
const ArtifactType ArtifactType_MAX = ARTIFACT_TYPE_DECK;
const int ArtifactType_ARRAYSIZE = ArtifactType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ArtifactType_descriptor();
inline const ::std::string& ArtifactType_Name(ArtifactType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ArtifactType_descriptor(), value);
}
inline bool ArtifactType_Parse(
    const ::std::string& name, ArtifactType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ArtifactType>(
    ArtifactType_descriptor(), name, value);
}
// ===================================================================

class CreateUploadLocationResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.service.CreateUploadLocationResponse) */ {
 public:
  CreateUploadLocationResponse();
  virtual ~CreateUploadLocationResponse();

  CreateUploadLocationResponse(const CreateUploadLocationResponse& from);

  inline CreateUploadLocationResponse& operator=(const CreateUploadLocationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateUploadLocationResponse(CreateUploadLocationResponse&& from) noexcept
    : CreateUploadLocationResponse() {
    *this = ::std::move(from);
  }

  inline CreateUploadLocationResponse& operator=(CreateUploadLocationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateUploadLocationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateUploadLocationResponse* internal_default_instance() {
    return reinterpret_cast<const CreateUploadLocationResponse*>(
               &_CreateUploadLocationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CreateUploadLocationResponse* other);
  friend void swap(CreateUploadLocationResponse& a, CreateUploadLocationResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateUploadLocationResponse* New() const final {
    return CreateMaybeMessage<CreateUploadLocationResponse>(nullptr);
  }

  CreateUploadLocationResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateUploadLocationResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateUploadLocationResponse& from);
  void MergeFrom(const CreateUploadLocationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUploadLocationResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string signed_url = 1;
  void clear_signed_url();
  static const int kSignedUrlFieldNumber = 1;
  const ::std::string& signed_url() const;
  void set_signed_url(const ::std::string& value);
  #if LANG_CXX11
  void set_signed_url(::std::string&& value);
  #endif
  void set_signed_url(const char* value);
  void set_signed_url(const char* value, size_t size);
  ::std::string* mutable_signed_url();
  ::std::string* release_signed_url();
  void set_allocated_signed_url(::std::string* signed_url);

  // string native_url = 2;
  void clear_native_url();
  static const int kNativeUrlFieldNumber = 2;
  const ::std::string& native_url() const;
  void set_native_url(const ::std::string& value);
  #if LANG_CXX11
  void set_native_url(::std::string&& value);
  #endif
  void set_native_url(const char* value);
  void set_native_url(const char* value, size_t size);
  ::std::string* mutable_native_url();
  ::std::string* release_native_url();
  void set_allocated_native_url(::std::string* native_url);

  // .google.protobuf.Timestamp expires_at = 3;
  bool has_expires_at() const;
  void clear_expires_at();
  static const int kExpiresAtFieldNumber = 3;
  const ::google::protobuf::Timestamp& expires_at() const;
  ::google::protobuf::Timestamp* release_expires_at();
  ::google::protobuf::Timestamp* mutable_expires_at();
  void set_allocated_expires_at(::google::protobuf::Timestamp* expires_at);

  // .flyteidl.artifact.Artifact artifact = 4;
  bool has_artifact() const;
  void clear_artifact();
  static const int kArtifactFieldNumber = 4;
  const ::flyteidl::artifact::Artifact& artifact() const;
  ::flyteidl::artifact::Artifact* release_artifact();
  ::flyteidl::artifact::Artifact* mutable_artifact();
  void set_allocated_artifact(::flyteidl::artifact::Artifact* artifact);

  // @@protoc_insertion_point(class_scope:flyteidl.service.CreateUploadLocationResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr signed_url_;
  ::google::protobuf::internal::ArenaStringPtr native_url_;
  ::google::protobuf::Timestamp* expires_at_;
  ::flyteidl::artifact::Artifact* artifact_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fservice_2fdataproxy_2eproto;
};
// -------------------------------------------------------------------

class CreateUploadLocationRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.service.CreateUploadLocationRequest) */ {
 public:
  CreateUploadLocationRequest();
  virtual ~CreateUploadLocationRequest();

  CreateUploadLocationRequest(const CreateUploadLocationRequest& from);

  inline CreateUploadLocationRequest& operator=(const CreateUploadLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateUploadLocationRequest(CreateUploadLocationRequest&& from) noexcept
    : CreateUploadLocationRequest() {
    *this = ::std::move(from);
  }

  inline CreateUploadLocationRequest& operator=(CreateUploadLocationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateUploadLocationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateUploadLocationRequest* internal_default_instance() {
    return reinterpret_cast<const CreateUploadLocationRequest*>(
               &_CreateUploadLocationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CreateUploadLocationRequest* other);
  friend void swap(CreateUploadLocationRequest& a, CreateUploadLocationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateUploadLocationRequest* New() const final {
    return CreateMaybeMessage<CreateUploadLocationRequest>(nullptr);
  }

  CreateUploadLocationRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateUploadLocationRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateUploadLocationRequest& from);
  void MergeFrom(const CreateUploadLocationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUploadLocationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project = 1;
  void clear_project();
  static const int kProjectFieldNumber = 1;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  #if LANG_CXX11
  void set_project(::std::string&& value);
  #endif
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);

  // string domain = 2;
  void clear_domain();
  static const int kDomainFieldNumber = 2;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string filename = 3;
  void clear_filename();
  static const int kFilenameFieldNumber = 3;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // bytes content_md5 = 5;
  void clear_content_md5();
  static const int kContentMd5FieldNumber = 5;
  const ::std::string& content_md5() const;
  void set_content_md5(const ::std::string& value);
  #if LANG_CXX11
  void set_content_md5(::std::string&& value);
  #endif
  void set_content_md5(const char* value);
  void set_content_md5(const void* value, size_t size);
  ::std::string* mutable_content_md5();
  ::std::string* release_content_md5();
  void set_allocated_content_md5(::std::string* content_md5);

  // string filename_root = 6;
  void clear_filename_root();
  static const int kFilenameRootFieldNumber = 6;
  const ::std::string& filename_root() const;
  void set_filename_root(const ::std::string& value);
  #if LANG_CXX11
  void set_filename_root(::std::string&& value);
  #endif
  void set_filename_root(const char* value);
  void set_filename_root(const char* value, size_t size);
  ::std::string* mutable_filename_root();
  ::std::string* release_filename_root();
  void set_allocated_filename_root(::std::string* filename_root);

  // .google.protobuf.Duration expires_in = 4;
  bool has_expires_in() const;
  void clear_expires_in();
  static const int kExpiresInFieldNumber = 4;
  const ::google::protobuf::Duration& expires_in() const;
  ::google::protobuf::Duration* release_expires_in();
  ::google::protobuf::Duration* mutable_expires_in();
  void set_allocated_expires_in(::google::protobuf::Duration* expires_in);

  // .flyteidl.artifact.ArtifactSpec artifact_spec = 7;
  bool has_artifact_spec() const;
  void clear_artifact_spec();
  static const int kArtifactSpecFieldNumber = 7;
  const ::flyteidl::artifact::ArtifactSpec& artifact_spec() const;
  ::flyteidl::artifact::ArtifactSpec* release_artifact_spec();
  ::flyteidl::artifact::ArtifactSpec* mutable_artifact_spec();
  void set_allocated_artifact_spec(::flyteidl::artifact::ArtifactSpec* artifact_spec);

  // @@protoc_insertion_point(class_scope:flyteidl.service.CreateUploadLocationRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::internal::ArenaStringPtr content_md5_;
  ::google::protobuf::internal::ArenaStringPtr filename_root_;
  ::google::protobuf::Duration* expires_in_;
  ::flyteidl::artifact::ArtifactSpec* artifact_spec_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fservice_2fdataproxy_2eproto;
};
// -------------------------------------------------------------------

class CreateDownloadLocationRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.service.CreateDownloadLocationRequest) */ {
 public:
  CreateDownloadLocationRequest();
  virtual ~CreateDownloadLocationRequest();

  CreateDownloadLocationRequest(const CreateDownloadLocationRequest& from);

  inline CreateDownloadLocationRequest& operator=(const CreateDownloadLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateDownloadLocationRequest(CreateDownloadLocationRequest&& from) noexcept
    : CreateDownloadLocationRequest() {
    *this = ::std::move(from);
  }

  inline CreateDownloadLocationRequest& operator=(CreateDownloadLocationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateDownloadLocationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDownloadLocationRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDownloadLocationRequest*>(
               &_CreateDownloadLocationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CreateDownloadLocationRequest* other);
  friend void swap(CreateDownloadLocationRequest& a, CreateDownloadLocationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateDownloadLocationRequest* New() const final {
    return CreateMaybeMessage<CreateDownloadLocationRequest>(nullptr);
  }

  CreateDownloadLocationRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateDownloadLocationRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateDownloadLocationRequest& from);
  void MergeFrom(const CreateDownloadLocationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDownloadLocationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string native_url = 1;
  void clear_native_url();
  static const int kNativeUrlFieldNumber = 1;
  const ::std::string& native_url() const;
  void set_native_url(const ::std::string& value);
  #if LANG_CXX11
  void set_native_url(::std::string&& value);
  #endif
  void set_native_url(const char* value);
  void set_native_url(const char* value, size_t size);
  ::std::string* mutable_native_url();
  ::std::string* release_native_url();
  void set_allocated_native_url(::std::string* native_url);

  // .google.protobuf.Duration expires_in = 2;
  bool has_expires_in() const;
  void clear_expires_in();
  static const int kExpiresInFieldNumber = 2;
  const ::google::protobuf::Duration& expires_in() const;
  ::google::protobuf::Duration* release_expires_in();
  ::google::protobuf::Duration* mutable_expires_in();
  void set_allocated_expires_in(::google::protobuf::Duration* expires_in);

  // @@protoc_insertion_point(class_scope:flyteidl.service.CreateDownloadLocationRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr native_url_;
  ::google::protobuf::Duration* expires_in_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fservice_2fdataproxy_2eproto;
};
// -------------------------------------------------------------------

class CreateDownloadLocationResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.service.CreateDownloadLocationResponse) */ {
 public:
  CreateDownloadLocationResponse();
  virtual ~CreateDownloadLocationResponse();

  CreateDownloadLocationResponse(const CreateDownloadLocationResponse& from);

  inline CreateDownloadLocationResponse& operator=(const CreateDownloadLocationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateDownloadLocationResponse(CreateDownloadLocationResponse&& from) noexcept
    : CreateDownloadLocationResponse() {
    *this = ::std::move(from);
  }

  inline CreateDownloadLocationResponse& operator=(CreateDownloadLocationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateDownloadLocationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDownloadLocationResponse* internal_default_instance() {
    return reinterpret_cast<const CreateDownloadLocationResponse*>(
               &_CreateDownloadLocationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CreateDownloadLocationResponse* other);
  friend void swap(CreateDownloadLocationResponse& a, CreateDownloadLocationResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateDownloadLocationResponse* New() const final {
    return CreateMaybeMessage<CreateDownloadLocationResponse>(nullptr);
  }

  CreateDownloadLocationResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateDownloadLocationResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateDownloadLocationResponse& from);
  void MergeFrom(const CreateDownloadLocationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDownloadLocationResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string signed_url = 1;
  void clear_signed_url();
  static const int kSignedUrlFieldNumber = 1;
  const ::std::string& signed_url() const;
  void set_signed_url(const ::std::string& value);
  #if LANG_CXX11
  void set_signed_url(::std::string&& value);
  #endif
  void set_signed_url(const char* value);
  void set_signed_url(const char* value, size_t size);
  ::std::string* mutable_signed_url();
  ::std::string* release_signed_url();
  void set_allocated_signed_url(::std::string* signed_url);

  // .google.protobuf.Timestamp expires_at = 2;
  bool has_expires_at() const;
  void clear_expires_at();
  static const int kExpiresAtFieldNumber = 2;
  const ::google::protobuf::Timestamp& expires_at() const;
  ::google::protobuf::Timestamp* release_expires_at();
  ::google::protobuf::Timestamp* mutable_expires_at();
  void set_allocated_expires_at(::google::protobuf::Timestamp* expires_at);

  // @@protoc_insertion_point(class_scope:flyteidl.service.CreateDownloadLocationResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr signed_url_;
  ::google::protobuf::Timestamp* expires_at_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fservice_2fdataproxy_2eproto;
};
// -------------------------------------------------------------------

class CreateDownloadLinkRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.service.CreateDownloadLinkRequest) */ {
 public:
  CreateDownloadLinkRequest();
  virtual ~CreateDownloadLinkRequest();

  CreateDownloadLinkRequest(const CreateDownloadLinkRequest& from);

  inline CreateDownloadLinkRequest& operator=(const CreateDownloadLinkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateDownloadLinkRequest(CreateDownloadLinkRequest&& from) noexcept
    : CreateDownloadLinkRequest() {
    *this = ::std::move(from);
  }

  inline CreateDownloadLinkRequest& operator=(CreateDownloadLinkRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateDownloadLinkRequest& default_instance();

  enum SourceCase {
    kNodeExecutionId = 3,
    SOURCE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDownloadLinkRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDownloadLinkRequest*>(
               &_CreateDownloadLinkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CreateDownloadLinkRequest* other);
  friend void swap(CreateDownloadLinkRequest& a, CreateDownloadLinkRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateDownloadLinkRequest* New() const final {
    return CreateMaybeMessage<CreateDownloadLinkRequest>(nullptr);
  }

  CreateDownloadLinkRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateDownloadLinkRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateDownloadLinkRequest& from);
  void MergeFrom(const CreateDownloadLinkRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDownloadLinkRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Duration expires_in = 2;
  bool has_expires_in() const;
  void clear_expires_in();
  static const int kExpiresInFieldNumber = 2;
  const ::google::protobuf::Duration& expires_in() const;
  ::google::protobuf::Duration* release_expires_in();
  ::google::protobuf::Duration* mutable_expires_in();
  void set_allocated_expires_in(::google::protobuf::Duration* expires_in);

  // .flyteidl.service.ArtifactType artifact_type = 1;
  void clear_artifact_type();
  static const int kArtifactTypeFieldNumber = 1;
  ::flyteidl::service::ArtifactType artifact_type() const;
  void set_artifact_type(::flyteidl::service::ArtifactType value);

  // .flyteidl.core.NodeExecutionIdentifier node_execution_id = 3;
  bool has_node_execution_id() const;
  void clear_node_execution_id();
  static const int kNodeExecutionIdFieldNumber = 3;
  const ::flyteidl::core::NodeExecutionIdentifier& node_execution_id() const;
  ::flyteidl::core::NodeExecutionIdentifier* release_node_execution_id();
  ::flyteidl::core::NodeExecutionIdentifier* mutable_node_execution_id();
  void set_allocated_node_execution_id(::flyteidl::core::NodeExecutionIdentifier* node_execution_id);

  void clear_source();
  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.service.CreateDownloadLinkRequest)
 private:
  class HasBitSetters;
  void set_has_node_execution_id();

  inline bool has_source() const;
  inline void clear_has_source();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Duration* expires_in_;
  int artifact_type_;
  union SourceUnion {
    SourceUnion() {}
    ::flyteidl::core::NodeExecutionIdentifier* node_execution_id_;
  } source_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fservice_2fdataproxy_2eproto;
};
// -------------------------------------------------------------------

class CreateDownloadLinkResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.service.CreateDownloadLinkResponse) */ {
 public:
  CreateDownloadLinkResponse();
  virtual ~CreateDownloadLinkResponse();

  CreateDownloadLinkResponse(const CreateDownloadLinkResponse& from);

  inline CreateDownloadLinkResponse& operator=(const CreateDownloadLinkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateDownloadLinkResponse(CreateDownloadLinkResponse&& from) noexcept
    : CreateDownloadLinkResponse() {
    *this = ::std::move(from);
  }

  inline CreateDownloadLinkResponse& operator=(CreateDownloadLinkResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateDownloadLinkResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDownloadLinkResponse* internal_default_instance() {
    return reinterpret_cast<const CreateDownloadLinkResponse*>(
               &_CreateDownloadLinkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CreateDownloadLinkResponse* other);
  friend void swap(CreateDownloadLinkResponse& a, CreateDownloadLinkResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateDownloadLinkResponse* New() const final {
    return CreateMaybeMessage<CreateDownloadLinkResponse>(nullptr);
  }

  CreateDownloadLinkResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateDownloadLinkResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateDownloadLinkResponse& from);
  void MergeFrom(const CreateDownloadLinkResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDownloadLinkResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string signed_url = 1 [deprecated = true];
  PROTOBUF_DEPRECATED int signed_url_size() const;
  PROTOBUF_DEPRECATED void clear_signed_url();
  PROTOBUF_DEPRECATED static const int kSignedUrlFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& signed_url(int index) const;
  PROTOBUF_DEPRECATED ::std::string* mutable_signed_url(int index);
  PROTOBUF_DEPRECATED void set_signed_url(int index, const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_signed_url(int index, ::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_signed_url(int index, const char* value);
  PROTOBUF_DEPRECATED void set_signed_url(int index, const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* add_signed_url();
  PROTOBUF_DEPRECATED void add_signed_url(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void add_signed_url(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void add_signed_url(const char* value);
  PROTOBUF_DEPRECATED void add_signed_url(const char* value, size_t size);
  PROTOBUF_DEPRECATED const ::google::protobuf::RepeatedPtrField<::std::string>& signed_url() const;
  PROTOBUF_DEPRECATED ::google::protobuf::RepeatedPtrField<::std::string>* mutable_signed_url();

  // .google.protobuf.Timestamp expires_at = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_expires_at() const;
  PROTOBUF_DEPRECATED void clear_expires_at();
  PROTOBUF_DEPRECATED static const int kExpiresAtFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::google::protobuf::Timestamp& expires_at() const;
  PROTOBUF_DEPRECATED ::google::protobuf::Timestamp* release_expires_at();
  PROTOBUF_DEPRECATED ::google::protobuf::Timestamp* mutable_expires_at();
  PROTOBUF_DEPRECATED void set_allocated_expires_at(::google::protobuf::Timestamp* expires_at);

  // .flyteidl.service.PreSignedURLs pre_signed_urls = 3;
  bool has_pre_signed_urls() const;
  void clear_pre_signed_urls();
  static const int kPreSignedUrlsFieldNumber = 3;
  const ::flyteidl::service::PreSignedURLs& pre_signed_urls() const;
  ::flyteidl::service::PreSignedURLs* release_pre_signed_urls();
  ::flyteidl::service::PreSignedURLs* mutable_pre_signed_urls();
  void set_allocated_pre_signed_urls(::flyteidl::service::PreSignedURLs* pre_signed_urls);

  // @@protoc_insertion_point(class_scope:flyteidl.service.CreateDownloadLinkResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> signed_url_;
  ::google::protobuf::Timestamp* expires_at_;
  ::flyteidl::service::PreSignedURLs* pre_signed_urls_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fservice_2fdataproxy_2eproto;
};
// -------------------------------------------------------------------

class PreSignedURLs final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.service.PreSignedURLs) */ {
 public:
  PreSignedURLs();
  virtual ~PreSignedURLs();

  PreSignedURLs(const PreSignedURLs& from);

  inline PreSignedURLs& operator=(const PreSignedURLs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PreSignedURLs(PreSignedURLs&& from) noexcept
    : PreSignedURLs() {
    *this = ::std::move(from);
  }

  inline PreSignedURLs& operator=(PreSignedURLs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PreSignedURLs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PreSignedURLs* internal_default_instance() {
    return reinterpret_cast<const PreSignedURLs*>(
               &_PreSignedURLs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(PreSignedURLs* other);
  friend void swap(PreSignedURLs& a, PreSignedURLs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PreSignedURLs* New() const final {
    return CreateMaybeMessage<PreSignedURLs>(nullptr);
  }

  PreSignedURLs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PreSignedURLs>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PreSignedURLs& from);
  void MergeFrom(const PreSignedURLs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreSignedURLs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string signed_url = 1;
  int signed_url_size() const;
  void clear_signed_url();
  static const int kSignedUrlFieldNumber = 1;
  const ::std::string& signed_url(int index) const;
  ::std::string* mutable_signed_url(int index);
  void set_signed_url(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_signed_url(int index, ::std::string&& value);
  #endif
  void set_signed_url(int index, const char* value);
  void set_signed_url(int index, const char* value, size_t size);
  ::std::string* add_signed_url();
  void add_signed_url(const ::std::string& value);
  #if LANG_CXX11
  void add_signed_url(::std::string&& value);
  #endif
  void add_signed_url(const char* value);
  void add_signed_url(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& signed_url() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_signed_url();

  // .google.protobuf.Timestamp expires_at = 2;
  bool has_expires_at() const;
  void clear_expires_at();
  static const int kExpiresAtFieldNumber = 2;
  const ::google::protobuf::Timestamp& expires_at() const;
  ::google::protobuf::Timestamp* release_expires_at();
  ::google::protobuf::Timestamp* mutable_expires_at();
  void set_allocated_expires_at(::google::protobuf::Timestamp* expires_at);

  // @@protoc_insertion_point(class_scope:flyteidl.service.PreSignedURLs)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> signed_url_;
  ::google::protobuf::Timestamp* expires_at_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fservice_2fdataproxy_2eproto;
};
// -------------------------------------------------------------------

class GetDataRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.service.GetDataRequest) */ {
 public:
  GetDataRequest();
  virtual ~GetDataRequest();

  GetDataRequest(const GetDataRequest& from);

  inline GetDataRequest& operator=(const GetDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDataRequest(GetDataRequest&& from) noexcept
    : GetDataRequest() {
    *this = ::std::move(from);
  }

  inline GetDataRequest& operator=(GetDataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetDataRequest& default_instance();

  enum QueryCase {
    kFlyteUrl = 1,
    kArtifactId = 2,
    QUERY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDataRequest* internal_default_instance() {
    return reinterpret_cast<const GetDataRequest*>(
               &_GetDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GetDataRequest* other);
  friend void swap(GetDataRequest& a, GetDataRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDataRequest* New() const final {
    return CreateMaybeMessage<GetDataRequest>(nullptr);
  }

  GetDataRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetDataRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetDataRequest& from);
  void MergeFrom(const GetDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDataRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string flyte_url = 1;
  private:
  bool has_flyte_url() const;
  public:
  void clear_flyte_url();
  static const int kFlyteUrlFieldNumber = 1;
  const ::std::string& flyte_url() const;
  void set_flyte_url(const ::std::string& value);
  #if LANG_CXX11
  void set_flyte_url(::std::string&& value);
  #endif
  void set_flyte_url(const char* value);
  void set_flyte_url(const char* value, size_t size);
  ::std::string* mutable_flyte_url();
  ::std::string* release_flyte_url();
  void set_allocated_flyte_url(::std::string* flyte_url);

  // .flyteidl.core.ArtifactID artifact_id = 2;
  bool has_artifact_id() const;
  void clear_artifact_id();
  static const int kArtifactIdFieldNumber = 2;
  const ::flyteidl::core::ArtifactID& artifact_id() const;
  ::flyteidl::core::ArtifactID* release_artifact_id();
  ::flyteidl::core::ArtifactID* mutable_artifact_id();
  void set_allocated_artifact_id(::flyteidl::core::ArtifactID* artifact_id);

  void clear_query();
  QueryCase query_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.service.GetDataRequest)
 private:
  class HasBitSetters;
  void set_has_flyte_url();
  void set_has_artifact_id();

  inline bool has_query() const;
  inline void clear_has_query();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union QueryUnion {
    QueryUnion() {}
    ::google::protobuf::internal::ArenaStringPtr flyte_url_;
    ::flyteidl::core::ArtifactID* artifact_id_;
  } query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fservice_2fdataproxy_2eproto;
};
// -------------------------------------------------------------------

class GetDataResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.service.GetDataResponse) */ {
 public:
  GetDataResponse();
  virtual ~GetDataResponse();

  GetDataResponse(const GetDataResponse& from);

  inline GetDataResponse& operator=(const GetDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDataResponse(GetDataResponse&& from) noexcept
    : GetDataResponse() {
    *this = ::std::move(from);
  }

  inline GetDataResponse& operator=(GetDataResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetDataResponse& default_instance();

  enum DataCase {
    kLiteralMap = 1,
    kPreSignedUrls = 2,
    kLiteral = 3,
    kArtifact = 4,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDataResponse* internal_default_instance() {
    return reinterpret_cast<const GetDataResponse*>(
               &_GetDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(GetDataResponse* other);
  friend void swap(GetDataResponse& a, GetDataResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDataResponse* New() const final {
    return CreateMaybeMessage<GetDataResponse>(nullptr);
  }

  GetDataResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetDataResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetDataResponse& from);
  void MergeFrom(const GetDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDataResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.LiteralMap literal_map = 1;
  bool has_literal_map() const;
  void clear_literal_map();
  static const int kLiteralMapFieldNumber = 1;
  const ::flyteidl::core::LiteralMap& literal_map() const;
  ::flyteidl::core::LiteralMap* release_literal_map();
  ::flyteidl::core::LiteralMap* mutable_literal_map();
  void set_allocated_literal_map(::flyteidl::core::LiteralMap* literal_map);

  // .flyteidl.service.PreSignedURLs pre_signed_urls = 2;
  bool has_pre_signed_urls() const;
  void clear_pre_signed_urls();
  static const int kPreSignedUrlsFieldNumber = 2;
  const ::flyteidl::service::PreSignedURLs& pre_signed_urls() const;
  ::flyteidl::service::PreSignedURLs* release_pre_signed_urls();
  ::flyteidl::service::PreSignedURLs* mutable_pre_signed_urls();
  void set_allocated_pre_signed_urls(::flyteidl::service::PreSignedURLs* pre_signed_urls);

  // .flyteidl.core.Literal literal = 3;
  bool has_literal() const;
  void clear_literal();
  static const int kLiteralFieldNumber = 3;
  const ::flyteidl::core::Literal& literal() const;
  ::flyteidl::core::Literal* release_literal();
  ::flyteidl::core::Literal* mutable_literal();
  void set_allocated_literal(::flyteidl::core::Literal* literal);

  // .flyteidl.artifact.Artifact artifact = 4;
  bool has_artifact() const;
  void clear_artifact();
  static const int kArtifactFieldNumber = 4;
  const ::flyteidl::artifact::Artifact& artifact() const;
  ::flyteidl::artifact::Artifact* release_artifact();
  ::flyteidl::artifact::Artifact* mutable_artifact();
  void set_allocated_artifact(::flyteidl::artifact::Artifact* artifact);

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.service.GetDataResponse)
 private:
  class HasBitSetters;
  void set_has_literal_map();
  void set_has_pre_signed_urls();
  void set_has_literal();
  void set_has_artifact();

  inline bool has_data() const;
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union DataUnion {
    DataUnion() {}
    ::flyteidl::core::LiteralMap* literal_map_;
    ::flyteidl::service::PreSignedURLs* pre_signed_urls_;
    ::flyteidl::core::Literal* literal_;
    ::flyteidl::artifact::Artifact* artifact_;
  } data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fservice_2fdataproxy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateUploadLocationResponse

// string signed_url = 1;
inline void CreateUploadLocationResponse::clear_signed_url() {
  signed_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateUploadLocationResponse::signed_url() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateUploadLocationResponse.signed_url)
  return signed_url_.GetNoArena();
}
inline void CreateUploadLocationResponse::set_signed_url(const ::std::string& value) {
  
  signed_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.service.CreateUploadLocationResponse.signed_url)
}
#if LANG_CXX11
inline void CreateUploadLocationResponse::set_signed_url(::std::string&& value) {
  
  signed_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.service.CreateUploadLocationResponse.signed_url)
}
#endif
inline void CreateUploadLocationResponse::set_signed_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signed_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.service.CreateUploadLocationResponse.signed_url)
}
inline void CreateUploadLocationResponse::set_signed_url(const char* value, size_t size) {
  
  signed_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.CreateUploadLocationResponse.signed_url)
}
inline ::std::string* CreateUploadLocationResponse::mutable_signed_url() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.service.CreateUploadLocationResponse.signed_url)
  return signed_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateUploadLocationResponse::release_signed_url() {
  // @@protoc_insertion_point(field_release:flyteidl.service.CreateUploadLocationResponse.signed_url)
  
  return signed_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateUploadLocationResponse::set_allocated_signed_url(::std::string* signed_url) {
  if (signed_url != nullptr) {
    
  } else {
    
  }
  signed_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signed_url);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.CreateUploadLocationResponse.signed_url)
}

// string native_url = 2;
inline void CreateUploadLocationResponse::clear_native_url() {
  native_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateUploadLocationResponse::native_url() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateUploadLocationResponse.native_url)
  return native_url_.GetNoArena();
}
inline void CreateUploadLocationResponse::set_native_url(const ::std::string& value) {
  
  native_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.service.CreateUploadLocationResponse.native_url)
}
#if LANG_CXX11
inline void CreateUploadLocationResponse::set_native_url(::std::string&& value) {
  
  native_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.service.CreateUploadLocationResponse.native_url)
}
#endif
inline void CreateUploadLocationResponse::set_native_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  native_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.service.CreateUploadLocationResponse.native_url)
}
inline void CreateUploadLocationResponse::set_native_url(const char* value, size_t size) {
  
  native_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.CreateUploadLocationResponse.native_url)
}
inline ::std::string* CreateUploadLocationResponse::mutable_native_url() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.service.CreateUploadLocationResponse.native_url)
  return native_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateUploadLocationResponse::release_native_url() {
  // @@protoc_insertion_point(field_release:flyteidl.service.CreateUploadLocationResponse.native_url)
  
  return native_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateUploadLocationResponse::set_allocated_native_url(::std::string* native_url) {
  if (native_url != nullptr) {
    
  } else {
    
  }
  native_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), native_url);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.CreateUploadLocationResponse.native_url)
}

// .google.protobuf.Timestamp expires_at = 3;
inline bool CreateUploadLocationResponse::has_expires_at() const {
  return this != internal_default_instance() && expires_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& CreateUploadLocationResponse::expires_at() const {
  const ::google::protobuf::Timestamp* p = expires_at_;
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateUploadLocationResponse.expires_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* CreateUploadLocationResponse::release_expires_at() {
  // @@protoc_insertion_point(field_release:flyteidl.service.CreateUploadLocationResponse.expires_at)
  
  ::google::protobuf::Timestamp* temp = expires_at_;
  expires_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* CreateUploadLocationResponse::mutable_expires_at() {
  
  if (expires_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    expires_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.service.CreateUploadLocationResponse.expires_at)
  return expires_at_;
}
inline void CreateUploadLocationResponse::set_allocated_expires_at(::google::protobuf::Timestamp* expires_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(expires_at_);
  }
  if (expires_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(expires_at)->GetArena();
    if (message_arena != submessage_arena) {
      expires_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expires_at, submessage_arena);
    }
    
  } else {
    
  }
  expires_at_ = expires_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.CreateUploadLocationResponse.expires_at)
}

// .flyteidl.artifact.Artifact artifact = 4;
inline bool CreateUploadLocationResponse::has_artifact() const {
  return this != internal_default_instance() && artifact_ != nullptr;
}
inline const ::flyteidl::artifact::Artifact& CreateUploadLocationResponse::artifact() const {
  const ::flyteidl::artifact::Artifact* p = artifact_;
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateUploadLocationResponse.artifact)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::artifact::Artifact*>(
      &::flyteidl::artifact::_Artifact_default_instance_);
}
inline ::flyteidl::artifact::Artifact* CreateUploadLocationResponse::release_artifact() {
  // @@protoc_insertion_point(field_release:flyteidl.service.CreateUploadLocationResponse.artifact)
  
  ::flyteidl::artifact::Artifact* temp = artifact_;
  artifact_ = nullptr;
  return temp;
}
inline ::flyteidl::artifact::Artifact* CreateUploadLocationResponse::mutable_artifact() {
  
  if (artifact_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::artifact::Artifact>(GetArenaNoVirtual());
    artifact_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.service.CreateUploadLocationResponse.artifact)
  return artifact_;
}
inline void CreateUploadLocationResponse::set_allocated_artifact(::flyteidl::artifact::Artifact* artifact) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(artifact_);
  }
  if (artifact) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      artifact = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, artifact, submessage_arena);
    }
    
  } else {
    
  }
  artifact_ = artifact;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.CreateUploadLocationResponse.artifact)
}

// -------------------------------------------------------------------

// CreateUploadLocationRequest

// string project = 1;
inline void CreateUploadLocationRequest::clear_project() {
  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateUploadLocationRequest::project() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateUploadLocationRequest.project)
  return project_.GetNoArena();
}
inline void CreateUploadLocationRequest::set_project(const ::std::string& value) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.service.CreateUploadLocationRequest.project)
}
#if LANG_CXX11
inline void CreateUploadLocationRequest::set_project(::std::string&& value) {
  
  project_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.service.CreateUploadLocationRequest.project)
}
#endif
inline void CreateUploadLocationRequest::set_project(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.service.CreateUploadLocationRequest.project)
}
inline void CreateUploadLocationRequest::set_project(const char* value, size_t size) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.CreateUploadLocationRequest.project)
}
inline ::std::string* CreateUploadLocationRequest::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.service.CreateUploadLocationRequest.project)
  return project_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateUploadLocationRequest::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.service.CreateUploadLocationRequest.project)
  
  return project_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateUploadLocationRequest::set_allocated_project(::std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.CreateUploadLocationRequest.project)
}

// string domain = 2;
inline void CreateUploadLocationRequest::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateUploadLocationRequest::domain() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateUploadLocationRequest.domain)
  return domain_.GetNoArena();
}
inline void CreateUploadLocationRequest::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.service.CreateUploadLocationRequest.domain)
}
#if LANG_CXX11
inline void CreateUploadLocationRequest::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.service.CreateUploadLocationRequest.domain)
}
#endif
inline void CreateUploadLocationRequest::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.service.CreateUploadLocationRequest.domain)
}
inline void CreateUploadLocationRequest::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.CreateUploadLocationRequest.domain)
}
inline ::std::string* CreateUploadLocationRequest::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.service.CreateUploadLocationRequest.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateUploadLocationRequest::release_domain() {
  // @@protoc_insertion_point(field_release:flyteidl.service.CreateUploadLocationRequest.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateUploadLocationRequest::set_allocated_domain(::std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.CreateUploadLocationRequest.domain)
}

// string filename = 3;
inline void CreateUploadLocationRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateUploadLocationRequest::filename() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateUploadLocationRequest.filename)
  return filename_.GetNoArena();
}
inline void CreateUploadLocationRequest::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.service.CreateUploadLocationRequest.filename)
}
#if LANG_CXX11
inline void CreateUploadLocationRequest::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.service.CreateUploadLocationRequest.filename)
}
#endif
inline void CreateUploadLocationRequest::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.service.CreateUploadLocationRequest.filename)
}
inline void CreateUploadLocationRequest::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.CreateUploadLocationRequest.filename)
}
inline ::std::string* CreateUploadLocationRequest::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.service.CreateUploadLocationRequest.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateUploadLocationRequest::release_filename() {
  // @@protoc_insertion_point(field_release:flyteidl.service.CreateUploadLocationRequest.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateUploadLocationRequest::set_allocated_filename(::std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.CreateUploadLocationRequest.filename)
}

// .google.protobuf.Duration expires_in = 4;
inline bool CreateUploadLocationRequest::has_expires_in() const {
  return this != internal_default_instance() && expires_in_ != nullptr;
}
inline const ::google::protobuf::Duration& CreateUploadLocationRequest::expires_in() const {
  const ::google::protobuf::Duration* p = expires_in_;
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateUploadLocationRequest.expires_in)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* CreateUploadLocationRequest::release_expires_in() {
  // @@protoc_insertion_point(field_release:flyteidl.service.CreateUploadLocationRequest.expires_in)
  
  ::google::protobuf::Duration* temp = expires_in_;
  expires_in_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* CreateUploadLocationRequest::mutable_expires_in() {
  
  if (expires_in_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    expires_in_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.service.CreateUploadLocationRequest.expires_in)
  return expires_in_;
}
inline void CreateUploadLocationRequest::set_allocated_expires_in(::google::protobuf::Duration* expires_in) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(expires_in_);
  }
  if (expires_in) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(expires_in)->GetArena();
    if (message_arena != submessage_arena) {
      expires_in = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expires_in, submessage_arena);
    }
    
  } else {
    
  }
  expires_in_ = expires_in;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.CreateUploadLocationRequest.expires_in)
}

// bytes content_md5 = 5;
inline void CreateUploadLocationRequest::clear_content_md5() {
  content_md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateUploadLocationRequest::content_md5() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateUploadLocationRequest.content_md5)
  return content_md5_.GetNoArena();
}
inline void CreateUploadLocationRequest::set_content_md5(const ::std::string& value) {
  
  content_md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.service.CreateUploadLocationRequest.content_md5)
}
#if LANG_CXX11
inline void CreateUploadLocationRequest::set_content_md5(::std::string&& value) {
  
  content_md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.service.CreateUploadLocationRequest.content_md5)
}
#endif
inline void CreateUploadLocationRequest::set_content_md5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.service.CreateUploadLocationRequest.content_md5)
}
inline void CreateUploadLocationRequest::set_content_md5(const void* value, size_t size) {
  
  content_md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.CreateUploadLocationRequest.content_md5)
}
inline ::std::string* CreateUploadLocationRequest::mutable_content_md5() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.service.CreateUploadLocationRequest.content_md5)
  return content_md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateUploadLocationRequest::release_content_md5() {
  // @@protoc_insertion_point(field_release:flyteidl.service.CreateUploadLocationRequest.content_md5)
  
  return content_md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateUploadLocationRequest::set_allocated_content_md5(::std::string* content_md5) {
  if (content_md5 != nullptr) {
    
  } else {
    
  }
  content_md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content_md5);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.CreateUploadLocationRequest.content_md5)
}

// string filename_root = 6;
inline void CreateUploadLocationRequest::clear_filename_root() {
  filename_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateUploadLocationRequest::filename_root() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateUploadLocationRequest.filename_root)
  return filename_root_.GetNoArena();
}
inline void CreateUploadLocationRequest::set_filename_root(const ::std::string& value) {
  
  filename_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.service.CreateUploadLocationRequest.filename_root)
}
#if LANG_CXX11
inline void CreateUploadLocationRequest::set_filename_root(::std::string&& value) {
  
  filename_root_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.service.CreateUploadLocationRequest.filename_root)
}
#endif
inline void CreateUploadLocationRequest::set_filename_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.service.CreateUploadLocationRequest.filename_root)
}
inline void CreateUploadLocationRequest::set_filename_root(const char* value, size_t size) {
  
  filename_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.CreateUploadLocationRequest.filename_root)
}
inline ::std::string* CreateUploadLocationRequest::mutable_filename_root() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.service.CreateUploadLocationRequest.filename_root)
  return filename_root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateUploadLocationRequest::release_filename_root() {
  // @@protoc_insertion_point(field_release:flyteidl.service.CreateUploadLocationRequest.filename_root)
  
  return filename_root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateUploadLocationRequest::set_allocated_filename_root(::std::string* filename_root) {
  if (filename_root != nullptr) {
    
  } else {
    
  }
  filename_root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename_root);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.CreateUploadLocationRequest.filename_root)
}

// .flyteidl.artifact.ArtifactSpec artifact_spec = 7;
inline bool CreateUploadLocationRequest::has_artifact_spec() const {
  return this != internal_default_instance() && artifact_spec_ != nullptr;
}
inline const ::flyteidl::artifact::ArtifactSpec& CreateUploadLocationRequest::artifact_spec() const {
  const ::flyteidl::artifact::ArtifactSpec* p = artifact_spec_;
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateUploadLocationRequest.artifact_spec)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::artifact::ArtifactSpec*>(
      &::flyteidl::artifact::_ArtifactSpec_default_instance_);
}
inline ::flyteidl::artifact::ArtifactSpec* CreateUploadLocationRequest::release_artifact_spec() {
  // @@protoc_insertion_point(field_release:flyteidl.service.CreateUploadLocationRequest.artifact_spec)
  
  ::flyteidl::artifact::ArtifactSpec* temp = artifact_spec_;
  artifact_spec_ = nullptr;
  return temp;
}
inline ::flyteidl::artifact::ArtifactSpec* CreateUploadLocationRequest::mutable_artifact_spec() {
  
  if (artifact_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::artifact::ArtifactSpec>(GetArenaNoVirtual());
    artifact_spec_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.service.CreateUploadLocationRequest.artifact_spec)
  return artifact_spec_;
}
inline void CreateUploadLocationRequest::set_allocated_artifact_spec(::flyteidl::artifact::ArtifactSpec* artifact_spec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(artifact_spec_);
  }
  if (artifact_spec) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      artifact_spec = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, artifact_spec, submessage_arena);
    }
    
  } else {
    
  }
  artifact_spec_ = artifact_spec;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.CreateUploadLocationRequest.artifact_spec)
}

// -------------------------------------------------------------------

// CreateDownloadLocationRequest

// string native_url = 1;
inline void CreateDownloadLocationRequest::clear_native_url() {
  native_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateDownloadLocationRequest::native_url() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateDownloadLocationRequest.native_url)
  return native_url_.GetNoArena();
}
inline void CreateDownloadLocationRequest::set_native_url(const ::std::string& value) {
  
  native_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.service.CreateDownloadLocationRequest.native_url)
}
#if LANG_CXX11
inline void CreateDownloadLocationRequest::set_native_url(::std::string&& value) {
  
  native_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.service.CreateDownloadLocationRequest.native_url)
}
#endif
inline void CreateDownloadLocationRequest::set_native_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  native_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.service.CreateDownloadLocationRequest.native_url)
}
inline void CreateDownloadLocationRequest::set_native_url(const char* value, size_t size) {
  
  native_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.CreateDownloadLocationRequest.native_url)
}
inline ::std::string* CreateDownloadLocationRequest::mutable_native_url() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.service.CreateDownloadLocationRequest.native_url)
  return native_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateDownloadLocationRequest::release_native_url() {
  // @@protoc_insertion_point(field_release:flyteidl.service.CreateDownloadLocationRequest.native_url)
  
  return native_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDownloadLocationRequest::set_allocated_native_url(::std::string* native_url) {
  if (native_url != nullptr) {
    
  } else {
    
  }
  native_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), native_url);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.CreateDownloadLocationRequest.native_url)
}

// .google.protobuf.Duration expires_in = 2;
inline bool CreateDownloadLocationRequest::has_expires_in() const {
  return this != internal_default_instance() && expires_in_ != nullptr;
}
inline const ::google::protobuf::Duration& CreateDownloadLocationRequest::expires_in() const {
  const ::google::protobuf::Duration* p = expires_in_;
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateDownloadLocationRequest.expires_in)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* CreateDownloadLocationRequest::release_expires_in() {
  // @@protoc_insertion_point(field_release:flyteidl.service.CreateDownloadLocationRequest.expires_in)
  
  ::google::protobuf::Duration* temp = expires_in_;
  expires_in_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* CreateDownloadLocationRequest::mutable_expires_in() {
  
  if (expires_in_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    expires_in_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.service.CreateDownloadLocationRequest.expires_in)
  return expires_in_;
}
inline void CreateDownloadLocationRequest::set_allocated_expires_in(::google::protobuf::Duration* expires_in) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(expires_in_);
  }
  if (expires_in) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(expires_in)->GetArena();
    if (message_arena != submessage_arena) {
      expires_in = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expires_in, submessage_arena);
    }
    
  } else {
    
  }
  expires_in_ = expires_in;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.CreateDownloadLocationRequest.expires_in)
}

// -------------------------------------------------------------------

// CreateDownloadLocationResponse

// string signed_url = 1;
inline void CreateDownloadLocationResponse::clear_signed_url() {
  signed_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateDownloadLocationResponse::signed_url() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateDownloadLocationResponse.signed_url)
  return signed_url_.GetNoArena();
}
inline void CreateDownloadLocationResponse::set_signed_url(const ::std::string& value) {
  
  signed_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.service.CreateDownloadLocationResponse.signed_url)
}
#if LANG_CXX11
inline void CreateDownloadLocationResponse::set_signed_url(::std::string&& value) {
  
  signed_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.service.CreateDownloadLocationResponse.signed_url)
}
#endif
inline void CreateDownloadLocationResponse::set_signed_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signed_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.service.CreateDownloadLocationResponse.signed_url)
}
inline void CreateDownloadLocationResponse::set_signed_url(const char* value, size_t size) {
  
  signed_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.CreateDownloadLocationResponse.signed_url)
}
inline ::std::string* CreateDownloadLocationResponse::mutable_signed_url() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.service.CreateDownloadLocationResponse.signed_url)
  return signed_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateDownloadLocationResponse::release_signed_url() {
  // @@protoc_insertion_point(field_release:flyteidl.service.CreateDownloadLocationResponse.signed_url)
  
  return signed_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDownloadLocationResponse::set_allocated_signed_url(::std::string* signed_url) {
  if (signed_url != nullptr) {
    
  } else {
    
  }
  signed_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signed_url);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.CreateDownloadLocationResponse.signed_url)
}

// .google.protobuf.Timestamp expires_at = 2;
inline bool CreateDownloadLocationResponse::has_expires_at() const {
  return this != internal_default_instance() && expires_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& CreateDownloadLocationResponse::expires_at() const {
  const ::google::protobuf::Timestamp* p = expires_at_;
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateDownloadLocationResponse.expires_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* CreateDownloadLocationResponse::release_expires_at() {
  // @@protoc_insertion_point(field_release:flyteidl.service.CreateDownloadLocationResponse.expires_at)
  
  ::google::protobuf::Timestamp* temp = expires_at_;
  expires_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* CreateDownloadLocationResponse::mutable_expires_at() {
  
  if (expires_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    expires_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.service.CreateDownloadLocationResponse.expires_at)
  return expires_at_;
}
inline void CreateDownloadLocationResponse::set_allocated_expires_at(::google::protobuf::Timestamp* expires_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(expires_at_);
  }
  if (expires_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(expires_at)->GetArena();
    if (message_arena != submessage_arena) {
      expires_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expires_at, submessage_arena);
    }
    
  } else {
    
  }
  expires_at_ = expires_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.CreateDownloadLocationResponse.expires_at)
}

// -------------------------------------------------------------------

// CreateDownloadLinkRequest

// .flyteidl.service.ArtifactType artifact_type = 1;
inline void CreateDownloadLinkRequest::clear_artifact_type() {
  artifact_type_ = 0;
}
inline ::flyteidl::service::ArtifactType CreateDownloadLinkRequest::artifact_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateDownloadLinkRequest.artifact_type)
  return static_cast< ::flyteidl::service::ArtifactType >(artifact_type_);
}
inline void CreateDownloadLinkRequest::set_artifact_type(::flyteidl::service::ArtifactType value) {
  
  artifact_type_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.service.CreateDownloadLinkRequest.artifact_type)
}

// .google.protobuf.Duration expires_in = 2;
inline bool CreateDownloadLinkRequest::has_expires_in() const {
  return this != internal_default_instance() && expires_in_ != nullptr;
}
inline const ::google::protobuf::Duration& CreateDownloadLinkRequest::expires_in() const {
  const ::google::protobuf::Duration* p = expires_in_;
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateDownloadLinkRequest.expires_in)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* CreateDownloadLinkRequest::release_expires_in() {
  // @@protoc_insertion_point(field_release:flyteidl.service.CreateDownloadLinkRequest.expires_in)
  
  ::google::protobuf::Duration* temp = expires_in_;
  expires_in_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* CreateDownloadLinkRequest::mutable_expires_in() {
  
  if (expires_in_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    expires_in_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.service.CreateDownloadLinkRequest.expires_in)
  return expires_in_;
}
inline void CreateDownloadLinkRequest::set_allocated_expires_in(::google::protobuf::Duration* expires_in) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(expires_in_);
  }
  if (expires_in) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(expires_in)->GetArena();
    if (message_arena != submessage_arena) {
      expires_in = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expires_in, submessage_arena);
    }
    
  } else {
    
  }
  expires_in_ = expires_in;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.CreateDownloadLinkRequest.expires_in)
}

// .flyteidl.core.NodeExecutionIdentifier node_execution_id = 3;
inline bool CreateDownloadLinkRequest::has_node_execution_id() const {
  return source_case() == kNodeExecutionId;
}
inline void CreateDownloadLinkRequest::set_has_node_execution_id() {
  _oneof_case_[0] = kNodeExecutionId;
}
inline ::flyteidl::core::NodeExecutionIdentifier* CreateDownloadLinkRequest::release_node_execution_id() {
  // @@protoc_insertion_point(field_release:flyteidl.service.CreateDownloadLinkRequest.node_execution_id)
  if (has_node_execution_id()) {
    clear_has_source();
      ::flyteidl::core::NodeExecutionIdentifier* temp = source_.node_execution_id_;
    source_.node_execution_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::NodeExecutionIdentifier& CreateDownloadLinkRequest::node_execution_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateDownloadLinkRequest.node_execution_id)
  return has_node_execution_id()
      ? *source_.node_execution_id_
      : *reinterpret_cast< ::flyteidl::core::NodeExecutionIdentifier*>(&::flyteidl::core::_NodeExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::NodeExecutionIdentifier* CreateDownloadLinkRequest::mutable_node_execution_id() {
  if (!has_node_execution_id()) {
    clear_source();
    set_has_node_execution_id();
    source_.node_execution_id_ = CreateMaybeMessage< ::flyteidl::core::NodeExecutionIdentifier >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.service.CreateDownloadLinkRequest.node_execution_id)
  return source_.node_execution_id_;
}

inline bool CreateDownloadLinkRequest::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void CreateDownloadLinkRequest::clear_has_source() {
  _oneof_case_[0] = SOURCE_NOT_SET;
}
inline CreateDownloadLinkRequest::SourceCase CreateDownloadLinkRequest::source_case() const {
  return CreateDownloadLinkRequest::SourceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CreateDownloadLinkResponse

// repeated string signed_url = 1 [deprecated = true];
inline int CreateDownloadLinkResponse::signed_url_size() const {
  return signed_url_.size();
}
inline void CreateDownloadLinkResponse::clear_signed_url() {
  signed_url_.Clear();
}
inline const ::std::string& CreateDownloadLinkResponse::signed_url(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateDownloadLinkResponse.signed_url)
  return signed_url_.Get(index);
}
inline ::std::string* CreateDownloadLinkResponse::mutable_signed_url(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.service.CreateDownloadLinkResponse.signed_url)
  return signed_url_.Mutable(index);
}
inline void CreateDownloadLinkResponse::set_signed_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.service.CreateDownloadLinkResponse.signed_url)
  signed_url_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CreateDownloadLinkResponse::set_signed_url(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.service.CreateDownloadLinkResponse.signed_url)
  signed_url_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CreateDownloadLinkResponse::set_signed_url(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signed_url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.service.CreateDownloadLinkResponse.signed_url)
}
inline void CreateDownloadLinkResponse::set_signed_url(int index, const char* value, size_t size) {
  signed_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.CreateDownloadLinkResponse.signed_url)
}
inline ::std::string* CreateDownloadLinkResponse::add_signed_url() {
  // @@protoc_insertion_point(field_add_mutable:flyteidl.service.CreateDownloadLinkResponse.signed_url)
  return signed_url_.Add();
}
inline void CreateDownloadLinkResponse::add_signed_url(const ::std::string& value) {
  signed_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.service.CreateDownloadLinkResponse.signed_url)
}
#if LANG_CXX11
inline void CreateDownloadLinkResponse::add_signed_url(::std::string&& value) {
  signed_url_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.service.CreateDownloadLinkResponse.signed_url)
}
#endif
inline void CreateDownloadLinkResponse::add_signed_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signed_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.service.CreateDownloadLinkResponse.signed_url)
}
inline void CreateDownloadLinkResponse::add_signed_url(const char* value, size_t size) {
  signed_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.service.CreateDownloadLinkResponse.signed_url)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
CreateDownloadLinkResponse::signed_url() const {
  // @@protoc_insertion_point(field_list:flyteidl.service.CreateDownloadLinkResponse.signed_url)
  return signed_url_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
CreateDownloadLinkResponse::mutable_signed_url() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.service.CreateDownloadLinkResponse.signed_url)
  return &signed_url_;
}

// .google.protobuf.Timestamp expires_at = 2 [deprecated = true];
inline bool CreateDownloadLinkResponse::has_expires_at() const {
  return this != internal_default_instance() && expires_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& CreateDownloadLinkResponse::expires_at() const {
  const ::google::protobuf::Timestamp* p = expires_at_;
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateDownloadLinkResponse.expires_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* CreateDownloadLinkResponse::release_expires_at() {
  // @@protoc_insertion_point(field_release:flyteidl.service.CreateDownloadLinkResponse.expires_at)
  
  ::google::protobuf::Timestamp* temp = expires_at_;
  expires_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* CreateDownloadLinkResponse::mutable_expires_at() {
  
  if (expires_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    expires_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.service.CreateDownloadLinkResponse.expires_at)
  return expires_at_;
}
inline void CreateDownloadLinkResponse::set_allocated_expires_at(::google::protobuf::Timestamp* expires_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(expires_at_);
  }
  if (expires_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(expires_at)->GetArena();
    if (message_arena != submessage_arena) {
      expires_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expires_at, submessage_arena);
    }
    
  } else {
    
  }
  expires_at_ = expires_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.CreateDownloadLinkResponse.expires_at)
}

// .flyteidl.service.PreSignedURLs pre_signed_urls = 3;
inline bool CreateDownloadLinkResponse::has_pre_signed_urls() const {
  return this != internal_default_instance() && pre_signed_urls_ != nullptr;
}
inline void CreateDownloadLinkResponse::clear_pre_signed_urls() {
  if (GetArenaNoVirtual() == nullptr && pre_signed_urls_ != nullptr) {
    delete pre_signed_urls_;
  }
  pre_signed_urls_ = nullptr;
}
inline const ::flyteidl::service::PreSignedURLs& CreateDownloadLinkResponse::pre_signed_urls() const {
  const ::flyteidl::service::PreSignedURLs* p = pre_signed_urls_;
  // @@protoc_insertion_point(field_get:flyteidl.service.CreateDownloadLinkResponse.pre_signed_urls)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::service::PreSignedURLs*>(
      &::flyteidl::service::_PreSignedURLs_default_instance_);
}
inline ::flyteidl::service::PreSignedURLs* CreateDownloadLinkResponse::release_pre_signed_urls() {
  // @@protoc_insertion_point(field_release:flyteidl.service.CreateDownloadLinkResponse.pre_signed_urls)
  
  ::flyteidl::service::PreSignedURLs* temp = pre_signed_urls_;
  pre_signed_urls_ = nullptr;
  return temp;
}
inline ::flyteidl::service::PreSignedURLs* CreateDownloadLinkResponse::mutable_pre_signed_urls() {
  
  if (pre_signed_urls_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::service::PreSignedURLs>(GetArenaNoVirtual());
    pre_signed_urls_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.service.CreateDownloadLinkResponse.pre_signed_urls)
  return pre_signed_urls_;
}
inline void CreateDownloadLinkResponse::set_allocated_pre_signed_urls(::flyteidl::service::PreSignedURLs* pre_signed_urls) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pre_signed_urls_;
  }
  if (pre_signed_urls) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pre_signed_urls = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pre_signed_urls, submessage_arena);
    }
    
  } else {
    
  }
  pre_signed_urls_ = pre_signed_urls;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.CreateDownloadLinkResponse.pre_signed_urls)
}

// -------------------------------------------------------------------

// PreSignedURLs

// repeated string signed_url = 1;
inline int PreSignedURLs::signed_url_size() const {
  return signed_url_.size();
}
inline void PreSignedURLs::clear_signed_url() {
  signed_url_.Clear();
}
inline const ::std::string& PreSignedURLs::signed_url(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.service.PreSignedURLs.signed_url)
  return signed_url_.Get(index);
}
inline ::std::string* PreSignedURLs::mutable_signed_url(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.service.PreSignedURLs.signed_url)
  return signed_url_.Mutable(index);
}
inline void PreSignedURLs::set_signed_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.service.PreSignedURLs.signed_url)
  signed_url_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PreSignedURLs::set_signed_url(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.service.PreSignedURLs.signed_url)
  signed_url_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PreSignedURLs::set_signed_url(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signed_url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.service.PreSignedURLs.signed_url)
}
inline void PreSignedURLs::set_signed_url(int index, const char* value, size_t size) {
  signed_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.PreSignedURLs.signed_url)
}
inline ::std::string* PreSignedURLs::add_signed_url() {
  // @@protoc_insertion_point(field_add_mutable:flyteidl.service.PreSignedURLs.signed_url)
  return signed_url_.Add();
}
inline void PreSignedURLs::add_signed_url(const ::std::string& value) {
  signed_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.service.PreSignedURLs.signed_url)
}
#if LANG_CXX11
inline void PreSignedURLs::add_signed_url(::std::string&& value) {
  signed_url_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.service.PreSignedURLs.signed_url)
}
#endif
inline void PreSignedURLs::add_signed_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signed_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.service.PreSignedURLs.signed_url)
}
inline void PreSignedURLs::add_signed_url(const char* value, size_t size) {
  signed_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.service.PreSignedURLs.signed_url)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
PreSignedURLs::signed_url() const {
  // @@protoc_insertion_point(field_list:flyteidl.service.PreSignedURLs.signed_url)
  return signed_url_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
PreSignedURLs::mutable_signed_url() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.service.PreSignedURLs.signed_url)
  return &signed_url_;
}

// .google.protobuf.Timestamp expires_at = 2;
inline bool PreSignedURLs::has_expires_at() const {
  return this != internal_default_instance() && expires_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& PreSignedURLs::expires_at() const {
  const ::google::protobuf::Timestamp* p = expires_at_;
  // @@protoc_insertion_point(field_get:flyteidl.service.PreSignedURLs.expires_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* PreSignedURLs::release_expires_at() {
  // @@protoc_insertion_point(field_release:flyteidl.service.PreSignedURLs.expires_at)
  
  ::google::protobuf::Timestamp* temp = expires_at_;
  expires_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* PreSignedURLs::mutable_expires_at() {
  
  if (expires_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    expires_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.service.PreSignedURLs.expires_at)
  return expires_at_;
}
inline void PreSignedURLs::set_allocated_expires_at(::google::protobuf::Timestamp* expires_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(expires_at_);
  }
  if (expires_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(expires_at)->GetArena();
    if (message_arena != submessage_arena) {
      expires_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expires_at, submessage_arena);
    }
    
  } else {
    
  }
  expires_at_ = expires_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.PreSignedURLs.expires_at)
}

// -------------------------------------------------------------------

// GetDataRequest

// string flyte_url = 1;
inline bool GetDataRequest::has_flyte_url() const {
  return query_case() == kFlyteUrl;
}
inline void GetDataRequest::set_has_flyte_url() {
  _oneof_case_[0] = kFlyteUrl;
}
inline void GetDataRequest::clear_flyte_url() {
  if (has_flyte_url()) {
    query_.flyte_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_query();
  }
}
inline const ::std::string& GetDataRequest::flyte_url() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.GetDataRequest.flyte_url)
  if (has_flyte_url()) {
    return query_.flyte_url_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void GetDataRequest::set_flyte_url(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.service.GetDataRequest.flyte_url)
  if (!has_flyte_url()) {
    clear_query();
    set_has_flyte_url();
    query_.flyte_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  query_.flyte_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.service.GetDataRequest.flyte_url)
}
#if LANG_CXX11
inline void GetDataRequest::set_flyte_url(::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.service.GetDataRequest.flyte_url)
  if (!has_flyte_url()) {
    clear_query();
    set_has_flyte_url();
    query_.flyte_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  query_.flyte_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.service.GetDataRequest.flyte_url)
}
#endif
inline void GetDataRequest::set_flyte_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_flyte_url()) {
    clear_query();
    set_has_flyte_url();
    query_.flyte_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  query_.flyte_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.service.GetDataRequest.flyte_url)
}
inline void GetDataRequest::set_flyte_url(const char* value, size_t size) {
  if (!has_flyte_url()) {
    clear_query();
    set_has_flyte_url();
    query_.flyte_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  query_.flyte_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.GetDataRequest.flyte_url)
}
inline ::std::string* GetDataRequest::mutable_flyte_url() {
  if (!has_flyte_url()) {
    clear_query();
    set_has_flyte_url();
    query_.flyte_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.service.GetDataRequest.flyte_url)
  return query_.flyte_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetDataRequest::release_flyte_url() {
  // @@protoc_insertion_point(field_release:flyteidl.service.GetDataRequest.flyte_url)
  if (has_flyte_url()) {
    clear_has_query();
    return query_.flyte_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void GetDataRequest::set_allocated_flyte_url(::std::string* flyte_url) {
  if (has_query()) {
    clear_query();
  }
  if (flyte_url != nullptr) {
    set_has_flyte_url();
    query_.flyte_url_.UnsafeSetDefault(flyte_url);
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.GetDataRequest.flyte_url)
}

// .flyteidl.core.ArtifactID artifact_id = 2;
inline bool GetDataRequest::has_artifact_id() const {
  return query_case() == kArtifactId;
}
inline void GetDataRequest::set_has_artifact_id() {
  _oneof_case_[0] = kArtifactId;
}
inline ::flyteidl::core::ArtifactID* GetDataRequest::release_artifact_id() {
  // @@protoc_insertion_point(field_release:flyteidl.service.GetDataRequest.artifact_id)
  if (has_artifact_id()) {
    clear_has_query();
      ::flyteidl::core::ArtifactID* temp = query_.artifact_id_;
    query_.artifact_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::ArtifactID& GetDataRequest::artifact_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.GetDataRequest.artifact_id)
  return has_artifact_id()
      ? *query_.artifact_id_
      : *reinterpret_cast< ::flyteidl::core::ArtifactID*>(&::flyteidl::core::_ArtifactID_default_instance_);
}
inline ::flyteidl::core::ArtifactID* GetDataRequest::mutable_artifact_id() {
  if (!has_artifact_id()) {
    clear_query();
    set_has_artifact_id();
    query_.artifact_id_ = CreateMaybeMessage< ::flyteidl::core::ArtifactID >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.service.GetDataRequest.artifact_id)
  return query_.artifact_id_;
}

inline bool GetDataRequest::has_query() const {
  return query_case() != QUERY_NOT_SET;
}
inline void GetDataRequest::clear_has_query() {
  _oneof_case_[0] = QUERY_NOT_SET;
}
inline GetDataRequest::QueryCase GetDataRequest::query_case() const {
  return GetDataRequest::QueryCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetDataResponse

// .flyteidl.core.LiteralMap literal_map = 1;
inline bool GetDataResponse::has_literal_map() const {
  return data_case() == kLiteralMap;
}
inline void GetDataResponse::set_has_literal_map() {
  _oneof_case_[0] = kLiteralMap;
}
inline ::flyteidl::core::LiteralMap* GetDataResponse::release_literal_map() {
  // @@protoc_insertion_point(field_release:flyteidl.service.GetDataResponse.literal_map)
  if (has_literal_map()) {
    clear_has_data();
      ::flyteidl::core::LiteralMap* temp = data_.literal_map_;
    data_.literal_map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::LiteralMap& GetDataResponse::literal_map() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.GetDataResponse.literal_map)
  return has_literal_map()
      ? *data_.literal_map_
      : *reinterpret_cast< ::flyteidl::core::LiteralMap*>(&::flyteidl::core::_LiteralMap_default_instance_);
}
inline ::flyteidl::core::LiteralMap* GetDataResponse::mutable_literal_map() {
  if (!has_literal_map()) {
    clear_data();
    set_has_literal_map();
    data_.literal_map_ = CreateMaybeMessage< ::flyteidl::core::LiteralMap >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.service.GetDataResponse.literal_map)
  return data_.literal_map_;
}

// .flyteidl.service.PreSignedURLs pre_signed_urls = 2;
inline bool GetDataResponse::has_pre_signed_urls() const {
  return data_case() == kPreSignedUrls;
}
inline void GetDataResponse::set_has_pre_signed_urls() {
  _oneof_case_[0] = kPreSignedUrls;
}
inline void GetDataResponse::clear_pre_signed_urls() {
  if (has_pre_signed_urls()) {
    delete data_.pre_signed_urls_;
    clear_has_data();
  }
}
inline ::flyteidl::service::PreSignedURLs* GetDataResponse::release_pre_signed_urls() {
  // @@protoc_insertion_point(field_release:flyteidl.service.GetDataResponse.pre_signed_urls)
  if (has_pre_signed_urls()) {
    clear_has_data();
      ::flyteidl::service::PreSignedURLs* temp = data_.pre_signed_urls_;
    data_.pre_signed_urls_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::service::PreSignedURLs& GetDataResponse::pre_signed_urls() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.GetDataResponse.pre_signed_urls)
  return has_pre_signed_urls()
      ? *data_.pre_signed_urls_
      : *reinterpret_cast< ::flyteidl::service::PreSignedURLs*>(&::flyteidl::service::_PreSignedURLs_default_instance_);
}
inline ::flyteidl::service::PreSignedURLs* GetDataResponse::mutable_pre_signed_urls() {
  if (!has_pre_signed_urls()) {
    clear_data();
    set_has_pre_signed_urls();
    data_.pre_signed_urls_ = CreateMaybeMessage< ::flyteidl::service::PreSignedURLs >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.service.GetDataResponse.pre_signed_urls)
  return data_.pre_signed_urls_;
}

// .flyteidl.core.Literal literal = 3;
inline bool GetDataResponse::has_literal() const {
  return data_case() == kLiteral;
}
inline void GetDataResponse::set_has_literal() {
  _oneof_case_[0] = kLiteral;
}
inline ::flyteidl::core::Literal* GetDataResponse::release_literal() {
  // @@protoc_insertion_point(field_release:flyteidl.service.GetDataResponse.literal)
  if (has_literal()) {
    clear_has_data();
      ::flyteidl::core::Literal* temp = data_.literal_;
    data_.literal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::Literal& GetDataResponse::literal() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.GetDataResponse.literal)
  return has_literal()
      ? *data_.literal_
      : *reinterpret_cast< ::flyteidl::core::Literal*>(&::flyteidl::core::_Literal_default_instance_);
}
inline ::flyteidl::core::Literal* GetDataResponse::mutable_literal() {
  if (!has_literal()) {
    clear_data();
    set_has_literal();
    data_.literal_ = CreateMaybeMessage< ::flyteidl::core::Literal >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.service.GetDataResponse.literal)
  return data_.literal_;
}

// .flyteidl.artifact.Artifact artifact = 4;
inline bool GetDataResponse::has_artifact() const {
  return data_case() == kArtifact;
}
inline void GetDataResponse::set_has_artifact() {
  _oneof_case_[0] = kArtifact;
}
inline ::flyteidl::artifact::Artifact* GetDataResponse::release_artifact() {
  // @@protoc_insertion_point(field_release:flyteidl.service.GetDataResponse.artifact)
  if (has_artifact()) {
    clear_has_data();
      ::flyteidl::artifact::Artifact* temp = data_.artifact_;
    data_.artifact_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::artifact::Artifact& GetDataResponse::artifact() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.GetDataResponse.artifact)
  return has_artifact()
      ? *data_.artifact_
      : *reinterpret_cast< ::flyteidl::artifact::Artifact*>(&::flyteidl::artifact::_Artifact_default_instance_);
}
inline ::flyteidl::artifact::Artifact* GetDataResponse::mutable_artifact() {
  if (!has_artifact()) {
    clear_data();
    set_has_artifact();
    data_.artifact_ = CreateMaybeMessage< ::flyteidl::artifact::Artifact >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.service.GetDataResponse.artifact)
  return data_.artifact_;
}

inline bool GetDataResponse::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void GetDataResponse::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline GetDataResponse::DataCase GetDataResponse::data_case() const {
  return GetDataResponse::DataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service
}  // namespace flyteidl

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::flyteidl::service::ArtifactType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::service::ArtifactType>() {
  return ::flyteidl::service::ArtifactType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fservice_2fdataproxy_2eproto
