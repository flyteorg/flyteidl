// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/task.proto

#include "flyteidl/admin/task.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace admin {
constexpr TaskCreateRequest::TaskCreateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , spec_(nullptr){}
struct TaskCreateRequestDefaultTypeInternal {
  constexpr TaskCreateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskCreateRequestDefaultTypeInternal() {}
  union {
    TaskCreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskCreateRequestDefaultTypeInternal _TaskCreateRequest_default_instance_;
constexpr TaskCreateResponse::TaskCreateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TaskCreateResponseDefaultTypeInternal {
  constexpr TaskCreateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskCreateResponseDefaultTypeInternal() {}
  union {
    TaskCreateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskCreateResponseDefaultTypeInternal _TaskCreateResponse_default_instance_;
constexpr Task::Task(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , closure_(nullptr){}
struct TaskDefaultTypeInternal {
  constexpr TaskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskDefaultTypeInternal() {}
  union {
    Task _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskDefaultTypeInternal _Task_default_instance_;
constexpr TaskList::TaskList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tasks_()
  , token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TaskListDefaultTypeInternal {
  constexpr TaskListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskListDefaultTypeInternal() {}
  union {
    TaskList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskListDefaultTypeInternal _TaskList_default_instance_;
constexpr TaskSpec::TaskSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : template__(nullptr){}
struct TaskSpecDefaultTypeInternal {
  constexpr TaskSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskSpecDefaultTypeInternal() {}
  union {
    TaskSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskSpecDefaultTypeInternal _TaskSpec_default_instance_;
constexpr TaskClosure::TaskClosure(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : compiled_task_(nullptr)
  , created_at_(nullptr){}
struct TaskClosureDefaultTypeInternal {
  constexpr TaskClosureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskClosureDefaultTypeInternal() {}
  union {
    TaskClosure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskClosureDefaultTypeInternal _TaskClosure_default_instance_;
}  // namespace admin
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fadmin_2ftask_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fadmin_2ftask_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fadmin_2ftask_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fadmin_2ftask_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskCreateRequest, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskCreateRequest, spec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskCreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Task, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Task, closure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskList, tasks_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskList, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskSpec, template__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskClosure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskClosure, compiled_task_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskClosure, created_at_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::admin::TaskCreateRequest)},
  { 8, -1, -1, sizeof(::flyteidl::admin::TaskCreateResponse)},
  { 14, -1, -1, sizeof(::flyteidl::admin::Task)},
  { 22, -1, -1, sizeof(::flyteidl::admin::TaskList)},
  { 30, -1, -1, sizeof(::flyteidl::admin::TaskSpec)},
  { 37, -1, -1, sizeof(::flyteidl::admin::TaskClosure)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_TaskCreateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_TaskCreateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_Task_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_TaskList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_TaskSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_TaskClosure_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fadmin_2ftask_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031flyteidl/admin/task.proto\022\016flyteidl.ad"
  "min\032\036flyteidl/core/identifier.proto\032\031fly"
  "teidl/core/tasks.proto\032\034flyteidl/core/co"
  "mpiler.proto\032\037google/protobuf/timestamp."
  "proto\"l\n\021TaskCreateRequest\022)\n\002id\030\001 \001(\0132\031"
  ".flyteidl.core.IdentifierR\002id\022,\n\004spec\030\002 "
  "\001(\0132\030.flyteidl.admin.TaskSpecR\004spec\"\024\n\022T"
  "askCreateResponse\"h\n\004Task\022)\n\002id\030\001 \001(\0132\031."
  "flyteidl.core.IdentifierR\002id\0225\n\007closure\030"
  "\002 \001(\0132\033.flyteidl.admin.TaskClosureR\007clos"
  "ure\"L\n\010TaskList\022*\n\005tasks\030\001 \003(\0132\024.flyteid"
  "l.admin.TaskR\005tasks\022\024\n\005token\030\002 \001(\tR\005toke"
  "n\"C\n\010TaskSpec\0227\n\010template\030\001 \001(\0132\033.flytei"
  "dl.core.TaskTemplateR\010template\"\212\001\n\013TaskC"
  "losure\022@\n\rcompiled_task\030\001 \001(\0132\033.flyteidl"
  ".core.CompiledTaskR\014compiledTask\0229\n\ncrea"
  "ted_at\030\002 \001(\0132\032.google.protobuf.Timestamp"
  "R\tcreatedAtB\262\001\n\022com.flyteidl.adminB\tTask"
  "ProtoH\002Z5github.com/flyteorg/flyteidl/ge"
  "n/pb-go/flyteidl/admin\370\001\000\242\002\003FAX\252\002\016Flytei"
  "dl.Admin\312\002\016Flyteidl\\Admin\342\002\032Flyteidl\\Adm"
  "in\\GPBMetadata\352\002\017Flyteidl::Adminb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flyteidl_2fadmin_2ftask_2eproto_deps[4] = {
  &::descriptor_table_flyteidl_2fcore_2fcompiler_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fidentifier_2eproto,
  &::descriptor_table_flyteidl_2fcore_2ftasks_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fadmin_2ftask_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2ftask_2eproto = {
  false, false, 880, descriptor_table_protodef_flyteidl_2fadmin_2ftask_2eproto, "flyteidl/admin/task.proto", 
  &descriptor_table_flyteidl_2fadmin_2ftask_2eproto_once, descriptor_table_flyteidl_2fadmin_2ftask_2eproto_deps, 4, 6,
  schemas, file_default_instances, TableStruct_flyteidl_2fadmin_2ftask_2eproto::offsets,
  file_level_metadata_flyteidl_2fadmin_2ftask_2eproto, file_level_enum_descriptors_flyteidl_2fadmin_2ftask_2eproto, file_level_service_descriptors_flyteidl_2fadmin_2ftask_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fadmin_2ftask_2eproto_getter() {
  return &descriptor_table_flyteidl_2fadmin_2ftask_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fadmin_2ftask_2eproto(&descriptor_table_flyteidl_2fadmin_2ftask_2eproto);
namespace flyteidl {
namespace admin {

// ===================================================================

class TaskCreateRequest::_Internal {
 public:
  static const ::flyteidl::core::Identifier& id(const TaskCreateRequest* msg);
  static const ::flyteidl::admin::TaskSpec& spec(const TaskCreateRequest* msg);
};

const ::flyteidl::core::Identifier&
TaskCreateRequest::_Internal::id(const TaskCreateRequest* msg) {
  return *msg->id_;
}
const ::flyteidl::admin::TaskSpec&
TaskCreateRequest::_Internal::spec(const TaskCreateRequest* msg) {
  return *msg->spec_;
}
void TaskCreateRequest::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
TaskCreateRequest::TaskCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.TaskCreateRequest)
}
TaskCreateRequest::TaskCreateRequest(const TaskCreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::flyteidl::admin::TaskSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskCreateRequest)
}

inline void TaskCreateRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&spec_) -
    reinterpret_cast<char*>(&id_)) + sizeof(spec_));
}

TaskCreateRequest::~TaskCreateRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskCreateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskCreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete spec_;
}

void TaskCreateRequest::ArenaDtor(void* object) {
  TaskCreateRequest* _this = reinterpret_cast< TaskCreateRequest* >(object);
  (void)_this;
}
void TaskCreateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskCreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskCreateRequest::InternalSwap(TaskCreateRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata TaskCreateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2ftask_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2ftask_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2ftask_2eproto[0]);
}

// ===================================================================

class TaskCreateResponse::_Internal {
 public:
};

TaskCreateResponse::TaskCreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.TaskCreateResponse)
}
TaskCreateResponse::TaskCreateResponse(const TaskCreateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskCreateResponse)
}



::PROTOBUF_NAMESPACE_ID::Metadata TaskCreateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2ftask_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2ftask_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2ftask_2eproto[1]);
}

// ===================================================================

class Task::_Internal {
 public:
  static const ::flyteidl::core::Identifier& id(const Task* msg);
  static const ::flyteidl::admin::TaskClosure& closure(const Task* msg);
};

const ::flyteidl::core::Identifier&
Task::_Internal::id(const Task* msg) {
  return *msg->id_;
}
const ::flyteidl::admin::TaskClosure&
Task::_Internal::closure(const Task* msg) {
  return *msg->closure_;
}
void Task::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
Task::Task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.Task)
}
Task::Task(const Task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_closure()) {
    closure_ = new ::flyteidl::admin::TaskClosure(*from.closure_);
  } else {
    closure_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Task)
}

inline void Task::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&closure_) -
    reinterpret_cast<char*>(&id_)) + sizeof(closure_));
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Task)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Task::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete closure_;
}

void Task::ArenaDtor(void* object) {
  Task* _this = reinterpret_cast< Task* >(object);
  (void)_this;
}
void Task::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Task::InternalSwap(Task* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Task::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2ftask_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2ftask_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2ftask_2eproto[2]);
}

// ===================================================================

class TaskList::_Internal {
 public:
};

TaskList::TaskList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tasks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.TaskList)
}
TaskList::TaskList(const TaskList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskList)
}

inline void TaskList::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TaskList::~TaskList() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskList::ArenaDtor(void* object) {
  TaskList* _this = reinterpret_cast< TaskList* >(object);
  (void)_this;
}
void TaskList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskList::InternalSwap(TaskList* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata TaskList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2ftask_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2ftask_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2ftask_2eproto[3]);
}

// ===================================================================

class TaskSpec::_Internal {
 public:
  static const ::flyteidl::core::TaskTemplate& template_(const TaskSpec* msg);
};

const ::flyteidl::core::TaskTemplate&
TaskSpec::_Internal::template_(const TaskSpec* msg) {
  return *msg->template__;
}
void TaskSpec::clear_template_() {
  if (GetArenaForAllocation() == nullptr && template__ != nullptr) {
    delete template__;
  }
  template__ = nullptr;
}
TaskSpec::TaskSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.TaskSpec)
}
TaskSpec::TaskSpec(const TaskSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_template_()) {
    template__ = new ::flyteidl::core::TaskTemplate(*from.template__);
  } else {
    template__ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskSpec)
}

inline void TaskSpec::SharedCtor() {
template__ = nullptr;
}

TaskSpec::~TaskSpec() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete template__;
}

void TaskSpec::ArenaDtor(void* object) {
  TaskSpec* _this = reinterpret_cast< TaskSpec* >(object);
  (void)_this;
}
void TaskSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskSpec::InternalSwap(TaskSpec* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata TaskSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2ftask_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2ftask_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2ftask_2eproto[4]);
}

// ===================================================================

class TaskClosure::_Internal {
 public:
  static const ::flyteidl::core::CompiledTask& compiled_task(const TaskClosure* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const TaskClosure* msg);
};

const ::flyteidl::core::CompiledTask&
TaskClosure::_Internal::compiled_task(const TaskClosure* msg) {
  return *msg->compiled_task_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TaskClosure::_Internal::created_at(const TaskClosure* msg) {
  return *msg->created_at_;
}
void TaskClosure::clear_compiled_task() {
  if (GetArenaForAllocation() == nullptr && compiled_task_ != nullptr) {
    delete compiled_task_;
  }
  compiled_task_ = nullptr;
}
void TaskClosure::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
TaskClosure::TaskClosure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.TaskClosure)
}
TaskClosure::TaskClosure(const TaskClosure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_compiled_task()) {
    compiled_task_ = new ::flyteidl::core::CompiledTask(*from.compiled_task_);
  } else {
    compiled_task_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskClosure)
}

inline void TaskClosure::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&compiled_task_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&created_at_) -
    reinterpret_cast<char*>(&compiled_task_)) + sizeof(created_at_));
}

TaskClosure::~TaskClosure() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskClosure)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskClosure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete compiled_task_;
  if (this != internal_default_instance()) delete created_at_;
}

void TaskClosure::ArenaDtor(void* object) {
  TaskClosure* _this = reinterpret_cast< TaskClosure* >(object);
  (void)_this;
}
void TaskClosure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskClosure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskClosure::InternalSwap(TaskClosure* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata TaskClosure::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2ftask_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2ftask_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2ftask_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskCreateRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskCreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::TaskCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskCreateResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskCreateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::TaskCreateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Task* Arena::CreateMaybeMessage< ::flyteidl::admin::Task >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::Task >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskList* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::TaskList >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskSpec* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::TaskSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskClosure* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskClosure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::TaskClosure >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
