// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/types.proto

package com.flyteidl.core;

/**
 * <pre>
 * Defines a strong type to allow type checking between interfaces.
 * </pre>
 *
 * Protobuf type {@code flyteidl.core.LiteralType}
 */
public final class LiteralType extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:flyteidl.core.LiteralType)
    LiteralTypeOrBuilder {
private static final long serialVersionUID = 0L;
  // Use LiteralType.newBuilder() to construct.
  private LiteralType(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private LiteralType() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new LiteralType();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private LiteralType(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {
            int rawValue = input.readEnum();
            typeCase_ = 1;
            type_ = rawValue;
            break;
          }
          case 18: {
            com.flyteidl.core.SchemaType.Builder subBuilder = null;
            if (typeCase_ == 2) {
              subBuilder = ((com.flyteidl.core.SchemaType) type_).toBuilder();
            }
            type_ =
                input.readMessage(com.flyteidl.core.SchemaType.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.flyteidl.core.SchemaType) type_);
              type_ = subBuilder.buildPartial();
            }
            typeCase_ = 2;
            break;
          }
          case 26: {
            com.flyteidl.core.LiteralType.Builder subBuilder = null;
            if (typeCase_ == 3) {
              subBuilder = ((com.flyteidl.core.LiteralType) type_).toBuilder();
            }
            type_ =
                input.readMessage(com.flyteidl.core.LiteralType.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.flyteidl.core.LiteralType) type_);
              type_ = subBuilder.buildPartial();
            }
            typeCase_ = 3;
            break;
          }
          case 34: {
            com.flyteidl.core.LiteralType.Builder subBuilder = null;
            if (typeCase_ == 4) {
              subBuilder = ((com.flyteidl.core.LiteralType) type_).toBuilder();
            }
            type_ =
                input.readMessage(com.flyteidl.core.LiteralType.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.flyteidl.core.LiteralType) type_);
              type_ = subBuilder.buildPartial();
            }
            typeCase_ = 4;
            break;
          }
          case 42: {
            com.flyteidl.core.BlobType.Builder subBuilder = null;
            if (typeCase_ == 5) {
              subBuilder = ((com.flyteidl.core.BlobType) type_).toBuilder();
            }
            type_ =
                input.readMessage(com.flyteidl.core.BlobType.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.flyteidl.core.BlobType) type_);
              type_ = subBuilder.buildPartial();
            }
            typeCase_ = 5;
            break;
          }
          case 50: {
            com.google.protobuf.Struct.Builder subBuilder = null;
            if (metadata_ != null) {
              subBuilder = metadata_.toBuilder();
            }
            metadata_ = input.readMessage(com.google.protobuf.Struct.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(metadata_);
              metadata_ = subBuilder.buildPartial();
            }

            break;
          }
          case 58: {
            com.flyteidl.core.EnumType.Builder subBuilder = null;
            if (typeCase_ == 7) {
              subBuilder = ((com.flyteidl.core.EnumType) type_).toBuilder();
            }
            type_ =
                input.readMessage(com.flyteidl.core.EnumType.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.flyteidl.core.EnumType) type_);
              type_ = subBuilder.buildPartial();
            }
            typeCase_ = 7;
            break;
          }
          case 66: {
            com.flyteidl.core.StructuredDatasetType.Builder subBuilder = null;
            if (typeCase_ == 8) {
              subBuilder = ((com.flyteidl.core.StructuredDatasetType) type_).toBuilder();
            }
            type_ =
                input.readMessage(com.flyteidl.core.StructuredDatasetType.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.flyteidl.core.StructuredDatasetType) type_);
              type_ = subBuilder.buildPartial();
            }
            typeCase_ = 8;
            break;
          }
          case 74: {
            com.flyteidl.core.TypeAnnotation.Builder subBuilder = null;
            if (annotation_ != null) {
              subBuilder = annotation_.toBuilder();
            }
            annotation_ = input.readMessage(com.flyteidl.core.TypeAnnotation.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(annotation_);
              annotation_ = subBuilder.buildPartial();
            }

            break;
          }
          case 82: {
            com.flyteidl.core.UnionType.Builder subBuilder = null;
            if (typeCase_ == 10) {
              subBuilder = ((com.flyteidl.core.UnionType) type_).toBuilder();
            }
            type_ =
                input.readMessage(com.flyteidl.core.UnionType.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.flyteidl.core.UnionType) type_);
              type_ = subBuilder.buildPartial();
            }
            typeCase_ = 10;
            break;
          }
          case 90: {
            com.flyteidl.core.TypeStructure.Builder subBuilder = null;
            if (structure_ != null) {
              subBuilder = structure_.toBuilder();
            }
            structure_ = input.readMessage(com.flyteidl.core.TypeStructure.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(structure_);
              structure_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.flyteidl.core.TypesProto.internal_static_flyteidl_core_LiteralType_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.flyteidl.core.TypesProto.internal_static_flyteidl_core_LiteralType_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.flyteidl.core.LiteralType.class, com.flyteidl.core.LiteralType.Builder.class);
  }

  private int typeCase_ = 0;
  private java.lang.Object type_;
  public enum TypeCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    SIMPLE(1),
    SCHEMA(2),
    COLLECTION_TYPE(3),
    MAP_VALUE_TYPE(4),
    BLOB(5),
    ENUM_TYPE(7),
    STRUCTURED_DATASET_TYPE(8),
    UNION_TYPE(10),
    TYPE_NOT_SET(0);
    private final int value;
    private TypeCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TypeCase valueOf(int value) {
      return forNumber(value);
    }

    public static TypeCase forNumber(int value) {
      switch (value) {
        case 1: return SIMPLE;
        case 2: return SCHEMA;
        case 3: return COLLECTION_TYPE;
        case 4: return MAP_VALUE_TYPE;
        case 5: return BLOB;
        case 7: return ENUM_TYPE;
        case 8: return STRUCTURED_DATASET_TYPE;
        case 10: return UNION_TYPE;
        case 0: return TYPE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public TypeCase
  getTypeCase() {
    return TypeCase.forNumber(
        typeCase_);
  }

  public static final int SIMPLE_FIELD_NUMBER = 1;
  /**
   * <pre>
   * A simple type that can be compared one-to-one with another.
   * </pre>
   *
   * <code>.flyteidl.core.SimpleType simple = 1 [json_name = "simple"];</code>
   * @return Whether the simple field is set.
   */
  public boolean hasSimple() {
    return typeCase_ == 1;
  }
  /**
   * <pre>
   * A simple type that can be compared one-to-one with another.
   * </pre>
   *
   * <code>.flyteidl.core.SimpleType simple = 1 [json_name = "simple"];</code>
   * @return The enum numeric value on the wire for simple.
   */
  public int getSimpleValue() {
    if (typeCase_ == 1) {
      return (java.lang.Integer) type_;
    }
    return 0;
  }
  /**
   * <pre>
   * A simple type that can be compared one-to-one with another.
   * </pre>
   *
   * <code>.flyteidl.core.SimpleType simple = 1 [json_name = "simple"];</code>
   * @return The simple.
   */
  public com.flyteidl.core.SimpleType getSimple() {
    if (typeCase_ == 1) {
      @SuppressWarnings("deprecation")
      com.flyteidl.core.SimpleType result = com.flyteidl.core.SimpleType.valueOf(
          (java.lang.Integer) type_);
      return result == null ? com.flyteidl.core.SimpleType.UNRECOGNIZED : result;
    }
    return com.flyteidl.core.SimpleType.NONE;
  }

  public static final int SCHEMA_FIELD_NUMBER = 2;
  /**
   * <pre>
   * A complex type that requires matching of inner fields.
   * </pre>
   *
   * <code>.flyteidl.core.SchemaType schema = 2 [json_name = "schema"];</code>
   * @return Whether the schema field is set.
   */
  @java.lang.Override
  public boolean hasSchema() {
    return typeCase_ == 2;
  }
  /**
   * <pre>
   * A complex type that requires matching of inner fields.
   * </pre>
   *
   * <code>.flyteidl.core.SchemaType schema = 2 [json_name = "schema"];</code>
   * @return The schema.
   */
  @java.lang.Override
  public com.flyteidl.core.SchemaType getSchema() {
    if (typeCase_ == 2) {
       return (com.flyteidl.core.SchemaType) type_;
    }
    return com.flyteidl.core.SchemaType.getDefaultInstance();
  }
  /**
   * <pre>
   * A complex type that requires matching of inner fields.
   * </pre>
   *
   * <code>.flyteidl.core.SchemaType schema = 2 [json_name = "schema"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.SchemaTypeOrBuilder getSchemaOrBuilder() {
    if (typeCase_ == 2) {
       return (com.flyteidl.core.SchemaType) type_;
    }
    return com.flyteidl.core.SchemaType.getDefaultInstance();
  }

  public static final int COLLECTION_TYPE_FIELD_NUMBER = 3;
  /**
   * <pre>
   * Defines the type of the value of a collection. Only homogeneous collections are allowed.
   * </pre>
   *
   * <code>.flyteidl.core.LiteralType collection_type = 3 [json_name = "collectionType"];</code>
   * @return Whether the collectionType field is set.
   */
  @java.lang.Override
  public boolean hasCollectionType() {
    return typeCase_ == 3;
  }
  /**
   * <pre>
   * Defines the type of the value of a collection. Only homogeneous collections are allowed.
   * </pre>
   *
   * <code>.flyteidl.core.LiteralType collection_type = 3 [json_name = "collectionType"];</code>
   * @return The collectionType.
   */
  @java.lang.Override
  public com.flyteidl.core.LiteralType getCollectionType() {
    if (typeCase_ == 3) {
       return (com.flyteidl.core.LiteralType) type_;
    }
    return com.flyteidl.core.LiteralType.getDefaultInstance();
  }
  /**
   * <pre>
   * Defines the type of the value of a collection. Only homogeneous collections are allowed.
   * </pre>
   *
   * <code>.flyteidl.core.LiteralType collection_type = 3 [json_name = "collectionType"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.LiteralTypeOrBuilder getCollectionTypeOrBuilder() {
    if (typeCase_ == 3) {
       return (com.flyteidl.core.LiteralType) type_;
    }
    return com.flyteidl.core.LiteralType.getDefaultInstance();
  }

  public static final int MAP_VALUE_TYPE_FIELD_NUMBER = 4;
  /**
   * <pre>
   * Defines the type of the value of a map type. The type of the key is always a string.
   * </pre>
   *
   * <code>.flyteidl.core.LiteralType map_value_type = 4 [json_name = "mapValueType"];</code>
   * @return Whether the mapValueType field is set.
   */
  @java.lang.Override
  public boolean hasMapValueType() {
    return typeCase_ == 4;
  }
  /**
   * <pre>
   * Defines the type of the value of a map type. The type of the key is always a string.
   * </pre>
   *
   * <code>.flyteidl.core.LiteralType map_value_type = 4 [json_name = "mapValueType"];</code>
   * @return The mapValueType.
   */
  @java.lang.Override
  public com.flyteidl.core.LiteralType getMapValueType() {
    if (typeCase_ == 4) {
       return (com.flyteidl.core.LiteralType) type_;
    }
    return com.flyteidl.core.LiteralType.getDefaultInstance();
  }
  /**
   * <pre>
   * Defines the type of the value of a map type. The type of the key is always a string.
   * </pre>
   *
   * <code>.flyteidl.core.LiteralType map_value_type = 4 [json_name = "mapValueType"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.LiteralTypeOrBuilder getMapValueTypeOrBuilder() {
    if (typeCase_ == 4) {
       return (com.flyteidl.core.LiteralType) type_;
    }
    return com.flyteidl.core.LiteralType.getDefaultInstance();
  }

  public static final int BLOB_FIELD_NUMBER = 5;
  /**
   * <pre>
   * A blob might have specialized implementation details depending on associated metadata.
   * </pre>
   *
   * <code>.flyteidl.core.BlobType blob = 5 [json_name = "blob"];</code>
   * @return Whether the blob field is set.
   */
  @java.lang.Override
  public boolean hasBlob() {
    return typeCase_ == 5;
  }
  /**
   * <pre>
   * A blob might have specialized implementation details depending on associated metadata.
   * </pre>
   *
   * <code>.flyteidl.core.BlobType blob = 5 [json_name = "blob"];</code>
   * @return The blob.
   */
  @java.lang.Override
  public com.flyteidl.core.BlobType getBlob() {
    if (typeCase_ == 5) {
       return (com.flyteidl.core.BlobType) type_;
    }
    return com.flyteidl.core.BlobType.getDefaultInstance();
  }
  /**
   * <pre>
   * A blob might have specialized implementation details depending on associated metadata.
   * </pre>
   *
   * <code>.flyteidl.core.BlobType blob = 5 [json_name = "blob"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.BlobTypeOrBuilder getBlobOrBuilder() {
    if (typeCase_ == 5) {
       return (com.flyteidl.core.BlobType) type_;
    }
    return com.flyteidl.core.BlobType.getDefaultInstance();
  }

  public static final int ENUM_TYPE_FIELD_NUMBER = 7;
  /**
   * <pre>
   * Defines an enum with pre-defined string values.
   * </pre>
   *
   * <code>.flyteidl.core.EnumType enum_type = 7 [json_name = "enumType"];</code>
   * @return Whether the enumType field is set.
   */
  @java.lang.Override
  public boolean hasEnumType() {
    return typeCase_ == 7;
  }
  /**
   * <pre>
   * Defines an enum with pre-defined string values.
   * </pre>
   *
   * <code>.flyteidl.core.EnumType enum_type = 7 [json_name = "enumType"];</code>
   * @return The enumType.
   */
  @java.lang.Override
  public com.flyteidl.core.EnumType getEnumType() {
    if (typeCase_ == 7) {
       return (com.flyteidl.core.EnumType) type_;
    }
    return com.flyteidl.core.EnumType.getDefaultInstance();
  }
  /**
   * <pre>
   * Defines an enum with pre-defined string values.
   * </pre>
   *
   * <code>.flyteidl.core.EnumType enum_type = 7 [json_name = "enumType"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.EnumTypeOrBuilder getEnumTypeOrBuilder() {
    if (typeCase_ == 7) {
       return (com.flyteidl.core.EnumType) type_;
    }
    return com.flyteidl.core.EnumType.getDefaultInstance();
  }

  public static final int STRUCTURED_DATASET_TYPE_FIELD_NUMBER = 8;
  /**
   * <pre>
   * Generalized schema support
   * </pre>
   *
   * <code>.flyteidl.core.StructuredDatasetType structured_dataset_type = 8 [json_name = "structuredDatasetType"];</code>
   * @return Whether the structuredDatasetType field is set.
   */
  @java.lang.Override
  public boolean hasStructuredDatasetType() {
    return typeCase_ == 8;
  }
  /**
   * <pre>
   * Generalized schema support
   * </pre>
   *
   * <code>.flyteidl.core.StructuredDatasetType structured_dataset_type = 8 [json_name = "structuredDatasetType"];</code>
   * @return The structuredDatasetType.
   */
  @java.lang.Override
  public com.flyteidl.core.StructuredDatasetType getStructuredDatasetType() {
    if (typeCase_ == 8) {
       return (com.flyteidl.core.StructuredDatasetType) type_;
    }
    return com.flyteidl.core.StructuredDatasetType.getDefaultInstance();
  }
  /**
   * <pre>
   * Generalized schema support
   * </pre>
   *
   * <code>.flyteidl.core.StructuredDatasetType structured_dataset_type = 8 [json_name = "structuredDatasetType"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.StructuredDatasetTypeOrBuilder getStructuredDatasetTypeOrBuilder() {
    if (typeCase_ == 8) {
       return (com.flyteidl.core.StructuredDatasetType) type_;
    }
    return com.flyteidl.core.StructuredDatasetType.getDefaultInstance();
  }

  public static final int UNION_TYPE_FIELD_NUMBER = 10;
  /**
   * <pre>
   * Defines an union type with pre-defined LiteralTypes.
   * </pre>
   *
   * <code>.flyteidl.core.UnionType union_type = 10 [json_name = "unionType"];</code>
   * @return Whether the unionType field is set.
   */
  @java.lang.Override
  public boolean hasUnionType() {
    return typeCase_ == 10;
  }
  /**
   * <pre>
   * Defines an union type with pre-defined LiteralTypes.
   * </pre>
   *
   * <code>.flyteidl.core.UnionType union_type = 10 [json_name = "unionType"];</code>
   * @return The unionType.
   */
  @java.lang.Override
  public com.flyteidl.core.UnionType getUnionType() {
    if (typeCase_ == 10) {
       return (com.flyteidl.core.UnionType) type_;
    }
    return com.flyteidl.core.UnionType.getDefaultInstance();
  }
  /**
   * <pre>
   * Defines an union type with pre-defined LiteralTypes.
   * </pre>
   *
   * <code>.flyteidl.core.UnionType union_type = 10 [json_name = "unionType"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.UnionTypeOrBuilder getUnionTypeOrBuilder() {
    if (typeCase_ == 10) {
       return (com.flyteidl.core.UnionType) type_;
    }
    return com.flyteidl.core.UnionType.getDefaultInstance();
  }

  public static final int METADATA_FIELD_NUMBER = 6;
  private com.google.protobuf.Struct metadata_;
  /**
   * <pre>
   * This field contains type metadata that is descriptive of the type, but is NOT considered in type-checking.  This might be used by
   * consumers to identify special behavior or display extended information for the type.
   * </pre>
   *
   * <code>.google.protobuf.Struct metadata = 6 [json_name = "metadata"];</code>
   * @return Whether the metadata field is set.
   */
  @java.lang.Override
  public boolean hasMetadata() {
    return metadata_ != null;
  }
  /**
   * <pre>
   * This field contains type metadata that is descriptive of the type, but is NOT considered in type-checking.  This might be used by
   * consumers to identify special behavior or display extended information for the type.
   * </pre>
   *
   * <code>.google.protobuf.Struct metadata = 6 [json_name = "metadata"];</code>
   * @return The metadata.
   */
  @java.lang.Override
  public com.google.protobuf.Struct getMetadata() {
    return metadata_ == null ? com.google.protobuf.Struct.getDefaultInstance() : metadata_;
  }
  /**
   * <pre>
   * This field contains type metadata that is descriptive of the type, but is NOT considered in type-checking.  This might be used by
   * consumers to identify special behavior or display extended information for the type.
   * </pre>
   *
   * <code>.google.protobuf.Struct metadata = 6 [json_name = "metadata"];</code>
   */
  @java.lang.Override
  public com.google.protobuf.StructOrBuilder getMetadataOrBuilder() {
    return getMetadata();
  }

  public static final int ANNOTATION_FIELD_NUMBER = 9;
  private com.flyteidl.core.TypeAnnotation annotation_;
  /**
   * <pre>
   * This field contains arbitrary data that might have special semantic
   * meaning for the client but does not effect internal flyte behavior.
   * </pre>
   *
   * <code>.flyteidl.core.TypeAnnotation annotation = 9 [json_name = "annotation"];</code>
   * @return Whether the annotation field is set.
   */
  @java.lang.Override
  public boolean hasAnnotation() {
    return annotation_ != null;
  }
  /**
   * <pre>
   * This field contains arbitrary data that might have special semantic
   * meaning for the client but does not effect internal flyte behavior.
   * </pre>
   *
   * <code>.flyteidl.core.TypeAnnotation annotation = 9 [json_name = "annotation"];</code>
   * @return The annotation.
   */
  @java.lang.Override
  public com.flyteidl.core.TypeAnnotation getAnnotation() {
    return annotation_ == null ? com.flyteidl.core.TypeAnnotation.getDefaultInstance() : annotation_;
  }
  /**
   * <pre>
   * This field contains arbitrary data that might have special semantic
   * meaning for the client but does not effect internal flyte behavior.
   * </pre>
   *
   * <code>.flyteidl.core.TypeAnnotation annotation = 9 [json_name = "annotation"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.TypeAnnotationOrBuilder getAnnotationOrBuilder() {
    return getAnnotation();
  }

  public static final int STRUCTURE_FIELD_NUMBER = 11;
  private com.flyteidl.core.TypeStructure structure_;
  /**
   * <pre>
   * Hints to improve type matching.
   * </pre>
   *
   * <code>.flyteidl.core.TypeStructure structure = 11 [json_name = "structure"];</code>
   * @return Whether the structure field is set.
   */
  @java.lang.Override
  public boolean hasStructure() {
    return structure_ != null;
  }
  /**
   * <pre>
   * Hints to improve type matching.
   * </pre>
   *
   * <code>.flyteidl.core.TypeStructure structure = 11 [json_name = "structure"];</code>
   * @return The structure.
   */
  @java.lang.Override
  public com.flyteidl.core.TypeStructure getStructure() {
    return structure_ == null ? com.flyteidl.core.TypeStructure.getDefaultInstance() : structure_;
  }
  /**
   * <pre>
   * Hints to improve type matching.
   * </pre>
   *
   * <code>.flyteidl.core.TypeStructure structure = 11 [json_name = "structure"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.TypeStructureOrBuilder getStructureOrBuilder() {
    return getStructure();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (typeCase_ == 1) {
      output.writeEnum(1, ((java.lang.Integer) type_));
    }
    if (typeCase_ == 2) {
      output.writeMessage(2, (com.flyteidl.core.SchemaType) type_);
    }
    if (typeCase_ == 3) {
      output.writeMessage(3, (com.flyteidl.core.LiteralType) type_);
    }
    if (typeCase_ == 4) {
      output.writeMessage(4, (com.flyteidl.core.LiteralType) type_);
    }
    if (typeCase_ == 5) {
      output.writeMessage(5, (com.flyteidl.core.BlobType) type_);
    }
    if (metadata_ != null) {
      output.writeMessage(6, getMetadata());
    }
    if (typeCase_ == 7) {
      output.writeMessage(7, (com.flyteidl.core.EnumType) type_);
    }
    if (typeCase_ == 8) {
      output.writeMessage(8, (com.flyteidl.core.StructuredDatasetType) type_);
    }
    if (annotation_ != null) {
      output.writeMessage(9, getAnnotation());
    }
    if (typeCase_ == 10) {
      output.writeMessage(10, (com.flyteidl.core.UnionType) type_);
    }
    if (structure_ != null) {
      output.writeMessage(11, getStructure());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (typeCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, ((java.lang.Integer) type_));
    }
    if (typeCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (com.flyteidl.core.SchemaType) type_);
    }
    if (typeCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (com.flyteidl.core.LiteralType) type_);
    }
    if (typeCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (com.flyteidl.core.LiteralType) type_);
    }
    if (typeCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (com.flyteidl.core.BlobType) type_);
    }
    if (metadata_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getMetadata());
    }
    if (typeCase_ == 7) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, (com.flyteidl.core.EnumType) type_);
    }
    if (typeCase_ == 8) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, (com.flyteidl.core.StructuredDatasetType) type_);
    }
    if (annotation_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, getAnnotation());
    }
    if (typeCase_ == 10) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, (com.flyteidl.core.UnionType) type_);
    }
    if (structure_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, getStructure());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.flyteidl.core.LiteralType)) {
      return super.equals(obj);
    }
    com.flyteidl.core.LiteralType other = (com.flyteidl.core.LiteralType) obj;

    if (hasMetadata() != other.hasMetadata()) return false;
    if (hasMetadata()) {
      if (!getMetadata()
          .equals(other.getMetadata())) return false;
    }
    if (hasAnnotation() != other.hasAnnotation()) return false;
    if (hasAnnotation()) {
      if (!getAnnotation()
          .equals(other.getAnnotation())) return false;
    }
    if (hasStructure() != other.hasStructure()) return false;
    if (hasStructure()) {
      if (!getStructure()
          .equals(other.getStructure())) return false;
    }
    if (!getTypeCase().equals(other.getTypeCase())) return false;
    switch (typeCase_) {
      case 1:
        if (getSimpleValue()
            != other.getSimpleValue()) return false;
        break;
      case 2:
        if (!getSchema()
            .equals(other.getSchema())) return false;
        break;
      case 3:
        if (!getCollectionType()
            .equals(other.getCollectionType())) return false;
        break;
      case 4:
        if (!getMapValueType()
            .equals(other.getMapValueType())) return false;
        break;
      case 5:
        if (!getBlob()
            .equals(other.getBlob())) return false;
        break;
      case 7:
        if (!getEnumType()
            .equals(other.getEnumType())) return false;
        break;
      case 8:
        if (!getStructuredDatasetType()
            .equals(other.getStructuredDatasetType())) return false;
        break;
      case 10:
        if (!getUnionType()
            .equals(other.getUnionType())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasMetadata()) {
      hash = (37 * hash) + METADATA_FIELD_NUMBER;
      hash = (53 * hash) + getMetadata().hashCode();
    }
    if (hasAnnotation()) {
      hash = (37 * hash) + ANNOTATION_FIELD_NUMBER;
      hash = (53 * hash) + getAnnotation().hashCode();
    }
    if (hasStructure()) {
      hash = (37 * hash) + STRUCTURE_FIELD_NUMBER;
      hash = (53 * hash) + getStructure().hashCode();
    }
    switch (typeCase_) {
      case 1:
        hash = (37 * hash) + SIMPLE_FIELD_NUMBER;
        hash = (53 * hash) + getSimpleValue();
        break;
      case 2:
        hash = (37 * hash) + SCHEMA_FIELD_NUMBER;
        hash = (53 * hash) + getSchema().hashCode();
        break;
      case 3:
        hash = (37 * hash) + COLLECTION_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getCollectionType().hashCode();
        break;
      case 4:
        hash = (37 * hash) + MAP_VALUE_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getMapValueType().hashCode();
        break;
      case 5:
        hash = (37 * hash) + BLOB_FIELD_NUMBER;
        hash = (53 * hash) + getBlob().hashCode();
        break;
      case 7:
        hash = (37 * hash) + ENUM_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getEnumType().hashCode();
        break;
      case 8:
        hash = (37 * hash) + STRUCTURED_DATASET_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getStructuredDatasetType().hashCode();
        break;
      case 10:
        hash = (37 * hash) + UNION_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getUnionType().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.flyteidl.core.LiteralType parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.core.LiteralType parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.core.LiteralType parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.core.LiteralType parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.core.LiteralType parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.core.LiteralType parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.core.LiteralType parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.flyteidl.core.LiteralType parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.flyteidl.core.LiteralType parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.flyteidl.core.LiteralType parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.flyteidl.core.LiteralType parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.flyteidl.core.LiteralType parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.flyteidl.core.LiteralType prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Defines a strong type to allow type checking between interfaces.
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.LiteralType}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:flyteidl.core.LiteralType)
      com.flyteidl.core.LiteralTypeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.flyteidl.core.TypesProto.internal_static_flyteidl_core_LiteralType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.flyteidl.core.TypesProto.internal_static_flyteidl_core_LiteralType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.flyteidl.core.LiteralType.class, com.flyteidl.core.LiteralType.Builder.class);
    }

    // Construct using com.flyteidl.core.LiteralType.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (metadataBuilder_ == null) {
        metadata_ = null;
      } else {
        metadata_ = null;
        metadataBuilder_ = null;
      }
      if (annotationBuilder_ == null) {
        annotation_ = null;
      } else {
        annotation_ = null;
        annotationBuilder_ = null;
      }
      if (structureBuilder_ == null) {
        structure_ = null;
      } else {
        structure_ = null;
        structureBuilder_ = null;
      }
      typeCase_ = 0;
      type_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.flyteidl.core.TypesProto.internal_static_flyteidl_core_LiteralType_descriptor;
    }

    @java.lang.Override
    public com.flyteidl.core.LiteralType getDefaultInstanceForType() {
      return com.flyteidl.core.LiteralType.getDefaultInstance();
    }

    @java.lang.Override
    public com.flyteidl.core.LiteralType build() {
      com.flyteidl.core.LiteralType result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.flyteidl.core.LiteralType buildPartial() {
      com.flyteidl.core.LiteralType result = new com.flyteidl.core.LiteralType(this);
      if (typeCase_ == 1) {
        result.type_ = type_;
      }
      if (typeCase_ == 2) {
        if (schemaBuilder_ == null) {
          result.type_ = type_;
        } else {
          result.type_ = schemaBuilder_.build();
        }
      }
      if (typeCase_ == 3) {
        if (collectionTypeBuilder_ == null) {
          result.type_ = type_;
        } else {
          result.type_ = collectionTypeBuilder_.build();
        }
      }
      if (typeCase_ == 4) {
        if (mapValueTypeBuilder_ == null) {
          result.type_ = type_;
        } else {
          result.type_ = mapValueTypeBuilder_.build();
        }
      }
      if (typeCase_ == 5) {
        if (blobBuilder_ == null) {
          result.type_ = type_;
        } else {
          result.type_ = blobBuilder_.build();
        }
      }
      if (typeCase_ == 7) {
        if (enumTypeBuilder_ == null) {
          result.type_ = type_;
        } else {
          result.type_ = enumTypeBuilder_.build();
        }
      }
      if (typeCase_ == 8) {
        if (structuredDatasetTypeBuilder_ == null) {
          result.type_ = type_;
        } else {
          result.type_ = structuredDatasetTypeBuilder_.build();
        }
      }
      if (typeCase_ == 10) {
        if (unionTypeBuilder_ == null) {
          result.type_ = type_;
        } else {
          result.type_ = unionTypeBuilder_.build();
        }
      }
      if (metadataBuilder_ == null) {
        result.metadata_ = metadata_;
      } else {
        result.metadata_ = metadataBuilder_.build();
      }
      if (annotationBuilder_ == null) {
        result.annotation_ = annotation_;
      } else {
        result.annotation_ = annotationBuilder_.build();
      }
      if (structureBuilder_ == null) {
        result.structure_ = structure_;
      } else {
        result.structure_ = structureBuilder_.build();
      }
      result.typeCase_ = typeCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.flyteidl.core.LiteralType) {
        return mergeFrom((com.flyteidl.core.LiteralType)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.flyteidl.core.LiteralType other) {
      if (other == com.flyteidl.core.LiteralType.getDefaultInstance()) return this;
      if (other.hasMetadata()) {
        mergeMetadata(other.getMetadata());
      }
      if (other.hasAnnotation()) {
        mergeAnnotation(other.getAnnotation());
      }
      if (other.hasStructure()) {
        mergeStructure(other.getStructure());
      }
      switch (other.getTypeCase()) {
        case SIMPLE: {
          setSimpleValue(other.getSimpleValue());
          break;
        }
        case SCHEMA: {
          mergeSchema(other.getSchema());
          break;
        }
        case COLLECTION_TYPE: {
          mergeCollectionType(other.getCollectionType());
          break;
        }
        case MAP_VALUE_TYPE: {
          mergeMapValueType(other.getMapValueType());
          break;
        }
        case BLOB: {
          mergeBlob(other.getBlob());
          break;
        }
        case ENUM_TYPE: {
          mergeEnumType(other.getEnumType());
          break;
        }
        case STRUCTURED_DATASET_TYPE: {
          mergeStructuredDatasetType(other.getStructuredDatasetType());
          break;
        }
        case UNION_TYPE: {
          mergeUnionType(other.getUnionType());
          break;
        }
        case TYPE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.flyteidl.core.LiteralType parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.flyteidl.core.LiteralType) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int typeCase_ = 0;
    private java.lang.Object type_;
    public TypeCase
        getTypeCase() {
      return TypeCase.forNumber(
          typeCase_);
    }

    public Builder clearType() {
      typeCase_ = 0;
      type_ = null;
      onChanged();
      return this;
    }


    /**
     * <pre>
     * A simple type that can be compared one-to-one with another.
     * </pre>
     *
     * <code>.flyteidl.core.SimpleType simple = 1 [json_name = "simple"];</code>
     * @return Whether the simple field is set.
     */
    @java.lang.Override
    public boolean hasSimple() {
      return typeCase_ == 1;
    }
    /**
     * <pre>
     * A simple type that can be compared one-to-one with another.
     * </pre>
     *
     * <code>.flyteidl.core.SimpleType simple = 1 [json_name = "simple"];</code>
     * @return The enum numeric value on the wire for simple.
     */
    @java.lang.Override
    public int getSimpleValue() {
      if (typeCase_ == 1) {
        return ((java.lang.Integer) type_).intValue();
      }
      return 0;
    }
    /**
     * <pre>
     * A simple type that can be compared one-to-one with another.
     * </pre>
     *
     * <code>.flyteidl.core.SimpleType simple = 1 [json_name = "simple"];</code>
     * @param value The enum numeric value on the wire for simple to set.
     * @return This builder for chaining.
     */
    public Builder setSimpleValue(int value) {
      typeCase_ = 1;
      type_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A simple type that can be compared one-to-one with another.
     * </pre>
     *
     * <code>.flyteidl.core.SimpleType simple = 1 [json_name = "simple"];</code>
     * @return The simple.
     */
    @java.lang.Override
    public com.flyteidl.core.SimpleType getSimple() {
      if (typeCase_ == 1) {
        @SuppressWarnings("deprecation")
        com.flyteidl.core.SimpleType result = com.flyteidl.core.SimpleType.valueOf(
            (java.lang.Integer) type_);
        return result == null ? com.flyteidl.core.SimpleType.UNRECOGNIZED : result;
      }
      return com.flyteidl.core.SimpleType.NONE;
    }
    /**
     * <pre>
     * A simple type that can be compared one-to-one with another.
     * </pre>
     *
     * <code>.flyteidl.core.SimpleType simple = 1 [json_name = "simple"];</code>
     * @param value The simple to set.
     * @return This builder for chaining.
     */
    public Builder setSimple(com.flyteidl.core.SimpleType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      typeCase_ = 1;
      type_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A simple type that can be compared one-to-one with another.
     * </pre>
     *
     * <code>.flyteidl.core.SimpleType simple = 1 [json_name = "simple"];</code>
     * @return This builder for chaining.
     */
    public Builder clearSimple() {
      if (typeCase_ == 1) {
        typeCase_ = 0;
        type_ = null;
        onChanged();
      }
      return this;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.SchemaType, com.flyteidl.core.SchemaType.Builder, com.flyteidl.core.SchemaTypeOrBuilder> schemaBuilder_;
    /**
     * <pre>
     * A complex type that requires matching of inner fields.
     * </pre>
     *
     * <code>.flyteidl.core.SchemaType schema = 2 [json_name = "schema"];</code>
     * @return Whether the schema field is set.
     */
    @java.lang.Override
    public boolean hasSchema() {
      return typeCase_ == 2;
    }
    /**
     * <pre>
     * A complex type that requires matching of inner fields.
     * </pre>
     *
     * <code>.flyteidl.core.SchemaType schema = 2 [json_name = "schema"];</code>
     * @return The schema.
     */
    @java.lang.Override
    public com.flyteidl.core.SchemaType getSchema() {
      if (schemaBuilder_ == null) {
        if (typeCase_ == 2) {
          return (com.flyteidl.core.SchemaType) type_;
        }
        return com.flyteidl.core.SchemaType.getDefaultInstance();
      } else {
        if (typeCase_ == 2) {
          return schemaBuilder_.getMessage();
        }
        return com.flyteidl.core.SchemaType.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A complex type that requires matching of inner fields.
     * </pre>
     *
     * <code>.flyteidl.core.SchemaType schema = 2 [json_name = "schema"];</code>
     */
    public Builder setSchema(com.flyteidl.core.SchemaType value) {
      if (schemaBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        type_ = value;
        onChanged();
      } else {
        schemaBuilder_.setMessage(value);
      }
      typeCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * A complex type that requires matching of inner fields.
     * </pre>
     *
     * <code>.flyteidl.core.SchemaType schema = 2 [json_name = "schema"];</code>
     */
    public Builder setSchema(
        com.flyteidl.core.SchemaType.Builder builderForValue) {
      if (schemaBuilder_ == null) {
        type_ = builderForValue.build();
        onChanged();
      } else {
        schemaBuilder_.setMessage(builderForValue.build());
      }
      typeCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * A complex type that requires matching of inner fields.
     * </pre>
     *
     * <code>.flyteidl.core.SchemaType schema = 2 [json_name = "schema"];</code>
     */
    public Builder mergeSchema(com.flyteidl.core.SchemaType value) {
      if (schemaBuilder_ == null) {
        if (typeCase_ == 2 &&
            type_ != com.flyteidl.core.SchemaType.getDefaultInstance()) {
          type_ = com.flyteidl.core.SchemaType.newBuilder((com.flyteidl.core.SchemaType) type_)
              .mergeFrom(value).buildPartial();
        } else {
          type_ = value;
        }
        onChanged();
      } else {
        if (typeCase_ == 2) {
          schemaBuilder_.mergeFrom(value);
        }
        schemaBuilder_.setMessage(value);
      }
      typeCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * A complex type that requires matching of inner fields.
     * </pre>
     *
     * <code>.flyteidl.core.SchemaType schema = 2 [json_name = "schema"];</code>
     */
    public Builder clearSchema() {
      if (schemaBuilder_ == null) {
        if (typeCase_ == 2) {
          typeCase_ = 0;
          type_ = null;
          onChanged();
        }
      } else {
        if (typeCase_ == 2) {
          typeCase_ = 0;
          type_ = null;
        }
        schemaBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A complex type that requires matching of inner fields.
     * </pre>
     *
     * <code>.flyteidl.core.SchemaType schema = 2 [json_name = "schema"];</code>
     */
    public com.flyteidl.core.SchemaType.Builder getSchemaBuilder() {
      return getSchemaFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A complex type that requires matching of inner fields.
     * </pre>
     *
     * <code>.flyteidl.core.SchemaType schema = 2 [json_name = "schema"];</code>
     */
    @java.lang.Override
    public com.flyteidl.core.SchemaTypeOrBuilder getSchemaOrBuilder() {
      if ((typeCase_ == 2) && (schemaBuilder_ != null)) {
        return schemaBuilder_.getMessageOrBuilder();
      } else {
        if (typeCase_ == 2) {
          return (com.flyteidl.core.SchemaType) type_;
        }
        return com.flyteidl.core.SchemaType.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A complex type that requires matching of inner fields.
     * </pre>
     *
     * <code>.flyteidl.core.SchemaType schema = 2 [json_name = "schema"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.SchemaType, com.flyteidl.core.SchemaType.Builder, com.flyteidl.core.SchemaTypeOrBuilder> 
        getSchemaFieldBuilder() {
      if (schemaBuilder_ == null) {
        if (!(typeCase_ == 2)) {
          type_ = com.flyteidl.core.SchemaType.getDefaultInstance();
        }
        schemaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.SchemaType, com.flyteidl.core.SchemaType.Builder, com.flyteidl.core.SchemaTypeOrBuilder>(
                (com.flyteidl.core.SchemaType) type_,
                getParentForChildren(),
                isClean());
        type_ = null;
      }
      typeCase_ = 2;
      onChanged();;
      return schemaBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.LiteralType, com.flyteidl.core.LiteralType.Builder, com.flyteidl.core.LiteralTypeOrBuilder> collectionTypeBuilder_;
    /**
     * <pre>
     * Defines the type of the value of a collection. Only homogeneous collections are allowed.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralType collection_type = 3 [json_name = "collectionType"];</code>
     * @return Whether the collectionType field is set.
     */
    @java.lang.Override
    public boolean hasCollectionType() {
      return typeCase_ == 3;
    }
    /**
     * <pre>
     * Defines the type of the value of a collection. Only homogeneous collections are allowed.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralType collection_type = 3 [json_name = "collectionType"];</code>
     * @return The collectionType.
     */
    @java.lang.Override
    public com.flyteidl.core.LiteralType getCollectionType() {
      if (collectionTypeBuilder_ == null) {
        if (typeCase_ == 3) {
          return (com.flyteidl.core.LiteralType) type_;
        }
        return com.flyteidl.core.LiteralType.getDefaultInstance();
      } else {
        if (typeCase_ == 3) {
          return collectionTypeBuilder_.getMessage();
        }
        return com.flyteidl.core.LiteralType.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Defines the type of the value of a collection. Only homogeneous collections are allowed.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralType collection_type = 3 [json_name = "collectionType"];</code>
     */
    public Builder setCollectionType(com.flyteidl.core.LiteralType value) {
      if (collectionTypeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        type_ = value;
        onChanged();
      } else {
        collectionTypeBuilder_.setMessage(value);
      }
      typeCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Defines the type of the value of a collection. Only homogeneous collections are allowed.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralType collection_type = 3 [json_name = "collectionType"];</code>
     */
    public Builder setCollectionType(
        com.flyteidl.core.LiteralType.Builder builderForValue) {
      if (collectionTypeBuilder_ == null) {
        type_ = builderForValue.build();
        onChanged();
      } else {
        collectionTypeBuilder_.setMessage(builderForValue.build());
      }
      typeCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Defines the type of the value of a collection. Only homogeneous collections are allowed.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralType collection_type = 3 [json_name = "collectionType"];</code>
     */
    public Builder mergeCollectionType(com.flyteidl.core.LiteralType value) {
      if (collectionTypeBuilder_ == null) {
        if (typeCase_ == 3 &&
            type_ != com.flyteidl.core.LiteralType.getDefaultInstance()) {
          type_ = com.flyteidl.core.LiteralType.newBuilder((com.flyteidl.core.LiteralType) type_)
              .mergeFrom(value).buildPartial();
        } else {
          type_ = value;
        }
        onChanged();
      } else {
        if (typeCase_ == 3) {
          collectionTypeBuilder_.mergeFrom(value);
        }
        collectionTypeBuilder_.setMessage(value);
      }
      typeCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Defines the type of the value of a collection. Only homogeneous collections are allowed.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralType collection_type = 3 [json_name = "collectionType"];</code>
     */
    public Builder clearCollectionType() {
      if (collectionTypeBuilder_ == null) {
        if (typeCase_ == 3) {
          typeCase_ = 0;
          type_ = null;
          onChanged();
        }
      } else {
        if (typeCase_ == 3) {
          typeCase_ = 0;
          type_ = null;
        }
        collectionTypeBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Defines the type of the value of a collection. Only homogeneous collections are allowed.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralType collection_type = 3 [json_name = "collectionType"];</code>
     */
    public com.flyteidl.core.LiteralType.Builder getCollectionTypeBuilder() {
      return getCollectionTypeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Defines the type of the value of a collection. Only homogeneous collections are allowed.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralType collection_type = 3 [json_name = "collectionType"];</code>
     */
    @java.lang.Override
    public com.flyteidl.core.LiteralTypeOrBuilder getCollectionTypeOrBuilder() {
      if ((typeCase_ == 3) && (collectionTypeBuilder_ != null)) {
        return collectionTypeBuilder_.getMessageOrBuilder();
      } else {
        if (typeCase_ == 3) {
          return (com.flyteidl.core.LiteralType) type_;
        }
        return com.flyteidl.core.LiteralType.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Defines the type of the value of a collection. Only homogeneous collections are allowed.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralType collection_type = 3 [json_name = "collectionType"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.LiteralType, com.flyteidl.core.LiteralType.Builder, com.flyteidl.core.LiteralTypeOrBuilder> 
        getCollectionTypeFieldBuilder() {
      if (collectionTypeBuilder_ == null) {
        if (!(typeCase_ == 3)) {
          type_ = com.flyteidl.core.LiteralType.getDefaultInstance();
        }
        collectionTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.LiteralType, com.flyteidl.core.LiteralType.Builder, com.flyteidl.core.LiteralTypeOrBuilder>(
                (com.flyteidl.core.LiteralType) type_,
                getParentForChildren(),
                isClean());
        type_ = null;
      }
      typeCase_ = 3;
      onChanged();;
      return collectionTypeBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.LiteralType, com.flyteidl.core.LiteralType.Builder, com.flyteidl.core.LiteralTypeOrBuilder> mapValueTypeBuilder_;
    /**
     * <pre>
     * Defines the type of the value of a map type. The type of the key is always a string.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralType map_value_type = 4 [json_name = "mapValueType"];</code>
     * @return Whether the mapValueType field is set.
     */
    @java.lang.Override
    public boolean hasMapValueType() {
      return typeCase_ == 4;
    }
    /**
     * <pre>
     * Defines the type of the value of a map type. The type of the key is always a string.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralType map_value_type = 4 [json_name = "mapValueType"];</code>
     * @return The mapValueType.
     */
    @java.lang.Override
    public com.flyteidl.core.LiteralType getMapValueType() {
      if (mapValueTypeBuilder_ == null) {
        if (typeCase_ == 4) {
          return (com.flyteidl.core.LiteralType) type_;
        }
        return com.flyteidl.core.LiteralType.getDefaultInstance();
      } else {
        if (typeCase_ == 4) {
          return mapValueTypeBuilder_.getMessage();
        }
        return com.flyteidl.core.LiteralType.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Defines the type of the value of a map type. The type of the key is always a string.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralType map_value_type = 4 [json_name = "mapValueType"];</code>
     */
    public Builder setMapValueType(com.flyteidl.core.LiteralType value) {
      if (mapValueTypeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        type_ = value;
        onChanged();
      } else {
        mapValueTypeBuilder_.setMessage(value);
      }
      typeCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * Defines the type of the value of a map type. The type of the key is always a string.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralType map_value_type = 4 [json_name = "mapValueType"];</code>
     */
    public Builder setMapValueType(
        com.flyteidl.core.LiteralType.Builder builderForValue) {
      if (mapValueTypeBuilder_ == null) {
        type_ = builderForValue.build();
        onChanged();
      } else {
        mapValueTypeBuilder_.setMessage(builderForValue.build());
      }
      typeCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * Defines the type of the value of a map type. The type of the key is always a string.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralType map_value_type = 4 [json_name = "mapValueType"];</code>
     */
    public Builder mergeMapValueType(com.flyteidl.core.LiteralType value) {
      if (mapValueTypeBuilder_ == null) {
        if (typeCase_ == 4 &&
            type_ != com.flyteidl.core.LiteralType.getDefaultInstance()) {
          type_ = com.flyteidl.core.LiteralType.newBuilder((com.flyteidl.core.LiteralType) type_)
              .mergeFrom(value).buildPartial();
        } else {
          type_ = value;
        }
        onChanged();
      } else {
        if (typeCase_ == 4) {
          mapValueTypeBuilder_.mergeFrom(value);
        }
        mapValueTypeBuilder_.setMessage(value);
      }
      typeCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * Defines the type of the value of a map type. The type of the key is always a string.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralType map_value_type = 4 [json_name = "mapValueType"];</code>
     */
    public Builder clearMapValueType() {
      if (mapValueTypeBuilder_ == null) {
        if (typeCase_ == 4) {
          typeCase_ = 0;
          type_ = null;
          onChanged();
        }
      } else {
        if (typeCase_ == 4) {
          typeCase_ = 0;
          type_ = null;
        }
        mapValueTypeBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Defines the type of the value of a map type. The type of the key is always a string.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralType map_value_type = 4 [json_name = "mapValueType"];</code>
     */
    public com.flyteidl.core.LiteralType.Builder getMapValueTypeBuilder() {
      return getMapValueTypeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Defines the type of the value of a map type. The type of the key is always a string.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralType map_value_type = 4 [json_name = "mapValueType"];</code>
     */
    @java.lang.Override
    public com.flyteidl.core.LiteralTypeOrBuilder getMapValueTypeOrBuilder() {
      if ((typeCase_ == 4) && (mapValueTypeBuilder_ != null)) {
        return mapValueTypeBuilder_.getMessageOrBuilder();
      } else {
        if (typeCase_ == 4) {
          return (com.flyteidl.core.LiteralType) type_;
        }
        return com.flyteidl.core.LiteralType.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Defines the type of the value of a map type. The type of the key is always a string.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralType map_value_type = 4 [json_name = "mapValueType"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.LiteralType, com.flyteidl.core.LiteralType.Builder, com.flyteidl.core.LiteralTypeOrBuilder> 
        getMapValueTypeFieldBuilder() {
      if (mapValueTypeBuilder_ == null) {
        if (!(typeCase_ == 4)) {
          type_ = com.flyteidl.core.LiteralType.getDefaultInstance();
        }
        mapValueTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.LiteralType, com.flyteidl.core.LiteralType.Builder, com.flyteidl.core.LiteralTypeOrBuilder>(
                (com.flyteidl.core.LiteralType) type_,
                getParentForChildren(),
                isClean());
        type_ = null;
      }
      typeCase_ = 4;
      onChanged();;
      return mapValueTypeBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.BlobType, com.flyteidl.core.BlobType.Builder, com.flyteidl.core.BlobTypeOrBuilder> blobBuilder_;
    /**
     * <pre>
     * A blob might have specialized implementation details depending on associated metadata.
     * </pre>
     *
     * <code>.flyteidl.core.BlobType blob = 5 [json_name = "blob"];</code>
     * @return Whether the blob field is set.
     */
    @java.lang.Override
    public boolean hasBlob() {
      return typeCase_ == 5;
    }
    /**
     * <pre>
     * A blob might have specialized implementation details depending on associated metadata.
     * </pre>
     *
     * <code>.flyteidl.core.BlobType blob = 5 [json_name = "blob"];</code>
     * @return The blob.
     */
    @java.lang.Override
    public com.flyteidl.core.BlobType getBlob() {
      if (blobBuilder_ == null) {
        if (typeCase_ == 5) {
          return (com.flyteidl.core.BlobType) type_;
        }
        return com.flyteidl.core.BlobType.getDefaultInstance();
      } else {
        if (typeCase_ == 5) {
          return blobBuilder_.getMessage();
        }
        return com.flyteidl.core.BlobType.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A blob might have specialized implementation details depending on associated metadata.
     * </pre>
     *
     * <code>.flyteidl.core.BlobType blob = 5 [json_name = "blob"];</code>
     */
    public Builder setBlob(com.flyteidl.core.BlobType value) {
      if (blobBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        type_ = value;
        onChanged();
      } else {
        blobBuilder_.setMessage(value);
      }
      typeCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * A blob might have specialized implementation details depending on associated metadata.
     * </pre>
     *
     * <code>.flyteidl.core.BlobType blob = 5 [json_name = "blob"];</code>
     */
    public Builder setBlob(
        com.flyteidl.core.BlobType.Builder builderForValue) {
      if (blobBuilder_ == null) {
        type_ = builderForValue.build();
        onChanged();
      } else {
        blobBuilder_.setMessage(builderForValue.build());
      }
      typeCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * A blob might have specialized implementation details depending on associated metadata.
     * </pre>
     *
     * <code>.flyteidl.core.BlobType blob = 5 [json_name = "blob"];</code>
     */
    public Builder mergeBlob(com.flyteidl.core.BlobType value) {
      if (blobBuilder_ == null) {
        if (typeCase_ == 5 &&
            type_ != com.flyteidl.core.BlobType.getDefaultInstance()) {
          type_ = com.flyteidl.core.BlobType.newBuilder((com.flyteidl.core.BlobType) type_)
              .mergeFrom(value).buildPartial();
        } else {
          type_ = value;
        }
        onChanged();
      } else {
        if (typeCase_ == 5) {
          blobBuilder_.mergeFrom(value);
        }
        blobBuilder_.setMessage(value);
      }
      typeCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * A blob might have specialized implementation details depending on associated metadata.
     * </pre>
     *
     * <code>.flyteidl.core.BlobType blob = 5 [json_name = "blob"];</code>
     */
    public Builder clearBlob() {
      if (blobBuilder_ == null) {
        if (typeCase_ == 5) {
          typeCase_ = 0;
          type_ = null;
          onChanged();
        }
      } else {
        if (typeCase_ == 5) {
          typeCase_ = 0;
          type_ = null;
        }
        blobBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A blob might have specialized implementation details depending on associated metadata.
     * </pre>
     *
     * <code>.flyteidl.core.BlobType blob = 5 [json_name = "blob"];</code>
     */
    public com.flyteidl.core.BlobType.Builder getBlobBuilder() {
      return getBlobFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A blob might have specialized implementation details depending on associated metadata.
     * </pre>
     *
     * <code>.flyteidl.core.BlobType blob = 5 [json_name = "blob"];</code>
     */
    @java.lang.Override
    public com.flyteidl.core.BlobTypeOrBuilder getBlobOrBuilder() {
      if ((typeCase_ == 5) && (blobBuilder_ != null)) {
        return blobBuilder_.getMessageOrBuilder();
      } else {
        if (typeCase_ == 5) {
          return (com.flyteidl.core.BlobType) type_;
        }
        return com.flyteidl.core.BlobType.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A blob might have specialized implementation details depending on associated metadata.
     * </pre>
     *
     * <code>.flyteidl.core.BlobType blob = 5 [json_name = "blob"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.BlobType, com.flyteidl.core.BlobType.Builder, com.flyteidl.core.BlobTypeOrBuilder> 
        getBlobFieldBuilder() {
      if (blobBuilder_ == null) {
        if (!(typeCase_ == 5)) {
          type_ = com.flyteidl.core.BlobType.getDefaultInstance();
        }
        blobBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.BlobType, com.flyteidl.core.BlobType.Builder, com.flyteidl.core.BlobTypeOrBuilder>(
                (com.flyteidl.core.BlobType) type_,
                getParentForChildren(),
                isClean());
        type_ = null;
      }
      typeCase_ = 5;
      onChanged();;
      return blobBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.EnumType, com.flyteidl.core.EnumType.Builder, com.flyteidl.core.EnumTypeOrBuilder> enumTypeBuilder_;
    /**
     * <pre>
     * Defines an enum with pre-defined string values.
     * </pre>
     *
     * <code>.flyteidl.core.EnumType enum_type = 7 [json_name = "enumType"];</code>
     * @return Whether the enumType field is set.
     */
    @java.lang.Override
    public boolean hasEnumType() {
      return typeCase_ == 7;
    }
    /**
     * <pre>
     * Defines an enum with pre-defined string values.
     * </pre>
     *
     * <code>.flyteidl.core.EnumType enum_type = 7 [json_name = "enumType"];</code>
     * @return The enumType.
     */
    @java.lang.Override
    public com.flyteidl.core.EnumType getEnumType() {
      if (enumTypeBuilder_ == null) {
        if (typeCase_ == 7) {
          return (com.flyteidl.core.EnumType) type_;
        }
        return com.flyteidl.core.EnumType.getDefaultInstance();
      } else {
        if (typeCase_ == 7) {
          return enumTypeBuilder_.getMessage();
        }
        return com.flyteidl.core.EnumType.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Defines an enum with pre-defined string values.
     * </pre>
     *
     * <code>.flyteidl.core.EnumType enum_type = 7 [json_name = "enumType"];</code>
     */
    public Builder setEnumType(com.flyteidl.core.EnumType value) {
      if (enumTypeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        type_ = value;
        onChanged();
      } else {
        enumTypeBuilder_.setMessage(value);
      }
      typeCase_ = 7;
      return this;
    }
    /**
     * <pre>
     * Defines an enum with pre-defined string values.
     * </pre>
     *
     * <code>.flyteidl.core.EnumType enum_type = 7 [json_name = "enumType"];</code>
     */
    public Builder setEnumType(
        com.flyteidl.core.EnumType.Builder builderForValue) {
      if (enumTypeBuilder_ == null) {
        type_ = builderForValue.build();
        onChanged();
      } else {
        enumTypeBuilder_.setMessage(builderForValue.build());
      }
      typeCase_ = 7;
      return this;
    }
    /**
     * <pre>
     * Defines an enum with pre-defined string values.
     * </pre>
     *
     * <code>.flyteidl.core.EnumType enum_type = 7 [json_name = "enumType"];</code>
     */
    public Builder mergeEnumType(com.flyteidl.core.EnumType value) {
      if (enumTypeBuilder_ == null) {
        if (typeCase_ == 7 &&
            type_ != com.flyteidl.core.EnumType.getDefaultInstance()) {
          type_ = com.flyteidl.core.EnumType.newBuilder((com.flyteidl.core.EnumType) type_)
              .mergeFrom(value).buildPartial();
        } else {
          type_ = value;
        }
        onChanged();
      } else {
        if (typeCase_ == 7) {
          enumTypeBuilder_.mergeFrom(value);
        }
        enumTypeBuilder_.setMessage(value);
      }
      typeCase_ = 7;
      return this;
    }
    /**
     * <pre>
     * Defines an enum with pre-defined string values.
     * </pre>
     *
     * <code>.flyteidl.core.EnumType enum_type = 7 [json_name = "enumType"];</code>
     */
    public Builder clearEnumType() {
      if (enumTypeBuilder_ == null) {
        if (typeCase_ == 7) {
          typeCase_ = 0;
          type_ = null;
          onChanged();
        }
      } else {
        if (typeCase_ == 7) {
          typeCase_ = 0;
          type_ = null;
        }
        enumTypeBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Defines an enum with pre-defined string values.
     * </pre>
     *
     * <code>.flyteidl.core.EnumType enum_type = 7 [json_name = "enumType"];</code>
     */
    public com.flyteidl.core.EnumType.Builder getEnumTypeBuilder() {
      return getEnumTypeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Defines an enum with pre-defined string values.
     * </pre>
     *
     * <code>.flyteidl.core.EnumType enum_type = 7 [json_name = "enumType"];</code>
     */
    @java.lang.Override
    public com.flyteidl.core.EnumTypeOrBuilder getEnumTypeOrBuilder() {
      if ((typeCase_ == 7) && (enumTypeBuilder_ != null)) {
        return enumTypeBuilder_.getMessageOrBuilder();
      } else {
        if (typeCase_ == 7) {
          return (com.flyteidl.core.EnumType) type_;
        }
        return com.flyteidl.core.EnumType.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Defines an enum with pre-defined string values.
     * </pre>
     *
     * <code>.flyteidl.core.EnumType enum_type = 7 [json_name = "enumType"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.EnumType, com.flyteidl.core.EnumType.Builder, com.flyteidl.core.EnumTypeOrBuilder> 
        getEnumTypeFieldBuilder() {
      if (enumTypeBuilder_ == null) {
        if (!(typeCase_ == 7)) {
          type_ = com.flyteidl.core.EnumType.getDefaultInstance();
        }
        enumTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.EnumType, com.flyteidl.core.EnumType.Builder, com.flyteidl.core.EnumTypeOrBuilder>(
                (com.flyteidl.core.EnumType) type_,
                getParentForChildren(),
                isClean());
        type_ = null;
      }
      typeCase_ = 7;
      onChanged();;
      return enumTypeBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.StructuredDatasetType, com.flyteidl.core.StructuredDatasetType.Builder, com.flyteidl.core.StructuredDatasetTypeOrBuilder> structuredDatasetTypeBuilder_;
    /**
     * <pre>
     * Generalized schema support
     * </pre>
     *
     * <code>.flyteidl.core.StructuredDatasetType structured_dataset_type = 8 [json_name = "structuredDatasetType"];</code>
     * @return Whether the structuredDatasetType field is set.
     */
    @java.lang.Override
    public boolean hasStructuredDatasetType() {
      return typeCase_ == 8;
    }
    /**
     * <pre>
     * Generalized schema support
     * </pre>
     *
     * <code>.flyteidl.core.StructuredDatasetType structured_dataset_type = 8 [json_name = "structuredDatasetType"];</code>
     * @return The structuredDatasetType.
     */
    @java.lang.Override
    public com.flyteidl.core.StructuredDatasetType getStructuredDatasetType() {
      if (structuredDatasetTypeBuilder_ == null) {
        if (typeCase_ == 8) {
          return (com.flyteidl.core.StructuredDatasetType) type_;
        }
        return com.flyteidl.core.StructuredDatasetType.getDefaultInstance();
      } else {
        if (typeCase_ == 8) {
          return structuredDatasetTypeBuilder_.getMessage();
        }
        return com.flyteidl.core.StructuredDatasetType.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Generalized schema support
     * </pre>
     *
     * <code>.flyteidl.core.StructuredDatasetType structured_dataset_type = 8 [json_name = "structuredDatasetType"];</code>
     */
    public Builder setStructuredDatasetType(com.flyteidl.core.StructuredDatasetType value) {
      if (structuredDatasetTypeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        type_ = value;
        onChanged();
      } else {
        structuredDatasetTypeBuilder_.setMessage(value);
      }
      typeCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * Generalized schema support
     * </pre>
     *
     * <code>.flyteidl.core.StructuredDatasetType structured_dataset_type = 8 [json_name = "structuredDatasetType"];</code>
     */
    public Builder setStructuredDatasetType(
        com.flyteidl.core.StructuredDatasetType.Builder builderForValue) {
      if (structuredDatasetTypeBuilder_ == null) {
        type_ = builderForValue.build();
        onChanged();
      } else {
        structuredDatasetTypeBuilder_.setMessage(builderForValue.build());
      }
      typeCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * Generalized schema support
     * </pre>
     *
     * <code>.flyteidl.core.StructuredDatasetType structured_dataset_type = 8 [json_name = "structuredDatasetType"];</code>
     */
    public Builder mergeStructuredDatasetType(com.flyteidl.core.StructuredDatasetType value) {
      if (structuredDatasetTypeBuilder_ == null) {
        if (typeCase_ == 8 &&
            type_ != com.flyteidl.core.StructuredDatasetType.getDefaultInstance()) {
          type_ = com.flyteidl.core.StructuredDatasetType.newBuilder((com.flyteidl.core.StructuredDatasetType) type_)
              .mergeFrom(value).buildPartial();
        } else {
          type_ = value;
        }
        onChanged();
      } else {
        if (typeCase_ == 8) {
          structuredDatasetTypeBuilder_.mergeFrom(value);
        }
        structuredDatasetTypeBuilder_.setMessage(value);
      }
      typeCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * Generalized schema support
     * </pre>
     *
     * <code>.flyteidl.core.StructuredDatasetType structured_dataset_type = 8 [json_name = "structuredDatasetType"];</code>
     */
    public Builder clearStructuredDatasetType() {
      if (structuredDatasetTypeBuilder_ == null) {
        if (typeCase_ == 8) {
          typeCase_ = 0;
          type_ = null;
          onChanged();
        }
      } else {
        if (typeCase_ == 8) {
          typeCase_ = 0;
          type_ = null;
        }
        structuredDatasetTypeBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Generalized schema support
     * </pre>
     *
     * <code>.flyteidl.core.StructuredDatasetType structured_dataset_type = 8 [json_name = "structuredDatasetType"];</code>
     */
    public com.flyteidl.core.StructuredDatasetType.Builder getStructuredDatasetTypeBuilder() {
      return getStructuredDatasetTypeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Generalized schema support
     * </pre>
     *
     * <code>.flyteidl.core.StructuredDatasetType structured_dataset_type = 8 [json_name = "structuredDatasetType"];</code>
     */
    @java.lang.Override
    public com.flyteidl.core.StructuredDatasetTypeOrBuilder getStructuredDatasetTypeOrBuilder() {
      if ((typeCase_ == 8) && (structuredDatasetTypeBuilder_ != null)) {
        return structuredDatasetTypeBuilder_.getMessageOrBuilder();
      } else {
        if (typeCase_ == 8) {
          return (com.flyteidl.core.StructuredDatasetType) type_;
        }
        return com.flyteidl.core.StructuredDatasetType.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Generalized schema support
     * </pre>
     *
     * <code>.flyteidl.core.StructuredDatasetType structured_dataset_type = 8 [json_name = "structuredDatasetType"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.StructuredDatasetType, com.flyteidl.core.StructuredDatasetType.Builder, com.flyteidl.core.StructuredDatasetTypeOrBuilder> 
        getStructuredDatasetTypeFieldBuilder() {
      if (structuredDatasetTypeBuilder_ == null) {
        if (!(typeCase_ == 8)) {
          type_ = com.flyteidl.core.StructuredDatasetType.getDefaultInstance();
        }
        structuredDatasetTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.StructuredDatasetType, com.flyteidl.core.StructuredDatasetType.Builder, com.flyteidl.core.StructuredDatasetTypeOrBuilder>(
                (com.flyteidl.core.StructuredDatasetType) type_,
                getParentForChildren(),
                isClean());
        type_ = null;
      }
      typeCase_ = 8;
      onChanged();;
      return structuredDatasetTypeBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.UnionType, com.flyteidl.core.UnionType.Builder, com.flyteidl.core.UnionTypeOrBuilder> unionTypeBuilder_;
    /**
     * <pre>
     * Defines an union type with pre-defined LiteralTypes.
     * </pre>
     *
     * <code>.flyteidl.core.UnionType union_type = 10 [json_name = "unionType"];</code>
     * @return Whether the unionType field is set.
     */
    @java.lang.Override
    public boolean hasUnionType() {
      return typeCase_ == 10;
    }
    /**
     * <pre>
     * Defines an union type with pre-defined LiteralTypes.
     * </pre>
     *
     * <code>.flyteidl.core.UnionType union_type = 10 [json_name = "unionType"];</code>
     * @return The unionType.
     */
    @java.lang.Override
    public com.flyteidl.core.UnionType getUnionType() {
      if (unionTypeBuilder_ == null) {
        if (typeCase_ == 10) {
          return (com.flyteidl.core.UnionType) type_;
        }
        return com.flyteidl.core.UnionType.getDefaultInstance();
      } else {
        if (typeCase_ == 10) {
          return unionTypeBuilder_.getMessage();
        }
        return com.flyteidl.core.UnionType.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Defines an union type with pre-defined LiteralTypes.
     * </pre>
     *
     * <code>.flyteidl.core.UnionType union_type = 10 [json_name = "unionType"];</code>
     */
    public Builder setUnionType(com.flyteidl.core.UnionType value) {
      if (unionTypeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        type_ = value;
        onChanged();
      } else {
        unionTypeBuilder_.setMessage(value);
      }
      typeCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * Defines an union type with pre-defined LiteralTypes.
     * </pre>
     *
     * <code>.flyteidl.core.UnionType union_type = 10 [json_name = "unionType"];</code>
     */
    public Builder setUnionType(
        com.flyteidl.core.UnionType.Builder builderForValue) {
      if (unionTypeBuilder_ == null) {
        type_ = builderForValue.build();
        onChanged();
      } else {
        unionTypeBuilder_.setMessage(builderForValue.build());
      }
      typeCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * Defines an union type with pre-defined LiteralTypes.
     * </pre>
     *
     * <code>.flyteidl.core.UnionType union_type = 10 [json_name = "unionType"];</code>
     */
    public Builder mergeUnionType(com.flyteidl.core.UnionType value) {
      if (unionTypeBuilder_ == null) {
        if (typeCase_ == 10 &&
            type_ != com.flyteidl.core.UnionType.getDefaultInstance()) {
          type_ = com.flyteidl.core.UnionType.newBuilder((com.flyteidl.core.UnionType) type_)
              .mergeFrom(value).buildPartial();
        } else {
          type_ = value;
        }
        onChanged();
      } else {
        if (typeCase_ == 10) {
          unionTypeBuilder_.mergeFrom(value);
        }
        unionTypeBuilder_.setMessage(value);
      }
      typeCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * Defines an union type with pre-defined LiteralTypes.
     * </pre>
     *
     * <code>.flyteidl.core.UnionType union_type = 10 [json_name = "unionType"];</code>
     */
    public Builder clearUnionType() {
      if (unionTypeBuilder_ == null) {
        if (typeCase_ == 10) {
          typeCase_ = 0;
          type_ = null;
          onChanged();
        }
      } else {
        if (typeCase_ == 10) {
          typeCase_ = 0;
          type_ = null;
        }
        unionTypeBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Defines an union type with pre-defined LiteralTypes.
     * </pre>
     *
     * <code>.flyteidl.core.UnionType union_type = 10 [json_name = "unionType"];</code>
     */
    public com.flyteidl.core.UnionType.Builder getUnionTypeBuilder() {
      return getUnionTypeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Defines an union type with pre-defined LiteralTypes.
     * </pre>
     *
     * <code>.flyteidl.core.UnionType union_type = 10 [json_name = "unionType"];</code>
     */
    @java.lang.Override
    public com.flyteidl.core.UnionTypeOrBuilder getUnionTypeOrBuilder() {
      if ((typeCase_ == 10) && (unionTypeBuilder_ != null)) {
        return unionTypeBuilder_.getMessageOrBuilder();
      } else {
        if (typeCase_ == 10) {
          return (com.flyteidl.core.UnionType) type_;
        }
        return com.flyteidl.core.UnionType.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Defines an union type with pre-defined LiteralTypes.
     * </pre>
     *
     * <code>.flyteidl.core.UnionType union_type = 10 [json_name = "unionType"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.UnionType, com.flyteidl.core.UnionType.Builder, com.flyteidl.core.UnionTypeOrBuilder> 
        getUnionTypeFieldBuilder() {
      if (unionTypeBuilder_ == null) {
        if (!(typeCase_ == 10)) {
          type_ = com.flyteidl.core.UnionType.getDefaultInstance();
        }
        unionTypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.UnionType, com.flyteidl.core.UnionType.Builder, com.flyteidl.core.UnionTypeOrBuilder>(
                (com.flyteidl.core.UnionType) type_,
                getParentForChildren(),
                isClean());
        type_ = null;
      }
      typeCase_ = 10;
      onChanged();;
      return unionTypeBuilder_;
    }

    private com.google.protobuf.Struct metadata_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Struct, com.google.protobuf.Struct.Builder, com.google.protobuf.StructOrBuilder> metadataBuilder_;
    /**
     * <pre>
     * This field contains type metadata that is descriptive of the type, but is NOT considered in type-checking.  This might be used by
     * consumers to identify special behavior or display extended information for the type.
     * </pre>
     *
     * <code>.google.protobuf.Struct metadata = 6 [json_name = "metadata"];</code>
     * @return Whether the metadata field is set.
     */
    public boolean hasMetadata() {
      return metadataBuilder_ != null || metadata_ != null;
    }
    /**
     * <pre>
     * This field contains type metadata that is descriptive of the type, but is NOT considered in type-checking.  This might be used by
     * consumers to identify special behavior or display extended information for the type.
     * </pre>
     *
     * <code>.google.protobuf.Struct metadata = 6 [json_name = "metadata"];</code>
     * @return The metadata.
     */
    public com.google.protobuf.Struct getMetadata() {
      if (metadataBuilder_ == null) {
        return metadata_ == null ? com.google.protobuf.Struct.getDefaultInstance() : metadata_;
      } else {
        return metadataBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * This field contains type metadata that is descriptive of the type, but is NOT considered in type-checking.  This might be used by
     * consumers to identify special behavior or display extended information for the type.
     * </pre>
     *
     * <code>.google.protobuf.Struct metadata = 6 [json_name = "metadata"];</code>
     */
    public Builder setMetadata(com.google.protobuf.Struct value) {
      if (metadataBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        metadata_ = value;
        onChanged();
      } else {
        metadataBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * This field contains type metadata that is descriptive of the type, but is NOT considered in type-checking.  This might be used by
     * consumers to identify special behavior or display extended information for the type.
     * </pre>
     *
     * <code>.google.protobuf.Struct metadata = 6 [json_name = "metadata"];</code>
     */
    public Builder setMetadata(
        com.google.protobuf.Struct.Builder builderForValue) {
      if (metadataBuilder_ == null) {
        metadata_ = builderForValue.build();
        onChanged();
      } else {
        metadataBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * This field contains type metadata that is descriptive of the type, but is NOT considered in type-checking.  This might be used by
     * consumers to identify special behavior or display extended information for the type.
     * </pre>
     *
     * <code>.google.protobuf.Struct metadata = 6 [json_name = "metadata"];</code>
     */
    public Builder mergeMetadata(com.google.protobuf.Struct value) {
      if (metadataBuilder_ == null) {
        if (metadata_ != null) {
          metadata_ =
            com.google.protobuf.Struct.newBuilder(metadata_).mergeFrom(value).buildPartial();
        } else {
          metadata_ = value;
        }
        onChanged();
      } else {
        metadataBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * This field contains type metadata that is descriptive of the type, but is NOT considered in type-checking.  This might be used by
     * consumers to identify special behavior or display extended information for the type.
     * </pre>
     *
     * <code>.google.protobuf.Struct metadata = 6 [json_name = "metadata"];</code>
     */
    public Builder clearMetadata() {
      if (metadataBuilder_ == null) {
        metadata_ = null;
        onChanged();
      } else {
        metadata_ = null;
        metadataBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * This field contains type metadata that is descriptive of the type, but is NOT considered in type-checking.  This might be used by
     * consumers to identify special behavior or display extended information for the type.
     * </pre>
     *
     * <code>.google.protobuf.Struct metadata = 6 [json_name = "metadata"];</code>
     */
    public com.google.protobuf.Struct.Builder getMetadataBuilder() {
      
      onChanged();
      return getMetadataFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * This field contains type metadata that is descriptive of the type, but is NOT considered in type-checking.  This might be used by
     * consumers to identify special behavior or display extended information for the type.
     * </pre>
     *
     * <code>.google.protobuf.Struct metadata = 6 [json_name = "metadata"];</code>
     */
    public com.google.protobuf.StructOrBuilder getMetadataOrBuilder() {
      if (metadataBuilder_ != null) {
        return metadataBuilder_.getMessageOrBuilder();
      } else {
        return metadata_ == null ?
            com.google.protobuf.Struct.getDefaultInstance() : metadata_;
      }
    }
    /**
     * <pre>
     * This field contains type metadata that is descriptive of the type, but is NOT considered in type-checking.  This might be used by
     * consumers to identify special behavior or display extended information for the type.
     * </pre>
     *
     * <code>.google.protobuf.Struct metadata = 6 [json_name = "metadata"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Struct, com.google.protobuf.Struct.Builder, com.google.protobuf.StructOrBuilder> 
        getMetadataFieldBuilder() {
      if (metadataBuilder_ == null) {
        metadataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Struct, com.google.protobuf.Struct.Builder, com.google.protobuf.StructOrBuilder>(
                getMetadata(),
                getParentForChildren(),
                isClean());
        metadata_ = null;
      }
      return metadataBuilder_;
    }

    private com.flyteidl.core.TypeAnnotation annotation_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.TypeAnnotation, com.flyteidl.core.TypeAnnotation.Builder, com.flyteidl.core.TypeAnnotationOrBuilder> annotationBuilder_;
    /**
     * <pre>
     * This field contains arbitrary data that might have special semantic
     * meaning for the client but does not effect internal flyte behavior.
     * </pre>
     *
     * <code>.flyteidl.core.TypeAnnotation annotation = 9 [json_name = "annotation"];</code>
     * @return Whether the annotation field is set.
     */
    public boolean hasAnnotation() {
      return annotationBuilder_ != null || annotation_ != null;
    }
    /**
     * <pre>
     * This field contains arbitrary data that might have special semantic
     * meaning for the client but does not effect internal flyte behavior.
     * </pre>
     *
     * <code>.flyteidl.core.TypeAnnotation annotation = 9 [json_name = "annotation"];</code>
     * @return The annotation.
     */
    public com.flyteidl.core.TypeAnnotation getAnnotation() {
      if (annotationBuilder_ == null) {
        return annotation_ == null ? com.flyteidl.core.TypeAnnotation.getDefaultInstance() : annotation_;
      } else {
        return annotationBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * This field contains arbitrary data that might have special semantic
     * meaning for the client but does not effect internal flyte behavior.
     * </pre>
     *
     * <code>.flyteidl.core.TypeAnnotation annotation = 9 [json_name = "annotation"];</code>
     */
    public Builder setAnnotation(com.flyteidl.core.TypeAnnotation value) {
      if (annotationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        annotation_ = value;
        onChanged();
      } else {
        annotationBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * This field contains arbitrary data that might have special semantic
     * meaning for the client but does not effect internal flyte behavior.
     * </pre>
     *
     * <code>.flyteidl.core.TypeAnnotation annotation = 9 [json_name = "annotation"];</code>
     */
    public Builder setAnnotation(
        com.flyteidl.core.TypeAnnotation.Builder builderForValue) {
      if (annotationBuilder_ == null) {
        annotation_ = builderForValue.build();
        onChanged();
      } else {
        annotationBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * This field contains arbitrary data that might have special semantic
     * meaning for the client but does not effect internal flyte behavior.
     * </pre>
     *
     * <code>.flyteidl.core.TypeAnnotation annotation = 9 [json_name = "annotation"];</code>
     */
    public Builder mergeAnnotation(com.flyteidl.core.TypeAnnotation value) {
      if (annotationBuilder_ == null) {
        if (annotation_ != null) {
          annotation_ =
            com.flyteidl.core.TypeAnnotation.newBuilder(annotation_).mergeFrom(value).buildPartial();
        } else {
          annotation_ = value;
        }
        onChanged();
      } else {
        annotationBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * This field contains arbitrary data that might have special semantic
     * meaning for the client but does not effect internal flyte behavior.
     * </pre>
     *
     * <code>.flyteidl.core.TypeAnnotation annotation = 9 [json_name = "annotation"];</code>
     */
    public Builder clearAnnotation() {
      if (annotationBuilder_ == null) {
        annotation_ = null;
        onChanged();
      } else {
        annotation_ = null;
        annotationBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * This field contains arbitrary data that might have special semantic
     * meaning for the client but does not effect internal flyte behavior.
     * </pre>
     *
     * <code>.flyteidl.core.TypeAnnotation annotation = 9 [json_name = "annotation"];</code>
     */
    public com.flyteidl.core.TypeAnnotation.Builder getAnnotationBuilder() {
      
      onChanged();
      return getAnnotationFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * This field contains arbitrary data that might have special semantic
     * meaning for the client but does not effect internal flyte behavior.
     * </pre>
     *
     * <code>.flyteidl.core.TypeAnnotation annotation = 9 [json_name = "annotation"];</code>
     */
    public com.flyteidl.core.TypeAnnotationOrBuilder getAnnotationOrBuilder() {
      if (annotationBuilder_ != null) {
        return annotationBuilder_.getMessageOrBuilder();
      } else {
        return annotation_ == null ?
            com.flyteidl.core.TypeAnnotation.getDefaultInstance() : annotation_;
      }
    }
    /**
     * <pre>
     * This field contains arbitrary data that might have special semantic
     * meaning for the client but does not effect internal flyte behavior.
     * </pre>
     *
     * <code>.flyteidl.core.TypeAnnotation annotation = 9 [json_name = "annotation"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.TypeAnnotation, com.flyteidl.core.TypeAnnotation.Builder, com.flyteidl.core.TypeAnnotationOrBuilder> 
        getAnnotationFieldBuilder() {
      if (annotationBuilder_ == null) {
        annotationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.TypeAnnotation, com.flyteidl.core.TypeAnnotation.Builder, com.flyteidl.core.TypeAnnotationOrBuilder>(
                getAnnotation(),
                getParentForChildren(),
                isClean());
        annotation_ = null;
      }
      return annotationBuilder_;
    }

    private com.flyteidl.core.TypeStructure structure_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.TypeStructure, com.flyteidl.core.TypeStructure.Builder, com.flyteidl.core.TypeStructureOrBuilder> structureBuilder_;
    /**
     * <pre>
     * Hints to improve type matching.
     * </pre>
     *
     * <code>.flyteidl.core.TypeStructure structure = 11 [json_name = "structure"];</code>
     * @return Whether the structure field is set.
     */
    public boolean hasStructure() {
      return structureBuilder_ != null || structure_ != null;
    }
    /**
     * <pre>
     * Hints to improve type matching.
     * </pre>
     *
     * <code>.flyteidl.core.TypeStructure structure = 11 [json_name = "structure"];</code>
     * @return The structure.
     */
    public com.flyteidl.core.TypeStructure getStructure() {
      if (structureBuilder_ == null) {
        return structure_ == null ? com.flyteidl.core.TypeStructure.getDefaultInstance() : structure_;
      } else {
        return structureBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Hints to improve type matching.
     * </pre>
     *
     * <code>.flyteidl.core.TypeStructure structure = 11 [json_name = "structure"];</code>
     */
    public Builder setStructure(com.flyteidl.core.TypeStructure value) {
      if (structureBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        structure_ = value;
        onChanged();
      } else {
        structureBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Hints to improve type matching.
     * </pre>
     *
     * <code>.flyteidl.core.TypeStructure structure = 11 [json_name = "structure"];</code>
     */
    public Builder setStructure(
        com.flyteidl.core.TypeStructure.Builder builderForValue) {
      if (structureBuilder_ == null) {
        structure_ = builderForValue.build();
        onChanged();
      } else {
        structureBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Hints to improve type matching.
     * </pre>
     *
     * <code>.flyteidl.core.TypeStructure structure = 11 [json_name = "structure"];</code>
     */
    public Builder mergeStructure(com.flyteidl.core.TypeStructure value) {
      if (structureBuilder_ == null) {
        if (structure_ != null) {
          structure_ =
            com.flyteidl.core.TypeStructure.newBuilder(structure_).mergeFrom(value).buildPartial();
        } else {
          structure_ = value;
        }
        onChanged();
      } else {
        structureBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Hints to improve type matching.
     * </pre>
     *
     * <code>.flyteidl.core.TypeStructure structure = 11 [json_name = "structure"];</code>
     */
    public Builder clearStructure() {
      if (structureBuilder_ == null) {
        structure_ = null;
        onChanged();
      } else {
        structure_ = null;
        structureBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Hints to improve type matching.
     * </pre>
     *
     * <code>.flyteidl.core.TypeStructure structure = 11 [json_name = "structure"];</code>
     */
    public com.flyteidl.core.TypeStructure.Builder getStructureBuilder() {
      
      onChanged();
      return getStructureFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Hints to improve type matching.
     * </pre>
     *
     * <code>.flyteidl.core.TypeStructure structure = 11 [json_name = "structure"];</code>
     */
    public com.flyteidl.core.TypeStructureOrBuilder getStructureOrBuilder() {
      if (structureBuilder_ != null) {
        return structureBuilder_.getMessageOrBuilder();
      } else {
        return structure_ == null ?
            com.flyteidl.core.TypeStructure.getDefaultInstance() : structure_;
      }
    }
    /**
     * <pre>
     * Hints to improve type matching.
     * </pre>
     *
     * <code>.flyteidl.core.TypeStructure structure = 11 [json_name = "structure"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.TypeStructure, com.flyteidl.core.TypeStructure.Builder, com.flyteidl.core.TypeStructureOrBuilder> 
        getStructureFieldBuilder() {
      if (structureBuilder_ == null) {
        structureBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.TypeStructure, com.flyteidl.core.TypeStructure.Builder, com.flyteidl.core.TypeStructureOrBuilder>(
                getStructure(),
                getParentForChildren(),
                isClean());
        structure_ = null;
      }
      return structureBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:flyteidl.core.LiteralType)
  }

  // @@protoc_insertion_point(class_scope:flyteidl.core.LiteralType)
  private static final com.flyteidl.core.LiteralType DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.flyteidl.core.LiteralType();
  }

  public static com.flyteidl.core.LiteralType getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<LiteralType>
      PARSER = new com.google.protobuf.AbstractParser<LiteralType>() {
    @java.lang.Override
    public LiteralType parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new LiteralType(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<LiteralType> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<LiteralType> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.flyteidl.core.LiteralType getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

