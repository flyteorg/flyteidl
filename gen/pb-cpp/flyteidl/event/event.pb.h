// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/event/event.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fevent_2fevent_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fevent_2fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/literals.pb.h"
#include "flyteidl/core/compiler.pb.h"
#include "flyteidl/core/execution.pb.h"
#include "flyteidl/core/identifier.pb.h"
#include "flyteidl/core/catalog.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fevent_2fevent_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fevent_2fevent_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fevent_2fevent_2eproto();
namespace flyteidl {
namespace event {
class DynamicWorkflowNodeMetadata;
class DynamicWorkflowNodeMetadataDefaultTypeInternal;
extern DynamicWorkflowNodeMetadataDefaultTypeInternal _DynamicWorkflowNodeMetadata_default_instance_;
class ExternalResourceInfo;
class ExternalResourceInfoDefaultTypeInternal;
extern ExternalResourceInfoDefaultTypeInternal _ExternalResourceInfo_default_instance_;
class NodeExecutionEvent;
class NodeExecutionEventDefaultTypeInternal;
extern NodeExecutionEventDefaultTypeInternal _NodeExecutionEvent_default_instance_;
class ParentNodeExecutionMetadata;
class ParentNodeExecutionMetadataDefaultTypeInternal;
extern ParentNodeExecutionMetadataDefaultTypeInternal _ParentNodeExecutionMetadata_default_instance_;
class ParentTaskExecutionMetadata;
class ParentTaskExecutionMetadataDefaultTypeInternal;
extern ParentTaskExecutionMetadataDefaultTypeInternal _ParentTaskExecutionMetadata_default_instance_;
class ResourcePoolInfo;
class ResourcePoolInfoDefaultTypeInternal;
extern ResourcePoolInfoDefaultTypeInternal _ResourcePoolInfo_default_instance_;
class TaskExecutionEvent;
class TaskExecutionEventDefaultTypeInternal;
extern TaskExecutionEventDefaultTypeInternal _TaskExecutionEvent_default_instance_;
class TaskExecutionMetadata;
class TaskExecutionMetadataDefaultTypeInternal;
extern TaskExecutionMetadataDefaultTypeInternal _TaskExecutionMetadata_default_instance_;
class TaskNodeMetadata;
class TaskNodeMetadataDefaultTypeInternal;
extern TaskNodeMetadataDefaultTypeInternal _TaskNodeMetadata_default_instance_;
class WorkflowExecutionEvent;
class WorkflowExecutionEventDefaultTypeInternal;
extern WorkflowExecutionEventDefaultTypeInternal _WorkflowExecutionEvent_default_instance_;
class WorkflowNodeMetadata;
class WorkflowNodeMetadataDefaultTypeInternal;
extern WorkflowNodeMetadataDefaultTypeInternal _WorkflowNodeMetadata_default_instance_;
}  // namespace event
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::event::DynamicWorkflowNodeMetadata* Arena::CreateMaybeMessage<::flyteidl::event::DynamicWorkflowNodeMetadata>(Arena*);
template<> ::flyteidl::event::ExternalResourceInfo* Arena::CreateMaybeMessage<::flyteidl::event::ExternalResourceInfo>(Arena*);
template<> ::flyteidl::event::NodeExecutionEvent* Arena::CreateMaybeMessage<::flyteidl::event::NodeExecutionEvent>(Arena*);
template<> ::flyteidl::event::ParentNodeExecutionMetadata* Arena::CreateMaybeMessage<::flyteidl::event::ParentNodeExecutionMetadata>(Arena*);
template<> ::flyteidl::event::ParentTaskExecutionMetadata* Arena::CreateMaybeMessage<::flyteidl::event::ParentTaskExecutionMetadata>(Arena*);
template<> ::flyteidl::event::ResourcePoolInfo* Arena::CreateMaybeMessage<::flyteidl::event::ResourcePoolInfo>(Arena*);
template<> ::flyteidl::event::TaskExecutionEvent* Arena::CreateMaybeMessage<::flyteidl::event::TaskExecutionEvent>(Arena*);
template<> ::flyteidl::event::TaskExecutionMetadata* Arena::CreateMaybeMessage<::flyteidl::event::TaskExecutionMetadata>(Arena*);
template<> ::flyteidl::event::TaskNodeMetadata* Arena::CreateMaybeMessage<::flyteidl::event::TaskNodeMetadata>(Arena*);
template<> ::flyteidl::event::WorkflowExecutionEvent* Arena::CreateMaybeMessage<::flyteidl::event::WorkflowExecutionEvent>(Arena*);
template<> ::flyteidl::event::WorkflowNodeMetadata* Arena::CreateMaybeMessage<::flyteidl::event::WorkflowNodeMetadata>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace event {

enum TaskExecutionMetadata_InstanceClass {
  TaskExecutionMetadata_InstanceClass_DEFAULT = 0,
  TaskExecutionMetadata_InstanceClass_INTERRUPTIBLE = 1,
  TaskExecutionMetadata_InstanceClass_TaskExecutionMetadata_InstanceClass_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  TaskExecutionMetadata_InstanceClass_TaskExecutionMetadata_InstanceClass_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool TaskExecutionMetadata_InstanceClass_IsValid(int value);
const TaskExecutionMetadata_InstanceClass TaskExecutionMetadata_InstanceClass_InstanceClass_MIN = TaskExecutionMetadata_InstanceClass_DEFAULT;
const TaskExecutionMetadata_InstanceClass TaskExecutionMetadata_InstanceClass_InstanceClass_MAX = TaskExecutionMetadata_InstanceClass_INTERRUPTIBLE;
const int TaskExecutionMetadata_InstanceClass_InstanceClass_ARRAYSIZE = TaskExecutionMetadata_InstanceClass_InstanceClass_MAX + 1;

const ::google::protobuf::EnumDescriptor* TaskExecutionMetadata_InstanceClass_descriptor();
inline const ::std::string& TaskExecutionMetadata_InstanceClass_Name(TaskExecutionMetadata_InstanceClass value) {
  return ::google::protobuf::internal::NameOfEnum(
    TaskExecutionMetadata_InstanceClass_descriptor(), value);
}
inline bool TaskExecutionMetadata_InstanceClass_Parse(
    const ::std::string& name, TaskExecutionMetadata_InstanceClass* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskExecutionMetadata_InstanceClass>(
    TaskExecutionMetadata_InstanceClass_descriptor(), name, value);
}
// ===================================================================

class WorkflowExecutionEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.WorkflowExecutionEvent) */ {
 public:
  WorkflowExecutionEvent();
  virtual ~WorkflowExecutionEvent();

  WorkflowExecutionEvent(const WorkflowExecutionEvent& from);

  inline WorkflowExecutionEvent& operator=(const WorkflowExecutionEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowExecutionEvent(WorkflowExecutionEvent&& from) noexcept
    : WorkflowExecutionEvent() {
    *this = ::std::move(from);
  }

  inline WorkflowExecutionEvent& operator=(WorkflowExecutionEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WorkflowExecutionEvent& default_instance();

  enum OutputResultCase {
    kOutputUri = 5,
    kError = 6,
    kOutputData = 7,
    OUTPUT_RESULT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowExecutionEvent* internal_default_instance() {
    return reinterpret_cast<const WorkflowExecutionEvent*>(
               &_WorkflowExecutionEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(WorkflowExecutionEvent* other);
  friend void swap(WorkflowExecutionEvent& a, WorkflowExecutionEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowExecutionEvent* New() const final {
    return CreateMaybeMessage<WorkflowExecutionEvent>(nullptr);
  }

  WorkflowExecutionEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowExecutionEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WorkflowExecutionEvent& from);
  void MergeFrom(const WorkflowExecutionEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowExecutionEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string producer_id = 2;
  void clear_producer_id();
  static const int kProducerIdFieldNumber = 2;
  const ::std::string& producer_id() const;
  void set_producer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_producer_id(::std::string&& value);
  #endif
  void set_producer_id(const char* value);
  void set_producer_id(const char* value, size_t size);
  ::std::string* mutable_producer_id();
  ::std::string* release_producer_id();
  void set_allocated_producer_id(::std::string* producer_id);

  // .flyteidl.core.WorkflowExecutionIdentifier execution_id = 1;
  bool has_execution_id() const;
  void clear_execution_id();
  static const int kExecutionIdFieldNumber = 1;
  const ::flyteidl::core::WorkflowExecutionIdentifier& execution_id() const;
  ::flyteidl::core::WorkflowExecutionIdentifier* release_execution_id();
  ::flyteidl::core::WorkflowExecutionIdentifier* mutable_execution_id();
  void set_allocated_execution_id(::flyteidl::core::WorkflowExecutionIdentifier* execution_id);

  // .google.protobuf.Timestamp occurred_at = 4;
  bool has_occurred_at() const;
  void clear_occurred_at();
  static const int kOccurredAtFieldNumber = 4;
  const ::google::protobuf::Timestamp& occurred_at() const;
  ::google::protobuf::Timestamp* release_occurred_at();
  ::google::protobuf::Timestamp* mutable_occurred_at();
  void set_allocated_occurred_at(::google::protobuf::Timestamp* occurred_at);

  // .flyteidl.core.WorkflowExecution.Phase phase = 3;
  void clear_phase();
  static const int kPhaseFieldNumber = 3;
  ::flyteidl::core::WorkflowExecution_Phase phase() const;
  void set_phase(::flyteidl::core::WorkflowExecution_Phase value);

  // string output_uri = 5;
  private:
  bool has_output_uri() const;
  public:
  void clear_output_uri();
  static const int kOutputUriFieldNumber = 5;
  const ::std::string& output_uri() const;
  void set_output_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_output_uri(::std::string&& value);
  #endif
  void set_output_uri(const char* value);
  void set_output_uri(const char* value, size_t size);
  ::std::string* mutable_output_uri();
  ::std::string* release_output_uri();
  void set_allocated_output_uri(::std::string* output_uri);

  // .flyteidl.core.ExecutionError error = 6;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 6;
  const ::flyteidl::core::ExecutionError& error() const;
  ::flyteidl::core::ExecutionError* release_error();
  ::flyteidl::core::ExecutionError* mutable_error();
  void set_allocated_error(::flyteidl::core::ExecutionError* error);

  // .flyteidl.core.LiteralMap output_data = 7;
  bool has_output_data() const;
  void clear_output_data();
  static const int kOutputDataFieldNumber = 7;
  const ::flyteidl::core::LiteralMap& output_data() const;
  ::flyteidl::core::LiteralMap* release_output_data();
  ::flyteidl::core::LiteralMap* mutable_output_data();
  void set_allocated_output_data(::flyteidl::core::LiteralMap* output_data);

  void clear_output_result();
  OutputResultCase output_result_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.event.WorkflowExecutionEvent)
 private:
  class HasBitSetters;
  void set_has_output_uri();
  void set_has_error();
  void set_has_output_data();

  inline bool has_output_result() const;
  inline void clear_has_output_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr producer_id_;
  ::flyteidl::core::WorkflowExecutionIdentifier* execution_id_;
  ::google::protobuf::Timestamp* occurred_at_;
  int phase_;
  union OutputResultUnion {
    OutputResultUnion() {}
    ::google::protobuf::internal::ArenaStringPtr output_uri_;
    ::flyteidl::core::ExecutionError* error_;
    ::flyteidl::core::LiteralMap* output_data_;
  } output_result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class NodeExecutionEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.NodeExecutionEvent) */ {
 public:
  NodeExecutionEvent();
  virtual ~NodeExecutionEvent();

  NodeExecutionEvent(const NodeExecutionEvent& from);

  inline NodeExecutionEvent& operator=(const NodeExecutionEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeExecutionEvent(NodeExecutionEvent&& from) noexcept
    : NodeExecutionEvent() {
    *this = ::std::move(from);
  }

  inline NodeExecutionEvent& operator=(NodeExecutionEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeExecutionEvent& default_instance();

  enum InputValueCase {
    kInputUri = 5,
    kInputData = 20,
    INPUT_VALUE_NOT_SET = 0,
  };

  enum OutputResultCase {
    kOutputUri = 6,
    kError = 7,
    kOutputData = 15,
    OUTPUT_RESULT_NOT_SET = 0,
  };

  enum TargetMetadataCase {
    kWorkflowNodeMetadata = 8,
    kTaskNodeMetadata = 14,
    TARGET_METADATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeExecutionEvent* internal_default_instance() {
    return reinterpret_cast<const NodeExecutionEvent*>(
               &_NodeExecutionEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(NodeExecutionEvent* other);
  friend void swap(NodeExecutionEvent& a, NodeExecutionEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeExecutionEvent* New() const final {
    return CreateMaybeMessage<NodeExecutionEvent>(nullptr);
  }

  NodeExecutionEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeExecutionEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeExecutionEvent& from);
  void MergeFrom(const NodeExecutionEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeExecutionEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string producer_id = 2;
  void clear_producer_id();
  static const int kProducerIdFieldNumber = 2;
  const ::std::string& producer_id() const;
  void set_producer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_producer_id(::std::string&& value);
  #endif
  void set_producer_id(const char* value);
  void set_producer_id(const char* value, size_t size);
  ::std::string* mutable_producer_id();
  ::std::string* release_producer_id();
  void set_allocated_producer_id(::std::string* producer_id);

  // string retry_group = 11;
  void clear_retry_group();
  static const int kRetryGroupFieldNumber = 11;
  const ::std::string& retry_group() const;
  void set_retry_group(const ::std::string& value);
  #if LANG_CXX11
  void set_retry_group(::std::string&& value);
  #endif
  void set_retry_group(const char* value);
  void set_retry_group(const char* value, size_t size);
  ::std::string* mutable_retry_group();
  ::std::string* release_retry_group();
  void set_allocated_retry_group(::std::string* retry_group);

  // string spec_node_id = 12;
  void clear_spec_node_id();
  static const int kSpecNodeIdFieldNumber = 12;
  const ::std::string& spec_node_id() const;
  void set_spec_node_id(const ::std::string& value);
  #if LANG_CXX11
  void set_spec_node_id(::std::string&& value);
  #endif
  void set_spec_node_id(const char* value);
  void set_spec_node_id(const char* value, size_t size);
  ::std::string* mutable_spec_node_id();
  ::std::string* release_spec_node_id();
  void set_allocated_spec_node_id(::std::string* spec_node_id);

  // string node_name = 13;
  void clear_node_name();
  static const int kNodeNameFieldNumber = 13;
  const ::std::string& node_name() const;
  void set_node_name(const ::std::string& value);
  #if LANG_CXX11
  void set_node_name(::std::string&& value);
  #endif
  void set_node_name(const char* value);
  void set_node_name(const char* value, size_t size);
  ::std::string* mutable_node_name();
  ::std::string* release_node_name();
  void set_allocated_node_name(::std::string* node_name);

  // string deck_uri = 19;
  void clear_deck_uri();
  static const int kDeckUriFieldNumber = 19;
  const ::std::string& deck_uri() const;
  void set_deck_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_deck_uri(::std::string&& value);
  #endif
  void set_deck_uri(const char* value);
  void set_deck_uri(const char* value, size_t size);
  ::std::string* mutable_deck_uri();
  ::std::string* release_deck_uri();
  void set_allocated_deck_uri(::std::string* deck_uri);

  // .flyteidl.core.NodeExecutionIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::NodeExecutionIdentifier& id() const;
  ::flyteidl::core::NodeExecutionIdentifier* release_id();
  ::flyteidl::core::NodeExecutionIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::core::NodeExecutionIdentifier* id);

  // .google.protobuf.Timestamp occurred_at = 4;
  bool has_occurred_at() const;
  void clear_occurred_at();
  static const int kOccurredAtFieldNumber = 4;
  const ::google::protobuf::Timestamp& occurred_at() const;
  ::google::protobuf::Timestamp* release_occurred_at();
  ::google::protobuf::Timestamp* mutable_occurred_at();
  void set_allocated_occurred_at(::google::protobuf::Timestamp* occurred_at);

  // .flyteidl.event.ParentTaskExecutionMetadata parent_task_metadata = 9;
  bool has_parent_task_metadata() const;
  void clear_parent_task_metadata();
  static const int kParentTaskMetadataFieldNumber = 9;
  const ::flyteidl::event::ParentTaskExecutionMetadata& parent_task_metadata() const;
  ::flyteidl::event::ParentTaskExecutionMetadata* release_parent_task_metadata();
  ::flyteidl::event::ParentTaskExecutionMetadata* mutable_parent_task_metadata();
  void set_allocated_parent_task_metadata(::flyteidl::event::ParentTaskExecutionMetadata* parent_task_metadata);

  // .flyteidl.event.ParentNodeExecutionMetadata parent_node_metadata = 10;
  bool has_parent_node_metadata() const;
  void clear_parent_node_metadata();
  static const int kParentNodeMetadataFieldNumber = 10;
  const ::flyteidl::event::ParentNodeExecutionMetadata& parent_node_metadata() const;
  ::flyteidl::event::ParentNodeExecutionMetadata* release_parent_node_metadata();
  ::flyteidl::event::ParentNodeExecutionMetadata* mutable_parent_node_metadata();
  void set_allocated_parent_node_metadata(::flyteidl::event::ParentNodeExecutionMetadata* parent_node_metadata);

  // .google.protobuf.Timestamp reported_at = 21;
  bool has_reported_at() const;
  void clear_reported_at();
  static const int kReportedAtFieldNumber = 21;
  const ::google::protobuf::Timestamp& reported_at() const;
  ::google::protobuf::Timestamp* release_reported_at();
  ::google::protobuf::Timestamp* mutable_reported_at();
  void set_allocated_reported_at(::google::protobuf::Timestamp* reported_at);

  // .flyteidl.core.NodeExecution.Phase phase = 3;
  void clear_phase();
  static const int kPhaseFieldNumber = 3;
  ::flyteidl::core::NodeExecution_Phase phase() const;
  void set_phase(::flyteidl::core::NodeExecution_Phase value);

  // int32 event_version = 16;
  void clear_event_version();
  static const int kEventVersionFieldNumber = 16;
  ::google::protobuf::int32 event_version() const;
  void set_event_version(::google::protobuf::int32 value);

  // bool is_parent = 17;
  void clear_is_parent();
  static const int kIsParentFieldNumber = 17;
  bool is_parent() const;
  void set_is_parent(bool value);

  // bool is_dynamic = 18;
  void clear_is_dynamic();
  static const int kIsDynamicFieldNumber = 18;
  bool is_dynamic() const;
  void set_is_dynamic(bool value);

  // string input_uri = 5;
  private:
  bool has_input_uri() const;
  public:
  void clear_input_uri();
  static const int kInputUriFieldNumber = 5;
  const ::std::string& input_uri() const;
  void set_input_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_input_uri(::std::string&& value);
  #endif
  void set_input_uri(const char* value);
  void set_input_uri(const char* value, size_t size);
  ::std::string* mutable_input_uri();
  ::std::string* release_input_uri();
  void set_allocated_input_uri(::std::string* input_uri);

  // .flyteidl.core.LiteralMap input_data = 20;
  bool has_input_data() const;
  void clear_input_data();
  static const int kInputDataFieldNumber = 20;
  const ::flyteidl::core::LiteralMap& input_data() const;
  ::flyteidl::core::LiteralMap* release_input_data();
  ::flyteidl::core::LiteralMap* mutable_input_data();
  void set_allocated_input_data(::flyteidl::core::LiteralMap* input_data);

  // string output_uri = 6;
  private:
  bool has_output_uri() const;
  public:
  void clear_output_uri();
  static const int kOutputUriFieldNumber = 6;
  const ::std::string& output_uri() const;
  void set_output_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_output_uri(::std::string&& value);
  #endif
  void set_output_uri(const char* value);
  void set_output_uri(const char* value, size_t size);
  ::std::string* mutable_output_uri();
  ::std::string* release_output_uri();
  void set_allocated_output_uri(::std::string* output_uri);

  // .flyteidl.core.ExecutionError error = 7;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 7;
  const ::flyteidl::core::ExecutionError& error() const;
  ::flyteidl::core::ExecutionError* release_error();
  ::flyteidl::core::ExecutionError* mutable_error();
  void set_allocated_error(::flyteidl::core::ExecutionError* error);

  // .flyteidl.core.LiteralMap output_data = 15;
  bool has_output_data() const;
  void clear_output_data();
  static const int kOutputDataFieldNumber = 15;
  const ::flyteidl::core::LiteralMap& output_data() const;
  ::flyteidl::core::LiteralMap* release_output_data();
  ::flyteidl::core::LiteralMap* mutable_output_data();
  void set_allocated_output_data(::flyteidl::core::LiteralMap* output_data);

  // .flyteidl.event.WorkflowNodeMetadata workflow_node_metadata = 8;
  bool has_workflow_node_metadata() const;
  void clear_workflow_node_metadata();
  static const int kWorkflowNodeMetadataFieldNumber = 8;
  const ::flyteidl::event::WorkflowNodeMetadata& workflow_node_metadata() const;
  ::flyteidl::event::WorkflowNodeMetadata* release_workflow_node_metadata();
  ::flyteidl::event::WorkflowNodeMetadata* mutable_workflow_node_metadata();
  void set_allocated_workflow_node_metadata(::flyteidl::event::WorkflowNodeMetadata* workflow_node_metadata);

  // .flyteidl.event.TaskNodeMetadata task_node_metadata = 14;
  bool has_task_node_metadata() const;
  void clear_task_node_metadata();
  static const int kTaskNodeMetadataFieldNumber = 14;
  const ::flyteidl::event::TaskNodeMetadata& task_node_metadata() const;
  ::flyteidl::event::TaskNodeMetadata* release_task_node_metadata();
  ::flyteidl::event::TaskNodeMetadata* mutable_task_node_metadata();
  void set_allocated_task_node_metadata(::flyteidl::event::TaskNodeMetadata* task_node_metadata);

  void clear_input_value();
  InputValueCase input_value_case() const;
  void clear_output_result();
  OutputResultCase output_result_case() const;
  void clear_target_metadata();
  TargetMetadataCase target_metadata_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.event.NodeExecutionEvent)
 private:
  class HasBitSetters;
  void set_has_input_uri();
  void set_has_input_data();
  void set_has_output_uri();
  void set_has_error();
  void set_has_output_data();
  void set_has_workflow_node_metadata();
  void set_has_task_node_metadata();

  inline bool has_input_value() const;
  inline void clear_has_input_value();

  inline bool has_output_result() const;
  inline void clear_has_output_result();

  inline bool has_target_metadata() const;
  inline void clear_has_target_metadata();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr producer_id_;
  ::google::protobuf::internal::ArenaStringPtr retry_group_;
  ::google::protobuf::internal::ArenaStringPtr spec_node_id_;
  ::google::protobuf::internal::ArenaStringPtr node_name_;
  ::google::protobuf::internal::ArenaStringPtr deck_uri_;
  ::flyteidl::core::NodeExecutionIdentifier* id_;
  ::google::protobuf::Timestamp* occurred_at_;
  ::flyteidl::event::ParentTaskExecutionMetadata* parent_task_metadata_;
  ::flyteidl::event::ParentNodeExecutionMetadata* parent_node_metadata_;
  ::google::protobuf::Timestamp* reported_at_;
  int phase_;
  ::google::protobuf::int32 event_version_;
  bool is_parent_;
  bool is_dynamic_;
  union InputValueUnion {
    InputValueUnion() {}
    ::google::protobuf::internal::ArenaStringPtr input_uri_;
    ::flyteidl::core::LiteralMap* input_data_;
  } input_value_;
  union OutputResultUnion {
    OutputResultUnion() {}
    ::google::protobuf::internal::ArenaStringPtr output_uri_;
    ::flyteidl::core::ExecutionError* error_;
    ::flyteidl::core::LiteralMap* output_data_;
  } output_result_;
  union TargetMetadataUnion {
    TargetMetadataUnion() {}
    ::flyteidl::event::WorkflowNodeMetadata* workflow_node_metadata_;
    ::flyteidl::event::TaskNodeMetadata* task_node_metadata_;
  } target_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[3];

  friend struct ::TableStruct_flyteidl_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class WorkflowNodeMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.WorkflowNodeMetadata) */ {
 public:
  WorkflowNodeMetadata();
  virtual ~WorkflowNodeMetadata();

  WorkflowNodeMetadata(const WorkflowNodeMetadata& from);

  inline WorkflowNodeMetadata& operator=(const WorkflowNodeMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowNodeMetadata(WorkflowNodeMetadata&& from) noexcept
    : WorkflowNodeMetadata() {
    *this = ::std::move(from);
  }

  inline WorkflowNodeMetadata& operator=(WorkflowNodeMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WorkflowNodeMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowNodeMetadata* internal_default_instance() {
    return reinterpret_cast<const WorkflowNodeMetadata*>(
               &_WorkflowNodeMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(WorkflowNodeMetadata* other);
  friend void swap(WorkflowNodeMetadata& a, WorkflowNodeMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowNodeMetadata* New() const final {
    return CreateMaybeMessage<WorkflowNodeMetadata>(nullptr);
  }

  WorkflowNodeMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowNodeMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WorkflowNodeMetadata& from);
  void MergeFrom(const WorkflowNodeMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowNodeMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.WorkflowExecutionIdentifier execution_id = 1;
  bool has_execution_id() const;
  void clear_execution_id();
  static const int kExecutionIdFieldNumber = 1;
  const ::flyteidl::core::WorkflowExecutionIdentifier& execution_id() const;
  ::flyteidl::core::WorkflowExecutionIdentifier* release_execution_id();
  ::flyteidl::core::WorkflowExecutionIdentifier* mutable_execution_id();
  void set_allocated_execution_id(::flyteidl::core::WorkflowExecutionIdentifier* execution_id);

  // @@protoc_insertion_point(class_scope:flyteidl.event.WorkflowNodeMetadata)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::WorkflowExecutionIdentifier* execution_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class TaskNodeMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.TaskNodeMetadata) */ {
 public:
  TaskNodeMetadata();
  virtual ~TaskNodeMetadata();

  TaskNodeMetadata(const TaskNodeMetadata& from);

  inline TaskNodeMetadata& operator=(const TaskNodeMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskNodeMetadata(TaskNodeMetadata&& from) noexcept
    : TaskNodeMetadata() {
    *this = ::std::move(from);
  }

  inline TaskNodeMetadata& operator=(TaskNodeMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskNodeMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskNodeMetadata* internal_default_instance() {
    return reinterpret_cast<const TaskNodeMetadata*>(
               &_TaskNodeMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TaskNodeMetadata* other);
  friend void swap(TaskNodeMetadata& a, TaskNodeMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskNodeMetadata* New() const final {
    return CreateMaybeMessage<TaskNodeMetadata>(nullptr);
  }

  TaskNodeMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskNodeMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskNodeMetadata& from);
  void MergeFrom(const TaskNodeMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskNodeMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string checkpoint_uri = 4;
  void clear_checkpoint_uri();
  static const int kCheckpointUriFieldNumber = 4;
  const ::std::string& checkpoint_uri() const;
  void set_checkpoint_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_checkpoint_uri(::std::string&& value);
  #endif
  void set_checkpoint_uri(const char* value);
  void set_checkpoint_uri(const char* value, size_t size);
  ::std::string* mutable_checkpoint_uri();
  ::std::string* release_checkpoint_uri();
  void set_allocated_checkpoint_uri(::std::string* checkpoint_uri);

  // .flyteidl.core.CatalogMetadata catalog_key = 2;
  bool has_catalog_key() const;
  void clear_catalog_key();
  static const int kCatalogKeyFieldNumber = 2;
  const ::flyteidl::core::CatalogMetadata& catalog_key() const;
  ::flyteidl::core::CatalogMetadata* release_catalog_key();
  ::flyteidl::core::CatalogMetadata* mutable_catalog_key();
  void set_allocated_catalog_key(::flyteidl::core::CatalogMetadata* catalog_key);

  // .flyteidl.event.DynamicWorkflowNodeMetadata dynamic_workflow = 16;
  bool has_dynamic_workflow() const;
  void clear_dynamic_workflow();
  static const int kDynamicWorkflowFieldNumber = 16;
  const ::flyteidl::event::DynamicWorkflowNodeMetadata& dynamic_workflow() const;
  ::flyteidl::event::DynamicWorkflowNodeMetadata* release_dynamic_workflow();
  ::flyteidl::event::DynamicWorkflowNodeMetadata* mutable_dynamic_workflow();
  void set_allocated_dynamic_workflow(::flyteidl::event::DynamicWorkflowNodeMetadata* dynamic_workflow);

  // .flyteidl.core.CatalogCacheStatus cache_status = 1;
  void clear_cache_status();
  static const int kCacheStatusFieldNumber = 1;
  ::flyteidl::core::CatalogCacheStatus cache_status() const;
  void set_cache_status(::flyteidl::core::CatalogCacheStatus value);

  // .flyteidl.core.CatalogReservation.Status reservation_status = 3;
  void clear_reservation_status();
  static const int kReservationStatusFieldNumber = 3;
  ::flyteidl::core::CatalogReservation_Status reservation_status() const;
  void set_reservation_status(::flyteidl::core::CatalogReservation_Status value);

  // @@protoc_insertion_point(class_scope:flyteidl.event.TaskNodeMetadata)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr checkpoint_uri_;
  ::flyteidl::core::CatalogMetadata* catalog_key_;
  ::flyteidl::event::DynamicWorkflowNodeMetadata* dynamic_workflow_;
  int cache_status_;
  int reservation_status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class DynamicWorkflowNodeMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.DynamicWorkflowNodeMetadata) */ {
 public:
  DynamicWorkflowNodeMetadata();
  virtual ~DynamicWorkflowNodeMetadata();

  DynamicWorkflowNodeMetadata(const DynamicWorkflowNodeMetadata& from);

  inline DynamicWorkflowNodeMetadata& operator=(const DynamicWorkflowNodeMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DynamicWorkflowNodeMetadata(DynamicWorkflowNodeMetadata&& from) noexcept
    : DynamicWorkflowNodeMetadata() {
    *this = ::std::move(from);
  }

  inline DynamicWorkflowNodeMetadata& operator=(DynamicWorkflowNodeMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DynamicWorkflowNodeMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DynamicWorkflowNodeMetadata* internal_default_instance() {
    return reinterpret_cast<const DynamicWorkflowNodeMetadata*>(
               &_DynamicWorkflowNodeMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DynamicWorkflowNodeMetadata* other);
  friend void swap(DynamicWorkflowNodeMetadata& a, DynamicWorkflowNodeMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DynamicWorkflowNodeMetadata* New() const final {
    return CreateMaybeMessage<DynamicWorkflowNodeMetadata>(nullptr);
  }

  DynamicWorkflowNodeMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DynamicWorkflowNodeMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DynamicWorkflowNodeMetadata& from);
  void MergeFrom(const DynamicWorkflowNodeMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynamicWorkflowNodeMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string dynamic_job_spec_uri = 3;
  void clear_dynamic_job_spec_uri();
  static const int kDynamicJobSpecUriFieldNumber = 3;
  const ::std::string& dynamic_job_spec_uri() const;
  void set_dynamic_job_spec_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_dynamic_job_spec_uri(::std::string&& value);
  #endif
  void set_dynamic_job_spec_uri(const char* value);
  void set_dynamic_job_spec_uri(const char* value, size_t size);
  ::std::string* mutable_dynamic_job_spec_uri();
  ::std::string* release_dynamic_job_spec_uri();
  void set_allocated_dynamic_job_spec_uri(::std::string* dynamic_job_spec_uri);

  // .flyteidl.core.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::Identifier& id() const;
  ::flyteidl::core::Identifier* release_id();
  ::flyteidl::core::Identifier* mutable_id();
  void set_allocated_id(::flyteidl::core::Identifier* id);

  // .flyteidl.core.CompiledWorkflowClosure compiled_workflow = 2;
  bool has_compiled_workflow() const;
  void clear_compiled_workflow();
  static const int kCompiledWorkflowFieldNumber = 2;
  const ::flyteidl::core::CompiledWorkflowClosure& compiled_workflow() const;
  ::flyteidl::core::CompiledWorkflowClosure* release_compiled_workflow();
  ::flyteidl::core::CompiledWorkflowClosure* mutable_compiled_workflow();
  void set_allocated_compiled_workflow(::flyteidl::core::CompiledWorkflowClosure* compiled_workflow);

  // @@protoc_insertion_point(class_scope:flyteidl.event.DynamicWorkflowNodeMetadata)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr dynamic_job_spec_uri_;
  ::flyteidl::core::Identifier* id_;
  ::flyteidl::core::CompiledWorkflowClosure* compiled_workflow_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class ParentTaskExecutionMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.ParentTaskExecutionMetadata) */ {
 public:
  ParentTaskExecutionMetadata();
  virtual ~ParentTaskExecutionMetadata();

  ParentTaskExecutionMetadata(const ParentTaskExecutionMetadata& from);

  inline ParentTaskExecutionMetadata& operator=(const ParentTaskExecutionMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParentTaskExecutionMetadata(ParentTaskExecutionMetadata&& from) noexcept
    : ParentTaskExecutionMetadata() {
    *this = ::std::move(from);
  }

  inline ParentTaskExecutionMetadata& operator=(ParentTaskExecutionMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ParentTaskExecutionMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParentTaskExecutionMetadata* internal_default_instance() {
    return reinterpret_cast<const ParentTaskExecutionMetadata*>(
               &_ParentTaskExecutionMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ParentTaskExecutionMetadata* other);
  friend void swap(ParentTaskExecutionMetadata& a, ParentTaskExecutionMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParentTaskExecutionMetadata* New() const final {
    return CreateMaybeMessage<ParentTaskExecutionMetadata>(nullptr);
  }

  ParentTaskExecutionMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ParentTaskExecutionMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ParentTaskExecutionMetadata& from);
  void MergeFrom(const ParentTaskExecutionMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParentTaskExecutionMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.TaskExecutionIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::TaskExecutionIdentifier& id() const;
  ::flyteidl::core::TaskExecutionIdentifier* release_id();
  ::flyteidl::core::TaskExecutionIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::core::TaskExecutionIdentifier* id);

  // @@protoc_insertion_point(class_scope:flyteidl.event.ParentTaskExecutionMetadata)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::TaskExecutionIdentifier* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class ParentNodeExecutionMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.ParentNodeExecutionMetadata) */ {
 public:
  ParentNodeExecutionMetadata();
  virtual ~ParentNodeExecutionMetadata();

  ParentNodeExecutionMetadata(const ParentNodeExecutionMetadata& from);

  inline ParentNodeExecutionMetadata& operator=(const ParentNodeExecutionMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParentNodeExecutionMetadata(ParentNodeExecutionMetadata&& from) noexcept
    : ParentNodeExecutionMetadata() {
    *this = ::std::move(from);
  }

  inline ParentNodeExecutionMetadata& operator=(ParentNodeExecutionMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ParentNodeExecutionMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParentNodeExecutionMetadata* internal_default_instance() {
    return reinterpret_cast<const ParentNodeExecutionMetadata*>(
               &_ParentNodeExecutionMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ParentNodeExecutionMetadata* other);
  friend void swap(ParentNodeExecutionMetadata& a, ParentNodeExecutionMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParentNodeExecutionMetadata* New() const final {
    return CreateMaybeMessage<ParentNodeExecutionMetadata>(nullptr);
  }

  ParentNodeExecutionMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ParentNodeExecutionMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ParentNodeExecutionMetadata& from);
  void MergeFrom(const ParentNodeExecutionMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParentNodeExecutionMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const ::std::string& node_id() const;
  void set_node_id(const ::std::string& value);
  #if LANG_CXX11
  void set_node_id(::std::string&& value);
  #endif
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  ::std::string* mutable_node_id();
  ::std::string* release_node_id();
  void set_allocated_node_id(::std::string* node_id);

  // @@protoc_insertion_point(class_scope:flyteidl.event.ParentNodeExecutionMetadata)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr node_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class TaskExecutionEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.TaskExecutionEvent) */ {
 public:
  TaskExecutionEvent();
  virtual ~TaskExecutionEvent();

  TaskExecutionEvent(const TaskExecutionEvent& from);

  inline TaskExecutionEvent& operator=(const TaskExecutionEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskExecutionEvent(TaskExecutionEvent&& from) noexcept
    : TaskExecutionEvent() {
    *this = ::std::move(from);
  }

  inline TaskExecutionEvent& operator=(TaskExecutionEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskExecutionEvent& default_instance();

  enum InputValueCase {
    kInputUri = 8,
    kInputData = 19,
    INPUT_VALUE_NOT_SET = 0,
  };

  enum OutputResultCase {
    kOutputUri = 9,
    kError = 10,
    kOutputData = 17,
    OUTPUT_RESULT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskExecutionEvent* internal_default_instance() {
    return reinterpret_cast<const TaskExecutionEvent*>(
               &_TaskExecutionEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(TaskExecutionEvent* other);
  friend void swap(TaskExecutionEvent& a, TaskExecutionEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskExecutionEvent* New() const final {
    return CreateMaybeMessage<TaskExecutionEvent>(nullptr);
  }

  TaskExecutionEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskExecutionEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskExecutionEvent& from);
  void MergeFrom(const TaskExecutionEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskExecutionEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.core.TaskLog logs = 6;
  int logs_size() const;
  void clear_logs();
  static const int kLogsFieldNumber = 6;
  ::flyteidl::core::TaskLog* mutable_logs(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::TaskLog >*
      mutable_logs();
  const ::flyteidl::core::TaskLog& logs(int index) const;
  ::flyteidl::core::TaskLog* add_logs();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::TaskLog >&
      logs() const;

  // string producer_id = 5;
  void clear_producer_id();
  static const int kProducerIdFieldNumber = 5;
  const ::std::string& producer_id() const;
  void set_producer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_producer_id(::std::string&& value);
  #endif
  void set_producer_id(const char* value);
  void set_producer_id(const char* value, size_t size);
  ::std::string* mutable_producer_id();
  ::std::string* release_producer_id();
  void set_allocated_producer_id(::std::string* producer_id);

  // string reason = 13;
  void clear_reason();
  static const int kReasonFieldNumber = 13;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // string task_type = 14;
  void clear_task_type();
  static const int kTaskTypeFieldNumber = 14;
  const ::std::string& task_type() const;
  void set_task_type(const ::std::string& value);
  #if LANG_CXX11
  void set_task_type(::std::string&& value);
  #endif
  void set_task_type(const char* value);
  void set_task_type(const char* value, size_t size);
  ::std::string* mutable_task_type();
  ::std::string* release_task_type();
  void set_allocated_task_type(::std::string* task_type);

  // .flyteidl.core.Identifier task_id = 1;
  bool has_task_id() const;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  const ::flyteidl::core::Identifier& task_id() const;
  ::flyteidl::core::Identifier* release_task_id();
  ::flyteidl::core::Identifier* mutable_task_id();
  void set_allocated_task_id(::flyteidl::core::Identifier* task_id);

  // .flyteidl.core.NodeExecutionIdentifier parent_node_execution_id = 2;
  bool has_parent_node_execution_id() const;
  void clear_parent_node_execution_id();
  static const int kParentNodeExecutionIdFieldNumber = 2;
  const ::flyteidl::core::NodeExecutionIdentifier& parent_node_execution_id() const;
  ::flyteidl::core::NodeExecutionIdentifier* release_parent_node_execution_id();
  ::flyteidl::core::NodeExecutionIdentifier* mutable_parent_node_execution_id();
  void set_allocated_parent_node_execution_id(::flyteidl::core::NodeExecutionIdentifier* parent_node_execution_id);

  // .google.protobuf.Timestamp occurred_at = 7;
  bool has_occurred_at() const;
  void clear_occurred_at();
  static const int kOccurredAtFieldNumber = 7;
  const ::google::protobuf::Timestamp& occurred_at() const;
  ::google::protobuf::Timestamp* release_occurred_at();
  ::google::protobuf::Timestamp* mutable_occurred_at();
  void set_allocated_occurred_at(::google::protobuf::Timestamp* occurred_at);

  // .google.protobuf.Struct custom_info = 11;
  bool has_custom_info() const;
  void clear_custom_info();
  static const int kCustomInfoFieldNumber = 11;
  const ::google::protobuf::Struct& custom_info() const;
  ::google::protobuf::Struct* release_custom_info();
  ::google::protobuf::Struct* mutable_custom_info();
  void set_allocated_custom_info(::google::protobuf::Struct* custom_info);

  // .flyteidl.event.TaskExecutionMetadata metadata = 16;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 16;
  const ::flyteidl::event::TaskExecutionMetadata& metadata() const;
  ::flyteidl::event::TaskExecutionMetadata* release_metadata();
  ::flyteidl::event::TaskExecutionMetadata* mutable_metadata();
  void set_allocated_metadata(::flyteidl::event::TaskExecutionMetadata* metadata);

  // .google.protobuf.Timestamp reported_at = 20;
  bool has_reported_at() const;
  void clear_reported_at();
  static const int kReportedAtFieldNumber = 20;
  const ::google::protobuf::Timestamp& reported_at() const;
  ::google::protobuf::Timestamp* release_reported_at();
  ::google::protobuf::Timestamp* mutable_reported_at();
  void set_allocated_reported_at(::google::protobuf::Timestamp* reported_at);

  // uint32 retry_attempt = 3;
  void clear_retry_attempt();
  static const int kRetryAttemptFieldNumber = 3;
  ::google::protobuf::uint32 retry_attempt() const;
  void set_retry_attempt(::google::protobuf::uint32 value);

  // .flyteidl.core.TaskExecution.Phase phase = 4;
  void clear_phase();
  static const int kPhaseFieldNumber = 4;
  ::flyteidl::core::TaskExecution_Phase phase() const;
  void set_phase(::flyteidl::core::TaskExecution_Phase value);

  // uint32 phase_version = 12;
  void clear_phase_version();
  static const int kPhaseVersionFieldNumber = 12;
  ::google::protobuf::uint32 phase_version() const;
  void set_phase_version(::google::protobuf::uint32 value);

  // int32 event_version = 18;
  void clear_event_version();
  static const int kEventVersionFieldNumber = 18;
  ::google::protobuf::int32 event_version() const;
  void set_event_version(::google::protobuf::int32 value);

  // string input_uri = 8;
  private:
  bool has_input_uri() const;
  public:
  void clear_input_uri();
  static const int kInputUriFieldNumber = 8;
  const ::std::string& input_uri() const;
  void set_input_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_input_uri(::std::string&& value);
  #endif
  void set_input_uri(const char* value);
  void set_input_uri(const char* value, size_t size);
  ::std::string* mutable_input_uri();
  ::std::string* release_input_uri();
  void set_allocated_input_uri(::std::string* input_uri);

  // .flyteidl.core.LiteralMap input_data = 19;
  bool has_input_data() const;
  void clear_input_data();
  static const int kInputDataFieldNumber = 19;
  const ::flyteidl::core::LiteralMap& input_data() const;
  ::flyteidl::core::LiteralMap* release_input_data();
  ::flyteidl::core::LiteralMap* mutable_input_data();
  void set_allocated_input_data(::flyteidl::core::LiteralMap* input_data);

  // string output_uri = 9;
  private:
  bool has_output_uri() const;
  public:
  void clear_output_uri();
  static const int kOutputUriFieldNumber = 9;
  const ::std::string& output_uri() const;
  void set_output_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_output_uri(::std::string&& value);
  #endif
  void set_output_uri(const char* value);
  void set_output_uri(const char* value, size_t size);
  ::std::string* mutable_output_uri();
  ::std::string* release_output_uri();
  void set_allocated_output_uri(::std::string* output_uri);

  // .flyteidl.core.ExecutionError error = 10;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 10;
  const ::flyteidl::core::ExecutionError& error() const;
  ::flyteidl::core::ExecutionError* release_error();
  ::flyteidl::core::ExecutionError* mutable_error();
  void set_allocated_error(::flyteidl::core::ExecutionError* error);

  // .flyteidl.core.LiteralMap output_data = 17;
  bool has_output_data() const;
  void clear_output_data();
  static const int kOutputDataFieldNumber = 17;
  const ::flyteidl::core::LiteralMap& output_data() const;
  ::flyteidl::core::LiteralMap* release_output_data();
  ::flyteidl::core::LiteralMap* mutable_output_data();
  void set_allocated_output_data(::flyteidl::core::LiteralMap* output_data);

  void clear_input_value();
  InputValueCase input_value_case() const;
  void clear_output_result();
  OutputResultCase output_result_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.event.TaskExecutionEvent)
 private:
  class HasBitSetters;
  void set_has_input_uri();
  void set_has_input_data();
  void set_has_output_uri();
  void set_has_error();
  void set_has_output_data();

  inline bool has_input_value() const;
  inline void clear_has_input_value();

  inline bool has_output_result() const;
  inline void clear_has_output_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::TaskLog > logs_;
  ::google::protobuf::internal::ArenaStringPtr producer_id_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::internal::ArenaStringPtr task_type_;
  ::flyteidl::core::Identifier* task_id_;
  ::flyteidl::core::NodeExecutionIdentifier* parent_node_execution_id_;
  ::google::protobuf::Timestamp* occurred_at_;
  ::google::protobuf::Struct* custom_info_;
  ::flyteidl::event::TaskExecutionMetadata* metadata_;
  ::google::protobuf::Timestamp* reported_at_;
  ::google::protobuf::uint32 retry_attempt_;
  int phase_;
  ::google::protobuf::uint32 phase_version_;
  ::google::protobuf::int32 event_version_;
  union InputValueUnion {
    InputValueUnion() {}
    ::google::protobuf::internal::ArenaStringPtr input_uri_;
    ::flyteidl::core::LiteralMap* input_data_;
  } input_value_;
  union OutputResultUnion {
    OutputResultUnion() {}
    ::google::protobuf::internal::ArenaStringPtr output_uri_;
    ::flyteidl::core::ExecutionError* error_;
    ::flyteidl::core::LiteralMap* output_data_;
  } output_result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend struct ::TableStruct_flyteidl_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class ExternalResourceInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.ExternalResourceInfo) */ {
 public:
  ExternalResourceInfo();
  virtual ~ExternalResourceInfo();

  ExternalResourceInfo(const ExternalResourceInfo& from);

  inline ExternalResourceInfo& operator=(const ExternalResourceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExternalResourceInfo(ExternalResourceInfo&& from) noexcept
    : ExternalResourceInfo() {
    *this = ::std::move(from);
  }

  inline ExternalResourceInfo& operator=(ExternalResourceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExternalResourceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExternalResourceInfo* internal_default_instance() {
    return reinterpret_cast<const ExternalResourceInfo*>(
               &_ExternalResourceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ExternalResourceInfo* other);
  friend void swap(ExternalResourceInfo& a, ExternalResourceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExternalResourceInfo* New() const final {
    return CreateMaybeMessage<ExternalResourceInfo>(nullptr);
  }

  ExternalResourceInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExternalResourceInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExternalResourceInfo& from);
  void MergeFrom(const ExternalResourceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExternalResourceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.core.TaskLog logs = 6;
  int logs_size() const;
  void clear_logs();
  static const int kLogsFieldNumber = 6;
  ::flyteidl::core::TaskLog* mutable_logs(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::TaskLog >*
      mutable_logs();
  const ::flyteidl::core::TaskLog& logs(int index) const;
  ::flyteidl::core::TaskLog* add_logs();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::TaskLog >&
      logs() const;

  // string external_id = 1;
  void clear_external_id();
  static const int kExternalIdFieldNumber = 1;
  const ::std::string& external_id() const;
  void set_external_id(const ::std::string& value);
  #if LANG_CXX11
  void set_external_id(::std::string&& value);
  #endif
  void set_external_id(const char* value);
  void set_external_id(const char* value, size_t size);
  ::std::string* mutable_external_id();
  ::std::string* release_external_id();
  void set_allocated_external_id(::std::string* external_id);

  // uint32 index = 2;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // uint32 retry_attempt = 3;
  void clear_retry_attempt();
  static const int kRetryAttemptFieldNumber = 3;
  ::google::protobuf::uint32 retry_attempt() const;
  void set_retry_attempt(::google::protobuf::uint32 value);

  // .flyteidl.core.TaskExecution.Phase phase = 4;
  void clear_phase();
  static const int kPhaseFieldNumber = 4;
  ::flyteidl::core::TaskExecution_Phase phase() const;
  void set_phase(::flyteidl::core::TaskExecution_Phase value);

  // .flyteidl.core.CatalogCacheStatus cache_status = 5;
  void clear_cache_status();
  static const int kCacheStatusFieldNumber = 5;
  ::flyteidl::core::CatalogCacheStatus cache_status() const;
  void set_cache_status(::flyteidl::core::CatalogCacheStatus value);

  // @@protoc_insertion_point(class_scope:flyteidl.event.ExternalResourceInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::TaskLog > logs_;
  ::google::protobuf::internal::ArenaStringPtr external_id_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 retry_attempt_;
  int phase_;
  int cache_status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class ResourcePoolInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.ResourcePoolInfo) */ {
 public:
  ResourcePoolInfo();
  virtual ~ResourcePoolInfo();

  ResourcePoolInfo(const ResourcePoolInfo& from);

  inline ResourcePoolInfo& operator=(const ResourcePoolInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResourcePoolInfo(ResourcePoolInfo&& from) noexcept
    : ResourcePoolInfo() {
    *this = ::std::move(from);
  }

  inline ResourcePoolInfo& operator=(ResourcePoolInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ResourcePoolInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourcePoolInfo* internal_default_instance() {
    return reinterpret_cast<const ResourcePoolInfo*>(
               &_ResourcePoolInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ResourcePoolInfo* other);
  friend void swap(ResourcePoolInfo& a, ResourcePoolInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResourcePoolInfo* New() const final {
    return CreateMaybeMessage<ResourcePoolInfo>(nullptr);
  }

  ResourcePoolInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResourcePoolInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResourcePoolInfo& from);
  void MergeFrom(const ResourcePoolInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourcePoolInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string allocation_token = 1;
  void clear_allocation_token();
  static const int kAllocationTokenFieldNumber = 1;
  const ::std::string& allocation_token() const;
  void set_allocation_token(const ::std::string& value);
  #if LANG_CXX11
  void set_allocation_token(::std::string&& value);
  #endif
  void set_allocation_token(const char* value);
  void set_allocation_token(const char* value, size_t size);
  ::std::string* mutable_allocation_token();
  ::std::string* release_allocation_token();
  void set_allocated_allocation_token(::std::string* allocation_token);

  // string namespace = 2;
  void clear_namespace_();
  static const int kNamespaceFieldNumber = 2;
  const ::std::string& namespace_() const;
  void set_namespace_(const ::std::string& value);
  #if LANG_CXX11
  void set_namespace_(::std::string&& value);
  #endif
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  ::std::string* mutable_namespace_();
  ::std::string* release_namespace_();
  void set_allocated_namespace_(::std::string* namespace_);

  // @@protoc_insertion_point(class_scope:flyteidl.event.ResourcePoolInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr allocation_token_;
  ::google::protobuf::internal::ArenaStringPtr namespace__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class TaskExecutionMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.TaskExecutionMetadata) */ {
 public:
  TaskExecutionMetadata();
  virtual ~TaskExecutionMetadata();

  TaskExecutionMetadata(const TaskExecutionMetadata& from);

  inline TaskExecutionMetadata& operator=(const TaskExecutionMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskExecutionMetadata(TaskExecutionMetadata&& from) noexcept
    : TaskExecutionMetadata() {
    *this = ::std::move(from);
  }

  inline TaskExecutionMetadata& operator=(TaskExecutionMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskExecutionMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskExecutionMetadata* internal_default_instance() {
    return reinterpret_cast<const TaskExecutionMetadata*>(
               &_TaskExecutionMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(TaskExecutionMetadata* other);
  friend void swap(TaskExecutionMetadata& a, TaskExecutionMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskExecutionMetadata* New() const final {
    return CreateMaybeMessage<TaskExecutionMetadata>(nullptr);
  }

  TaskExecutionMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskExecutionMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskExecutionMetadata& from);
  void MergeFrom(const TaskExecutionMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskExecutionMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TaskExecutionMetadata_InstanceClass InstanceClass;
  static const InstanceClass DEFAULT =
    TaskExecutionMetadata_InstanceClass_DEFAULT;
  static const InstanceClass INTERRUPTIBLE =
    TaskExecutionMetadata_InstanceClass_INTERRUPTIBLE;
  static inline bool InstanceClass_IsValid(int value) {
    return TaskExecutionMetadata_InstanceClass_IsValid(value);
  }
  static const InstanceClass InstanceClass_MIN =
    TaskExecutionMetadata_InstanceClass_InstanceClass_MIN;
  static const InstanceClass InstanceClass_MAX =
    TaskExecutionMetadata_InstanceClass_InstanceClass_MAX;
  static const int InstanceClass_ARRAYSIZE =
    TaskExecutionMetadata_InstanceClass_InstanceClass_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  InstanceClass_descriptor() {
    return TaskExecutionMetadata_InstanceClass_descriptor();
  }
  static inline const ::std::string& InstanceClass_Name(InstanceClass value) {
    return TaskExecutionMetadata_InstanceClass_Name(value);
  }
  static inline bool InstanceClass_Parse(const ::std::string& name,
      InstanceClass* value) {
    return TaskExecutionMetadata_InstanceClass_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .flyteidl.event.ExternalResourceInfo external_resources = 2;
  int external_resources_size() const;
  void clear_external_resources();
  static const int kExternalResourcesFieldNumber = 2;
  ::flyteidl::event::ExternalResourceInfo* mutable_external_resources(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::event::ExternalResourceInfo >*
      mutable_external_resources();
  const ::flyteidl::event::ExternalResourceInfo& external_resources(int index) const;
  ::flyteidl::event::ExternalResourceInfo* add_external_resources();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::event::ExternalResourceInfo >&
      external_resources() const;

  // repeated .flyteidl.event.ResourcePoolInfo resource_pool_info = 3;
  int resource_pool_info_size() const;
  void clear_resource_pool_info();
  static const int kResourcePoolInfoFieldNumber = 3;
  ::flyteidl::event::ResourcePoolInfo* mutable_resource_pool_info(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::event::ResourcePoolInfo >*
      mutable_resource_pool_info();
  const ::flyteidl::event::ResourcePoolInfo& resource_pool_info(int index) const;
  ::flyteidl::event::ResourcePoolInfo* add_resource_pool_info();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::event::ResourcePoolInfo >&
      resource_pool_info() const;

  // string generated_name = 1;
  void clear_generated_name();
  static const int kGeneratedNameFieldNumber = 1;
  const ::std::string& generated_name() const;
  void set_generated_name(const ::std::string& value);
  #if LANG_CXX11
  void set_generated_name(::std::string&& value);
  #endif
  void set_generated_name(const char* value);
  void set_generated_name(const char* value, size_t size);
  ::std::string* mutable_generated_name();
  ::std::string* release_generated_name();
  void set_allocated_generated_name(::std::string* generated_name);

  // string plugin_identifier = 4;
  void clear_plugin_identifier();
  static const int kPluginIdentifierFieldNumber = 4;
  const ::std::string& plugin_identifier() const;
  void set_plugin_identifier(const ::std::string& value);
  #if LANG_CXX11
  void set_plugin_identifier(::std::string&& value);
  #endif
  void set_plugin_identifier(const char* value);
  void set_plugin_identifier(const char* value, size_t size);
  ::std::string* mutable_plugin_identifier();
  ::std::string* release_plugin_identifier();
  void set_allocated_plugin_identifier(::std::string* plugin_identifier);

  // .flyteidl.event.TaskExecutionMetadata.InstanceClass instance_class = 16;
  void clear_instance_class();
  static const int kInstanceClassFieldNumber = 16;
  ::flyteidl::event::TaskExecutionMetadata_InstanceClass instance_class() const;
  void set_instance_class(::flyteidl::event::TaskExecutionMetadata_InstanceClass value);

  // @@protoc_insertion_point(class_scope:flyteidl.event.TaskExecutionMetadata)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::event::ExternalResourceInfo > external_resources_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::event::ResourcePoolInfo > resource_pool_info_;
  ::google::protobuf::internal::ArenaStringPtr generated_name_;
  ::google::protobuf::internal::ArenaStringPtr plugin_identifier_;
  int instance_class_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorkflowExecutionEvent

// .flyteidl.core.WorkflowExecutionIdentifier execution_id = 1;
inline bool WorkflowExecutionEvent::has_execution_id() const {
  return this != internal_default_instance() && execution_id_ != nullptr;
}
inline const ::flyteidl::core::WorkflowExecutionIdentifier& WorkflowExecutionEvent::execution_id() const {
  const ::flyteidl::core::WorkflowExecutionIdentifier* p = execution_id_;
  // @@protoc_insertion_point(field_get:flyteidl.event.WorkflowExecutionEvent.execution_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::WorkflowExecutionIdentifier*>(
      &::flyteidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* WorkflowExecutionEvent::release_execution_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.WorkflowExecutionEvent.execution_id)
  
  ::flyteidl::core::WorkflowExecutionIdentifier* temp = execution_id_;
  execution_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* WorkflowExecutionEvent::mutable_execution_id() {
  
  if (execution_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::WorkflowExecutionIdentifier>(GetArenaNoVirtual());
    execution_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.WorkflowExecutionEvent.execution_id)
  return execution_id_;
}
inline void WorkflowExecutionEvent::set_allocated_execution_id(::flyteidl::core::WorkflowExecutionIdentifier* execution_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(execution_id_);
  }
  if (execution_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      execution_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, execution_id, submessage_arena);
    }
    
  } else {
    
  }
  execution_id_ = execution_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.WorkflowExecutionEvent.execution_id)
}

// string producer_id = 2;
inline void WorkflowExecutionEvent::clear_producer_id() {
  producer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WorkflowExecutionEvent::producer_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.WorkflowExecutionEvent.producer_id)
  return producer_id_.GetNoArena();
}
inline void WorkflowExecutionEvent::set_producer_id(const ::std::string& value) {
  
  producer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.WorkflowExecutionEvent.producer_id)
}
#if LANG_CXX11
inline void WorkflowExecutionEvent::set_producer_id(::std::string&& value) {
  
  producer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.WorkflowExecutionEvent.producer_id)
}
#endif
inline void WorkflowExecutionEvent::set_producer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  producer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.WorkflowExecutionEvent.producer_id)
}
inline void WorkflowExecutionEvent::set_producer_id(const char* value, size_t size) {
  
  producer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.WorkflowExecutionEvent.producer_id)
}
inline ::std::string* WorkflowExecutionEvent::mutable_producer_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.WorkflowExecutionEvent.producer_id)
  return producer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WorkflowExecutionEvent::release_producer_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.WorkflowExecutionEvent.producer_id)
  
  return producer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WorkflowExecutionEvent::set_allocated_producer_id(::std::string* producer_id) {
  if (producer_id != nullptr) {
    
  } else {
    
  }
  producer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), producer_id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.WorkflowExecutionEvent.producer_id)
}

// .flyteidl.core.WorkflowExecution.Phase phase = 3;
inline void WorkflowExecutionEvent::clear_phase() {
  phase_ = 0;
}
inline ::flyteidl::core::WorkflowExecution_Phase WorkflowExecutionEvent::phase() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.WorkflowExecutionEvent.phase)
  return static_cast< ::flyteidl::core::WorkflowExecution_Phase >(phase_);
}
inline void WorkflowExecutionEvent::set_phase(::flyteidl::core::WorkflowExecution_Phase value) {
  
  phase_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.event.WorkflowExecutionEvent.phase)
}

// .google.protobuf.Timestamp occurred_at = 4;
inline bool WorkflowExecutionEvent::has_occurred_at() const {
  return this != internal_default_instance() && occurred_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& WorkflowExecutionEvent::occurred_at() const {
  const ::google::protobuf::Timestamp* p = occurred_at_;
  // @@protoc_insertion_point(field_get:flyteidl.event.WorkflowExecutionEvent.occurred_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* WorkflowExecutionEvent::release_occurred_at() {
  // @@protoc_insertion_point(field_release:flyteidl.event.WorkflowExecutionEvent.occurred_at)
  
  ::google::protobuf::Timestamp* temp = occurred_at_;
  occurred_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* WorkflowExecutionEvent::mutable_occurred_at() {
  
  if (occurred_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    occurred_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.WorkflowExecutionEvent.occurred_at)
  return occurred_at_;
}
inline void WorkflowExecutionEvent::set_allocated_occurred_at(::google::protobuf::Timestamp* occurred_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(occurred_at_);
  }
  if (occurred_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(occurred_at)->GetArena();
    if (message_arena != submessage_arena) {
      occurred_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, occurred_at, submessage_arena);
    }
    
  } else {
    
  }
  occurred_at_ = occurred_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.WorkflowExecutionEvent.occurred_at)
}

// string output_uri = 5;
inline bool WorkflowExecutionEvent::has_output_uri() const {
  return output_result_case() == kOutputUri;
}
inline void WorkflowExecutionEvent::set_has_output_uri() {
  _oneof_case_[0] = kOutputUri;
}
inline void WorkflowExecutionEvent::clear_output_uri() {
  if (has_output_uri()) {
    output_result_.output_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_output_result();
  }
}
inline const ::std::string& WorkflowExecutionEvent::output_uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.WorkflowExecutionEvent.output_uri)
  if (has_output_uri()) {
    return output_result_.output_uri_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void WorkflowExecutionEvent::set_output_uri(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.event.WorkflowExecutionEvent.output_uri)
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.WorkflowExecutionEvent.output_uri)
}
#if LANG_CXX11
inline void WorkflowExecutionEvent::set_output_uri(::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.event.WorkflowExecutionEvent.output_uri)
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.WorkflowExecutionEvent.output_uri)
}
#endif
inline void WorkflowExecutionEvent::set_output_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.WorkflowExecutionEvent.output_uri)
}
inline void WorkflowExecutionEvent::set_output_uri(const char* value, size_t size) {
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.WorkflowExecutionEvent.output_uri)
}
inline ::std::string* WorkflowExecutionEvent::mutable_output_uri() {
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.WorkflowExecutionEvent.output_uri)
  return output_result_.output_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WorkflowExecutionEvent::release_output_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.event.WorkflowExecutionEvent.output_uri)
  if (has_output_uri()) {
    clear_has_output_result();
    return output_result_.output_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void WorkflowExecutionEvent::set_allocated_output_uri(::std::string* output_uri) {
  if (has_output_result()) {
    clear_output_result();
  }
  if (output_uri != nullptr) {
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(output_uri);
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.WorkflowExecutionEvent.output_uri)
}

// .flyteidl.core.ExecutionError error = 6;
inline bool WorkflowExecutionEvent::has_error() const {
  return output_result_case() == kError;
}
inline void WorkflowExecutionEvent::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::flyteidl::core::ExecutionError* WorkflowExecutionEvent::release_error() {
  // @@protoc_insertion_point(field_release:flyteidl.event.WorkflowExecutionEvent.error)
  if (has_error()) {
    clear_has_output_result();
      ::flyteidl::core::ExecutionError* temp = output_result_.error_;
    output_result_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::ExecutionError& WorkflowExecutionEvent::error() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.WorkflowExecutionEvent.error)
  return has_error()
      ? *output_result_.error_
      : *reinterpret_cast< ::flyteidl::core::ExecutionError*>(&::flyteidl::core::_ExecutionError_default_instance_);
}
inline ::flyteidl::core::ExecutionError* WorkflowExecutionEvent::mutable_error() {
  if (!has_error()) {
    clear_output_result();
    set_has_error();
    output_result_.error_ = CreateMaybeMessage< ::flyteidl::core::ExecutionError >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.WorkflowExecutionEvent.error)
  return output_result_.error_;
}

// .flyteidl.core.LiteralMap output_data = 7;
inline bool WorkflowExecutionEvent::has_output_data() const {
  return output_result_case() == kOutputData;
}
inline void WorkflowExecutionEvent::set_has_output_data() {
  _oneof_case_[0] = kOutputData;
}
inline ::flyteidl::core::LiteralMap* WorkflowExecutionEvent::release_output_data() {
  // @@protoc_insertion_point(field_release:flyteidl.event.WorkflowExecutionEvent.output_data)
  if (has_output_data()) {
    clear_has_output_result();
      ::flyteidl::core::LiteralMap* temp = output_result_.output_data_;
    output_result_.output_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::LiteralMap& WorkflowExecutionEvent::output_data() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.WorkflowExecutionEvent.output_data)
  return has_output_data()
      ? *output_result_.output_data_
      : *reinterpret_cast< ::flyteidl::core::LiteralMap*>(&::flyteidl::core::_LiteralMap_default_instance_);
}
inline ::flyteidl::core::LiteralMap* WorkflowExecutionEvent::mutable_output_data() {
  if (!has_output_data()) {
    clear_output_result();
    set_has_output_data();
    output_result_.output_data_ = CreateMaybeMessage< ::flyteidl::core::LiteralMap >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.WorkflowExecutionEvent.output_data)
  return output_result_.output_data_;
}

inline bool WorkflowExecutionEvent::has_output_result() const {
  return output_result_case() != OUTPUT_RESULT_NOT_SET;
}
inline void WorkflowExecutionEvent::clear_has_output_result() {
  _oneof_case_[0] = OUTPUT_RESULT_NOT_SET;
}
inline WorkflowExecutionEvent::OutputResultCase WorkflowExecutionEvent::output_result_case() const {
  return WorkflowExecutionEvent::OutputResultCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NodeExecutionEvent

// .flyteidl.core.NodeExecutionIdentifier id = 1;
inline bool NodeExecutionEvent::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::flyteidl::core::NodeExecutionIdentifier& NodeExecutionEvent::id() const {
  const ::flyteidl::core::NodeExecutionIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::NodeExecutionIdentifier*>(
      &::flyteidl::core::_NodeExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::NodeExecutionIdentifier* NodeExecutionEvent::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.id)
  
  ::flyteidl::core::NodeExecutionIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::NodeExecutionIdentifier* NodeExecutionEvent::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::NodeExecutionIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.id)
  return id_;
}
inline void NodeExecutionEvent::set_allocated_id(::flyteidl::core::NodeExecutionIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.id)
}

// string producer_id = 2;
inline void NodeExecutionEvent::clear_producer_id() {
  producer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeExecutionEvent::producer_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.producer_id)
  return producer_id_.GetNoArena();
}
inline void NodeExecutionEvent::set_producer_id(const ::std::string& value) {
  
  producer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.producer_id)
}
#if LANG_CXX11
inline void NodeExecutionEvent::set_producer_id(::std::string&& value) {
  
  producer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.NodeExecutionEvent.producer_id)
}
#endif
inline void NodeExecutionEvent::set_producer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  producer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.NodeExecutionEvent.producer_id)
}
inline void NodeExecutionEvent::set_producer_id(const char* value, size_t size) {
  
  producer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.NodeExecutionEvent.producer_id)
}
inline ::std::string* NodeExecutionEvent::mutable_producer_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.producer_id)
  return producer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeExecutionEvent::release_producer_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.producer_id)
  
  return producer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeExecutionEvent::set_allocated_producer_id(::std::string* producer_id) {
  if (producer_id != nullptr) {
    
  } else {
    
  }
  producer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), producer_id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.producer_id)
}

// .flyteidl.core.NodeExecution.Phase phase = 3;
inline void NodeExecutionEvent::clear_phase() {
  phase_ = 0;
}
inline ::flyteidl::core::NodeExecution_Phase NodeExecutionEvent::phase() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.phase)
  return static_cast< ::flyteidl::core::NodeExecution_Phase >(phase_);
}
inline void NodeExecutionEvent::set_phase(::flyteidl::core::NodeExecution_Phase value) {
  
  phase_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.phase)
}

// .google.protobuf.Timestamp occurred_at = 4;
inline bool NodeExecutionEvent::has_occurred_at() const {
  return this != internal_default_instance() && occurred_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& NodeExecutionEvent::occurred_at() const {
  const ::google::protobuf::Timestamp* p = occurred_at_;
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.occurred_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* NodeExecutionEvent::release_occurred_at() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.occurred_at)
  
  ::google::protobuf::Timestamp* temp = occurred_at_;
  occurred_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* NodeExecutionEvent::mutable_occurred_at() {
  
  if (occurred_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    occurred_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.occurred_at)
  return occurred_at_;
}
inline void NodeExecutionEvent::set_allocated_occurred_at(::google::protobuf::Timestamp* occurred_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(occurred_at_);
  }
  if (occurred_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(occurred_at)->GetArena();
    if (message_arena != submessage_arena) {
      occurred_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, occurred_at, submessage_arena);
    }
    
  } else {
    
  }
  occurred_at_ = occurred_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.occurred_at)
}

// string input_uri = 5;
inline bool NodeExecutionEvent::has_input_uri() const {
  return input_value_case() == kInputUri;
}
inline void NodeExecutionEvent::set_has_input_uri() {
  _oneof_case_[0] = kInputUri;
}
inline void NodeExecutionEvent::clear_input_uri() {
  if (has_input_uri()) {
    input_value_.input_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_input_value();
  }
}
inline const ::std::string& NodeExecutionEvent::input_uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.input_uri)
  if (has_input_uri()) {
    return input_value_.input_uri_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void NodeExecutionEvent::set_input_uri(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.input_uri)
  if (!has_input_uri()) {
    clear_input_value();
    set_has_input_uri();
    input_value_.input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  input_value_.input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.input_uri)
}
#if LANG_CXX11
inline void NodeExecutionEvent::set_input_uri(::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.input_uri)
  if (!has_input_uri()) {
    clear_input_value();
    set_has_input_uri();
    input_value_.input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  input_value_.input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.NodeExecutionEvent.input_uri)
}
#endif
inline void NodeExecutionEvent::set_input_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_input_uri()) {
    clear_input_value();
    set_has_input_uri();
    input_value_.input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  input_value_.input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.NodeExecutionEvent.input_uri)
}
inline void NodeExecutionEvent::set_input_uri(const char* value, size_t size) {
  if (!has_input_uri()) {
    clear_input_value();
    set_has_input_uri();
    input_value_.input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  input_value_.input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.NodeExecutionEvent.input_uri)
}
inline ::std::string* NodeExecutionEvent::mutable_input_uri() {
  if (!has_input_uri()) {
    clear_input_value();
    set_has_input_uri();
    input_value_.input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.input_uri)
  return input_value_.input_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeExecutionEvent::release_input_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.input_uri)
  if (has_input_uri()) {
    clear_has_input_value();
    return input_value_.input_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void NodeExecutionEvent::set_allocated_input_uri(::std::string* input_uri) {
  if (has_input_value()) {
    clear_input_value();
  }
  if (input_uri != nullptr) {
    set_has_input_uri();
    input_value_.input_uri_.UnsafeSetDefault(input_uri);
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.input_uri)
}

// .flyteidl.core.LiteralMap input_data = 20;
inline bool NodeExecutionEvent::has_input_data() const {
  return input_value_case() == kInputData;
}
inline void NodeExecutionEvent::set_has_input_data() {
  _oneof_case_[0] = kInputData;
}
inline ::flyteidl::core::LiteralMap* NodeExecutionEvent::release_input_data() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.input_data)
  if (has_input_data()) {
    clear_has_input_value();
      ::flyteidl::core::LiteralMap* temp = input_value_.input_data_;
    input_value_.input_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::LiteralMap& NodeExecutionEvent::input_data() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.input_data)
  return has_input_data()
      ? *input_value_.input_data_
      : *reinterpret_cast< ::flyteidl::core::LiteralMap*>(&::flyteidl::core::_LiteralMap_default_instance_);
}
inline ::flyteidl::core::LiteralMap* NodeExecutionEvent::mutable_input_data() {
  if (!has_input_data()) {
    clear_input_value();
    set_has_input_data();
    input_value_.input_data_ = CreateMaybeMessage< ::flyteidl::core::LiteralMap >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.input_data)
  return input_value_.input_data_;
}

// string output_uri = 6;
inline bool NodeExecutionEvent::has_output_uri() const {
  return output_result_case() == kOutputUri;
}
inline void NodeExecutionEvent::set_has_output_uri() {
  _oneof_case_[1] = kOutputUri;
}
inline void NodeExecutionEvent::clear_output_uri() {
  if (has_output_uri()) {
    output_result_.output_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_output_result();
  }
}
inline const ::std::string& NodeExecutionEvent::output_uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.output_uri)
  if (has_output_uri()) {
    return output_result_.output_uri_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void NodeExecutionEvent::set_output_uri(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.output_uri)
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.output_uri)
}
#if LANG_CXX11
inline void NodeExecutionEvent::set_output_uri(::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.output_uri)
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.NodeExecutionEvent.output_uri)
}
#endif
inline void NodeExecutionEvent::set_output_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.NodeExecutionEvent.output_uri)
}
inline void NodeExecutionEvent::set_output_uri(const char* value, size_t size) {
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.NodeExecutionEvent.output_uri)
}
inline ::std::string* NodeExecutionEvent::mutable_output_uri() {
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.output_uri)
  return output_result_.output_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeExecutionEvent::release_output_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.output_uri)
  if (has_output_uri()) {
    clear_has_output_result();
    return output_result_.output_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void NodeExecutionEvent::set_allocated_output_uri(::std::string* output_uri) {
  if (has_output_result()) {
    clear_output_result();
  }
  if (output_uri != nullptr) {
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(output_uri);
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.output_uri)
}

// .flyteidl.core.ExecutionError error = 7;
inline bool NodeExecutionEvent::has_error() const {
  return output_result_case() == kError;
}
inline void NodeExecutionEvent::set_has_error() {
  _oneof_case_[1] = kError;
}
inline ::flyteidl::core::ExecutionError* NodeExecutionEvent::release_error() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.error)
  if (has_error()) {
    clear_has_output_result();
      ::flyteidl::core::ExecutionError* temp = output_result_.error_;
    output_result_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::ExecutionError& NodeExecutionEvent::error() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.error)
  return has_error()
      ? *output_result_.error_
      : *reinterpret_cast< ::flyteidl::core::ExecutionError*>(&::flyteidl::core::_ExecutionError_default_instance_);
}
inline ::flyteidl::core::ExecutionError* NodeExecutionEvent::mutable_error() {
  if (!has_error()) {
    clear_output_result();
    set_has_error();
    output_result_.error_ = CreateMaybeMessage< ::flyteidl::core::ExecutionError >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.error)
  return output_result_.error_;
}

// .flyteidl.core.LiteralMap output_data = 15;
inline bool NodeExecutionEvent::has_output_data() const {
  return output_result_case() == kOutputData;
}
inline void NodeExecutionEvent::set_has_output_data() {
  _oneof_case_[1] = kOutputData;
}
inline ::flyteidl::core::LiteralMap* NodeExecutionEvent::release_output_data() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.output_data)
  if (has_output_data()) {
    clear_has_output_result();
      ::flyteidl::core::LiteralMap* temp = output_result_.output_data_;
    output_result_.output_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::LiteralMap& NodeExecutionEvent::output_data() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.output_data)
  return has_output_data()
      ? *output_result_.output_data_
      : *reinterpret_cast< ::flyteidl::core::LiteralMap*>(&::flyteidl::core::_LiteralMap_default_instance_);
}
inline ::flyteidl::core::LiteralMap* NodeExecutionEvent::mutable_output_data() {
  if (!has_output_data()) {
    clear_output_result();
    set_has_output_data();
    output_result_.output_data_ = CreateMaybeMessage< ::flyteidl::core::LiteralMap >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.output_data)
  return output_result_.output_data_;
}

// .flyteidl.event.WorkflowNodeMetadata workflow_node_metadata = 8;
inline bool NodeExecutionEvent::has_workflow_node_metadata() const {
  return target_metadata_case() == kWorkflowNodeMetadata;
}
inline void NodeExecutionEvent::set_has_workflow_node_metadata() {
  _oneof_case_[2] = kWorkflowNodeMetadata;
}
inline void NodeExecutionEvent::clear_workflow_node_metadata() {
  if (has_workflow_node_metadata()) {
    delete target_metadata_.workflow_node_metadata_;
    clear_has_target_metadata();
  }
}
inline ::flyteidl::event::WorkflowNodeMetadata* NodeExecutionEvent::release_workflow_node_metadata() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.workflow_node_metadata)
  if (has_workflow_node_metadata()) {
    clear_has_target_metadata();
      ::flyteidl::event::WorkflowNodeMetadata* temp = target_metadata_.workflow_node_metadata_;
    target_metadata_.workflow_node_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::event::WorkflowNodeMetadata& NodeExecutionEvent::workflow_node_metadata() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.workflow_node_metadata)
  return has_workflow_node_metadata()
      ? *target_metadata_.workflow_node_metadata_
      : *reinterpret_cast< ::flyteidl::event::WorkflowNodeMetadata*>(&::flyteidl::event::_WorkflowNodeMetadata_default_instance_);
}
inline ::flyteidl::event::WorkflowNodeMetadata* NodeExecutionEvent::mutable_workflow_node_metadata() {
  if (!has_workflow_node_metadata()) {
    clear_target_metadata();
    set_has_workflow_node_metadata();
    target_metadata_.workflow_node_metadata_ = CreateMaybeMessage< ::flyteidl::event::WorkflowNodeMetadata >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.workflow_node_metadata)
  return target_metadata_.workflow_node_metadata_;
}

// .flyteidl.event.TaskNodeMetadata task_node_metadata = 14;
inline bool NodeExecutionEvent::has_task_node_metadata() const {
  return target_metadata_case() == kTaskNodeMetadata;
}
inline void NodeExecutionEvent::set_has_task_node_metadata() {
  _oneof_case_[2] = kTaskNodeMetadata;
}
inline void NodeExecutionEvent::clear_task_node_metadata() {
  if (has_task_node_metadata()) {
    delete target_metadata_.task_node_metadata_;
    clear_has_target_metadata();
  }
}
inline ::flyteidl::event::TaskNodeMetadata* NodeExecutionEvent::release_task_node_metadata() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.task_node_metadata)
  if (has_task_node_metadata()) {
    clear_has_target_metadata();
      ::flyteidl::event::TaskNodeMetadata* temp = target_metadata_.task_node_metadata_;
    target_metadata_.task_node_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::event::TaskNodeMetadata& NodeExecutionEvent::task_node_metadata() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.task_node_metadata)
  return has_task_node_metadata()
      ? *target_metadata_.task_node_metadata_
      : *reinterpret_cast< ::flyteidl::event::TaskNodeMetadata*>(&::flyteidl::event::_TaskNodeMetadata_default_instance_);
}
inline ::flyteidl::event::TaskNodeMetadata* NodeExecutionEvent::mutable_task_node_metadata() {
  if (!has_task_node_metadata()) {
    clear_target_metadata();
    set_has_task_node_metadata();
    target_metadata_.task_node_metadata_ = CreateMaybeMessage< ::flyteidl::event::TaskNodeMetadata >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.task_node_metadata)
  return target_metadata_.task_node_metadata_;
}

// .flyteidl.event.ParentTaskExecutionMetadata parent_task_metadata = 9;
inline bool NodeExecutionEvent::has_parent_task_metadata() const {
  return this != internal_default_instance() && parent_task_metadata_ != nullptr;
}
inline void NodeExecutionEvent::clear_parent_task_metadata() {
  if (GetArenaNoVirtual() == nullptr && parent_task_metadata_ != nullptr) {
    delete parent_task_metadata_;
  }
  parent_task_metadata_ = nullptr;
}
inline const ::flyteidl::event::ParentTaskExecutionMetadata& NodeExecutionEvent::parent_task_metadata() const {
  const ::flyteidl::event::ParentTaskExecutionMetadata* p = parent_task_metadata_;
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.parent_task_metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::event::ParentTaskExecutionMetadata*>(
      &::flyteidl::event::_ParentTaskExecutionMetadata_default_instance_);
}
inline ::flyteidl::event::ParentTaskExecutionMetadata* NodeExecutionEvent::release_parent_task_metadata() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.parent_task_metadata)
  
  ::flyteidl::event::ParentTaskExecutionMetadata* temp = parent_task_metadata_;
  parent_task_metadata_ = nullptr;
  return temp;
}
inline ::flyteidl::event::ParentTaskExecutionMetadata* NodeExecutionEvent::mutable_parent_task_metadata() {
  
  if (parent_task_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::event::ParentTaskExecutionMetadata>(GetArenaNoVirtual());
    parent_task_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.parent_task_metadata)
  return parent_task_metadata_;
}
inline void NodeExecutionEvent::set_allocated_parent_task_metadata(::flyteidl::event::ParentTaskExecutionMetadata* parent_task_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete parent_task_metadata_;
  }
  if (parent_task_metadata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parent_task_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent_task_metadata, submessage_arena);
    }
    
  } else {
    
  }
  parent_task_metadata_ = parent_task_metadata;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.parent_task_metadata)
}

// .flyteidl.event.ParentNodeExecutionMetadata parent_node_metadata = 10;
inline bool NodeExecutionEvent::has_parent_node_metadata() const {
  return this != internal_default_instance() && parent_node_metadata_ != nullptr;
}
inline void NodeExecutionEvent::clear_parent_node_metadata() {
  if (GetArenaNoVirtual() == nullptr && parent_node_metadata_ != nullptr) {
    delete parent_node_metadata_;
  }
  parent_node_metadata_ = nullptr;
}
inline const ::flyteidl::event::ParentNodeExecutionMetadata& NodeExecutionEvent::parent_node_metadata() const {
  const ::flyteidl::event::ParentNodeExecutionMetadata* p = parent_node_metadata_;
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.parent_node_metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::event::ParentNodeExecutionMetadata*>(
      &::flyteidl::event::_ParentNodeExecutionMetadata_default_instance_);
}
inline ::flyteidl::event::ParentNodeExecutionMetadata* NodeExecutionEvent::release_parent_node_metadata() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.parent_node_metadata)
  
  ::flyteidl::event::ParentNodeExecutionMetadata* temp = parent_node_metadata_;
  parent_node_metadata_ = nullptr;
  return temp;
}
inline ::flyteidl::event::ParentNodeExecutionMetadata* NodeExecutionEvent::mutable_parent_node_metadata() {
  
  if (parent_node_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::event::ParentNodeExecutionMetadata>(GetArenaNoVirtual());
    parent_node_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.parent_node_metadata)
  return parent_node_metadata_;
}
inline void NodeExecutionEvent::set_allocated_parent_node_metadata(::flyteidl::event::ParentNodeExecutionMetadata* parent_node_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete parent_node_metadata_;
  }
  if (parent_node_metadata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parent_node_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent_node_metadata, submessage_arena);
    }
    
  } else {
    
  }
  parent_node_metadata_ = parent_node_metadata;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.parent_node_metadata)
}

// string retry_group = 11;
inline void NodeExecutionEvent::clear_retry_group() {
  retry_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeExecutionEvent::retry_group() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.retry_group)
  return retry_group_.GetNoArena();
}
inline void NodeExecutionEvent::set_retry_group(const ::std::string& value) {
  
  retry_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.retry_group)
}
#if LANG_CXX11
inline void NodeExecutionEvent::set_retry_group(::std::string&& value) {
  
  retry_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.NodeExecutionEvent.retry_group)
}
#endif
inline void NodeExecutionEvent::set_retry_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  retry_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.NodeExecutionEvent.retry_group)
}
inline void NodeExecutionEvent::set_retry_group(const char* value, size_t size) {
  
  retry_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.NodeExecutionEvent.retry_group)
}
inline ::std::string* NodeExecutionEvent::mutable_retry_group() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.retry_group)
  return retry_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeExecutionEvent::release_retry_group() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.retry_group)
  
  return retry_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeExecutionEvent::set_allocated_retry_group(::std::string* retry_group) {
  if (retry_group != nullptr) {
    
  } else {
    
  }
  retry_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), retry_group);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.retry_group)
}

// string spec_node_id = 12;
inline void NodeExecutionEvent::clear_spec_node_id() {
  spec_node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeExecutionEvent::spec_node_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.spec_node_id)
  return spec_node_id_.GetNoArena();
}
inline void NodeExecutionEvent::set_spec_node_id(const ::std::string& value) {
  
  spec_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.spec_node_id)
}
#if LANG_CXX11
inline void NodeExecutionEvent::set_spec_node_id(::std::string&& value) {
  
  spec_node_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.NodeExecutionEvent.spec_node_id)
}
#endif
inline void NodeExecutionEvent::set_spec_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spec_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.NodeExecutionEvent.spec_node_id)
}
inline void NodeExecutionEvent::set_spec_node_id(const char* value, size_t size) {
  
  spec_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.NodeExecutionEvent.spec_node_id)
}
inline ::std::string* NodeExecutionEvent::mutable_spec_node_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.spec_node_id)
  return spec_node_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeExecutionEvent::release_spec_node_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.spec_node_id)
  
  return spec_node_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeExecutionEvent::set_allocated_spec_node_id(::std::string* spec_node_id) {
  if (spec_node_id != nullptr) {
    
  } else {
    
  }
  spec_node_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spec_node_id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.spec_node_id)
}

// string node_name = 13;
inline void NodeExecutionEvent::clear_node_name() {
  node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeExecutionEvent::node_name() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.node_name)
  return node_name_.GetNoArena();
}
inline void NodeExecutionEvent::set_node_name(const ::std::string& value) {
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.node_name)
}
#if LANG_CXX11
inline void NodeExecutionEvent::set_node_name(::std::string&& value) {
  
  node_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.NodeExecutionEvent.node_name)
}
#endif
inline void NodeExecutionEvent::set_node_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.NodeExecutionEvent.node_name)
}
inline void NodeExecutionEvent::set_node_name(const char* value, size_t size) {
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.NodeExecutionEvent.node_name)
}
inline ::std::string* NodeExecutionEvent::mutable_node_name() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.node_name)
  return node_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeExecutionEvent::release_node_name() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.node_name)
  
  return node_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeExecutionEvent::set_allocated_node_name(::std::string* node_name) {
  if (node_name != nullptr) {
    
  } else {
    
  }
  node_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_name);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.node_name)
}

// int32 event_version = 16;
inline void NodeExecutionEvent::clear_event_version() {
  event_version_ = 0;
}
inline ::google::protobuf::int32 NodeExecutionEvent::event_version() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.event_version)
  return event_version_;
}
inline void NodeExecutionEvent::set_event_version(::google::protobuf::int32 value) {
  
  event_version_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.event_version)
}

// bool is_parent = 17;
inline void NodeExecutionEvent::clear_is_parent() {
  is_parent_ = false;
}
inline bool NodeExecutionEvent::is_parent() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.is_parent)
  return is_parent_;
}
inline void NodeExecutionEvent::set_is_parent(bool value) {
  
  is_parent_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.is_parent)
}

// bool is_dynamic = 18;
inline void NodeExecutionEvent::clear_is_dynamic() {
  is_dynamic_ = false;
}
inline bool NodeExecutionEvent::is_dynamic() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.is_dynamic)
  return is_dynamic_;
}
inline void NodeExecutionEvent::set_is_dynamic(bool value) {
  
  is_dynamic_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.is_dynamic)
}

// string deck_uri = 19;
inline void NodeExecutionEvent::clear_deck_uri() {
  deck_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeExecutionEvent::deck_uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.deck_uri)
  return deck_uri_.GetNoArena();
}
inline void NodeExecutionEvent::set_deck_uri(const ::std::string& value) {
  
  deck_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.NodeExecutionEvent.deck_uri)
}
#if LANG_CXX11
inline void NodeExecutionEvent::set_deck_uri(::std::string&& value) {
  
  deck_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.NodeExecutionEvent.deck_uri)
}
#endif
inline void NodeExecutionEvent::set_deck_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deck_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.NodeExecutionEvent.deck_uri)
}
inline void NodeExecutionEvent::set_deck_uri(const char* value, size_t size) {
  
  deck_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.NodeExecutionEvent.deck_uri)
}
inline ::std::string* NodeExecutionEvent::mutable_deck_uri() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.deck_uri)
  return deck_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeExecutionEvent::release_deck_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.deck_uri)
  
  return deck_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeExecutionEvent::set_allocated_deck_uri(::std::string* deck_uri) {
  if (deck_uri != nullptr) {
    
  } else {
    
  }
  deck_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deck_uri);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.deck_uri)
}

// .google.protobuf.Timestamp reported_at = 21;
inline bool NodeExecutionEvent::has_reported_at() const {
  return this != internal_default_instance() && reported_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& NodeExecutionEvent::reported_at() const {
  const ::google::protobuf::Timestamp* p = reported_at_;
  // @@protoc_insertion_point(field_get:flyteidl.event.NodeExecutionEvent.reported_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* NodeExecutionEvent::release_reported_at() {
  // @@protoc_insertion_point(field_release:flyteidl.event.NodeExecutionEvent.reported_at)
  
  ::google::protobuf::Timestamp* temp = reported_at_;
  reported_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* NodeExecutionEvent::mutable_reported_at() {
  
  if (reported_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    reported_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.NodeExecutionEvent.reported_at)
  return reported_at_;
}
inline void NodeExecutionEvent::set_allocated_reported_at(::google::protobuf::Timestamp* reported_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reported_at_);
  }
  if (reported_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(reported_at)->GetArena();
    if (message_arena != submessage_arena) {
      reported_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reported_at, submessage_arena);
    }
    
  } else {
    
  }
  reported_at_ = reported_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.NodeExecutionEvent.reported_at)
}

inline bool NodeExecutionEvent::has_input_value() const {
  return input_value_case() != INPUT_VALUE_NOT_SET;
}
inline void NodeExecutionEvent::clear_has_input_value() {
  _oneof_case_[0] = INPUT_VALUE_NOT_SET;
}
inline bool NodeExecutionEvent::has_output_result() const {
  return output_result_case() != OUTPUT_RESULT_NOT_SET;
}
inline void NodeExecutionEvent::clear_has_output_result() {
  _oneof_case_[1] = OUTPUT_RESULT_NOT_SET;
}
inline bool NodeExecutionEvent::has_target_metadata() const {
  return target_metadata_case() != TARGET_METADATA_NOT_SET;
}
inline void NodeExecutionEvent::clear_has_target_metadata() {
  _oneof_case_[2] = TARGET_METADATA_NOT_SET;
}
inline NodeExecutionEvent::InputValueCase NodeExecutionEvent::input_value_case() const {
  return NodeExecutionEvent::InputValueCase(_oneof_case_[0]);
}
inline NodeExecutionEvent::OutputResultCase NodeExecutionEvent::output_result_case() const {
  return NodeExecutionEvent::OutputResultCase(_oneof_case_[1]);
}
inline NodeExecutionEvent::TargetMetadataCase NodeExecutionEvent::target_metadata_case() const {
  return NodeExecutionEvent::TargetMetadataCase(_oneof_case_[2]);
}
// -------------------------------------------------------------------

// WorkflowNodeMetadata

// .flyteidl.core.WorkflowExecutionIdentifier execution_id = 1;
inline bool WorkflowNodeMetadata::has_execution_id() const {
  return this != internal_default_instance() && execution_id_ != nullptr;
}
inline const ::flyteidl::core::WorkflowExecutionIdentifier& WorkflowNodeMetadata::execution_id() const {
  const ::flyteidl::core::WorkflowExecutionIdentifier* p = execution_id_;
  // @@protoc_insertion_point(field_get:flyteidl.event.WorkflowNodeMetadata.execution_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::WorkflowExecutionIdentifier*>(
      &::flyteidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* WorkflowNodeMetadata::release_execution_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.WorkflowNodeMetadata.execution_id)
  
  ::flyteidl::core::WorkflowExecutionIdentifier* temp = execution_id_;
  execution_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* WorkflowNodeMetadata::mutable_execution_id() {
  
  if (execution_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::WorkflowExecutionIdentifier>(GetArenaNoVirtual());
    execution_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.WorkflowNodeMetadata.execution_id)
  return execution_id_;
}
inline void WorkflowNodeMetadata::set_allocated_execution_id(::flyteidl::core::WorkflowExecutionIdentifier* execution_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(execution_id_);
  }
  if (execution_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      execution_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, execution_id, submessage_arena);
    }
    
  } else {
    
  }
  execution_id_ = execution_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.WorkflowNodeMetadata.execution_id)
}

// -------------------------------------------------------------------

// TaskNodeMetadata

// .flyteidl.core.CatalogCacheStatus cache_status = 1;
inline void TaskNodeMetadata::clear_cache_status() {
  cache_status_ = 0;
}
inline ::flyteidl::core::CatalogCacheStatus TaskNodeMetadata::cache_status() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskNodeMetadata.cache_status)
  return static_cast< ::flyteidl::core::CatalogCacheStatus >(cache_status_);
}
inline void TaskNodeMetadata::set_cache_status(::flyteidl::core::CatalogCacheStatus value) {
  
  cache_status_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskNodeMetadata.cache_status)
}

// .flyteidl.core.CatalogMetadata catalog_key = 2;
inline bool TaskNodeMetadata::has_catalog_key() const {
  return this != internal_default_instance() && catalog_key_ != nullptr;
}
inline const ::flyteidl::core::CatalogMetadata& TaskNodeMetadata::catalog_key() const {
  const ::flyteidl::core::CatalogMetadata* p = catalog_key_;
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskNodeMetadata.catalog_key)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::CatalogMetadata*>(
      &::flyteidl::core::_CatalogMetadata_default_instance_);
}
inline ::flyteidl::core::CatalogMetadata* TaskNodeMetadata::release_catalog_key() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskNodeMetadata.catalog_key)
  
  ::flyteidl::core::CatalogMetadata* temp = catalog_key_;
  catalog_key_ = nullptr;
  return temp;
}
inline ::flyteidl::core::CatalogMetadata* TaskNodeMetadata::mutable_catalog_key() {
  
  if (catalog_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::CatalogMetadata>(GetArenaNoVirtual());
    catalog_key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskNodeMetadata.catalog_key)
  return catalog_key_;
}
inline void TaskNodeMetadata::set_allocated_catalog_key(::flyteidl::core::CatalogMetadata* catalog_key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(catalog_key_);
  }
  if (catalog_key) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      catalog_key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, catalog_key, submessage_arena);
    }
    
  } else {
    
  }
  catalog_key_ = catalog_key;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskNodeMetadata.catalog_key)
}

// .flyteidl.core.CatalogReservation.Status reservation_status = 3;
inline void TaskNodeMetadata::clear_reservation_status() {
  reservation_status_ = 0;
}
inline ::flyteidl::core::CatalogReservation_Status TaskNodeMetadata::reservation_status() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskNodeMetadata.reservation_status)
  return static_cast< ::flyteidl::core::CatalogReservation_Status >(reservation_status_);
}
inline void TaskNodeMetadata::set_reservation_status(::flyteidl::core::CatalogReservation_Status value) {
  
  reservation_status_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskNodeMetadata.reservation_status)
}

// string checkpoint_uri = 4;
inline void TaskNodeMetadata::clear_checkpoint_uri() {
  checkpoint_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskNodeMetadata::checkpoint_uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskNodeMetadata.checkpoint_uri)
  return checkpoint_uri_.GetNoArena();
}
inline void TaskNodeMetadata::set_checkpoint_uri(const ::std::string& value) {
  
  checkpoint_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskNodeMetadata.checkpoint_uri)
}
#if LANG_CXX11
inline void TaskNodeMetadata::set_checkpoint_uri(::std::string&& value) {
  
  checkpoint_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.TaskNodeMetadata.checkpoint_uri)
}
#endif
inline void TaskNodeMetadata::set_checkpoint_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  checkpoint_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.TaskNodeMetadata.checkpoint_uri)
}
inline void TaskNodeMetadata::set_checkpoint_uri(const char* value, size_t size) {
  
  checkpoint_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.TaskNodeMetadata.checkpoint_uri)
}
inline ::std::string* TaskNodeMetadata::mutable_checkpoint_uri() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskNodeMetadata.checkpoint_uri)
  return checkpoint_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskNodeMetadata::release_checkpoint_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskNodeMetadata.checkpoint_uri)
  
  return checkpoint_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskNodeMetadata::set_allocated_checkpoint_uri(::std::string* checkpoint_uri) {
  if (checkpoint_uri != nullptr) {
    
  } else {
    
  }
  checkpoint_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), checkpoint_uri);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskNodeMetadata.checkpoint_uri)
}

// .flyteidl.event.DynamicWorkflowNodeMetadata dynamic_workflow = 16;
inline bool TaskNodeMetadata::has_dynamic_workflow() const {
  return this != internal_default_instance() && dynamic_workflow_ != nullptr;
}
inline void TaskNodeMetadata::clear_dynamic_workflow() {
  if (GetArenaNoVirtual() == nullptr && dynamic_workflow_ != nullptr) {
    delete dynamic_workflow_;
  }
  dynamic_workflow_ = nullptr;
}
inline const ::flyteidl::event::DynamicWorkflowNodeMetadata& TaskNodeMetadata::dynamic_workflow() const {
  const ::flyteidl::event::DynamicWorkflowNodeMetadata* p = dynamic_workflow_;
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskNodeMetadata.dynamic_workflow)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::event::DynamicWorkflowNodeMetadata*>(
      &::flyteidl::event::_DynamicWorkflowNodeMetadata_default_instance_);
}
inline ::flyteidl::event::DynamicWorkflowNodeMetadata* TaskNodeMetadata::release_dynamic_workflow() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskNodeMetadata.dynamic_workflow)
  
  ::flyteidl::event::DynamicWorkflowNodeMetadata* temp = dynamic_workflow_;
  dynamic_workflow_ = nullptr;
  return temp;
}
inline ::flyteidl::event::DynamicWorkflowNodeMetadata* TaskNodeMetadata::mutable_dynamic_workflow() {
  
  if (dynamic_workflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::event::DynamicWorkflowNodeMetadata>(GetArenaNoVirtual());
    dynamic_workflow_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskNodeMetadata.dynamic_workflow)
  return dynamic_workflow_;
}
inline void TaskNodeMetadata::set_allocated_dynamic_workflow(::flyteidl::event::DynamicWorkflowNodeMetadata* dynamic_workflow) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dynamic_workflow_;
  }
  if (dynamic_workflow) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dynamic_workflow = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dynamic_workflow, submessage_arena);
    }
    
  } else {
    
  }
  dynamic_workflow_ = dynamic_workflow;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskNodeMetadata.dynamic_workflow)
}

// -------------------------------------------------------------------

// DynamicWorkflowNodeMetadata

// .flyteidl.core.Identifier id = 1;
inline bool DynamicWorkflowNodeMetadata::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::flyteidl::core::Identifier& DynamicWorkflowNodeMetadata::id() const {
  const ::flyteidl::core::Identifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.event.DynamicWorkflowNodeMetadata.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Identifier*>(
      &::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* DynamicWorkflowNodeMetadata::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.DynamicWorkflowNodeMetadata.id)
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identifier* DynamicWorkflowNodeMetadata::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.DynamicWorkflowNodeMetadata.id)
  return id_;
}
inline void DynamicWorkflowNodeMetadata::set_allocated_id(::flyteidl::core::Identifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.DynamicWorkflowNodeMetadata.id)
}

// .flyteidl.core.CompiledWorkflowClosure compiled_workflow = 2;
inline bool DynamicWorkflowNodeMetadata::has_compiled_workflow() const {
  return this != internal_default_instance() && compiled_workflow_ != nullptr;
}
inline const ::flyteidl::core::CompiledWorkflowClosure& DynamicWorkflowNodeMetadata::compiled_workflow() const {
  const ::flyteidl::core::CompiledWorkflowClosure* p = compiled_workflow_;
  // @@protoc_insertion_point(field_get:flyteidl.event.DynamicWorkflowNodeMetadata.compiled_workflow)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::CompiledWorkflowClosure*>(
      &::flyteidl::core::_CompiledWorkflowClosure_default_instance_);
}
inline ::flyteidl::core::CompiledWorkflowClosure* DynamicWorkflowNodeMetadata::release_compiled_workflow() {
  // @@protoc_insertion_point(field_release:flyteidl.event.DynamicWorkflowNodeMetadata.compiled_workflow)
  
  ::flyteidl::core::CompiledWorkflowClosure* temp = compiled_workflow_;
  compiled_workflow_ = nullptr;
  return temp;
}
inline ::flyteidl::core::CompiledWorkflowClosure* DynamicWorkflowNodeMetadata::mutable_compiled_workflow() {
  
  if (compiled_workflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::CompiledWorkflowClosure>(GetArenaNoVirtual());
    compiled_workflow_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.DynamicWorkflowNodeMetadata.compiled_workflow)
  return compiled_workflow_;
}
inline void DynamicWorkflowNodeMetadata::set_allocated_compiled_workflow(::flyteidl::core::CompiledWorkflowClosure* compiled_workflow) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(compiled_workflow_);
  }
  if (compiled_workflow) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      compiled_workflow = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, compiled_workflow, submessage_arena);
    }
    
  } else {
    
  }
  compiled_workflow_ = compiled_workflow;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.DynamicWorkflowNodeMetadata.compiled_workflow)
}

// string dynamic_job_spec_uri = 3;
inline void DynamicWorkflowNodeMetadata::clear_dynamic_job_spec_uri() {
  dynamic_job_spec_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DynamicWorkflowNodeMetadata::dynamic_job_spec_uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.DynamicWorkflowNodeMetadata.dynamic_job_spec_uri)
  return dynamic_job_spec_uri_.GetNoArena();
}
inline void DynamicWorkflowNodeMetadata::set_dynamic_job_spec_uri(const ::std::string& value) {
  
  dynamic_job_spec_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.DynamicWorkflowNodeMetadata.dynamic_job_spec_uri)
}
#if LANG_CXX11
inline void DynamicWorkflowNodeMetadata::set_dynamic_job_spec_uri(::std::string&& value) {
  
  dynamic_job_spec_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.DynamicWorkflowNodeMetadata.dynamic_job_spec_uri)
}
#endif
inline void DynamicWorkflowNodeMetadata::set_dynamic_job_spec_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dynamic_job_spec_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.DynamicWorkflowNodeMetadata.dynamic_job_spec_uri)
}
inline void DynamicWorkflowNodeMetadata::set_dynamic_job_spec_uri(const char* value, size_t size) {
  
  dynamic_job_spec_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.DynamicWorkflowNodeMetadata.dynamic_job_spec_uri)
}
inline ::std::string* DynamicWorkflowNodeMetadata::mutable_dynamic_job_spec_uri() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.DynamicWorkflowNodeMetadata.dynamic_job_spec_uri)
  return dynamic_job_spec_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DynamicWorkflowNodeMetadata::release_dynamic_job_spec_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.event.DynamicWorkflowNodeMetadata.dynamic_job_spec_uri)
  
  return dynamic_job_spec_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DynamicWorkflowNodeMetadata::set_allocated_dynamic_job_spec_uri(::std::string* dynamic_job_spec_uri) {
  if (dynamic_job_spec_uri != nullptr) {
    
  } else {
    
  }
  dynamic_job_spec_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dynamic_job_spec_uri);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.DynamicWorkflowNodeMetadata.dynamic_job_spec_uri)
}

// -------------------------------------------------------------------

// ParentTaskExecutionMetadata

// .flyteidl.core.TaskExecutionIdentifier id = 1;
inline bool ParentTaskExecutionMetadata::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::flyteidl::core::TaskExecutionIdentifier& ParentTaskExecutionMetadata::id() const {
  const ::flyteidl::core::TaskExecutionIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.event.ParentTaskExecutionMetadata.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::TaskExecutionIdentifier*>(
      &::flyteidl::core::_TaskExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::TaskExecutionIdentifier* ParentTaskExecutionMetadata::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.ParentTaskExecutionMetadata.id)
  
  ::flyteidl::core::TaskExecutionIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::TaskExecutionIdentifier* ParentTaskExecutionMetadata::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::TaskExecutionIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.ParentTaskExecutionMetadata.id)
  return id_;
}
inline void ParentTaskExecutionMetadata::set_allocated_id(::flyteidl::core::TaskExecutionIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.ParentTaskExecutionMetadata.id)
}

// -------------------------------------------------------------------

// ParentNodeExecutionMetadata

// string node_id = 1;
inline void ParentNodeExecutionMetadata::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParentNodeExecutionMetadata::node_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.ParentNodeExecutionMetadata.node_id)
  return node_id_.GetNoArena();
}
inline void ParentNodeExecutionMetadata::set_node_id(const ::std::string& value) {
  
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.ParentNodeExecutionMetadata.node_id)
}
#if LANG_CXX11
inline void ParentNodeExecutionMetadata::set_node_id(::std::string&& value) {
  
  node_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.ParentNodeExecutionMetadata.node_id)
}
#endif
inline void ParentNodeExecutionMetadata::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.ParentNodeExecutionMetadata.node_id)
}
inline void ParentNodeExecutionMetadata::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.ParentNodeExecutionMetadata.node_id)
}
inline ::std::string* ParentNodeExecutionMetadata::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.ParentNodeExecutionMetadata.node_id)
  return node_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParentNodeExecutionMetadata::release_node_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.ParentNodeExecutionMetadata.node_id)
  
  return node_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParentNodeExecutionMetadata::set_allocated_node_id(::std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.ParentNodeExecutionMetadata.node_id)
}

// -------------------------------------------------------------------

// TaskExecutionEvent

// .flyteidl.core.Identifier task_id = 1;
inline bool TaskExecutionEvent::has_task_id() const {
  return this != internal_default_instance() && task_id_ != nullptr;
}
inline const ::flyteidl::core::Identifier& TaskExecutionEvent::task_id() const {
  const ::flyteidl::core::Identifier* p = task_id_;
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.task_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Identifier*>(
      &::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* TaskExecutionEvent::release_task_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.task_id)
  
  ::flyteidl::core::Identifier* temp = task_id_;
  task_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identifier* TaskExecutionEvent::mutable_task_id() {
  
  if (task_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identifier>(GetArenaNoVirtual());
    task_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.task_id)
  return task_id_;
}
inline void TaskExecutionEvent::set_allocated_task_id(::flyteidl::core::Identifier* task_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(task_id_);
  }
  if (task_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task_id, submessage_arena);
    }
    
  } else {
    
  }
  task_id_ = task_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.task_id)
}

// .flyteidl.core.NodeExecutionIdentifier parent_node_execution_id = 2;
inline bool TaskExecutionEvent::has_parent_node_execution_id() const {
  return this != internal_default_instance() && parent_node_execution_id_ != nullptr;
}
inline const ::flyteidl::core::NodeExecutionIdentifier& TaskExecutionEvent::parent_node_execution_id() const {
  const ::flyteidl::core::NodeExecutionIdentifier* p = parent_node_execution_id_;
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.parent_node_execution_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::NodeExecutionIdentifier*>(
      &::flyteidl::core::_NodeExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::NodeExecutionIdentifier* TaskExecutionEvent::release_parent_node_execution_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.parent_node_execution_id)
  
  ::flyteidl::core::NodeExecutionIdentifier* temp = parent_node_execution_id_;
  parent_node_execution_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::NodeExecutionIdentifier* TaskExecutionEvent::mutable_parent_node_execution_id() {
  
  if (parent_node_execution_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::NodeExecutionIdentifier>(GetArenaNoVirtual());
    parent_node_execution_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.parent_node_execution_id)
  return parent_node_execution_id_;
}
inline void TaskExecutionEvent::set_allocated_parent_node_execution_id(::flyteidl::core::NodeExecutionIdentifier* parent_node_execution_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(parent_node_execution_id_);
  }
  if (parent_node_execution_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parent_node_execution_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent_node_execution_id, submessage_arena);
    }
    
  } else {
    
  }
  parent_node_execution_id_ = parent_node_execution_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.parent_node_execution_id)
}

// uint32 retry_attempt = 3;
inline void TaskExecutionEvent::clear_retry_attempt() {
  retry_attempt_ = 0u;
}
inline ::google::protobuf::uint32 TaskExecutionEvent::retry_attempt() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.retry_attempt)
  return retry_attempt_;
}
inline void TaskExecutionEvent::set_retry_attempt(::google::protobuf::uint32 value) {
  
  retry_attempt_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.retry_attempt)
}

// .flyteidl.core.TaskExecution.Phase phase = 4;
inline void TaskExecutionEvent::clear_phase() {
  phase_ = 0;
}
inline ::flyteidl::core::TaskExecution_Phase TaskExecutionEvent::phase() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.phase)
  return static_cast< ::flyteidl::core::TaskExecution_Phase >(phase_);
}
inline void TaskExecutionEvent::set_phase(::flyteidl::core::TaskExecution_Phase value) {
  
  phase_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.phase)
}

// string producer_id = 5;
inline void TaskExecutionEvent::clear_producer_id() {
  producer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskExecutionEvent::producer_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.producer_id)
  return producer_id_.GetNoArena();
}
inline void TaskExecutionEvent::set_producer_id(const ::std::string& value) {
  
  producer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.producer_id)
}
#if LANG_CXX11
inline void TaskExecutionEvent::set_producer_id(::std::string&& value) {
  
  producer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.TaskExecutionEvent.producer_id)
}
#endif
inline void TaskExecutionEvent::set_producer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  producer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.TaskExecutionEvent.producer_id)
}
inline void TaskExecutionEvent::set_producer_id(const char* value, size_t size) {
  
  producer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.TaskExecutionEvent.producer_id)
}
inline ::std::string* TaskExecutionEvent::mutable_producer_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.producer_id)
  return producer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskExecutionEvent::release_producer_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.producer_id)
  
  return producer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskExecutionEvent::set_allocated_producer_id(::std::string* producer_id) {
  if (producer_id != nullptr) {
    
  } else {
    
  }
  producer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), producer_id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.producer_id)
}

// repeated .flyteidl.core.TaskLog logs = 6;
inline int TaskExecutionEvent::logs_size() const {
  return logs_.size();
}
inline ::flyteidl::core::TaskLog* TaskExecutionEvent::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.logs)
  return logs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::TaskLog >*
TaskExecutionEvent::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.event.TaskExecutionEvent.logs)
  return &logs_;
}
inline const ::flyteidl::core::TaskLog& TaskExecutionEvent::logs(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.logs)
  return logs_.Get(index);
}
inline ::flyteidl::core::TaskLog* TaskExecutionEvent::add_logs() {
  // @@protoc_insertion_point(field_add:flyteidl.event.TaskExecutionEvent.logs)
  return logs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::TaskLog >&
TaskExecutionEvent::logs() const {
  // @@protoc_insertion_point(field_list:flyteidl.event.TaskExecutionEvent.logs)
  return logs_;
}

// .google.protobuf.Timestamp occurred_at = 7;
inline bool TaskExecutionEvent::has_occurred_at() const {
  return this != internal_default_instance() && occurred_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& TaskExecutionEvent::occurred_at() const {
  const ::google::protobuf::Timestamp* p = occurred_at_;
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.occurred_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TaskExecutionEvent::release_occurred_at() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.occurred_at)
  
  ::google::protobuf::Timestamp* temp = occurred_at_;
  occurred_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TaskExecutionEvent::mutable_occurred_at() {
  
  if (occurred_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    occurred_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.occurred_at)
  return occurred_at_;
}
inline void TaskExecutionEvent::set_allocated_occurred_at(::google::protobuf::Timestamp* occurred_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(occurred_at_);
  }
  if (occurred_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(occurred_at)->GetArena();
    if (message_arena != submessage_arena) {
      occurred_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, occurred_at, submessage_arena);
    }
    
  } else {
    
  }
  occurred_at_ = occurred_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.occurred_at)
}

// string input_uri = 8;
inline bool TaskExecutionEvent::has_input_uri() const {
  return input_value_case() == kInputUri;
}
inline void TaskExecutionEvent::set_has_input_uri() {
  _oneof_case_[0] = kInputUri;
}
inline void TaskExecutionEvent::clear_input_uri() {
  if (has_input_uri()) {
    input_value_.input_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_input_value();
  }
}
inline const ::std::string& TaskExecutionEvent::input_uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.input_uri)
  if (has_input_uri()) {
    return input_value_.input_uri_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TaskExecutionEvent::set_input_uri(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.input_uri)
  if (!has_input_uri()) {
    clear_input_value();
    set_has_input_uri();
    input_value_.input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  input_value_.input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.input_uri)
}
#if LANG_CXX11
inline void TaskExecutionEvent::set_input_uri(::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.input_uri)
  if (!has_input_uri()) {
    clear_input_value();
    set_has_input_uri();
    input_value_.input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  input_value_.input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.TaskExecutionEvent.input_uri)
}
#endif
inline void TaskExecutionEvent::set_input_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_input_uri()) {
    clear_input_value();
    set_has_input_uri();
    input_value_.input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  input_value_.input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.TaskExecutionEvent.input_uri)
}
inline void TaskExecutionEvent::set_input_uri(const char* value, size_t size) {
  if (!has_input_uri()) {
    clear_input_value();
    set_has_input_uri();
    input_value_.input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  input_value_.input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.TaskExecutionEvent.input_uri)
}
inline ::std::string* TaskExecutionEvent::mutable_input_uri() {
  if (!has_input_uri()) {
    clear_input_value();
    set_has_input_uri();
    input_value_.input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.input_uri)
  return input_value_.input_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskExecutionEvent::release_input_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.input_uri)
  if (has_input_uri()) {
    clear_has_input_value();
    return input_value_.input_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TaskExecutionEvent::set_allocated_input_uri(::std::string* input_uri) {
  if (has_input_value()) {
    clear_input_value();
  }
  if (input_uri != nullptr) {
    set_has_input_uri();
    input_value_.input_uri_.UnsafeSetDefault(input_uri);
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.input_uri)
}

// .flyteidl.core.LiteralMap input_data = 19;
inline bool TaskExecutionEvent::has_input_data() const {
  return input_value_case() == kInputData;
}
inline void TaskExecutionEvent::set_has_input_data() {
  _oneof_case_[0] = kInputData;
}
inline ::flyteidl::core::LiteralMap* TaskExecutionEvent::release_input_data() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.input_data)
  if (has_input_data()) {
    clear_has_input_value();
      ::flyteidl::core::LiteralMap* temp = input_value_.input_data_;
    input_value_.input_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::LiteralMap& TaskExecutionEvent::input_data() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.input_data)
  return has_input_data()
      ? *input_value_.input_data_
      : *reinterpret_cast< ::flyteidl::core::LiteralMap*>(&::flyteidl::core::_LiteralMap_default_instance_);
}
inline ::flyteidl::core::LiteralMap* TaskExecutionEvent::mutable_input_data() {
  if (!has_input_data()) {
    clear_input_value();
    set_has_input_data();
    input_value_.input_data_ = CreateMaybeMessage< ::flyteidl::core::LiteralMap >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.input_data)
  return input_value_.input_data_;
}

// string output_uri = 9;
inline bool TaskExecutionEvent::has_output_uri() const {
  return output_result_case() == kOutputUri;
}
inline void TaskExecutionEvent::set_has_output_uri() {
  _oneof_case_[1] = kOutputUri;
}
inline void TaskExecutionEvent::clear_output_uri() {
  if (has_output_uri()) {
    output_result_.output_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_output_result();
  }
}
inline const ::std::string& TaskExecutionEvent::output_uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.output_uri)
  if (has_output_uri()) {
    return output_result_.output_uri_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TaskExecutionEvent::set_output_uri(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.output_uri)
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.output_uri)
}
#if LANG_CXX11
inline void TaskExecutionEvent::set_output_uri(::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.output_uri)
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.TaskExecutionEvent.output_uri)
}
#endif
inline void TaskExecutionEvent::set_output_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.TaskExecutionEvent.output_uri)
}
inline void TaskExecutionEvent::set_output_uri(const char* value, size_t size) {
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.TaskExecutionEvent.output_uri)
}
inline ::std::string* TaskExecutionEvent::mutable_output_uri() {
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.output_uri)
  return output_result_.output_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskExecutionEvent::release_output_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.output_uri)
  if (has_output_uri()) {
    clear_has_output_result();
    return output_result_.output_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TaskExecutionEvent::set_allocated_output_uri(::std::string* output_uri) {
  if (has_output_result()) {
    clear_output_result();
  }
  if (output_uri != nullptr) {
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(output_uri);
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.output_uri)
}

// .flyteidl.core.ExecutionError error = 10;
inline bool TaskExecutionEvent::has_error() const {
  return output_result_case() == kError;
}
inline void TaskExecutionEvent::set_has_error() {
  _oneof_case_[1] = kError;
}
inline ::flyteidl::core::ExecutionError* TaskExecutionEvent::release_error() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.error)
  if (has_error()) {
    clear_has_output_result();
      ::flyteidl::core::ExecutionError* temp = output_result_.error_;
    output_result_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::ExecutionError& TaskExecutionEvent::error() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.error)
  return has_error()
      ? *output_result_.error_
      : *reinterpret_cast< ::flyteidl::core::ExecutionError*>(&::flyteidl::core::_ExecutionError_default_instance_);
}
inline ::flyteidl::core::ExecutionError* TaskExecutionEvent::mutable_error() {
  if (!has_error()) {
    clear_output_result();
    set_has_error();
    output_result_.error_ = CreateMaybeMessage< ::flyteidl::core::ExecutionError >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.error)
  return output_result_.error_;
}

// .flyteidl.core.LiteralMap output_data = 17;
inline bool TaskExecutionEvent::has_output_data() const {
  return output_result_case() == kOutputData;
}
inline void TaskExecutionEvent::set_has_output_data() {
  _oneof_case_[1] = kOutputData;
}
inline ::flyteidl::core::LiteralMap* TaskExecutionEvent::release_output_data() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.output_data)
  if (has_output_data()) {
    clear_has_output_result();
      ::flyteidl::core::LiteralMap* temp = output_result_.output_data_;
    output_result_.output_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::LiteralMap& TaskExecutionEvent::output_data() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.output_data)
  return has_output_data()
      ? *output_result_.output_data_
      : *reinterpret_cast< ::flyteidl::core::LiteralMap*>(&::flyteidl::core::_LiteralMap_default_instance_);
}
inline ::flyteidl::core::LiteralMap* TaskExecutionEvent::mutable_output_data() {
  if (!has_output_data()) {
    clear_output_result();
    set_has_output_data();
    output_result_.output_data_ = CreateMaybeMessage< ::flyteidl::core::LiteralMap >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.output_data)
  return output_result_.output_data_;
}

// .google.protobuf.Struct custom_info = 11;
inline bool TaskExecutionEvent::has_custom_info() const {
  return this != internal_default_instance() && custom_info_ != nullptr;
}
inline const ::google::protobuf::Struct& TaskExecutionEvent::custom_info() const {
  const ::google::protobuf::Struct* p = custom_info_;
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.custom_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* TaskExecutionEvent::release_custom_info() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.custom_info)
  
  ::google::protobuf::Struct* temp = custom_info_;
  custom_info_ = nullptr;
  return temp;
}
inline ::google::protobuf::Struct* TaskExecutionEvent::mutable_custom_info() {
  
  if (custom_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArenaNoVirtual());
    custom_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.custom_info)
  return custom_info_;
}
inline void TaskExecutionEvent::set_allocated_custom_info(::google::protobuf::Struct* custom_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(custom_info_);
  }
  if (custom_info) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(custom_info)->GetArena();
    if (message_arena != submessage_arena) {
      custom_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, custom_info, submessage_arena);
    }
    
  } else {
    
  }
  custom_info_ = custom_info;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.custom_info)
}

// uint32 phase_version = 12;
inline void TaskExecutionEvent::clear_phase_version() {
  phase_version_ = 0u;
}
inline ::google::protobuf::uint32 TaskExecutionEvent::phase_version() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.phase_version)
  return phase_version_;
}
inline void TaskExecutionEvent::set_phase_version(::google::protobuf::uint32 value) {
  
  phase_version_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.phase_version)
}

// string reason = 13;
inline void TaskExecutionEvent::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskExecutionEvent::reason() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.reason)
  return reason_.GetNoArena();
}
inline void TaskExecutionEvent::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.reason)
}
#if LANG_CXX11
inline void TaskExecutionEvent::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.TaskExecutionEvent.reason)
}
#endif
inline void TaskExecutionEvent::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.TaskExecutionEvent.reason)
}
inline void TaskExecutionEvent::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.TaskExecutionEvent.reason)
}
inline ::std::string* TaskExecutionEvent::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskExecutionEvent::release_reason() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskExecutionEvent::set_allocated_reason(::std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.reason)
}

// string task_type = 14;
inline void TaskExecutionEvent::clear_task_type() {
  task_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskExecutionEvent::task_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.task_type)
  return task_type_.GetNoArena();
}
inline void TaskExecutionEvent::set_task_type(const ::std::string& value) {
  
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.task_type)
}
#if LANG_CXX11
inline void TaskExecutionEvent::set_task_type(::std::string&& value) {
  
  task_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.TaskExecutionEvent.task_type)
}
#endif
inline void TaskExecutionEvent::set_task_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.TaskExecutionEvent.task_type)
}
inline void TaskExecutionEvent::set_task_type(const char* value, size_t size) {
  
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.TaskExecutionEvent.task_type)
}
inline ::std::string* TaskExecutionEvent::mutable_task_type() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.task_type)
  return task_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskExecutionEvent::release_task_type() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.task_type)
  
  return task_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskExecutionEvent::set_allocated_task_type(::std::string* task_type) {
  if (task_type != nullptr) {
    
  } else {
    
  }
  task_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_type);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.task_type)
}

// .flyteidl.event.TaskExecutionMetadata metadata = 16;
inline bool TaskExecutionEvent::has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline void TaskExecutionEvent::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::flyteidl::event::TaskExecutionMetadata& TaskExecutionEvent::metadata() const {
  const ::flyteidl::event::TaskExecutionMetadata* p = metadata_;
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::event::TaskExecutionMetadata*>(
      &::flyteidl::event::_TaskExecutionMetadata_default_instance_);
}
inline ::flyteidl::event::TaskExecutionMetadata* TaskExecutionEvent::release_metadata() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.metadata)
  
  ::flyteidl::event::TaskExecutionMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::flyteidl::event::TaskExecutionMetadata* TaskExecutionEvent::mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::event::TaskExecutionMetadata>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.metadata)
  return metadata_;
}
inline void TaskExecutionEvent::set_allocated_metadata(::flyteidl::event::TaskExecutionMetadata* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.metadata)
}

// int32 event_version = 18;
inline void TaskExecutionEvent::clear_event_version() {
  event_version_ = 0;
}
inline ::google::protobuf::int32 TaskExecutionEvent::event_version() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.event_version)
  return event_version_;
}
inline void TaskExecutionEvent::set_event_version(::google::protobuf::int32 value) {
  
  event_version_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionEvent.event_version)
}

// .google.protobuf.Timestamp reported_at = 20;
inline bool TaskExecutionEvent::has_reported_at() const {
  return this != internal_default_instance() && reported_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& TaskExecutionEvent::reported_at() const {
  const ::google::protobuf::Timestamp* p = reported_at_;
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionEvent.reported_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TaskExecutionEvent::release_reported_at() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionEvent.reported_at)
  
  ::google::protobuf::Timestamp* temp = reported_at_;
  reported_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TaskExecutionEvent::mutable_reported_at() {
  
  if (reported_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    reported_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionEvent.reported_at)
  return reported_at_;
}
inline void TaskExecutionEvent::set_allocated_reported_at(::google::protobuf::Timestamp* reported_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reported_at_);
  }
  if (reported_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(reported_at)->GetArena();
    if (message_arena != submessage_arena) {
      reported_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reported_at, submessage_arena);
    }
    
  } else {
    
  }
  reported_at_ = reported_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionEvent.reported_at)
}

inline bool TaskExecutionEvent::has_input_value() const {
  return input_value_case() != INPUT_VALUE_NOT_SET;
}
inline void TaskExecutionEvent::clear_has_input_value() {
  _oneof_case_[0] = INPUT_VALUE_NOT_SET;
}
inline bool TaskExecutionEvent::has_output_result() const {
  return output_result_case() != OUTPUT_RESULT_NOT_SET;
}
inline void TaskExecutionEvent::clear_has_output_result() {
  _oneof_case_[1] = OUTPUT_RESULT_NOT_SET;
}
inline TaskExecutionEvent::InputValueCase TaskExecutionEvent::input_value_case() const {
  return TaskExecutionEvent::InputValueCase(_oneof_case_[0]);
}
inline TaskExecutionEvent::OutputResultCase TaskExecutionEvent::output_result_case() const {
  return TaskExecutionEvent::OutputResultCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// ExternalResourceInfo

// string external_id = 1;
inline void ExternalResourceInfo::clear_external_id() {
  external_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExternalResourceInfo::external_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.ExternalResourceInfo.external_id)
  return external_id_.GetNoArena();
}
inline void ExternalResourceInfo::set_external_id(const ::std::string& value) {
  
  external_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.ExternalResourceInfo.external_id)
}
#if LANG_CXX11
inline void ExternalResourceInfo::set_external_id(::std::string&& value) {
  
  external_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.ExternalResourceInfo.external_id)
}
#endif
inline void ExternalResourceInfo::set_external_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  external_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.ExternalResourceInfo.external_id)
}
inline void ExternalResourceInfo::set_external_id(const char* value, size_t size) {
  
  external_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.ExternalResourceInfo.external_id)
}
inline ::std::string* ExternalResourceInfo::mutable_external_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.ExternalResourceInfo.external_id)
  return external_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExternalResourceInfo::release_external_id() {
  // @@protoc_insertion_point(field_release:flyteidl.event.ExternalResourceInfo.external_id)
  
  return external_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalResourceInfo::set_allocated_external_id(::std::string* external_id) {
  if (external_id != nullptr) {
    
  } else {
    
  }
  external_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), external_id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.ExternalResourceInfo.external_id)
}

// uint32 index = 2;
inline void ExternalResourceInfo::clear_index() {
  index_ = 0u;
}
inline ::google::protobuf::uint32 ExternalResourceInfo::index() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.ExternalResourceInfo.index)
  return index_;
}
inline void ExternalResourceInfo::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.event.ExternalResourceInfo.index)
}

// uint32 retry_attempt = 3;
inline void ExternalResourceInfo::clear_retry_attempt() {
  retry_attempt_ = 0u;
}
inline ::google::protobuf::uint32 ExternalResourceInfo::retry_attempt() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.ExternalResourceInfo.retry_attempt)
  return retry_attempt_;
}
inline void ExternalResourceInfo::set_retry_attempt(::google::protobuf::uint32 value) {
  
  retry_attempt_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.event.ExternalResourceInfo.retry_attempt)
}

// .flyteidl.core.TaskExecution.Phase phase = 4;
inline void ExternalResourceInfo::clear_phase() {
  phase_ = 0;
}
inline ::flyteidl::core::TaskExecution_Phase ExternalResourceInfo::phase() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.ExternalResourceInfo.phase)
  return static_cast< ::flyteidl::core::TaskExecution_Phase >(phase_);
}
inline void ExternalResourceInfo::set_phase(::flyteidl::core::TaskExecution_Phase value) {
  
  phase_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.event.ExternalResourceInfo.phase)
}

// .flyteidl.core.CatalogCacheStatus cache_status = 5;
inline void ExternalResourceInfo::clear_cache_status() {
  cache_status_ = 0;
}
inline ::flyteidl::core::CatalogCacheStatus ExternalResourceInfo::cache_status() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.ExternalResourceInfo.cache_status)
  return static_cast< ::flyteidl::core::CatalogCacheStatus >(cache_status_);
}
inline void ExternalResourceInfo::set_cache_status(::flyteidl::core::CatalogCacheStatus value) {
  
  cache_status_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.event.ExternalResourceInfo.cache_status)
}

// repeated .flyteidl.core.TaskLog logs = 6;
inline int ExternalResourceInfo::logs_size() const {
  return logs_.size();
}
inline ::flyteidl::core::TaskLog* ExternalResourceInfo::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.event.ExternalResourceInfo.logs)
  return logs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::TaskLog >*
ExternalResourceInfo::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.event.ExternalResourceInfo.logs)
  return &logs_;
}
inline const ::flyteidl::core::TaskLog& ExternalResourceInfo::logs(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.event.ExternalResourceInfo.logs)
  return logs_.Get(index);
}
inline ::flyteidl::core::TaskLog* ExternalResourceInfo::add_logs() {
  // @@protoc_insertion_point(field_add:flyteidl.event.ExternalResourceInfo.logs)
  return logs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::TaskLog >&
ExternalResourceInfo::logs() const {
  // @@protoc_insertion_point(field_list:flyteidl.event.ExternalResourceInfo.logs)
  return logs_;
}

// -------------------------------------------------------------------

// ResourcePoolInfo

// string allocation_token = 1;
inline void ResourcePoolInfo::clear_allocation_token() {
  allocation_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResourcePoolInfo::allocation_token() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.ResourcePoolInfo.allocation_token)
  return allocation_token_.GetNoArena();
}
inline void ResourcePoolInfo::set_allocation_token(const ::std::string& value) {
  
  allocation_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.ResourcePoolInfo.allocation_token)
}
#if LANG_CXX11
inline void ResourcePoolInfo::set_allocation_token(::std::string&& value) {
  
  allocation_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.ResourcePoolInfo.allocation_token)
}
#endif
inline void ResourcePoolInfo::set_allocation_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  allocation_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.ResourcePoolInfo.allocation_token)
}
inline void ResourcePoolInfo::set_allocation_token(const char* value, size_t size) {
  
  allocation_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.ResourcePoolInfo.allocation_token)
}
inline ::std::string* ResourcePoolInfo::mutable_allocation_token() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.ResourcePoolInfo.allocation_token)
  return allocation_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResourcePoolInfo::release_allocation_token() {
  // @@protoc_insertion_point(field_release:flyteidl.event.ResourcePoolInfo.allocation_token)
  
  return allocation_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourcePoolInfo::set_allocated_allocation_token(::std::string* allocation_token) {
  if (allocation_token != nullptr) {
    
  } else {
    
  }
  allocation_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), allocation_token);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.ResourcePoolInfo.allocation_token)
}

// string namespace = 2;
inline void ResourcePoolInfo::clear_namespace_() {
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResourcePoolInfo::namespace_() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.ResourcePoolInfo.namespace)
  return namespace__.GetNoArena();
}
inline void ResourcePoolInfo::set_namespace_(const ::std::string& value) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.ResourcePoolInfo.namespace)
}
#if LANG_CXX11
inline void ResourcePoolInfo::set_namespace_(::std::string&& value) {
  
  namespace__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.ResourcePoolInfo.namespace)
}
#endif
inline void ResourcePoolInfo::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.ResourcePoolInfo.namespace)
}
inline void ResourcePoolInfo::set_namespace_(const char* value, size_t size) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.ResourcePoolInfo.namespace)
}
inline ::std::string* ResourcePoolInfo::mutable_namespace_() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.ResourcePoolInfo.namespace)
  return namespace__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResourcePoolInfo::release_namespace_() {
  // @@protoc_insertion_point(field_release:flyteidl.event.ResourcePoolInfo.namespace)
  
  return namespace__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourcePoolInfo::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.ResourcePoolInfo.namespace)
}

// -------------------------------------------------------------------

// TaskExecutionMetadata

// string generated_name = 1;
inline void TaskExecutionMetadata::clear_generated_name() {
  generated_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskExecutionMetadata::generated_name() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionMetadata.generated_name)
  return generated_name_.GetNoArena();
}
inline void TaskExecutionMetadata::set_generated_name(const ::std::string& value) {
  
  generated_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionMetadata.generated_name)
}
#if LANG_CXX11
inline void TaskExecutionMetadata::set_generated_name(::std::string&& value) {
  
  generated_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.TaskExecutionMetadata.generated_name)
}
#endif
inline void TaskExecutionMetadata::set_generated_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  generated_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.TaskExecutionMetadata.generated_name)
}
inline void TaskExecutionMetadata::set_generated_name(const char* value, size_t size) {
  
  generated_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.TaskExecutionMetadata.generated_name)
}
inline ::std::string* TaskExecutionMetadata::mutable_generated_name() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionMetadata.generated_name)
  return generated_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskExecutionMetadata::release_generated_name() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionMetadata.generated_name)
  
  return generated_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskExecutionMetadata::set_allocated_generated_name(::std::string* generated_name) {
  if (generated_name != nullptr) {
    
  } else {
    
  }
  generated_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), generated_name);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionMetadata.generated_name)
}

// repeated .flyteidl.event.ExternalResourceInfo external_resources = 2;
inline int TaskExecutionMetadata::external_resources_size() const {
  return external_resources_.size();
}
inline void TaskExecutionMetadata::clear_external_resources() {
  external_resources_.Clear();
}
inline ::flyteidl::event::ExternalResourceInfo* TaskExecutionMetadata::mutable_external_resources(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionMetadata.external_resources)
  return external_resources_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::event::ExternalResourceInfo >*
TaskExecutionMetadata::mutable_external_resources() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.event.TaskExecutionMetadata.external_resources)
  return &external_resources_;
}
inline const ::flyteidl::event::ExternalResourceInfo& TaskExecutionMetadata::external_resources(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionMetadata.external_resources)
  return external_resources_.Get(index);
}
inline ::flyteidl::event::ExternalResourceInfo* TaskExecutionMetadata::add_external_resources() {
  // @@protoc_insertion_point(field_add:flyteidl.event.TaskExecutionMetadata.external_resources)
  return external_resources_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::event::ExternalResourceInfo >&
TaskExecutionMetadata::external_resources() const {
  // @@protoc_insertion_point(field_list:flyteidl.event.TaskExecutionMetadata.external_resources)
  return external_resources_;
}

// repeated .flyteidl.event.ResourcePoolInfo resource_pool_info = 3;
inline int TaskExecutionMetadata::resource_pool_info_size() const {
  return resource_pool_info_.size();
}
inline void TaskExecutionMetadata::clear_resource_pool_info() {
  resource_pool_info_.Clear();
}
inline ::flyteidl::event::ResourcePoolInfo* TaskExecutionMetadata::mutable_resource_pool_info(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionMetadata.resource_pool_info)
  return resource_pool_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::event::ResourcePoolInfo >*
TaskExecutionMetadata::mutable_resource_pool_info() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.event.TaskExecutionMetadata.resource_pool_info)
  return &resource_pool_info_;
}
inline const ::flyteidl::event::ResourcePoolInfo& TaskExecutionMetadata::resource_pool_info(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionMetadata.resource_pool_info)
  return resource_pool_info_.Get(index);
}
inline ::flyteidl::event::ResourcePoolInfo* TaskExecutionMetadata::add_resource_pool_info() {
  // @@protoc_insertion_point(field_add:flyteidl.event.TaskExecutionMetadata.resource_pool_info)
  return resource_pool_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::event::ResourcePoolInfo >&
TaskExecutionMetadata::resource_pool_info() const {
  // @@protoc_insertion_point(field_list:flyteidl.event.TaskExecutionMetadata.resource_pool_info)
  return resource_pool_info_;
}

// string plugin_identifier = 4;
inline void TaskExecutionMetadata::clear_plugin_identifier() {
  plugin_identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskExecutionMetadata::plugin_identifier() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionMetadata.plugin_identifier)
  return plugin_identifier_.GetNoArena();
}
inline void TaskExecutionMetadata::set_plugin_identifier(const ::std::string& value) {
  
  plugin_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionMetadata.plugin_identifier)
}
#if LANG_CXX11
inline void TaskExecutionMetadata::set_plugin_identifier(::std::string&& value) {
  
  plugin_identifier_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.event.TaskExecutionMetadata.plugin_identifier)
}
#endif
inline void TaskExecutionMetadata::set_plugin_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  plugin_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.event.TaskExecutionMetadata.plugin_identifier)
}
inline void TaskExecutionMetadata::set_plugin_identifier(const char* value, size_t size) {
  
  plugin_identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.event.TaskExecutionMetadata.plugin_identifier)
}
inline ::std::string* TaskExecutionMetadata::mutable_plugin_identifier() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.event.TaskExecutionMetadata.plugin_identifier)
  return plugin_identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskExecutionMetadata::release_plugin_identifier() {
  // @@protoc_insertion_point(field_release:flyteidl.event.TaskExecutionMetadata.plugin_identifier)
  
  return plugin_identifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskExecutionMetadata::set_allocated_plugin_identifier(::std::string* plugin_identifier) {
  if (plugin_identifier != nullptr) {
    
  } else {
    
  }
  plugin_identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plugin_identifier);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.TaskExecutionMetadata.plugin_identifier)
}

// .flyteidl.event.TaskExecutionMetadata.InstanceClass instance_class = 16;
inline void TaskExecutionMetadata::clear_instance_class() {
  instance_class_ = 0;
}
inline ::flyteidl::event::TaskExecutionMetadata_InstanceClass TaskExecutionMetadata::instance_class() const {
  // @@protoc_insertion_point(field_get:flyteidl.event.TaskExecutionMetadata.instance_class)
  return static_cast< ::flyteidl::event::TaskExecutionMetadata_InstanceClass >(instance_class_);
}
inline void TaskExecutionMetadata::set_instance_class(::flyteidl::event::TaskExecutionMetadata_InstanceClass value) {
  
  instance_class_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.event.TaskExecutionMetadata.instance_class)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace event
}  // namespace flyteidl

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::flyteidl::event::TaskExecutionMetadata_InstanceClass> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::event::TaskExecutionMetadata_InstanceClass>() {
  return ::flyteidl::event::TaskExecutionMetadata_InstanceClass_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fevent_2fevent_2eproto
