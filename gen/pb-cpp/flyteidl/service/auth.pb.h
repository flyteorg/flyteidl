// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/service/auth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fservice_2fauth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fservice_2fauth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "protoc-gen-swagger/options/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fservice_2fauth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fservice_2fauth_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fservice_2fauth_2eproto;
namespace flyteidl {
namespace service {
class OAuth2MetadataRequest;
struct OAuth2MetadataRequestDefaultTypeInternal;
extern OAuth2MetadataRequestDefaultTypeInternal _OAuth2MetadataRequest_default_instance_;
class OAuth2MetadataResponse;
struct OAuth2MetadataResponseDefaultTypeInternal;
extern OAuth2MetadataResponseDefaultTypeInternal _OAuth2MetadataResponse_default_instance_;
class PublicClientAuthConfigRequest;
struct PublicClientAuthConfigRequestDefaultTypeInternal;
extern PublicClientAuthConfigRequestDefaultTypeInternal _PublicClientAuthConfigRequest_default_instance_;
class PublicClientAuthConfigResponse;
struct PublicClientAuthConfigResponseDefaultTypeInternal;
extern PublicClientAuthConfigResponseDefaultTypeInternal _PublicClientAuthConfigResponse_default_instance_;
}  // namespace service
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::service::OAuth2MetadataRequest* Arena::CreateMaybeMessage<::flyteidl::service::OAuth2MetadataRequest>(Arena*);
template<> ::flyteidl::service::OAuth2MetadataResponse* Arena::CreateMaybeMessage<::flyteidl::service::OAuth2MetadataResponse>(Arena*);
template<> ::flyteidl::service::PublicClientAuthConfigRequest* Arena::CreateMaybeMessage<::flyteidl::service::PublicClientAuthConfigRequest>(Arena*);
template<> ::flyteidl::service::PublicClientAuthConfigResponse* Arena::CreateMaybeMessage<::flyteidl::service::PublicClientAuthConfigResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace service {

// ===================================================================

class OAuth2MetadataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:flyteidl.service.OAuth2MetadataRequest) */ {
 public:
  inline OAuth2MetadataRequest() : OAuth2MetadataRequest(nullptr) {}
  explicit constexpr OAuth2MetadataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OAuth2MetadataRequest(const OAuth2MetadataRequest& from);
  OAuth2MetadataRequest(OAuth2MetadataRequest&& from) noexcept
    : OAuth2MetadataRequest() {
    *this = ::std::move(from);
  }

  inline OAuth2MetadataRequest& operator=(const OAuth2MetadataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OAuth2MetadataRequest& operator=(OAuth2MetadataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OAuth2MetadataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OAuth2MetadataRequest* internal_default_instance() {
    return reinterpret_cast<const OAuth2MetadataRequest*>(
               &_OAuth2MetadataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OAuth2MetadataRequest& a, OAuth2MetadataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OAuth2MetadataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OAuth2MetadataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OAuth2MetadataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OAuth2MetadataRequest>(arena);
  }

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.service.OAuth2MetadataRequest";
  }
  protected:
  explicit OAuth2MetadataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.service.OAuth2MetadataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fservice_2fauth_2eproto;
};
// -------------------------------------------------------------------

class OAuth2MetadataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.service.OAuth2MetadataResponse) */ {
 public:
  inline OAuth2MetadataResponse() : OAuth2MetadataResponse(nullptr) {}
  ~OAuth2MetadataResponse() override;
  explicit constexpr OAuth2MetadataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OAuth2MetadataResponse(const OAuth2MetadataResponse& from);
  OAuth2MetadataResponse(OAuth2MetadataResponse&& from) noexcept
    : OAuth2MetadataResponse() {
    *this = ::std::move(from);
  }

  inline OAuth2MetadataResponse& operator=(const OAuth2MetadataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OAuth2MetadataResponse& operator=(OAuth2MetadataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OAuth2MetadataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OAuth2MetadataResponse* internal_default_instance() {
    return reinterpret_cast<const OAuth2MetadataResponse*>(
               &_OAuth2MetadataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OAuth2MetadataResponse& a, OAuth2MetadataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OAuth2MetadataResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OAuth2MetadataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OAuth2MetadataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OAuth2MetadataResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OAuth2MetadataResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.service.OAuth2MetadataResponse";
  }
  protected:
  explicit OAuth2MetadataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseTypesSupportedFieldNumber = 4,
    kScopesSupportedFieldNumber = 5,
    kTokenEndpointAuthMethodsSupportedFieldNumber = 6,
    kCodeChallengeMethodsSupportedFieldNumber = 8,
    kGrantTypesSupportedFieldNumber = 9,
    kIssuerFieldNumber = 1,
    kAuthorizationEndpointFieldNumber = 2,
    kTokenEndpointFieldNumber = 3,
    kJwksUriFieldNumber = 7,
  };
  // repeated string response_types_supported = 4 [json_name = "responseTypesSupported"];
  int response_types_supported_size() const;
  private:
  int _internal_response_types_supported_size() const;
  public:
  void clear_response_types_supported();
  const std::string& response_types_supported(int index) const;
  std::string* mutable_response_types_supported(int index);
  void set_response_types_supported(int index, const std::string& value);
  void set_response_types_supported(int index, std::string&& value);
  void set_response_types_supported(int index, const char* value);
  void set_response_types_supported(int index, const char* value, size_t size);
  std::string* add_response_types_supported();
  void add_response_types_supported(const std::string& value);
  void add_response_types_supported(std::string&& value);
  void add_response_types_supported(const char* value);
  void add_response_types_supported(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& response_types_supported() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_response_types_supported();
  private:
  const std::string& _internal_response_types_supported(int index) const;
  std::string* _internal_add_response_types_supported();
  public:

  // repeated string scopes_supported = 5 [json_name = "scopesSupported"];
  int scopes_supported_size() const;
  private:
  int _internal_scopes_supported_size() const;
  public:
  void clear_scopes_supported();
  const std::string& scopes_supported(int index) const;
  std::string* mutable_scopes_supported(int index);
  void set_scopes_supported(int index, const std::string& value);
  void set_scopes_supported(int index, std::string&& value);
  void set_scopes_supported(int index, const char* value);
  void set_scopes_supported(int index, const char* value, size_t size);
  std::string* add_scopes_supported();
  void add_scopes_supported(const std::string& value);
  void add_scopes_supported(std::string&& value);
  void add_scopes_supported(const char* value);
  void add_scopes_supported(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scopes_supported() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scopes_supported();
  private:
  const std::string& _internal_scopes_supported(int index) const;
  std::string* _internal_add_scopes_supported();
  public:

  // repeated string token_endpoint_auth_methods_supported = 6 [json_name = "tokenEndpointAuthMethodsSupported"];
  int token_endpoint_auth_methods_supported_size() const;
  private:
  int _internal_token_endpoint_auth_methods_supported_size() const;
  public:
  void clear_token_endpoint_auth_methods_supported();
  const std::string& token_endpoint_auth_methods_supported(int index) const;
  std::string* mutable_token_endpoint_auth_methods_supported(int index);
  void set_token_endpoint_auth_methods_supported(int index, const std::string& value);
  void set_token_endpoint_auth_methods_supported(int index, std::string&& value);
  void set_token_endpoint_auth_methods_supported(int index, const char* value);
  void set_token_endpoint_auth_methods_supported(int index, const char* value, size_t size);
  std::string* add_token_endpoint_auth_methods_supported();
  void add_token_endpoint_auth_methods_supported(const std::string& value);
  void add_token_endpoint_auth_methods_supported(std::string&& value);
  void add_token_endpoint_auth_methods_supported(const char* value);
  void add_token_endpoint_auth_methods_supported(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& token_endpoint_auth_methods_supported() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_token_endpoint_auth_methods_supported();
  private:
  const std::string& _internal_token_endpoint_auth_methods_supported(int index) const;
  std::string* _internal_add_token_endpoint_auth_methods_supported();
  public:

  // repeated string code_challenge_methods_supported = 8 [json_name = "codeChallengeMethodsSupported"];
  int code_challenge_methods_supported_size() const;
  private:
  int _internal_code_challenge_methods_supported_size() const;
  public:
  void clear_code_challenge_methods_supported();
  const std::string& code_challenge_methods_supported(int index) const;
  std::string* mutable_code_challenge_methods_supported(int index);
  void set_code_challenge_methods_supported(int index, const std::string& value);
  void set_code_challenge_methods_supported(int index, std::string&& value);
  void set_code_challenge_methods_supported(int index, const char* value);
  void set_code_challenge_methods_supported(int index, const char* value, size_t size);
  std::string* add_code_challenge_methods_supported();
  void add_code_challenge_methods_supported(const std::string& value);
  void add_code_challenge_methods_supported(std::string&& value);
  void add_code_challenge_methods_supported(const char* value);
  void add_code_challenge_methods_supported(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& code_challenge_methods_supported() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_code_challenge_methods_supported();
  private:
  const std::string& _internal_code_challenge_methods_supported(int index) const;
  std::string* _internal_add_code_challenge_methods_supported();
  public:

  // repeated string grant_types_supported = 9 [json_name = "grantTypesSupported"];
  int grant_types_supported_size() const;
  private:
  int _internal_grant_types_supported_size() const;
  public:
  void clear_grant_types_supported();
  const std::string& grant_types_supported(int index) const;
  std::string* mutable_grant_types_supported(int index);
  void set_grant_types_supported(int index, const std::string& value);
  void set_grant_types_supported(int index, std::string&& value);
  void set_grant_types_supported(int index, const char* value);
  void set_grant_types_supported(int index, const char* value, size_t size);
  std::string* add_grant_types_supported();
  void add_grant_types_supported(const std::string& value);
  void add_grant_types_supported(std::string&& value);
  void add_grant_types_supported(const char* value);
  void add_grant_types_supported(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& grant_types_supported() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_grant_types_supported();
  private:
  const std::string& _internal_grant_types_supported(int index) const;
  std::string* _internal_add_grant_types_supported();
  public:

  // string issuer = 1 [json_name = "issuer"];
  void clear_issuer();
  const std::string& issuer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_issuer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_issuer();
  PROTOBUF_NODISCARD std::string* release_issuer();
  void set_allocated_issuer(std::string* issuer);
  private:
  const std::string& _internal_issuer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_issuer(const std::string& value);
  std::string* _internal_mutable_issuer();
  public:

  // string authorization_endpoint = 2 [json_name = "authorizationEndpoint"];
  void clear_authorization_endpoint();
  const std::string& authorization_endpoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_authorization_endpoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_authorization_endpoint();
  PROTOBUF_NODISCARD std::string* release_authorization_endpoint();
  void set_allocated_authorization_endpoint(std::string* authorization_endpoint);
  private:
  const std::string& _internal_authorization_endpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authorization_endpoint(const std::string& value);
  std::string* _internal_mutable_authorization_endpoint();
  public:

  // string token_endpoint = 3 [json_name = "tokenEndpoint"];
  void clear_token_endpoint();
  const std::string& token_endpoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_endpoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_endpoint();
  PROTOBUF_NODISCARD std::string* release_token_endpoint();
  void set_allocated_token_endpoint(std::string* token_endpoint);
  private:
  const std::string& _internal_token_endpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_endpoint(const std::string& value);
  std::string* _internal_mutable_token_endpoint();
  public:

  // string jwks_uri = 7 [json_name = "jwksUri"];
  void clear_jwks_uri();
  const std::string& jwks_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_jwks_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_jwks_uri();
  PROTOBUF_NODISCARD std::string* release_jwks_uri();
  void set_allocated_jwks_uri(std::string* jwks_uri);
  private:
  const std::string& _internal_jwks_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_jwks_uri(const std::string& value);
  std::string* _internal_mutable_jwks_uri();
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.service.OAuth2MetadataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> response_types_supported_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scopes_supported_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> token_endpoint_auth_methods_supported_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> code_challenge_methods_supported_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> grant_types_supported_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr issuer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authorization_endpoint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_endpoint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jwks_uri_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fservice_2fauth_2eproto;
};
// -------------------------------------------------------------------

class PublicClientAuthConfigRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:flyteidl.service.PublicClientAuthConfigRequest) */ {
 public:
  inline PublicClientAuthConfigRequest() : PublicClientAuthConfigRequest(nullptr) {}
  explicit constexpr PublicClientAuthConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublicClientAuthConfigRequest(const PublicClientAuthConfigRequest& from);
  PublicClientAuthConfigRequest(PublicClientAuthConfigRequest&& from) noexcept
    : PublicClientAuthConfigRequest() {
    *this = ::std::move(from);
  }

  inline PublicClientAuthConfigRequest& operator=(const PublicClientAuthConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublicClientAuthConfigRequest& operator=(PublicClientAuthConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublicClientAuthConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublicClientAuthConfigRequest* internal_default_instance() {
    return reinterpret_cast<const PublicClientAuthConfigRequest*>(
               &_PublicClientAuthConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PublicClientAuthConfigRequest& a, PublicClientAuthConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublicClientAuthConfigRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublicClientAuthConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublicClientAuthConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublicClientAuthConfigRequest>(arena);
  }

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.service.PublicClientAuthConfigRequest";
  }
  protected:
  explicit PublicClientAuthConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.service.PublicClientAuthConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fservice_2fauth_2eproto;
};
// -------------------------------------------------------------------

class PublicClientAuthConfigResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.service.PublicClientAuthConfigResponse) */ {
 public:
  inline PublicClientAuthConfigResponse() : PublicClientAuthConfigResponse(nullptr) {}
  ~PublicClientAuthConfigResponse() override;
  explicit constexpr PublicClientAuthConfigResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublicClientAuthConfigResponse(const PublicClientAuthConfigResponse& from);
  PublicClientAuthConfigResponse(PublicClientAuthConfigResponse&& from) noexcept
    : PublicClientAuthConfigResponse() {
    *this = ::std::move(from);
  }

  inline PublicClientAuthConfigResponse& operator=(const PublicClientAuthConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublicClientAuthConfigResponse& operator=(PublicClientAuthConfigResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublicClientAuthConfigResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublicClientAuthConfigResponse* internal_default_instance() {
    return reinterpret_cast<const PublicClientAuthConfigResponse*>(
               &_PublicClientAuthConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PublicClientAuthConfigResponse& a, PublicClientAuthConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PublicClientAuthConfigResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublicClientAuthConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublicClientAuthConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublicClientAuthConfigResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicClientAuthConfigResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.service.PublicClientAuthConfigResponse";
  }
  protected:
  explicit PublicClientAuthConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScopesFieldNumber = 3,
    kClientIdFieldNumber = 1,
    kRedirectUriFieldNumber = 2,
    kAuthorizationMetadataKeyFieldNumber = 4,
    kServiceHttpEndpointFieldNumber = 5,
  };
  // repeated string scopes = 3 [json_name = "scopes"];
  int scopes_size() const;
  private:
  int _internal_scopes_size() const;
  public:
  void clear_scopes();
  const std::string& scopes(int index) const;
  std::string* mutable_scopes(int index);
  void set_scopes(int index, const std::string& value);
  void set_scopes(int index, std::string&& value);
  void set_scopes(int index, const char* value);
  void set_scopes(int index, const char* value, size_t size);
  std::string* add_scopes();
  void add_scopes(const std::string& value);
  void add_scopes(std::string&& value);
  void add_scopes(const char* value);
  void add_scopes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scopes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scopes();
  private:
  const std::string& _internal_scopes(int index) const;
  std::string* _internal_add_scopes();
  public:

  // string client_id = 1 [json_name = "clientId"];
  void clear_client_id();
  const std::string& client_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string redirect_uri = 2 [json_name = "redirectUri"];
  void clear_redirect_uri();
  const std::string& redirect_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_redirect_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_redirect_uri();
  PROTOBUF_NODISCARD std::string* release_redirect_uri();
  void set_allocated_redirect_uri(std::string* redirect_uri);
  private:
  const std::string& _internal_redirect_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_redirect_uri(const std::string& value);
  std::string* _internal_mutable_redirect_uri();
  public:

  // string authorization_metadata_key = 4 [json_name = "authorizationMetadataKey"];
  void clear_authorization_metadata_key();
  const std::string& authorization_metadata_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_authorization_metadata_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_authorization_metadata_key();
  PROTOBUF_NODISCARD std::string* release_authorization_metadata_key();
  void set_allocated_authorization_metadata_key(std::string* authorization_metadata_key);
  private:
  const std::string& _internal_authorization_metadata_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authorization_metadata_key(const std::string& value);
  std::string* _internal_mutable_authorization_metadata_key();
  public:

  // string service_http_endpoint = 5 [json_name = "serviceHttpEndpoint"];
  void clear_service_http_endpoint();
  const std::string& service_http_endpoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_http_endpoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_http_endpoint();
  PROTOBUF_NODISCARD std::string* release_service_http_endpoint();
  void set_allocated_service_http_endpoint(std::string* service_http_endpoint);
  private:
  const std::string& _internal_service_http_endpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_http_endpoint(const std::string& value);
  std::string* _internal_mutable_service_http_endpoint();
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.service.PublicClientAuthConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scopes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redirect_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authorization_metadata_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_http_endpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fservice_2fauth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OAuth2MetadataRequest

// -------------------------------------------------------------------

// OAuth2MetadataResponse

// string issuer = 1 [json_name = "issuer"];
inline void OAuth2MetadataResponse::clear_issuer() {
  issuer_.ClearToEmpty();
}
inline const std::string& OAuth2MetadataResponse::issuer() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.OAuth2MetadataResponse.issuer)
  return _internal_issuer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OAuth2MetadataResponse::set_issuer(ArgT0&& arg0, ArgT... args) {
 
 issuer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.issuer)
}
inline std::string* OAuth2MetadataResponse::mutable_issuer() {
  std::string* _s = _internal_mutable_issuer();
  // @@protoc_insertion_point(field_mutable:flyteidl.service.OAuth2MetadataResponse.issuer)
  return _s;
}
inline const std::string& OAuth2MetadataResponse::_internal_issuer() const {
  return issuer_.Get();
}
inline void OAuth2MetadataResponse::_internal_set_issuer(const std::string& value) {
  
  issuer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OAuth2MetadataResponse::_internal_mutable_issuer() {
  
  return issuer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OAuth2MetadataResponse::release_issuer() {
  // @@protoc_insertion_point(field_release:flyteidl.service.OAuth2MetadataResponse.issuer)
  return issuer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OAuth2MetadataResponse::set_allocated_issuer(std::string* issuer) {
  if (issuer != nullptr) {
    
  } else {
    
  }
  issuer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), issuer,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (issuer_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    issuer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.OAuth2MetadataResponse.issuer)
}

// string authorization_endpoint = 2 [json_name = "authorizationEndpoint"];
inline void OAuth2MetadataResponse::clear_authorization_endpoint() {
  authorization_endpoint_.ClearToEmpty();
}
inline const std::string& OAuth2MetadataResponse::authorization_endpoint() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.OAuth2MetadataResponse.authorization_endpoint)
  return _internal_authorization_endpoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OAuth2MetadataResponse::set_authorization_endpoint(ArgT0&& arg0, ArgT... args) {
 
 authorization_endpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.authorization_endpoint)
}
inline std::string* OAuth2MetadataResponse::mutable_authorization_endpoint() {
  std::string* _s = _internal_mutable_authorization_endpoint();
  // @@protoc_insertion_point(field_mutable:flyteidl.service.OAuth2MetadataResponse.authorization_endpoint)
  return _s;
}
inline const std::string& OAuth2MetadataResponse::_internal_authorization_endpoint() const {
  return authorization_endpoint_.Get();
}
inline void OAuth2MetadataResponse::_internal_set_authorization_endpoint(const std::string& value) {
  
  authorization_endpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OAuth2MetadataResponse::_internal_mutable_authorization_endpoint() {
  
  return authorization_endpoint_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OAuth2MetadataResponse::release_authorization_endpoint() {
  // @@protoc_insertion_point(field_release:flyteidl.service.OAuth2MetadataResponse.authorization_endpoint)
  return authorization_endpoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OAuth2MetadataResponse::set_allocated_authorization_endpoint(std::string* authorization_endpoint) {
  if (authorization_endpoint != nullptr) {
    
  } else {
    
  }
  authorization_endpoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authorization_endpoint,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (authorization_endpoint_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    authorization_endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.OAuth2MetadataResponse.authorization_endpoint)
}

// string token_endpoint = 3 [json_name = "tokenEndpoint"];
inline void OAuth2MetadataResponse::clear_token_endpoint() {
  token_endpoint_.ClearToEmpty();
}
inline const std::string& OAuth2MetadataResponse::token_endpoint() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.OAuth2MetadataResponse.token_endpoint)
  return _internal_token_endpoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OAuth2MetadataResponse::set_token_endpoint(ArgT0&& arg0, ArgT... args) {
 
 token_endpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.token_endpoint)
}
inline std::string* OAuth2MetadataResponse::mutable_token_endpoint() {
  std::string* _s = _internal_mutable_token_endpoint();
  // @@protoc_insertion_point(field_mutable:flyteidl.service.OAuth2MetadataResponse.token_endpoint)
  return _s;
}
inline const std::string& OAuth2MetadataResponse::_internal_token_endpoint() const {
  return token_endpoint_.Get();
}
inline void OAuth2MetadataResponse::_internal_set_token_endpoint(const std::string& value) {
  
  token_endpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OAuth2MetadataResponse::_internal_mutable_token_endpoint() {
  
  return token_endpoint_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OAuth2MetadataResponse::release_token_endpoint() {
  // @@protoc_insertion_point(field_release:flyteidl.service.OAuth2MetadataResponse.token_endpoint)
  return token_endpoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OAuth2MetadataResponse::set_allocated_token_endpoint(std::string* token_endpoint) {
  if (token_endpoint != nullptr) {
    
  } else {
    
  }
  token_endpoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_endpoint,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_endpoint_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.OAuth2MetadataResponse.token_endpoint)
}

// repeated string response_types_supported = 4 [json_name = "responseTypesSupported"];
inline int OAuth2MetadataResponse::_internal_response_types_supported_size() const {
  return response_types_supported_.size();
}
inline int OAuth2MetadataResponse::response_types_supported_size() const {
  return _internal_response_types_supported_size();
}
inline void OAuth2MetadataResponse::clear_response_types_supported() {
  response_types_supported_.Clear();
}
inline std::string* OAuth2MetadataResponse::add_response_types_supported() {
  std::string* _s = _internal_add_response_types_supported();
  // @@protoc_insertion_point(field_add_mutable:flyteidl.service.OAuth2MetadataResponse.response_types_supported)
  return _s;
}
inline const std::string& OAuth2MetadataResponse::_internal_response_types_supported(int index) const {
  return response_types_supported_.Get(index);
}
inline const std::string& OAuth2MetadataResponse::response_types_supported(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.service.OAuth2MetadataResponse.response_types_supported)
  return _internal_response_types_supported(index);
}
inline std::string* OAuth2MetadataResponse::mutable_response_types_supported(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.service.OAuth2MetadataResponse.response_types_supported)
  return response_types_supported_.Mutable(index);
}
inline void OAuth2MetadataResponse::set_response_types_supported(int index, const std::string& value) {
  response_types_supported_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.response_types_supported)
}
inline void OAuth2MetadataResponse::set_response_types_supported(int index, std::string&& value) {
  response_types_supported_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.response_types_supported)
}
inline void OAuth2MetadataResponse::set_response_types_supported(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  response_types_supported_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.service.OAuth2MetadataResponse.response_types_supported)
}
inline void OAuth2MetadataResponse::set_response_types_supported(int index, const char* value, size_t size) {
  response_types_supported_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.OAuth2MetadataResponse.response_types_supported)
}
inline std::string* OAuth2MetadataResponse::_internal_add_response_types_supported() {
  return response_types_supported_.Add();
}
inline void OAuth2MetadataResponse::add_response_types_supported(const std::string& value) {
  response_types_supported_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.service.OAuth2MetadataResponse.response_types_supported)
}
inline void OAuth2MetadataResponse::add_response_types_supported(std::string&& value) {
  response_types_supported_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.service.OAuth2MetadataResponse.response_types_supported)
}
inline void OAuth2MetadataResponse::add_response_types_supported(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  response_types_supported_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.service.OAuth2MetadataResponse.response_types_supported)
}
inline void OAuth2MetadataResponse::add_response_types_supported(const char* value, size_t size) {
  response_types_supported_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.service.OAuth2MetadataResponse.response_types_supported)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OAuth2MetadataResponse::response_types_supported() const {
  // @@protoc_insertion_point(field_list:flyteidl.service.OAuth2MetadataResponse.response_types_supported)
  return response_types_supported_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OAuth2MetadataResponse::mutable_response_types_supported() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.service.OAuth2MetadataResponse.response_types_supported)
  return &response_types_supported_;
}

// repeated string scopes_supported = 5 [json_name = "scopesSupported"];
inline int OAuth2MetadataResponse::_internal_scopes_supported_size() const {
  return scopes_supported_.size();
}
inline int OAuth2MetadataResponse::scopes_supported_size() const {
  return _internal_scopes_supported_size();
}
inline void OAuth2MetadataResponse::clear_scopes_supported() {
  scopes_supported_.Clear();
}
inline std::string* OAuth2MetadataResponse::add_scopes_supported() {
  std::string* _s = _internal_add_scopes_supported();
  // @@protoc_insertion_point(field_add_mutable:flyteidl.service.OAuth2MetadataResponse.scopes_supported)
  return _s;
}
inline const std::string& OAuth2MetadataResponse::_internal_scopes_supported(int index) const {
  return scopes_supported_.Get(index);
}
inline const std::string& OAuth2MetadataResponse::scopes_supported(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.service.OAuth2MetadataResponse.scopes_supported)
  return _internal_scopes_supported(index);
}
inline std::string* OAuth2MetadataResponse::mutable_scopes_supported(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.service.OAuth2MetadataResponse.scopes_supported)
  return scopes_supported_.Mutable(index);
}
inline void OAuth2MetadataResponse::set_scopes_supported(int index, const std::string& value) {
  scopes_supported_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.scopes_supported)
}
inline void OAuth2MetadataResponse::set_scopes_supported(int index, std::string&& value) {
  scopes_supported_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.scopes_supported)
}
inline void OAuth2MetadataResponse::set_scopes_supported(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_supported_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.service.OAuth2MetadataResponse.scopes_supported)
}
inline void OAuth2MetadataResponse::set_scopes_supported(int index, const char* value, size_t size) {
  scopes_supported_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.OAuth2MetadataResponse.scopes_supported)
}
inline std::string* OAuth2MetadataResponse::_internal_add_scopes_supported() {
  return scopes_supported_.Add();
}
inline void OAuth2MetadataResponse::add_scopes_supported(const std::string& value) {
  scopes_supported_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.service.OAuth2MetadataResponse.scopes_supported)
}
inline void OAuth2MetadataResponse::add_scopes_supported(std::string&& value) {
  scopes_supported_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.service.OAuth2MetadataResponse.scopes_supported)
}
inline void OAuth2MetadataResponse::add_scopes_supported(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_supported_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.service.OAuth2MetadataResponse.scopes_supported)
}
inline void OAuth2MetadataResponse::add_scopes_supported(const char* value, size_t size) {
  scopes_supported_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.service.OAuth2MetadataResponse.scopes_supported)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OAuth2MetadataResponse::scopes_supported() const {
  // @@protoc_insertion_point(field_list:flyteidl.service.OAuth2MetadataResponse.scopes_supported)
  return scopes_supported_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OAuth2MetadataResponse::mutable_scopes_supported() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.service.OAuth2MetadataResponse.scopes_supported)
  return &scopes_supported_;
}

// repeated string token_endpoint_auth_methods_supported = 6 [json_name = "tokenEndpointAuthMethodsSupported"];
inline int OAuth2MetadataResponse::_internal_token_endpoint_auth_methods_supported_size() const {
  return token_endpoint_auth_methods_supported_.size();
}
inline int OAuth2MetadataResponse::token_endpoint_auth_methods_supported_size() const {
  return _internal_token_endpoint_auth_methods_supported_size();
}
inline void OAuth2MetadataResponse::clear_token_endpoint_auth_methods_supported() {
  token_endpoint_auth_methods_supported_.Clear();
}
inline std::string* OAuth2MetadataResponse::add_token_endpoint_auth_methods_supported() {
  std::string* _s = _internal_add_token_endpoint_auth_methods_supported();
  // @@protoc_insertion_point(field_add_mutable:flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported)
  return _s;
}
inline const std::string& OAuth2MetadataResponse::_internal_token_endpoint_auth_methods_supported(int index) const {
  return token_endpoint_auth_methods_supported_.Get(index);
}
inline const std::string& OAuth2MetadataResponse::token_endpoint_auth_methods_supported(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported)
  return _internal_token_endpoint_auth_methods_supported(index);
}
inline std::string* OAuth2MetadataResponse::mutable_token_endpoint_auth_methods_supported(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported)
  return token_endpoint_auth_methods_supported_.Mutable(index);
}
inline void OAuth2MetadataResponse::set_token_endpoint_auth_methods_supported(int index, const std::string& value) {
  token_endpoint_auth_methods_supported_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported)
}
inline void OAuth2MetadataResponse::set_token_endpoint_auth_methods_supported(int index, std::string&& value) {
  token_endpoint_auth_methods_supported_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported)
}
inline void OAuth2MetadataResponse::set_token_endpoint_auth_methods_supported(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  token_endpoint_auth_methods_supported_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported)
}
inline void OAuth2MetadataResponse::set_token_endpoint_auth_methods_supported(int index, const char* value, size_t size) {
  token_endpoint_auth_methods_supported_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported)
}
inline std::string* OAuth2MetadataResponse::_internal_add_token_endpoint_auth_methods_supported() {
  return token_endpoint_auth_methods_supported_.Add();
}
inline void OAuth2MetadataResponse::add_token_endpoint_auth_methods_supported(const std::string& value) {
  token_endpoint_auth_methods_supported_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported)
}
inline void OAuth2MetadataResponse::add_token_endpoint_auth_methods_supported(std::string&& value) {
  token_endpoint_auth_methods_supported_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported)
}
inline void OAuth2MetadataResponse::add_token_endpoint_auth_methods_supported(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  token_endpoint_auth_methods_supported_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported)
}
inline void OAuth2MetadataResponse::add_token_endpoint_auth_methods_supported(const char* value, size_t size) {
  token_endpoint_auth_methods_supported_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OAuth2MetadataResponse::token_endpoint_auth_methods_supported() const {
  // @@protoc_insertion_point(field_list:flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported)
  return token_endpoint_auth_methods_supported_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OAuth2MetadataResponse::mutable_token_endpoint_auth_methods_supported() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported)
  return &token_endpoint_auth_methods_supported_;
}

// string jwks_uri = 7 [json_name = "jwksUri"];
inline void OAuth2MetadataResponse::clear_jwks_uri() {
  jwks_uri_.ClearToEmpty();
}
inline const std::string& OAuth2MetadataResponse::jwks_uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.OAuth2MetadataResponse.jwks_uri)
  return _internal_jwks_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OAuth2MetadataResponse::set_jwks_uri(ArgT0&& arg0, ArgT... args) {
 
 jwks_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.jwks_uri)
}
inline std::string* OAuth2MetadataResponse::mutable_jwks_uri() {
  std::string* _s = _internal_mutable_jwks_uri();
  // @@protoc_insertion_point(field_mutable:flyteidl.service.OAuth2MetadataResponse.jwks_uri)
  return _s;
}
inline const std::string& OAuth2MetadataResponse::_internal_jwks_uri() const {
  return jwks_uri_.Get();
}
inline void OAuth2MetadataResponse::_internal_set_jwks_uri(const std::string& value) {
  
  jwks_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OAuth2MetadataResponse::_internal_mutable_jwks_uri() {
  
  return jwks_uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OAuth2MetadataResponse::release_jwks_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.service.OAuth2MetadataResponse.jwks_uri)
  return jwks_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OAuth2MetadataResponse::set_allocated_jwks_uri(std::string* jwks_uri) {
  if (jwks_uri != nullptr) {
    
  } else {
    
  }
  jwks_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jwks_uri,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (jwks_uri_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    jwks_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.OAuth2MetadataResponse.jwks_uri)
}

// repeated string code_challenge_methods_supported = 8 [json_name = "codeChallengeMethodsSupported"];
inline int OAuth2MetadataResponse::_internal_code_challenge_methods_supported_size() const {
  return code_challenge_methods_supported_.size();
}
inline int OAuth2MetadataResponse::code_challenge_methods_supported_size() const {
  return _internal_code_challenge_methods_supported_size();
}
inline void OAuth2MetadataResponse::clear_code_challenge_methods_supported() {
  code_challenge_methods_supported_.Clear();
}
inline std::string* OAuth2MetadataResponse::add_code_challenge_methods_supported() {
  std::string* _s = _internal_add_code_challenge_methods_supported();
  // @@protoc_insertion_point(field_add_mutable:flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported)
  return _s;
}
inline const std::string& OAuth2MetadataResponse::_internal_code_challenge_methods_supported(int index) const {
  return code_challenge_methods_supported_.Get(index);
}
inline const std::string& OAuth2MetadataResponse::code_challenge_methods_supported(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported)
  return _internal_code_challenge_methods_supported(index);
}
inline std::string* OAuth2MetadataResponse::mutable_code_challenge_methods_supported(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported)
  return code_challenge_methods_supported_.Mutable(index);
}
inline void OAuth2MetadataResponse::set_code_challenge_methods_supported(int index, const std::string& value) {
  code_challenge_methods_supported_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported)
}
inline void OAuth2MetadataResponse::set_code_challenge_methods_supported(int index, std::string&& value) {
  code_challenge_methods_supported_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported)
}
inline void OAuth2MetadataResponse::set_code_challenge_methods_supported(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  code_challenge_methods_supported_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported)
}
inline void OAuth2MetadataResponse::set_code_challenge_methods_supported(int index, const char* value, size_t size) {
  code_challenge_methods_supported_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported)
}
inline std::string* OAuth2MetadataResponse::_internal_add_code_challenge_methods_supported() {
  return code_challenge_methods_supported_.Add();
}
inline void OAuth2MetadataResponse::add_code_challenge_methods_supported(const std::string& value) {
  code_challenge_methods_supported_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported)
}
inline void OAuth2MetadataResponse::add_code_challenge_methods_supported(std::string&& value) {
  code_challenge_methods_supported_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported)
}
inline void OAuth2MetadataResponse::add_code_challenge_methods_supported(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  code_challenge_methods_supported_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported)
}
inline void OAuth2MetadataResponse::add_code_challenge_methods_supported(const char* value, size_t size) {
  code_challenge_methods_supported_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OAuth2MetadataResponse::code_challenge_methods_supported() const {
  // @@protoc_insertion_point(field_list:flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported)
  return code_challenge_methods_supported_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OAuth2MetadataResponse::mutable_code_challenge_methods_supported() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported)
  return &code_challenge_methods_supported_;
}

// repeated string grant_types_supported = 9 [json_name = "grantTypesSupported"];
inline int OAuth2MetadataResponse::_internal_grant_types_supported_size() const {
  return grant_types_supported_.size();
}
inline int OAuth2MetadataResponse::grant_types_supported_size() const {
  return _internal_grant_types_supported_size();
}
inline void OAuth2MetadataResponse::clear_grant_types_supported() {
  grant_types_supported_.Clear();
}
inline std::string* OAuth2MetadataResponse::add_grant_types_supported() {
  std::string* _s = _internal_add_grant_types_supported();
  // @@protoc_insertion_point(field_add_mutable:flyteidl.service.OAuth2MetadataResponse.grant_types_supported)
  return _s;
}
inline const std::string& OAuth2MetadataResponse::_internal_grant_types_supported(int index) const {
  return grant_types_supported_.Get(index);
}
inline const std::string& OAuth2MetadataResponse::grant_types_supported(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.service.OAuth2MetadataResponse.grant_types_supported)
  return _internal_grant_types_supported(index);
}
inline std::string* OAuth2MetadataResponse::mutable_grant_types_supported(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.service.OAuth2MetadataResponse.grant_types_supported)
  return grant_types_supported_.Mutable(index);
}
inline void OAuth2MetadataResponse::set_grant_types_supported(int index, const std::string& value) {
  grant_types_supported_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.grant_types_supported)
}
inline void OAuth2MetadataResponse::set_grant_types_supported(int index, std::string&& value) {
  grant_types_supported_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.grant_types_supported)
}
inline void OAuth2MetadataResponse::set_grant_types_supported(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  grant_types_supported_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.service.OAuth2MetadataResponse.grant_types_supported)
}
inline void OAuth2MetadataResponse::set_grant_types_supported(int index, const char* value, size_t size) {
  grant_types_supported_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.OAuth2MetadataResponse.grant_types_supported)
}
inline std::string* OAuth2MetadataResponse::_internal_add_grant_types_supported() {
  return grant_types_supported_.Add();
}
inline void OAuth2MetadataResponse::add_grant_types_supported(const std::string& value) {
  grant_types_supported_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.service.OAuth2MetadataResponse.grant_types_supported)
}
inline void OAuth2MetadataResponse::add_grant_types_supported(std::string&& value) {
  grant_types_supported_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.service.OAuth2MetadataResponse.grant_types_supported)
}
inline void OAuth2MetadataResponse::add_grant_types_supported(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  grant_types_supported_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.service.OAuth2MetadataResponse.grant_types_supported)
}
inline void OAuth2MetadataResponse::add_grant_types_supported(const char* value, size_t size) {
  grant_types_supported_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.service.OAuth2MetadataResponse.grant_types_supported)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OAuth2MetadataResponse::grant_types_supported() const {
  // @@protoc_insertion_point(field_list:flyteidl.service.OAuth2MetadataResponse.grant_types_supported)
  return grant_types_supported_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OAuth2MetadataResponse::mutable_grant_types_supported() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.service.OAuth2MetadataResponse.grant_types_supported)
  return &grant_types_supported_;
}

// -------------------------------------------------------------------

// PublicClientAuthConfigRequest

// -------------------------------------------------------------------

// PublicClientAuthConfigResponse

// string client_id = 1 [json_name = "clientId"];
inline void PublicClientAuthConfigResponse::clear_client_id() {
  client_id_.ClearToEmpty();
}
inline const std::string& PublicClientAuthConfigResponse::client_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.PublicClientAuthConfigResponse.client_id)
  return _internal_client_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublicClientAuthConfigResponse::set_client_id(ArgT0&& arg0, ArgT... args) {
 
 client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.service.PublicClientAuthConfigResponse.client_id)
}
inline std::string* PublicClientAuthConfigResponse::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.service.PublicClientAuthConfigResponse.client_id)
  return _s;
}
inline const std::string& PublicClientAuthConfigResponse::_internal_client_id() const {
  return client_id_.Get();
}
inline void PublicClientAuthConfigResponse::_internal_set_client_id(const std::string& value) {
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublicClientAuthConfigResponse::_internal_mutable_client_id() {
  
  return client_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublicClientAuthConfigResponse::release_client_id() {
  // @@protoc_insertion_point(field_release:flyteidl.service.PublicClientAuthConfigResponse.client_id)
  return client_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PublicClientAuthConfigResponse::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.PublicClientAuthConfigResponse.client_id)
}

// string redirect_uri = 2 [json_name = "redirectUri"];
inline void PublicClientAuthConfigResponse::clear_redirect_uri() {
  redirect_uri_.ClearToEmpty();
}
inline const std::string& PublicClientAuthConfigResponse::redirect_uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.PublicClientAuthConfigResponse.redirect_uri)
  return _internal_redirect_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublicClientAuthConfigResponse::set_redirect_uri(ArgT0&& arg0, ArgT... args) {
 
 redirect_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.service.PublicClientAuthConfigResponse.redirect_uri)
}
inline std::string* PublicClientAuthConfigResponse::mutable_redirect_uri() {
  std::string* _s = _internal_mutable_redirect_uri();
  // @@protoc_insertion_point(field_mutable:flyteidl.service.PublicClientAuthConfigResponse.redirect_uri)
  return _s;
}
inline const std::string& PublicClientAuthConfigResponse::_internal_redirect_uri() const {
  return redirect_uri_.Get();
}
inline void PublicClientAuthConfigResponse::_internal_set_redirect_uri(const std::string& value) {
  
  redirect_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublicClientAuthConfigResponse::_internal_mutable_redirect_uri() {
  
  return redirect_uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublicClientAuthConfigResponse::release_redirect_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.service.PublicClientAuthConfigResponse.redirect_uri)
  return redirect_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PublicClientAuthConfigResponse::set_allocated_redirect_uri(std::string* redirect_uri) {
  if (redirect_uri != nullptr) {
    
  } else {
    
  }
  redirect_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redirect_uri,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (redirect_uri_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    redirect_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.PublicClientAuthConfigResponse.redirect_uri)
}

// repeated string scopes = 3 [json_name = "scopes"];
inline int PublicClientAuthConfigResponse::_internal_scopes_size() const {
  return scopes_.size();
}
inline int PublicClientAuthConfigResponse::scopes_size() const {
  return _internal_scopes_size();
}
inline void PublicClientAuthConfigResponse::clear_scopes() {
  scopes_.Clear();
}
inline std::string* PublicClientAuthConfigResponse::add_scopes() {
  std::string* _s = _internal_add_scopes();
  // @@protoc_insertion_point(field_add_mutable:flyteidl.service.PublicClientAuthConfigResponse.scopes)
  return _s;
}
inline const std::string& PublicClientAuthConfigResponse::_internal_scopes(int index) const {
  return scopes_.Get(index);
}
inline const std::string& PublicClientAuthConfigResponse::scopes(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.service.PublicClientAuthConfigResponse.scopes)
  return _internal_scopes(index);
}
inline std::string* PublicClientAuthConfigResponse::mutable_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.service.PublicClientAuthConfigResponse.scopes)
  return scopes_.Mutable(index);
}
inline void PublicClientAuthConfigResponse::set_scopes(int index, const std::string& value) {
  scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flyteidl.service.PublicClientAuthConfigResponse.scopes)
}
inline void PublicClientAuthConfigResponse::set_scopes(int index, std::string&& value) {
  scopes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flyteidl.service.PublicClientAuthConfigResponse.scopes)
}
inline void PublicClientAuthConfigResponse::set_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.service.PublicClientAuthConfigResponse.scopes)
}
inline void PublicClientAuthConfigResponse::set_scopes(int index, const char* value, size_t size) {
  scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.PublicClientAuthConfigResponse.scopes)
}
inline std::string* PublicClientAuthConfigResponse::_internal_add_scopes() {
  return scopes_.Add();
}
inline void PublicClientAuthConfigResponse::add_scopes(const std::string& value) {
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.service.PublicClientAuthConfigResponse.scopes)
}
inline void PublicClientAuthConfigResponse::add_scopes(std::string&& value) {
  scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.service.PublicClientAuthConfigResponse.scopes)
}
inline void PublicClientAuthConfigResponse::add_scopes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.service.PublicClientAuthConfigResponse.scopes)
}
inline void PublicClientAuthConfigResponse::add_scopes(const char* value, size_t size) {
  scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.service.PublicClientAuthConfigResponse.scopes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PublicClientAuthConfigResponse::scopes() const {
  // @@protoc_insertion_point(field_list:flyteidl.service.PublicClientAuthConfigResponse.scopes)
  return scopes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PublicClientAuthConfigResponse::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.service.PublicClientAuthConfigResponse.scopes)
  return &scopes_;
}

// string authorization_metadata_key = 4 [json_name = "authorizationMetadataKey"];
inline void PublicClientAuthConfigResponse::clear_authorization_metadata_key() {
  authorization_metadata_key_.ClearToEmpty();
}
inline const std::string& PublicClientAuthConfigResponse::authorization_metadata_key() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.PublicClientAuthConfigResponse.authorization_metadata_key)
  return _internal_authorization_metadata_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublicClientAuthConfigResponse::set_authorization_metadata_key(ArgT0&& arg0, ArgT... args) {
 
 authorization_metadata_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.service.PublicClientAuthConfigResponse.authorization_metadata_key)
}
inline std::string* PublicClientAuthConfigResponse::mutable_authorization_metadata_key() {
  std::string* _s = _internal_mutable_authorization_metadata_key();
  // @@protoc_insertion_point(field_mutable:flyteidl.service.PublicClientAuthConfigResponse.authorization_metadata_key)
  return _s;
}
inline const std::string& PublicClientAuthConfigResponse::_internal_authorization_metadata_key() const {
  return authorization_metadata_key_.Get();
}
inline void PublicClientAuthConfigResponse::_internal_set_authorization_metadata_key(const std::string& value) {
  
  authorization_metadata_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublicClientAuthConfigResponse::_internal_mutable_authorization_metadata_key() {
  
  return authorization_metadata_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublicClientAuthConfigResponse::release_authorization_metadata_key() {
  // @@protoc_insertion_point(field_release:flyteidl.service.PublicClientAuthConfigResponse.authorization_metadata_key)
  return authorization_metadata_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PublicClientAuthConfigResponse::set_allocated_authorization_metadata_key(std::string* authorization_metadata_key) {
  if (authorization_metadata_key != nullptr) {
    
  } else {
    
  }
  authorization_metadata_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authorization_metadata_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (authorization_metadata_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    authorization_metadata_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.PublicClientAuthConfigResponse.authorization_metadata_key)
}

// string service_http_endpoint = 5 [json_name = "serviceHttpEndpoint"];
inline void PublicClientAuthConfigResponse::clear_service_http_endpoint() {
  service_http_endpoint_.ClearToEmpty();
}
inline const std::string& PublicClientAuthConfigResponse::service_http_endpoint() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.PublicClientAuthConfigResponse.service_http_endpoint)
  return _internal_service_http_endpoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublicClientAuthConfigResponse::set_service_http_endpoint(ArgT0&& arg0, ArgT... args) {
 
 service_http_endpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.service.PublicClientAuthConfigResponse.service_http_endpoint)
}
inline std::string* PublicClientAuthConfigResponse::mutable_service_http_endpoint() {
  std::string* _s = _internal_mutable_service_http_endpoint();
  // @@protoc_insertion_point(field_mutable:flyteidl.service.PublicClientAuthConfigResponse.service_http_endpoint)
  return _s;
}
inline const std::string& PublicClientAuthConfigResponse::_internal_service_http_endpoint() const {
  return service_http_endpoint_.Get();
}
inline void PublicClientAuthConfigResponse::_internal_set_service_http_endpoint(const std::string& value) {
  
  service_http_endpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublicClientAuthConfigResponse::_internal_mutable_service_http_endpoint() {
  
  return service_http_endpoint_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublicClientAuthConfigResponse::release_service_http_endpoint() {
  // @@protoc_insertion_point(field_release:flyteidl.service.PublicClientAuthConfigResponse.service_http_endpoint)
  return service_http_endpoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PublicClientAuthConfigResponse::set_allocated_service_http_endpoint(std::string* service_http_endpoint) {
  if (service_http_endpoint != nullptr) {
    
  } else {
    
  }
  service_http_endpoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_http_endpoint,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (service_http_endpoint_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    service_http_endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.PublicClientAuthConfigResponse.service_http_endpoint)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fservice_2fauth_2eproto
