// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/execution.proto

package com.flyteidl.admin;

public interface ExecutionMetadataOrBuilder extends
    // @@protoc_insertion_point(interface_extends:flyteidl.admin.ExecutionMetadata)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>.flyteidl.admin.ExecutionMetadata.ExecutionMode mode = 1 [json_name = "mode"];</code>
   * @return The enum numeric value on the wire for mode.
   */
  int getModeValue();
  /**
   * <code>.flyteidl.admin.ExecutionMetadata.ExecutionMode mode = 1 [json_name = "mode"];</code>
   * @return The mode.
   */
  com.flyteidl.admin.ExecutionMetadata.ExecutionMode getMode();

  /**
   * <pre>
   * Identifier of the entity that triggered this execution.
   * For systems using back-end authentication any value set here will be discarded in favor of the
   * authenticated user context.
   * </pre>
   *
   * <code>string principal = 2 [json_name = "principal"];</code>
   * @return The principal.
   */
  java.lang.String getPrincipal();
  /**
   * <pre>
   * Identifier of the entity that triggered this execution.
   * For systems using back-end authentication any value set here will be discarded in favor of the
   * authenticated user context.
   * </pre>
   *
   * <code>string principal = 2 [json_name = "principal"];</code>
   * @return The bytes for principal.
   */
  com.google.protobuf.ByteString
      getPrincipalBytes();

  /**
   * <pre>
   * Indicates the nestedness of this execution.
   * If a user launches a workflow execution, the default nesting is 0.
   * If this execution further launches a workflow (child workflow), the nesting level is incremented by 0 =&gt; 1
   * Generally, if workflow at nesting level k launches a workflow then the child workflow will have
   * nesting = k + 1.
   * </pre>
   *
   * <code>uint32 nesting = 3 [json_name = "nesting"];</code>
   * @return The nesting.
   */
  int getNesting();

  /**
   * <pre>
   * For scheduled executions, the requested time for execution for this specific schedule invocation.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp scheduled_at = 4 [json_name = "scheduledAt"];</code>
   * @return Whether the scheduledAt field is set.
   */
  boolean hasScheduledAt();
  /**
   * <pre>
   * For scheduled executions, the requested time for execution for this specific schedule invocation.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp scheduled_at = 4 [json_name = "scheduledAt"];</code>
   * @return The scheduledAt.
   */
  com.google.protobuf.Timestamp getScheduledAt();
  /**
   * <pre>
   * For scheduled executions, the requested time for execution for this specific schedule invocation.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp scheduled_at = 4 [json_name = "scheduledAt"];</code>
   */
  com.google.protobuf.TimestampOrBuilder getScheduledAtOrBuilder();

  /**
   * <pre>
   * Which subworkflow node (if any) launched this execution
   * </pre>
   *
   * <code>.flyteidl.core.NodeExecutionIdentifier parent_node_execution = 5 [json_name = "parentNodeExecution"];</code>
   * @return Whether the parentNodeExecution field is set.
   */
  boolean hasParentNodeExecution();
  /**
   * <pre>
   * Which subworkflow node (if any) launched this execution
   * </pre>
   *
   * <code>.flyteidl.core.NodeExecutionIdentifier parent_node_execution = 5 [json_name = "parentNodeExecution"];</code>
   * @return The parentNodeExecution.
   */
  com.flyteidl.core.NodeExecutionIdentifier getParentNodeExecution();
  /**
   * <pre>
   * Which subworkflow node (if any) launched this execution
   * </pre>
   *
   * <code>.flyteidl.core.NodeExecutionIdentifier parent_node_execution = 5 [json_name = "parentNodeExecution"];</code>
   */
  com.flyteidl.core.NodeExecutionIdentifierOrBuilder getParentNodeExecutionOrBuilder();

  /**
   * <pre>
   * Optional, a reference workflow execution related to this execution.
   * In the case of a relaunch, this references the original workflow execution.
   * </pre>
   *
   * <code>.flyteidl.core.WorkflowExecutionIdentifier reference_execution = 16 [json_name = "referenceExecution"];</code>
   * @return Whether the referenceExecution field is set.
   */
  boolean hasReferenceExecution();
  /**
   * <pre>
   * Optional, a reference workflow execution related to this execution.
   * In the case of a relaunch, this references the original workflow execution.
   * </pre>
   *
   * <code>.flyteidl.core.WorkflowExecutionIdentifier reference_execution = 16 [json_name = "referenceExecution"];</code>
   * @return The referenceExecution.
   */
  com.flyteidl.core.WorkflowExecutionIdentifier getReferenceExecution();
  /**
   * <pre>
   * Optional, a reference workflow execution related to this execution.
   * In the case of a relaunch, this references the original workflow execution.
   * </pre>
   *
   * <code>.flyteidl.core.WorkflowExecutionIdentifier reference_execution = 16 [json_name = "referenceExecution"];</code>
   */
  com.flyteidl.core.WorkflowExecutionIdentifierOrBuilder getReferenceExecutionOrBuilder();

  /**
   * <pre>
   * Optional, platform-specific metadata about the execution.
   * In this the future this may be gated behind an ACL or some sort of authorization.
   * </pre>
   *
   * <code>.flyteidl.admin.SystemMetadata system_metadata = 17 [json_name = "systemMetadata"];</code>
   * @return Whether the systemMetadata field is set.
   */
  boolean hasSystemMetadata();
  /**
   * <pre>
   * Optional, platform-specific metadata about the execution.
   * In this the future this may be gated behind an ACL or some sort of authorization.
   * </pre>
   *
   * <code>.flyteidl.admin.SystemMetadata system_metadata = 17 [json_name = "systemMetadata"];</code>
   * @return The systemMetadata.
   */
  com.flyteidl.admin.SystemMetadata getSystemMetadata();
  /**
   * <pre>
   * Optional, platform-specific metadata about the execution.
   * In this the future this may be gated behind an ACL or some sort of authorization.
   * </pre>
   *
   * <code>.flyteidl.admin.SystemMetadata system_metadata = 17 [json_name = "systemMetadata"];</code>
   */
  com.flyteidl.admin.SystemMetadataOrBuilder getSystemMetadataOrBuilder();
}
