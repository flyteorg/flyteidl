// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/identifier.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fcore_2fidentifier_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fcore_2fidentifier_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fidentifier_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fcore_2fidentifier_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fcore_2fidentifier_2eproto;
namespace flyteidl {
namespace core {
class Identifier;
struct IdentifierDefaultTypeInternal;
extern IdentifierDefaultTypeInternal _Identifier_default_instance_;
class NodeExecutionIdentifier;
struct NodeExecutionIdentifierDefaultTypeInternal;
extern NodeExecutionIdentifierDefaultTypeInternal _NodeExecutionIdentifier_default_instance_;
class TaskExecutionIdentifier;
struct TaskExecutionIdentifierDefaultTypeInternal;
extern TaskExecutionIdentifierDefaultTypeInternal _TaskExecutionIdentifier_default_instance_;
class WorkflowExecutionIdentifier;
struct WorkflowExecutionIdentifierDefaultTypeInternal;
extern WorkflowExecutionIdentifierDefaultTypeInternal _WorkflowExecutionIdentifier_default_instance_;
}  // namespace core
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::core::Identifier* Arena::CreateMaybeMessage<::flyteidl::core::Identifier>(Arena*);
template<> ::flyteidl::core::NodeExecutionIdentifier* Arena::CreateMaybeMessage<::flyteidl::core::NodeExecutionIdentifier>(Arena*);
template<> ::flyteidl::core::TaskExecutionIdentifier* Arena::CreateMaybeMessage<::flyteidl::core::TaskExecutionIdentifier>(Arena*);
template<> ::flyteidl::core::WorkflowExecutionIdentifier* Arena::CreateMaybeMessage<::flyteidl::core::WorkflowExecutionIdentifier>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace core {

enum ResourceType : int {
  UNSPECIFIED = 0,
  TASK = 1,
  WORKFLOW = 2,
  LAUNCH_PLAN = 3,
  DATASET = 4,
  ResourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ResourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ResourceType_IsValid(int value);
constexpr ResourceType ResourceType_MIN = UNSPECIFIED;
constexpr ResourceType ResourceType_MAX = DATASET;
constexpr int ResourceType_ARRAYSIZE = ResourceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResourceType_descriptor();
template<typename T>
inline const std::string& ResourceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResourceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResourceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResourceType_descriptor(), enum_t_value);
}
inline bool ResourceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResourceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResourceType>(
    ResourceType_descriptor(), name, value);
}
// ===================================================================

class Identifier final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.Identifier) */ {
 public:
  inline Identifier() : Identifier(nullptr) {}
  ~Identifier() override;
  explicit constexpr Identifier(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Identifier(const Identifier& from);
  Identifier(Identifier&& from) noexcept
    : Identifier() {
    *this = ::std::move(from);
  }

  inline Identifier& operator=(const Identifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline Identifier& operator=(Identifier&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Identifier& default_instance() {
    return *internal_default_instance();
  }
  static inline const Identifier* internal_default_instance() {
    return reinterpret_cast<const Identifier*>(
               &_Identifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Identifier& a, Identifier& b) {
    a.Swap(&b);
  }
  inline void Swap(Identifier* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Identifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Identifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Identifier>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identifier* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.Identifier";
  }
  protected:
  explicit Identifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectFieldNumber = 2,
    kDomainFieldNumber = 3,
    kNameFieldNumber = 4,
    kVersionFieldNumber = 5,
    kResourceTypeFieldNumber = 1,
  };
  // string project = 2 [json_name = "project"];
  void clear_project();
  const std::string& project() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project();
  PROTOBUF_NODISCARD std::string* release_project();
  void set_allocated_project(std::string* project);
  private:
  const std::string& _internal_project() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project(const std::string& value);
  std::string* _internal_mutable_project();
  public:

  // string domain = 3 [json_name = "domain"];
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // string name = 4 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string version = 5 [json_name = "version"];
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // .flyteidl.core.ResourceType resource_type = 1 [json_name = "resourceType"];
  void clear_resource_type();
  ::flyteidl::core::ResourceType resource_type() const;
  void set_resource_type(::flyteidl::core::ResourceType value);
  private:
  ::flyteidl::core::ResourceType _internal_resource_type() const;
  void _internal_set_resource_type(::flyteidl::core::ResourceType value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.core.Identifier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  int resource_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fidentifier_2eproto;
};
// -------------------------------------------------------------------

class WorkflowExecutionIdentifier final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.WorkflowExecutionIdentifier) */ {
 public:
  inline WorkflowExecutionIdentifier() : WorkflowExecutionIdentifier(nullptr) {}
  ~WorkflowExecutionIdentifier() override;
  explicit constexpr WorkflowExecutionIdentifier(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowExecutionIdentifier(const WorkflowExecutionIdentifier& from);
  WorkflowExecutionIdentifier(WorkflowExecutionIdentifier&& from) noexcept
    : WorkflowExecutionIdentifier() {
    *this = ::std::move(from);
  }

  inline WorkflowExecutionIdentifier& operator=(const WorkflowExecutionIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowExecutionIdentifier& operator=(WorkflowExecutionIdentifier&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowExecutionIdentifier& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowExecutionIdentifier* internal_default_instance() {
    return reinterpret_cast<const WorkflowExecutionIdentifier*>(
               &_WorkflowExecutionIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WorkflowExecutionIdentifier& a, WorkflowExecutionIdentifier& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowExecutionIdentifier* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowExecutionIdentifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkflowExecutionIdentifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkflowExecutionIdentifier>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowExecutionIdentifier* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.WorkflowExecutionIdentifier";
  }
  protected:
  explicit WorkflowExecutionIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectFieldNumber = 1,
    kDomainFieldNumber = 2,
    kNameFieldNumber = 4,
  };
  // string project = 1 [json_name = "project"];
  void clear_project();
  const std::string& project() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project();
  PROTOBUF_NODISCARD std::string* release_project();
  void set_allocated_project(std::string* project);
  private:
  const std::string& _internal_project() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project(const std::string& value);
  std::string* _internal_mutable_project();
  public:

  // string domain = 2 [json_name = "domain"];
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // string name = 4 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.core.WorkflowExecutionIdentifier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fidentifier_2eproto;
};
// -------------------------------------------------------------------

class NodeExecutionIdentifier final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.NodeExecutionIdentifier) */ {
 public:
  inline NodeExecutionIdentifier() : NodeExecutionIdentifier(nullptr) {}
  ~NodeExecutionIdentifier() override;
  explicit constexpr NodeExecutionIdentifier(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeExecutionIdentifier(const NodeExecutionIdentifier& from);
  NodeExecutionIdentifier(NodeExecutionIdentifier&& from) noexcept
    : NodeExecutionIdentifier() {
    *this = ::std::move(from);
  }

  inline NodeExecutionIdentifier& operator=(const NodeExecutionIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeExecutionIdentifier& operator=(NodeExecutionIdentifier&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeExecutionIdentifier& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeExecutionIdentifier* internal_default_instance() {
    return reinterpret_cast<const NodeExecutionIdentifier*>(
               &_NodeExecutionIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NodeExecutionIdentifier& a, NodeExecutionIdentifier& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeExecutionIdentifier* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeExecutionIdentifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeExecutionIdentifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeExecutionIdentifier>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeExecutionIdentifier* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.NodeExecutionIdentifier";
  }
  protected:
  explicit NodeExecutionIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdFieldNumber = 1,
    kExecutionIdFieldNumber = 2,
  };
  // string node_id = 1 [json_name = "nodeId"];
  void clear_node_id();
  const std::string& node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node_id();
  PROTOBUF_NODISCARD std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // .flyteidl.core.WorkflowExecutionIdentifier execution_id = 2 [json_name = "executionId"];
  bool has_execution_id() const;
  private:
  bool _internal_has_execution_id() const;
  public:
  void clear_execution_id();
  const ::flyteidl::core::WorkflowExecutionIdentifier& execution_id() const;
  PROTOBUF_NODISCARD ::flyteidl::core::WorkflowExecutionIdentifier* release_execution_id();
  ::flyteidl::core::WorkflowExecutionIdentifier* mutable_execution_id();
  void set_allocated_execution_id(::flyteidl::core::WorkflowExecutionIdentifier* execution_id);
  private:
  const ::flyteidl::core::WorkflowExecutionIdentifier& _internal_execution_id() const;
  ::flyteidl::core::WorkflowExecutionIdentifier* _internal_mutable_execution_id();
  public:
  void unsafe_arena_set_allocated_execution_id(
      ::flyteidl::core::WorkflowExecutionIdentifier* execution_id);
  ::flyteidl::core::WorkflowExecutionIdentifier* unsafe_arena_release_execution_id();

  // @@protoc_insertion_point(class_scope:flyteidl.core.NodeExecutionIdentifier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  ::flyteidl::core::WorkflowExecutionIdentifier* execution_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fidentifier_2eproto;
};
// -------------------------------------------------------------------

class TaskExecutionIdentifier final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.TaskExecutionIdentifier) */ {
 public:
  inline TaskExecutionIdentifier() : TaskExecutionIdentifier(nullptr) {}
  ~TaskExecutionIdentifier() override;
  explicit constexpr TaskExecutionIdentifier(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskExecutionIdentifier(const TaskExecutionIdentifier& from);
  TaskExecutionIdentifier(TaskExecutionIdentifier&& from) noexcept
    : TaskExecutionIdentifier() {
    *this = ::std::move(from);
  }

  inline TaskExecutionIdentifier& operator=(const TaskExecutionIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskExecutionIdentifier& operator=(TaskExecutionIdentifier&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskExecutionIdentifier& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskExecutionIdentifier* internal_default_instance() {
    return reinterpret_cast<const TaskExecutionIdentifier*>(
               &_TaskExecutionIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TaskExecutionIdentifier& a, TaskExecutionIdentifier& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskExecutionIdentifier* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskExecutionIdentifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskExecutionIdentifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskExecutionIdentifier>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskExecutionIdentifier* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.TaskExecutionIdentifier";
  }
  protected:
  explicit TaskExecutionIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kNodeExecutionIdFieldNumber = 2,
    kRetryAttemptFieldNumber = 3,
  };
  // .flyteidl.core.Identifier task_id = 1 [json_name = "taskId"];
  bool has_task_id() const;
  private:
  bool _internal_has_task_id() const;
  public:
  void clear_task_id();
  const ::flyteidl::core::Identifier& task_id() const;
  PROTOBUF_NODISCARD ::flyteidl::core::Identifier* release_task_id();
  ::flyteidl::core::Identifier* mutable_task_id();
  void set_allocated_task_id(::flyteidl::core::Identifier* task_id);
  private:
  const ::flyteidl::core::Identifier& _internal_task_id() const;
  ::flyteidl::core::Identifier* _internal_mutable_task_id();
  public:
  void unsafe_arena_set_allocated_task_id(
      ::flyteidl::core::Identifier* task_id);
  ::flyteidl::core::Identifier* unsafe_arena_release_task_id();

  // .flyteidl.core.NodeExecutionIdentifier node_execution_id = 2 [json_name = "nodeExecutionId"];
  bool has_node_execution_id() const;
  private:
  bool _internal_has_node_execution_id() const;
  public:
  void clear_node_execution_id();
  const ::flyteidl::core::NodeExecutionIdentifier& node_execution_id() const;
  PROTOBUF_NODISCARD ::flyteidl::core::NodeExecutionIdentifier* release_node_execution_id();
  ::flyteidl::core::NodeExecutionIdentifier* mutable_node_execution_id();
  void set_allocated_node_execution_id(::flyteidl::core::NodeExecutionIdentifier* node_execution_id);
  private:
  const ::flyteidl::core::NodeExecutionIdentifier& _internal_node_execution_id() const;
  ::flyteidl::core::NodeExecutionIdentifier* _internal_mutable_node_execution_id();
  public:
  void unsafe_arena_set_allocated_node_execution_id(
      ::flyteidl::core::NodeExecutionIdentifier* node_execution_id);
  ::flyteidl::core::NodeExecutionIdentifier* unsafe_arena_release_node_execution_id();

  // uint32 retry_attempt = 3 [json_name = "retryAttempt"];
  void clear_retry_attempt();
  uint32_t retry_attempt() const;
  void set_retry_attempt(uint32_t value);
  private:
  uint32_t _internal_retry_attempt() const;
  void _internal_set_retry_attempt(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.core.TaskExecutionIdentifier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::Identifier* task_id_;
  ::flyteidl::core::NodeExecutionIdentifier* node_execution_id_;
  uint32_t retry_attempt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fidentifier_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Identifier

// .flyteidl.core.ResourceType resource_type = 1 [json_name = "resourceType"];
inline void Identifier::clear_resource_type() {
  resource_type_ = 0;
}
inline ::flyteidl::core::ResourceType Identifier::_internal_resource_type() const {
  return static_cast< ::flyteidl::core::ResourceType >(resource_type_);
}
inline ::flyteidl::core::ResourceType Identifier::resource_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Identifier.resource_type)
  return _internal_resource_type();
}
inline void Identifier::_internal_set_resource_type(::flyteidl::core::ResourceType value) {
  
  resource_type_ = value;
}
inline void Identifier::set_resource_type(::flyteidl::core::ResourceType value) {
  _internal_set_resource_type(value);
  // @@protoc_insertion_point(field_set:flyteidl.core.Identifier.resource_type)
}

// string project = 2 [json_name = "project"];
inline void Identifier::clear_project() {
  project_.ClearToEmpty();
}
inline const std::string& Identifier::project() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Identifier.project)
  return _internal_project();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Identifier::set_project(ArgT0&& arg0, ArgT... args) {
 
 project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.core.Identifier.project)
}
inline std::string* Identifier::mutable_project() {
  std::string* _s = _internal_mutable_project();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Identifier.project)
  return _s;
}
inline const std::string& Identifier::_internal_project() const {
  return project_.Get();
}
inline void Identifier::_internal_set_project(const std::string& value) {
  
  project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Identifier::_internal_mutable_project() {
  
  return project_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Identifier::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Identifier.project)
  return project_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Identifier::set_allocated_project(std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (project_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    project_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Identifier.project)
}

// string domain = 3 [json_name = "domain"];
inline void Identifier::clear_domain() {
  domain_.ClearToEmpty();
}
inline const std::string& Identifier::domain() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Identifier.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Identifier::set_domain(ArgT0&& arg0, ArgT... args) {
 
 domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.core.Identifier.domain)
}
inline std::string* Identifier::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Identifier.domain)
  return _s;
}
inline const std::string& Identifier::_internal_domain() const {
  return domain_.Get();
}
inline void Identifier::_internal_set_domain(const std::string& value) {
  
  domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Identifier::_internal_mutable_domain() {
  
  return domain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Identifier::release_domain() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Identifier.domain)
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Identifier::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (domain_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Identifier.domain)
}

// string name = 4 [json_name = "name"];
inline void Identifier::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Identifier::name() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Identifier.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Identifier::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.core.Identifier.name)
}
inline std::string* Identifier::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Identifier.name)
  return _s;
}
inline const std::string& Identifier::_internal_name() const {
  return name_.Get();
}
inline void Identifier::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Identifier::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Identifier::release_name() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Identifier.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Identifier::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Identifier.name)
}

// string version = 5 [json_name = "version"];
inline void Identifier::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& Identifier::version() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Identifier.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Identifier::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.core.Identifier.version)
}
inline std::string* Identifier::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Identifier.version)
  return _s;
}
inline const std::string& Identifier::_internal_version() const {
  return version_.Get();
}
inline void Identifier::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Identifier::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Identifier::release_version() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Identifier.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Identifier::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Identifier.version)
}

// -------------------------------------------------------------------

// WorkflowExecutionIdentifier

// string project = 1 [json_name = "project"];
inline void WorkflowExecutionIdentifier::clear_project() {
  project_.ClearToEmpty();
}
inline const std::string& WorkflowExecutionIdentifier::project() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowExecutionIdentifier.project)
  return _internal_project();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkflowExecutionIdentifier::set_project(ArgT0&& arg0, ArgT... args) {
 
 project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.core.WorkflowExecutionIdentifier.project)
}
inline std::string* WorkflowExecutionIdentifier::mutable_project() {
  std::string* _s = _internal_mutable_project();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowExecutionIdentifier.project)
  return _s;
}
inline const std::string& WorkflowExecutionIdentifier::_internal_project() const {
  return project_.Get();
}
inline void WorkflowExecutionIdentifier::_internal_set_project(const std::string& value) {
  
  project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorkflowExecutionIdentifier::_internal_mutable_project() {
  
  return project_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorkflowExecutionIdentifier::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.core.WorkflowExecutionIdentifier.project)
  return project_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WorkflowExecutionIdentifier::set_allocated_project(std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (project_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    project_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.WorkflowExecutionIdentifier.project)
}

// string domain = 2 [json_name = "domain"];
inline void WorkflowExecutionIdentifier::clear_domain() {
  domain_.ClearToEmpty();
}
inline const std::string& WorkflowExecutionIdentifier::domain() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowExecutionIdentifier.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkflowExecutionIdentifier::set_domain(ArgT0&& arg0, ArgT... args) {
 
 domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.core.WorkflowExecutionIdentifier.domain)
}
inline std::string* WorkflowExecutionIdentifier::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowExecutionIdentifier.domain)
  return _s;
}
inline const std::string& WorkflowExecutionIdentifier::_internal_domain() const {
  return domain_.Get();
}
inline void WorkflowExecutionIdentifier::_internal_set_domain(const std::string& value) {
  
  domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorkflowExecutionIdentifier::_internal_mutable_domain() {
  
  return domain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorkflowExecutionIdentifier::release_domain() {
  // @@protoc_insertion_point(field_release:flyteidl.core.WorkflowExecutionIdentifier.domain)
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WorkflowExecutionIdentifier::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (domain_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.WorkflowExecutionIdentifier.domain)
}

// string name = 4 [json_name = "name"];
inline void WorkflowExecutionIdentifier::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& WorkflowExecutionIdentifier::name() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowExecutionIdentifier.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkflowExecutionIdentifier::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.core.WorkflowExecutionIdentifier.name)
}
inline std::string* WorkflowExecutionIdentifier::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowExecutionIdentifier.name)
  return _s;
}
inline const std::string& WorkflowExecutionIdentifier::_internal_name() const {
  return name_.Get();
}
inline void WorkflowExecutionIdentifier::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorkflowExecutionIdentifier::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorkflowExecutionIdentifier::release_name() {
  // @@protoc_insertion_point(field_release:flyteidl.core.WorkflowExecutionIdentifier.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WorkflowExecutionIdentifier::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.WorkflowExecutionIdentifier.name)
}

// -------------------------------------------------------------------

// NodeExecutionIdentifier

// string node_id = 1 [json_name = "nodeId"];
inline void NodeExecutionIdentifier::clear_node_id() {
  node_id_.ClearToEmpty();
}
inline const std::string& NodeExecutionIdentifier::node_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.NodeExecutionIdentifier.node_id)
  return _internal_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeExecutionIdentifier::set_node_id(ArgT0&& arg0, ArgT... args) {
 
 node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.core.NodeExecutionIdentifier.node_id)
}
inline std::string* NodeExecutionIdentifier::mutable_node_id() {
  std::string* _s = _internal_mutable_node_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.NodeExecutionIdentifier.node_id)
  return _s;
}
inline const std::string& NodeExecutionIdentifier::_internal_node_id() const {
  return node_id_.Get();
}
inline void NodeExecutionIdentifier::_internal_set_node_id(const std::string& value) {
  
  node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NodeExecutionIdentifier::_internal_mutable_node_id() {
  
  return node_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NodeExecutionIdentifier::release_node_id() {
  // @@protoc_insertion_point(field_release:flyteidl.core.NodeExecutionIdentifier.node_id)
  return node_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NodeExecutionIdentifier::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (node_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.NodeExecutionIdentifier.node_id)
}

// .flyteidl.core.WorkflowExecutionIdentifier execution_id = 2 [json_name = "executionId"];
inline bool NodeExecutionIdentifier::_internal_has_execution_id() const {
  return this != internal_default_instance() && execution_id_ != nullptr;
}
inline bool NodeExecutionIdentifier::has_execution_id() const {
  return _internal_has_execution_id();
}
inline void NodeExecutionIdentifier::clear_execution_id() {
  if (GetArenaForAllocation() == nullptr && execution_id_ != nullptr) {
    delete execution_id_;
  }
  execution_id_ = nullptr;
}
inline const ::flyteidl::core::WorkflowExecutionIdentifier& NodeExecutionIdentifier::_internal_execution_id() const {
  const ::flyteidl::core::WorkflowExecutionIdentifier* p = execution_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::WorkflowExecutionIdentifier&>(
      ::flyteidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline const ::flyteidl::core::WorkflowExecutionIdentifier& NodeExecutionIdentifier::execution_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.NodeExecutionIdentifier.execution_id)
  return _internal_execution_id();
}
inline void NodeExecutionIdentifier::unsafe_arena_set_allocated_execution_id(
    ::flyteidl::core::WorkflowExecutionIdentifier* execution_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_id_);
  }
  execution_id_ = execution_id;
  if (execution_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.NodeExecutionIdentifier.execution_id)
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* NodeExecutionIdentifier::release_execution_id() {
  
  ::flyteidl::core::WorkflowExecutionIdentifier* temp = execution_id_;
  execution_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* NodeExecutionIdentifier::unsafe_arena_release_execution_id() {
  // @@protoc_insertion_point(field_release:flyteidl.core.NodeExecutionIdentifier.execution_id)
  
  ::flyteidl::core::WorkflowExecutionIdentifier* temp = execution_id_;
  execution_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* NodeExecutionIdentifier::_internal_mutable_execution_id() {
  
  if (execution_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::WorkflowExecutionIdentifier>(GetArenaForAllocation());
    execution_id_ = p;
  }
  return execution_id_;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* NodeExecutionIdentifier::mutable_execution_id() {
  ::flyteidl::core::WorkflowExecutionIdentifier* _msg = _internal_mutable_execution_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.NodeExecutionIdentifier.execution_id)
  return _msg;
}
inline void NodeExecutionIdentifier::set_allocated_execution_id(::flyteidl::core::WorkflowExecutionIdentifier* execution_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete execution_id_;
  }
  if (execution_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::WorkflowExecutionIdentifier>::GetOwningArena(execution_id);
    if (message_arena != submessage_arena) {
      execution_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execution_id, submessage_arena);
    }
    
  } else {
    
  }
  execution_id_ = execution_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.NodeExecutionIdentifier.execution_id)
}

// -------------------------------------------------------------------

// TaskExecutionIdentifier

// .flyteidl.core.Identifier task_id = 1 [json_name = "taskId"];
inline bool TaskExecutionIdentifier::_internal_has_task_id() const {
  return this != internal_default_instance() && task_id_ != nullptr;
}
inline bool TaskExecutionIdentifier::has_task_id() const {
  return _internal_has_task_id();
}
inline void TaskExecutionIdentifier::clear_task_id() {
  if (GetArenaForAllocation() == nullptr && task_id_ != nullptr) {
    delete task_id_;
  }
  task_id_ = nullptr;
}
inline const ::flyteidl::core::Identifier& TaskExecutionIdentifier::_internal_task_id() const {
  const ::flyteidl::core::Identifier* p = task_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::Identifier&>(
      ::flyteidl::core::_Identifier_default_instance_);
}
inline const ::flyteidl::core::Identifier& TaskExecutionIdentifier::task_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.TaskExecutionIdentifier.task_id)
  return _internal_task_id();
}
inline void TaskExecutionIdentifier::unsafe_arena_set_allocated_task_id(
    ::flyteidl::core::Identifier* task_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_id_);
  }
  task_id_ = task_id;
  if (task_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.TaskExecutionIdentifier.task_id)
}
inline ::flyteidl::core::Identifier* TaskExecutionIdentifier::release_task_id() {
  
  ::flyteidl::core::Identifier* temp = task_id_;
  task_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::Identifier* TaskExecutionIdentifier::unsafe_arena_release_task_id() {
  // @@protoc_insertion_point(field_release:flyteidl.core.TaskExecutionIdentifier.task_id)
  
  ::flyteidl::core::Identifier* temp = task_id_;
  task_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identifier* TaskExecutionIdentifier::_internal_mutable_task_id() {
  
  if (task_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identifier>(GetArenaForAllocation());
    task_id_ = p;
  }
  return task_id_;
}
inline ::flyteidl::core::Identifier* TaskExecutionIdentifier::mutable_task_id() {
  ::flyteidl::core::Identifier* _msg = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.TaskExecutionIdentifier.task_id)
  return _msg;
}
inline void TaskExecutionIdentifier::set_allocated_task_id(::flyteidl::core::Identifier* task_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete task_id_;
  }
  if (task_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::Identifier>::GetOwningArena(task_id);
    if (message_arena != submessage_arena) {
      task_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_id, submessage_arena);
    }
    
  } else {
    
  }
  task_id_ = task_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.TaskExecutionIdentifier.task_id)
}

// .flyteidl.core.NodeExecutionIdentifier node_execution_id = 2 [json_name = "nodeExecutionId"];
inline bool TaskExecutionIdentifier::_internal_has_node_execution_id() const {
  return this != internal_default_instance() && node_execution_id_ != nullptr;
}
inline bool TaskExecutionIdentifier::has_node_execution_id() const {
  return _internal_has_node_execution_id();
}
inline void TaskExecutionIdentifier::clear_node_execution_id() {
  if (GetArenaForAllocation() == nullptr && node_execution_id_ != nullptr) {
    delete node_execution_id_;
  }
  node_execution_id_ = nullptr;
}
inline const ::flyteidl::core::NodeExecutionIdentifier& TaskExecutionIdentifier::_internal_node_execution_id() const {
  const ::flyteidl::core::NodeExecutionIdentifier* p = node_execution_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::NodeExecutionIdentifier&>(
      ::flyteidl::core::_NodeExecutionIdentifier_default_instance_);
}
inline const ::flyteidl::core::NodeExecutionIdentifier& TaskExecutionIdentifier::node_execution_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.TaskExecutionIdentifier.node_execution_id)
  return _internal_node_execution_id();
}
inline void TaskExecutionIdentifier::unsafe_arena_set_allocated_node_execution_id(
    ::flyteidl::core::NodeExecutionIdentifier* node_execution_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_execution_id_);
  }
  node_execution_id_ = node_execution_id;
  if (node_execution_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.TaskExecutionIdentifier.node_execution_id)
}
inline ::flyteidl::core::NodeExecutionIdentifier* TaskExecutionIdentifier::release_node_execution_id() {
  
  ::flyteidl::core::NodeExecutionIdentifier* temp = node_execution_id_;
  node_execution_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::NodeExecutionIdentifier* TaskExecutionIdentifier::unsafe_arena_release_node_execution_id() {
  // @@protoc_insertion_point(field_release:flyteidl.core.TaskExecutionIdentifier.node_execution_id)
  
  ::flyteidl::core::NodeExecutionIdentifier* temp = node_execution_id_;
  node_execution_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::NodeExecutionIdentifier* TaskExecutionIdentifier::_internal_mutable_node_execution_id() {
  
  if (node_execution_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::NodeExecutionIdentifier>(GetArenaForAllocation());
    node_execution_id_ = p;
  }
  return node_execution_id_;
}
inline ::flyteidl::core::NodeExecutionIdentifier* TaskExecutionIdentifier::mutable_node_execution_id() {
  ::flyteidl::core::NodeExecutionIdentifier* _msg = _internal_mutable_node_execution_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.TaskExecutionIdentifier.node_execution_id)
  return _msg;
}
inline void TaskExecutionIdentifier::set_allocated_node_execution_id(::flyteidl::core::NodeExecutionIdentifier* node_execution_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete node_execution_id_;
  }
  if (node_execution_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::NodeExecutionIdentifier>::GetOwningArena(node_execution_id);
    if (message_arena != submessage_arena) {
      node_execution_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_execution_id, submessage_arena);
    }
    
  } else {
    
  }
  node_execution_id_ = node_execution_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.TaskExecutionIdentifier.node_execution_id)
}

// uint32 retry_attempt = 3 [json_name = "retryAttempt"];
inline void TaskExecutionIdentifier::clear_retry_attempt() {
  retry_attempt_ = 0u;
}
inline uint32_t TaskExecutionIdentifier::_internal_retry_attempt() const {
  return retry_attempt_;
}
inline uint32_t TaskExecutionIdentifier::retry_attempt() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.TaskExecutionIdentifier.retry_attempt)
  return _internal_retry_attempt();
}
inline void TaskExecutionIdentifier::_internal_set_retry_attempt(uint32_t value) {
  
  retry_attempt_ = value;
}
inline void TaskExecutionIdentifier::set_retry_attempt(uint32_t value) {
  _internal_set_retry_attempt(value);
  // @@protoc_insertion_point(field_set:flyteidl.core.TaskExecutionIdentifier.retry_attempt)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace flyteidl

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::flyteidl::core::ResourceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::core::ResourceType>() {
  return ::flyteidl::core::ResourceType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fcore_2fidentifier_2eproto
