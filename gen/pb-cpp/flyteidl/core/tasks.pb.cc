// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/tasks.proto

#include "flyteidl/core/tasks.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2finterface_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TypedInterface_flyteidl_2fcore_2finterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fliterals_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_KeyValuePair_flyteidl_2fcore_2fliterals_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fliterals_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RetryStrategy_flyteidl_2fcore_2fliterals_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fsecurity_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_SecurityContext_flyteidl_2fcore_2fsecurity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2ftasks_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ContainerPort_flyteidl_2fcore_2ftasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2ftasks_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IOStrategy_flyteidl_2fcore_2ftasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2ftasks_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_K8sObjectMetadata_AnnotationsEntry_DoNotUse_flyteidl_2fcore_2ftasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2ftasks_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_K8sObjectMetadata_LabelsEntry_DoNotUse_flyteidl_2fcore_2ftasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2ftasks_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Resources_ResourceEntry_flyteidl_2fcore_2ftasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2ftasks_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RuntimeMetadata_flyteidl_2fcore_2ftasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2ftasks_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Sql_flyteidl_2fcore_2ftasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2ftasks_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TaskMetadata_TagsEntry_DoNotUse_flyteidl_2fcore_2ftasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2ftasks_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TaskTemplate_ConfigEntry_DoNotUse_flyteidl_2fcore_2ftasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2ftasks_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DataLoadingConfig_flyteidl_2fcore_2ftasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2ftasks_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Resources_flyteidl_2fcore_2ftasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2ftasks_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_K8sObjectMetadata_flyteidl_2fcore_2ftasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2ftasks_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_K8sPod_flyteidl_2fcore_2ftasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2ftasks_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Container_flyteidl_2fcore_2ftasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2ftasks_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_TaskMetadata_flyteidl_2fcore_2ftasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fstruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto;
namespace flyteidl {
namespace core {
class Resources_ResourceEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Resources_ResourceEntry> _instance;
} _Resources_ResourceEntry_default_instance_;
class ResourcesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Resources> _instance;
} _Resources_default_instance_;
class RuntimeMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RuntimeMetadata> _instance;
} _RuntimeMetadata_default_instance_;
class TaskMetadata_TagsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskMetadata_TagsEntry_DoNotUse> _instance;
} _TaskMetadata_TagsEntry_DoNotUse_default_instance_;
class TaskMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskMetadata> _instance;
  bool interruptible_;
} _TaskMetadata_default_instance_;
class TaskTemplate_ConfigEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskTemplate_ConfigEntry_DoNotUse> _instance;
} _TaskTemplate_ConfigEntry_DoNotUse_default_instance_;
class TaskTemplateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskTemplate> _instance;
  const ::flyteidl::core::Container* container_;
  const ::flyteidl::core::K8sPod* k8s_pod_;
  const ::flyteidl::core::Sql* sql_;
} _TaskTemplate_default_instance_;
class ContainerPortDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ContainerPort> _instance;
} _ContainerPort_default_instance_;
class ContainerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Container> _instance;
} _Container_default_instance_;
class IOStrategyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IOStrategy> _instance;
} _IOStrategy_default_instance_;
class DataLoadingConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataLoadingConfig> _instance;
} _DataLoadingConfig_default_instance_;
class K8sPodDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<K8sPod> _instance;
} _K8sPod_default_instance_;
class K8sObjectMetadata_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<K8sObjectMetadata_LabelsEntry_DoNotUse> _instance;
} _K8sObjectMetadata_LabelsEntry_DoNotUse_default_instance_;
class K8sObjectMetadata_AnnotationsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<K8sObjectMetadata_AnnotationsEntry_DoNotUse> _instance;
} _K8sObjectMetadata_AnnotationsEntry_DoNotUse_default_instance_;
class K8sObjectMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<K8sObjectMetadata> _instance;
} _K8sObjectMetadata_default_instance_;
class SqlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sql> _instance;
} _Sql_default_instance_;
}  // namespace core
}  // namespace flyteidl
static void InitDefaultsResources_ResourceEntry_flyteidl_2fcore_2ftasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_Resources_ResourceEntry_default_instance_;
    new (ptr) ::flyteidl::core::Resources_ResourceEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::Resources_ResourceEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Resources_ResourceEntry_flyteidl_2fcore_2ftasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResources_ResourceEntry_flyteidl_2fcore_2ftasks_2eproto}, {}};

static void InitDefaultsResources_flyteidl_2fcore_2ftasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_Resources_default_instance_;
    new (ptr) ::flyteidl::core::Resources();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::Resources::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Resources_flyteidl_2fcore_2ftasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsResources_flyteidl_2fcore_2ftasks_2eproto}, {
      &scc_info_Resources_ResourceEntry_flyteidl_2fcore_2ftasks_2eproto.base,}};

static void InitDefaultsRuntimeMetadata_flyteidl_2fcore_2ftasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_RuntimeMetadata_default_instance_;
    new (ptr) ::flyteidl::core::RuntimeMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::RuntimeMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RuntimeMetadata_flyteidl_2fcore_2ftasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRuntimeMetadata_flyteidl_2fcore_2ftasks_2eproto}, {}};

static void InitDefaultsTaskMetadata_TagsEntry_DoNotUse_flyteidl_2fcore_2ftasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_TaskMetadata_TagsEntry_DoNotUse_default_instance_;
    new (ptr) ::flyteidl::core::TaskMetadata_TagsEntry_DoNotUse();
  }
  ::flyteidl::core::TaskMetadata_TagsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TaskMetadata_TagsEntry_DoNotUse_flyteidl_2fcore_2ftasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTaskMetadata_TagsEntry_DoNotUse_flyteidl_2fcore_2ftasks_2eproto}, {}};

static void InitDefaultsTaskMetadata_flyteidl_2fcore_2ftasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_TaskMetadata_default_instance_;
    new (ptr) ::flyteidl::core::TaskMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::TaskMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_TaskMetadata_flyteidl_2fcore_2ftasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsTaskMetadata_flyteidl_2fcore_2ftasks_2eproto}, {
      &scc_info_RuntimeMetadata_flyteidl_2fcore_2ftasks_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,
      &scc_info_RetryStrategy_flyteidl_2fcore_2fliterals_2eproto.base,
      &scc_info_TaskMetadata_TagsEntry_DoNotUse_flyteidl_2fcore_2ftasks_2eproto.base,}};

static void InitDefaultsTaskTemplate_ConfigEntry_DoNotUse_flyteidl_2fcore_2ftasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_TaskTemplate_ConfigEntry_DoNotUse_default_instance_;
    new (ptr) ::flyteidl::core::TaskTemplate_ConfigEntry_DoNotUse();
  }
  ::flyteidl::core::TaskTemplate_ConfigEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TaskTemplate_ConfigEntry_DoNotUse_flyteidl_2fcore_2ftasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTaskTemplate_ConfigEntry_DoNotUse_flyteidl_2fcore_2ftasks_2eproto}, {}};

static void InitDefaultsTaskTemplate_flyteidl_2fcore_2ftasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_TaskTemplate_default_instance_;
    new (ptr) ::flyteidl::core::TaskTemplate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::TaskTemplate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<9> scc_info_TaskTemplate_flyteidl_2fcore_2ftasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 9, InitDefaultsTaskTemplate_flyteidl_2fcore_2ftasks_2eproto}, {
      &scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_TaskMetadata_flyteidl_2fcore_2ftasks_2eproto.base,
      &scc_info_TypedInterface_flyteidl_2fcore_2finterface_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,
      &scc_info_Container_flyteidl_2fcore_2ftasks_2eproto.base,
      &scc_info_K8sPod_flyteidl_2fcore_2ftasks_2eproto.base,
      &scc_info_Sql_flyteidl_2fcore_2ftasks_2eproto.base,
      &scc_info_SecurityContext_flyteidl_2fcore_2fsecurity_2eproto.base,
      &scc_info_TaskTemplate_ConfigEntry_DoNotUse_flyteidl_2fcore_2ftasks_2eproto.base,}};

static void InitDefaultsContainerPort_flyteidl_2fcore_2ftasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_ContainerPort_default_instance_;
    new (ptr) ::flyteidl::core::ContainerPort();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::ContainerPort::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ContainerPort_flyteidl_2fcore_2ftasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsContainerPort_flyteidl_2fcore_2ftasks_2eproto}, {}};

static void InitDefaultsContainer_flyteidl_2fcore_2ftasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_Container_default_instance_;
    new (ptr) ::flyteidl::core::Container();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::Container::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Container_flyteidl_2fcore_2ftasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsContainer_flyteidl_2fcore_2ftasks_2eproto}, {
      &scc_info_Resources_flyteidl_2fcore_2ftasks_2eproto.base,
      &scc_info_KeyValuePair_flyteidl_2fcore_2fliterals_2eproto.base,
      &scc_info_ContainerPort_flyteidl_2fcore_2ftasks_2eproto.base,
      &scc_info_DataLoadingConfig_flyteidl_2fcore_2ftasks_2eproto.base,}};

static void InitDefaultsIOStrategy_flyteidl_2fcore_2ftasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_IOStrategy_default_instance_;
    new (ptr) ::flyteidl::core::IOStrategy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::IOStrategy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IOStrategy_flyteidl_2fcore_2ftasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIOStrategy_flyteidl_2fcore_2ftasks_2eproto}, {}};

static void InitDefaultsDataLoadingConfig_flyteidl_2fcore_2ftasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_DataLoadingConfig_default_instance_;
    new (ptr) ::flyteidl::core::DataLoadingConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::DataLoadingConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DataLoadingConfig_flyteidl_2fcore_2ftasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDataLoadingConfig_flyteidl_2fcore_2ftasks_2eproto}, {
      &scc_info_IOStrategy_flyteidl_2fcore_2ftasks_2eproto.base,}};

static void InitDefaultsK8sPod_flyteidl_2fcore_2ftasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_K8sPod_default_instance_;
    new (ptr) ::flyteidl::core::K8sPod();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::K8sPod::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_K8sPod_flyteidl_2fcore_2ftasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsK8sPod_flyteidl_2fcore_2ftasks_2eproto}, {
      &scc_info_K8sObjectMetadata_flyteidl_2fcore_2ftasks_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,
      &scc_info_DataLoadingConfig_flyteidl_2fcore_2ftasks_2eproto.base,}};

static void InitDefaultsK8sObjectMetadata_LabelsEntry_DoNotUse_flyteidl_2fcore_2ftasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_K8sObjectMetadata_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::flyteidl::core::K8sObjectMetadata_LabelsEntry_DoNotUse();
  }
  ::flyteidl::core::K8sObjectMetadata_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_K8sObjectMetadata_LabelsEntry_DoNotUse_flyteidl_2fcore_2ftasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsK8sObjectMetadata_LabelsEntry_DoNotUse_flyteidl_2fcore_2ftasks_2eproto}, {}};

static void InitDefaultsK8sObjectMetadata_AnnotationsEntry_DoNotUse_flyteidl_2fcore_2ftasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_K8sObjectMetadata_AnnotationsEntry_DoNotUse_default_instance_;
    new (ptr) ::flyteidl::core::K8sObjectMetadata_AnnotationsEntry_DoNotUse();
  }
  ::flyteidl::core::K8sObjectMetadata_AnnotationsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_K8sObjectMetadata_AnnotationsEntry_DoNotUse_flyteidl_2fcore_2ftasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsK8sObjectMetadata_AnnotationsEntry_DoNotUse_flyteidl_2fcore_2ftasks_2eproto}, {}};

static void InitDefaultsK8sObjectMetadata_flyteidl_2fcore_2ftasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_K8sObjectMetadata_default_instance_;
    new (ptr) ::flyteidl::core::K8sObjectMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::K8sObjectMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_K8sObjectMetadata_flyteidl_2fcore_2ftasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsK8sObjectMetadata_flyteidl_2fcore_2ftasks_2eproto}, {
      &scc_info_K8sObjectMetadata_LabelsEntry_DoNotUse_flyteidl_2fcore_2ftasks_2eproto.base,
      &scc_info_K8sObjectMetadata_AnnotationsEntry_DoNotUse_flyteidl_2fcore_2ftasks_2eproto.base,}};

static void InitDefaultsSql_flyteidl_2fcore_2ftasks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_Sql_default_instance_;
    new (ptr) ::flyteidl::core::Sql();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::Sql::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Sql_flyteidl_2fcore_2ftasks_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSql_flyteidl_2fcore_2ftasks_2eproto}, {}};

void InitDefaults_flyteidl_2fcore_2ftasks_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Resources_ResourceEntry_flyteidl_2fcore_2ftasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Resources_flyteidl_2fcore_2ftasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RuntimeMetadata_flyteidl_2fcore_2ftasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskMetadata_TagsEntry_DoNotUse_flyteidl_2fcore_2ftasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskMetadata_flyteidl_2fcore_2ftasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskTemplate_ConfigEntry_DoNotUse_flyteidl_2fcore_2ftasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskTemplate_flyteidl_2fcore_2ftasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ContainerPort_flyteidl_2fcore_2ftasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Container_flyteidl_2fcore_2ftasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IOStrategy_flyteidl_2fcore_2ftasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DataLoadingConfig_flyteidl_2fcore_2ftasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_K8sPod_flyteidl_2fcore_2ftasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_K8sObjectMetadata_LabelsEntry_DoNotUse_flyteidl_2fcore_2ftasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_K8sObjectMetadata_AnnotationsEntry_DoNotUse_flyteidl_2fcore_2ftasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_K8sObjectMetadata_flyteidl_2fcore_2ftasks_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Sql_flyteidl_2fcore_2ftasks_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[16];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fcore_2ftasks_2eproto[7];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fcore_2ftasks_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fcore_2ftasks_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Resources_ResourceEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Resources_ResourceEntry, name_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Resources_ResourceEntry, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Resources, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Resources, requests_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Resources, limits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::RuntimeMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::RuntimeMetadata, type_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::RuntimeMetadata, version_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::RuntimeMetadata, flavor_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskMetadata_TagsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskMetadata_TagsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskMetadata_TagsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskMetadata_TagsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskMetadata, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskMetadata, discoverable_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskMetadata, runtime_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskMetadata, timeout_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskMetadata, retries_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskMetadata, discovery_version_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskMetadata, deprecated_error_message_),
  offsetof(::flyteidl::core::TaskMetadataDefaultTypeInternal, interruptible_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskMetadata, cache_serializable_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskMetadata, generates_deck_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskMetadata, tags_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskMetadata, pod_template_name_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskMetadata, interruptible_value_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate_ConfigEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate_ConfigEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate_ConfigEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate_ConfigEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate, type_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate, metadata_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate, interface_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate, custom_),
  offsetof(::flyteidl::core::TaskTemplateDefaultTypeInternal, container_),
  offsetof(::flyteidl::core::TaskTemplateDefaultTypeInternal, k8s_pod_),
  offsetof(::flyteidl::core::TaskTemplateDefaultTypeInternal, sql_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate, task_type_version_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate, security_context_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate, config_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ContainerPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ContainerPort, container_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Container, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Container, image_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Container, command_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Container, args_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Container, resources_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Container, env_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Container, config_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Container, ports_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Container, data_config_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Container, architecture_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::IOStrategy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::IOStrategy, download_mode_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::IOStrategy, upload_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::DataLoadingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::DataLoadingConfig, enabled_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::DataLoadingConfig, input_path_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::DataLoadingConfig, output_path_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::DataLoadingConfig, format_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::DataLoadingConfig, io_strategy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sPod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sPod, metadata_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sPod, pod_spec_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sPod, data_config_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sObjectMetadata_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sObjectMetadata_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sObjectMetadata_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sObjectMetadata_LabelsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sObjectMetadata_AnnotationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sObjectMetadata_AnnotationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sObjectMetadata_AnnotationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sObjectMetadata_AnnotationsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sObjectMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sObjectMetadata, labels_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sObjectMetadata, annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Sql, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Sql, statement_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Sql, dialect_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::core::Resources_ResourceEntry)},
  { 7, -1, sizeof(::flyteidl::core::Resources)},
  { 14, -1, sizeof(::flyteidl::core::RuntimeMetadata)},
  { 22, 29, sizeof(::flyteidl::core::TaskMetadata_TagsEntry_DoNotUse)},
  { 31, -1, sizeof(::flyteidl::core::TaskMetadata)},
  { 48, 55, sizeof(::flyteidl::core::TaskTemplate_ConfigEntry_DoNotUse)},
  { 57, -1, sizeof(::flyteidl::core::TaskTemplate)},
  { 74, -1, sizeof(::flyteidl::core::ContainerPort)},
  { 80, -1, sizeof(::flyteidl::core::Container)},
  { 94, -1, sizeof(::flyteidl::core::IOStrategy)},
  { 101, -1, sizeof(::flyteidl::core::DataLoadingConfig)},
  { 111, -1, sizeof(::flyteidl::core::K8sPod)},
  { 119, 126, sizeof(::flyteidl::core::K8sObjectMetadata_LabelsEntry_DoNotUse)},
  { 128, 135, sizeof(::flyteidl::core::K8sObjectMetadata_AnnotationsEntry_DoNotUse)},
  { 137, -1, sizeof(::flyteidl::core::K8sObjectMetadata)},
  { 144, -1, sizeof(::flyteidl::core::Sql)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_Resources_ResourceEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_Resources_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_RuntimeMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_TaskMetadata_TagsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_TaskMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_TaskTemplate_ConfigEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_TaskTemplate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_ContainerPort_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_Container_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_IOStrategy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_DataLoadingConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_K8sPod_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_K8sObjectMetadata_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_K8sObjectMetadata_AnnotationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_K8sObjectMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_Sql_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fcore_2ftasks_2eproto = {
  {}, AddDescriptors_flyteidl_2fcore_2ftasks_2eproto, "flyteidl/core/tasks.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fcore_2ftasks_2eproto::offsets,
  file_level_metadata_flyteidl_2fcore_2ftasks_2eproto, 16, file_level_enum_descriptors_flyteidl_2fcore_2ftasks_2eproto, file_level_service_descriptors_flyteidl_2fcore_2ftasks_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fcore_2ftasks_2eproto[] =
  "\n\031flyteidl/core/tasks.proto\022\rflyteidl.co"
  "re\032\036flyteidl/core/identifier.proto\032\035flyt"
  "eidl/core/interface.proto\032\034flyteidl/core"
  "/literals.proto\032\034flyteidl/core/security."
  "proto\032\036google/protobuf/duration.proto\032\034g"
  "oogle/protobuf/struct.proto\"\261\002\n\tResource"
  "s\0228\n\010requests\030\001 \003(\0132&.flyteidl.core.Reso"
  "urces.ResourceEntry\0226\n\006limits\030\002 \003(\0132&.fl"
  "yteidl.core.Resources.ResourceEntry\032S\n\rR"
  "esourceEntry\0223\n\004name\030\001 \001(\0162%.flyteidl.co"
  "re.Resources.ResourceName\022\r\n\005value\030\002 \001(\t"
  "\"]\n\014ResourceName\022\013\n\007UNKNOWN\020\000\022\007\n\003CPU\020\001\022\007"
  "\n\003GPU\020\002\022\n\n\006MEMORY\020\003\022\013\n\007STORAGE\020\004\022\025\n\021EPHE"
  "MERAL_STORAGE\020\005\"\225\001\n\017RuntimeMetadata\0228\n\004t"
  "ype\030\001 \001(\0162*.flyteidl.core.RuntimeMetadat"
  "a.RuntimeType\022\017\n\007version\030\002 \001(\t\022\016\n\006flavor"
  "\030\003 \001(\t\"\'\n\013RuntimeType\022\t\n\005OTHER\020\000\022\r\n\tFLYT"
  "E_SDK\020\001\"\316\003\n\014TaskMetadata\022\024\n\014discoverable"
  "\030\001 \001(\010\022/\n\007runtime\030\002 \001(\0132\036.flyteidl.core."
  "RuntimeMetadata\022*\n\007timeout\030\004 \001(\0132\031.googl"
  "e.protobuf.Duration\022-\n\007retries\030\005 \001(\0132\034.f"
  "lyteidl.core.RetryStrategy\022\031\n\021discovery_"
  "version\030\006 \001(\t\022 \n\030deprecated_error_messag"
  "e\030\007 \001(\t\022\027\n\rinterruptible\030\010 \001(\010H\000\022\032\n\022cach"
  "e_serializable\030\t \001(\010\022\026\n\016generates_deck\030\n"
  " \001(\010\0223\n\004tags\030\013 \003(\0132%.flyteidl.core.TaskM"
  "etadata.TagsEntry\022\031\n\021pod_template_name\030\014"
  " \001(\t\032+\n\tTagsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
  "\002 \001(\t:\0028\001B\025\n\023interruptible_value\"\220\004\n\014Tas"
  "kTemplate\022%\n\002id\030\001 \001(\0132\031.flyteidl.core.Id"
  "entifier\022\014\n\004type\030\002 \001(\t\022-\n\010metadata\030\003 \001(\013"
  "2\033.flyteidl.core.TaskMetadata\0220\n\tinterfa"
  "ce\030\004 \001(\0132\035.flyteidl.core.TypedInterface\022"
  "\'\n\006custom\030\005 \001(\0132\027.google.protobuf.Struct"
  "\022-\n\tcontainer\030\006 \001(\0132\030.flyteidl.core.Cont"
  "ainerH\000\022(\n\007k8s_pod\030\021 \001(\0132\025.flyteidl.core"
  ".K8sPodH\000\022!\n\003sql\030\022 \001(\0132\022.flyteidl.core.S"
  "qlH\000\022\031\n\021task_type_version\030\007 \001(\005\0228\n\020secur"
  "ity_context\030\010 \001(\0132\036.flyteidl.core.Securi"
  "tyContext\0227\n\006config\030\020 \003(\0132\'.flyteidl.cor"
  "e.TaskTemplate.ConfigEntry\032-\n\013ConfigEntr"
  "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\010\n\006tar"
  "get\"\'\n\rContainerPort\022\026\n\016container_port\030\001"
  " \001(\r\"\255\003\n\tContainer\022\r\n\005image\030\001 \001(\t\022\017\n\007com"
  "mand\030\002 \003(\t\022\014\n\004args\030\003 \003(\t\022+\n\tresources\030\004 "
  "\001(\0132\030.flyteidl.core.Resources\022(\n\003env\030\005 \003"
  "(\0132\033.flyteidl.core.KeyValuePair\022/\n\006confi"
  "g\030\006 \003(\0132\033.flyteidl.core.KeyValuePairB\002\030\001"
  "\022+\n\005ports\030\007 \003(\0132\034.flyteidl.core.Containe"
  "rPort\0225\n\013data_config\030\t \001(\0132 .flyteidl.co"
  "re.DataLoadingConfig\022;\n\014architecture\030\n \001"
  "(\0162%.flyteidl.core.Container.Architectur"
  "e\"I\n\014Architecture\022\013\n\007UNKNOWN\020\000\022\t\n\005AMD64\020"
  "\001\022\t\n\005ARM64\020\002\022\n\n\006ARM_V6\020\003\022\n\n\006ARM_V7\020\004\"\233\002\n"
  "\nIOStrategy\022=\n\rdownload_mode\030\001 \001(\0162&.fly"
  "teidl.core.IOStrategy.DownloadMode\0229\n\013up"
  "load_mode\030\002 \001(\0162$.flyteidl.core.IOStrate"
  "gy.UploadMode\"L\n\014DownloadMode\022\022\n\016DOWNLOA"
  "D_EAGER\020\000\022\023\n\017DOWNLOAD_STREAM\020\001\022\023\n\017DO_NOT"
  "_DOWNLOAD\020\002\"E\n\nUploadMode\022\022\n\016UPLOAD_ON_E"
  "XIT\020\000\022\020\n\014UPLOAD_EAGER\020\001\022\021\n\rDO_NOT_UPLOAD"
  "\020\002\"\363\001\n\021DataLoadingConfig\022\017\n\007enabled\030\001 \001("
  "\010\022\022\n\ninput_path\030\002 \001(\t\022\023\n\013output_path\030\003 \001"
  "(\t\022A\n\006format\030\004 \001(\01621.flyteidl.core.DataL"
  "oadingConfig.LiteralMapFormat\022.\n\013io_stra"
  "tegy\030\005 \001(\0132\031.flyteidl.core.IOStrategy\"1\n"
  "\020LiteralMapFormat\022\010\n\004JSON\020\000\022\010\n\004YAML\020\001\022\t\n"
  "\005PROTO\020\002\"\236\001\n\006K8sPod\0222\n\010metadata\030\001 \001(\0132 ."
  "flyteidl.core.K8sObjectMetadata\022)\n\010pod_s"
  "pec\030\002 \001(\0132\027.google.protobuf.Struct\0225\n\013da"
  "ta_config\030\003 \001(\0132 .flyteidl.core.DataLoad"
  "ingConfig\"\374\001\n\021K8sObjectMetadata\022<\n\006label"
  "s\030\001 \003(\0132,.flyteidl.core.K8sObjectMetadat"
  "a.LabelsEntry\022F\n\013annotations\030\002 \003(\01321.fly"
  "teidl.core.K8sObjectMetadata.Annotations"
  "Entry\032-\n\013LabelsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005val"
  "ue\030\002 \001(\t:\0028\001\0322\n\020AnnotationsEntry\022\013\n\003key\030"
  "\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"~\n\003Sql\022\021\n\tstate"
  "ment\030\001 \001(\t\022+\n\007dialect\030\002 \001(\0162\032.flyteidl.c"
  "ore.Sql.Dialect\"7\n\007Dialect\022\r\n\tUNDEFINED\020"
  "\000\022\010\n\004ANSI\020\001\022\010\n\004HIVE\020\002\022\t\n\005OTHER\020\003B6Z4gith"
  "ub.com/flyteorg/flyteidl/gen/pb-go/flyte"
  "idl/coreb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fcore_2ftasks_2eproto = {
  false, InitDefaults_flyteidl_2fcore_2ftasks_2eproto, 
  descriptor_table_protodef_flyteidl_2fcore_2ftasks_2eproto,
  "flyteidl/core/tasks.proto", &assign_descriptors_table_flyteidl_2fcore_2ftasks_2eproto, 3296,
};

void AddDescriptors_flyteidl_2fcore_2ftasks_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[6] =
  {
    ::AddDescriptors_flyteidl_2fcore_2fidentifier_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2finterface_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fliterals_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fsecurity_2eproto,
    ::AddDescriptors_google_2fprotobuf_2fduration_2eproto,
    ::AddDescriptors_google_2fprotobuf_2fstruct_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fcore_2ftasks_2eproto, deps, 6);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fcore_2ftasks_2eproto = []() { AddDescriptors_flyteidl_2fcore_2ftasks_2eproto(); return true; }();
namespace flyteidl {
namespace core {
const ::google::protobuf::EnumDescriptor* Resources_ResourceName_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flyteidl_2fcore_2ftasks_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2ftasks_2eproto[0];
}
bool Resources_ResourceName_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Resources_ResourceName Resources::UNKNOWN;
const Resources_ResourceName Resources::CPU;
const Resources_ResourceName Resources::GPU;
const Resources_ResourceName Resources::MEMORY;
const Resources_ResourceName Resources::STORAGE;
const Resources_ResourceName Resources::EPHEMERAL_STORAGE;
const Resources_ResourceName Resources::ResourceName_MIN;
const Resources_ResourceName Resources::ResourceName_MAX;
const int Resources::ResourceName_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RuntimeMetadata_RuntimeType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flyteidl_2fcore_2ftasks_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2ftasks_2eproto[1];
}
bool RuntimeMetadata_RuntimeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RuntimeMetadata_RuntimeType RuntimeMetadata::OTHER;
const RuntimeMetadata_RuntimeType RuntimeMetadata::FLYTE_SDK;
const RuntimeMetadata_RuntimeType RuntimeMetadata::RuntimeType_MIN;
const RuntimeMetadata_RuntimeType RuntimeMetadata::RuntimeType_MAX;
const int RuntimeMetadata::RuntimeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Container_Architecture_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flyteidl_2fcore_2ftasks_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2ftasks_2eproto[2];
}
bool Container_Architecture_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Container_Architecture Container::UNKNOWN;
const Container_Architecture Container::AMD64;
const Container_Architecture Container::ARM64;
const Container_Architecture Container::ARM_V6;
const Container_Architecture Container::ARM_V7;
const Container_Architecture Container::Architecture_MIN;
const Container_Architecture Container::Architecture_MAX;
const int Container::Architecture_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* IOStrategy_DownloadMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flyteidl_2fcore_2ftasks_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2ftasks_2eproto[3];
}
bool IOStrategy_DownloadMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const IOStrategy_DownloadMode IOStrategy::DOWNLOAD_EAGER;
const IOStrategy_DownloadMode IOStrategy::DOWNLOAD_STREAM;
const IOStrategy_DownloadMode IOStrategy::DO_NOT_DOWNLOAD;
const IOStrategy_DownloadMode IOStrategy::DownloadMode_MIN;
const IOStrategy_DownloadMode IOStrategy::DownloadMode_MAX;
const int IOStrategy::DownloadMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* IOStrategy_UploadMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flyteidl_2fcore_2ftasks_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2ftasks_2eproto[4];
}
bool IOStrategy_UploadMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const IOStrategy_UploadMode IOStrategy::UPLOAD_ON_EXIT;
const IOStrategy_UploadMode IOStrategy::UPLOAD_EAGER;
const IOStrategy_UploadMode IOStrategy::DO_NOT_UPLOAD;
const IOStrategy_UploadMode IOStrategy::UploadMode_MIN;
const IOStrategy_UploadMode IOStrategy::UploadMode_MAX;
const int IOStrategy::UploadMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DataLoadingConfig_LiteralMapFormat_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flyteidl_2fcore_2ftasks_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2ftasks_2eproto[5];
}
bool DataLoadingConfig_LiteralMapFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DataLoadingConfig_LiteralMapFormat DataLoadingConfig::JSON;
const DataLoadingConfig_LiteralMapFormat DataLoadingConfig::YAML;
const DataLoadingConfig_LiteralMapFormat DataLoadingConfig::PROTO;
const DataLoadingConfig_LiteralMapFormat DataLoadingConfig::LiteralMapFormat_MIN;
const DataLoadingConfig_LiteralMapFormat DataLoadingConfig::LiteralMapFormat_MAX;
const int DataLoadingConfig::LiteralMapFormat_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sql_Dialect_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flyteidl_2fcore_2ftasks_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2ftasks_2eproto[6];
}
bool Sql_Dialect_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sql_Dialect Sql::UNDEFINED;
const Sql_Dialect Sql::ANSI;
const Sql_Dialect Sql::HIVE;
const Sql_Dialect Sql::OTHER;
const Sql_Dialect Sql::Dialect_MIN;
const Sql_Dialect Sql::Dialect_MAX;
const int Sql::Dialect_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Resources_ResourceEntry::InitAsDefaultInstance() {
}
class Resources_ResourceEntry::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Resources_ResourceEntry::kNameFieldNumber;
const int Resources_ResourceEntry::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Resources_ResourceEntry::Resources_ResourceEntry()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.Resources.ResourceEntry)
}
Resources_ResourceEntry::Resources_ResourceEntry(const Resources_ResourceEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  name_ = from.name_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Resources.ResourceEntry)
}

void Resources_ResourceEntry::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Resources_ResourceEntry_flyteidl_2fcore_2ftasks_2eproto.base);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = 0;
}

Resources_ResourceEntry::~Resources_ResourceEntry() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Resources.ResourceEntry)
  SharedDtor();
}

void Resources_ResourceEntry::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Resources_ResourceEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Resources_ResourceEntry& Resources_ResourceEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Resources_ResourceEntry_flyteidl_2fcore_2ftasks_2eproto.base);
  return *internal_default_instance();
}


void Resources_ResourceEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.Resources.ResourceEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Resources_ResourceEntry::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Resources_ResourceEntry*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.Resources.ResourceName name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_name(static_cast<::flyteidl::core::Resources_ResourceName>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.Resources.ResourceEntry.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Resources_ResourceEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.Resources.ResourceEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Resources.ResourceName name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_name(static_cast< ::flyteidl::core::Resources_ResourceName >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.Resources.ResourceEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.Resources.ResourceEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.Resources.ResourceEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Resources_ResourceEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.Resources.ResourceEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Resources.ResourceName name = 1;
  if (this->name() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->name(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.Resources.ResourceEntry.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.Resources.ResourceEntry)
}

::google::protobuf::uint8* Resources_ResourceEntry::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.Resources.ResourceEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Resources.ResourceName name = 1;
  if (this->name() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->name(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.Resources.ResourceEntry.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.Resources.ResourceEntry)
  return target;
}

size_t Resources_ResourceEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.Resources.ResourceEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // .flyteidl.core.Resources.ResourceName name = 1;
  if (this->name() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Resources_ResourceEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.Resources.ResourceEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const Resources_ResourceEntry* source =
      ::google::protobuf::DynamicCastToGenerated<Resources_ResourceEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.Resources.ResourceEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.Resources.ResourceEntry)
    MergeFrom(*source);
  }
}

void Resources_ResourceEntry::MergeFrom(const Resources_ResourceEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.Resources.ResourceEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.name() != 0) {
    set_name(from.name());
  }
}

void Resources_ResourceEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.Resources.ResourceEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resources_ResourceEntry::CopyFrom(const Resources_ResourceEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.Resources.ResourceEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resources_ResourceEntry::IsInitialized() const {
  return true;
}

void Resources_ResourceEntry::Swap(Resources_ResourceEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Resources_ResourceEntry::InternalSwap(Resources_ResourceEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(name_, other->name_);
}

::google::protobuf::Metadata Resources_ResourceEntry::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2ftasks_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Resources::InitAsDefaultInstance() {
}
class Resources::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Resources::kRequestsFieldNumber;
const int Resources::kLimitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Resources::Resources()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.Resources)
}
Resources::Resources(const Resources& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      requests_(from.requests_),
      limits_(from.limits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Resources)
}

void Resources::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Resources_flyteidl_2fcore_2ftasks_2eproto.base);
}

Resources::~Resources() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Resources)
  SharedDtor();
}

void Resources::SharedDtor() {
}

void Resources::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Resources& Resources::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Resources_flyteidl_2fcore_2ftasks_2eproto.base);
  return *internal_default_instance();
}


void Resources::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.Resources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  limits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Resources::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Resources*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .flyteidl.core.Resources.ResourceEntry requests = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::core::Resources_ResourceEntry::_InternalParse;
          object = msg->add_requests();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .flyteidl.core.Resources.ResourceEntry limits = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::core::Resources_ResourceEntry::_InternalParse;
          object = msg->add_limits();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Resources::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.Resources)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .flyteidl.core.Resources.ResourceEntry requests = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_requests()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.core.Resources.ResourceEntry limits = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_limits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.Resources)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.Resources)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Resources::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.Resources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.core.Resources.ResourceEntry requests = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->requests_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->requests(static_cast<int>(i)),
      output);
  }

  // repeated .flyteidl.core.Resources.ResourceEntry limits = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->limits_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->limits(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.Resources)
}

::google::protobuf::uint8* Resources::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.Resources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.core.Resources.ResourceEntry requests = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->requests_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->requests(static_cast<int>(i)), target);
  }

  // repeated .flyteidl.core.Resources.ResourceEntry limits = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->limits_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->limits(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.Resources)
  return target;
}

size_t Resources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.Resources)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.core.Resources.ResourceEntry requests = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->requests_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->requests(static_cast<int>(i)));
    }
  }

  // repeated .flyteidl.core.Resources.ResourceEntry limits = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->limits_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->limits(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Resources::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.Resources)
  GOOGLE_DCHECK_NE(&from, this);
  const Resources* source =
      ::google::protobuf::DynamicCastToGenerated<Resources>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.Resources)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.Resources)
    MergeFrom(*source);
  }
}

void Resources::MergeFrom(const Resources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.Resources)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  limits_.MergeFrom(from.limits_);
}

void Resources::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.Resources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resources::CopyFrom(const Resources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.Resources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resources::IsInitialized() const {
  return true;
}

void Resources::Swap(Resources* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Resources::InternalSwap(Resources* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&requests_)->InternalSwap(CastToBase(&other->requests_));
  CastToBase(&limits_)->InternalSwap(CastToBase(&other->limits_));
}

::google::protobuf::Metadata Resources::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2ftasks_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RuntimeMetadata::InitAsDefaultInstance() {
}
class RuntimeMetadata::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RuntimeMetadata::kTypeFieldNumber;
const int RuntimeMetadata::kVersionFieldNumber;
const int RuntimeMetadata::kFlavorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RuntimeMetadata::RuntimeMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.RuntimeMetadata)
}
RuntimeMetadata::RuntimeMetadata(const RuntimeMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  flavor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.flavor().size() > 0) {
    flavor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.flavor_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.RuntimeMetadata)
}

void RuntimeMetadata::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RuntimeMetadata_flyteidl_2fcore_2ftasks_2eproto.base);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flavor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

RuntimeMetadata::~RuntimeMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.core.RuntimeMetadata)
  SharedDtor();
}

void RuntimeMetadata::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flavor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RuntimeMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuntimeMetadata& RuntimeMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RuntimeMetadata_flyteidl_2fcore_2ftasks_2eproto.base);
  return *internal_default_instance();
}


void RuntimeMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.RuntimeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flavor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RuntimeMetadata::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RuntimeMetadata*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.RuntimeMetadata.RuntimeType type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::flyteidl::core::RuntimeMetadata_RuntimeType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.RuntimeMetadata.version");
        object = msg->mutable_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string flavor = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.RuntimeMetadata.flavor");
        object = msg->mutable_flavor();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RuntimeMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.RuntimeMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.RuntimeMetadata.RuntimeType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::flyteidl::core::RuntimeMetadata_RuntimeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.RuntimeMetadata.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string flavor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flavor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->flavor().data(), static_cast<int>(this->flavor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.RuntimeMetadata.flavor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.RuntimeMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.RuntimeMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RuntimeMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.RuntimeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.RuntimeMetadata.RuntimeType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.RuntimeMetadata.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // string flavor = 3;
  if (this->flavor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->flavor().data(), static_cast<int>(this->flavor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.RuntimeMetadata.flavor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->flavor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.RuntimeMetadata)
}

::google::protobuf::uint8* RuntimeMetadata::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.RuntimeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.RuntimeMetadata.RuntimeType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.RuntimeMetadata.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // string flavor = 3;
  if (this->flavor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->flavor().data(), static_cast<int>(this->flavor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.RuntimeMetadata.flavor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->flavor(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.RuntimeMetadata)
  return target;
}

size_t RuntimeMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.RuntimeMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string flavor = 3;
  if (this->flavor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->flavor());
  }

  // .flyteidl.core.RuntimeMetadata.RuntimeType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuntimeMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.RuntimeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const RuntimeMetadata* source =
      ::google::protobuf::DynamicCastToGenerated<RuntimeMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.RuntimeMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.RuntimeMetadata)
    MergeFrom(*source);
  }
}

void RuntimeMetadata::MergeFrom(const RuntimeMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.RuntimeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.flavor().size() > 0) {

    flavor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.flavor_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void RuntimeMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.RuntimeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuntimeMetadata::CopyFrom(const RuntimeMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.RuntimeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuntimeMetadata::IsInitialized() const {
  return true;
}

void RuntimeMetadata::Swap(RuntimeMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RuntimeMetadata::InternalSwap(RuntimeMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  flavor_.Swap(&other->flavor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::google::protobuf::Metadata RuntimeMetadata::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2ftasks_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

TaskMetadata_TagsEntry_DoNotUse::TaskMetadata_TagsEntry_DoNotUse() {}
TaskMetadata_TagsEntry_DoNotUse::TaskMetadata_TagsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void TaskMetadata_TagsEntry_DoNotUse::MergeFrom(const TaskMetadata_TagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TaskMetadata_TagsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2ftasks_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[3];
}
void TaskMetadata_TagsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TaskMetadata_TagsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      TaskMetadata_TagsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.core.TaskMetadata.TagsEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.core.TaskMetadata.TagsEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void TaskMetadata::InitAsDefaultInstance() {
  ::flyteidl::core::_TaskMetadata_default_instance_._instance.get_mutable()->runtime_ = const_cast< ::flyteidl::core::RuntimeMetadata*>(
      ::flyteidl::core::RuntimeMetadata::internal_default_instance());
  ::flyteidl::core::_TaskMetadata_default_instance_._instance.get_mutable()->timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::flyteidl::core::_TaskMetadata_default_instance_._instance.get_mutable()->retries_ = const_cast< ::flyteidl::core::RetryStrategy*>(
      ::flyteidl::core::RetryStrategy::internal_default_instance());
  ::flyteidl::core::_TaskMetadata_default_instance_.interruptible_ = false;
}
class TaskMetadata::HasBitSetters {
 public:
  static const ::flyteidl::core::RuntimeMetadata& runtime(const TaskMetadata* msg);
  static const ::google::protobuf::Duration& timeout(const TaskMetadata* msg);
  static const ::flyteidl::core::RetryStrategy& retries(const TaskMetadata* msg);
};

const ::flyteidl::core::RuntimeMetadata&
TaskMetadata::HasBitSetters::runtime(const TaskMetadata* msg) {
  return *msg->runtime_;
}
const ::google::protobuf::Duration&
TaskMetadata::HasBitSetters::timeout(const TaskMetadata* msg) {
  return *msg->timeout_;
}
const ::flyteidl::core::RetryStrategy&
TaskMetadata::HasBitSetters::retries(const TaskMetadata* msg) {
  return *msg->retries_;
}
void TaskMetadata::clear_timeout() {
  if (GetArenaNoVirtual() == nullptr && timeout_ != nullptr) {
    delete timeout_;
  }
  timeout_ = nullptr;
}
void TaskMetadata::clear_retries() {
  if (GetArenaNoVirtual() == nullptr && retries_ != nullptr) {
    delete retries_;
  }
  retries_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskMetadata::kDiscoverableFieldNumber;
const int TaskMetadata::kRuntimeFieldNumber;
const int TaskMetadata::kTimeoutFieldNumber;
const int TaskMetadata::kRetriesFieldNumber;
const int TaskMetadata::kDiscoveryVersionFieldNumber;
const int TaskMetadata::kDeprecatedErrorMessageFieldNumber;
const int TaskMetadata::kInterruptibleFieldNumber;
const int TaskMetadata::kCacheSerializableFieldNumber;
const int TaskMetadata::kGeneratesDeckFieldNumber;
const int TaskMetadata::kTagsFieldNumber;
const int TaskMetadata::kPodTemplateNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskMetadata::TaskMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.TaskMetadata)
}
TaskMetadata::TaskMetadata(const TaskMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tags_.MergeFrom(from.tags_);
  discovery_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.discovery_version().size() > 0) {
    discovery_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.discovery_version_);
  }
  deprecated_error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.deprecated_error_message().size() > 0) {
    deprecated_error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deprecated_error_message_);
  }
  pod_template_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pod_template_name().size() > 0) {
    pod_template_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pod_template_name_);
  }
  if (from.has_runtime()) {
    runtime_ = new ::flyteidl::core::RuntimeMetadata(*from.runtime_);
  } else {
    runtime_ = nullptr;
  }
  if (from.has_timeout()) {
    timeout_ = new ::google::protobuf::Duration(*from.timeout_);
  } else {
    timeout_ = nullptr;
  }
  if (from.has_retries()) {
    retries_ = new ::flyteidl::core::RetryStrategy(*from.retries_);
  } else {
    retries_ = nullptr;
  }
  ::memcpy(&discoverable_, &from.discoverable_,
    static_cast<size_t>(reinterpret_cast<char*>(&generates_deck_) -
    reinterpret_cast<char*>(&discoverable_)) + sizeof(generates_deck_));
  clear_has_interruptible_value();
  switch (from.interruptible_value_case()) {
    case kInterruptible: {
      set_interruptible(from.interruptible());
      break;
    }
    case INTERRUPTIBLE_VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.TaskMetadata)
}

void TaskMetadata::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TaskMetadata_flyteidl_2fcore_2ftasks_2eproto.base);
  discovery_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pod_template_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&runtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&generates_deck_) -
      reinterpret_cast<char*>(&runtime_)) + sizeof(generates_deck_));
  clear_has_interruptible_value();
}

TaskMetadata::~TaskMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.core.TaskMetadata)
  SharedDtor();
}

void TaskMetadata::SharedDtor() {
  discovery_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pod_template_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete runtime_;
  if (this != internal_default_instance()) delete timeout_;
  if (this != internal_default_instance()) delete retries_;
  if (has_interruptible_value()) {
    clear_interruptible_value();
  }
}

void TaskMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskMetadata& TaskMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TaskMetadata_flyteidl_2fcore_2ftasks_2eproto.base);
  return *internal_default_instance();
}


void TaskMetadata::clear_interruptible_value() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.TaskMetadata)
  switch (interruptible_value_case()) {
    case kInterruptible: {
      // No need to clear
      break;
    }
    case INTERRUPTIBLE_VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INTERRUPTIBLE_VALUE_NOT_SET;
}


void TaskMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.TaskMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  discovery_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pod_template_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && runtime_ != nullptr) {
    delete runtime_;
  }
  runtime_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && timeout_ != nullptr) {
    delete timeout_;
  }
  timeout_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && retries_ != nullptr) {
    delete retries_;
  }
  retries_ = nullptr;
  ::memset(&discoverable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&generates_deck_) -
      reinterpret_cast<char*>(&discoverable_)) + sizeof(generates_deck_));
  clear_interruptible_value();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TaskMetadata::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TaskMetadata*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool discoverable = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_discoverable(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .flyteidl.core.RuntimeMetadata runtime = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::RuntimeMetadata::_InternalParse;
        object = msg->mutable_runtime();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Duration timeout = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Duration::_InternalParse;
        object = msg->mutable_timeout();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.RetryStrategy retries = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::RetryStrategy::_InternalParse;
        object = msg->mutable_retries();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string discovery_version = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.TaskMetadata.discovery_version");
        object = msg->mutable_discovery_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string deprecated_error_message = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.TaskMetadata.deprecated_error_message");
        object = msg->mutable_deprecated_error_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool interruptible = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_interruptible(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool cache_serializable = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_cache_serializable(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool generates_deck = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_generates_deck(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // map<string, string> tags = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::flyteidl::core::TaskMetadata_TagsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->tags_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 90 && (ptr += 1));
        break;
      }
      // string pod_template_name = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.TaskMetadata.pod_template_name");
        object = msg->mutable_pod_template_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TaskMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.TaskMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool discoverable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &discoverable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.RuntimeMetadata runtime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_runtime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration timeout = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.RetryStrategy retries = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_retries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string discovery_version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_discovery_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->discovery_version().data(), static_cast<int>(this->discovery_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.TaskMetadata.discovery_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string deprecated_error_message = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->deprecated_error_message().data(), static_cast<int>(this->deprecated_error_message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.TaskMetadata.deprecated_error_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool interruptible = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          clear_interruptible_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &interruptible_value_.interruptible_)));
          set_has_interruptible();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool cache_serializable = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cache_serializable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool generates_deck = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &generates_deck_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> tags = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          TaskMetadata_TagsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TaskMetadata_TagsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&tags_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.TaskMetadata.TagsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.TaskMetadata.TagsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pod_template_name = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pod_template_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pod_template_name().data(), static_cast<int>(this->pod_template_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.TaskMetadata.pod_template_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.TaskMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.TaskMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TaskMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.TaskMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool discoverable = 1;
  if (this->discoverable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->discoverable(), output);
  }

  // .flyteidl.core.RuntimeMetadata runtime = 2;
  if (this->has_runtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::runtime(this), output);
  }

  // .google.protobuf.Duration timeout = 4;
  if (this->has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::timeout(this), output);
  }

  // .flyteidl.core.RetryStrategy retries = 5;
  if (this->has_retries()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::retries(this), output);
  }

  // string discovery_version = 6;
  if (this->discovery_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->discovery_version().data(), static_cast<int>(this->discovery_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.TaskMetadata.discovery_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->discovery_version(), output);
  }

  // string deprecated_error_message = 7;
  if (this->deprecated_error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deprecated_error_message().data(), static_cast<int>(this->deprecated_error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.TaskMetadata.deprecated_error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->deprecated_error_message(), output);
  }

  // bool interruptible = 8;
  if (has_interruptible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->interruptible(), output);
  }

  // bool cache_serializable = 9;
  if (this->cache_serializable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->cache_serializable(), output);
  }

  // bool generates_deck = 10;
  if (this->generates_deck() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->generates_deck(), output);
  }

  // map<string, string> tags = 11;
  if (!this->tags().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.TaskMetadata.TagsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.TaskMetadata.TagsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->tags().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->tags().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->tags().begin();
          it != this->tags().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TaskMetadata_TagsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tags_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(11, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<TaskMetadata_TagsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->tags().begin();
          it != this->tags().end(); ++it) {
        entry.reset(tags_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(11, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string pod_template_name = 12;
  if (this->pod_template_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pod_template_name().data(), static_cast<int>(this->pod_template_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.TaskMetadata.pod_template_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->pod_template_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.TaskMetadata)
}

::google::protobuf::uint8* TaskMetadata::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.TaskMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool discoverable = 1;
  if (this->discoverable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->discoverable(), target);
  }

  // .flyteidl.core.RuntimeMetadata runtime = 2;
  if (this->has_runtime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::runtime(this), target);
  }

  // .google.protobuf.Duration timeout = 4;
  if (this->has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::timeout(this), target);
  }

  // .flyteidl.core.RetryStrategy retries = 5;
  if (this->has_retries()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::retries(this), target);
  }

  // string discovery_version = 6;
  if (this->discovery_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->discovery_version().data(), static_cast<int>(this->discovery_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.TaskMetadata.discovery_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->discovery_version(), target);
  }

  // string deprecated_error_message = 7;
  if (this->deprecated_error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deprecated_error_message().data(), static_cast<int>(this->deprecated_error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.TaskMetadata.deprecated_error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->deprecated_error_message(), target);
  }

  // bool interruptible = 8;
  if (has_interruptible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->interruptible(), target);
  }

  // bool cache_serializable = 9;
  if (this->cache_serializable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->cache_serializable(), target);
  }

  // bool generates_deck = 10;
  if (this->generates_deck() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->generates_deck(), target);
  }

  // map<string, string> tags = 11;
  if (!this->tags().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.TaskMetadata.TagsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.TaskMetadata.TagsEntry.value");
      }
    };

    if (false &&
        this->tags().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->tags().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->tags().begin();
          it != this->tags().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TaskMetadata_TagsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tags_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(11, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<TaskMetadata_TagsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->tags().begin();
          it != this->tags().end(); ++it) {
        entry.reset(tags_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(11, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string pod_template_name = 12;
  if (this->pod_template_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pod_template_name().data(), static_cast<int>(this->pod_template_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.TaskMetadata.pod_template_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->pod_template_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.TaskMetadata)
  return target;
}

size_t TaskMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.TaskMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> tags = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  {
    ::std::unique_ptr<TaskMetadata_TagsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->tags().begin();
        it != this->tags().end(); ++it) {
      entry.reset(tags_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string discovery_version = 6;
  if (this->discovery_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->discovery_version());
  }

  // string deprecated_error_message = 7;
  if (this->deprecated_error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->deprecated_error_message());
  }

  // string pod_template_name = 12;
  if (this->pod_template_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pod_template_name());
  }

  // .flyteidl.core.RuntimeMetadata runtime = 2;
  if (this->has_runtime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *runtime_);
  }

  // .google.protobuf.Duration timeout = 4;
  if (this->has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timeout_);
  }

  // .flyteidl.core.RetryStrategy retries = 5;
  if (this->has_retries()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *retries_);
  }

  // bool discoverable = 1;
  if (this->discoverable() != 0) {
    total_size += 1 + 1;
  }

  // bool cache_serializable = 9;
  if (this->cache_serializable() != 0) {
    total_size += 1 + 1;
  }

  // bool generates_deck = 10;
  if (this->generates_deck() != 0) {
    total_size += 1 + 1;
  }

  switch (interruptible_value_case()) {
    // bool interruptible = 8;
    case kInterruptible: {
      total_size += 1 + 1;
      break;
    }
    case INTERRUPTIBLE_VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.TaskMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskMetadata* source =
      ::google::protobuf::DynamicCastToGenerated<TaskMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.TaskMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.TaskMetadata)
    MergeFrom(*source);
  }
}

void TaskMetadata::MergeFrom(const TaskMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.TaskMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.discovery_version().size() > 0) {

    discovery_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.discovery_version_);
  }
  if (from.deprecated_error_message().size() > 0) {

    deprecated_error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deprecated_error_message_);
  }
  if (from.pod_template_name().size() > 0) {

    pod_template_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pod_template_name_);
  }
  if (from.has_runtime()) {
    mutable_runtime()->::flyteidl::core::RuntimeMetadata::MergeFrom(from.runtime());
  }
  if (from.has_timeout()) {
    mutable_timeout()->::google::protobuf::Duration::MergeFrom(from.timeout());
  }
  if (from.has_retries()) {
    mutable_retries()->::flyteidl::core::RetryStrategy::MergeFrom(from.retries());
  }
  if (from.discoverable() != 0) {
    set_discoverable(from.discoverable());
  }
  if (from.cache_serializable() != 0) {
    set_cache_serializable(from.cache_serializable());
  }
  if (from.generates_deck() != 0) {
    set_generates_deck(from.generates_deck());
  }
  switch (from.interruptible_value_case()) {
    case kInterruptible: {
      set_interruptible(from.interruptible());
      break;
    }
    case INTERRUPTIBLE_VALUE_NOT_SET: {
      break;
    }
  }
}

void TaskMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.TaskMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskMetadata::CopyFrom(const TaskMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.TaskMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskMetadata::IsInitialized() const {
  return true;
}

void TaskMetadata::Swap(TaskMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskMetadata::InternalSwap(TaskMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tags_.Swap(&other->tags_);
  discovery_version_.Swap(&other->discovery_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  deprecated_error_message_.Swap(&other->deprecated_error_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pod_template_name_.Swap(&other->pod_template_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(runtime_, other->runtime_);
  swap(timeout_, other->timeout_);
  swap(retries_, other->retries_);
  swap(discoverable_, other->discoverable_);
  swap(cache_serializable_, other->cache_serializable_);
  swap(generates_deck_, other->generates_deck_);
  swap(interruptible_value_, other->interruptible_value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata TaskMetadata::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2ftasks_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

TaskTemplate_ConfigEntry_DoNotUse::TaskTemplate_ConfigEntry_DoNotUse() {}
TaskTemplate_ConfigEntry_DoNotUse::TaskTemplate_ConfigEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void TaskTemplate_ConfigEntry_DoNotUse::MergeFrom(const TaskTemplate_ConfigEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TaskTemplate_ConfigEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2ftasks_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[5];
}
void TaskTemplate_ConfigEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TaskTemplate_ConfigEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      TaskTemplate_ConfigEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.core.TaskTemplate.ConfigEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.core.TaskTemplate.ConfigEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void TaskTemplate::InitAsDefaultInstance() {
  ::flyteidl::core::_TaskTemplate_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
  ::flyteidl::core::_TaskTemplate_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::flyteidl::core::TaskMetadata*>(
      ::flyteidl::core::TaskMetadata::internal_default_instance());
  ::flyteidl::core::_TaskTemplate_default_instance_._instance.get_mutable()->interface_ = const_cast< ::flyteidl::core::TypedInterface*>(
      ::flyteidl::core::TypedInterface::internal_default_instance());
  ::flyteidl::core::_TaskTemplate_default_instance_._instance.get_mutable()->custom_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
  ::flyteidl::core::_TaskTemplate_default_instance_.container_ = const_cast< ::flyteidl::core::Container*>(
      ::flyteidl::core::Container::internal_default_instance());
  ::flyteidl::core::_TaskTemplate_default_instance_.k8s_pod_ = const_cast< ::flyteidl::core::K8sPod*>(
      ::flyteidl::core::K8sPod::internal_default_instance());
  ::flyteidl::core::_TaskTemplate_default_instance_.sql_ = const_cast< ::flyteidl::core::Sql*>(
      ::flyteidl::core::Sql::internal_default_instance());
  ::flyteidl::core::_TaskTemplate_default_instance_._instance.get_mutable()->security_context_ = const_cast< ::flyteidl::core::SecurityContext*>(
      ::flyteidl::core::SecurityContext::internal_default_instance());
}
class TaskTemplate::HasBitSetters {
 public:
  static const ::flyteidl::core::Identifier& id(const TaskTemplate* msg);
  static const ::flyteidl::core::TaskMetadata& metadata(const TaskTemplate* msg);
  static const ::flyteidl::core::TypedInterface& interface(const TaskTemplate* msg);
  static const ::google::protobuf::Struct& custom(const TaskTemplate* msg);
  static const ::flyteidl::core::Container& container(const TaskTemplate* msg);
  static const ::flyteidl::core::K8sPod& k8s_pod(const TaskTemplate* msg);
  static const ::flyteidl::core::Sql& sql(const TaskTemplate* msg);
  static const ::flyteidl::core::SecurityContext& security_context(const TaskTemplate* msg);
};

const ::flyteidl::core::Identifier&
TaskTemplate::HasBitSetters::id(const TaskTemplate* msg) {
  return *msg->id_;
}
const ::flyteidl::core::TaskMetadata&
TaskTemplate::HasBitSetters::metadata(const TaskTemplate* msg) {
  return *msg->metadata_;
}
const ::flyteidl::core::TypedInterface&
TaskTemplate::HasBitSetters::interface(const TaskTemplate* msg) {
  return *msg->interface_;
}
const ::google::protobuf::Struct&
TaskTemplate::HasBitSetters::custom(const TaskTemplate* msg) {
  return *msg->custom_;
}
const ::flyteidl::core::Container&
TaskTemplate::HasBitSetters::container(const TaskTemplate* msg) {
  return *msg->target_.container_;
}
const ::flyteidl::core::K8sPod&
TaskTemplate::HasBitSetters::k8s_pod(const TaskTemplate* msg) {
  return *msg->target_.k8s_pod_;
}
const ::flyteidl::core::Sql&
TaskTemplate::HasBitSetters::sql(const TaskTemplate* msg) {
  return *msg->target_.sql_;
}
const ::flyteidl::core::SecurityContext&
TaskTemplate::HasBitSetters::security_context(const TaskTemplate* msg) {
  return *msg->security_context_;
}
void TaskTemplate::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void TaskTemplate::clear_interface() {
  if (GetArenaNoVirtual() == nullptr && interface_ != nullptr) {
    delete interface_;
  }
  interface_ = nullptr;
}
void TaskTemplate::clear_custom() {
  if (GetArenaNoVirtual() == nullptr && custom_ != nullptr) {
    delete custom_;
  }
  custom_ = nullptr;
}
void TaskTemplate::set_allocated_container(::flyteidl::core::Container* container) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_target();
  if (container) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      container = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, container, submessage_arena);
    }
    set_has_container();
    target_.container_ = container;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.TaskTemplate.container)
}
void TaskTemplate::set_allocated_k8s_pod(::flyteidl::core::K8sPod* k8s_pod) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_target();
  if (k8s_pod) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      k8s_pod = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, k8s_pod, submessage_arena);
    }
    set_has_k8s_pod();
    target_.k8s_pod_ = k8s_pod;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.TaskTemplate.k8s_pod)
}
void TaskTemplate::set_allocated_sql(::flyteidl::core::Sql* sql) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_target();
  if (sql) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sql = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sql, submessage_arena);
    }
    set_has_sql();
    target_.sql_ = sql;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.TaskTemplate.sql)
}
void TaskTemplate::clear_security_context() {
  if (GetArenaNoVirtual() == nullptr && security_context_ != nullptr) {
    delete security_context_;
  }
  security_context_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskTemplate::kIdFieldNumber;
const int TaskTemplate::kTypeFieldNumber;
const int TaskTemplate::kMetadataFieldNumber;
const int TaskTemplate::kInterfaceFieldNumber;
const int TaskTemplate::kCustomFieldNumber;
const int TaskTemplate::kContainerFieldNumber;
const int TaskTemplate::kK8SPodFieldNumber;
const int TaskTemplate::kSqlFieldNumber;
const int TaskTemplate::kTaskTypeVersionFieldNumber;
const int TaskTemplate::kSecurityContextFieldNumber;
const int TaskTemplate::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskTemplate::TaskTemplate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.TaskTemplate)
}
TaskTemplate::TaskTemplate(const TaskTemplate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  config_.MergeFrom(from.config_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_metadata()) {
    metadata_ = new ::flyteidl::core::TaskMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from.has_interface()) {
    interface_ = new ::flyteidl::core::TypedInterface(*from.interface_);
  } else {
    interface_ = nullptr;
  }
  if (from.has_custom()) {
    custom_ = new ::google::protobuf::Struct(*from.custom_);
  } else {
    custom_ = nullptr;
  }
  if (from.has_security_context()) {
    security_context_ = new ::flyteidl::core::SecurityContext(*from.security_context_);
  } else {
    security_context_ = nullptr;
  }
  task_type_version_ = from.task_type_version_;
  clear_has_target();
  switch (from.target_case()) {
    case kContainer: {
      mutable_container()->::flyteidl::core::Container::MergeFrom(from.container());
      break;
    }
    case kK8SPod: {
      mutable_k8s_pod()->::flyteidl::core::K8sPod::MergeFrom(from.k8s_pod());
      break;
    }
    case kSql: {
      mutable_sql()->::flyteidl::core::Sql::MergeFrom(from.sql());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.TaskTemplate)
}

void TaskTemplate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TaskTemplate_flyteidl_2fcore_2ftasks_2eproto.base);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_type_version_) -
      reinterpret_cast<char*>(&id_)) + sizeof(task_type_version_));
  clear_has_target();
}

TaskTemplate::~TaskTemplate() {
  // @@protoc_insertion_point(destructor:flyteidl.core.TaskTemplate)
  SharedDtor();
}

void TaskTemplate::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete interface_;
  if (this != internal_default_instance()) delete custom_;
  if (this != internal_default_instance()) delete security_context_;
  if (has_target()) {
    clear_target();
  }
}

void TaskTemplate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskTemplate& TaskTemplate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TaskTemplate_flyteidl_2fcore_2ftasks_2eproto.base);
  return *internal_default_instance();
}


void TaskTemplate::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.TaskTemplate)
  switch (target_case()) {
    case kContainer: {
      delete target_.container_;
      break;
    }
    case kK8SPod: {
      delete target_.k8s_pod_;
      break;
    }
    case kSql: {
      delete target_.sql_;
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void TaskTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.TaskTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_.Clear();
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && interface_ != nullptr) {
    delete interface_;
  }
  interface_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && custom_ != nullptr) {
    delete custom_;
  }
  custom_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && security_context_ != nullptr) {
    delete security_context_;
  }
  security_context_ = nullptr;
  task_type_version_ = 0;
  clear_target();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TaskTemplate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TaskTemplate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Identifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.TaskTemplate.type");
        object = msg->mutable_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.core.TaskMetadata metadata = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::TaskMetadata::_InternalParse;
        object = msg->mutable_metadata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.TypedInterface interface = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::TypedInterface::_InternalParse;
        object = msg->mutable_interface();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Struct custom = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Struct::_InternalParse;
        object = msg->mutable_custom();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.Container container = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Container::_InternalParse;
        object = msg->mutable_container();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 task_type_version = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_task_type_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .flyteidl.core.SecurityContext security_context = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::SecurityContext::_InternalParse;
        object = msg->mutable_security_context();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // map<string, string> config = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::flyteidl::core::TaskTemplate_ConfigEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->config_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 386 && (ptr += 2));
        break;
      }
      // .flyteidl.core.K8sPod k8s_pod = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::K8sPod::_InternalParse;
        object = msg->mutable_k8s_pod();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.Sql sql = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Sql::_InternalParse;
        object = msg->mutable_sql();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TaskTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.TaskTemplate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.TaskTemplate.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.TaskMetadata metadata = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.TypedInterface interface = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct custom = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_custom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Container container = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_container()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 task_type_version = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_type_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.SecurityContext security_context = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_security_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> config = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          TaskTemplate_ConfigEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TaskTemplate_ConfigEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&config_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.TaskTemplate.ConfigEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.TaskTemplate.ConfigEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.K8sPod k8s_pod = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_k8s_pod()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Sql sql = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (146 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sql()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.TaskTemplate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.TaskTemplate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TaskTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.TaskTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.TaskTemplate.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // .flyteidl.core.TaskMetadata metadata = 3;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::metadata(this), output);
  }

  // .flyteidl.core.TypedInterface interface = 4;
  if (this->has_interface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::interface(this), output);
  }

  // .google.protobuf.Struct custom = 5;
  if (this->has_custom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::custom(this), output);
  }

  // .flyteidl.core.Container container = 6;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::container(this), output);
  }

  // int32 task_type_version = 7;
  if (this->task_type_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->task_type_version(), output);
  }

  // .flyteidl.core.SecurityContext security_context = 8;
  if (this->has_security_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::security_context(this), output);
  }

  // map<string, string> config = 16;
  if (!this->config().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.TaskTemplate.ConfigEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.TaskTemplate.ConfigEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->config().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->config().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->config().begin();
          it != this->config().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TaskTemplate_ConfigEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(config_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(16, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<TaskTemplate_ConfigEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->config().begin();
          it != this->config().end(); ++it) {
        entry.reset(config_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(16, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .flyteidl.core.K8sPod k8s_pod = 17;
  if (has_k8s_pod()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, HasBitSetters::k8s_pod(this), output);
  }

  // .flyteidl.core.Sql sql = 18;
  if (has_sql()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, HasBitSetters::sql(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.TaskTemplate)
}

::google::protobuf::uint8* TaskTemplate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.TaskTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.TaskTemplate.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // .flyteidl.core.TaskMetadata metadata = 3;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::metadata(this), target);
  }

  // .flyteidl.core.TypedInterface interface = 4;
  if (this->has_interface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::interface(this), target);
  }

  // .google.protobuf.Struct custom = 5;
  if (this->has_custom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::custom(this), target);
  }

  // .flyteidl.core.Container container = 6;
  if (has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::container(this), target);
  }

  // int32 task_type_version = 7;
  if (this->task_type_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->task_type_version(), target);
  }

  // .flyteidl.core.SecurityContext security_context = 8;
  if (this->has_security_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::security_context(this), target);
  }

  // map<string, string> config = 16;
  if (!this->config().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.TaskTemplate.ConfigEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.TaskTemplate.ConfigEntry.value");
      }
    };

    if (false &&
        this->config().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->config().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->config().begin();
          it != this->config().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<TaskTemplate_ConfigEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(config_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(16, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<TaskTemplate_ConfigEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->config().begin();
          it != this->config().end(); ++it) {
        entry.reset(config_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(16, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .flyteidl.core.K8sPod k8s_pod = 17;
  if (has_k8s_pod()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, HasBitSetters::k8s_pod(this), target);
  }

  // .flyteidl.core.Sql sql = 18;
  if (has_sql()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, HasBitSetters::sql(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.TaskTemplate)
  return target;
}

size_t TaskTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.TaskTemplate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> config = 16;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->config_size());
  {
    ::std::unique_ptr<TaskTemplate_ConfigEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->config().begin();
        it != this->config().end(); ++it) {
      entry.reset(config_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .flyteidl.core.TaskMetadata metadata = 3;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .flyteidl.core.TypedInterface interface = 4;
  if (this->has_interface()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *interface_);
  }

  // .google.protobuf.Struct custom = 5;
  if (this->has_custom()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *custom_);
  }

  // .flyteidl.core.SecurityContext security_context = 8;
  if (this->has_security_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *security_context_);
  }

  // int32 task_type_version = 7;
  if (this->task_type_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_type_version());
  }

  switch (target_case()) {
    // .flyteidl.core.Container container = 6;
    case kContainer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_.container_);
      break;
    }
    // .flyteidl.core.K8sPod k8s_pod = 17;
    case kK8SPod: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_.k8s_pod_);
      break;
    }
    // .flyteidl.core.Sql sql = 18;
    case kSql: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_.sql_);
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskTemplate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.TaskTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskTemplate* source =
      ::google::protobuf::DynamicCastToGenerated<TaskTemplate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.TaskTemplate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.TaskTemplate)
    MergeFrom(*source);
  }
}

void TaskTemplate::MergeFrom(const TaskTemplate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.TaskTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  config_.MergeFrom(from.config_);
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_id()) {
    mutable_id()->::flyteidl::core::Identifier::MergeFrom(from.id());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::flyteidl::core::TaskMetadata::MergeFrom(from.metadata());
  }
  if (from.has_interface()) {
    mutable_interface()->::flyteidl::core::TypedInterface::MergeFrom(from.interface());
  }
  if (from.has_custom()) {
    mutable_custom()->::google::protobuf::Struct::MergeFrom(from.custom());
  }
  if (from.has_security_context()) {
    mutable_security_context()->::flyteidl::core::SecurityContext::MergeFrom(from.security_context());
  }
  if (from.task_type_version() != 0) {
    set_task_type_version(from.task_type_version());
  }
  switch (from.target_case()) {
    case kContainer: {
      mutable_container()->::flyteidl::core::Container::MergeFrom(from.container());
      break;
    }
    case kK8SPod: {
      mutable_k8s_pod()->::flyteidl::core::K8sPod::MergeFrom(from.k8s_pod());
      break;
    }
    case kSql: {
      mutable_sql()->::flyteidl::core::Sql::MergeFrom(from.sql());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
}

void TaskTemplate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.TaskTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskTemplate::CopyFrom(const TaskTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.TaskTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskTemplate::IsInitialized() const {
  return true;
}

void TaskTemplate::Swap(TaskTemplate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskTemplate::InternalSwap(TaskTemplate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  config_.Swap(&other->config_);
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(metadata_, other->metadata_);
  swap(interface_, other->interface_);
  swap(custom_, other->custom_);
  swap(security_context_, other->security_context_);
  swap(task_type_version_, other->task_type_version_);
  swap(target_, other->target_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata TaskTemplate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2ftasks_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ContainerPort::InitAsDefaultInstance() {
}
class ContainerPort::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContainerPort::kContainerPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContainerPort::ContainerPort()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.ContainerPort)
}
ContainerPort::ContainerPort(const ContainerPort& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  container_port_ = from.container_port_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.ContainerPort)
}

void ContainerPort::SharedCtor() {
  container_port_ = 0u;
}

ContainerPort::~ContainerPort() {
  // @@protoc_insertion_point(destructor:flyteidl.core.ContainerPort)
  SharedDtor();
}

void ContainerPort::SharedDtor() {
}

void ContainerPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerPort& ContainerPort::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ContainerPort_flyteidl_2fcore_2ftasks_2eproto.base);
  return *internal_default_instance();
}


void ContainerPort::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.ContainerPort)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_port_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ContainerPort::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ContainerPort*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 container_port = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_container_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ContainerPort::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.ContainerPort)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 container_port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &container_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.ContainerPort)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.ContainerPort)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ContainerPort::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.ContainerPort)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 container_port = 1;
  if (this->container_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->container_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.ContainerPort)
}

::google::protobuf::uint8* ContainerPort::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.ContainerPort)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 container_port = 1;
  if (this->container_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->container_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.ContainerPort)
  return target;
}

size_t ContainerPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.ContainerPort)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 container_port = 1;
  if (this->container_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->container_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerPort::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.ContainerPort)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerPort* source =
      ::google::protobuf::DynamicCastToGenerated<ContainerPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.ContainerPort)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.ContainerPort)
    MergeFrom(*source);
  }
}

void ContainerPort::MergeFrom(const ContainerPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.ContainerPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.container_port() != 0) {
    set_container_port(from.container_port());
  }
}

void ContainerPort::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.ContainerPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerPort::CopyFrom(const ContainerPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.ContainerPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerPort::IsInitialized() const {
  return true;
}

void ContainerPort::Swap(ContainerPort* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContainerPort::InternalSwap(ContainerPort* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(container_port_, other->container_port_);
}

::google::protobuf::Metadata ContainerPort::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2ftasks_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Container::InitAsDefaultInstance() {
  ::flyteidl::core::_Container_default_instance_._instance.get_mutable()->resources_ = const_cast< ::flyteidl::core::Resources*>(
      ::flyteidl::core::Resources::internal_default_instance());
  ::flyteidl::core::_Container_default_instance_._instance.get_mutable()->data_config_ = const_cast< ::flyteidl::core::DataLoadingConfig*>(
      ::flyteidl::core::DataLoadingConfig::internal_default_instance());
}
class Container::HasBitSetters {
 public:
  static const ::flyteidl::core::Resources& resources(const Container* msg);
  static const ::flyteidl::core::DataLoadingConfig& data_config(const Container* msg);
};

const ::flyteidl::core::Resources&
Container::HasBitSetters::resources(const Container* msg) {
  return *msg->resources_;
}
const ::flyteidl::core::DataLoadingConfig&
Container::HasBitSetters::data_config(const Container* msg) {
  return *msg->data_config_;
}
void Container::clear_env() {
  env_.Clear();
}
void Container::clear_config() {
  config_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Container::kImageFieldNumber;
const int Container::kCommandFieldNumber;
const int Container::kArgsFieldNumber;
const int Container::kResourcesFieldNumber;
const int Container::kEnvFieldNumber;
const int Container::kConfigFieldNumber;
const int Container::kPortsFieldNumber;
const int Container::kDataConfigFieldNumber;
const int Container::kArchitectureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Container::Container()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.Container)
}
Container::Container(const Container& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      command_(from.command_),
      args_(from.args_),
      env_(from.env_),
      config_(from.config_),
      ports_(from.ports_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image().size() > 0) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.has_resources()) {
    resources_ = new ::flyteidl::core::Resources(*from.resources_);
  } else {
    resources_ = nullptr;
  }
  if (from.has_data_config()) {
    data_config_ = new ::flyteidl::core::DataLoadingConfig(*from.data_config_);
  } else {
    data_config_ = nullptr;
  }
  architecture_ = from.architecture_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Container)
}

void Container::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Container_flyteidl_2fcore_2ftasks_2eproto.base);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&resources_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&architecture_) -
      reinterpret_cast<char*>(&resources_)) + sizeof(architecture_));
}

Container::~Container() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Container)
  SharedDtor();
}

void Container::SharedDtor() {
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete resources_;
  if (this != internal_default_instance()) delete data_config_;
}

void Container::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Container& Container::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Container_flyteidl_2fcore_2ftasks_2eproto.base);
  return *internal_default_instance();
}


void Container::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.Container)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_.Clear();
  args_.Clear();
  env_.Clear();
  config_.Clear();
  ports_.Clear();
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && resources_ != nullptr) {
    delete resources_;
  }
  resources_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && data_config_ != nullptr) {
    delete data_config_;
  }
  data_config_ = nullptr;
  architecture_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Container::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Container*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string image = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.Container.image");
        object = msg->mutable_image();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string command = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("flyteidl.core.Container.command");
          object = msg->add_command();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated string args = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("flyteidl.core.Container.args");
          object = msg->add_args();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // .flyteidl.core.Resources resources = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Resources::_InternalParse;
        object = msg->mutable_resources();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .flyteidl.core.KeyValuePair env = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::core::KeyValuePair::_InternalParse;
          object = msg->add_env();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // repeated .flyteidl.core.KeyValuePair config = 6 [deprecated = true];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::core::KeyValuePair::_InternalParse;
          object = msg->add_config();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // repeated .flyteidl.core.ContainerPort ports = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::core::ContainerPort::_InternalParse;
          object = msg->add_ports();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // .flyteidl.core.DataLoadingConfig data_config = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::DataLoadingConfig::_InternalParse;
        object = msg->mutable_data_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.Container.Architecture architecture = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_architecture(static_cast<::flyteidl::core::Container_Architecture>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Container::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.Container)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string image = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image().data(), static_cast<int>(this->image().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.Container.image"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string command = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_command()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->command(this->command_size() - 1).data(),
            static_cast<int>(this->command(this->command_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.Container.command"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string args = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_args()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->args(this->args_size() - 1).data(),
            static_cast<int>(this->args(this->args_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.Container.args"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Resources resources = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.core.KeyValuePair env = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_env()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.core.KeyValuePair config = 6 [deprecated = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.core.ContainerPort ports = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ports()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.DataLoadingConfig data_config = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Container.Architecture architecture = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_architecture(static_cast< ::flyteidl::core::Container_Architecture >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.Container)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.Container)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Container::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.Container)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string image = 1;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.Container.image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->image(), output);
  }

  // repeated string command = 2;
  for (int i = 0, n = this->command_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->command(i).data(), static_cast<int>(this->command(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.Container.command");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->command(i), output);
  }

  // repeated string args = 3;
  for (int i = 0, n = this->args_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->args(i).data(), static_cast<int>(this->args(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.Container.args");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->args(i), output);
  }

  // .flyteidl.core.Resources resources = 4;
  if (this->has_resources()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::resources(this), output);
  }

  // repeated .flyteidl.core.KeyValuePair env = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->env_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->env(static_cast<int>(i)),
      output);
  }

  // repeated .flyteidl.core.KeyValuePair config = 6 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->config_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->config(static_cast<int>(i)),
      output);
  }

  // repeated .flyteidl.core.ContainerPort ports = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ports_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->ports(static_cast<int>(i)),
      output);
  }

  // .flyteidl.core.DataLoadingConfig data_config = 9;
  if (this->has_data_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::data_config(this), output);
  }

  // .flyteidl.core.Container.Architecture architecture = 10;
  if (this->architecture() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->architecture(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.Container)
}

::google::protobuf::uint8* Container::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.Container)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string image = 1;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.Container.image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->image(), target);
  }

  // repeated string command = 2;
  for (int i = 0, n = this->command_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->command(i).data(), static_cast<int>(this->command(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.Container.command");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->command(i), target);
  }

  // repeated string args = 3;
  for (int i = 0, n = this->args_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->args(i).data(), static_cast<int>(this->args(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.Container.args");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->args(i), target);
  }

  // .flyteidl.core.Resources resources = 4;
  if (this->has_resources()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::resources(this), target);
  }

  // repeated .flyteidl.core.KeyValuePair env = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->env_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->env(static_cast<int>(i)), target);
  }

  // repeated .flyteidl.core.KeyValuePair config = 6 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->config_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->config(static_cast<int>(i)), target);
  }

  // repeated .flyteidl.core.ContainerPort ports = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ports_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->ports(static_cast<int>(i)), target);
  }

  // .flyteidl.core.DataLoadingConfig data_config = 9;
  if (this->has_data_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::data_config(this), target);
  }

  // .flyteidl.core.Container.Architecture architecture = 10;
  if (this->architecture() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->architecture(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.Container)
  return target;
}

size_t Container::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.Container)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string command = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->command_size());
  for (int i = 0, n = this->command_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->command(i));
  }

  // repeated string args = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->args_size());
  for (int i = 0, n = this->args_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->args(i));
  }

  // repeated .flyteidl.core.KeyValuePair env = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->env_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->env(static_cast<int>(i)));
    }
  }

  // repeated .flyteidl.core.KeyValuePair config = 6 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->config_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->config(static_cast<int>(i)));
    }
  }

  // repeated .flyteidl.core.ContainerPort ports = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->ports_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ports(static_cast<int>(i)));
    }
  }

  // string image = 1;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image());
  }

  // .flyteidl.core.Resources resources = 4;
  if (this->has_resources()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *resources_);
  }

  // .flyteidl.core.DataLoadingConfig data_config = 9;
  if (this->has_data_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_config_);
  }

  // .flyteidl.core.Container.Architecture architecture = 10;
  if (this->architecture() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->architecture());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Container::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.Container)
  GOOGLE_DCHECK_NE(&from, this);
  const Container* source =
      ::google::protobuf::DynamicCastToGenerated<Container>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.Container)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.Container)
    MergeFrom(*source);
  }
}

void Container::MergeFrom(const Container& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.Container)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  command_.MergeFrom(from.command_);
  args_.MergeFrom(from.args_);
  env_.MergeFrom(from.env_);
  config_.MergeFrom(from.config_);
  ports_.MergeFrom(from.ports_);
  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.has_resources()) {
    mutable_resources()->::flyteidl::core::Resources::MergeFrom(from.resources());
  }
  if (from.has_data_config()) {
    mutable_data_config()->::flyteidl::core::DataLoadingConfig::MergeFrom(from.data_config());
  }
  if (from.architecture() != 0) {
    set_architecture(from.architecture());
  }
}

void Container::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.Container)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Container::CopyFrom(const Container& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.Container)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Container::IsInitialized() const {
  return true;
}

void Container::Swap(Container* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Container::InternalSwap(Container* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  command_.InternalSwap(CastToBase(&other->command_));
  args_.InternalSwap(CastToBase(&other->args_));
  CastToBase(&env_)->InternalSwap(CastToBase(&other->env_));
  CastToBase(&config_)->InternalSwap(CastToBase(&other->config_));
  CastToBase(&ports_)->InternalSwap(CastToBase(&other->ports_));
  image_.Swap(&other->image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(resources_, other->resources_);
  swap(data_config_, other->data_config_);
  swap(architecture_, other->architecture_);
}

::google::protobuf::Metadata Container::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2ftasks_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void IOStrategy::InitAsDefaultInstance() {
}
class IOStrategy::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IOStrategy::kDownloadModeFieldNumber;
const int IOStrategy::kUploadModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IOStrategy::IOStrategy()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.IOStrategy)
}
IOStrategy::IOStrategy(const IOStrategy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&download_mode_, &from.download_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&upload_mode_) -
    reinterpret_cast<char*>(&download_mode_)) + sizeof(upload_mode_));
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.IOStrategy)
}

void IOStrategy::SharedCtor() {
  ::memset(&download_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upload_mode_) -
      reinterpret_cast<char*>(&download_mode_)) + sizeof(upload_mode_));
}

IOStrategy::~IOStrategy() {
  // @@protoc_insertion_point(destructor:flyteidl.core.IOStrategy)
  SharedDtor();
}

void IOStrategy::SharedDtor() {
}

void IOStrategy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IOStrategy& IOStrategy::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_IOStrategy_flyteidl_2fcore_2ftasks_2eproto.base);
  return *internal_default_instance();
}


void IOStrategy::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.IOStrategy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&download_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upload_mode_) -
      reinterpret_cast<char*>(&download_mode_)) + sizeof(upload_mode_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IOStrategy::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<IOStrategy*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.IOStrategy.DownloadMode download_mode = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_download_mode(static_cast<::flyteidl::core::IOStrategy_DownloadMode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .flyteidl.core.IOStrategy.UploadMode upload_mode = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_upload_mode(static_cast<::flyteidl::core::IOStrategy_UploadMode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IOStrategy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.IOStrategy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.IOStrategy.DownloadMode download_mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_download_mode(static_cast< ::flyteidl::core::IOStrategy_DownloadMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.IOStrategy.UploadMode upload_mode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_upload_mode(static_cast< ::flyteidl::core::IOStrategy_UploadMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.IOStrategy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.IOStrategy)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IOStrategy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.IOStrategy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.IOStrategy.DownloadMode download_mode = 1;
  if (this->download_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->download_mode(), output);
  }

  // .flyteidl.core.IOStrategy.UploadMode upload_mode = 2;
  if (this->upload_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->upload_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.IOStrategy)
}

::google::protobuf::uint8* IOStrategy::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.IOStrategy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.IOStrategy.DownloadMode download_mode = 1;
  if (this->download_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->download_mode(), target);
  }

  // .flyteidl.core.IOStrategy.UploadMode upload_mode = 2;
  if (this->upload_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->upload_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.IOStrategy)
  return target;
}

size_t IOStrategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.IOStrategy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.IOStrategy.DownloadMode download_mode = 1;
  if (this->download_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->download_mode());
  }

  // .flyteidl.core.IOStrategy.UploadMode upload_mode = 2;
  if (this->upload_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->upload_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IOStrategy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.IOStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  const IOStrategy* source =
      ::google::protobuf::DynamicCastToGenerated<IOStrategy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.IOStrategy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.IOStrategy)
    MergeFrom(*source);
  }
}

void IOStrategy::MergeFrom(const IOStrategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.IOStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.download_mode() != 0) {
    set_download_mode(from.download_mode());
  }
  if (from.upload_mode() != 0) {
    set_upload_mode(from.upload_mode());
  }
}

void IOStrategy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.IOStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IOStrategy::CopyFrom(const IOStrategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.IOStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IOStrategy::IsInitialized() const {
  return true;
}

void IOStrategy::Swap(IOStrategy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IOStrategy::InternalSwap(IOStrategy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(download_mode_, other->download_mode_);
  swap(upload_mode_, other->upload_mode_);
}

::google::protobuf::Metadata IOStrategy::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2ftasks_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DataLoadingConfig::InitAsDefaultInstance() {
  ::flyteidl::core::_DataLoadingConfig_default_instance_._instance.get_mutable()->io_strategy_ = const_cast< ::flyteidl::core::IOStrategy*>(
      ::flyteidl::core::IOStrategy::internal_default_instance());
}
class DataLoadingConfig::HasBitSetters {
 public:
  static const ::flyteidl::core::IOStrategy& io_strategy(const DataLoadingConfig* msg);
};

const ::flyteidl::core::IOStrategy&
DataLoadingConfig::HasBitSetters::io_strategy(const DataLoadingConfig* msg) {
  return *msg->io_strategy_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataLoadingConfig::kEnabledFieldNumber;
const int DataLoadingConfig::kInputPathFieldNumber;
const int DataLoadingConfig::kOutputPathFieldNumber;
const int DataLoadingConfig::kFormatFieldNumber;
const int DataLoadingConfig::kIoStrategyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataLoadingConfig::DataLoadingConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.DataLoadingConfig)
}
DataLoadingConfig::DataLoadingConfig(const DataLoadingConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.input_path().size() > 0) {
    input_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_path_);
  }
  output_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.output_path().size() > 0) {
    output_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_path_);
  }
  if (from.has_io_strategy()) {
    io_strategy_ = new ::flyteidl::core::IOStrategy(*from.io_strategy_);
  } else {
    io_strategy_ = nullptr;
  }
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(format_));
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.DataLoadingConfig)
}

void DataLoadingConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DataLoadingConfig_flyteidl_2fcore_2ftasks_2eproto.base);
  input_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&io_strategy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&io_strategy_)) + sizeof(format_));
}

DataLoadingConfig::~DataLoadingConfig() {
  // @@protoc_insertion_point(destructor:flyteidl.core.DataLoadingConfig)
  SharedDtor();
}

void DataLoadingConfig::SharedDtor() {
  input_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete io_strategy_;
}

void DataLoadingConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataLoadingConfig& DataLoadingConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DataLoadingConfig_flyteidl_2fcore_2ftasks_2eproto.base);
  return *internal_default_instance();
}


void DataLoadingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.DataLoadingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && io_strategy_ != nullptr) {
    delete io_strategy_;
  }
  io_strategy_ = nullptr;
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(format_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DataLoadingConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DataLoadingConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_enabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string input_path = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.DataLoadingConfig.input_path");
        object = msg->mutable_input_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string output_path = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.DataLoadingConfig.output_path");
        object = msg->mutable_output_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.core.DataLoadingConfig.LiteralMapFormat format = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_format(static_cast<::flyteidl::core::DataLoadingConfig_LiteralMapFormat>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .flyteidl.core.IOStrategy io_strategy = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::IOStrategy::_InternalParse;
        object = msg->mutable_io_strategy();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DataLoadingConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.DataLoadingConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string input_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input_path().data(), static_cast<int>(this->input_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.DataLoadingConfig.input_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string output_path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output_path().data(), static_cast<int>(this->output_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.DataLoadingConfig.output_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.DataLoadingConfig.LiteralMapFormat format = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_format(static_cast< ::flyteidl::core::DataLoadingConfig_LiteralMapFormat >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.IOStrategy io_strategy = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_io_strategy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.DataLoadingConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.DataLoadingConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DataLoadingConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.DataLoadingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // string input_path = 2;
  if (this->input_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_path().data(), static_cast<int>(this->input_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.DataLoadingConfig.input_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->input_path(), output);
  }

  // string output_path = 3;
  if (this->output_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_path().data(), static_cast<int>(this->output_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.DataLoadingConfig.output_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->output_path(), output);
  }

  // .flyteidl.core.DataLoadingConfig.LiteralMapFormat format = 4;
  if (this->format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->format(), output);
  }

  // .flyteidl.core.IOStrategy io_strategy = 5;
  if (this->has_io_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::io_strategy(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.DataLoadingConfig)
}

::google::protobuf::uint8* DataLoadingConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.DataLoadingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // string input_path = 2;
  if (this->input_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_path().data(), static_cast<int>(this->input_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.DataLoadingConfig.input_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->input_path(), target);
  }

  // string output_path = 3;
  if (this->output_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_path().data(), static_cast<int>(this->output_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.DataLoadingConfig.output_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->output_path(), target);
  }

  // .flyteidl.core.DataLoadingConfig.LiteralMapFormat format = 4;
  if (this->format() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->format(), target);
  }

  // .flyteidl.core.IOStrategy io_strategy = 5;
  if (this->has_io_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::io_strategy(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.DataLoadingConfig)
  return target;
}

size_t DataLoadingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.DataLoadingConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input_path = 2;
  if (this->input_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->input_path());
  }

  // string output_path = 3;
  if (this->output_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output_path());
  }

  // .flyteidl.core.IOStrategy io_strategy = 5;
  if (this->has_io_strategy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *io_strategy_);
  }

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // .flyteidl.core.DataLoadingConfig.LiteralMapFormat format = 4;
  if (this->format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataLoadingConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.DataLoadingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DataLoadingConfig* source =
      ::google::protobuf::DynamicCastToGenerated<DataLoadingConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.DataLoadingConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.DataLoadingConfig)
    MergeFrom(*source);
  }
}

void DataLoadingConfig::MergeFrom(const DataLoadingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.DataLoadingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input_path().size() > 0) {

    input_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_path_);
  }
  if (from.output_path().size() > 0) {

    output_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_path_);
  }
  if (from.has_io_strategy()) {
    mutable_io_strategy()->::flyteidl::core::IOStrategy::MergeFrom(from.io_strategy());
  }
  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
  if (from.format() != 0) {
    set_format(from.format());
  }
}

void DataLoadingConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.DataLoadingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataLoadingConfig::CopyFrom(const DataLoadingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.DataLoadingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataLoadingConfig::IsInitialized() const {
  return true;
}

void DataLoadingConfig::Swap(DataLoadingConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataLoadingConfig::InternalSwap(DataLoadingConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  input_path_.Swap(&other->input_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  output_path_.Swap(&other->output_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(io_strategy_, other->io_strategy_);
  swap(enabled_, other->enabled_);
  swap(format_, other->format_);
}

::google::protobuf::Metadata DataLoadingConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2ftasks_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void K8sPod::InitAsDefaultInstance() {
  ::flyteidl::core::_K8sPod_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::flyteidl::core::K8sObjectMetadata*>(
      ::flyteidl::core::K8sObjectMetadata::internal_default_instance());
  ::flyteidl::core::_K8sPod_default_instance_._instance.get_mutable()->pod_spec_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
  ::flyteidl::core::_K8sPod_default_instance_._instance.get_mutable()->data_config_ = const_cast< ::flyteidl::core::DataLoadingConfig*>(
      ::flyteidl::core::DataLoadingConfig::internal_default_instance());
}
class K8sPod::HasBitSetters {
 public:
  static const ::flyteidl::core::K8sObjectMetadata& metadata(const K8sPod* msg);
  static const ::google::protobuf::Struct& pod_spec(const K8sPod* msg);
  static const ::flyteidl::core::DataLoadingConfig& data_config(const K8sPod* msg);
};

const ::flyteidl::core::K8sObjectMetadata&
K8sPod::HasBitSetters::metadata(const K8sPod* msg) {
  return *msg->metadata_;
}
const ::google::protobuf::Struct&
K8sPod::HasBitSetters::pod_spec(const K8sPod* msg) {
  return *msg->pod_spec_;
}
const ::flyteidl::core::DataLoadingConfig&
K8sPod::HasBitSetters::data_config(const K8sPod* msg) {
  return *msg->data_config_;
}
void K8sPod::clear_pod_spec() {
  if (GetArenaNoVirtual() == nullptr && pod_spec_ != nullptr) {
    delete pod_spec_;
  }
  pod_spec_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int K8sPod::kMetadataFieldNumber;
const int K8sPod::kPodSpecFieldNumber;
const int K8sPod::kDataConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

K8sPod::K8sPod()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.K8sPod)
}
K8sPod::K8sPod(const K8sPod& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_metadata()) {
    metadata_ = new ::flyteidl::core::K8sObjectMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from.has_pod_spec()) {
    pod_spec_ = new ::google::protobuf::Struct(*from.pod_spec_);
  } else {
    pod_spec_ = nullptr;
  }
  if (from.has_data_config()) {
    data_config_ = new ::flyteidl::core::DataLoadingConfig(*from.data_config_);
  } else {
    data_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.K8sPod)
}

void K8sPod::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_K8sPod_flyteidl_2fcore_2ftasks_2eproto.base);
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_config_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(data_config_));
}

K8sPod::~K8sPod() {
  // @@protoc_insertion_point(destructor:flyteidl.core.K8sPod)
  SharedDtor();
}

void K8sPod::SharedDtor() {
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete pod_spec_;
  if (this != internal_default_instance()) delete data_config_;
}

void K8sPod::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const K8sPod& K8sPod::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_K8sPod_flyteidl_2fcore_2ftasks_2eproto.base);
  return *internal_default_instance();
}


void K8sPod::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.K8sPod)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pod_spec_ != nullptr) {
    delete pod_spec_;
  }
  pod_spec_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && data_config_ != nullptr) {
    delete data_config_;
  }
  data_config_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* K8sPod::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<K8sPod*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.K8sObjectMetadata metadata = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::K8sObjectMetadata::_InternalParse;
        object = msg->mutable_metadata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Struct pod_spec = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Struct::_InternalParse;
        object = msg->mutable_pod_spec();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.DataLoadingConfig data_config = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::DataLoadingConfig::_InternalParse;
        object = msg->mutable_data_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool K8sPod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.K8sPod)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.K8sObjectMetadata metadata = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct pod_spec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pod_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.DataLoadingConfig data_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.K8sPod)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.K8sPod)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void K8sPod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.K8sPod)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.K8sObjectMetadata metadata = 1;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::metadata(this), output);
  }

  // .google.protobuf.Struct pod_spec = 2;
  if (this->has_pod_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pod_spec(this), output);
  }

  // .flyteidl.core.DataLoadingConfig data_config = 3;
  if (this->has_data_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::data_config(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.K8sPod)
}

::google::protobuf::uint8* K8sPod::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.K8sPod)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.K8sObjectMetadata metadata = 1;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::metadata(this), target);
  }

  // .google.protobuf.Struct pod_spec = 2;
  if (this->has_pod_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pod_spec(this), target);
  }

  // .flyteidl.core.DataLoadingConfig data_config = 3;
  if (this->has_data_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::data_config(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.K8sPod)
  return target;
}

size_t K8sPod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.K8sPod)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.K8sObjectMetadata metadata = 1;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .google.protobuf.Struct pod_spec = 2;
  if (this->has_pod_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pod_spec_);
  }

  // .flyteidl.core.DataLoadingConfig data_config = 3;
  if (this->has_data_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void K8sPod::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.K8sPod)
  GOOGLE_DCHECK_NE(&from, this);
  const K8sPod* source =
      ::google::protobuf::DynamicCastToGenerated<K8sPod>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.K8sPod)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.K8sPod)
    MergeFrom(*source);
  }
}

void K8sPod::MergeFrom(const K8sPod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.K8sPod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_metadata()) {
    mutable_metadata()->::flyteidl::core::K8sObjectMetadata::MergeFrom(from.metadata());
  }
  if (from.has_pod_spec()) {
    mutable_pod_spec()->::google::protobuf::Struct::MergeFrom(from.pod_spec());
  }
  if (from.has_data_config()) {
    mutable_data_config()->::flyteidl::core::DataLoadingConfig::MergeFrom(from.data_config());
  }
}

void K8sPod::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.K8sPod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void K8sPod::CopyFrom(const K8sPod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.K8sPod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool K8sPod::IsInitialized() const {
  return true;
}

void K8sPod::Swap(K8sPod* other) {
  if (other == this) return;
  InternalSwap(other);
}
void K8sPod::InternalSwap(K8sPod* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(metadata_, other->metadata_);
  swap(pod_spec_, other->pod_spec_);
  swap(data_config_, other->data_config_);
}

::google::protobuf::Metadata K8sPod::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2ftasks_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

K8sObjectMetadata_LabelsEntry_DoNotUse::K8sObjectMetadata_LabelsEntry_DoNotUse() {}
K8sObjectMetadata_LabelsEntry_DoNotUse::K8sObjectMetadata_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void K8sObjectMetadata_LabelsEntry_DoNotUse::MergeFrom(const K8sObjectMetadata_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata K8sObjectMetadata_LabelsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2ftasks_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[12];
}
void K8sObjectMetadata_LabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool K8sObjectMetadata_LabelsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      K8sObjectMetadata_LabelsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.core.K8sObjectMetadata.LabelsEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.core.K8sObjectMetadata.LabelsEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

K8sObjectMetadata_AnnotationsEntry_DoNotUse::K8sObjectMetadata_AnnotationsEntry_DoNotUse() {}
K8sObjectMetadata_AnnotationsEntry_DoNotUse::K8sObjectMetadata_AnnotationsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void K8sObjectMetadata_AnnotationsEntry_DoNotUse::MergeFrom(const K8sObjectMetadata_AnnotationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata K8sObjectMetadata_AnnotationsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2ftasks_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[13];
}
void K8sObjectMetadata_AnnotationsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool K8sObjectMetadata_AnnotationsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      K8sObjectMetadata_AnnotationsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.core.K8sObjectMetadata.AnnotationsEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.core.K8sObjectMetadata.AnnotationsEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void K8sObjectMetadata::InitAsDefaultInstance() {
}
class K8sObjectMetadata::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int K8sObjectMetadata::kLabelsFieldNumber;
const int K8sObjectMetadata::kAnnotationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

K8sObjectMetadata::K8sObjectMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.K8sObjectMetadata)
}
K8sObjectMetadata::K8sObjectMetadata(const K8sObjectMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  annotations_.MergeFrom(from.annotations_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.K8sObjectMetadata)
}

void K8sObjectMetadata::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_K8sObjectMetadata_flyteidl_2fcore_2ftasks_2eproto.base);
}

K8sObjectMetadata::~K8sObjectMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.core.K8sObjectMetadata)
  SharedDtor();
}

void K8sObjectMetadata::SharedDtor() {
}

void K8sObjectMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const K8sObjectMetadata& K8sObjectMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_K8sObjectMetadata_flyteidl_2fcore_2ftasks_2eproto.base);
  return *internal_default_instance();
}


void K8sObjectMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.K8sObjectMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  annotations_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* K8sObjectMetadata::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<K8sObjectMetadata*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // map<string, string> labels = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::flyteidl::core::K8sObjectMetadata_LabelsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->labels_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // map<string, string> annotations = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::flyteidl::core::K8sObjectMetadata_AnnotationsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->annotations_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool K8sObjectMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.K8sObjectMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> labels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          K8sObjectMetadata_LabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              K8sObjectMetadata_LabelsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.K8sObjectMetadata.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.K8sObjectMetadata.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> annotations = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          K8sObjectMetadata_AnnotationsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              K8sObjectMetadata_AnnotationsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&annotations_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.K8sObjectMetadata.AnnotationsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.K8sObjectMetadata.AnnotationsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.K8sObjectMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.K8sObjectMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void K8sObjectMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.K8sObjectMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> labels = 1;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.K8sObjectMetadata.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.K8sObjectMetadata.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<K8sObjectMetadata_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<K8sObjectMetadata_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> annotations = 2;
  if (!this->annotations().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.K8sObjectMetadata.AnnotationsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.K8sObjectMetadata.AnnotationsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->annotations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->annotations().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->annotations().begin();
          it != this->annotations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<K8sObjectMetadata_AnnotationsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(annotations_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<K8sObjectMetadata_AnnotationsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->annotations().begin();
          it != this->annotations().end(); ++it) {
        entry.reset(annotations_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.K8sObjectMetadata)
}

::google::protobuf::uint8* K8sObjectMetadata::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.K8sObjectMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> labels = 1;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.K8sObjectMetadata.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.K8sObjectMetadata.LabelsEntry.value");
      }
    };

    if (false &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<K8sObjectMetadata_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<K8sObjectMetadata_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> annotations = 2;
  if (!this->annotations().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.K8sObjectMetadata.AnnotationsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.K8sObjectMetadata.AnnotationsEntry.value");
      }
    };

    if (false &&
        this->annotations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->annotations().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->annotations().begin();
          it != this->annotations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<K8sObjectMetadata_AnnotationsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(annotations_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<K8sObjectMetadata_AnnotationsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->annotations().begin();
          it != this->annotations().end(); ++it) {
        entry.reset(annotations_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.K8sObjectMetadata)
  return target;
}

size_t K8sObjectMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.K8sObjectMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::std::unique_ptr<K8sObjectMetadata_LabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> annotations = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->annotations_size());
  {
    ::std::unique_ptr<K8sObjectMetadata_AnnotationsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->annotations().begin();
        it != this->annotations().end(); ++it) {
      entry.reset(annotations_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void K8sObjectMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.K8sObjectMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const K8sObjectMetadata* source =
      ::google::protobuf::DynamicCastToGenerated<K8sObjectMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.K8sObjectMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.K8sObjectMetadata)
    MergeFrom(*source);
  }
}

void K8sObjectMetadata::MergeFrom(const K8sObjectMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.K8sObjectMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  annotations_.MergeFrom(from.annotations_);
}

void K8sObjectMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.K8sObjectMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void K8sObjectMetadata::CopyFrom(const K8sObjectMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.K8sObjectMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool K8sObjectMetadata::IsInitialized() const {
  return true;
}

void K8sObjectMetadata::Swap(K8sObjectMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void K8sObjectMetadata::InternalSwap(K8sObjectMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  labels_.Swap(&other->labels_);
  annotations_.Swap(&other->annotations_);
}

::google::protobuf::Metadata K8sObjectMetadata::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2ftasks_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Sql::InitAsDefaultInstance() {
}
class Sql::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sql::kStatementFieldNumber;
const int Sql::kDialectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sql::Sql()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.Sql)
}
Sql::Sql(const Sql& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  statement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.statement().size() > 0) {
    statement_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.statement_);
  }
  dialect_ = from.dialect_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Sql)
}

void Sql::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Sql_flyteidl_2fcore_2ftasks_2eproto.base);
  statement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dialect_ = 0;
}

Sql::~Sql() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Sql)
  SharedDtor();
}

void Sql::SharedDtor() {
  statement_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Sql::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sql& Sql::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Sql_flyteidl_2fcore_2ftasks_2eproto.base);
  return *internal_default_instance();
}


void Sql::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.Sql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  statement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dialect_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Sql::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Sql*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string statement = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.Sql.statement");
        object = msg->mutable_statement();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.core.Sql.Dialect dialect = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_dialect(static_cast<::flyteidl::core::Sql_Dialect>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Sql::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.Sql)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string statement = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_statement()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->statement().data(), static_cast<int>(this->statement().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.Sql.statement"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Sql.Dialect dialect = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dialect(static_cast< ::flyteidl::core::Sql_Dialect >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.Sql)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.Sql)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Sql::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.Sql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string statement = 1;
  if (this->statement().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->statement().data(), static_cast<int>(this->statement().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.Sql.statement");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->statement(), output);
  }

  // .flyteidl.core.Sql.Dialect dialect = 2;
  if (this->dialect() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->dialect(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.Sql)
}

::google::protobuf::uint8* Sql::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.Sql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string statement = 1;
  if (this->statement().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->statement().data(), static_cast<int>(this->statement().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.Sql.statement");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->statement(), target);
  }

  // .flyteidl.core.Sql.Dialect dialect = 2;
  if (this->dialect() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->dialect(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.Sql)
  return target;
}

size_t Sql::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.Sql)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string statement = 1;
  if (this->statement().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->statement());
  }

  // .flyteidl.core.Sql.Dialect dialect = 2;
  if (this->dialect() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dialect());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sql::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.Sql)
  GOOGLE_DCHECK_NE(&from, this);
  const Sql* source =
      ::google::protobuf::DynamicCastToGenerated<Sql>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.Sql)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.Sql)
    MergeFrom(*source);
  }
}

void Sql::MergeFrom(const Sql& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.Sql)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.statement().size() > 0) {

    statement_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.statement_);
  }
  if (from.dialect() != 0) {
    set_dialect(from.dialect());
  }
}

void Sql::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.Sql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sql::CopyFrom(const Sql& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.Sql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sql::IsInitialized() const {
  return true;
}

void Sql::Swap(Sql* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sql::InternalSwap(Sql* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  statement_.Swap(&other->statement_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dialect_, other->dialect_);
}

::google::protobuf::Metadata Sql::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2ftasks_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::core::Resources_ResourceEntry* Arena::CreateMaybeMessage< ::flyteidl::core::Resources_ResourceEntry >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::Resources_ResourceEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::Resources* Arena::CreateMaybeMessage< ::flyteidl::core::Resources >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::Resources >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::RuntimeMetadata* Arena::CreateMaybeMessage< ::flyteidl::core::RuntimeMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::RuntimeMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::TaskMetadata_TagsEntry_DoNotUse* Arena::CreateMaybeMessage< ::flyteidl::core::TaskMetadata_TagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::TaskMetadata_TagsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::TaskMetadata* Arena::CreateMaybeMessage< ::flyteidl::core::TaskMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::TaskMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::TaskTemplate_ConfigEntry_DoNotUse* Arena::CreateMaybeMessage< ::flyteidl::core::TaskTemplate_ConfigEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::TaskTemplate_ConfigEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::TaskTemplate* Arena::CreateMaybeMessage< ::flyteidl::core::TaskTemplate >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::TaskTemplate >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::ContainerPort* Arena::CreateMaybeMessage< ::flyteidl::core::ContainerPort >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::ContainerPort >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::Container* Arena::CreateMaybeMessage< ::flyteidl::core::Container >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::Container >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::IOStrategy* Arena::CreateMaybeMessage< ::flyteidl::core::IOStrategy >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::IOStrategy >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::DataLoadingConfig* Arena::CreateMaybeMessage< ::flyteidl::core::DataLoadingConfig >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::DataLoadingConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::K8sPod* Arena::CreateMaybeMessage< ::flyteidl::core::K8sPod >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::K8sPod >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::K8sObjectMetadata_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::flyteidl::core::K8sObjectMetadata_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::K8sObjectMetadata_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::K8sObjectMetadata_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage< ::flyteidl::core::K8sObjectMetadata_AnnotationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::K8sObjectMetadata_AnnotationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::K8sObjectMetadata* Arena::CreateMaybeMessage< ::flyteidl::core::K8sObjectMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::K8sObjectMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::Sql* Arena::CreateMaybeMessage< ::flyteidl::core::Sql >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::Sql >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
