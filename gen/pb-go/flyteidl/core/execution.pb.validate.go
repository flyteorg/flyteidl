// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl/core/execution.proto

package core

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _execution_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on WorkflowExecution with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *WorkflowExecution) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// WorkflowExecutionValidationError is the validation error returned by
// WorkflowExecution.Validate if the designated constraints aren't met.
type WorkflowExecutionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowExecutionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowExecutionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowExecutionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowExecutionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowExecutionValidationError) ErrorName() string {
	return "WorkflowExecutionValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowExecutionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowExecution.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowExecutionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowExecutionValidationError{}

// Validate checks the field values on NodeExecution with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *NodeExecution) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// NodeExecutionValidationError is the validation error returned by
// NodeExecution.Validate if the designated constraints aren't met.
type NodeExecutionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeExecutionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeExecutionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeExecutionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeExecutionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeExecutionValidationError) ErrorName() string { return "NodeExecutionValidationError" }

// Error satisfies the builtin error interface
func (e NodeExecutionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeExecution.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeExecutionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeExecutionValidationError{}

// Validate checks the field values on TaskExecution with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TaskExecution) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// TaskExecutionValidationError is the validation error returned by
// TaskExecution.Validate if the designated constraints aren't met.
type TaskExecutionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskExecutionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskExecutionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskExecutionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskExecutionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskExecutionValidationError) ErrorName() string { return "TaskExecutionValidationError" }

// Error satisfies the builtin error interface
func (e TaskExecutionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskExecution.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskExecutionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskExecutionValidationError{}

// Validate checks the field values on ExecutionError with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ExecutionError) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for ErrorUri

	// no validation rules for Kind

	return nil
}

// ExecutionErrorValidationError is the validation error returned by
// ExecutionError.Validate if the designated constraints aren't met.
type ExecutionErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecutionErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecutionErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecutionErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecutionErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecutionErrorValidationError) ErrorName() string { return "ExecutionErrorValidationError" }

// Error satisfies the builtin error interface
func (e ExecutionErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecutionError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecutionErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecutionErrorValidationError{}

// Validate checks the field values on TaskLog with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TaskLog) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uri

	// no validation rules for Name

	// no validation rules for MessageFormat

	if v, ok := interface{}(m.GetTtl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskLogValidationError{
				field:  "Ttl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TaskLogValidationError is the validation error returned by TaskLog.Validate
// if the designated constraints aren't met.
type TaskLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskLogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskLogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskLogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskLogValidationError) ErrorName() string { return "TaskLogValidationError" }

// Error satisfies the builtin error interface
func (e TaskLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskLogValidationError{}

// Validate checks the field values on QualityOfServiceSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *QualityOfServiceSpec) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQueueingBudget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QualityOfServiceSpecValidationError{
				field:  "QueueingBudget",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// QualityOfServiceSpecValidationError is the validation error returned by
// QualityOfServiceSpec.Validate if the designated constraints aren't met.
type QualityOfServiceSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QualityOfServiceSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QualityOfServiceSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QualityOfServiceSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QualityOfServiceSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QualityOfServiceSpecValidationError) ErrorName() string {
	return "QualityOfServiceSpecValidationError"
}

// Error satisfies the builtin error interface
func (e QualityOfServiceSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQualityOfServiceSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QualityOfServiceSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QualityOfServiceSpecValidationError{}

// Validate checks the field values on QualityOfService with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *QualityOfService) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Designation.(type) {

	case *QualityOfService_Tier_:
		// no validation rules for Tier

	case *QualityOfService_Spec:

		if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualityOfServiceValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// QualityOfServiceValidationError is the validation error returned by
// QualityOfService.Validate if the designated constraints aren't met.
type QualityOfServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QualityOfServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QualityOfServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QualityOfServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QualityOfServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QualityOfServiceValidationError) ErrorName() string { return "QualityOfServiceValidationError" }

// Error satisfies the builtin error interface
func (e QualityOfServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQualityOfService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QualityOfServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QualityOfServiceValidationError{}
