// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/core/resource.proto

package core

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Optional field.
type RayCluster_Environment int32

const (
	RayCluster_DEV        RayCluster_Environment = 0
	RayCluster_TESTING    RayCluster_Environment = 1
	RayCluster_STAGING    RayCluster_Environment = 2
	RayCluster_PRODUCTION RayCluster_Environment = 3
)

var RayCluster_Environment_name = map[int32]string{
	0: "DEV",
	1: "TESTING",
	2: "STAGING",
	3: "PRODUCTION",
}

var RayCluster_Environment_value = map[string]int32{
	"DEV":        0,
	"TESTING":    1,
	"STAGING":    2,
	"PRODUCTION": 3,
}

func (x RayCluster_Environment) String() string {
	return proto.EnumName(RayCluster_Environment_name, int32(x))
}

func (RayCluster_Environment) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b7de70f5bc10f4aa, []int{0, 0}
}

// Ray cluster proto is copy from https://github.com/ray-project/kuberay/blob/master/proto/cluster.proto#L125
type RayCluster struct {
	// Required input field. Unique cluster name provided by user.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required input field. Cluster's namespace provided by user
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Required field. This field indicates the user who owns the cluster.
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	// Optional input field. Ray cluster version
	Version     string                 `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Environment RayCluster_Environment `protobuf:"varint,5,opt,name=environment,proto3,enum=flyteidl.core.RayCluster_Environment" json:"environment,omitempty"`
	// Required field. This field indicates ray cluster configuration
	ClusterSpec *ClusterSpec `protobuf:"bytes,6,opt,name=cluster_spec,json=clusterSpec,proto3" json:"cluster_spec,omitempty"`
	// Output. The time that the cluster created.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Output. The time that the cluster deleted.
	DeletedAt *timestamp.Timestamp `protobuf:"bytes,8,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	// Output. The status to show the cluster status.state
	ClusterState         string   `protobuf:"bytes,9,opt,name=cluster_state,json=clusterState,proto3" json:"cluster_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RayCluster) Reset()         { *m = RayCluster{} }
func (m *RayCluster) String() string { return proto.CompactTextString(m) }
func (*RayCluster) ProtoMessage()    {}
func (*RayCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7de70f5bc10f4aa, []int{0}
}

func (m *RayCluster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RayCluster.Unmarshal(m, b)
}
func (m *RayCluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RayCluster.Marshal(b, m, deterministic)
}
func (m *RayCluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RayCluster.Merge(m, src)
}
func (m *RayCluster) XXX_Size() int {
	return xxx_messageInfo_RayCluster.Size(m)
}
func (m *RayCluster) XXX_DiscardUnknown() {
	xxx_messageInfo_RayCluster.DiscardUnknown(m)
}

var xxx_messageInfo_RayCluster proto.InternalMessageInfo

func (m *RayCluster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RayCluster) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RayCluster) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *RayCluster) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *RayCluster) GetEnvironment() RayCluster_Environment {
	if m != nil {
		return m.Environment
	}
	return RayCluster_DEV
}

func (m *RayCluster) GetClusterSpec() *ClusterSpec {
	if m != nil {
		return m.ClusterSpec
	}
	return nil
}

func (m *RayCluster) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *RayCluster) GetDeletedAt() *timestamp.Timestamp {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

func (m *RayCluster) GetClusterState() string {
	if m != nil {
		return m.ClusterState
	}
	return ""
}

type ClusterSpec struct {
	// The head group configuration
	HeadGroupSpec *HeadGroupSpec `protobuf:"bytes,1,opt,name=head_group_spec,json=headGroupSpec,proto3" json:"head_group_spec,omitempty"`
	// The worker group configurations
	WorkerGroupSepc      []*WorkerGroupSpec `protobuf:"bytes,2,rep,name=worker_group_sepc,json=workerGroupSepc,proto3" json:"worker_group_sepc,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ClusterSpec) Reset()         { *m = ClusterSpec{} }
func (m *ClusterSpec) String() string { return proto.CompactTextString(m) }
func (*ClusterSpec) ProtoMessage()    {}
func (*ClusterSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7de70f5bc10f4aa, []int{1}
}

func (m *ClusterSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterSpec.Unmarshal(m, b)
}
func (m *ClusterSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterSpec.Marshal(b, m, deterministic)
}
func (m *ClusterSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterSpec.Merge(m, src)
}
func (m *ClusterSpec) XXX_Size() int {
	return xxx_messageInfo_ClusterSpec.Size(m)
}
func (m *ClusterSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterSpec proto.InternalMessageInfo

func (m *ClusterSpec) GetHeadGroupSpec() *HeadGroupSpec {
	if m != nil {
		return m.HeadGroupSpec
	}
	return nil
}

func (m *ClusterSpec) GetWorkerGroupSepc() []*WorkerGroupSpec {
	if m != nil {
		return m.WorkerGroupSepc
	}
	return nil
}

type HeadGroupSpec struct {
	// Optional. The computeTemplate of head node group
	ComputeTemplate string `protobuf:"bytes,1,opt,name=compute_template,json=computeTemplate,proto3" json:"compute_template,omitempty"`
	// Optional field. This field will be used to retrieve right ray container
	Image string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// Optional. The service type (ClusterIP, NodePort, Load balancer) of the head node
	ServiceType string `protobuf:"bytes,3,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	// Optional. The ray start parames of head node group
	RayStartParams       map[string]string `protobuf:"bytes,4,rep,name=ray_start_params,json=rayStartParams,proto3" json:"ray_start_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HeadGroupSpec) Reset()         { *m = HeadGroupSpec{} }
func (m *HeadGroupSpec) String() string { return proto.CompactTextString(m) }
func (*HeadGroupSpec) ProtoMessage()    {}
func (*HeadGroupSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7de70f5bc10f4aa, []int{2}
}

func (m *HeadGroupSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeadGroupSpec.Unmarshal(m, b)
}
func (m *HeadGroupSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeadGroupSpec.Marshal(b, m, deterministic)
}
func (m *HeadGroupSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeadGroupSpec.Merge(m, src)
}
func (m *HeadGroupSpec) XXX_Size() int {
	return xxx_messageInfo_HeadGroupSpec.Size(m)
}
func (m *HeadGroupSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_HeadGroupSpec.DiscardUnknown(m)
}

var xxx_messageInfo_HeadGroupSpec proto.InternalMessageInfo

func (m *HeadGroupSpec) GetComputeTemplate() string {
	if m != nil {
		return m.ComputeTemplate
	}
	return ""
}

func (m *HeadGroupSpec) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *HeadGroupSpec) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

func (m *HeadGroupSpec) GetRayStartParams() map[string]string {
	if m != nil {
		return m.RayStartParams
	}
	return nil
}

type WorkerGroupSpec struct {
	// Required. Group name of the current worker group
	GroupName string `protobuf:"bytes,1,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// Optional. The computeTemplate of head node group
	ComputeTemplate string `protobuf:"bytes,2,opt,name=compute_template,json=computeTemplate,proto3" json:"compute_template,omitempty"`
	// Optional field. This field will be used to retrieve right ray container
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	// Required. Desired replicas of the worker group
	Replicas int32 `protobuf:"varint,4,opt,name=replicas,proto3" json:"replicas,omitempty"`
	// Optional. Min replicas of the worker group
	MinReplicas int32 `protobuf:"varint,5,opt,name=min_replicas,json=minReplicas,proto3" json:"min_replicas,omitempty"`
	// Optional. Max replicas of the worker group
	MaxReplicas int32 `protobuf:"varint,6,opt,name=max_replicas,json=maxReplicas,proto3" json:"max_replicas,omitempty"`
	// Optional. The ray start parames of worker node group
	RayStartParams       map[string]string `protobuf:"bytes,7,rep,name=ray_start_params,json=rayStartParams,proto3" json:"ray_start_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *WorkerGroupSpec) Reset()         { *m = WorkerGroupSpec{} }
func (m *WorkerGroupSpec) String() string { return proto.CompactTextString(m) }
func (*WorkerGroupSpec) ProtoMessage()    {}
func (*WorkerGroupSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7de70f5bc10f4aa, []int{3}
}

func (m *WorkerGroupSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkerGroupSpec.Unmarshal(m, b)
}
func (m *WorkerGroupSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkerGroupSpec.Marshal(b, m, deterministic)
}
func (m *WorkerGroupSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerGroupSpec.Merge(m, src)
}
func (m *WorkerGroupSpec) XXX_Size() int {
	return xxx_messageInfo_WorkerGroupSpec.Size(m)
}
func (m *WorkerGroupSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerGroupSpec.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerGroupSpec proto.InternalMessageInfo

func (m *WorkerGroupSpec) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *WorkerGroupSpec) GetComputeTemplate() string {
	if m != nil {
		return m.ComputeTemplate
	}
	return ""
}

func (m *WorkerGroupSpec) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *WorkerGroupSpec) GetReplicas() int32 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

func (m *WorkerGroupSpec) GetMinReplicas() int32 {
	if m != nil {
		return m.MinReplicas
	}
	return 0
}

func (m *WorkerGroupSpec) GetMaxReplicas() int32 {
	if m != nil {
		return m.MaxReplicas
	}
	return 0
}

func (m *WorkerGroupSpec) GetRayStartParams() map[string]string {
	if m != nil {
		return m.RayStartParams
	}
	return nil
}

func init() {
	proto.RegisterEnum("flyteidl.core.RayCluster_Environment", RayCluster_Environment_name, RayCluster_Environment_value)
	proto.RegisterType((*RayCluster)(nil), "flyteidl.core.RayCluster")
	proto.RegisterType((*ClusterSpec)(nil), "flyteidl.core.ClusterSpec")
	proto.RegisterType((*HeadGroupSpec)(nil), "flyteidl.core.HeadGroupSpec")
	proto.RegisterMapType((map[string]string)(nil), "flyteidl.core.HeadGroupSpec.RayStartParamsEntry")
	proto.RegisterType((*WorkerGroupSpec)(nil), "flyteidl.core.WorkerGroupSpec")
	proto.RegisterMapType((map[string]string)(nil), "flyteidl.core.WorkerGroupSpec.RayStartParamsEntry")
}

func init() { proto.RegisterFile("flyteidl/core/resource.proto", fileDescriptor_b7de70f5bc10f4aa) }

var fileDescriptor_b7de70f5bc10f4aa = []byte{
	// 655 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0x5f, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x71, 0xd2, 0x34, 0xcd, 0xb8, 0x69, 0xc2, 0xc2, 0x83, 0x15, 0x15, 0x08, 0x41, 0x48,
	0xe1, 0x01, 0x1b, 0x05, 0x84, 0x00, 0x09, 0x89, 0xd0, 0x46, 0xa1, 0x3c, 0xb4, 0x95, 0x13, 0x40,
	0xaa, 0x90, 0xa2, 0x8d, 0x33, 0x75, 0xad, 0xfa, 0xcf, 0x6a, 0xbd, 0x4e, 0x9b, 0x6b, 0x70, 0x01,
	0xce, 0xc4, 0x5d, 0x38, 0x00, 0xda, 0xb5, 0x9d, 0x38, 0x51, 0xd5, 0xbe, 0xf1, 0x94, 0x9d, 0x99,
	0xef, 0xdb, 0xcc, 0xfc, 0x34, 0x6b, 0xd8, 0x3f, 0xf7, 0x17, 0x02, 0xbd, 0x99, 0x6f, 0x39, 0x11,
	0x47, 0x8b, 0x63, 0x1c, 0x25, 0xdc, 0x41, 0x93, 0xf1, 0x48, 0x44, 0xa4, 0x9e, 0x57, 0x4d, 0x59,
	0x6d, 0x3d, 0x71, 0xa3, 0xc8, 0xf5, 0xd1, 0x52, 0xc5, 0x69, 0x72, 0x6e, 0x09, 0x2f, 0xc0, 0x58,
	0xd0, 0x80, 0xa5, 0xfa, 0xce, 0x9f, 0x32, 0x80, 0x4d, 0x17, 0x07, 0x7e, 0x12, 0x0b, 0xe4, 0x84,
	0xc0, 0x56, 0x48, 0x03, 0x34, 0xb4, 0xb6, 0xd6, 0xad, 0xd9, 0xea, 0x4c, 0xf6, 0xa1, 0x26, 0x7f,
	0x63, 0x46, 0x1d, 0x34, 0x4a, 0xaa, 0xb0, 0x4a, 0x48, 0x47, 0x12, 0x23, 0x37, 0xca, 0xa9, 0x43,
	0x9e, 0x89, 0x01, 0xd5, 0x39, 0xf2, 0xd8, 0x8b, 0x42, 0x63, 0x4b, 0xa5, 0xf3, 0x90, 0x0c, 0x41,
	0xc7, 0x70, 0xee, 0xf1, 0x28, 0x0c, 0x30, 0x14, 0x46, 0xa5, 0xad, 0x75, 0xf7, 0x7a, 0xcf, 0xcd,
	0xb5, 0xa6, 0xcd, 0x55, 0x3f, 0xe6, 0x60, 0x25, 0xb6, 0x8b, 0x4e, 0xf2, 0x11, 0x76, 0x9d, 0x54,
	0x33, 0x89, 0x19, 0x3a, 0xc6, 0x76, 0x5b, 0xeb, 0xea, 0xbd, 0xd6, 0xc6, 0x4d, 0xd9, 0x35, 0x23,
	0x86, 0x8e, 0xad, 0x3b, 0xab, 0x80, 0xbc, 0x07, 0x70, 0x38, 0x52, 0x81, 0xb3, 0x09, 0x15, 0x46,
	0x35, 0x33, 0xa7, 0xb0, 0xcc, 0x1c, 0x96, 0x39, 0xce, 0x61, 0xd9, 0xb5, 0x4c, 0xdd, 0x17, 0xd2,
	0x3a, 0x43, 0x1f, 0x33, 0xeb, 0xce, 0xdd, 0xd6, 0x4c, 0xdd, 0x17, 0xe4, 0x19, 0xd4, 0x97, 0x4d,
	0x0b, 0x2a, 0xd0, 0xa8, 0x29, 0x3a, 0xf9, 0x24, 0x23, 0x99, 0xeb, 0x7c, 0x02, 0xbd, 0x30, 0x35,
	0xa9, 0x42, 0xf9, 0x70, 0xf0, 0xbd, 0x79, 0x8f, 0xe8, 0x50, 0x1d, 0x0f, 0x46, 0xe3, 0xa3, 0xe3,
	0x61, 0x53, 0x93, 0xc1, 0x68, 0xdc, 0x1f, 0xca, 0xa0, 0x44, 0xf6, 0x00, 0x4e, 0xed, 0x93, 0xc3,
	0x6f, 0x07, 0xe3, 0xa3, 0x93, 0xe3, 0x66, 0xb9, 0xf3, 0x5b, 0x03, 0xbd, 0x30, 0x39, 0x39, 0x84,
	0xc6, 0x05, 0xd2, 0xd9, 0xc4, 0xe5, 0x51, 0xc2, 0x52, 0x5c, 0x9a, 0x6a, 0x7b, 0x7f, 0x03, 0xd7,
	0x17, 0xa4, 0xb3, 0xa1, 0x14, 0x29, 0x60, 0xf5, 0x8b, 0x62, 0x48, 0xbe, 0xc2, 0xfd, 0xab, 0x88,
	0x5f, 0x22, 0xcf, 0xef, 0x41, 0xe6, 0x18, 0xa5, 0x76, 0xb9, 0xab, 0xf7, 0x1e, 0x6f, 0xdc, 0xf3,
	0x43, 0xe9, 0x56, 0x37, 0x35, 0xae, 0x0a, 0x09, 0x64, 0x4e, 0xe7, 0x57, 0x09, 0xea, 0x6b, 0x7f,
	0x46, 0x5e, 0x40, 0xd3, 0x89, 0x02, 0x96, 0x08, 0x9c, 0x08, 0x0c, 0x98, 0x2f, 0xe9, 0xa4, 0x4b,
	0xd8, 0xc8, 0xf2, 0xe3, 0x2c, 0x4d, 0x1e, 0x42, 0xc5, 0x0b, 0xa8, 0x9b, 0xef, 0x62, 0x1a, 0x90,
	0xa7, 0xb0, 0x1b, 0x23, 0x9f, 0x7b, 0x0e, 0x4e, 0xc4, 0x82, 0x61, 0xb6, 0x8f, 0x7a, 0x96, 0x1b,
	0x2f, 0x18, 0x92, 0x33, 0x68, 0x72, 0xba, 0x90, 0xe8, 0xb9, 0x98, 0x30, 0xca, 0x69, 0x10, 0x1b,
	0x5b, 0x6a, 0x80, 0x57, 0xb7, 0x81, 0x90, 0xfb, 0x38, 0x92, 0x9e, 0x53, 0x65, 0x19, 0x84, 0x82,
	0x2f, 0xec, 0x3d, 0xbe, 0x96, 0x6c, 0xf5, 0xe1, 0xc1, 0x0d, 0x32, 0xd2, 0x84, 0xf2, 0x25, 0x2e,
	0xb2, 0x49, 0xe4, 0x51, 0x76, 0x3f, 0xa7, 0x7e, 0xb2, 0xec, 0x5e, 0x05, 0x1f, 0x4a, 0xef, 0xb4,
	0xce, 0xdf, 0x12, 0x34, 0x36, 0xc8, 0x91, 0x47, 0x00, 0x29, 0xed, 0xc2, 0xab, 0xac, 0xa9, 0xcc,
	0xb1, 0x7c, 0x9a, 0x37, 0x51, 0x2b, 0xdd, 0x41, 0xad, 0x5c, 0xa4, 0xd6, 0x82, 0x1d, 0x8e, 0xcc,
	0xf7, 0x1c, 0x1a, 0xab, 0xa7, 0x5a, 0xb1, 0x97, 0xb1, 0x24, 0x1a, 0x78, 0xe1, 0x64, 0x59, 0xaf,
	0xa8, 0xba, 0x1e, 0x78, 0xa1, 0x5d, 0x94, 0xd0, 0xeb, 0x95, 0x64, 0x3b, 0x93, 0xd0, 0xeb, 0xa5,
	0xe4, 0xe7, 0x0d, 0xd0, 0xab, 0x0a, 0x7a, 0xef, 0xf6, 0xad, 0xf9, 0x4f, 0xd8, 0x3f, 0xbf, 0x3d,
	0x7b, 0xe3, 0x7a, 0xe2, 0x22, 0x99, 0x9a, 0x4e, 0x14, 0x58, 0xaa, 0xa5, 0x88, 0xbb, 0xd6, 0xf2,
	0x2b, 0xeb, 0x62, 0x68, 0xb1, 0xe9, 0x4b, 0x37, 0xb2, 0xd6, 0x3e, 0xbc, 0xd3, 0x6d, 0xf5, 0xd6,
	0x5f, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x61, 0x9c, 0xd4, 0xd1, 0x90, 0x05, 0x00, 0x00,
}
