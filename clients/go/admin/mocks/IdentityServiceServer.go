// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	service "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/service"
	mock "github.com/stretchr/testify/mock"
)

// IdentityServiceServer is an autogenerated mock type for the IdentityServiceServer type
type IdentityServiceServer struct {
	mock.Mock
}

type IdentityServiceServer_UserInfo struct {
	*mock.Call
}

func (_m IdentityServiceServer_UserInfo) Return(_a0 *service.UserInfoResponse, _a1 error) *IdentityServiceServer_UserInfo {
	return &IdentityServiceServer_UserInfo{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *IdentityServiceServer) OnUserInfo(_a0 context.Context, _a1 *service.UserInfoRequest) *IdentityServiceServer_UserInfo {
	c_call := _m.On("UserInfo", _a0, _a1)
	return &IdentityServiceServer_UserInfo{Call: c_call}
}

func (_m *IdentityServiceServer) OnUserInfoMatch(matchers ...interface{}) *IdentityServiceServer_UserInfo {
	c_call := _m.On("UserInfo", matchers...)
	return &IdentityServiceServer_UserInfo{Call: c_call}
}

// UserInfo provides a mock function with given fields: _a0, _a1
func (_m *IdentityServiceServer) UserInfo(_a0 context.Context, _a1 *service.UserInfoRequest) (*service.UserInfoResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *service.UserInfoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *service.UserInfoRequest) *service.UserInfoResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.UserInfoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *service.UserInfoRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
