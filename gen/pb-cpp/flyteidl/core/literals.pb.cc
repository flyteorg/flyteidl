// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/literals.proto

#include "flyteidl/core/literals.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace core {
constexpr Primitive::Primitive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct PrimitiveDefaultTypeInternal {
  constexpr PrimitiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PrimitiveDefaultTypeInternal() {}
  union {
    Primitive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PrimitiveDefaultTypeInternal _Primitive_default_instance_;
constexpr Void::Void(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct VoidDefaultTypeInternal {
  constexpr VoidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VoidDefaultTypeInternal() {}
  union {
    Void _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VoidDefaultTypeInternal _Void_default_instance_;
constexpr Blob::Blob(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uri_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metadata_(nullptr){}
struct BlobDefaultTypeInternal {
  constexpr BlobDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlobDefaultTypeInternal() {}
  union {
    Blob _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlobDefaultTypeInternal _Blob_default_instance_;
constexpr BlobMetadata::BlobMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(nullptr){}
struct BlobMetadataDefaultTypeInternal {
  constexpr BlobMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlobMetadataDefaultTypeInternal() {}
  union {
    BlobMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlobMetadataDefaultTypeInternal _BlobMetadata_default_instance_;
constexpr Binary::Binary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BinaryDefaultTypeInternal {
  constexpr BinaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BinaryDefaultTypeInternal() {}
  union {
    Binary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BinaryDefaultTypeInternal _Binary_default_instance_;
constexpr Schema::Schema(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uri_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(nullptr){}
struct SchemaDefaultTypeInternal {
  constexpr SchemaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaDefaultTypeInternal() {}
  union {
    Schema _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaDefaultTypeInternal _Schema_default_instance_;
constexpr Union::Union(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(nullptr)
  , type_(nullptr){}
struct UnionDefaultTypeInternal {
  constexpr UnionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnionDefaultTypeInternal() {}
  union {
    Union _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnionDefaultTypeInternal _Union_default_instance_;
constexpr StructuredDatasetMetadata::StructuredDatasetMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : structured_dataset_type_(nullptr){}
struct StructuredDatasetMetadataDefaultTypeInternal {
  constexpr StructuredDatasetMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StructuredDatasetMetadataDefaultTypeInternal() {}
  union {
    StructuredDatasetMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StructuredDatasetMetadataDefaultTypeInternal _StructuredDatasetMetadata_default_instance_;
constexpr StructuredDataset::StructuredDataset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uri_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metadata_(nullptr){}
struct StructuredDatasetDefaultTypeInternal {
  constexpr StructuredDatasetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StructuredDatasetDefaultTypeInternal() {}
  union {
    StructuredDataset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StructuredDatasetDefaultTypeInternal _StructuredDataset_default_instance_;
constexpr Scalar::Scalar(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ScalarDefaultTypeInternal {
  constexpr ScalarDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScalarDefaultTypeInternal() {}
  union {
    Scalar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScalarDefaultTypeInternal _Scalar_default_instance_;
constexpr Literal::Literal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct LiteralDefaultTypeInternal {
  constexpr LiteralDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LiteralDefaultTypeInternal() {}
  union {
    Literal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LiteralDefaultTypeInternal _Literal_default_instance_;
constexpr LiteralCollection::LiteralCollection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : literals_(){}
struct LiteralCollectionDefaultTypeInternal {
  constexpr LiteralCollectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LiteralCollectionDefaultTypeInternal() {}
  union {
    LiteralCollection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LiteralCollectionDefaultTypeInternal _LiteralCollection_default_instance_;
constexpr LiteralMap_LiteralsEntry_DoNotUse::LiteralMap_LiteralsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct LiteralMap_LiteralsEntry_DoNotUseDefaultTypeInternal {
  constexpr LiteralMap_LiteralsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LiteralMap_LiteralsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    LiteralMap_LiteralsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LiteralMap_LiteralsEntry_DoNotUseDefaultTypeInternal _LiteralMap_LiteralsEntry_DoNotUse_default_instance_;
constexpr LiteralMap::LiteralMap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : literals_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct LiteralMapDefaultTypeInternal {
  constexpr LiteralMapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LiteralMapDefaultTypeInternal() {}
  union {
    LiteralMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LiteralMapDefaultTypeInternal _LiteralMap_default_instance_;
constexpr BindingDataCollection::BindingDataCollection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bindings_(){}
struct BindingDataCollectionDefaultTypeInternal {
  constexpr BindingDataCollectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BindingDataCollectionDefaultTypeInternal() {}
  union {
    BindingDataCollection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BindingDataCollectionDefaultTypeInternal _BindingDataCollection_default_instance_;
constexpr BindingDataMap_BindingsEntry_DoNotUse::BindingDataMap_BindingsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct BindingDataMap_BindingsEntry_DoNotUseDefaultTypeInternal {
  constexpr BindingDataMap_BindingsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BindingDataMap_BindingsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    BindingDataMap_BindingsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BindingDataMap_BindingsEntry_DoNotUseDefaultTypeInternal _BindingDataMap_BindingsEntry_DoNotUse_default_instance_;
constexpr BindingDataMap::BindingDataMap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bindings_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct BindingDataMapDefaultTypeInternal {
  constexpr BindingDataMapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BindingDataMapDefaultTypeInternal() {}
  union {
    BindingDataMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BindingDataMapDefaultTypeInternal _BindingDataMap_default_instance_;
constexpr UnionInfo::UnionInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : targettype_(nullptr){}
struct UnionInfoDefaultTypeInternal {
  constexpr UnionInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnionInfoDefaultTypeInternal() {}
  union {
    UnionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnionInfoDefaultTypeInternal _UnionInfo_default_instance_;
constexpr BindingData::BindingData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : union__(nullptr)
  , _oneof_case_{}{}
struct BindingDataDefaultTypeInternal {
  constexpr BindingDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BindingDataDefaultTypeInternal() {}
  union {
    BindingData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BindingDataDefaultTypeInternal _BindingData_default_instance_;
constexpr Binding::Binding(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : var_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , binding_(nullptr){}
struct BindingDefaultTypeInternal {
  constexpr BindingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BindingDefaultTypeInternal() {}
  union {
    Binding _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BindingDefaultTypeInternal _Binding_default_instance_;
constexpr KeyValuePair::KeyValuePair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct KeyValuePairDefaultTypeInternal {
  constexpr KeyValuePairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeyValuePairDefaultTypeInternal() {}
  union {
    KeyValuePair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeyValuePairDefaultTypeInternal _KeyValuePair_default_instance_;
constexpr RetryStrategy::RetryStrategy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : retries_(0u){}
struct RetryStrategyDefaultTypeInternal {
  constexpr RetryStrategyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RetryStrategyDefaultTypeInternal() {}
  union {
    RetryStrategy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RetryStrategyDefaultTypeInternal _RetryStrategy_default_instance_;
}  // namespace core
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fcore_2fliterals_2eproto[22];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fcore_2fliterals_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fcore_2fliterals_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fcore_2fliterals_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Primitive, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Primitive, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Primitive, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Void, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Blob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Blob, metadata_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Blob, uri_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::BlobMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::BlobMetadata, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Binary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Binary, value_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Binary, tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Schema, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Schema, uri_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Schema, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Union, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Union, value_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Union, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::StructuredDatasetMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::StructuredDatasetMetadata, structured_dataset_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::StructuredDataset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::StructuredDataset, uri_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::StructuredDataset, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Scalar, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Scalar, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Scalar, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Literal, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Literal, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Literal, hash_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Literal, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::LiteralCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::LiteralCollection, literals_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::LiteralMap_LiteralsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::LiteralMap_LiteralsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::LiteralMap_LiteralsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::LiteralMap_LiteralsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::LiteralMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::LiteralMap, literals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::BindingDataCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::BindingDataCollection, bindings_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::BindingDataMap_BindingsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::BindingDataMap_BindingsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::BindingDataMap_BindingsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::BindingDataMap_BindingsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::BindingDataMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::BindingDataMap, bindings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::UnionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::UnionInfo, targettype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::BindingData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::BindingData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::BindingData, union__),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::BindingData, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Binding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Binding, var_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Binding, binding_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::KeyValuePair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::KeyValuePair, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::KeyValuePair, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::RetryStrategy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::RetryStrategy, retries_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::core::Primitive)},
  { 13, -1, -1, sizeof(::flyteidl::core::Void)},
  { 19, -1, -1, sizeof(::flyteidl::core::Blob)},
  { 27, -1, -1, sizeof(::flyteidl::core::BlobMetadata)},
  { 34, -1, -1, sizeof(::flyteidl::core::Binary)},
  { 42, -1, -1, sizeof(::flyteidl::core::Schema)},
  { 50, -1, -1, sizeof(::flyteidl::core::Union)},
  { 58, -1, -1, sizeof(::flyteidl::core::StructuredDatasetMetadata)},
  { 65, -1, -1, sizeof(::flyteidl::core::StructuredDataset)},
  { 73, -1, -1, sizeof(::flyteidl::core::Scalar)},
  { 89, -1, -1, sizeof(::flyteidl::core::Literal)},
  { 100, -1, -1, sizeof(::flyteidl::core::LiteralCollection)},
  { 107, 115, -1, sizeof(::flyteidl::core::LiteralMap_LiteralsEntry_DoNotUse)},
  { 117, -1, -1, sizeof(::flyteidl::core::LiteralMap)},
  { 124, -1, -1, sizeof(::flyteidl::core::BindingDataCollection)},
  { 131, 139, -1, sizeof(::flyteidl::core::BindingDataMap_BindingsEntry_DoNotUse)},
  { 141, -1, -1, sizeof(::flyteidl::core::BindingDataMap)},
  { 148, -1, -1, sizeof(::flyteidl::core::UnionInfo)},
  { 155, -1, -1, sizeof(::flyteidl::core::BindingData)},
  { 167, -1, -1, sizeof(::flyteidl::core::Binding)},
  { 175, -1, -1, sizeof(::flyteidl::core::KeyValuePair)},
  { 183, -1, -1, sizeof(::flyteidl::core::RetryStrategy)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_Primitive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_Void_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_Blob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_BlobMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_Binary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_Schema_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_Union_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_StructuredDatasetMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_StructuredDataset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_Scalar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_Literal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_LiteralCollection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_LiteralMap_LiteralsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_LiteralMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_BindingDataCollection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_BindingDataMap_BindingsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_BindingDataMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_UnionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_BindingData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_Binding_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_KeyValuePair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_RetryStrategy_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fcore_2fliterals_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034flyteidl/core/literals.proto\022\rflyteidl"
  ".core\032\037google/protobuf/timestamp.proto\032\036"
  "google/protobuf/duration.proto\032\034google/p"
  "rotobuf/struct.proto\032\031flyteidl/core/type"
  "s.proto\"\207\002\n\tPrimitive\022\032\n\007integer\030\001 \001(\003H\000"
  "R\007integer\022!\n\013float_value\030\002 \001(\001H\000R\nfloatV"
  "alue\022#\n\014string_value\030\003 \001(\tH\000R\013stringValu"
  "e\022\032\n\007boolean\030\004 \001(\010H\000R\007boolean\0228\n\010datetim"
  "e\030\005 \001(\0132\032.google.protobuf.TimestampH\000R\010d"
  "atetime\0227\n\010duration\030\006 \001(\0132\031.google.proto"
  "buf.DurationH\000R\010durationB\007\n\005value\"\006\n\004Voi"
  "d\"Q\n\004Blob\0227\n\010metadata\030\001 \001(\0132\033.flyteidl.c"
  "ore.BlobMetadataR\010metadata\022\020\n\003uri\030\003 \001(\tR"
  "\003uri\";\n\014BlobMetadata\022+\n\004type\030\001 \001(\0132\027.fly"
  "teidl.core.BlobTypeR\004type\"0\n\006Binary\022\024\n\005v"
  "alue\030\001 \001(\014R\005value\022\020\n\003tag\030\002 \001(\tR\003tag\"I\n\006S"
  "chema\022\020\n\003uri\030\001 \001(\tR\003uri\022-\n\004type\030\003 \001(\0132\031."
  "flyteidl.core.SchemaTypeR\004type\"e\n\005Union\022"
  ",\n\005value\030\001 \001(\0132\026.flyteidl.core.LiteralR\005"
  "value\022.\n\004type\030\002 \001(\0132\032.flyteidl.core.Lite"
  "ralTypeR\004type\"y\n\031StructuredDatasetMetada"
  "ta\022\\\n\027structured_dataset_type\030\001 \001(\0132$.fl"
  "yteidl.core.StructuredDatasetTypeR\025struc"
  "turedDatasetType\"k\n\021StructuredDataset\022\020\n"
  "\003uri\030\001 \001(\tR\003uri\022D\n\010metadata\030\002 \001(\0132(.flyt"
  "eidl.core.StructuredDatasetMetadataR\010met"
  "adata\"\360\003\n\006Scalar\0228\n\tprimitive\030\001 \001(\0132\030.fl"
  "yteidl.core.PrimitiveH\000R\tprimitive\022)\n\004bl"
  "ob\030\002 \001(\0132\023.flyteidl.core.BlobH\000R\004blob\022/\n"
  "\006binary\030\003 \001(\0132\025.flyteidl.core.BinaryH\000R\006"
  "binary\022/\n\006schema\030\004 \001(\0132\025.flyteidl.core.S"
  "chemaH\000R\006schema\0222\n\tnone_type\030\005 \001(\0132\023.fly"
  "teidl.core.VoidH\000R\010noneType\022,\n\005error\030\006 \001"
  "(\0132\024.flyteidl.core.ErrorH\000R\005error\0223\n\007gen"
  "eric\030\007 \001(\0132\027.google.protobuf.StructH\000R\007g"
  "eneric\022Q\n\022structured_dataset\030\010 \001(\0132 .fly"
  "teidl.core.StructuredDatasetH\000R\021structur"
  "edDataset\022,\n\005union\030\t \001(\0132\024.flyteidl.core"
  ".UnionH\000R\005unionB\007\n\005value\"\312\001\n\007Literal\022/\n\006"
  "scalar\030\001 \001(\0132\025.flyteidl.core.ScalarH\000R\006s"
  "calar\022B\n\ncollection\030\002 \001(\0132 .flyteidl.cor"
  "e.LiteralCollectionH\000R\ncollection\022-\n\003map"
  "\030\003 \001(\0132\031.flyteidl.core.LiteralMapH\000R\003map"
  "\022\022\n\004hash\030\004 \001(\tR\004hashB\007\n\005value\"G\n\021Literal"
  "Collection\0222\n\010literals\030\001 \003(\0132\026.flyteidl."
  "core.LiteralR\010literals\"\246\001\n\nLiteralMap\022C\n"
  "\010literals\030\001 \003(\0132\'.flyteidl.core.LiteralM"
  "ap.LiteralsEntryR\010literals\032S\n\rLiteralsEn"
  "try\022\020\n\003key\030\001 \001(\tR\003key\022,\n\005value\030\002 \001(\0132\026.f"
  "lyteidl.core.LiteralR\005value:\0028\001\"O\n\025Bindi"
  "ngDataCollection\0226\n\010bindings\030\001 \003(\0132\032.fly"
  "teidl.core.BindingDataR\010bindings\"\262\001\n\016Bin"
  "dingDataMap\022G\n\010bindings\030\001 \003(\0132+.flyteidl"
  ".core.BindingDataMap.BindingsEntryR\010bind"
  "ings\032W\n\rBindingsEntry\022\020\n\003key\030\001 \001(\tR\003key\022"
  "0\n\005value\030\002 \001(\0132\032.flyteidl.core.BindingDa"
  "taR\005value:\0028\001\"G\n\tUnionInfo\022:\n\ntargetType"
  "\030\001 \001(\0132\032.flyteidl.core.LiteralTypeR\ntarg"
  "etType\"\256\002\n\013BindingData\022/\n\006scalar\030\001 \001(\0132\025"
  ".flyteidl.core.ScalarH\000R\006scalar\022F\n\ncolle"
  "ction\030\002 \001(\0132$.flyteidl.core.BindingDataC"
  "ollectionH\000R\ncollection\022:\n\007promise\030\003 \001(\013"
  "2\036.flyteidl.core.OutputReferenceH\000R\007prom"
  "ise\0221\n\003map\030\004 \001(\0132\035.flyteidl.core.Binding"
  "DataMapH\000R\003map\022.\n\005union\030\005 \001(\0132\030.flyteidl"
  ".core.UnionInfoR\005unionB\007\n\005value\"Q\n\007Bindi"
  "ng\022\020\n\003var\030\001 \001(\tR\003var\0224\n\007binding\030\002 \001(\0132\032."
  "flyteidl.core.BindingDataR\007binding\"6\n\014Ke"
  "yValuePair\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 "
  "\001(\tR\005value\")\n\rRetryStrategy\022\030\n\007retries\030\005"
  " \001(\rR\007retriesB\260\001\n\021com.flyteidl.coreB\rLit"
  "eralsProtoH\002Z4github.com/flyteorg/flytei"
  "dl/gen/pb-go/flyteidl/core\370\001\000\242\002\003FCX\252\002\rFl"
  "yteidl.Core\312\002\rFlyteidl\\Core\342\002\031Flyteidl\\C"
  "ore\\GPBMetadata\352\002\016Flyteidl::Coreb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flyteidl_2fcore_2fliterals_2eproto_deps[4] = {
  &::descriptor_table_flyteidl_2fcore_2ftypes_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fcore_2fliterals_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fcore_2fliterals_2eproto = {
  false, false, 3000, descriptor_table_protodef_flyteidl_2fcore_2fliterals_2eproto, "flyteidl/core/literals.proto", 
  &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_once, descriptor_table_flyteidl_2fcore_2fliterals_2eproto_deps, 4, 22,
  schemas, file_default_instances, TableStruct_flyteidl_2fcore_2fliterals_2eproto::offsets,
  file_level_metadata_flyteidl_2fcore_2fliterals_2eproto, file_level_enum_descriptors_flyteidl_2fcore_2fliterals_2eproto, file_level_service_descriptors_flyteidl_2fcore_2fliterals_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fcore_2fliterals_2eproto_getter() {
  return &descriptor_table_flyteidl_2fcore_2fliterals_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fcore_2fliterals_2eproto(&descriptor_table_flyteidl_2fcore_2fliterals_2eproto);
namespace flyteidl {
namespace core {

// ===================================================================

class Primitive::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& datetime(const Primitive* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& duration(const Primitive* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Primitive::_Internal::datetime(const Primitive* msg) {
  return *msg->value_.datetime_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
Primitive::_Internal::duration(const Primitive* msg) {
  return *msg->value_.duration_;
}
void Primitive::set_allocated_datetime(::PROTOBUF_NAMESPACE_ID::Timestamp* datetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (datetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(datetime));
    if (message_arena != submessage_arena) {
      datetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datetime, submessage_arena);
    }
    set_has_datetime();
    value_.datetime_ = datetime;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Primitive.datetime)
}
void Primitive::clear_datetime() {
  if (_internal_has_datetime()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.datetime_;
    }
    clear_has_value();
  }
}
void Primitive::set_allocated_duration(::PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration));
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    set_has_duration();
    value_.duration_ = duration;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Primitive.duration)
}
void Primitive::clear_duration() {
  if (_internal_has_duration()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.duration_;
    }
    clear_has_value();
  }
}
Primitive::Primitive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.Primitive)
}
Primitive::Primitive(const Primitive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kInteger: {
      _internal_set_integer(from._internal_integer());
      break;
    }
    case kFloatValue: {
      _internal_set_float_value(from._internal_float_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kBoolean: {
      _internal_set_boolean(from._internal_boolean());
      break;
    }
    case kDatetime: {
      _internal_mutable_datetime()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_datetime());
      break;
    }
    case kDuration: {
      _internal_mutable_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_duration());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Primitive)
}

inline void Primitive::SharedCtor() {
clear_has_value();
}

Primitive::~Primitive() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Primitive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Primitive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void Primitive::ArenaDtor(void* object) {
  Primitive* _this = reinterpret_cast< Primitive* >(object);
  (void)_this;
}
void Primitive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Primitive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Primitive::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.Primitive)
  switch (value_case()) {
    case kInteger: {
      // No need to clear
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      value_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kBoolean: {
      // No need to clear
      break;
    }
    case kDatetime: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.datetime_;
      }
      break;
    }
    case kDuration: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.duration_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Primitive::InternalSwap(Primitive* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Primitive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fliterals_2eproto[0]);
}

// ===================================================================

class Void::_Internal {
 public:
};

Void::Void(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.Void)
}
Void::Void(const Void& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Void)
}



::PROTOBUF_NAMESPACE_ID::Metadata Void::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fliterals_2eproto[1]);
}

// ===================================================================

class Blob::_Internal {
 public:
  static const ::flyteidl::core::BlobMetadata& metadata(const Blob* msg);
};

const ::flyteidl::core::BlobMetadata&
Blob::_Internal::metadata(const Blob* msg) {
  return *msg->metadata_;
}
Blob::Blob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.Blob)
}
Blob::Blob(const Blob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uri(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::flyteidl::core::BlobMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Blob)
}

inline void Blob::SharedCtor() {
uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
metadata_ = nullptr;
}

Blob::~Blob() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Blob)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Blob::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
}

void Blob::ArenaDtor(void* object) {
  Blob* _this = reinterpret_cast< Blob* >(object);
  (void)_this;
}
void Blob::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Blob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Blob::InternalSwap(Blob* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Blob::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fliterals_2eproto[2]);
}

// ===================================================================

class BlobMetadata::_Internal {
 public:
  static const ::flyteidl::core::BlobType& type(const BlobMetadata* msg);
};

const ::flyteidl::core::BlobType&
BlobMetadata::_Internal::type(const BlobMetadata* msg) {
  return *msg->type_;
}
void BlobMetadata::clear_type() {
  if (GetArenaForAllocation() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
BlobMetadata::BlobMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.BlobMetadata)
}
BlobMetadata::BlobMetadata(const BlobMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_type()) {
    type_ = new ::flyteidl::core::BlobType(*from.type_);
  } else {
    type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.BlobMetadata)
}

inline void BlobMetadata::SharedCtor() {
type_ = nullptr;
}

BlobMetadata::~BlobMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.core.BlobMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlobMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete type_;
}

void BlobMetadata::ArenaDtor(void* object) {
  BlobMetadata* _this = reinterpret_cast< BlobMetadata* >(object);
  (void)_this;
}
void BlobMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlobMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlobMetadata::InternalSwap(BlobMetadata* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata BlobMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fliterals_2eproto[3]);
}

// ===================================================================

class Binary::_Internal {
 public:
};

Binary::Binary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.Binary)
}
Binary::Binary(const Binary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag().empty()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Binary)
}

inline void Binary::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Binary::~Binary() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Binary)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Binary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Binary::ArenaDtor(void* object) {
  Binary* _this = reinterpret_cast< Binary* >(object);
  (void)_this;
}
void Binary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Binary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Binary::InternalSwap(Binary* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Binary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fliterals_2eproto[4]);
}

// ===================================================================

class Schema::_Internal {
 public:
  static const ::flyteidl::core::SchemaType& type(const Schema* msg);
};

const ::flyteidl::core::SchemaType&
Schema::_Internal::type(const Schema* msg) {
  return *msg->type_;
}
void Schema::clear_type() {
  if (GetArenaForAllocation() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
Schema::Schema(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.Schema)
}
Schema::Schema(const Schema& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uri(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_type()) {
    type_ = new ::flyteidl::core::SchemaType(*from.type_);
  } else {
    type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Schema)
}

inline void Schema::SharedCtor() {
uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = nullptr;
}

Schema::~Schema() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Schema)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Schema::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
}

void Schema::ArenaDtor(void* object) {
  Schema* _this = reinterpret_cast< Schema* >(object);
  (void)_this;
}
void Schema::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Schema::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Schema::InternalSwap(Schema* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Schema::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fliterals_2eproto[5]);
}

// ===================================================================

class Union::_Internal {
 public:
  static const ::flyteidl::core::Literal& value(const Union* msg);
  static const ::flyteidl::core::LiteralType& type(const Union* msg);
};

const ::flyteidl::core::Literal&
Union::_Internal::value(const Union* msg) {
  return *msg->value_;
}
const ::flyteidl::core::LiteralType&
Union::_Internal::type(const Union* msg) {
  return *msg->type_;
}
void Union::clear_type() {
  if (GetArenaForAllocation() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
Union::Union(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.Union)
}
Union::Union(const Union& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::flyteidl::core::Literal(*from.value_);
  } else {
    value_ = nullptr;
  }
  if (from._internal_has_type()) {
    type_ = new ::flyteidl::core::LiteralType(*from.type_);
  } else {
    type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Union)
}

inline void Union::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&value_)) + sizeof(type_));
}

Union::~Union() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Union)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Union::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete type_;
}

void Union::ArenaDtor(void* object) {
  Union* _this = reinterpret_cast< Union* >(object);
  (void)_this;
}
void Union::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Union::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Union::InternalSwap(Union* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Union::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fliterals_2eproto[6]);
}

// ===================================================================

class StructuredDatasetMetadata::_Internal {
 public:
  static const ::flyteidl::core::StructuredDatasetType& structured_dataset_type(const StructuredDatasetMetadata* msg);
};

const ::flyteidl::core::StructuredDatasetType&
StructuredDatasetMetadata::_Internal::structured_dataset_type(const StructuredDatasetMetadata* msg) {
  return *msg->structured_dataset_type_;
}
void StructuredDatasetMetadata::clear_structured_dataset_type() {
  if (GetArenaForAllocation() == nullptr && structured_dataset_type_ != nullptr) {
    delete structured_dataset_type_;
  }
  structured_dataset_type_ = nullptr;
}
StructuredDatasetMetadata::StructuredDatasetMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.StructuredDatasetMetadata)
}
StructuredDatasetMetadata::StructuredDatasetMetadata(const StructuredDatasetMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_structured_dataset_type()) {
    structured_dataset_type_ = new ::flyteidl::core::StructuredDatasetType(*from.structured_dataset_type_);
  } else {
    structured_dataset_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.StructuredDatasetMetadata)
}

inline void StructuredDatasetMetadata::SharedCtor() {
structured_dataset_type_ = nullptr;
}

StructuredDatasetMetadata::~StructuredDatasetMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.core.StructuredDatasetMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StructuredDatasetMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete structured_dataset_type_;
}

void StructuredDatasetMetadata::ArenaDtor(void* object) {
  StructuredDatasetMetadata* _this = reinterpret_cast< StructuredDatasetMetadata* >(object);
  (void)_this;
}
void StructuredDatasetMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StructuredDatasetMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StructuredDatasetMetadata::InternalSwap(StructuredDatasetMetadata* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata StructuredDatasetMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fliterals_2eproto[7]);
}

// ===================================================================

class StructuredDataset::_Internal {
 public:
  static const ::flyteidl::core::StructuredDatasetMetadata& metadata(const StructuredDataset* msg);
};

const ::flyteidl::core::StructuredDatasetMetadata&
StructuredDataset::_Internal::metadata(const StructuredDataset* msg) {
  return *msg->metadata_;
}
StructuredDataset::StructuredDataset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.StructuredDataset)
}
StructuredDataset::StructuredDataset(const StructuredDataset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uri(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::flyteidl::core::StructuredDatasetMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.StructuredDataset)
}

inline void StructuredDataset::SharedCtor() {
uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
metadata_ = nullptr;
}

StructuredDataset::~StructuredDataset() {
  // @@protoc_insertion_point(destructor:flyteidl.core.StructuredDataset)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StructuredDataset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
}

void StructuredDataset::ArenaDtor(void* object) {
  StructuredDataset* _this = reinterpret_cast< StructuredDataset* >(object);
  (void)_this;
}
void StructuredDataset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StructuredDataset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StructuredDataset::InternalSwap(StructuredDataset* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata StructuredDataset::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fliterals_2eproto[8]);
}

// ===================================================================

class Scalar::_Internal {
 public:
  static const ::flyteidl::core::Primitive& primitive(const Scalar* msg);
  static const ::flyteidl::core::Blob& blob(const Scalar* msg);
  static const ::flyteidl::core::Binary& binary(const Scalar* msg);
  static const ::flyteidl::core::Schema& schema(const Scalar* msg);
  static const ::flyteidl::core::Void& none_type(const Scalar* msg);
  static const ::flyteidl::core::Error& error(const Scalar* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& generic(const Scalar* msg);
  static const ::flyteidl::core::StructuredDataset& structured_dataset(const Scalar* msg);
  static const ::flyteidl::core::Union& union_(const Scalar* msg);
};

const ::flyteidl::core::Primitive&
Scalar::_Internal::primitive(const Scalar* msg) {
  return *msg->value_.primitive_;
}
const ::flyteidl::core::Blob&
Scalar::_Internal::blob(const Scalar* msg) {
  return *msg->value_.blob_;
}
const ::flyteidl::core::Binary&
Scalar::_Internal::binary(const Scalar* msg) {
  return *msg->value_.binary_;
}
const ::flyteidl::core::Schema&
Scalar::_Internal::schema(const Scalar* msg) {
  return *msg->value_.schema_;
}
const ::flyteidl::core::Void&
Scalar::_Internal::none_type(const Scalar* msg) {
  return *msg->value_.none_type_;
}
const ::flyteidl::core::Error&
Scalar::_Internal::error(const Scalar* msg) {
  return *msg->value_.error_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
Scalar::_Internal::generic(const Scalar* msg) {
  return *msg->value_.generic_;
}
const ::flyteidl::core::StructuredDataset&
Scalar::_Internal::structured_dataset(const Scalar* msg) {
  return *msg->value_.structured_dataset_;
}
const ::flyteidl::core::Union&
Scalar::_Internal::union_(const Scalar* msg) {
  return *msg->value_.union__;
}
void Scalar::set_allocated_primitive(::flyteidl::core::Primitive* primitive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (primitive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::Primitive>::GetOwningArena(primitive);
    if (message_arena != submessage_arena) {
      primitive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, primitive, submessage_arena);
    }
    set_has_primitive();
    value_.primitive_ = primitive;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Scalar.primitive)
}
void Scalar::set_allocated_blob(::flyteidl::core::Blob* blob) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (blob) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::Blob>::GetOwningArena(blob);
    if (message_arena != submessage_arena) {
      blob = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blob, submessage_arena);
    }
    set_has_blob();
    value_.blob_ = blob;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Scalar.blob)
}
void Scalar::set_allocated_binary(::flyteidl::core::Binary* binary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (binary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::Binary>::GetOwningArena(binary);
    if (message_arena != submessage_arena) {
      binary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binary, submessage_arena);
    }
    set_has_binary();
    value_.binary_ = binary;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Scalar.binary)
}
void Scalar::set_allocated_schema(::flyteidl::core::Schema* schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::Schema>::GetOwningArena(schema);
    if (message_arena != submessage_arena) {
      schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema, submessage_arena);
    }
    set_has_schema();
    value_.schema_ = schema;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Scalar.schema)
}
void Scalar::set_allocated_none_type(::flyteidl::core::Void* none_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (none_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::Void>::GetOwningArena(none_type);
    if (message_arena != submessage_arena) {
      none_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, none_type, submessage_arena);
    }
    set_has_none_type();
    value_.none_type_ = none_type;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Scalar.none_type)
}
void Scalar::set_allocated_error(::flyteidl::core::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    value_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Scalar.error)
}
void Scalar::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.error_;
    }
    clear_has_value();
  }
}
void Scalar::set_allocated_generic(::PROTOBUF_NAMESPACE_ID::Struct* generic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (generic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(generic));
    if (message_arena != submessage_arena) {
      generic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generic, submessage_arena);
    }
    set_has_generic();
    value_.generic_ = generic;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Scalar.generic)
}
void Scalar::clear_generic() {
  if (_internal_has_generic()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.generic_;
    }
    clear_has_value();
  }
}
void Scalar::set_allocated_structured_dataset(::flyteidl::core::StructuredDataset* structured_dataset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (structured_dataset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::StructuredDataset>::GetOwningArena(structured_dataset);
    if (message_arena != submessage_arena) {
      structured_dataset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, structured_dataset, submessage_arena);
    }
    set_has_structured_dataset();
    value_.structured_dataset_ = structured_dataset;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Scalar.structured_dataset)
}
void Scalar::set_allocated_union_(::flyteidl::core::Union* union_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (union_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::Union>::GetOwningArena(union_);
    if (message_arena != submessage_arena) {
      union_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, union_, submessage_arena);
    }
    set_has_union_();
    value_.union__ = union_;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Scalar.union)
}
Scalar::Scalar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.Scalar)
}
Scalar::Scalar(const Scalar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kPrimitive: {
      _internal_mutable_primitive()->::flyteidl::core::Primitive::MergeFrom(from._internal_primitive());
      break;
    }
    case kBlob: {
      _internal_mutable_blob()->::flyteidl::core::Blob::MergeFrom(from._internal_blob());
      break;
    }
    case kBinary: {
      _internal_mutable_binary()->::flyteidl::core::Binary::MergeFrom(from._internal_binary());
      break;
    }
    case kSchema: {
      _internal_mutable_schema()->::flyteidl::core::Schema::MergeFrom(from._internal_schema());
      break;
    }
    case kNoneType: {
      _internal_mutable_none_type()->::flyteidl::core::Void::MergeFrom(from._internal_none_type());
      break;
    }
    case kError: {
      _internal_mutable_error()->::flyteidl::core::Error::MergeFrom(from._internal_error());
      break;
    }
    case kGeneric: {
      _internal_mutable_generic()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_generic());
      break;
    }
    case kStructuredDataset: {
      _internal_mutable_structured_dataset()->::flyteidl::core::StructuredDataset::MergeFrom(from._internal_structured_dataset());
      break;
    }
    case kUnion: {
      _internal_mutable_union_()->::flyteidl::core::Union::MergeFrom(from._internal_union_());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Scalar)
}

inline void Scalar::SharedCtor() {
clear_has_value();
}

Scalar::~Scalar() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Scalar)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Scalar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void Scalar::ArenaDtor(void* object) {
  Scalar* _this = reinterpret_cast< Scalar* >(object);
  (void)_this;
}
void Scalar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Scalar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Scalar::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.Scalar)
  switch (value_case()) {
    case kPrimitive: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.primitive_;
      }
      break;
    }
    case kBlob: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.blob_;
      }
      break;
    }
    case kBinary: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.binary_;
      }
      break;
    }
    case kSchema: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.schema_;
      }
      break;
    }
    case kNoneType: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.none_type_;
      }
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.error_;
      }
      break;
    }
    case kGeneric: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.generic_;
      }
      break;
    }
    case kStructuredDataset: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.structured_dataset_;
      }
      break;
    }
    case kUnion: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.union__;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Scalar::InternalSwap(Scalar* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Scalar::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fliterals_2eproto[9]);
}

// ===================================================================

class Literal::_Internal {
 public:
  static const ::flyteidl::core::Scalar& scalar(const Literal* msg);
  static const ::flyteidl::core::LiteralCollection& collection(const Literal* msg);
  static const ::flyteidl::core::LiteralMap& map(const Literal* msg);
};

const ::flyteidl::core::Scalar&
Literal::_Internal::scalar(const Literal* msg) {
  return *msg->value_.scalar_;
}
const ::flyteidl::core::LiteralCollection&
Literal::_Internal::collection(const Literal* msg) {
  return *msg->value_.collection_;
}
const ::flyteidl::core::LiteralMap&
Literal::_Internal::map(const Literal* msg) {
  return *msg->value_.map_;
}
void Literal::set_allocated_scalar(::flyteidl::core::Scalar* scalar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (scalar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::Scalar>::GetOwningArena(scalar);
    if (message_arena != submessage_arena) {
      scalar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalar, submessage_arena);
    }
    set_has_scalar();
    value_.scalar_ = scalar;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Literal.scalar)
}
void Literal::set_allocated_collection(::flyteidl::core::LiteralCollection* collection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (collection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::LiteralCollection>::GetOwningArena(collection);
    if (message_arena != submessage_arena) {
      collection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collection, submessage_arena);
    }
    set_has_collection();
    value_.collection_ = collection;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Literal.collection)
}
void Literal::set_allocated_map(::flyteidl::core::LiteralMap* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::LiteralMap>::GetOwningArena(map);
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    set_has_map();
    value_.map_ = map;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Literal.map)
}
Literal::Literal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.Literal)
}
Literal::Literal(const Literal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArenaForAllocation());
  }
  clear_has_value();
  switch (from.value_case()) {
    case kScalar: {
      _internal_mutable_scalar()->::flyteidl::core::Scalar::MergeFrom(from._internal_scalar());
      break;
    }
    case kCollection: {
      _internal_mutable_collection()->::flyteidl::core::LiteralCollection::MergeFrom(from._internal_collection());
      break;
    }
    case kMap: {
      _internal_mutable_map()->::flyteidl::core::LiteralMap::MergeFrom(from._internal_map());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Literal)
}

inline void Literal::SharedCtor() {
hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_value();
}

Literal::~Literal() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Literal)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Literal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_value()) {
    clear_value();
  }
}

void Literal::ArenaDtor(void* object) {
  Literal* _this = reinterpret_cast< Literal* >(object);
  (void)_this;
}
void Literal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Literal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Literal::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.Literal)
  switch (value_case()) {
    case kScalar: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.scalar_;
      }
      break;
    }
    case kCollection: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.collection_;
      }
      break;
    }
    case kMap: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.map_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Literal::InternalSwap(Literal* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Literal::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fliterals_2eproto[10]);
}

// ===================================================================

class LiteralCollection::_Internal {
 public:
};

LiteralCollection::LiteralCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  literals_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.LiteralCollection)
}
LiteralCollection::LiteralCollection(const LiteralCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      literals_(from.literals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.LiteralCollection)
}

inline void LiteralCollection::SharedCtor() {
}

LiteralCollection::~LiteralCollection() {
  // @@protoc_insertion_point(destructor:flyteidl.core.LiteralCollection)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LiteralCollection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LiteralCollection::ArenaDtor(void* object) {
  LiteralCollection* _this = reinterpret_cast< LiteralCollection* >(object);
  (void)_this;
}
void LiteralCollection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiteralCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LiteralCollection::InternalSwap(LiteralCollection* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata LiteralCollection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fliterals_2eproto[11]);
}

// ===================================================================

LiteralMap_LiteralsEntry_DoNotUse::LiteralMap_LiteralsEntry_DoNotUse() {}
LiteralMap_LiteralsEntry_DoNotUse::LiteralMap_LiteralsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LiteralMap_LiteralsEntry_DoNotUse::MergeFrom(const LiteralMap_LiteralsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LiteralMap_LiteralsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fliterals_2eproto[12]);
}

// ===================================================================

class LiteralMap::_Internal {
 public:
};

LiteralMap::LiteralMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  literals_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.LiteralMap)
}
LiteralMap::LiteralMap(const LiteralMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  literals_.MergeFrom(from.literals_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.LiteralMap)
}

inline void LiteralMap::SharedCtor() {
}

LiteralMap::~LiteralMap() {
  // @@protoc_insertion_point(destructor:flyteidl.core.LiteralMap)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LiteralMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LiteralMap::ArenaDtor(void* object) {
  LiteralMap* _this = reinterpret_cast< LiteralMap* >(object);
  (void)_this;
  _this->literals_. ~MapField();
}
inline void LiteralMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &LiteralMap::ArenaDtor);
  }
}
void LiteralMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LiteralMap::InternalSwap(LiteralMap* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata LiteralMap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fliterals_2eproto[13]);
}

// ===================================================================

class BindingDataCollection::_Internal {
 public:
};

BindingDataCollection::BindingDataCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bindings_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.BindingDataCollection)
}
BindingDataCollection::BindingDataCollection(const BindingDataCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bindings_(from.bindings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.BindingDataCollection)
}

inline void BindingDataCollection::SharedCtor() {
}

BindingDataCollection::~BindingDataCollection() {
  // @@protoc_insertion_point(destructor:flyteidl.core.BindingDataCollection)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BindingDataCollection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BindingDataCollection::ArenaDtor(void* object) {
  BindingDataCollection* _this = reinterpret_cast< BindingDataCollection* >(object);
  (void)_this;
}
void BindingDataCollection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BindingDataCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BindingDataCollection::InternalSwap(BindingDataCollection* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata BindingDataCollection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fliterals_2eproto[14]);
}

// ===================================================================

BindingDataMap_BindingsEntry_DoNotUse::BindingDataMap_BindingsEntry_DoNotUse() {}
BindingDataMap_BindingsEntry_DoNotUse::BindingDataMap_BindingsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void BindingDataMap_BindingsEntry_DoNotUse::MergeFrom(const BindingDataMap_BindingsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata BindingDataMap_BindingsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fliterals_2eproto[15]);
}

// ===================================================================

class BindingDataMap::_Internal {
 public:
};

BindingDataMap::BindingDataMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bindings_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.BindingDataMap)
}
BindingDataMap::BindingDataMap(const BindingDataMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bindings_.MergeFrom(from.bindings_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.BindingDataMap)
}

inline void BindingDataMap::SharedCtor() {
}

BindingDataMap::~BindingDataMap() {
  // @@protoc_insertion_point(destructor:flyteidl.core.BindingDataMap)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BindingDataMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BindingDataMap::ArenaDtor(void* object) {
  BindingDataMap* _this = reinterpret_cast< BindingDataMap* >(object);
  (void)_this;
  _this->bindings_. ~MapField();
}
inline void BindingDataMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &BindingDataMap::ArenaDtor);
  }
}
void BindingDataMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BindingDataMap::InternalSwap(BindingDataMap* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata BindingDataMap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fliterals_2eproto[16]);
}

// ===================================================================

class UnionInfo::_Internal {
 public:
  static const ::flyteidl::core::LiteralType& targettype(const UnionInfo* msg);
};

const ::flyteidl::core::LiteralType&
UnionInfo::_Internal::targettype(const UnionInfo* msg) {
  return *msg->targettype_;
}
void UnionInfo::clear_targettype() {
  if (GetArenaForAllocation() == nullptr && targettype_ != nullptr) {
    delete targettype_;
  }
  targettype_ = nullptr;
}
UnionInfo::UnionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.UnionInfo)
}
UnionInfo::UnionInfo(const UnionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_targettype()) {
    targettype_ = new ::flyteidl::core::LiteralType(*from.targettype_);
  } else {
    targettype_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.UnionInfo)
}

inline void UnionInfo::SharedCtor() {
targettype_ = nullptr;
}

UnionInfo::~UnionInfo() {
  // @@protoc_insertion_point(destructor:flyteidl.core.UnionInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UnionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete targettype_;
}

void UnionInfo::ArenaDtor(void* object) {
  UnionInfo* _this = reinterpret_cast< UnionInfo* >(object);
  (void)_this;
}
void UnionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnionInfo::InternalSwap(UnionInfo* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata UnionInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fliterals_2eproto[17]);
}

// ===================================================================

class BindingData::_Internal {
 public:
  static const ::flyteidl::core::Scalar& scalar(const BindingData* msg);
  static const ::flyteidl::core::BindingDataCollection& collection(const BindingData* msg);
  static const ::flyteidl::core::OutputReference& promise(const BindingData* msg);
  static const ::flyteidl::core::BindingDataMap& map(const BindingData* msg);
  static const ::flyteidl::core::UnionInfo& union_(const BindingData* msg);
};

const ::flyteidl::core::Scalar&
BindingData::_Internal::scalar(const BindingData* msg) {
  return *msg->value_.scalar_;
}
const ::flyteidl::core::BindingDataCollection&
BindingData::_Internal::collection(const BindingData* msg) {
  return *msg->value_.collection_;
}
const ::flyteidl::core::OutputReference&
BindingData::_Internal::promise(const BindingData* msg) {
  return *msg->value_.promise_;
}
const ::flyteidl::core::BindingDataMap&
BindingData::_Internal::map(const BindingData* msg) {
  return *msg->value_.map_;
}
const ::flyteidl::core::UnionInfo&
BindingData::_Internal::union_(const BindingData* msg) {
  return *msg->union__;
}
void BindingData::set_allocated_scalar(::flyteidl::core::Scalar* scalar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (scalar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::Scalar>::GetOwningArena(scalar);
    if (message_arena != submessage_arena) {
      scalar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalar, submessage_arena);
    }
    set_has_scalar();
    value_.scalar_ = scalar;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.BindingData.scalar)
}
void BindingData::set_allocated_collection(::flyteidl::core::BindingDataCollection* collection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (collection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::BindingDataCollection>::GetOwningArena(collection);
    if (message_arena != submessage_arena) {
      collection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collection, submessage_arena);
    }
    set_has_collection();
    value_.collection_ = collection;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.BindingData.collection)
}
void BindingData::set_allocated_promise(::flyteidl::core::OutputReference* promise) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (promise) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(promise));
    if (message_arena != submessage_arena) {
      promise = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, promise, submessage_arena);
    }
    set_has_promise();
    value_.promise_ = promise;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.BindingData.promise)
}
void BindingData::clear_promise() {
  if (_internal_has_promise()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.promise_;
    }
    clear_has_value();
  }
}
void BindingData::set_allocated_map(::flyteidl::core::BindingDataMap* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::BindingDataMap>::GetOwningArena(map);
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    set_has_map();
    value_.map_ = map;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.BindingData.map)
}
BindingData::BindingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.BindingData)
}
BindingData::BindingData(const BindingData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_union_()) {
    union__ = new ::flyteidl::core::UnionInfo(*from.union__);
  } else {
    union__ = nullptr;
  }
  clear_has_value();
  switch (from.value_case()) {
    case kScalar: {
      _internal_mutable_scalar()->::flyteidl::core::Scalar::MergeFrom(from._internal_scalar());
      break;
    }
    case kCollection: {
      _internal_mutable_collection()->::flyteidl::core::BindingDataCollection::MergeFrom(from._internal_collection());
      break;
    }
    case kPromise: {
      _internal_mutable_promise()->::flyteidl::core::OutputReference::MergeFrom(from._internal_promise());
      break;
    }
    case kMap: {
      _internal_mutable_map()->::flyteidl::core::BindingDataMap::MergeFrom(from._internal_map());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.BindingData)
}

inline void BindingData::SharedCtor() {
union__ = nullptr;
clear_has_value();
}

BindingData::~BindingData() {
  // @@protoc_insertion_point(destructor:flyteidl.core.BindingData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BindingData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete union__;
  if (has_value()) {
    clear_value();
  }
}

void BindingData::ArenaDtor(void* object) {
  BindingData* _this = reinterpret_cast< BindingData* >(object);
  (void)_this;
}
void BindingData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BindingData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BindingData::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.BindingData)
  switch (value_case()) {
    case kScalar: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.scalar_;
      }
      break;
    }
    case kCollection: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.collection_;
      }
      break;
    }
    case kPromise: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.promise_;
      }
      break;
    }
    case kMap: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.map_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void BindingData::InternalSwap(BindingData* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata BindingData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fliterals_2eproto[18]);
}

// ===================================================================

class Binding::_Internal {
 public:
  static const ::flyteidl::core::BindingData& binding(const Binding* msg);
};

const ::flyteidl::core::BindingData&
Binding::_Internal::binding(const Binding* msg) {
  return *msg->binding_;
}
Binding::Binding(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.Binding)
}
Binding::Binding(const Binding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  var_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    var_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var().empty()) {
    var_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_var(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_binding()) {
    binding_ = new ::flyteidl::core::BindingData(*from.binding_);
  } else {
    binding_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Binding)
}

inline void Binding::SharedCtor() {
var_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  var_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
binding_ = nullptr;
}

Binding::~Binding() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Binding)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Binding::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  var_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete binding_;
}

void Binding::ArenaDtor(void* object) {
  Binding* _this = reinterpret_cast< Binding* >(object);
  (void)_this;
}
void Binding::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Binding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Binding::InternalSwap(Binding* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Binding::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fliterals_2eproto[19]);
}

// ===================================================================

class KeyValuePair::_Internal {
 public:
};

KeyValuePair::KeyValuePair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.KeyValuePair)
}
KeyValuePair::KeyValuePair(const KeyValuePair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.KeyValuePair)
}

inline void KeyValuePair::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KeyValuePair::~KeyValuePair() {
  // @@protoc_insertion_point(destructor:flyteidl.core.KeyValuePair)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KeyValuePair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeyValuePair::ArenaDtor(void* object) {
  KeyValuePair* _this = reinterpret_cast< KeyValuePair* >(object);
  (void)_this;
}
void KeyValuePair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyValuePair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeyValuePair::InternalSwap(KeyValuePair* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata KeyValuePair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fliterals_2eproto[20]);
}

// ===================================================================

class RetryStrategy::_Internal {
 public:
};

RetryStrategy::RetryStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.RetryStrategy)
}
RetryStrategy::RetryStrategy(const RetryStrategy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  retries_ = from.retries_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.RetryStrategy)
}

inline void RetryStrategy::SharedCtor() {
retries_ = 0u;
}

RetryStrategy::~RetryStrategy() {
  // @@protoc_insertion_point(destructor:flyteidl.core.RetryStrategy)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RetryStrategy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RetryStrategy::ArenaDtor(void* object) {
  RetryStrategy* _this = reinterpret_cast< RetryStrategy* >(object);
  (void)_this;
}
void RetryStrategy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RetryStrategy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RetryStrategy::InternalSwap(RetryStrategy* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata RetryStrategy::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fliterals_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fliterals_2eproto[21]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::core::Primitive* Arena::CreateMaybeMessage< ::flyteidl::core::Primitive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::Primitive >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::Void* Arena::CreateMaybeMessage< ::flyteidl::core::Void >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::Void >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::Blob* Arena::CreateMaybeMessage< ::flyteidl::core::Blob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::Blob >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::BlobMetadata* Arena::CreateMaybeMessage< ::flyteidl::core::BlobMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::BlobMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::Binary* Arena::CreateMaybeMessage< ::flyteidl::core::Binary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::Binary >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::Schema* Arena::CreateMaybeMessage< ::flyteidl::core::Schema >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::Schema >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::Union* Arena::CreateMaybeMessage< ::flyteidl::core::Union >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::Union >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::StructuredDatasetMetadata* Arena::CreateMaybeMessage< ::flyteidl::core::StructuredDatasetMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::StructuredDatasetMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::StructuredDataset* Arena::CreateMaybeMessage< ::flyteidl::core::StructuredDataset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::StructuredDataset >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::Scalar* Arena::CreateMaybeMessage< ::flyteidl::core::Scalar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::Scalar >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::Literal* Arena::CreateMaybeMessage< ::flyteidl::core::Literal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::Literal >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::LiteralCollection* Arena::CreateMaybeMessage< ::flyteidl::core::LiteralCollection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::LiteralCollection >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::LiteralMap_LiteralsEntry_DoNotUse* Arena::CreateMaybeMessage< ::flyteidl::core::LiteralMap_LiteralsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::LiteralMap_LiteralsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::LiteralMap* Arena::CreateMaybeMessage< ::flyteidl::core::LiteralMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::LiteralMap >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::BindingDataCollection* Arena::CreateMaybeMessage< ::flyteidl::core::BindingDataCollection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::BindingDataCollection >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::BindingDataMap_BindingsEntry_DoNotUse* Arena::CreateMaybeMessage< ::flyteidl::core::BindingDataMap_BindingsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::BindingDataMap_BindingsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::BindingDataMap* Arena::CreateMaybeMessage< ::flyteidl::core::BindingDataMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::BindingDataMap >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::UnionInfo* Arena::CreateMaybeMessage< ::flyteidl::core::UnionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::UnionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::BindingData* Arena::CreateMaybeMessage< ::flyteidl::core::BindingData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::BindingData >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::Binding* Arena::CreateMaybeMessage< ::flyteidl::core::Binding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::Binding >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::KeyValuePair* Arena::CreateMaybeMessage< ::flyteidl::core::KeyValuePair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::KeyValuePair >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::RetryStrategy* Arena::CreateMaybeMessage< ::flyteidl::core::RetryStrategy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::RetryStrategy >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
