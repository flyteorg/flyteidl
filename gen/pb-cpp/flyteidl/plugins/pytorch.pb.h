// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/pytorch.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fplugins_2fpytorch_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fplugins_2fpytorch_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fpytorch_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fplugins_2fpytorch_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fplugins_2fpytorch_2eproto();
namespace flyteidl {
namespace plugins {
class DistributedPyTorchTrainingTask;
class DistributedPyTorchTrainingTaskDefaultTypeInternal;
extern DistributedPyTorchTrainingTaskDefaultTypeInternal _DistributedPyTorchTrainingTask_default_instance_;
class ElasticConfig;
class ElasticConfigDefaultTypeInternal;
extern ElasticConfigDefaultTypeInternal _ElasticConfig_default_instance_;
}  // namespace plugins
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::plugins::DistributedPyTorchTrainingTask* Arena::CreateMaybeMessage<::flyteidl::plugins::DistributedPyTorchTrainingTask>(Arena*);
template<> ::flyteidl::plugins::ElasticConfig* Arena::CreateMaybeMessage<::flyteidl::plugins::ElasticConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace plugins {

// ===================================================================

class ElasticConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.ElasticConfig) */ {
 public:
  ElasticConfig();
  virtual ~ElasticConfig();

  ElasticConfig(const ElasticConfig& from);

  inline ElasticConfig& operator=(const ElasticConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElasticConfig(ElasticConfig&& from) noexcept
    : ElasticConfig() {
    *this = ::std::move(from);
  }

  inline ElasticConfig& operator=(ElasticConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ElasticConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElasticConfig* internal_default_instance() {
    return reinterpret_cast<const ElasticConfig*>(
               &_ElasticConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ElasticConfig* other);
  friend void swap(ElasticConfig& a, ElasticConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElasticConfig* New() const final {
    return CreateMaybeMessage<ElasticConfig>(nullptr);
  }

  ElasticConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElasticConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElasticConfig& from);
  void MergeFrom(const ElasticConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElasticConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string rdzv_backend = 1;
  void clear_rdzv_backend();
  static const int kRdzvBackendFieldNumber = 1;
  const ::std::string& rdzv_backend() const;
  void set_rdzv_backend(const ::std::string& value);
  #if LANG_CXX11
  void set_rdzv_backend(::std::string&& value);
  #endif
  void set_rdzv_backend(const char* value);
  void set_rdzv_backend(const char* value, size_t size);
  ::std::string* mutable_rdzv_backend();
  ::std::string* release_rdzv_backend();
  void set_allocated_rdzv_backend(::std::string* rdzv_backend);

  // string nproc_per_node_str = 6;
  void clear_nproc_per_node_str();
  static const int kNprocPerNodeStrFieldNumber = 6;
  const ::std::string& nproc_per_node_str() const;
  void set_nproc_per_node_str(const ::std::string& value);
  #if LANG_CXX11
  void set_nproc_per_node_str(::std::string&& value);
  #endif
  void set_nproc_per_node_str(const char* value);
  void set_nproc_per_node_str(const char* value, size_t size);
  ::std::string* mutable_nproc_per_node_str();
  ::std::string* release_nproc_per_node_str();
  void set_allocated_nproc_per_node_str(::std::string* nproc_per_node_str);

  // int32 min_replicas = 2;
  void clear_min_replicas();
  static const int kMinReplicasFieldNumber = 2;
  ::google::protobuf::int32 min_replicas() const;
  void set_min_replicas(::google::protobuf::int32 value);

  // int32 max_replicas = 3;
  void clear_max_replicas();
  static const int kMaxReplicasFieldNumber = 3;
  ::google::protobuf::int32 max_replicas() const;
  void set_max_replicas(::google::protobuf::int32 value);

  // int32 nproc_per_node = 4;
  void clear_nproc_per_node();
  static const int kNprocPerNodeFieldNumber = 4;
  ::google::protobuf::int32 nproc_per_node() const;
  void set_nproc_per_node(::google::protobuf::int32 value);

  // int32 max_restarts = 5;
  void clear_max_restarts();
  static const int kMaxRestartsFieldNumber = 5;
  ::google::protobuf::int32 max_restarts() const;
  void set_max_restarts(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.ElasticConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rdzv_backend_;
  ::google::protobuf::internal::ArenaStringPtr nproc_per_node_str_;
  ::google::protobuf::int32 min_replicas_;
  ::google::protobuf::int32 max_replicas_;
  ::google::protobuf::int32 nproc_per_node_;
  ::google::protobuf::int32 max_restarts_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fpytorch_2eproto;
};
// -------------------------------------------------------------------

class DistributedPyTorchTrainingTask final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.DistributedPyTorchTrainingTask) */ {
 public:
  DistributedPyTorchTrainingTask();
  virtual ~DistributedPyTorchTrainingTask();

  DistributedPyTorchTrainingTask(const DistributedPyTorchTrainingTask& from);

  inline DistributedPyTorchTrainingTask& operator=(const DistributedPyTorchTrainingTask& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DistributedPyTorchTrainingTask(DistributedPyTorchTrainingTask&& from) noexcept
    : DistributedPyTorchTrainingTask() {
    *this = ::std::move(from);
  }

  inline DistributedPyTorchTrainingTask& operator=(DistributedPyTorchTrainingTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DistributedPyTorchTrainingTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DistributedPyTorchTrainingTask* internal_default_instance() {
    return reinterpret_cast<const DistributedPyTorchTrainingTask*>(
               &_DistributedPyTorchTrainingTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DistributedPyTorchTrainingTask* other);
  friend void swap(DistributedPyTorchTrainingTask& a, DistributedPyTorchTrainingTask& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DistributedPyTorchTrainingTask* New() const final {
    return CreateMaybeMessage<DistributedPyTorchTrainingTask>(nullptr);
  }

  DistributedPyTorchTrainingTask* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DistributedPyTorchTrainingTask>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DistributedPyTorchTrainingTask& from);
  void MergeFrom(const DistributedPyTorchTrainingTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistributedPyTorchTrainingTask* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.plugins.ElasticConfig elastic_config = 2;
  bool has_elastic_config() const;
  void clear_elastic_config();
  static const int kElasticConfigFieldNumber = 2;
  const ::flyteidl::plugins::ElasticConfig& elastic_config() const;
  ::flyteidl::plugins::ElasticConfig* release_elastic_config();
  ::flyteidl::plugins::ElasticConfig* mutable_elastic_config();
  void set_allocated_elastic_config(::flyteidl::plugins::ElasticConfig* elastic_config);

  // int32 workers = 1;
  void clear_workers();
  static const int kWorkersFieldNumber = 1;
  ::google::protobuf::int32 workers() const;
  void set_workers(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.DistributedPyTorchTrainingTask)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::plugins::ElasticConfig* elastic_config_;
  ::google::protobuf::int32 workers_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fpytorch_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ElasticConfig

// string rdzv_backend = 1;
inline void ElasticConfig::clear_rdzv_backend() {
  rdzv_backend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ElasticConfig::rdzv_backend() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.ElasticConfig.rdzv_backend)
  return rdzv_backend_.GetNoArena();
}
inline void ElasticConfig::set_rdzv_backend(const ::std::string& value) {
  
  rdzv_backend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.ElasticConfig.rdzv_backend)
}
#if LANG_CXX11
inline void ElasticConfig::set_rdzv_backend(::std::string&& value) {
  
  rdzv_backend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.ElasticConfig.rdzv_backend)
}
#endif
inline void ElasticConfig::set_rdzv_backend(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rdzv_backend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.ElasticConfig.rdzv_backend)
}
inline void ElasticConfig::set_rdzv_backend(const char* value, size_t size) {
  
  rdzv_backend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.ElasticConfig.rdzv_backend)
}
inline ::std::string* ElasticConfig::mutable_rdzv_backend() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.ElasticConfig.rdzv_backend)
  return rdzv_backend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ElasticConfig::release_rdzv_backend() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.ElasticConfig.rdzv_backend)
  
  return rdzv_backend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ElasticConfig::set_allocated_rdzv_backend(::std::string* rdzv_backend) {
  if (rdzv_backend != nullptr) {
    
  } else {
    
  }
  rdzv_backend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rdzv_backend);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.ElasticConfig.rdzv_backend)
}

// int32 min_replicas = 2;
inline void ElasticConfig::clear_min_replicas() {
  min_replicas_ = 0;
}
inline ::google::protobuf::int32 ElasticConfig::min_replicas() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.ElasticConfig.min_replicas)
  return min_replicas_;
}
inline void ElasticConfig::set_min_replicas(::google::protobuf::int32 value) {
  
  min_replicas_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.ElasticConfig.min_replicas)
}

// int32 max_replicas = 3;
inline void ElasticConfig::clear_max_replicas() {
  max_replicas_ = 0;
}
inline ::google::protobuf::int32 ElasticConfig::max_replicas() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.ElasticConfig.max_replicas)
  return max_replicas_;
}
inline void ElasticConfig::set_max_replicas(::google::protobuf::int32 value) {
  
  max_replicas_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.ElasticConfig.max_replicas)
}

// int32 nproc_per_node = 4;
inline void ElasticConfig::clear_nproc_per_node() {
  nproc_per_node_ = 0;
}
inline ::google::protobuf::int32 ElasticConfig::nproc_per_node() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.ElasticConfig.nproc_per_node)
  return nproc_per_node_;
}
inline void ElasticConfig::set_nproc_per_node(::google::protobuf::int32 value) {
  
  nproc_per_node_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.ElasticConfig.nproc_per_node)
}

// string nproc_per_node_str = 6;
inline void ElasticConfig::clear_nproc_per_node_str() {
  nproc_per_node_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ElasticConfig::nproc_per_node_str() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.ElasticConfig.nproc_per_node_str)
  return nproc_per_node_str_.GetNoArena();
}
inline void ElasticConfig::set_nproc_per_node_str(const ::std::string& value) {
  
  nproc_per_node_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.ElasticConfig.nproc_per_node_str)
}
#if LANG_CXX11
inline void ElasticConfig::set_nproc_per_node_str(::std::string&& value) {
  
  nproc_per_node_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.ElasticConfig.nproc_per_node_str)
}
#endif
inline void ElasticConfig::set_nproc_per_node_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nproc_per_node_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.ElasticConfig.nproc_per_node_str)
}
inline void ElasticConfig::set_nproc_per_node_str(const char* value, size_t size) {
  
  nproc_per_node_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.ElasticConfig.nproc_per_node_str)
}
inline ::std::string* ElasticConfig::mutable_nproc_per_node_str() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.ElasticConfig.nproc_per_node_str)
  return nproc_per_node_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ElasticConfig::release_nproc_per_node_str() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.ElasticConfig.nproc_per_node_str)
  
  return nproc_per_node_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ElasticConfig::set_allocated_nproc_per_node_str(::std::string* nproc_per_node_str) {
  if (nproc_per_node_str != nullptr) {
    
  } else {
    
  }
  nproc_per_node_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nproc_per_node_str);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.ElasticConfig.nproc_per_node_str)
}

// int32 max_restarts = 5;
inline void ElasticConfig::clear_max_restarts() {
  max_restarts_ = 0;
}
inline ::google::protobuf::int32 ElasticConfig::max_restarts() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.ElasticConfig.max_restarts)
  return max_restarts_;
}
inline void ElasticConfig::set_max_restarts(::google::protobuf::int32 value) {
  
  max_restarts_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.ElasticConfig.max_restarts)
}

// -------------------------------------------------------------------

// DistributedPyTorchTrainingTask

// int32 workers = 1;
inline void DistributedPyTorchTrainingTask::clear_workers() {
  workers_ = 0;
}
inline ::google::protobuf::int32 DistributedPyTorchTrainingTask::workers() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.DistributedPyTorchTrainingTask.workers)
  return workers_;
}
inline void DistributedPyTorchTrainingTask::set_workers(::google::protobuf::int32 value) {
  
  workers_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.DistributedPyTorchTrainingTask.workers)
}

// .flyteidl.plugins.ElasticConfig elastic_config = 2;
inline bool DistributedPyTorchTrainingTask::has_elastic_config() const {
  return this != internal_default_instance() && elastic_config_ != nullptr;
}
inline void DistributedPyTorchTrainingTask::clear_elastic_config() {
  if (GetArenaNoVirtual() == nullptr && elastic_config_ != nullptr) {
    delete elastic_config_;
  }
  elastic_config_ = nullptr;
}
inline const ::flyteidl::plugins::ElasticConfig& DistributedPyTorchTrainingTask::elastic_config() const {
  const ::flyteidl::plugins::ElasticConfig* p = elastic_config_;
  // @@protoc_insertion_point(field_get:flyteidl.plugins.DistributedPyTorchTrainingTask.elastic_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::plugins::ElasticConfig*>(
      &::flyteidl::plugins::_ElasticConfig_default_instance_);
}
inline ::flyteidl::plugins::ElasticConfig* DistributedPyTorchTrainingTask::release_elastic_config() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.DistributedPyTorchTrainingTask.elastic_config)
  
  ::flyteidl::plugins::ElasticConfig* temp = elastic_config_;
  elastic_config_ = nullptr;
  return temp;
}
inline ::flyteidl::plugins::ElasticConfig* DistributedPyTorchTrainingTask::mutable_elastic_config() {
  
  if (elastic_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::plugins::ElasticConfig>(GetArenaNoVirtual());
    elastic_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.DistributedPyTorchTrainingTask.elastic_config)
  return elastic_config_;
}
inline void DistributedPyTorchTrainingTask::set_allocated_elastic_config(::flyteidl::plugins::ElasticConfig* elastic_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete elastic_config_;
  }
  if (elastic_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      elastic_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, elastic_config, submessage_arena);
    }
    
  } else {
    
  }
  elastic_config_ = elastic_config;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.DistributedPyTorchTrainingTask.elastic_config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace plugins
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fplugins_2fpytorch_2eproto
