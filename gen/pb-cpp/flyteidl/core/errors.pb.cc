// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/errors.proto

#include "flyteidl/core/errors.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace core {
constexpr ContainerError::ContainerError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , kind_(0)

  , origin_(0)
{}
struct ContainerErrorDefaultTypeInternal {
  constexpr ContainerErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContainerErrorDefaultTypeInternal() {}
  union {
    ContainerError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContainerErrorDefaultTypeInternal _ContainerError_default_instance_;
constexpr ErrorDocument::ErrorDocument(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_(nullptr){}
struct ErrorDocumentDefaultTypeInternal {
  constexpr ErrorDocumentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ErrorDocumentDefaultTypeInternal() {}
  union {
    ErrorDocument _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ErrorDocumentDefaultTypeInternal _ErrorDocument_default_instance_;
}  // namespace core
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fcore_2ferrors_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fcore_2ferrors_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fcore_2ferrors_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fcore_2ferrors_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ContainerError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ContainerError, code_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ContainerError, message_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ContainerError, kind_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ContainerError, origin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ErrorDocument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ErrorDocument, error_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::core::ContainerError)},
  { 10, -1, -1, sizeof(::flyteidl::core::ErrorDocument)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_ContainerError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_ErrorDocument_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fcore_2ferrors_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032flyteidl/core/errors.proto\022\rflyteidl.c"
  "ore\032\035flyteidl/core/execution.proto\"\345\001\n\016C"
  "ontainerError\022\022\n\004code\030\001 \001(\tR\004code\022\030\n\007mes"
  "sage\030\002 \001(\tR\007message\0226\n\004kind\030\003 \001(\0162\".flyt"
  "eidl.core.ContainerError.KindR\004kind\022\?\n\006o"
  "rigin\030\004 \001(\0162\'.flyteidl.core.ExecutionErr"
  "or.ErrorKindR\006origin\",\n\004Kind\022\023\n\017NON_RECO"
  "VERABLE\020\000\022\017\n\013RECOVERABLE\020\001\"D\n\rErrorDocum"
  "ent\0223\n\005error\030\001 \001(\0132\035.flyteidl.core.Conta"
  "inerErrorR\005errorB\256\001\n\021com.flyteidl.coreB\013"
  "ErrorsProtoH\002Z4github.com/flyteorg/flyte"
  "idl/gen/pb-go/flyteidl/core\370\001\000\242\002\003FCX\252\002\rF"
  "lyteidl.Core\312\002\rFlyteidl\\Core\342\002\031Flyteidl\\"
  "Core\\GPBMetadata\352\002\016Flyteidl::Coreb\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flyteidl_2fcore_2ferrors_2eproto_deps[1] = {
  &::descriptor_table_flyteidl_2fcore_2fexecution_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fcore_2ferrors_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fcore_2ferrors_2eproto = {
  false, false, 561, descriptor_table_protodef_flyteidl_2fcore_2ferrors_2eproto, "flyteidl/core/errors.proto", 
  &descriptor_table_flyteidl_2fcore_2ferrors_2eproto_once, descriptor_table_flyteidl_2fcore_2ferrors_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_flyteidl_2fcore_2ferrors_2eproto::offsets,
  file_level_metadata_flyteidl_2fcore_2ferrors_2eproto, file_level_enum_descriptors_flyteidl_2fcore_2ferrors_2eproto, file_level_service_descriptors_flyteidl_2fcore_2ferrors_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fcore_2ferrors_2eproto_getter() {
  return &descriptor_table_flyteidl_2fcore_2ferrors_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fcore_2ferrors_2eproto(&descriptor_table_flyteidl_2fcore_2ferrors_2eproto);
namespace flyteidl {
namespace core {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContainerError_Kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fcore_2ferrors_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2ferrors_2eproto[0];
}
bool ContainerError_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ContainerError_Kind ContainerError::NON_RECOVERABLE;
constexpr ContainerError_Kind ContainerError::RECOVERABLE;
constexpr ContainerError_Kind ContainerError::Kind_MIN;
constexpr ContainerError_Kind ContainerError::Kind_MAX;
constexpr int ContainerError::Kind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ContainerError::_Internal {
 public:
};

ContainerError::ContainerError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.ContainerError)
}
ContainerError::ContainerError(const ContainerError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  ::memcpy(&kind_, &from.kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&origin_) -
    reinterpret_cast<char*>(&kind_)) + sizeof(origin_));
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.ContainerError)
}

inline void ContainerError::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&kind_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&origin_) -
    reinterpret_cast<char*>(&kind_)) + sizeof(origin_));
}

ContainerError::~ContainerError() {
  // @@protoc_insertion_point(destructor:flyteidl.core.ContainerError)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ContainerError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContainerError::ArenaDtor(void* object) {
  ContainerError* _this = reinterpret_cast< ContainerError* >(object);
  (void)_this;
}
void ContainerError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContainerError::InternalSwap(ContainerError* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerError::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ferrors_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ferrors_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ferrors_2eproto[0]);
}

// ===================================================================

class ErrorDocument::_Internal {
 public:
  static const ::flyteidl::core::ContainerError& error(const ErrorDocument* msg);
};

const ::flyteidl::core::ContainerError&
ErrorDocument::_Internal::error(const ErrorDocument* msg) {
  return *msg->error_;
}
ErrorDocument::ErrorDocument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.ErrorDocument)
}
ErrorDocument::ErrorDocument(const ErrorDocument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    error_ = new ::flyteidl::core::ContainerError(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.ErrorDocument)
}

inline void ErrorDocument::SharedCtor() {
error_ = nullptr;
}

ErrorDocument::~ErrorDocument() {
  // @@protoc_insertion_point(destructor:flyteidl.core.ErrorDocument)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ErrorDocument::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete error_;
}

void ErrorDocument::ArenaDtor(void* object) {
  ErrorDocument* _this = reinterpret_cast< ErrorDocument* >(object);
  (void)_this;
}
void ErrorDocument::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ErrorDocument::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ErrorDocument::InternalSwap(ErrorDocument* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorDocument::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ferrors_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ferrors_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ferrors_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::core::ContainerError* Arena::CreateMaybeMessage< ::flyteidl::core::ContainerError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::ContainerError >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::ErrorDocument* Arena::CreateMaybeMessage< ::flyteidl::core::ErrorDocument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::ErrorDocument >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
