---
swagger: "2.0"
info:
  version: "version not set"
  title: "flyteidl/service/admin.proto"
schemes:
- "http"
- "https"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /api/v1/active_launch_plans/{id.project}/{id.domain}/{id.name}:
    get:
      tags:
      - "AdminService"
      description: "Retrieve the active launch plan version specified by input request\
        \ filters."
      operationId: "GetActiveLaunchPlan"
      parameters:
      - name: "id.project"
        in: "path"
        description: "Name of the project the resource belongs to."
        required: true
        type: "string"
        x-exportParamName: "IdProject"
      - name: "id.domain"
        in: "path"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
        required: true
        type: "string"
        x-exportParamName: "IdDomain"
      - name: "id.name"
        in: "path"
        description: "User provided value for the resource.\nThe combination of project\
          \ + domain + name uniquely identifies the resource.\n+optional - in certain\
          \ contexts - like 'List API', 'Launch plans'"
        required: true
        type: "string"
        x-exportParamName: "IdName"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminLaunchPlan"
  /api/v1/active_launch_plans/{project}/{domain}:
    get:
      tags:
      - "AdminService"
      description: "Fetch the active launch plan versions specified by input request\
        \ filters."
      operationId: "ListActiveLaunchPlans"
      parameters:
      - name: "project"
        in: "path"
        description: "Name of the project that contains the identifiers."
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "domain"
        in: "path"
        description: "Name of the domain the identifiers belongs to within the project."
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "limit"
        in: "query"
        description: "Indicates the number of resources to be returned."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "token"
        in: "query"
        description: "In the case of multiple pages of results, the server-provided\
          \ token can be used to fetch the next page\nin a query.\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "sort_by.key"
        in: "query"
        description: "Indicates an attribute to sort the response values.\nTODO(katrogan):\
          \ Add string validation here. This should never be empty."
        required: false
        type: "string"
        x-exportParamName: "SortByKey"
        x-optionalDataType: "String"
      - name: "sort_by.direction"
        in: "query"
        description: "Indicates the direction to apply sort key for response values.\n\
          +optional."
        required: false
        type: "string"
        default: "DESCENDING"
        enum:
        - "DESCENDING"
        - "ASCENDING"
        x-exportParamName: "SortByDirection"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminLaunchPlanList"
  ? /api/v1/children/task_executions/{task_execution_id.node_execution_id.execution_id.project}/{task_execution_id.node_execution_id.execution_id.domain}/{task_execution_id.node_execution_id.execution_id.name}/{task_execution_id.node_execution_id.node_id}/{task_execution_id.task_id.project}/{task_execution_id.task_id.domain}/{task_execution_id.task_id.name}/{task_execution_id.task_id.version}/{task_execution_id.retry_attempt}
  : get:
      tags:
      - "AdminService"
      description: "Fetch child node executions launched by the specified task execution."
      operationId: "ListNodeExecutionsForTask"
      parameters:
      - name: "task_execution_id.node_execution_id.execution_id.project"
        in: "path"
        description: "Name of the project the resource belongs to."
        required: true
        type: "string"
        x-exportParamName: "TaskExecutionIdNodeExecutionIdExecutionIdProject"
      - name: "task_execution_id.node_execution_id.execution_id.domain"
        in: "path"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
        required: true
        type: "string"
        x-exportParamName: "TaskExecutionIdNodeExecutionIdExecutionIdDomain"
      - name: "task_execution_id.node_execution_id.execution_id.name"
        in: "path"
        description: "User or system provided value for the resource."
        required: true
        type: "string"
        x-exportParamName: "TaskExecutionIdNodeExecutionIdExecutionIdName"
      - name: "task_execution_id.node_execution_id.node_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TaskExecutionIdNodeExecutionIdNodeId"
      - name: "task_execution_id.task_id.project"
        in: "path"
        description: "Name of the project the resource belongs to."
        required: true
        type: "string"
        x-exportParamName: "TaskExecutionIdTaskIdProject"
      - name: "task_execution_id.task_id.domain"
        in: "path"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
        required: true
        type: "string"
        x-exportParamName: "TaskExecutionIdTaskIdDomain"
      - name: "task_execution_id.task_id.name"
        in: "path"
        description: "User provided value for the resource."
        required: true
        type: "string"
        x-exportParamName: "TaskExecutionIdTaskIdName"
      - name: "task_execution_id.task_id.version"
        in: "path"
        description: "Specific version of the resource."
        required: true
        type: "string"
        x-exportParamName: "TaskExecutionIdTaskIdVersion"
      - name: "task_execution_id.retry_attempt"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "TaskExecutionIdRetryAttempt"
      - name: "task_execution_id.task_id.resource_type"
        in: "query"
        description: "Identifies the specific type of resource that this identifer\
          \ corresponds to."
        required: false
        type: "string"
        default: "UNSPECIFIED"
        enum:
        - "UNSPECIFIED"
        - "TASK"
        - "WORKFLOW"
        - "LAUNCH_PLAN"
        x-exportParamName: "TaskExecutionIdTaskIdResourceType"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "Indicates the number of resources to be returned."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "token"
        in: "query"
        description: "In the case of multiple pages of results, the, server-provided\
          \ token can be used to fetch the next page\nin a query.\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "filters"
        in: "query"
        description: "Indicates a list of filters passed as string.\nMore info on\
          \ constructing filters : <Link>\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      - name: "sort_by.key"
        in: "query"
        description: "Indicates an attribute to sort the response values.\nTODO(katrogan):\
          \ Add string validation here. This should never be empty."
        required: false
        type: "string"
        x-exportParamName: "SortByKey"
        x-optionalDataType: "String"
      - name: "sort_by.direction"
        in: "query"
        description: "Indicates the direction to apply sort key for response values.\n\
          +optional."
        required: false
        type: "string"
        default: "DESCENDING"
        enum:
        - "DESCENDING"
        - "ASCENDING"
        x-exportParamName: "SortByDirection"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminNodeExecutionList"
  /api/v1/data/executions/{id.project}/{id.domain}/{id.name}:
    get:
      tags:
      - "AdminService"
      description: "Retrieve input and output data from an existing workflow execution."
      operationId: "GetExecutionData"
      parameters:
      - name: "id.project"
        in: "path"
        description: "Name of the project the resource belongs to."
        required: true
        type: "string"
        x-exportParamName: "IdProject"
      - name: "id.domain"
        in: "path"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
        required: true
        type: "string"
        x-exportParamName: "IdDomain"
      - name: "id.name"
        in: "path"
        description: "User or system provided value for the resource."
        required: true
        type: "string"
        x-exportParamName: "IdName"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminWorkflowExecutionGetDataResponse"
  /api/v1/data/node_executions/{id.execution_id.project}/{id.execution_id.domain}/{id.execution_id.name}/{id.node_id}:
    get:
      tags:
      - "AdminService"
      description: "Retrieve input and output data from an existing node execution."
      operationId: "GetNodeExecutionData"
      parameters:
      - name: "id.execution_id.project"
        in: "path"
        description: "Name of the project the resource belongs to."
        required: true
        type: "string"
        x-exportParamName: "IdExecutionIdProject"
      - name: "id.execution_id.domain"
        in: "path"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
        required: true
        type: "string"
        x-exportParamName: "IdExecutionIdDomain"
      - name: "id.execution_id.name"
        in: "path"
        description: "User or system provided value for the resource."
        required: true
        type: "string"
        x-exportParamName: "IdExecutionIdName"
      - name: "id.node_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "IdNodeId"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminNodeExecutionGetDataResponse"
  ? /api/v1/data/task_executions/{id.node_execution_id.execution_id.project}/{id.node_execution_id.execution_id.domain}/{id.node_execution_id.execution_id.name}/{id.node_execution_id.node_id}/{id.task_id.project}/{id.task_id.domain}/{id.task_id.name}/{id.task_id.version}/{id.retry_attempt}
  : get:
      tags:
      - "AdminService"
      description: "Retrieve input and output data from an existing task execution."
      operationId: "GetTaskExecutionData"
      parameters:
      - name: "id.node_execution_id.execution_id.project"
        in: "path"
        description: "Name of the project the resource belongs to."
        required: true
        type: "string"
        x-exportParamName: "IdNodeExecutionIdExecutionIdProject"
      - name: "id.node_execution_id.execution_id.domain"
        in: "path"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
        required: true
        type: "string"
        x-exportParamName: "IdNodeExecutionIdExecutionIdDomain"
      - name: "id.node_execution_id.execution_id.name"
        in: "path"
        description: "User or system provided value for the resource."
        required: true
        type: "string"
        x-exportParamName: "IdNodeExecutionIdExecutionIdName"
      - name: "id.node_execution_id.node_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "IdNodeExecutionIdNodeId"
      - name: "id.task_id.project"
        in: "path"
        description: "Name of the project the resource belongs to."
        required: true
        type: "string"
        x-exportParamName: "IdTaskIdProject"
      - name: "id.task_id.domain"
        in: "path"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
        required: true
        type: "string"
        x-exportParamName: "IdTaskIdDomain"
      - name: "id.task_id.name"
        in: "path"
        description: "User provided value for the resource."
        required: true
        type: "string"
        x-exportParamName: "IdTaskIdName"
      - name: "id.task_id.version"
        in: "path"
        description: "Specific version of the resource."
        required: true
        type: "string"
        x-exportParamName: "IdTaskIdVersion"
      - name: "id.retry_attempt"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "IdRetryAttempt"
      - name: "id.task_id.resource_type"
        in: "query"
        description: "Identifies the specific type of resource that this identifer\
          \ corresponds to."
        required: false
        type: "string"
        default: "UNSPECIFIED"
        enum:
        - "UNSPECIFIED"
        - "TASK"
        - "WORKFLOW"
        - "LAUNCH_PLAN"
        x-exportParamName: "IdTaskIdResourceType"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminTaskExecutionGetDataResponse"
  /api/v1/events/nodes:
    post:
      tags:
      - "AdminService"
      description: "Create a node execution event recording a phase transition."
      operationId: "CreateNodeEvent"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/adminNodeExecutionEventRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminNodeExecutionEventResponse"
  /api/v1/events/tasks:
    post:
      tags:
      - "AdminService"
      description: "Create a task execution event recording a phase transition."
      operationId: "CreateTaskEvent"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/adminTaskExecutionEventRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminTaskExecutionEventResponse"
  /api/v1/events/workflows:
    post:
      tags:
      - "AdminService"
      description: "Create a workflow execution event recording a phase transition."
      operationId: "CreateWorkflowEvent"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/adminWorkflowExecutionEventRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminWorkflowExecutionEventResponse"
  /api/v1/executions:
    post:
      tags:
      - "AdminService"
      description: "Create a workflow execution."
      operationId: "CreateExecution"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/adminExecutionCreateRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminExecutionCreateResponse"
  /api/v1/executions/relaunch:
    post:
      tags:
      - "AdminService"
      description: "Relaunch a workflow execution."
      operationId: "RelaunchExecution"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/adminExecutionRelaunchRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminExecutionCreateResponse"
  /api/v1/executions/{id.project}/{id.domain}:
    get:
      tags:
      - "AdminService"
      description: "Fetch existing workflow executions matching input filters."
      operationId: "ListExecutions"
      parameters:
      - name: "id.project"
        in: "path"
        description: "Name of the project the resource belongs to."
        required: true
        type: "string"
        x-exportParamName: "IdProject"
      - name: "id.domain"
        in: "path"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
        required: true
        type: "string"
        x-exportParamName: "IdDomain"
      - name: "id.name"
        in: "query"
        description: "User provided value for the resource.\nThe combination of project\
          \ + domain + name uniquely identifies the resource.\n+optional - in certain\
          \ contexts - like 'List API', 'Launch plans'."
        required: false
        type: "string"
        x-exportParamName: "IdName"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "Indicates the number of resources to be returned."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "token"
        in: "query"
        description: "In the case of multiple pages of results, this server-provided\
          \ token can be used to fetch the next page\nin a query.\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "filters"
        in: "query"
        description: "Indicates a list of filters passed as string.\nMore info on\
          \ constructing filters : <Link>\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      - name: "sort_by.key"
        in: "query"
        description: "Indicates an attribute to sort the response values.\nTODO(katrogan):\
          \ Add string validation here. This should never be empty."
        required: false
        type: "string"
        x-exportParamName: "SortByKey"
        x-optionalDataType: "String"
      - name: "sort_by.direction"
        in: "query"
        description: "Indicates the direction to apply sort key for response values.\n\
          +optional."
        required: false
        type: "string"
        default: "DESCENDING"
        enum:
        - "DESCENDING"
        - "ASCENDING"
        x-exportParamName: "SortByDirection"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminExecutionList"
  /api/v1/executions/{id.project}/{id.domain}/{id.name}:
    get:
      tags:
      - "AdminService"
      description: "Retrieve an existing workflow execution."
      operationId: "GetExecution"
      parameters:
      - name: "id.project"
        in: "path"
        description: "Name of the project the resource belongs to."
        required: true
        type: "string"
        x-exportParamName: "IdProject"
      - name: "id.domain"
        in: "path"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
        required: true
        type: "string"
        x-exportParamName: "IdDomain"
      - name: "id.name"
        in: "path"
        description: "User or system provided value for the resource."
        required: true
        type: "string"
        x-exportParamName: "IdName"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminExecution"
    delete:
      tags:
      - "AdminService"
      description: "Terminate the active workflow execution specified in the request."
      operationId: "TerminateExecution"
      parameters:
      - name: "id.project"
        in: "path"
        description: "Name of the project the resource belongs to."
        required: true
        type: "string"
        x-exportParamName: "IdProject"
      - name: "id.domain"
        in: "path"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
        required: true
        type: "string"
        x-exportParamName: "IdDomain"
      - name: "id.name"
        in: "path"
        description: "User or system provided value for the resource."
        required: true
        type: "string"
        x-exportParamName: "IdName"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/adminExecutionTerminateRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminExecutionTerminateResponse"
  /api/v1/launch_plan_ids/{project}/{domain}:
    get:
      tags:
      - "AdminService"
      description: "Fetch existing launch plan definition identifiers matching input\
        \ filters."
      operationId: "ListLaunchPlanIds"
      parameters:
      - name: "project"
        in: "path"
        description: "Name of the project that contains the identifiers."
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "domain"
        in: "path"
        description: "Name of the domain the identifiers belongs to within the project."
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "limit"
        in: "query"
        description: "Indicates the number of resources to be returned."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "token"
        in: "query"
        description: "In the case of multiple pages of results, the server-provided\
          \ token can be used to fetch the next page\nin a query.\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "sort_by.key"
        in: "query"
        description: "Indicates an attribute to sort the response values.\nTODO(katrogan):\
          \ Add string validation here. This should never be empty."
        required: false
        type: "string"
        x-exportParamName: "SortByKey"
        x-optionalDataType: "String"
      - name: "sort_by.direction"
        in: "query"
        description: "Indicates the direction to apply sort key for response values.\n\
          +optional."
        required: false
        type: "string"
        default: "DESCENDING"
        enum:
        - "DESCENDING"
        - "ASCENDING"
        x-exportParamName: "SortByDirection"
        x-optionalDataType: "String"
      - name: "filters"
        in: "query"
        description: "Indicates a list of filters passed as string.\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminNamedEntityIdentifierList"
  /api/v1/launch_plans:
    post:
      tags:
      - "AdminService"
      description: "Create and register a launch plan definition."
      operationId: "CreateLaunchPlan"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/adminLaunchPlanCreateRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminLaunchPlanCreateResponse"
        400:
          description: "Returned for bad request that may have failed validation."
          schema: {}
        409:
          description: "Returned for a request that references an identical entity\
            \ that has already been registered."
          schema: {}
  /api/v1/launch_plans/{id.project}/{id.domain}:
    get:
      tags:
      - "AdminService"
      description: "Fetch existing launch plan definitions matching input filters."
      operationId: "ListLaunchPlans2"
      parameters:
      - name: "id.project"
        in: "path"
        description: "Name of the project the resource belongs to."
        required: true
        type: "string"
        x-exportParamName: "IdProject"
      - name: "id.domain"
        in: "path"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
        required: true
        type: "string"
        x-exportParamName: "IdDomain"
      - name: "id.name"
        in: "query"
        description: "User provided value for the resource.\nThe combination of project\
          \ + domain + name uniquely identifies the resource.\n+optional - in certain\
          \ contexts - like 'List API', 'Launch plans'."
        required: false
        type: "string"
        x-exportParamName: "IdName"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "Indicates the number of resources to be returned."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "token"
        in: "query"
        description: "In the case of multiple pages of results, this server-provided\
          \ token can be used to fetch the next page\nin a query.\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "filters"
        in: "query"
        description: "Indicates a list of filters passed as string.\nMore info on\
          \ constructing filters : <Link>\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      - name: "sort_by.key"
        in: "query"
        description: "Indicates an attribute to sort the response values.\nTODO(katrogan):\
          \ Add string validation here. This should never be empty."
        required: false
        type: "string"
        x-exportParamName: "SortByKey"
        x-optionalDataType: "String"
      - name: "sort_by.direction"
        in: "query"
        description: "Indicates the direction to apply sort key for response values.\n\
          +optional."
        required: false
        type: "string"
        default: "DESCENDING"
        enum:
        - "DESCENDING"
        - "ASCENDING"
        x-exportParamName: "SortByDirection"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminLaunchPlanList"
  /api/v1/launch_plans/{id.project}/{id.domain}/{id.name}:
    get:
      tags:
      - "AdminService"
      description: "Fetch existing launch plan definitions matching input filters."
      operationId: "ListLaunchPlans"
      parameters:
      - name: "id.project"
        in: "path"
        description: "Name of the project the resource belongs to."
        required: true
        type: "string"
        x-exportParamName: "IdProject"
      - name: "id.domain"
        in: "path"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
        required: true
        type: "string"
        x-exportParamName: "IdDomain"
      - name: "id.name"
        in: "path"
        description: "User provided value for the resource.\nThe combination of project\
          \ + domain + name uniquely identifies the resource.\n+optional - in certain\
          \ contexts - like 'List API', 'Launch plans'"
        required: true
        type: "string"
        x-exportParamName: "IdName"
      - name: "limit"
        in: "query"
        description: "Indicates the number of resources to be returned."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "token"
        in: "query"
        description: "In the case of multiple pages of results, this server-provided\
          \ token can be used to fetch the next page\nin a query.\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "filters"
        in: "query"
        description: "Indicates a list of filters passed as string.\nMore info on\
          \ constructing filters : <Link>\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      - name: "sort_by.key"
        in: "query"
        description: "Indicates an attribute to sort the response values.\nTODO(katrogan):\
          \ Add string validation here. This should never be empty."
        required: false
        type: "string"
        x-exportParamName: "SortByKey"
        x-optionalDataType: "String"
      - name: "sort_by.direction"
        in: "query"
        description: "Indicates the direction to apply sort key for response values.\n\
          +optional."
        required: false
        type: "string"
        default: "DESCENDING"
        enum:
        - "DESCENDING"
        - "ASCENDING"
        x-exportParamName: "SortByDirection"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminLaunchPlanList"
  /api/v1/launch_plans/{id.project}/{id.domain}/{id.name}/{id.version}:
    get:
      tags:
      - "AdminService"
      description: "Retrieve an existing launch plan definition."
      operationId: "GetLaunchPlan"
      parameters:
      - name: "id.project"
        in: "path"
        description: "Name of the project the resource belongs to."
        required: true
        type: "string"
        x-exportParamName: "IdProject"
      - name: "id.domain"
        in: "path"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
        required: true
        type: "string"
        x-exportParamName: "IdDomain"
      - name: "id.name"
        in: "path"
        description: "User provided value for the resource."
        required: true
        type: "string"
        x-exportParamName: "IdName"
      - name: "id.version"
        in: "path"
        description: "Specific version of the resource."
        required: true
        type: "string"
        x-exportParamName: "IdVersion"
      - name: "id.resource_type"
        in: "query"
        description: "Identifies the specific type of resource that this identifer\
          \ corresponds to."
        required: false
        type: "string"
        default: "UNSPECIFIED"
        enum:
        - "UNSPECIFIED"
        - "TASK"
        - "WORKFLOW"
        - "LAUNCH_PLAN"
        x-exportParamName: "IdResourceType"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminLaunchPlan"
    put:
      tags:
      - "AdminService"
      description: "Update the status of an existing launch plan definition. At most\
        \ one launch plan version for a given {project, domain, name} can be active\
        \ at a time. If this call sets a launch plan to active and existing version\
        \ is already active, the result of this call will be that the formerly active\
        \ launch plan will be made inactive and specified launch plan in this request\
        \ will be made active. In the event that the formerly active launch plan had\
        \ a schedule associated it with it, this schedule will be disabled. If the\
        \ reference launch plan in this request is being set to active and has a schedule\
        \ associated with it, the schedule will be enabled."
      operationId: "UpdateLaunchPlan"
      parameters:
      - name: "id.project"
        in: "path"
        description: "Name of the project the resource belongs to."
        required: true
        type: "string"
        x-exportParamName: "IdProject"
      - name: "id.domain"
        in: "path"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
        required: true
        type: "string"
        x-exportParamName: "IdDomain"
      - name: "id.name"
        in: "path"
        description: "User provided value for the resource."
        required: true
        type: "string"
        x-exportParamName: "IdName"
      - name: "id.version"
        in: "path"
        description: "Specific version of the resource."
        required: true
        type: "string"
        x-exportParamName: "IdVersion"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/adminLaunchPlanUpdateRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminLaunchPlanUpdateResponse"
  /api/v1/matchable_attributes:
    get:
      tags:
      - "AdminService"
      description: "Retrieve a list of MatchableAttributesConfiguration objects."
      operationId: "ListMatchableAttributes"
      parameters:
      - name: "resource_type"
        in: "query"
        description: " - TASK_RESOURCE: Applies to customizable task resource requests\
          \ and limits.\n - CLUSTER_RESOURCE: Applies to configuring templated kubernetes\
          \ cluster resources.\n - EXECUTION_QUEUE: Configures task and dynamic task\
          \ execution queue assignment.\n - EXECUTION_CLUSTER_LABEL: Configures the\
          \ K8s cluster label to be used for execution to be run"
        required: false
        type: "string"
        default: "TASK_RESOURCE"
        enum:
        - "TASK_RESOURCE"
        - "CLUSTER_RESOURCE"
        - "EXECUTION_QUEUE"
        - "EXECUTION_CLUSTER_LABEL"
        x-exportParamName: "ResourceType"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminListMatchableAttributesResponse"
  /api/v1/named_entities/{resource_type}/{id.project}/{id.domain}/{id.name}:
    get:
      tags:
      - "AdminService"
      description: "Retrieve a NamedEntity object."
      operationId: "GetNamedEntity"
      parameters:
      - name: "resource_type"
        in: "path"
        required: true
        type: "string"
        enum:
        - "UNSPECIFIED"
        - "TASK"
        - "WORKFLOW"
        - "LAUNCH_PLAN"
        x-exportParamName: "ResourceType"
      - name: "id.project"
        in: "path"
        description: "Name of the project the resource belongs to."
        required: true
        type: "string"
        x-exportParamName: "IdProject"
      - name: "id.domain"
        in: "path"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
        required: true
        type: "string"
        x-exportParamName: "IdDomain"
      - name: "id.name"
        in: "path"
        description: "User provided value for the resource.\nThe combination of project\
          \ + domain + name uniquely identifies the resource.\n+optional - in certain\
          \ contexts - like 'List API', 'Launch plans'"
        required: true
        type: "string"
        x-exportParamName: "IdName"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminNamedEntity"
    put:
      tags:
      - "AdminService"
      description: "Update the fields associated with a NamedEntity"
      operationId: "UpdateNamedEntity"
      parameters:
      - name: "resource_type"
        in: "path"
        description: "Resource type of the metadata to update"
        required: true
        type: "string"
        enum:
        - "UNSPECIFIED"
        - "TASK"
        - "WORKFLOW"
        - "LAUNCH_PLAN"
        x-exportParamName: "ResourceType"
      - name: "id.project"
        in: "path"
        description: "Name of the project the resource belongs to."
        required: true
        type: "string"
        x-exportParamName: "IdProject"
      - name: "id.domain"
        in: "path"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
        required: true
        type: "string"
        x-exportParamName: "IdDomain"
      - name: "id.name"
        in: "path"
        description: "User provided value for the resource.\nThe combination of project\
          \ + domain + name uniquely identifies the resource.\n+optional - in certain\
          \ contexts - like 'List API', 'Launch plans'"
        required: true
        type: "string"
        x-exportParamName: "IdName"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/adminNamedEntityUpdateRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminNamedEntityUpdateResponse"
  /api/v1/named_entities/{resource_type}/{project}/{domain}:
    get:
      tags:
      - "AdminService"
      description: "Retrieve a list of NamedEntity objects sharing a common resource\
        \ type, project, and domain."
      operationId: "ListNamedEntities"
      parameters:
      - name: "resource_type"
        in: "path"
        required: true
        type: "string"
        enum:
        - "UNSPECIFIED"
        - "TASK"
        - "WORKFLOW"
        - "LAUNCH_PLAN"
        x-exportParamName: "ResourceType"
      - name: "project"
        in: "path"
        description: "Name of the project that contains the identifiers."
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "domain"
        in: "path"
        description: "Name of the domain the identifiers belongs to within the project."
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "limit"
        in: "query"
        description: "Indicates the number of resources to be returned."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "token"
        in: "query"
        description: "In the case of multiple pages of results, the server-provided\
          \ token can be used to fetch the next page\nin a query.\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "sort_by.key"
        in: "query"
        description: "Indicates an attribute to sort the response values.\nTODO(katrogan):\
          \ Add string validation here. This should never be empty."
        required: false
        type: "string"
        x-exportParamName: "SortByKey"
        x-optionalDataType: "String"
      - name: "sort_by.direction"
        in: "query"
        description: "Indicates the direction to apply sort key for response values.\n\
          +optional."
        required: false
        type: "string"
        default: "DESCENDING"
        enum:
        - "DESCENDING"
        - "ASCENDING"
        x-exportParamName: "SortByDirection"
        x-optionalDataType: "String"
      - name: "filters"
        in: "query"
        description: "Indicates a list of filters passed as string.\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminNamedEntityList"
  /api/v1/node_executions/{id.execution_id.project}/{id.execution_id.domain}/{id.execution_id.name}/{id.node_id}:
    get:
      tags:
      - "AdminService"
      description: "Retrieve an existing node execution."
      operationId: "GetNodeExecution"
      parameters:
      - name: "id.execution_id.project"
        in: "path"
        description: "Name of the project the resource belongs to."
        required: true
        type: "string"
        x-exportParamName: "IdExecutionIdProject"
      - name: "id.execution_id.domain"
        in: "path"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
        required: true
        type: "string"
        x-exportParamName: "IdExecutionIdDomain"
      - name: "id.execution_id.name"
        in: "path"
        description: "User or system provided value for the resource."
        required: true
        type: "string"
        x-exportParamName: "IdExecutionIdName"
      - name: "id.node_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "IdNodeId"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/flyteidladminNodeExecution"
  /api/v1/node_executions/{workflow_execution_id.project}/{workflow_execution_id.domain}/{workflow_execution_id.name}:
    get:
      tags:
      - "AdminService"
      description: "Fetch existing node executions matching input filters."
      operationId: "ListNodeExecutions"
      parameters:
      - name: "workflow_execution_id.project"
        in: "path"
        description: "Name of the project the resource belongs to."
        required: true
        type: "string"
        x-exportParamName: "WorkflowExecutionIdProject"
      - name: "workflow_execution_id.domain"
        in: "path"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
        required: true
        type: "string"
        x-exportParamName: "WorkflowExecutionIdDomain"
      - name: "workflow_execution_id.name"
        in: "path"
        description: "User or system provided value for the resource."
        required: true
        type: "string"
        x-exportParamName: "WorkflowExecutionIdName"
      - name: "limit"
        in: "query"
        description: "Indicates the number of resources to be returned."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "token"
        in: "query"
        description: "In the case of multiple pages of results, the, server-provided\
          \ token can be used to fetch the next page\nin a query.\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "filters"
        in: "query"
        description: "Indicates a list of filters passed as string.\nMore info on\
          \ constructing filters : <Link>\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      - name: "sort_by.key"
        in: "query"
        description: "Indicates an attribute to sort the response values.\nTODO(katrogan):\
          \ Add string validation here. This should never be empty."
        required: false
        type: "string"
        x-exportParamName: "SortByKey"
        x-optionalDataType: "String"
      - name: "sort_by.direction"
        in: "query"
        description: "Indicates the direction to apply sort key for response values.\n\
          +optional."
        required: false
        type: "string"
        default: "DESCENDING"
        enum:
        - "DESCENDING"
        - "ASCENDING"
        x-exportParamName: "SortByDirection"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminNodeExecutionList"
  /api/v1/project_domain_attributes/{attributes.project}/{attributes.domain}:
    put:
      tags:
      - "AdminService"
      description: "Update the customized resource attributes associated with a project-domain\
        \ combination"
      operationId: "UpdateProjectDomainAttributes"
      parameters:
      - name: "attributes.project"
        in: "path"
        description: "Unique project id for which this set of attributes will be applied."
        required: true
        type: "string"
        x-exportParamName: "AttributesProject"
      - name: "attributes.domain"
        in: "path"
        description: "Unique domain id for which this set of attributes will be applied."
        required: true
        type: "string"
        x-exportParamName: "AttributesDomain"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/adminProjectDomainAttributesUpdateRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminProjectDomainAttributesUpdateResponse"
  /api/v1/project_domain_attributes/{project}/{domain}:
    get:
      tags:
      - "AdminService"
      description: "Retrieve the customized resource attributes associated with a\
        \ project-domain combination"
      operationId: "GetProjectDomainAttributes"
      parameters:
      - name: "project"
        in: "path"
        description: "Unique project id which this set of attributes references."
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "domain"
        in: "path"
        description: "Unique domain id which this set of attributes references."
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "resource_type"
        in: "query"
        description: " - TASK_RESOURCE: Applies to customizable task resource requests\
          \ and limits.\n - CLUSTER_RESOURCE: Applies to configuring templated kubernetes\
          \ cluster resources.\n - EXECUTION_QUEUE: Configures task and dynamic task\
          \ execution queue assignment.\n - EXECUTION_CLUSTER_LABEL: Configures the\
          \ K8s cluster label to be used for execution to be run"
        required: false
        type: "string"
        default: "TASK_RESOURCE"
        enum:
        - "TASK_RESOURCE"
        - "CLUSTER_RESOURCE"
        - "EXECUTION_QUEUE"
        - "EXECUTION_CLUSTER_LABEL"
        x-exportParamName: "ResourceType"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminProjectDomainAttributesGetResponse"
    delete:
      tags:
      - "AdminService"
      description: "Delete the customized resource attributes associated with a project-domain\
        \ combination"
      operationId: "DeleteProjectDomainAttributes"
      parameters:
      - name: "project"
        in: "path"
        description: "Unique project id which this set of attributes references."
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "domain"
        in: "path"
        description: "Unique domain id which this set of attributes references."
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/adminProjectDomainAttributesDeleteRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminProjectDomainAttributesDeleteResponse"
  /api/v1/projects:
    get:
      tags:
      - "AdminService"
      description: "Fetch registered projects."
      operationId: "ListProjects"
      parameters: []
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminProjects"
    post:
      tags:
      - "AdminService"
      description: "Register a project."
      operationId: "RegisterProject"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/adminProjectRegisterRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminProjectRegisterResponse"
  ? /api/v1/task_executions/{id.node_execution_id.execution_id.project}/{id.node_execution_id.execution_id.domain}/{id.node_execution_id.execution_id.name}/{id.node_execution_id.node_id}/{id.task_id.project}/{id.task_id.domain}/{id.task_id.name}/{id.task_id.version}/{id.retry_attempt}
  : get:
      tags:
      - "AdminService"
      description: "Retrieve an existing task execution."
      operationId: "GetTaskExecution"
      parameters:
      - name: "id.node_execution_id.execution_id.project"
        in: "path"
        description: "Name of the project the resource belongs to."
        required: true
        type: "string"
        x-exportParamName: "IdNodeExecutionIdExecutionIdProject"
      - name: "id.node_execution_id.execution_id.domain"
        in: "path"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
        required: true
        type: "string"
        x-exportParamName: "IdNodeExecutionIdExecutionIdDomain"
      - name: "id.node_execution_id.execution_id.name"
        in: "path"
        description: "User or system provided value for the resource."
        required: true
        type: "string"
        x-exportParamName: "IdNodeExecutionIdExecutionIdName"
      - name: "id.node_execution_id.node_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "IdNodeExecutionIdNodeId"
      - name: "id.task_id.project"
        in: "path"
        description: "Name of the project the resource belongs to."
        required: true
        type: "string"
        x-exportParamName: "IdTaskIdProject"
      - name: "id.task_id.domain"
        in: "path"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
        required: true
        type: "string"
        x-exportParamName: "IdTaskIdDomain"
      - name: "id.task_id.name"
        in: "path"
        description: "User provided value for the resource."
        required: true
        type: "string"
        x-exportParamName: "IdTaskIdName"
      - name: "id.task_id.version"
        in: "path"
        description: "Specific version of the resource."
        required: true
        type: "string"
        x-exportParamName: "IdTaskIdVersion"
      - name: "id.retry_attempt"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "IdRetryAttempt"
      - name: "id.task_id.resource_type"
        in: "query"
        description: "Identifies the specific type of resource that this identifer\
          \ corresponds to."
        required: false
        type: "string"
        default: "UNSPECIFIED"
        enum:
        - "UNSPECIFIED"
        - "TASK"
        - "WORKFLOW"
        - "LAUNCH_PLAN"
        x-exportParamName: "IdTaskIdResourceType"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/flyteidladminTaskExecution"
  ? /api/v1/task_executions/{node_execution_id.execution_id.project}/{node_execution_id.execution_id.domain}/{node_execution_id.execution_id.name}/{node_execution_id.node_id}
  : get:
      tags:
      - "AdminService"
      description: "Fetch existing task executions matching input filters."
      operationId: "ListTaskExecutions"
      parameters:
      - name: "node_execution_id.execution_id.project"
        in: "path"
        description: "Name of the project the resource belongs to."
        required: true
        type: "string"
        x-exportParamName: "NodeExecutionIdExecutionIdProject"
      - name: "node_execution_id.execution_id.domain"
        in: "path"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
        required: true
        type: "string"
        x-exportParamName: "NodeExecutionIdExecutionIdDomain"
      - name: "node_execution_id.execution_id.name"
        in: "path"
        description: "User or system provided value for the resource."
        required: true
        type: "string"
        x-exportParamName: "NodeExecutionIdExecutionIdName"
      - name: "node_execution_id.node_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NodeExecutionIdNodeId"
      - name: "limit"
        in: "query"
        description: "Indicates the number of resources to be returned."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "token"
        in: "query"
        description: "In the case of multiple pages of results, the server-provided\
          \ token can be used to fetch the next page\nin a query.\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "filters"
        in: "query"
        description: "Indicates a list of filters passed as string.\nMore info on\
          \ constructing filters : <Link>\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      - name: "sort_by.key"
        in: "query"
        description: "Indicates an attribute to sort the response values.\nTODO(katrogan):\
          \ Add string validation here. This should never be empty."
        required: false
        type: "string"
        x-exportParamName: "SortByKey"
        x-optionalDataType: "String"
      - name: "sort_by.direction"
        in: "query"
        description: "Indicates the direction to apply sort key for response values.\n\
          +optional."
        required: false
        type: "string"
        default: "DESCENDING"
        enum:
        - "DESCENDING"
        - "ASCENDING"
        x-exportParamName: "SortByDirection"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminTaskExecutionList"
  /api/v1/task_ids/{project}/{domain}:
    get:
      tags:
      - "AdminService"
      description: "Fetch existing task definition identifiers matching input filters."
      operationId: "ListTaskIds"
      parameters:
      - name: "project"
        in: "path"
        description: "Name of the project that contains the identifiers."
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "domain"
        in: "path"
        description: "Name of the domain the identifiers belongs to within the project."
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "limit"
        in: "query"
        description: "Indicates the number of resources to be returned."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "token"
        in: "query"
        description: "In the case of multiple pages of results, the server-provided\
          \ token can be used to fetch the next page\nin a query.\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "sort_by.key"
        in: "query"
        description: "Indicates an attribute to sort the response values.\nTODO(katrogan):\
          \ Add string validation here. This should never be empty."
        required: false
        type: "string"
        x-exportParamName: "SortByKey"
        x-optionalDataType: "String"
      - name: "sort_by.direction"
        in: "query"
        description: "Indicates the direction to apply sort key for response values.\n\
          +optional."
        required: false
        type: "string"
        default: "DESCENDING"
        enum:
        - "DESCENDING"
        - "ASCENDING"
        x-exportParamName: "SortByDirection"
        x-optionalDataType: "String"
      - name: "filters"
        in: "query"
        description: "Indicates a list of filters passed as string.\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminNamedEntityIdentifierList"
  /api/v1/tasks:
    post:
      tags:
      - "AdminService"
      description: "Create and register a task definition."
      operationId: "CreateTask"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/adminTaskCreateRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminTaskCreateResponse"
        400:
          description: "Returned for bad request that may have failed validation."
          schema: {}
        409:
          description: "Returned for a request that references an identical entity\
            \ that has already been registered."
          schema: {}
  /api/v1/tasks/{id.project}/{id.domain}:
    get:
      tags:
      - "AdminService"
      description: "Fetch existing task definitions matching input filters."
      operationId: "ListTasks2"
      parameters:
      - name: "id.project"
        in: "path"
        description: "Name of the project the resource belongs to."
        required: true
        type: "string"
        x-exportParamName: "IdProject"
      - name: "id.domain"
        in: "path"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
        required: true
        type: "string"
        x-exportParamName: "IdDomain"
      - name: "id.name"
        in: "query"
        description: "User provided value for the resource.\nThe combination of project\
          \ + domain + name uniquely identifies the resource.\n+optional - in certain\
          \ contexts - like 'List API', 'Launch plans'."
        required: false
        type: "string"
        x-exportParamName: "IdName"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "Indicates the number of resources to be returned."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "token"
        in: "query"
        description: "In the case of multiple pages of results, this server-provided\
          \ token can be used to fetch the next page\nin a query.\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "filters"
        in: "query"
        description: "Indicates a list of filters passed as string.\nMore info on\
          \ constructing filters : <Link>\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      - name: "sort_by.key"
        in: "query"
        description: "Indicates an attribute to sort the response values.\nTODO(katrogan):\
          \ Add string validation here. This should never be empty."
        required: false
        type: "string"
        x-exportParamName: "SortByKey"
        x-optionalDataType: "String"
      - name: "sort_by.direction"
        in: "query"
        description: "Indicates the direction to apply sort key for response values.\n\
          +optional."
        required: false
        type: "string"
        default: "DESCENDING"
        enum:
        - "DESCENDING"
        - "ASCENDING"
        x-exportParamName: "SortByDirection"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminTaskList"
  /api/v1/tasks/{id.project}/{id.domain}/{id.name}:
    get:
      tags:
      - "AdminService"
      description: "Fetch existing task definitions matching input filters."
      operationId: "ListTasks"
      parameters:
      - name: "id.project"
        in: "path"
        description: "Name of the project the resource belongs to."
        required: true
        type: "string"
        x-exportParamName: "IdProject"
      - name: "id.domain"
        in: "path"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
        required: true
        type: "string"
        x-exportParamName: "IdDomain"
      - name: "id.name"
        in: "path"
        description: "User provided value for the resource.\nThe combination of project\
          \ + domain + name uniquely identifies the resource.\n+optional - in certain\
          \ contexts - like 'List API', 'Launch plans'"
        required: true
        type: "string"
        x-exportParamName: "IdName"
      - name: "limit"
        in: "query"
        description: "Indicates the number of resources to be returned."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "token"
        in: "query"
        description: "In the case of multiple pages of results, this server-provided\
          \ token can be used to fetch the next page\nin a query.\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "filters"
        in: "query"
        description: "Indicates a list of filters passed as string.\nMore info on\
          \ constructing filters : <Link>\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      - name: "sort_by.key"
        in: "query"
        description: "Indicates an attribute to sort the response values.\nTODO(katrogan):\
          \ Add string validation here. This should never be empty."
        required: false
        type: "string"
        x-exportParamName: "SortByKey"
        x-optionalDataType: "String"
      - name: "sort_by.direction"
        in: "query"
        description: "Indicates the direction to apply sort key for response values.\n\
          +optional."
        required: false
        type: "string"
        default: "DESCENDING"
        enum:
        - "DESCENDING"
        - "ASCENDING"
        x-exportParamName: "SortByDirection"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminTaskList"
  /api/v1/tasks/{id.project}/{id.domain}/{id.name}/{id.version}:
    get:
      tags:
      - "AdminService"
      description: "Retrieve an existing task definition."
      operationId: "GetTask"
      parameters:
      - name: "id.project"
        in: "path"
        description: "Name of the project the resource belongs to."
        required: true
        type: "string"
        x-exportParamName: "IdProject"
      - name: "id.domain"
        in: "path"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
        required: true
        type: "string"
        x-exportParamName: "IdDomain"
      - name: "id.name"
        in: "path"
        description: "User provided value for the resource."
        required: true
        type: "string"
        x-exportParamName: "IdName"
      - name: "id.version"
        in: "path"
        description: "Specific version of the resource."
        required: true
        type: "string"
        x-exportParamName: "IdVersion"
      - name: "id.resource_type"
        in: "query"
        description: "Identifies the specific type of resource that this identifer\
          \ corresponds to."
        required: false
        type: "string"
        default: "UNSPECIFIED"
        enum:
        - "UNSPECIFIED"
        - "TASK"
        - "WORKFLOW"
        - "LAUNCH_PLAN"
        x-exportParamName: "IdResourceType"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminTask"
  /api/v1/workflow_attributes/{attributes.project}/{attributes.domain}/{attributes.workflow}:
    put:
      tags:
      - "AdminService"
      description: "Update the customized resource attributes associated with a project,\
        \ domain and workflow combination"
      operationId: "UpdateWorkflowAttributes"
      parameters:
      - name: "attributes.project"
        in: "path"
        description: "Unique project id for which this set of attributes will be applied."
        required: true
        type: "string"
        x-exportParamName: "AttributesProject"
      - name: "attributes.domain"
        in: "path"
        description: "Unique domain id for which this set of attributes will be applied."
        required: true
        type: "string"
        x-exportParamName: "AttributesDomain"
      - name: "attributes.workflow"
        in: "path"
        description: "Workflow name for which this set of attributes will be applied."
        required: true
        type: "string"
        x-exportParamName: "AttributesWorkflow"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/adminWorkflowAttributesUpdateRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminWorkflowAttributesUpdateResponse"
  /api/v1/workflow_attributes/{project}/{domain}/{workflow}:
    get:
      tags:
      - "AdminService"
      description: "Retrieve the customized resource attributes associated with a\
        \ project, domain and workflow combination"
      operationId: "GetWorkflowAttributes"
      parameters:
      - name: "project"
        in: "path"
        description: "Unique project id which this set of attributes references."
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "domain"
        in: "path"
        description: "Unique domain id which this set of attributes references."
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "workflow"
        in: "path"
        description: "Workflow name which this set of attributes references."
        required: true
        type: "string"
        x-exportParamName: "Workflow"
      - name: "resource_type"
        in: "query"
        description: " - TASK_RESOURCE: Applies to customizable task resource requests\
          \ and limits.\n - CLUSTER_RESOURCE: Applies to configuring templated kubernetes\
          \ cluster resources.\n - EXECUTION_QUEUE: Configures task and dynamic task\
          \ execution queue assignment.\n - EXECUTION_CLUSTER_LABEL: Configures the\
          \ K8s cluster label to be used for execution to be run"
        required: false
        type: "string"
        default: "TASK_RESOURCE"
        enum:
        - "TASK_RESOURCE"
        - "CLUSTER_RESOURCE"
        - "EXECUTION_QUEUE"
        - "EXECUTION_CLUSTER_LABEL"
        x-exportParamName: "ResourceType"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminWorkflowAttributesGetResponse"
    delete:
      tags:
      - "AdminService"
      description: "Delete the customized resource attributes associated with a project,\
        \ domain and workflow combination"
      operationId: "DeleteWorkflowAttributes"
      parameters:
      - name: "project"
        in: "path"
        description: "Unique project id which this set of attributes references."
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "domain"
        in: "path"
        description: "Unique domain id which this set of attributes references."
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "workflow"
        in: "path"
        description: "Workflow name which this set of attributes references."
        required: true
        type: "string"
        x-exportParamName: "Workflow"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/adminWorkflowAttributesDeleteRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminWorkflowAttributesDeleteResponse"
  /api/v1/workflow_ids/{project}/{domain}:
    get:
      tags:
      - "AdminService"
      description: "Fetch an existing workflow definition identifiers matching input\
        \ filters."
      operationId: "ListWorkflowIds"
      parameters:
      - name: "project"
        in: "path"
        description: "Name of the project that contains the identifiers."
        required: true
        type: "string"
        x-exportParamName: "Project"
      - name: "domain"
        in: "path"
        description: "Name of the domain the identifiers belongs to within the project."
        required: true
        type: "string"
        x-exportParamName: "Domain"
      - name: "limit"
        in: "query"
        description: "Indicates the number of resources to be returned."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "token"
        in: "query"
        description: "In the case of multiple pages of results, the server-provided\
          \ token can be used to fetch the next page\nin a query.\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "sort_by.key"
        in: "query"
        description: "Indicates an attribute to sort the response values.\nTODO(katrogan):\
          \ Add string validation here. This should never be empty."
        required: false
        type: "string"
        x-exportParamName: "SortByKey"
        x-optionalDataType: "String"
      - name: "sort_by.direction"
        in: "query"
        description: "Indicates the direction to apply sort key for response values.\n\
          +optional."
        required: false
        type: "string"
        default: "DESCENDING"
        enum:
        - "DESCENDING"
        - "ASCENDING"
        x-exportParamName: "SortByDirection"
        x-optionalDataType: "String"
      - name: "filters"
        in: "query"
        description: "Indicates a list of filters passed as string.\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminNamedEntityIdentifierList"
  /api/v1/workflows:
    post:
      tags:
      - "AdminService"
      description: "Create and register a workflow definition."
      operationId: "CreateWorkflow"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/adminWorkflowCreateRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminWorkflowCreateResponse"
        400:
          description: "Returned for bad request that may have failed validation."
          schema: {}
        409:
          description: "Returned for a request that references an identical entity\
            \ that has already been registered."
          schema: {}
  /api/v1/workflows/{id.project}/{id.domain}:
    get:
      tags:
      - "AdminService"
      description: "Fetch existing workflow definitions matching input filters."
      operationId: "ListWorkflows2"
      parameters:
      - name: "id.project"
        in: "path"
        description: "Name of the project the resource belongs to."
        required: true
        type: "string"
        x-exportParamName: "IdProject"
      - name: "id.domain"
        in: "path"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
        required: true
        type: "string"
        x-exportParamName: "IdDomain"
      - name: "id.name"
        in: "query"
        description: "User provided value for the resource.\nThe combination of project\
          \ + domain + name uniquely identifies the resource.\n+optional - in certain\
          \ contexts - like 'List API', 'Launch plans'."
        required: false
        type: "string"
        x-exportParamName: "IdName"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "Indicates the number of resources to be returned."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "token"
        in: "query"
        description: "In the case of multiple pages of results, this server-provided\
          \ token can be used to fetch the next page\nin a query.\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "filters"
        in: "query"
        description: "Indicates a list of filters passed as string.\nMore info on\
          \ constructing filters : <Link>\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      - name: "sort_by.key"
        in: "query"
        description: "Indicates an attribute to sort the response values.\nTODO(katrogan):\
          \ Add string validation here. This should never be empty."
        required: false
        type: "string"
        x-exportParamName: "SortByKey"
        x-optionalDataType: "String"
      - name: "sort_by.direction"
        in: "query"
        description: "Indicates the direction to apply sort key for response values.\n\
          +optional."
        required: false
        type: "string"
        default: "DESCENDING"
        enum:
        - "DESCENDING"
        - "ASCENDING"
        x-exportParamName: "SortByDirection"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminWorkflowList"
  /api/v1/workflows/{id.project}/{id.domain}/{id.name}:
    get:
      tags:
      - "AdminService"
      description: "Fetch existing workflow definitions matching input filters."
      operationId: "ListWorkflows"
      parameters:
      - name: "id.project"
        in: "path"
        description: "Name of the project the resource belongs to."
        required: true
        type: "string"
        x-exportParamName: "IdProject"
      - name: "id.domain"
        in: "path"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
        required: true
        type: "string"
        x-exportParamName: "IdDomain"
      - name: "id.name"
        in: "path"
        description: "User provided value for the resource.\nThe combination of project\
          \ + domain + name uniquely identifies the resource.\n+optional - in certain\
          \ contexts - like 'List API', 'Launch plans'"
        required: true
        type: "string"
        x-exportParamName: "IdName"
      - name: "limit"
        in: "query"
        description: "Indicates the number of resources to be returned."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int64"
      - name: "token"
        in: "query"
        description: "In the case of multiple pages of results, this server-provided\
          \ token can be used to fetch the next page\nin a query.\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "filters"
        in: "query"
        description: "Indicates a list of filters passed as string.\nMore info on\
          \ constructing filters : <Link>\n+optional."
        required: false
        type: "string"
        x-exportParamName: "Filters"
        x-optionalDataType: "String"
      - name: "sort_by.key"
        in: "query"
        description: "Indicates an attribute to sort the response values.\nTODO(katrogan):\
          \ Add string validation here. This should never be empty."
        required: false
        type: "string"
        x-exportParamName: "SortByKey"
        x-optionalDataType: "String"
      - name: "sort_by.direction"
        in: "query"
        description: "Indicates the direction to apply sort key for response values.\n\
          +optional."
        required: false
        type: "string"
        default: "DESCENDING"
        enum:
        - "DESCENDING"
        - "ASCENDING"
        x-exportParamName: "SortByDirection"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminWorkflowList"
  /api/v1/workflows/{id.project}/{id.domain}/{id.name}/{id.version}:
    get:
      tags:
      - "AdminService"
      description: "Retrieve an existing workflow definition."
      operationId: "GetWorkflow"
      parameters:
      - name: "id.project"
        in: "path"
        description: "Name of the project the resource belongs to."
        required: true
        type: "string"
        x-exportParamName: "IdProject"
      - name: "id.domain"
        in: "path"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
        required: true
        type: "string"
        x-exportParamName: "IdDomain"
      - name: "id.name"
        in: "path"
        description: "User provided value for the resource."
        required: true
        type: "string"
        x-exportParamName: "IdName"
      - name: "id.version"
        in: "path"
        description: "Specific version of the resource."
        required: true
        type: "string"
        x-exportParamName: "IdVersion"
      - name: "id.resource_type"
        in: "query"
        description: "Identifies the specific type of resource that this identifer\
          \ corresponds to."
        required: false
        type: "string"
        default: "UNSPECIFIED"
        enum:
        - "UNSPECIFIED"
        - "TASK"
        - "WORKFLOW"
        - "LAUNCH_PLAN"
        x-exportParamName: "IdResourceType"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/adminWorkflow"
definitions:
  BlobTypeBlobDimensionality:
    type: "string"
    enum:
    - "SINGLE"
    - "MULTIPART"
    default: "SINGLE"
  ComparisonExpressionOperator:
    type: "string"
    title: "Binary Operator for each expression"
    description: "- GT: Greater Than\n - LT: Less Than"
    enum:
    - "EQ"
    - "NEQ"
    - "GT"
    - "GTE"
    - "LT"
    - "LTE"
    default: "EQ"
  ConjunctionExpressionLogicalOperator:
    type: "string"
    title: "Nested conditions. They can be conjoined using AND / OR\nOrder of evaluation\
      \ is not important as the operators are Commutative"
    description: "- AND: Conjunction"
    enum:
    - "AND"
    - "OR"
    default: "AND"
  ConnectionSetIdList:
    type: "object"
    properties:
      ids:
        type: "array"
        items:
          type: "string"
    example:
      ids:
      - "ids"
      - "ids"
  ExecutionErrorErrorKind:
    type: "string"
    title: "Error type: System or User"
    enum:
    - "UNKNOWN"
    - "USER"
    - "SYSTEM"
    default: "UNKNOWN"
  ExecutionMetadataExecutionMode:
    type: "string"
    description: "The method by which this execution was launched.\n\n - MANUAL: The\
      \ default execution mode, MANUAL implies that an execution was launched by an\
      \ individual.\n - SCHEDULED: A schedule triggered this execution launch.\n -\
      \ SYSTEM: A system process was responsible for launching this execution rather\
      \ an individual.\n - RELAUNCH: This execution was launched with identical inputs\
      \ as a previous execution.\n - CHILD_WORKFLOW: This execution was triggered\
      \ by another execution."
    enum:
    - "MANUAL"
    - "SCHEDULED"
    - "SYSTEM"
    - "RELAUNCH"
    - "CHILD_WORKFLOW"
    default: "MANUAL"
  ResourcesResourceEntry:
    type: "object"
    properties:
      name:
        description: "Resource name."
        $ref: "#/definitions/ResourcesResourceName"
      value:
        type: "string"
        title: "Value must be a valid k8s quantity. See\nhttps://github.com/kubernetes/apimachinery/blob/master/pkg/api/resource/quantity.go#L30-L80"
    description: "Encapsulates a resource name and value."
    example:
      name: {}
      value: "value"
  ResourcesResourceName:
    type: "string"
    description: "Known resource names."
    enum:
    - "UNKNOWN"
    - "CPU"
    - "GPU"
    - "MEMORY"
    - "STORAGE"
    default: "UNKNOWN"
  RuntimeMetadataRuntimeType:
    type: "string"
    enum:
    - "OTHER"
    - "FLYTE_SDK"
    default: "OTHER"
  SchemaColumnSchemaColumnType:
    type: "string"
    enum:
    - "INTEGER"
    - "FLOAT"
    - "STRING"
    - "BOOLEAN"
    - "DATETIME"
    - "DURATION"
    default: "INTEGER"
  SchemaTypeSchemaColumn:
    type: "object"
    properties:
      name:
        type: "string"
        title: "A unique name -within the schema type- for the column"
      type:
        description: "The column type. This allows a limited set of types currently."
        $ref: "#/definitions/SchemaColumnSchemaColumnType"
    example:
      name: "name"
      type: {}
  SortDirection:
    type: "string"
    enum:
    - "DESCENDING"
    - "ASCENDING"
    default: "DESCENDING"
  TaskLogMessageFormat:
    type: "string"
    enum:
    - "UNKNOWN"
    - "CSV"
    - "JSON"
    default: "UNKNOWN"
  adminAbortMetadata:
    type: "object"
    properties:
      cause:
        type: "string"
        description: "In the case of a user-specified abort, this will pass along\
          \ the user-supplied cause."
      principal:
        type: "string"
        title: "Identifies the entity (if any) responsible for terminating the execution"
    example:
      principal: "principal"
      cause: "cause"
  adminAnnotations:
    type: "object"
    properties:
      values:
        type: "object"
        description: "Map of custom annotations to be applied to the execution resource."
        additionalProperties:
          type: "string"
    description: "Annotation values to be applied to an execution resource.\nIn the\
      \ future a mode (e.g. OVERRIDE, APPEND, etc) can be defined\nto specify how\
      \ to merge annotations defined at registration and execution time."
    example:
      values:
        key: "values"
  adminAuth:
    type: "object"
    properties:
      assumable_iam_role:
        type: "string"
      kubernetes_service_account:
        type: "string"
    description: "Defines permissions associated with executions created by this launch\
      \ plan spec."
    example:
      kubernetes_service_account: "kubernetes_service_account"
      assumable_iam_role: "assumable_iam_role"
  adminAuthRole:
    type: "object"
    properties:
      assumable_iam_role:
        type: "string"
      kubernetes_service_account:
        type: "string"
    description: "Defines permissions associated with executions."
    example:
      kubernetes_service_account: "kubernetes_service_account"
      assumable_iam_role: "assumable_iam_role"
  adminClusterResourceAttributes:
    type: "object"
    properties:
      attributes:
        type: "object"
        description: "Custom resource attributes which will be applied in cluster\
          \ resource creation (e.g. quotas).\nMap keys are the *case-sensitive* names\
          \ of variables in templatized resource files.\nMap values should be the\
          \ custom values which get substituted during resource creation."
        additionalProperties:
          type: "string"
    example:
      attributes:
        key: "attributes"
  adminDomain:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
        description: "Display name."
    description: "Namespace within a project commonly used to differentiate between\
      \ different service instances.\ne.g. \"production\", \"development\", etc."
    example:
      name: "name"
      id: "id"
  adminEmailNotification:
    type: "object"
    properties:
      recipients_email:
        type: "array"
        description: "The list of email addresses recipients for this notification."
        items:
          type: "string"
    example:
      recipients_email:
      - "recipients_email"
      - "recipients_email"
  adminExecution:
    type: "object"
    properties:
      id:
        description: "Unique identifier of the workflow execution."
        $ref: "#/definitions/coreWorkflowExecutionIdentifier"
      spec:
        description: "User-provided configuration and inputs for launching the execution."
        $ref: "#/definitions/adminExecutionSpec"
      closure:
        description: "Execution results."
        $ref: "#/definitions/adminExecutionClosure"
    description: "A workflow execution represents an instantiated workflow, including\
      \ all inputs and additional\nmetadata as well as computed results included state,\
      \ outputs, and duration-based attributes.\nUsed as a response object used in\
      \ Get and List execution requests."
    example:
      id:
        domain: "domain"
        name: "name"
        project: "project"
      closure:
        outputs:
          values:
            literals: {}
          uri: "uri"
        phase: {}
        duration: "duration"
        workflow_id:
          domain: "domain"
          resource_type: {}
          name: "name"
          project: "project"
          version: "version"
        computed_inputs:
          literals: {}
        abort_metadata:
          principal: "principal"
          cause: "cause"
        updated_at: "2000-01-23T04:56:07.000+00:00"
        started_at: "2000-01-23T04:56:07.000+00:00"
        created_at: "2000-01-23T04:56:07.000+00:00"
        error:
          code: "code"
          kind: {}
          message: "message"
          error_uri: "error_uri"
        abort_cause: "abort_cause"
        notifications:
        - pager_duty:
            recipients_email:
            - "recipients_email"
            - "recipients_email"
          slack:
            recipients_email:
            - "recipients_email"
            - "recipients_email"
          phases:
          - {}
          - {}
          email:
            recipients_email:
            - "recipients_email"
            - "recipients_email"
        - pager_duty:
            recipients_email:
            - "recipients_email"
            - "recipients_email"
          slack:
            recipients_email:
            - "recipients_email"
            - "recipients_email"
          phases:
          - {}
          - {}
          email:
            recipients_email:
            - "recipients_email"
            - "recipients_email"
      spec:
        launch_plan:
          domain: "domain"
          resource_type: {}
          name: "name"
          project: "project"
          version: "version"
        metadata:
          mode: {}
          principal: "principal"
          parent_node_execution:
            execution_id:
              domain: "domain"
              name: "name"
              project: "project"
            node_id: "node_id"
          reference_execution:
            domain: "domain"
            name: "name"
            project: "project"
          scheduled_at: "2000-01-23T04:56:07.000+00:00"
          nesting: 0
          system_metadata:
            execution_cluster: "execution_cluster"
        disable_all: true
        inputs:
          literals: {}
        annotations:
          values:
            key: "values"
        notifications:
          notifications:
          - pager_duty:
              recipients_email:
              - "recipients_email"
              - "recipients_email"
            slack:
              recipients_email:
              - "recipients_email"
              - "recipients_email"
            phases:
            - {}
            - {}
            email:
              recipients_email:
              - "recipients_email"
              - "recipients_email"
          - pager_duty:
              recipients_email:
              - "recipients_email"
              - "recipients_email"
            slack:
              recipients_email:
              - "recipients_email"
              - "recipients_email"
            phases:
            - {}
            - {}
            email:
              recipients_email:
              - "recipients_email"
              - "recipients_email"
        labels:
          values:
            key: "values"
        auth_role:
          kubernetes_service_account: "kubernetes_service_account"
          assumable_iam_role: "assumable_iam_role"
  adminExecutionClosure:
    type: "object"
    properties:
      outputs:
        description: "A map of outputs in the case of a successful execution."
        $ref: "#/definitions/adminLiteralMapBlob"
      error:
        description: "Error information in the case of a failed execution."
        $ref: "#/definitions/coreExecutionError"
      abort_cause:
        type: "string"
        description: "In the case of a user-specified abort, this will pass along\
          \ the user-supplied cause."
      abort_metadata:
        description: "In the case of a user-specified abort, this will pass along\
          \ the user and their supplied cause."
        $ref: "#/definitions/adminAbortMetadata"
      computed_inputs:
        title: "Inputs computed and passed for execution.\ncomputed_inputs depends\
          \ on inputs in ExecutionSpec, fixed and default inputs in launch plan"
        $ref: "#/definitions/coreLiteralMap"
      phase:
        description: "Most recent recorded phase for the execution."
        $ref: "#/definitions/coreWorkflowExecutionPhase"
      started_at:
        type: "string"
        format: "date-time"
        description: "Reported ime at which the execution began running."
      duration:
        type: "string"
        description: "The amount of time the execution spent running."
      created_at:
        type: "string"
        format: "date-time"
        description: "Reported time at which the execution was created."
      updated_at:
        type: "string"
        format: "date-time"
        description: "Reported time at which the execution was last updated."
      notifications:
        type: "array"
        description: "The notification settings to use after merging the CreateExecutionRequest\
          \ and the launch plan\nnotification settings. An execution launched with\
          \ notifications will always prefer that definition\nto notifications defined\
          \ statically in a launch plan."
        items:
          $ref: "#/definitions/adminNotification"
      workflow_id:
        description: "Identifies the workflow definition for this execution."
        $ref: "#/definitions/coreIdentifier"
    title: "Encapsulates the results of the Execution"
    example:
      outputs:
        values:
          literals: {}
        uri: "uri"
      phase: {}
      duration: "duration"
      workflow_id:
        domain: "domain"
        resource_type: {}
        name: "name"
        project: "project"
        version: "version"
      computed_inputs:
        literals: {}
      abort_metadata:
        principal: "principal"
        cause: "cause"
      updated_at: "2000-01-23T04:56:07.000+00:00"
      started_at: "2000-01-23T04:56:07.000+00:00"
      created_at: "2000-01-23T04:56:07.000+00:00"
      error:
        code: "code"
        kind: {}
        message: "message"
        error_uri: "error_uri"
      abort_cause: "abort_cause"
      notifications:
      - pager_duty:
          recipients_email:
          - "recipients_email"
          - "recipients_email"
        slack:
          recipients_email:
          - "recipients_email"
          - "recipients_email"
        phases:
        - {}
        - {}
        email:
          recipients_email:
          - "recipients_email"
          - "recipients_email"
      - pager_duty:
          recipients_email:
          - "recipients_email"
          - "recipients_email"
        slack:
          recipients_email:
          - "recipients_email"
          - "recipients_email"
        phases:
        - {}
        - {}
        email:
          recipients_email:
          - "recipients_email"
          - "recipients_email"
  adminExecutionClusterLabel:
    type: "object"
    properties:
      value:
        type: "string"
        title: "Label value to determine where the execution will be run"
    example:
      value: "value"
  adminExecutionCreateRequest:
    type: "object"
    properties:
      project:
        type: "string"
        description: "Name of the project the execution belongs to."
      domain:
        type: "string"
        description: "Name of the domain the execution belongs to. \nA domain can\
          \ be considered as a subset within a specific project."
      name:
        type: "string"
        title: "User provided value for the resource.\nIf none is provided the system\
          \ will generate a unique string.\n+optional"
      spec:
        description: "Additional fields necessary to launch the execution."
        $ref: "#/definitions/adminExecutionSpec"
      inputs:
        description: "The inputs required to start the execution. All required inputs\
          \ must be\nincluded in this map. If not required and not provided, defaults\
          \ apply."
        $ref: "#/definitions/coreLiteralMap"
    description: "Request to launch an execution with the given project, domain and\
      \ optionally name."
  adminExecutionCreateResponse:
    type: "object"
    properties:
      id:
        $ref: "#/definitions/coreWorkflowExecutionIdentifier"
    description: "The unique identifier for a successfully created execution.\nIf\
      \ the name was *not* specified in the create request, this identifier will include\
      \ a generated name."
    example:
      id:
        domain: "domain"
        name: "name"
        project: "project"
  adminExecutionList:
    type: "object"
    properties:
      executions:
        type: "array"
        items:
          $ref: "#/definitions/adminExecution"
      token:
        type: "string"
        description: "In the case of multiple pages of results, the server-provided\
          \ token can be used to fetch the next page\nin a query. If there are no\
          \ more results, this value will be empty."
    description: "Used as a response for request to list executions."
    example:
      executions:
      - id:
          domain: "domain"
          name: "name"
          project: "project"
        closure:
          outputs:
            values:
              literals: {}
            uri: "uri"
          phase: {}
          duration: "duration"
          workflow_id:
            domain: "domain"
            resource_type: {}
            name: "name"
            project: "project"
            version: "version"
          computed_inputs:
            literals: {}
          abort_metadata:
            principal: "principal"
            cause: "cause"
          updated_at: "2000-01-23T04:56:07.000+00:00"
          started_at: "2000-01-23T04:56:07.000+00:00"
          created_at: "2000-01-23T04:56:07.000+00:00"
          error:
            code: "code"
            kind: {}
            message: "message"
            error_uri: "error_uri"
          abort_cause: "abort_cause"
          notifications:
          - pager_duty:
              recipients_email:
              - "recipients_email"
              - "recipients_email"
            slack:
              recipients_email:
              - "recipients_email"
              - "recipients_email"
            phases:
            - {}
            - {}
            email:
              recipients_email:
              - "recipients_email"
              - "recipients_email"
          - pager_duty:
              recipients_email:
              - "recipients_email"
              - "recipients_email"
            slack:
              recipients_email:
              - "recipients_email"
              - "recipients_email"
            phases:
            - {}
            - {}
            email:
              recipients_email:
              - "recipients_email"
              - "recipients_email"
        spec:
          launch_plan:
            domain: "domain"
            resource_type: {}
            name: "name"
            project: "project"
            version: "version"
          metadata:
            mode: {}
            principal: "principal"
            parent_node_execution:
              execution_id:
                domain: "domain"
                name: "name"
                project: "project"
              node_id: "node_id"
            reference_execution:
              domain: "domain"
              name: "name"
              project: "project"
            scheduled_at: "2000-01-23T04:56:07.000+00:00"
            nesting: 0
            system_metadata:
              execution_cluster: "execution_cluster"
          disable_all: true
          inputs:
            literals: {}
          annotations:
            values:
              key: "values"
          notifications:
            notifications:
            - pager_duty:
                recipients_email:
                - "recipients_email"
                - "recipients_email"
              slack:
                recipients_email:
                - "recipients_email"
                - "recipients_email"
              phases:
              - {}
              - {}
              email:
                recipients_email:
                - "recipients_email"
                - "recipients_email"
            - pager_duty:
                recipients_email:
                - "recipients_email"
                - "recipients_email"
              slack:
                recipients_email:
                - "recipients_email"
                - "recipients_email"
              phases:
              - {}
              - {}
              email:
                recipients_email:
                - "recipients_email"
                - "recipients_email"
          labels:
            values:
              key: "values"
          auth_role:
            kubernetes_service_account: "kubernetes_service_account"
            assumable_iam_role: "assumable_iam_role"
      - id:
          domain: "domain"
          name: "name"
          project: "project"
        closure:
          outputs:
            values:
              literals: {}
            uri: "uri"
          phase: {}
          duration: "duration"
          workflow_id:
            domain: "domain"
            resource_type: {}
            name: "name"
            project: "project"
            version: "version"
          computed_inputs:
            literals: {}
          abort_metadata:
            principal: "principal"
            cause: "cause"
          updated_at: "2000-01-23T04:56:07.000+00:00"
          started_at: "2000-01-23T04:56:07.000+00:00"
          created_at: "2000-01-23T04:56:07.000+00:00"
          error:
            code: "code"
            kind: {}
            message: "message"
            error_uri: "error_uri"
          abort_cause: "abort_cause"
          notifications:
          - pager_duty:
              recipients_email:
              - "recipients_email"
              - "recipients_email"
            slack:
              recipients_email:
              - "recipients_email"
              - "recipients_email"
            phases:
            - {}
            - {}
            email:
              recipients_email:
              - "recipients_email"
              - "recipients_email"
          - pager_duty:
              recipients_email:
              - "recipients_email"
              - "recipients_email"
            slack:
              recipients_email:
              - "recipients_email"
              - "recipients_email"
            phases:
            - {}
            - {}
            email:
              recipients_email:
              - "recipients_email"
              - "recipients_email"
        spec:
          launch_plan:
            domain: "domain"
            resource_type: {}
            name: "name"
            project: "project"
            version: "version"
          metadata:
            mode: {}
            principal: "principal"
            parent_node_execution:
              execution_id:
                domain: "domain"
                name: "name"
                project: "project"
              node_id: "node_id"
            reference_execution:
              domain: "domain"
              name: "name"
              project: "project"
            scheduled_at: "2000-01-23T04:56:07.000+00:00"
            nesting: 0
            system_metadata:
              execution_cluster: "execution_cluster"
          disable_all: true
          inputs:
            literals: {}
          annotations:
            values:
              key: "values"
          notifications:
            notifications:
            - pager_duty:
                recipients_email:
                - "recipients_email"
                - "recipients_email"
              slack:
                recipients_email:
                - "recipients_email"
                - "recipients_email"
              phases:
              - {}
              - {}
              email:
                recipients_email:
                - "recipients_email"
                - "recipients_email"
            - pager_duty:
                recipients_email:
                - "recipients_email"
                - "recipients_email"
              slack:
                recipients_email:
                - "recipients_email"
                - "recipients_email"
              phases:
              - {}
              - {}
              email:
                recipients_email:
                - "recipients_email"
                - "recipients_email"
          labels:
            values:
              key: "values"
          auth_role:
            kubernetes_service_account: "kubernetes_service_account"
            assumable_iam_role: "assumable_iam_role"
      token: "token"
  adminExecutionMetadata:
    type: "object"
    properties:
      mode:
        $ref: "#/definitions/ExecutionMetadataExecutionMode"
      principal:
        type: "string"
        description: "Identifier of the entity that triggered this execution.\nFor\
          \ systems using back-end authentication any value set here will be discarded\
          \ in favor of the\nauthenticated user context."
      nesting:
        type: "integer"
        format: "int64"
        description: "Indicates the \"nestedness\" of this execution.\nIf a user launches\
          \ a workflow execution, the default nesting is 0.\nIf this execution further\
          \ launches a workflow (child workflow), the nesting level is incremented\
          \ by 0 => 1\nGenerally, if workflow at nesting level k launches a workflow\
          \ then the child workflow will have\nnesting = k + 1."
      scheduled_at:
        type: "string"
        format: "date-time"
        description: "For scheduled executions, the requested time for execution for\
          \ this specific schedule invocation."
      parent_node_execution:
        title: "Which subworkflow node launched this execution"
        $ref: "#/definitions/coreNodeExecutionIdentifier"
      reference_execution:
        description: "Optional, a reference workflow execution related to this execution.\n\
          In the case of a relaunch, this references the original workflow execution."
        $ref: "#/definitions/coreWorkflowExecutionIdentifier"
      system_metadata:
        description: "Optional, platform-specific metadata about the execution.\n\
          In this the future this may be gated behind an ACL or some sort of authorization."
        $ref: "#/definitions/adminSystemMetadata"
    description: "Represents attributes about an execution which are not required\
      \ to launch the execution but are useful to record.\nThese attributes are assigned\
      \ at launch time and do not change."
    example:
      mode: {}
      principal: "principal"
      parent_node_execution:
        execution_id:
          domain: "domain"
          name: "name"
          project: "project"
        node_id: "node_id"
      reference_execution:
        domain: "domain"
        name: "name"
        project: "project"
      scheduled_at: "2000-01-23T04:56:07.000+00:00"
      nesting: 0
      system_metadata:
        execution_cluster: "execution_cluster"
  adminExecutionQueueAttributes:
    type: "object"
    properties:
      tags:
        type: "array"
        description: "Tags used for assigning execution queues for tasks defined within\
          \ this project."
        items:
          type: "string"
    example:
      tags:
      - "tags"
      - "tags"
  adminExecutionRelaunchRequest:
    type: "object"
    properties:
      id:
        description: "Identifier of the workflow execution to relaunch."
        $ref: "#/definitions/coreWorkflowExecutionIdentifier"
      name:
        type: "string"
        title: "User provided value for the relaunched execution.\nIf none is provided\
          \ the system will generate a unique string.\n+optional"
    description: "Request to relaunch the referenced execution."
  adminExecutionSpec:
    type: "object"
    properties:
      launch_plan:
        title: "Launch plan to be executed"
        $ref: "#/definitions/coreIdentifier"
      inputs:
        title: "Input values to be passed for the execution"
        $ref: "#/definitions/coreLiteralMap"
      metadata:
        title: "Metadata for the execution"
        $ref: "#/definitions/adminExecutionMetadata"
      notifications:
        description: "List of notifications based on Execution status transitions\n\
          When this list is not empty it is used rather than any notifications defined\
          \ in the referenced launch plan.\nWhen this list is empty, the notifications\
          \ defined for the launch plan will be applied."
        $ref: "#/definitions/adminNotificationList"
      disable_all:
        type: "boolean"
        format: "boolean"
        description: "This should be set to true if all notifications are intended\
          \ to be disabled for this execution."
      labels:
        description: "Labels to apply to the execution resource."
        $ref: "#/definitions/adminLabels"
      annotations:
        description: "Annotations to apply to the execution resource."
        $ref: "#/definitions/adminAnnotations"
      auth_role:
        description: "Optional: auth override to apply this execution."
        $ref: "#/definitions/adminAuthRole"
    description: "An ExecutionSpec encompasses all data used to launch this execution.\
      \ The Spec does not change over the lifetime\nof an execution as it progresses\
      \ across phase changes.."
    example:
      launch_plan:
        domain: "domain"
        resource_type: {}
        name: "name"
        project: "project"
        version: "version"
      metadata:
        mode: {}
        principal: "principal"
        parent_node_execution:
          execution_id:
            domain: "domain"
            name: "name"
            project: "project"
          node_id: "node_id"
        reference_execution:
          domain: "domain"
          name: "name"
          project: "project"
        scheduled_at: "2000-01-23T04:56:07.000+00:00"
        nesting: 0
        system_metadata:
          execution_cluster: "execution_cluster"
      disable_all: true
      inputs:
        literals: {}
      annotations:
        values:
          key: "values"
      notifications:
        notifications:
        - pager_duty:
            recipients_email:
            - "recipients_email"
            - "recipients_email"
          slack:
            recipients_email:
            - "recipients_email"
            - "recipients_email"
          phases:
          - {}
          - {}
          email:
            recipients_email:
            - "recipients_email"
            - "recipients_email"
        - pager_duty:
            recipients_email:
            - "recipients_email"
            - "recipients_email"
          slack:
            recipients_email:
            - "recipients_email"
            - "recipients_email"
          phases:
          - {}
          - {}
          email:
            recipients_email:
            - "recipients_email"
            - "recipients_email"
      labels:
        values:
          key: "values"
      auth_role:
        kubernetes_service_account: "kubernetes_service_account"
        assumable_iam_role: "assumable_iam_role"
  adminExecutionTerminateRequest:
    type: "object"
    properties:
      id:
        description: "Uniquely identifies the individual workflow execution to be\
          \ terminated."
        $ref: "#/definitions/coreWorkflowExecutionIdentifier"
      cause:
        type: "string"
        description: "Optional reason for aborting."
    description: "Request to terminate an in-progress execution.  This action is irreversible.\n\
      If an execution is already terminated, this request will simply be a no-op.\n\
      This request will fail if it references a non-existent execution.\nIf the request\
      \ succeeds the phase \"ABORTED\" will be recorded for the termination\nwith\
      \ the optional cause added to the output_result."
  adminExecutionTerminateResponse:
    type: "object"
  adminFixedRate:
    type: "object"
    properties:
      value:
        type: "integer"
        format: "int64"
      unit:
        $ref: "#/definitions/adminFixedRateUnit"
    description: "Option for schedules run at a certain frequency, e.g. every 2 minutes."
    example:
      unit: {}
      value: 0
  adminFixedRateUnit:
    type: "string"
    description: "Represents a frequency at which to run a schedule."
    enum:
    - "MINUTE"
    - "HOUR"
    - "DAY"
    default: "MINUTE"
  adminLabels:
    type: "object"
    properties:
      values:
        type: "object"
        description: "Map of custom labels to be applied to the execution resource."
        additionalProperties:
          type: "string"
    description: "Label values to be applied to an execution resource.\nIn the future\
      \ a mode (e.g. OVERRIDE, APPEND, etc) can be defined\nto specify how to merge\
      \ labels defined at registration and execution time."
    example:
      values:
        key: "values"
  adminLaunchPlan:
    type: "object"
    properties:
      id:
        $ref: "#/definitions/coreIdentifier"
      spec:
        $ref: "#/definitions/adminLaunchPlanSpec"
      closure:
        $ref: "#/definitions/adminLaunchPlanClosure"
    description: "A LaunchPlan provides the capability to templatize workflow executions.\n\
      Launch plans simplify associating one or more schedules, inputs and notifications\
      \ with your workflows.\nLaunch plans can be shared and used to trigger executions\
      \ with predefined inputs even when a workflow\ndefinition doesn't necessarily\
      \ have a default value for said input."
    example:
      id:
        domain: "domain"
        resource_type: {}
        name: "name"
        project: "project"
        version: "version"
      closure:
        expected_outputs:
          variables:
            key:
              description: "description"
              type:
                schema:
                  columns:
                  - name: "name"
                    type: {}
                  - name: "name"
                    type: {}
                metadata:
                  fields:
                    key:
                      list_value:
                        values:
                        - null
                        - null
                      number_value: 6.027456183070403
                      string_value: "string_value"
                      null_value: {}
                      bool_value: true
                blob:
                  dimensionality: {}
                  format: "format"
                simple: {}
        updated_at: "2000-01-23T04:56:07.000+00:00"
        created_at: "2000-01-23T04:56:07.000+00:00"
        state: {}
        expected_inputs:
          parameters:
            key:
              default:
                scalar:
                  schema:
                    type:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    uri: "uri"
                  blob:
                    metadata:
                      type:
                        dimensionality: {}
                        format: "format"
                    uri: "uri"
                  none_type: {}
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  binary:
                    tag: "tag"
                    value: "value"
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  generic:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                collection:
                  literals:
                  - null
                  - null
                map:
                  literals: {}
              var:
                description: "description"
                type:
                  schema:
                    columns:
                    - name: "name"
                      type: {}
                    - name: "name"
                      type: {}
                  metadata:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                  blob:
                    dimensionality: {}
                    format: "format"
                  simple: {}
              required: true
      spec:
        workflow_id:
          domain: "domain"
          resource_type: {}
          name: "name"
          project: "project"
          version: "version"
        fixed_inputs:
          literals: {}
        role: "role"
        auth:
          kubernetes_service_account: "kubernetes_service_account"
          assumable_iam_role: "assumable_iam_role"
        entity_metadata:
          schedule:
            kickoff_time_input_arg: "kickoff_time_input_arg"
            cron_expression: "cron_expression"
            rate:
              unit: {}
              value: 0
          notifications:
          - pager_duty:
              recipients_email:
              - "recipients_email"
              - "recipients_email"
            slack:
              recipients_email:
              - "recipients_email"
              - "recipients_email"
            phases:
            - {}
            - {}
            email:
              recipients_email:
              - "recipients_email"
              - "recipients_email"
          - pager_duty:
              recipients_email:
              - "recipients_email"
              - "recipients_email"
            slack:
              recipients_email:
              - "recipients_email"
              - "recipients_email"
            phases:
            - {}
            - {}
            email:
              recipients_email:
              - "recipients_email"
              - "recipients_email"
        annotations:
          values:
            key: "values"
        default_inputs:
          parameters:
            key:
              default:
                scalar:
                  schema:
                    type:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    uri: "uri"
                  blob:
                    metadata:
                      type:
                        dimensionality: {}
                        format: "format"
                    uri: "uri"
                  none_type: {}
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  binary:
                    tag: "tag"
                    value: "value"
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  generic:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                collection:
                  literals:
                  - null
                  - null
                map:
                  literals: {}
              var:
                description: "description"
                type:
                  schema:
                    columns:
                    - name: "name"
                      type: {}
                    - name: "name"
                      type: {}
                  metadata:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                  blob:
                    dimensionality: {}
                    format: "format"
                  simple: {}
              required: true
        labels:
          values:
            key: "values"
        auth_role:
          kubernetes_service_account: "kubernetes_service_account"
          assumable_iam_role: "assumable_iam_role"
  adminLaunchPlanClosure:
    type: "object"
    properties:
      state:
        title: "Indicate the Launch plan phase"
        $ref: "#/definitions/adminLaunchPlanState"
      expected_inputs:
        title: "Indicates the set of inputs to execute the Launch plan"
        $ref: "#/definitions/coreParameterMap"
      expected_outputs:
        title: "Indicates the set of outputs from the Launch plan"
        $ref: "#/definitions/coreVariableMap"
      created_at:
        type: "string"
        format: "date-time"
        description: "Time at which the launch plan was created."
      updated_at:
        type: "string"
        format: "date-time"
        description: "Time at which the launch plan was last updated."
    description: "Values computed by the flyte platform after launch plan registration.\n\
      These include expected_inputs required to be present in a CreateExecutionRequest\n\
      to launch the reference workflow as well timestamp values associated with the\
      \ launch plan."
    example:
      expected_outputs:
        variables:
          key:
            description: "description"
            type:
              schema:
                columns:
                - name: "name"
                  type: {}
                - name: "name"
                  type: {}
              metadata:
                fields:
                  key:
                    list_value:
                      values:
                      - null
                      - null
                    number_value: 6.027456183070403
                    string_value: "string_value"
                    null_value: {}
                    bool_value: true
              blob:
                dimensionality: {}
                format: "format"
              simple: {}
      updated_at: "2000-01-23T04:56:07.000+00:00"
      created_at: "2000-01-23T04:56:07.000+00:00"
      state: {}
      expected_inputs:
        parameters:
          key:
            default:
              scalar:
                schema:
                  type:
                    columns:
                    - name: "name"
                      type: {}
                    - name: "name"
                      type: {}
                  uri: "uri"
                blob:
                  metadata:
                    type:
                      dimensionality: {}
                      format: "format"
                  uri: "uri"
                none_type: {}
                primitive:
                  duration: "duration"
                  datetime: "2000-01-23T04:56:07.000+00:00"
                  string_value: "string_value"
                  boolean: true
                  float_value: 1.4658129805029452
                  integer: "integer"
                binary:
                  tag: "tag"
                  value: "value"
                error:
                  message: "message"
                  failed_node_id: "failed_node_id"
                generic:
                  fields:
                    key:
                      list_value:
                        values:
                        - null
                        - null
                      number_value: 6.027456183070403
                      string_value: "string_value"
                      null_value: {}
                      bool_value: true
              collection:
                literals:
                - null
                - null
              map:
                literals: {}
            var:
              description: "description"
              type:
                schema:
                  columns:
                  - name: "name"
                    type: {}
                  - name: "name"
                    type: {}
                metadata:
                  fields:
                    key:
                      list_value:
                        values:
                        - null
                        - null
                      number_value: 6.027456183070403
                      string_value: "string_value"
                      null_value: {}
                      bool_value: true
                blob:
                  dimensionality: {}
                  format: "format"
                simple: {}
            required: true
  adminLaunchPlanCreateRequest:
    type: "object"
    properties:
      id:
        description: "Uniquely identifies a launch plan entity."
        $ref: "#/definitions/coreIdentifier"
      spec:
        description: "User-provided launch plan details, including reference workflow,\
          \ inputs and other metadata."
        $ref: "#/definitions/adminLaunchPlanSpec"
    description: "Request to register a launch plan. A LaunchPlanSpec may include\
      \ a complete or incomplete set of inputs required\nto launch a workflow execution.\
      \ By default all launch plans are registered in state INACTIVE. If you wish\
      \ to\nset the state to ACTIVE, you must submit a LaunchPlanUpdateRequest, after\
      \ you have created a launch plan."
  adminLaunchPlanCreateResponse:
    type: "object"
  adminLaunchPlanList:
    type: "object"
    properties:
      launch_plans:
        type: "array"
        items:
          $ref: "#/definitions/adminLaunchPlan"
      token:
        type: "string"
        description: "In the case of multiple pages of results, the server-provided\
          \ token can be used to fetch the next page\nin a query. If there are no\
          \ more results, this value will be empty."
    description: "Response object for list launch plan requests."
    example:
      launch_plans:
      - id:
          domain: "domain"
          resource_type: {}
          name: "name"
          project: "project"
          version: "version"
        closure:
          expected_outputs:
            variables:
              key:
                description: "description"
                type:
                  schema:
                    columns:
                    - name: "name"
                      type: {}
                    - name: "name"
                      type: {}
                  metadata:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                  blob:
                    dimensionality: {}
                    format: "format"
                  simple: {}
          updated_at: "2000-01-23T04:56:07.000+00:00"
          created_at: "2000-01-23T04:56:07.000+00:00"
          state: {}
          expected_inputs:
            parameters:
              key:
                default:
                  scalar:
                    schema:
                      type:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      uri: "uri"
                    blob:
                      metadata:
                        type:
                          dimensionality: {}
                          format: "format"
                      uri: "uri"
                    none_type: {}
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    binary:
                      tag: "tag"
                      value: "value"
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    generic:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                  collection:
                    literals:
                    - null
                    - null
                  map:
                    literals: {}
                var:
                  description: "description"
                  type:
                    schema:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    metadata:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                    blob:
                      dimensionality: {}
                      format: "format"
                    simple: {}
                required: true
        spec:
          workflow_id:
            domain: "domain"
            resource_type: {}
            name: "name"
            project: "project"
            version: "version"
          fixed_inputs:
            literals: {}
          role: "role"
          auth:
            kubernetes_service_account: "kubernetes_service_account"
            assumable_iam_role: "assumable_iam_role"
          entity_metadata:
            schedule:
              kickoff_time_input_arg: "kickoff_time_input_arg"
              cron_expression: "cron_expression"
              rate:
                unit: {}
                value: 0
            notifications:
            - pager_duty:
                recipients_email:
                - "recipients_email"
                - "recipients_email"
              slack:
                recipients_email:
                - "recipients_email"
                - "recipients_email"
              phases:
              - {}
              - {}
              email:
                recipients_email:
                - "recipients_email"
                - "recipients_email"
            - pager_duty:
                recipients_email:
                - "recipients_email"
                - "recipients_email"
              slack:
                recipients_email:
                - "recipients_email"
                - "recipients_email"
              phases:
              - {}
              - {}
              email:
                recipients_email:
                - "recipients_email"
                - "recipients_email"
          annotations:
            values:
              key: "values"
          default_inputs:
            parameters:
              key:
                default:
                  scalar:
                    schema:
                      type:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      uri: "uri"
                    blob:
                      metadata:
                        type:
                          dimensionality: {}
                          format: "format"
                      uri: "uri"
                    none_type: {}
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    binary:
                      tag: "tag"
                      value: "value"
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    generic:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                  collection:
                    literals:
                    - null
                    - null
                  map:
                    literals: {}
                var:
                  description: "description"
                  type:
                    schema:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    metadata:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                    blob:
                      dimensionality: {}
                      format: "format"
                    simple: {}
                required: true
          labels:
            values:
              key: "values"
          auth_role:
            kubernetes_service_account: "kubernetes_service_account"
            assumable_iam_role: "assumable_iam_role"
      - id:
          domain: "domain"
          resource_type: {}
          name: "name"
          project: "project"
          version: "version"
        closure:
          expected_outputs:
            variables:
              key:
                description: "description"
                type:
                  schema:
                    columns:
                    - name: "name"
                      type: {}
                    - name: "name"
                      type: {}
                  metadata:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                  blob:
                    dimensionality: {}
                    format: "format"
                  simple: {}
          updated_at: "2000-01-23T04:56:07.000+00:00"
          created_at: "2000-01-23T04:56:07.000+00:00"
          state: {}
          expected_inputs:
            parameters:
              key:
                default:
                  scalar:
                    schema:
                      type:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      uri: "uri"
                    blob:
                      metadata:
                        type:
                          dimensionality: {}
                          format: "format"
                      uri: "uri"
                    none_type: {}
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    binary:
                      tag: "tag"
                      value: "value"
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    generic:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                  collection:
                    literals:
                    - null
                    - null
                  map:
                    literals: {}
                var:
                  description: "description"
                  type:
                    schema:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    metadata:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                    blob:
                      dimensionality: {}
                      format: "format"
                    simple: {}
                required: true
        spec:
          workflow_id:
            domain: "domain"
            resource_type: {}
            name: "name"
            project: "project"
            version: "version"
          fixed_inputs:
            literals: {}
          role: "role"
          auth:
            kubernetes_service_account: "kubernetes_service_account"
            assumable_iam_role: "assumable_iam_role"
          entity_metadata:
            schedule:
              kickoff_time_input_arg: "kickoff_time_input_arg"
              cron_expression: "cron_expression"
              rate:
                unit: {}
                value: 0
            notifications:
            - pager_duty:
                recipients_email:
                - "recipients_email"
                - "recipients_email"
              slack:
                recipients_email:
                - "recipients_email"
                - "recipients_email"
              phases:
              - {}
              - {}
              email:
                recipients_email:
                - "recipients_email"
                - "recipients_email"
            - pager_duty:
                recipients_email:
                - "recipients_email"
                - "recipients_email"
              slack:
                recipients_email:
                - "recipients_email"
                - "recipients_email"
              phases:
              - {}
              - {}
              email:
                recipients_email:
                - "recipients_email"
                - "recipients_email"
          annotations:
            values:
              key: "values"
          default_inputs:
            parameters:
              key:
                default:
                  scalar:
                    schema:
                      type:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      uri: "uri"
                    blob:
                      metadata:
                        type:
                          dimensionality: {}
                          format: "format"
                      uri: "uri"
                    none_type: {}
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    binary:
                      tag: "tag"
                      value: "value"
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    generic:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                  collection:
                    literals:
                    - null
                    - null
                  map:
                    literals: {}
                var:
                  description: "description"
                  type:
                    schema:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    metadata:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                    blob:
                      dimensionality: {}
                      format: "format"
                    simple: {}
                required: true
          labels:
            values:
              key: "values"
          auth_role:
            kubernetes_service_account: "kubernetes_service_account"
            assumable_iam_role: "assumable_iam_role"
      token: "token"
  adminLaunchPlanMetadata:
    type: "object"
    properties:
      schedule:
        title: "Schedule to execute the Launch Plan"
        $ref: "#/definitions/adminSchedule"
      notifications:
        type: "array"
        title: "List of notifications based on Execution status transitions"
        items:
          $ref: "#/definitions/adminNotification"
    description: "Additional launch plan attributes included in the LaunchPlanSpec\
      \ not strictly required to launch\nthe reference workflow."
    example:
      schedule:
        kickoff_time_input_arg: "kickoff_time_input_arg"
        cron_expression: "cron_expression"
        rate:
          unit: {}
          value: 0
      notifications:
      - pager_duty:
          recipients_email:
          - "recipients_email"
          - "recipients_email"
        slack:
          recipients_email:
          - "recipients_email"
          - "recipients_email"
        phases:
        - {}
        - {}
        email:
          recipients_email:
          - "recipients_email"
          - "recipients_email"
      - pager_duty:
          recipients_email:
          - "recipients_email"
          - "recipients_email"
        slack:
          recipients_email:
          - "recipients_email"
          - "recipients_email"
        phases:
        - {}
        - {}
        email:
          recipients_email:
          - "recipients_email"
          - "recipients_email"
  adminLaunchPlanSpec:
    type: "object"
    properties:
      workflow_id:
        title: "Reference to the Workflow template that the launch plan references"
        $ref: "#/definitions/coreIdentifier"
      entity_metadata:
        title: "Metadata for the Launch Plan"
        $ref: "#/definitions/adminLaunchPlanMetadata"
      default_inputs:
        title: "Input values to be passed for the execution"
        $ref: "#/definitions/coreParameterMap"
      fixed_inputs:
        title: "Fixed, non-overridable inputs for the Launch Plan"
        $ref: "#/definitions/coreLiteralMap"
      role:
        type: "string"
        title: "String to indicate the role to use to execute the workflow underneath"
      labels:
        description: "Custom labels to be applied to the execution resource."
        $ref: "#/definitions/adminLabels"
      annotations:
        description: "Custom annotations to be applied to the execution resource."
        $ref: "#/definitions/adminAnnotations"
      auth:
        description: "Indicates the permission associated with workflow executions\
          \ triggered with this launch plan."
        $ref: "#/definitions/adminAuth"
      auth_role:
        $ref: "#/definitions/adminAuthRole"
    description: "User-provided launch plan definition and configuration values."
    example:
      workflow_id:
        domain: "domain"
        resource_type: {}
        name: "name"
        project: "project"
        version: "version"
      fixed_inputs:
        literals: {}
      role: "role"
      auth:
        kubernetes_service_account: "kubernetes_service_account"
        assumable_iam_role: "assumable_iam_role"
      entity_metadata:
        schedule:
          kickoff_time_input_arg: "kickoff_time_input_arg"
          cron_expression: "cron_expression"
          rate:
            unit: {}
            value: 0
        notifications:
        - pager_duty:
            recipients_email:
            - "recipients_email"
            - "recipients_email"
          slack:
            recipients_email:
            - "recipients_email"
            - "recipients_email"
          phases:
          - {}
          - {}
          email:
            recipients_email:
            - "recipients_email"
            - "recipients_email"
        - pager_duty:
            recipients_email:
            - "recipients_email"
            - "recipients_email"
          slack:
            recipients_email:
            - "recipients_email"
            - "recipients_email"
          phases:
          - {}
          - {}
          email:
            recipients_email:
            - "recipients_email"
            - "recipients_email"
      annotations:
        values:
          key: "values"
      default_inputs:
        parameters:
          key:
            default:
              scalar:
                schema:
                  type:
                    columns:
                    - name: "name"
                      type: {}
                    - name: "name"
                      type: {}
                  uri: "uri"
                blob:
                  metadata:
                    type:
                      dimensionality: {}
                      format: "format"
                  uri: "uri"
                none_type: {}
                primitive:
                  duration: "duration"
                  datetime: "2000-01-23T04:56:07.000+00:00"
                  string_value: "string_value"
                  boolean: true
                  float_value: 1.4658129805029452
                  integer: "integer"
                binary:
                  tag: "tag"
                  value: "value"
                error:
                  message: "message"
                  failed_node_id: "failed_node_id"
                generic:
                  fields:
                    key:
                      list_value:
                        values:
                        - null
                        - null
                      number_value: 6.027456183070403
                      string_value: "string_value"
                      null_value: {}
                      bool_value: true
              collection:
                literals:
                - null
                - null
              map:
                literals: {}
            var:
              description: "description"
              type:
                schema:
                  columns:
                  - name: "name"
                    type: {}
                  - name: "name"
                    type: {}
                metadata:
                  fields:
                    key:
                      list_value:
                        values:
                        - null
                        - null
                      number_value: 6.027456183070403
                      string_value: "string_value"
                      null_value: {}
                      bool_value: true
                blob:
                  dimensionality: {}
                  format: "format"
                simple: {}
            required: true
      labels:
        values:
          key: "values"
      auth_role:
        kubernetes_service_account: "kubernetes_service_account"
        assumable_iam_role: "assumable_iam_role"
  adminLaunchPlanState:
    type: "string"
    description: "By default any launch plan regardless of state can be used to launch\
      \ a workflow execution.\nHowever, at most one version of a launch plan\n(e.g.\
      \ a NamedEntityIdentifier set of shared project, domain and name values) can\
      \ be\nactive at a time in regards to *schedules*. That is, at most one schedule\
      \ in a NamedEntityIdentifier\ngroup will be observed and trigger executions\
      \ at a defined cadence."
    enum:
    - "INACTIVE"
    - "ACTIVE"
    default: "INACTIVE"
  adminLaunchPlanUpdateRequest:
    type: "object"
    properties:
      id:
        description: "Identifier of launch plan for which to change state."
        $ref: "#/definitions/coreIdentifier"
      state:
        description: "Desired state to apply to the launch plan."
        $ref: "#/definitions/adminLaunchPlanState"
    description: "Request to set the referenced launch plan state to the configured\
      \ value."
  adminLaunchPlanUpdateResponse:
    type: "object"
    description: "Purposefully empty, may be populated in the future."
  adminListMatchableAttributesResponse:
    type: "object"
    properties:
      configurations:
        type: "array"
        items:
          $ref: "#/definitions/adminMatchableAttributesConfiguration"
    description: "Response for a request for all matching resource attributes."
    example:
      configurations:
      - launch_plan: "launch_plan"
        workflow: "workflow"
        domain: "domain"
        project: "project"
        attributes:
          cluster_resource_attributes:
            attributes:
              key: "attributes"
          execution_queue_attributes:
            tags:
            - "tags"
            - "tags"
          task_resource_attributes:
            defaults:
              memory: "memory"
              cpu: "cpu"
              storage: "storage"
              gpu: "gpu"
            limits:
              memory: "memory"
              cpu: "cpu"
              storage: "storage"
              gpu: "gpu"
          execution_cluster_label:
            value: "value"
      - launch_plan: "launch_plan"
        workflow: "workflow"
        domain: "domain"
        project: "project"
        attributes:
          cluster_resource_attributes:
            attributes:
              key: "attributes"
          execution_queue_attributes:
            tags:
            - "tags"
            - "tags"
          task_resource_attributes:
            defaults:
              memory: "memory"
              cpu: "cpu"
              storage: "storage"
              gpu: "gpu"
            limits:
              memory: "memory"
              cpu: "cpu"
              storage: "storage"
              gpu: "gpu"
          execution_cluster_label:
            value: "value"
  adminLiteralMapBlob:
    type: "object"
    properties:
      values:
        title: "Data in LiteralMap format"
        $ref: "#/definitions/coreLiteralMap"
      uri:
        type: "string"
        title: "In the event that the map is too large, we return a uri to the data"
    title: "Input/output data can represented by actual values or a link to where\
      \ values are stored"
    example:
      values:
        literals: {}
      uri: "uri"
  adminMatchableAttributesConfiguration:
    type: "object"
    properties:
      attributes:
        $ref: "#/definitions/adminMatchingAttributes"
      domain:
        type: "string"
      project:
        type: "string"
      workflow:
        type: "string"
      launch_plan:
        type: "string"
    description: "Represents a custom set of attributes applied for either a domain;\
      \ a domain and project; or\ndomain, project and workflow name."
    example:
      launch_plan: "launch_plan"
      workflow: "workflow"
      domain: "domain"
      project: "project"
      attributes:
        cluster_resource_attributes:
          attributes:
            key: "attributes"
        execution_queue_attributes:
          tags:
          - "tags"
          - "tags"
        task_resource_attributes:
          defaults:
            memory: "memory"
            cpu: "cpu"
            storage: "storage"
            gpu: "gpu"
          limits:
            memory: "memory"
            cpu: "cpu"
            storage: "storage"
            gpu: "gpu"
        execution_cluster_label:
          value: "value"
  adminMatchableResource:
    type: "string"
    description: "Defines a resource that can be configured by customizable Project-,\
      \ ProjectDomain- or WorkflowAttributes\nbased on matching tags.\n\n - TASK_RESOURCE:\
      \ Applies to customizable task resource requests and limits.\n - CLUSTER_RESOURCE:\
      \ Applies to configuring templated kubernetes cluster resources.\n - EXECUTION_QUEUE:\
      \ Configures task and dynamic task execution queue assignment.\n - EXECUTION_CLUSTER_LABEL:\
      \ Configures the K8s cluster label to be used for execution to be run"
    enum:
    - "TASK_RESOURCE"
    - "CLUSTER_RESOURCE"
    - "EXECUTION_QUEUE"
    - "EXECUTION_CLUSTER_LABEL"
    default: "TASK_RESOURCE"
  adminMatchingAttributes:
    type: "object"
    properties:
      task_resource_attributes:
        $ref: "#/definitions/adminTaskResourceAttributes"
      cluster_resource_attributes:
        $ref: "#/definitions/adminClusterResourceAttributes"
      execution_queue_attributes:
        $ref: "#/definitions/adminExecutionQueueAttributes"
      execution_cluster_label:
        $ref: "#/definitions/adminExecutionClusterLabel"
    description: "Generic container for encapsulating all types of the above attributes\
      \ messages."
    example:
      cluster_resource_attributes:
        attributes:
          key: "attributes"
      execution_queue_attributes:
        tags:
        - "tags"
        - "tags"
      task_resource_attributes:
        defaults:
          memory: "memory"
          cpu: "cpu"
          storage: "storage"
          gpu: "gpu"
        limits:
          memory: "memory"
          cpu: "cpu"
          storage: "storage"
          gpu: "gpu"
      execution_cluster_label:
        value: "value"
  adminNamedEntity:
    type: "object"
    properties:
      resource_type:
        $ref: "#/definitions/coreResourceType"
      id:
        $ref: "#/definitions/adminNamedEntityIdentifier"
      metadata:
        $ref: "#/definitions/adminNamedEntityMetadata"
    title: "Describes information common to a NamedEntity, identified by a project\
      \ /\ndomain / name / resource type combination"
    example:
      metadata:
        description: "description"
        state: {}
      resource_type: {}
      id:
        domain: "domain"
        name: "name"
        project: "project"
  adminNamedEntityIdentifier:
    type: "object"
    properties:
      project:
        type: "string"
        description: "Name of the project the resource belongs to."
      domain:
        type: "string"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
      name:
        type: "string"
        title: "User provided value for the resource.\nThe combination of project\
          \ + domain + name uniquely identifies the resource.\n+optional - in certain\
          \ contexts - like 'List API', 'Launch plans'"
    description: "Encapsulation of fields that identifies a Flyte resource.\nA resource\
      \ can internally have multiple versions."
    example:
      domain: "domain"
      name: "name"
      project: "project"
  adminNamedEntityIdentifierList:
    type: "object"
    properties:
      entities:
        type: "array"
        description: "A list of identifiers."
        items:
          $ref: "#/definitions/adminNamedEntityIdentifier"
      token:
        type: "string"
        description: "In the case of multiple pages of results, the server-provided\
          \ token can be used to fetch the next page\nin a query. If there are no\
          \ more results, this value will be empty."
    description: "Represents a list of NamedEntityIdentifiers."
    example:
      entities:
      - domain: "domain"
        name: "name"
        project: "project"
      - domain: "domain"
        name: "name"
        project: "project"
      token: "token"
  adminNamedEntityList:
    type: "object"
    properties:
      entities:
        type: "array"
        title: "A list of NamedEntity objects"
        items:
          $ref: "#/definitions/adminNamedEntity"
      token:
        type: "string"
        description: "In the case of multiple pages of results, the server-provided\
          \ token can be used to fetch the next page\nin a query. If there are no\
          \ more results, this value will be empty."
    description: "Represents a list of NamedEntityIdentifiers."
    example:
      entities:
      - metadata:
          description: "description"
          state: {}
        resource_type: {}
        id:
          domain: "domain"
          name: "name"
          project: "project"
      - metadata:
          description: "description"
          state: {}
        resource_type: {}
        id:
          domain: "domain"
          name: "name"
          project: "project"
      token: "token"
  adminNamedEntityMetadata:
    type: "object"
    properties:
      description:
        type: "string"
        title: "Common description across all versions of the entity\n+optional"
      state:
        description: "Shared state across all version of the entity\nAt this point\
          \ in time, only workflow entities can have their state archived."
        $ref: "#/definitions/adminNamedEntityState"
    example:
      description: "description"
      state: {}
  adminNamedEntityState:
    type: "string"
    description: "The status of the named entity is used to control its visibility\
      \ in the UI.\n\n - NAMED_ENTITY_ACTIVE: By default, all named entities are considered\
      \ active and under development.\n - NAMED_ENTITY_ARCHIVED: Archived named entities\
      \ are no longer visible in the UI.\n - SYSTEM_GENERATED: System generated entities\
      \ that aren't explicitly created or managed by a user."
    enum:
    - "NAMED_ENTITY_ACTIVE"
    - "NAMED_ENTITY_ARCHIVED"
    - "SYSTEM_GENERATED"
    default: "NAMED_ENTITY_ACTIVE"
  adminNamedEntityUpdateRequest:
    type: "object"
    properties:
      resource_type:
        title: "Resource type of the metadata to update"
        $ref: "#/definitions/coreResourceType"
      id:
        title: "Identifier of the metadata to update"
        $ref: "#/definitions/adminNamedEntityIdentifier"
      metadata:
        title: "Metadata object to set as the new value"
        $ref: "#/definitions/adminNamedEntityMetadata"
    description: "Request to set the referenced launch plan state to the configured\
      \ value."
  adminNamedEntityUpdateResponse:
    type: "object"
    description: "Purposefully empty, may be populated in the future."
  adminNodeExecutionClosure:
    type: "object"
    properties:
      output_uri:
        type: "string"
      error:
        title: "Error information for the Node"
        $ref: "#/definitions/coreExecutionError"
      phase:
        description: "The last recorded phase for this node execution."
        $ref: "#/definitions/coreNodeExecutionPhase"
      started_at:
        type: "string"
        format: "date-time"
        description: "Time at which the node execution began running."
      duration:
        type: "string"
        description: "The amount of time the node execution spent running."
      created_at:
        type: "string"
        format: "date-time"
        description: "Time at which the node execution was created."
      updated_at:
        type: "string"
        format: "date-time"
        description: "Time at which the node execution was last updated."
      workflow_node_metadata:
        $ref: "#/definitions/flyteidladminWorkflowNodeMetadata"
    description: "Container for node execution details and results."
    example:
      phase: {}
      duration: "duration"
      workflow_node_metadata:
        executionId:
          domain: "domain"
          name: "name"
          project: "project"
      updated_at: "2000-01-23T04:56:07.000+00:00"
      output_uri: "output_uri"
      started_at: "2000-01-23T04:56:07.000+00:00"
      created_at: "2000-01-23T04:56:07.000+00:00"
      error:
        code: "code"
        kind: {}
        message: "message"
        error_uri: "error_uri"
  adminNodeExecutionEventRequest:
    type: "object"
    properties:
      request_id:
        type: "string"
        title: "Unique ID for this request that can be traced between services"
      event:
        description: "Details about the event that occurred."
        $ref: "#/definitions/eventNodeExecutionEvent"
    description: "Request to send a notification that a node execution event has occurred."
  adminNodeExecutionEventResponse:
    type: "object"
  adminNodeExecutionGetDataResponse:
    type: "object"
    properties:
      inputs:
        description: "Signed url to fetch a core.LiteralMap of node execution inputs."
        $ref: "#/definitions/adminUrlBlob"
      outputs:
        description: "Signed url to fetch a core.LiteralMap of node execution outputs."
        $ref: "#/definitions/adminUrlBlob"
    description: "Response structure for NodeExecutionGetDataRequest which contains\
      \ inputs and outputs for a node execution."
    example:
      outputs:
        bytes: "bytes"
        url: "url"
      inputs:
        bytes: "bytes"
        url: "url"
  adminNodeExecutionList:
    type: "object"
    properties:
      node_executions:
        type: "array"
        items:
          $ref: "#/definitions/flyteidladminNodeExecution"
      token:
        type: "string"
        description: "In the case of multiple pages of results, the server-provided\
          \ token can be used to fetch the next page\nin a query. If there are no\
          \ more results, this value will be empty."
    description: "Request structure to retrieve a list of node execution entities."
    example:
      node_executions:
      - metadata: {}
        input_uri: "input_uri"
        id:
          execution_id:
            domain: "domain"
            name: "name"
            project: "project"
          node_id: "node_id"
        closure:
          phase: {}
          duration: "duration"
          workflow_node_metadata:
            executionId:
              domain: "domain"
              name: "name"
              project: "project"
          updated_at: "2000-01-23T04:56:07.000+00:00"
          output_uri: "output_uri"
          started_at: "2000-01-23T04:56:07.000+00:00"
          created_at: "2000-01-23T04:56:07.000+00:00"
          error:
            code: "code"
            kind: {}
            message: "message"
            error_uri: "error_uri"
      - metadata: {}
        input_uri: "input_uri"
        id:
          execution_id:
            domain: "domain"
            name: "name"
            project: "project"
          node_id: "node_id"
        closure:
          phase: {}
          duration: "duration"
          workflow_node_metadata:
            executionId:
              domain: "domain"
              name: "name"
              project: "project"
          updated_at: "2000-01-23T04:56:07.000+00:00"
          output_uri: "output_uri"
          started_at: "2000-01-23T04:56:07.000+00:00"
          created_at: "2000-01-23T04:56:07.000+00:00"
          error:
            code: "code"
            kind: {}
            message: "message"
            error_uri: "error_uri"
      token: "token"
  adminNodeExecutionMetaData:
    type: "object"
    title: "Represents additional attributes related to a Node Execution"
  adminNotification:
    type: "object"
    properties:
      phases:
        type: "array"
        description: "A list of phases to which users can associate the notifications\
          \ to."
        items:
          $ref: "#/definitions/coreWorkflowExecutionPhase"
      email:
        title: "option (validate.required) = true;"
        $ref: "#/definitions/adminEmailNotification"
      pager_duty:
        $ref: "#/definitions/adminPagerDutyNotification"
      slack:
        $ref: "#/definitions/adminSlackNotification"
    description: "Represents a structure for notifications based on execution status.\n\
      The Notification content is configured within Admin. Future iterations could\n\
      expose configuring notifications with custom content."
    example:
      pager_duty:
        recipients_email:
        - "recipients_email"
        - "recipients_email"
      slack:
        recipients_email:
        - "recipients_email"
        - "recipients_email"
      phases:
      - {}
      - {}
      email:
        recipients_email:
        - "recipients_email"
        - "recipients_email"
  adminNotificationList:
    type: "object"
    properties:
      notifications:
        type: "array"
        items:
          $ref: "#/definitions/adminNotification"
    example:
      notifications:
      - pager_duty:
          recipients_email:
          - "recipients_email"
          - "recipients_email"
        slack:
          recipients_email:
          - "recipients_email"
          - "recipients_email"
        phases:
        - {}
        - {}
        email:
          recipients_email:
          - "recipients_email"
          - "recipients_email"
      - pager_duty:
          recipients_email:
          - "recipients_email"
          - "recipients_email"
        slack:
          recipients_email:
          - "recipients_email"
          - "recipients_email"
        phases:
        - {}
        - {}
        email:
          recipients_email:
          - "recipients_email"
          - "recipients_email"
  adminPagerDutyNotification:
    type: "object"
    properties:
      recipients_email:
        type: "array"
        description: "Currently, PagerDuty notifications leverage email to trigger\
          \ a notification."
        items:
          type: "string"
    example:
      recipients_email:
      - "recipients_email"
      - "recipients_email"
  adminProject:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
        description: "Display name."
      domains:
        type: "array"
        items:
          $ref: "#/definitions/adminDomain"
      description:
        type: "string"
    description: "Top-level namespace used to classify different entities like workflows\
      \ and executions."
    example:
      name: "name"
      domains:
      - name: "name"
        id: "id"
      - name: "name"
        id: "id"
      description: "description"
      id: "id"
  adminProjectDomainAttributes:
    type: "object"
    properties:
      project:
        type: "string"
        description: "Unique project id for which this set of attributes will be applied."
      domain:
        type: "string"
        description: "Unique domain id for which this set of attributes will be applied."
      matching_attributes:
        $ref: "#/definitions/adminMatchingAttributes"
    example:
      domain: "domain"
      project: "project"
      matching_attributes:
        cluster_resource_attributes:
          attributes:
            key: "attributes"
        execution_queue_attributes:
          tags:
          - "tags"
          - "tags"
        task_resource_attributes:
          defaults:
            memory: "memory"
            cpu: "cpu"
            storage: "storage"
            gpu: "gpu"
          limits:
            memory: "memory"
            cpu: "cpu"
            storage: "storage"
            gpu: "gpu"
        execution_cluster_label:
          value: "value"
  adminProjectDomainAttributesDeleteRequest:
    type: "object"
    properties:
      project:
        type: "string"
        description: "Unique project id which this set of attributes references."
      domain:
        type: "string"
        description: "Unique domain id which this set of attributes references."
      resource_type:
        $ref: "#/definitions/adminMatchableResource"
  adminProjectDomainAttributesDeleteResponse:
    type: "object"
    description: "Purposefully empty, may be populated in the future."
  adminProjectDomainAttributesGetResponse:
    type: "object"
    properties:
      attributes:
        $ref: "#/definitions/adminProjectDomainAttributes"
    example:
      attributes:
        domain: "domain"
        project: "project"
        matching_attributes:
          cluster_resource_attributes:
            attributes:
              key: "attributes"
          execution_queue_attributes:
            tags:
            - "tags"
            - "tags"
          task_resource_attributes:
            defaults:
              memory: "memory"
              cpu: "cpu"
              storage: "storage"
              gpu: "gpu"
            limits:
              memory: "memory"
              cpu: "cpu"
              storage: "storage"
              gpu: "gpu"
          execution_cluster_label:
            value: "value"
  adminProjectDomainAttributesUpdateRequest:
    type: "object"
    properties:
      attributes:
        $ref: "#/definitions/adminProjectDomainAttributes"
    description: "Sets custom attributes for a project-domain combination."
  adminProjectDomainAttributesUpdateResponse:
    type: "object"
    description: "Purposefully empty, may be populated in the future."
  adminProjectRegisterRequest:
    type: "object"
    properties:
      project:
        $ref: "#/definitions/adminProject"
  adminProjectRegisterResponse:
    type: "object"
  adminProjects:
    type: "object"
    properties:
      projects:
        type: "array"
        items:
          $ref: "#/definitions/adminProject"
    example:
      projects:
      - name: "name"
        domains:
        - name: "name"
          id: "id"
        - name: "name"
          id: "id"
        description: "description"
        id: "id"
      - name: "name"
        domains:
        - name: "name"
          id: "id"
        - name: "name"
          id: "id"
        description: "description"
        id: "id"
  adminSchedule:
    type: "object"
    properties:
      cron_expression:
        type: "string"
        title: "Uses AWS syntax: \"Minutes Hours Day-of-month Month Day-of-week Year\"\
          \ne.g. for a schedule that runs every 15 minutes: \"0/15 * * * ? *\""
      rate:
        $ref: "#/definitions/adminFixedRate"
      kickoff_time_input_arg:
        type: "string"
        description: "Name of the input variable that the kickoff time will be supplied\
          \ to when the workflow is kicked off."
    description: "Defines complete set of information required to trigger an execution\
      \ on a schedule."
    example:
      kickoff_time_input_arg: "kickoff_time_input_arg"
      cron_expression: "cron_expression"
      rate:
        unit: {}
        value: 0
  adminSlackNotification:
    type: "object"
    properties:
      recipients_email:
        type: "array"
        description: "Currently, Slack notifications leverage email to trigger a notification."
        items:
          type: "string"
    example:
      recipients_email:
      - "recipients_email"
      - "recipients_email"
  adminSort:
    type: "object"
    properties:
      key:
        type: "string"
        description: "Indicates an attribute to sort the response values.\nTODO(katrogan):\
          \ Add string validation here. This should never be empty."
      direction:
        title: "Indicates the direction to apply sort key for response values.\n+optional"
        $ref: "#/definitions/SortDirection"
    description: "Species sort ordering in a list request."
  adminSystemMetadata:
    type: "object"
    properties:
      execution_cluster:
        type: "string"
        description: "Which execution cluster this execution ran on."
    description: "Represents system rather than user-facing metadata about an execution."
    example:
      execution_cluster: "execution_cluster"
  adminTask:
    type: "object"
    properties:
      id:
        description: "id represents the unique identifier of the task."
        $ref: "#/definitions/coreIdentifier"
      closure:
        description: "closure encapsulates all the fields that maps to a compiled\
          \ version of the task."
        $ref: "#/definitions/adminTaskClosure"
    description: "Flyte workflows are composed of many ordered tasks. That is small,\
      \ reusable, self-contained logical blocks\narranged to process workflow inputs\
      \ and produce a deterministic set of outputs.\nTasks can come in many varieties\
      \ tuned for specialized behavior."
    example:
      id:
        domain: "domain"
        resource_type: {}
        name: "name"
        project: "project"
        version: "version"
      closure:
        created_at: "2000-01-23T04:56:07.000+00:00"
        compiled_task:
          template:
            container:
              args:
              - "args"
              - "args"
              image: "image"
              resources:
                requests:
                - name: {}
                  value: "value"
                - name: {}
                  value: "value"
                limits:
                - name: {}
                  value: "value"
                - name: {}
                  value: "value"
              env:
              - value: "value"
                key: "key"
              - value: "value"
                key: "key"
              ports:
              - container_port: 6
              - container_port: 6
              config:
              - value: "value"
                key: "key"
              - value: "value"
                key: "key"
              command:
              - "command"
              - "command"
            metadata:
              retries:
                retries: 0
              discoverable: true
              runtime:
                flavor: "flavor"
                type: {}
                version: "version"
              discovery_version: "discovery_version"
              deprecated_error_message: "deprecated_error_message"
              interruptible: true
              timeout: "timeout"
            custom:
              fields:
                key:
                  list_value:
                    values:
                    - null
                    - null
                  number_value: 6.027456183070403
                  string_value: "string_value"
                  null_value: {}
                  bool_value: true
            id:
              domain: "domain"
              resource_type: {}
              name: "name"
              project: "project"
              version: "version"
            type: "type"
            interface:
              outputs:
                variables:
                  key:
                    description: "description"
                    type:
                      schema:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      metadata:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                      blob:
                        dimensionality: {}
                        format: "format"
                      simple: {}
              inputs:
                variables:
                  key:
                    description: "description"
                    type:
                      schema:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      metadata:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                      blob:
                        dimensionality: {}
                        format: "format"
                      simple: {}
  adminTaskClosure:
    type: "object"
    properties:
      compiled_task:
        description: "Represents the compiled representation of the task from the\
          \ specification provided."
        $ref: "#/definitions/coreCompiledTask"
      created_at:
        type: "string"
        format: "date-time"
        description: "Time at which the task was created."
    description: "Compute task attributes which include values derived from the TaskSpec,\
      \ as well as plugin-specific data\nand task metadata."
    example:
      created_at: "2000-01-23T04:56:07.000+00:00"
      compiled_task:
        template:
          container:
            args:
            - "args"
            - "args"
            image: "image"
            resources:
              requests:
              - name: {}
                value: "value"
              - name: {}
                value: "value"
              limits:
              - name: {}
                value: "value"
              - name: {}
                value: "value"
            env:
            - value: "value"
              key: "key"
            - value: "value"
              key: "key"
            ports:
            - container_port: 6
            - container_port: 6
            config:
            - value: "value"
              key: "key"
            - value: "value"
              key: "key"
            command:
            - "command"
            - "command"
          metadata:
            retries:
              retries: 0
            discoverable: true
            runtime:
              flavor: "flavor"
              type: {}
              version: "version"
            discovery_version: "discovery_version"
            deprecated_error_message: "deprecated_error_message"
            interruptible: true
            timeout: "timeout"
          custom:
            fields:
              key:
                list_value:
                  values:
                  - null
                  - null
                number_value: 6.027456183070403
                string_value: "string_value"
                null_value: {}
                bool_value: true
          id:
            domain: "domain"
            resource_type: {}
            name: "name"
            project: "project"
            version: "version"
          type: "type"
          interface:
            outputs:
              variables:
                key:
                  description: "description"
                  type:
                    schema:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    metadata:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                    blob:
                      dimensionality: {}
                      format: "format"
                    simple: {}
            inputs:
              variables:
                key:
                  description: "description"
                  type:
                    schema:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    metadata:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                    blob:
                      dimensionality: {}
                      format: "format"
                    simple: {}
  adminTaskCreateRequest:
    type: "object"
    properties:
      id:
        description: "id represents the unique identifier of the task."
        $ref: "#/definitions/coreIdentifier"
      spec:
        description: "Represents the specification for task."
        $ref: "#/definitions/adminTaskSpec"
    description: "Represents a request structure to create a revision of a task."
  adminTaskCreateResponse:
    type: "object"
    description: "Represents a response structure if task creation succeeds."
  adminTaskExecutionClosure:
    type: "object"
    properties:
      output_uri:
        type: "string"
        description: "Path to remote data store where output blob is stored if the\
          \ execution succeeded (and produced outputs)."
      error:
        description: "Error information for the task execution. Populated if the execution\
          \ failed."
        $ref: "#/definitions/coreExecutionError"
      phase:
        description: "The last recorded phase for this task execution."
        $ref: "#/definitions/coreTaskExecutionPhase"
      logs:
        type: "array"
        description: "Detailed log information output by the task execution."
        items:
          $ref: "#/definitions/coreTaskLog"
      started_at:
        type: "string"
        format: "date-time"
        description: "Time at which the task execution began running."
      duration:
        type: "string"
        description: "The amount of time the task execution spent running."
      created_at:
        type: "string"
        format: "date-time"
        description: "Time at which the task execution was created."
      updated_at:
        type: "string"
        format: "date-time"
        description: "Time at which the task execution was last updated."
      custom_info:
        description: "Custom data specific to the task plugin."
        $ref: "#/definitions/protobufStruct"
    description: "Container for task execution details and results."
    example:
      phase: {}
      duration: "duration"
      updated_at: "2000-01-23T04:56:07.000+00:00"
      custom_info:
        fields:
          key:
            list_value:
              values:
              - null
              - null
            number_value: 6.027456183070403
            string_value: "string_value"
            null_value: {}
            bool_value: true
      output_uri: "output_uri"
      started_at: "2000-01-23T04:56:07.000+00:00"
      created_at: "2000-01-23T04:56:07.000+00:00"
      error:
        code: "code"
        kind: {}
        message: "message"
        error_uri: "error_uri"
      logs:
      - message_format: {}
        name: "name"
        uri: "uri"
        ttl: "ttl"
      - message_format: {}
        name: "name"
        uri: "uri"
        ttl: "ttl"
  adminTaskExecutionEventRequest:
    type: "object"
    properties:
      request_id:
        type: "string"
        title: "Unique ID for this request that can be traced between services"
      event:
        description: "Details about the event that occurred."
        $ref: "#/definitions/eventTaskExecutionEvent"
    description: "Request to send a notification that a task execution event has occurred."
  adminTaskExecutionEventResponse:
    type: "object"
  adminTaskExecutionGetDataResponse:
    type: "object"
    properties:
      inputs:
        description: "Signed url to fetch a core.LiteralMap of task execution inputs."
        $ref: "#/definitions/adminUrlBlob"
      outputs:
        description: "Signed url to fetch a core.LiteralMap of task execution outputs."
        $ref: "#/definitions/adminUrlBlob"
    description: "Response structure for TaskExecutionGetDataRequest which contains\
      \ inputs and outputs for a task execution."
    example:
      outputs:
        bytes: "bytes"
        url: "url"
      inputs:
        bytes: "bytes"
        url: "url"
  adminTaskExecutionList:
    type: "object"
    properties:
      task_executions:
        type: "array"
        items:
          $ref: "#/definitions/flyteidladminTaskExecution"
      token:
        type: "string"
        description: "In the case of multiple pages of results, the server-provided\
          \ token can be used to fetch the next page\nin a query. If there are no\
          \ more results, this value will be empty."
    description: "Response structure for a query to list of task execution entities."
    example:
      task_executions:
      - input_uri: "input_uri"
        id:
          task_id:
            domain: "domain"
            resource_type: {}
            name: "name"
            project: "project"
            version: "version"
          node_execution_id:
            execution_id:
              domain: "domain"
              name: "name"
              project: "project"
            node_id: "node_id"
          retry_attempt: 0
        is_parent: true
        closure:
          phase: {}
          duration: "duration"
          updated_at: "2000-01-23T04:56:07.000+00:00"
          custom_info:
            fields:
              key:
                list_value:
                  values:
                  - null
                  - null
                number_value: 6.027456183070403
                string_value: "string_value"
                null_value: {}
                bool_value: true
          output_uri: "output_uri"
          started_at: "2000-01-23T04:56:07.000+00:00"
          created_at: "2000-01-23T04:56:07.000+00:00"
          error:
            code: "code"
            kind: {}
            message: "message"
            error_uri: "error_uri"
          logs:
          - message_format: {}
            name: "name"
            uri: "uri"
            ttl: "ttl"
          - message_format: {}
            name: "name"
            uri: "uri"
            ttl: "ttl"
      - input_uri: "input_uri"
        id:
          task_id:
            domain: "domain"
            resource_type: {}
            name: "name"
            project: "project"
            version: "version"
          node_execution_id:
            execution_id:
              domain: "domain"
              name: "name"
              project: "project"
            node_id: "node_id"
          retry_attempt: 0
        is_parent: true
        closure:
          phase: {}
          duration: "duration"
          updated_at: "2000-01-23T04:56:07.000+00:00"
          custom_info:
            fields:
              key:
                list_value:
                  values:
                  - null
                  - null
                number_value: 6.027456183070403
                string_value: "string_value"
                null_value: {}
                bool_value: true
          output_uri: "output_uri"
          started_at: "2000-01-23T04:56:07.000+00:00"
          created_at: "2000-01-23T04:56:07.000+00:00"
          error:
            code: "code"
            kind: {}
            message: "message"
            error_uri: "error_uri"
          logs:
          - message_format: {}
            name: "name"
            uri: "uri"
            ttl: "ttl"
          - message_format: {}
            name: "name"
            uri: "uri"
            ttl: "ttl"
      token: "token"
  adminTaskList:
    type: "object"
    properties:
      tasks:
        type: "array"
        description: "A list of tasks returned based on the request."
        items:
          $ref: "#/definitions/adminTask"
      token:
        type: "string"
        description: "In the case of multiple pages of results, the server-provided\
          \ token can be used to fetch the next page\nin a query. If there are no\
          \ more results, this value will be empty."
    description: "Represents a list of tasks returned from the admin."
    example:
      tasks:
      - id:
          domain: "domain"
          resource_type: {}
          name: "name"
          project: "project"
          version: "version"
        closure:
          created_at: "2000-01-23T04:56:07.000+00:00"
          compiled_task:
            template:
              container:
                args:
                - "args"
                - "args"
                image: "image"
                resources:
                  requests:
                  - name: {}
                    value: "value"
                  - name: {}
                    value: "value"
                  limits:
                  - name: {}
                    value: "value"
                  - name: {}
                    value: "value"
                env:
                - value: "value"
                  key: "key"
                - value: "value"
                  key: "key"
                ports:
                - container_port: 6
                - container_port: 6
                config:
                - value: "value"
                  key: "key"
                - value: "value"
                  key: "key"
                command:
                - "command"
                - "command"
              metadata:
                retries:
                  retries: 0
                discoverable: true
                runtime:
                  flavor: "flavor"
                  type: {}
                  version: "version"
                discovery_version: "discovery_version"
                deprecated_error_message: "deprecated_error_message"
                interruptible: true
                timeout: "timeout"
              custom:
                fields:
                  key:
                    list_value:
                      values:
                      - null
                      - null
                    number_value: 6.027456183070403
                    string_value: "string_value"
                    null_value: {}
                    bool_value: true
              id:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
              type: "type"
              interface:
                outputs:
                  variables:
                    key:
                      description: "description"
                      type:
                        schema:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        metadata:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                        blob:
                          dimensionality: {}
                          format: "format"
                        simple: {}
                inputs:
                  variables:
                    key:
                      description: "description"
                      type:
                        schema:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        metadata:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                        blob:
                          dimensionality: {}
                          format: "format"
                        simple: {}
      - id:
          domain: "domain"
          resource_type: {}
          name: "name"
          project: "project"
          version: "version"
        closure:
          created_at: "2000-01-23T04:56:07.000+00:00"
          compiled_task:
            template:
              container:
                args:
                - "args"
                - "args"
                image: "image"
                resources:
                  requests:
                  - name: {}
                    value: "value"
                  - name: {}
                    value: "value"
                  limits:
                  - name: {}
                    value: "value"
                  - name: {}
                    value: "value"
                env:
                - value: "value"
                  key: "key"
                - value: "value"
                  key: "key"
                ports:
                - container_port: 6
                - container_port: 6
                config:
                - value: "value"
                  key: "key"
                - value: "value"
                  key: "key"
                command:
                - "command"
                - "command"
              metadata:
                retries:
                  retries: 0
                discoverable: true
                runtime:
                  flavor: "flavor"
                  type: {}
                  version: "version"
                discovery_version: "discovery_version"
                deprecated_error_message: "deprecated_error_message"
                interruptible: true
                timeout: "timeout"
              custom:
                fields:
                  key:
                    list_value:
                      values:
                      - null
                      - null
                    number_value: 6.027456183070403
                    string_value: "string_value"
                    null_value: {}
                    bool_value: true
              id:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
              type: "type"
              interface:
                outputs:
                  variables:
                    key:
                      description: "description"
                      type:
                        schema:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        metadata:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                        blob:
                          dimensionality: {}
                          format: "format"
                        simple: {}
                inputs:
                  variables:
                    key:
                      description: "description"
                      type:
                        schema:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        metadata:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                        blob:
                          dimensionality: {}
                          format: "format"
                        simple: {}
      token: "token"
  adminTaskResourceAttributes:
    type: "object"
    properties:
      defaults:
        $ref: "#/definitions/adminTaskResourceSpec"
      limits:
        $ref: "#/definitions/adminTaskResourceSpec"
    example:
      defaults:
        memory: "memory"
        cpu: "cpu"
        storage: "storage"
        gpu: "gpu"
      limits:
        memory: "memory"
        cpu: "cpu"
        storage: "storage"
        gpu: "gpu"
  adminTaskResourceSpec:
    type: "object"
    properties:
      cpu:
        type: "string"
      gpu:
        type: "string"
      memory:
        type: "string"
      storage:
        type: "string"
    example:
      memory: "memory"
      cpu: "cpu"
      storage: "storage"
      gpu: "gpu"
  adminTaskSpec:
    type: "object"
    properties:
      template:
        description: "Template of the task that encapsulates all the metadata of the\
          \ task."
        $ref: "#/definitions/coreTaskTemplate"
    description: "Represents a structure that encapsulates the user-configured specification\
      \ of the task."
  adminUrlBlob:
    type: "object"
    properties:
      url:
        type: "string"
        description: "Actual url value."
      bytes:
        type: "string"
        format: "int64"
        description: "Represents the size of the file accessible at the above url."
    description: "Represents a string url and associated metadata used throughout\
      \ the platform."
    example:
      bytes: "bytes"
      url: "url"
  adminWorkflow:
    type: "object"
    properties:
      id:
        description: "id represents the unique identifier of the workflow."
        $ref: "#/definitions/coreIdentifier"
      closure:
        description: "closure encapsulates all the fields that maps to a compiled\
          \ version of the workflow."
        $ref: "#/definitions/adminWorkflowClosure"
    description: "Represents the workflow structure stored in the Admin\nA workflow\
      \ is created by ordering tasks and associating outputs to inputs\nin order to\
      \ produce a directed-acyclic execution graph."
    example:
      id:
        domain: "domain"
        resource_type: {}
        name: "name"
        project: "project"
        version: "version"
      closure:
        compiled_workflow:
          sub_workflows:
          - template:
              outputs:
              - var: "var"
                binding:
                  scalar:
                    schema:
                      type:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      uri: "uri"
                    blob:
                      metadata:
                        type:
                          dimensionality: {}
                          format: "format"
                      uri: "uri"
                    none_type: {}
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    binary:
                      tag: "tag"
                      value: "value"
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    generic:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                  promise:
                    var: "var"
                    node_id: "node_id"
                  collection:
                    bindings:
                    - null
                    - null
                  map:
                    bindings: {}
              - var: "var"
                binding:
                  scalar:
                    schema:
                      type:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      uri: "uri"
                    blob:
                      metadata:
                        type:
                          dimensionality: {}
                          format: "format"
                      uri: "uri"
                    none_type: {}
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    binary:
                      tag: "tag"
                      value: "value"
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    generic:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                  promise:
                    var: "var"
                    node_id: "node_id"
                  collection:
                    bindings:
                    - null
                    - null
                  map:
                    bindings: {}
              metadata:
                queuing_budget: "queuing_budget"
              failure_node:
                branch_node:
                  if_else:
                    other:
                    - condition:
                        conjunction:
                          operator: {}
                        comparison:
                          left_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          right_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          operator: {}
                    - condition:
                        conjunction:
                          operator: {}
                        comparison:
                          left_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          right_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          operator: {}
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    case:
                      condition:
                        conjunction:
                          operator: {}
                        comparison:
                          left_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          right_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          operator: {}
                metadata:
                  retries:
                    retries: 0
                  name: "name"
                  interruptible: true
                  timeout: "timeout"
                upstream_node_ids:
                - "upstream_node_ids"
                - "upstream_node_ids"
                inputs:
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                output_aliases:
                - var: "var"
                  alias: "alias"
                - var: "var"
                  alias: "alias"
                task_node:
                  reference_id:
                    domain: "domain"
                    resource_type: {}
                    name: "name"
                    project: "project"
                    version: "version"
                id: "id"
                workflow_node:
                  launchplan_ref:
                    domain: "domain"
                    resource_type: {}
                    name: "name"
                    project: "project"
                    version: "version"
                  sub_workflow_ref:
                    domain: "domain"
                    resource_type: {}
                    name: "name"
                    project: "project"
                    version: "version"
              nodes:
              - branch_node:
                  if_else:
                    other:
                    - condition:
                        conjunction:
                          operator: {}
                        comparison:
                          left_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          right_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          operator: {}
                    - condition:
                        conjunction:
                          operator: {}
                        comparison:
                          left_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          right_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          operator: {}
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    case:
                      condition:
                        conjunction:
                          operator: {}
                        comparison:
                          left_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          right_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          operator: {}
                metadata:
                  retries:
                    retries: 0
                  name: "name"
                  interruptible: true
                  timeout: "timeout"
                upstream_node_ids:
                - "upstream_node_ids"
                - "upstream_node_ids"
                inputs:
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                output_aliases:
                - var: "var"
                  alias: "alias"
                - var: "var"
                  alias: "alias"
                task_node:
                  reference_id:
                    domain: "domain"
                    resource_type: {}
                    name: "name"
                    project: "project"
                    version: "version"
                id: "id"
                workflow_node:
                  launchplan_ref:
                    domain: "domain"
                    resource_type: {}
                    name: "name"
                    project: "project"
                    version: "version"
                  sub_workflow_ref:
                    domain: "domain"
                    resource_type: {}
                    name: "name"
                    project: "project"
                    version: "version"
              - branch_node:
                  if_else:
                    other:
                    - condition:
                        conjunction:
                          operator: {}
                        comparison:
                          left_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          right_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          operator: {}
                    - condition:
                        conjunction:
                          operator: {}
                        comparison:
                          left_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          right_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          operator: {}
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    case:
                      condition:
                        conjunction:
                          operator: {}
                        comparison:
                          left_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          right_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          operator: {}
                metadata:
                  retries:
                    retries: 0
                  name: "name"
                  interruptible: true
                  timeout: "timeout"
                upstream_node_ids:
                - "upstream_node_ids"
                - "upstream_node_ids"
                inputs:
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                output_aliases:
                - var: "var"
                  alias: "alias"
                - var: "var"
                  alias: "alias"
                task_node:
                  reference_id:
                    domain: "domain"
                    resource_type: {}
                    name: "name"
                    project: "project"
                    version: "version"
                id: "id"
                workflow_node:
                  launchplan_ref:
                    domain: "domain"
                    resource_type: {}
                    name: "name"
                    project: "project"
                    version: "version"
                  sub_workflow_ref:
                    domain: "domain"
                    resource_type: {}
                    name: "name"
                    project: "project"
                    version: "version"
              metadata_defaults:
                interruptible: true
              id:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
              interface:
                outputs:
                  variables:
                    key:
                      description: "description"
                      type:
                        schema:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        metadata:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                        blob:
                          dimensionality: {}
                          format: "format"
                        simple: {}
                inputs:
                  variables:
                    key:
                      description: "description"
                      type:
                        schema:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        metadata:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                        blob:
                          dimensionality: {}
                          format: "format"
                        simple: {}
            connections:
              upstream:
                key:
                  ids:
                  - "ids"
                  - "ids"
              downstream:
                key:
                  ids:
                  - "ids"
                  - "ids"
          - template:
              outputs:
              - var: "var"
                binding:
                  scalar:
                    schema:
                      type:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      uri: "uri"
                    blob:
                      metadata:
                        type:
                          dimensionality: {}
                          format: "format"
                      uri: "uri"
                    none_type: {}
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    binary:
                      tag: "tag"
                      value: "value"
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    generic:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                  promise:
                    var: "var"
                    node_id: "node_id"
                  collection:
                    bindings:
                    - null
                    - null
                  map:
                    bindings: {}
              - var: "var"
                binding:
                  scalar:
                    schema:
                      type:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      uri: "uri"
                    blob:
                      metadata:
                        type:
                          dimensionality: {}
                          format: "format"
                      uri: "uri"
                    none_type: {}
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    binary:
                      tag: "tag"
                      value: "value"
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    generic:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                  promise:
                    var: "var"
                    node_id: "node_id"
                  collection:
                    bindings:
                    - null
                    - null
                  map:
                    bindings: {}
              metadata:
                queuing_budget: "queuing_budget"
              failure_node:
                branch_node:
                  if_else:
                    other:
                    - condition:
                        conjunction:
                          operator: {}
                        comparison:
                          left_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          right_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          operator: {}
                    - condition:
                        conjunction:
                          operator: {}
                        comparison:
                          left_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          right_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          operator: {}
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    case:
                      condition:
                        conjunction:
                          operator: {}
                        comparison:
                          left_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          right_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          operator: {}
                metadata:
                  retries:
                    retries: 0
                  name: "name"
                  interruptible: true
                  timeout: "timeout"
                upstream_node_ids:
                - "upstream_node_ids"
                - "upstream_node_ids"
                inputs:
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                output_aliases:
                - var: "var"
                  alias: "alias"
                - var: "var"
                  alias: "alias"
                task_node:
                  reference_id:
                    domain: "domain"
                    resource_type: {}
                    name: "name"
                    project: "project"
                    version: "version"
                id: "id"
                workflow_node:
                  launchplan_ref:
                    domain: "domain"
                    resource_type: {}
                    name: "name"
                    project: "project"
                    version: "version"
                  sub_workflow_ref:
                    domain: "domain"
                    resource_type: {}
                    name: "name"
                    project: "project"
                    version: "version"
              nodes:
              - branch_node:
                  if_else:
                    other:
                    - condition:
                        conjunction:
                          operator: {}
                        comparison:
                          left_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          right_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          operator: {}
                    - condition:
                        conjunction:
                          operator: {}
                        comparison:
                          left_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          right_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          operator: {}
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    case:
                      condition:
                        conjunction:
                          operator: {}
                        comparison:
                          left_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          right_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          operator: {}
                metadata:
                  retries:
                    retries: 0
                  name: "name"
                  interruptible: true
                  timeout: "timeout"
                upstream_node_ids:
                - "upstream_node_ids"
                - "upstream_node_ids"
                inputs:
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                output_aliases:
                - var: "var"
                  alias: "alias"
                - var: "var"
                  alias: "alias"
                task_node:
                  reference_id:
                    domain: "domain"
                    resource_type: {}
                    name: "name"
                    project: "project"
                    version: "version"
                id: "id"
                workflow_node:
                  launchplan_ref:
                    domain: "domain"
                    resource_type: {}
                    name: "name"
                    project: "project"
                    version: "version"
                  sub_workflow_ref:
                    domain: "domain"
                    resource_type: {}
                    name: "name"
                    project: "project"
                    version: "version"
              - branch_node:
                  if_else:
                    other:
                    - condition:
                        conjunction:
                          operator: {}
                        comparison:
                          left_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          right_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          operator: {}
                    - condition:
                        conjunction:
                          operator: {}
                        comparison:
                          left_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          right_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          operator: {}
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    case:
                      condition:
                        conjunction:
                          operator: {}
                        comparison:
                          left_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          right_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          operator: {}
                metadata:
                  retries:
                    retries: 0
                  name: "name"
                  interruptible: true
                  timeout: "timeout"
                upstream_node_ids:
                - "upstream_node_ids"
                - "upstream_node_ids"
                inputs:
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                output_aliases:
                - var: "var"
                  alias: "alias"
                - var: "var"
                  alias: "alias"
                task_node:
                  reference_id:
                    domain: "domain"
                    resource_type: {}
                    name: "name"
                    project: "project"
                    version: "version"
                id: "id"
                workflow_node:
                  launchplan_ref:
                    domain: "domain"
                    resource_type: {}
                    name: "name"
                    project: "project"
                    version: "version"
                  sub_workflow_ref:
                    domain: "domain"
                    resource_type: {}
                    name: "name"
                    project: "project"
                    version: "version"
              metadata_defaults:
                interruptible: true
              id:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
              interface:
                outputs:
                  variables:
                    key:
                      description: "description"
                      type:
                        schema:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        metadata:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                        blob:
                          dimensionality: {}
                          format: "format"
                        simple: {}
                inputs:
                  variables:
                    key:
                      description: "description"
                      type:
                        schema:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        metadata:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                        blob:
                          dimensionality: {}
                          format: "format"
                        simple: {}
            connections:
              upstream:
                key:
                  ids:
                  - "ids"
                  - "ids"
              downstream:
                key:
                  ids:
                  - "ids"
                  - "ids"
          tasks:
          - template:
              container:
                args:
                - "args"
                - "args"
                image: "image"
                resources:
                  requests:
                  - name: {}
                    value: "value"
                  - name: {}
                    value: "value"
                  limits:
                  - name: {}
                    value: "value"
                  - name: {}
                    value: "value"
                env:
                - value: "value"
                  key: "key"
                - value: "value"
                  key: "key"
                ports:
                - container_port: 6
                - container_port: 6
                config:
                - value: "value"
                  key: "key"
                - value: "value"
                  key: "key"
                command:
                - "command"
                - "command"
              metadata:
                retries:
                  retries: 0
                discoverable: true
                runtime:
                  flavor: "flavor"
                  type: {}
                  version: "version"
                discovery_version: "discovery_version"
                deprecated_error_message: "deprecated_error_message"
                interruptible: true
                timeout: "timeout"
              custom:
                fields:
                  key:
                    list_value:
                      values:
                      - null
                      - null
                    number_value: 6.027456183070403
                    string_value: "string_value"
                    null_value: {}
                    bool_value: true
              id:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
              type: "type"
              interface:
                outputs:
                  variables:
                    key:
                      description: "description"
                      type:
                        schema:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        metadata:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                        blob:
                          dimensionality: {}
                          format: "format"
                        simple: {}
                inputs:
                  variables:
                    key:
                      description: "description"
                      type:
                        schema:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        metadata:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                        blob:
                          dimensionality: {}
                          format: "format"
                        simple: {}
          - template:
              container:
                args:
                - "args"
                - "args"
                image: "image"
                resources:
                  requests:
                  - name: {}
                    value: "value"
                  - name: {}
                    value: "value"
                  limits:
                  - name: {}
                    value: "value"
                  - name: {}
                    value: "value"
                env:
                - value: "value"
                  key: "key"
                - value: "value"
                  key: "key"
                ports:
                - container_port: 6
                - container_port: 6
                config:
                - value: "value"
                  key: "key"
                - value: "value"
                  key: "key"
                command:
                - "command"
                - "command"
              metadata:
                retries:
                  retries: 0
                discoverable: true
                runtime:
                  flavor: "flavor"
                  type: {}
                  version: "version"
                discovery_version: "discovery_version"
                deprecated_error_message: "deprecated_error_message"
                interruptible: true
                timeout: "timeout"
              custom:
                fields:
                  key:
                    list_value:
                      values:
                      - null
                      - null
                    number_value: 6.027456183070403
                    string_value: "string_value"
                    null_value: {}
                    bool_value: true
              id:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
              type: "type"
              interface:
                outputs:
                  variables:
                    key:
                      description: "description"
                      type:
                        schema:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        metadata:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                        blob:
                          dimensionality: {}
                          format: "format"
                        simple: {}
                inputs:
                  variables:
                    key:
                      description: "description"
                      type:
                        schema:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        metadata:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                        blob:
                          dimensionality: {}
                          format: "format"
                        simple: {}
          primary:
            template:
              outputs:
              - var: "var"
                binding:
                  scalar:
                    schema:
                      type:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      uri: "uri"
                    blob:
                      metadata:
                        type:
                          dimensionality: {}
                          format: "format"
                      uri: "uri"
                    none_type: {}
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    binary:
                      tag: "tag"
                      value: "value"
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    generic:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                  promise:
                    var: "var"
                    node_id: "node_id"
                  collection:
                    bindings:
                    - null
                    - null
                  map:
                    bindings: {}
              - var: "var"
                binding:
                  scalar:
                    schema:
                      type:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      uri: "uri"
                    blob:
                      metadata:
                        type:
                          dimensionality: {}
                          format: "format"
                      uri: "uri"
                    none_type: {}
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    binary:
                      tag: "tag"
                      value: "value"
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    generic:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                  promise:
                    var: "var"
                    node_id: "node_id"
                  collection:
                    bindings:
                    - null
                    - null
                  map:
                    bindings: {}
              metadata:
                queuing_budget: "queuing_budget"
              failure_node:
                branch_node:
                  if_else:
                    other:
                    - condition:
                        conjunction:
                          operator: {}
                        comparison:
                          left_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          right_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          operator: {}
                    - condition:
                        conjunction:
                          operator: {}
                        comparison:
                          left_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          right_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          operator: {}
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    case:
                      condition:
                        conjunction:
                          operator: {}
                        comparison:
                          left_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          right_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          operator: {}
                metadata:
                  retries:
                    retries: 0
                  name: "name"
                  interruptible: true
                  timeout: "timeout"
                upstream_node_ids:
                - "upstream_node_ids"
                - "upstream_node_ids"
                inputs:
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                output_aliases:
                - var: "var"
                  alias: "alias"
                - var: "var"
                  alias: "alias"
                task_node:
                  reference_id:
                    domain: "domain"
                    resource_type: {}
                    name: "name"
                    project: "project"
                    version: "version"
                id: "id"
                workflow_node:
                  launchplan_ref:
                    domain: "domain"
                    resource_type: {}
                    name: "name"
                    project: "project"
                    version: "version"
                  sub_workflow_ref:
                    domain: "domain"
                    resource_type: {}
                    name: "name"
                    project: "project"
                    version: "version"
              nodes:
              - branch_node:
                  if_else:
                    other:
                    - condition:
                        conjunction:
                          operator: {}
                        comparison:
                          left_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          right_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          operator: {}
                    - condition:
                        conjunction:
                          operator: {}
                        comparison:
                          left_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          right_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          operator: {}
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    case:
                      condition:
                        conjunction:
                          operator: {}
                        comparison:
                          left_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          right_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          operator: {}
                metadata:
                  retries:
                    retries: 0
                  name: "name"
                  interruptible: true
                  timeout: "timeout"
                upstream_node_ids:
                - "upstream_node_ids"
                - "upstream_node_ids"
                inputs:
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                output_aliases:
                - var: "var"
                  alias: "alias"
                - var: "var"
                  alias: "alias"
                task_node:
                  reference_id:
                    domain: "domain"
                    resource_type: {}
                    name: "name"
                    project: "project"
                    version: "version"
                id: "id"
                workflow_node:
                  launchplan_ref:
                    domain: "domain"
                    resource_type: {}
                    name: "name"
                    project: "project"
                    version: "version"
                  sub_workflow_ref:
                    domain: "domain"
                    resource_type: {}
                    name: "name"
                    project: "project"
                    version: "version"
              - branch_node:
                  if_else:
                    other:
                    - condition:
                        conjunction:
                          operator: {}
                        comparison:
                          left_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          right_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          operator: {}
                    - condition:
                        conjunction:
                          operator: {}
                        comparison:
                          left_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          right_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          operator: {}
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    case:
                      condition:
                        conjunction:
                          operator: {}
                        comparison:
                          left_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          right_value:
                            primitive:
                              duration: "duration"
                              datetime: "2000-01-23T04:56:07.000+00:00"
                              string_value: "string_value"
                              boolean: true
                              float_value: 1.4658129805029452
                              integer: "integer"
                            var: "var"
                          operator: {}
                metadata:
                  retries:
                    retries: 0
                  name: "name"
                  interruptible: true
                  timeout: "timeout"
                upstream_node_ids:
                - "upstream_node_ids"
                - "upstream_node_ids"
                inputs:
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                output_aliases:
                - var: "var"
                  alias: "alias"
                - var: "var"
                  alias: "alias"
                task_node:
                  reference_id:
                    domain: "domain"
                    resource_type: {}
                    name: "name"
                    project: "project"
                    version: "version"
                id: "id"
                workflow_node:
                  launchplan_ref:
                    domain: "domain"
                    resource_type: {}
                    name: "name"
                    project: "project"
                    version: "version"
                  sub_workflow_ref:
                    domain: "domain"
                    resource_type: {}
                    name: "name"
                    project: "project"
                    version: "version"
              metadata_defaults:
                interruptible: true
              id:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
              interface:
                outputs:
                  variables:
                    key:
                      description: "description"
                      type:
                        schema:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        metadata:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                        blob:
                          dimensionality: {}
                          format: "format"
                        simple: {}
                inputs:
                  variables:
                    key:
                      description: "description"
                      type:
                        schema:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        metadata:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                        blob:
                          dimensionality: {}
                          format: "format"
                        simple: {}
            connections:
              upstream:
                key:
                  ids:
                  - "ids"
                  - "ids"
              downstream:
                key:
                  ids:
                  - "ids"
                  - "ids"
        created_at: "2000-01-23T04:56:07.000+00:00"
  adminWorkflowAttributes:
    type: "object"
    properties:
      project:
        type: "string"
        description: "Unique project id for which this set of attributes will be applied."
      domain:
        type: "string"
        description: "Unique domain id for which this set of attributes will be applied."
      workflow:
        type: "string"
        description: "Workflow name for which this set of attributes will be applied."
      matching_attributes:
        $ref: "#/definitions/adminMatchingAttributes"
    example:
      workflow: "workflow"
      domain: "domain"
      project: "project"
      matching_attributes:
        cluster_resource_attributes:
          attributes:
            key: "attributes"
        execution_queue_attributes:
          tags:
          - "tags"
          - "tags"
        task_resource_attributes:
          defaults:
            memory: "memory"
            cpu: "cpu"
            storage: "storage"
            gpu: "gpu"
          limits:
            memory: "memory"
            cpu: "cpu"
            storage: "storage"
            gpu: "gpu"
        execution_cluster_label:
          value: "value"
  adminWorkflowAttributesDeleteRequest:
    type: "object"
    properties:
      project:
        type: "string"
        description: "Unique project id which this set of attributes references."
      domain:
        type: "string"
        description: "Unique domain id which this set of attributes references."
      workflow:
        type: "string"
        description: "Workflow name which this set of attributes references."
      resource_type:
        $ref: "#/definitions/adminMatchableResource"
  adminWorkflowAttributesDeleteResponse:
    type: "object"
    description: "Purposefully empty, may be populated in the future."
  adminWorkflowAttributesGetResponse:
    type: "object"
    properties:
      attributes:
        $ref: "#/definitions/adminWorkflowAttributes"
    example:
      attributes:
        workflow: "workflow"
        domain: "domain"
        project: "project"
        matching_attributes:
          cluster_resource_attributes:
            attributes:
              key: "attributes"
          execution_queue_attributes:
            tags:
            - "tags"
            - "tags"
          task_resource_attributes:
            defaults:
              memory: "memory"
              cpu: "cpu"
              storage: "storage"
              gpu: "gpu"
            limits:
              memory: "memory"
              cpu: "cpu"
              storage: "storage"
              gpu: "gpu"
          execution_cluster_label:
            value: "value"
  adminWorkflowAttributesUpdateRequest:
    type: "object"
    properties:
      attributes:
        $ref: "#/definitions/adminWorkflowAttributes"
    description: "Sets custom attributes for a project, domain and workflow combination."
  adminWorkflowAttributesUpdateResponse:
    type: "object"
    description: "Purposefully empty, may be populated in the future."
  adminWorkflowClosure:
    type: "object"
    properties:
      compiled_workflow:
        description: "Represents the compiled representation of the workflow from\
          \ the specification provided."
        $ref: "#/definitions/coreCompiledWorkflowClosure"
      created_at:
        type: "string"
        format: "date-time"
        description: "Time at which the workflow was created."
    description: "A container holding the compiled workflow produced from the WorkflowSpec\
      \ and additional metadata."
    example:
      compiled_workflow:
        sub_workflows:
        - template:
            outputs:
            - var: "var"
              binding:
                scalar:
                  schema:
                    type:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    uri: "uri"
                  blob:
                    metadata:
                      type:
                        dimensionality: {}
                        format: "format"
                    uri: "uri"
                  none_type: {}
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  binary:
                    tag: "tag"
                    value: "value"
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  generic:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                promise:
                  var: "var"
                  node_id: "node_id"
                collection:
                  bindings:
                  - null
                  - null
                map:
                  bindings: {}
            - var: "var"
              binding:
                scalar:
                  schema:
                    type:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    uri: "uri"
                  blob:
                    metadata:
                      type:
                        dimensionality: {}
                        format: "format"
                    uri: "uri"
                  none_type: {}
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  binary:
                    tag: "tag"
                    value: "value"
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  generic:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                promise:
                  var: "var"
                  node_id: "node_id"
                collection:
                  bindings:
                  - null
                  - null
                map:
                  bindings: {}
            metadata:
              queuing_budget: "queuing_budget"
            failure_node:
              branch_node:
                if_else:
                  other:
                  - condition:
                      conjunction:
                        operator: {}
                      comparison:
                        left_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        right_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        operator: {}
                  - condition:
                      conjunction:
                        operator: {}
                      comparison:
                        left_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        right_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        operator: {}
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  case:
                    condition:
                      conjunction:
                        operator: {}
                      comparison:
                        left_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        right_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        operator: {}
              metadata:
                retries:
                  retries: 0
                name: "name"
                interruptible: true
                timeout: "timeout"
              upstream_node_ids:
              - "upstream_node_ids"
              - "upstream_node_ids"
              inputs:
              - var: "var"
                binding:
                  scalar:
                    schema:
                      type:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      uri: "uri"
                    blob:
                      metadata:
                        type:
                          dimensionality: {}
                          format: "format"
                      uri: "uri"
                    none_type: {}
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    binary:
                      tag: "tag"
                      value: "value"
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    generic:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                  promise:
                    var: "var"
                    node_id: "node_id"
                  collection:
                    bindings:
                    - null
                    - null
                  map:
                    bindings: {}
              - var: "var"
                binding:
                  scalar:
                    schema:
                      type:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      uri: "uri"
                    blob:
                      metadata:
                        type:
                          dimensionality: {}
                          format: "format"
                      uri: "uri"
                    none_type: {}
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    binary:
                      tag: "tag"
                      value: "value"
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    generic:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                  promise:
                    var: "var"
                    node_id: "node_id"
                  collection:
                    bindings:
                    - null
                    - null
                  map:
                    bindings: {}
              output_aliases:
              - var: "var"
                alias: "alias"
              - var: "var"
                alias: "alias"
              task_node:
                reference_id:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
              id: "id"
              workflow_node:
                launchplan_ref:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
                sub_workflow_ref:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
            nodes:
            - branch_node:
                if_else:
                  other:
                  - condition:
                      conjunction:
                        operator: {}
                      comparison:
                        left_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        right_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        operator: {}
                  - condition:
                      conjunction:
                        operator: {}
                      comparison:
                        left_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        right_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        operator: {}
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  case:
                    condition:
                      conjunction:
                        operator: {}
                      comparison:
                        left_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        right_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        operator: {}
              metadata:
                retries:
                  retries: 0
                name: "name"
                interruptible: true
                timeout: "timeout"
              upstream_node_ids:
              - "upstream_node_ids"
              - "upstream_node_ids"
              inputs:
              - var: "var"
                binding:
                  scalar:
                    schema:
                      type:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      uri: "uri"
                    blob:
                      metadata:
                        type:
                          dimensionality: {}
                          format: "format"
                      uri: "uri"
                    none_type: {}
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    binary:
                      tag: "tag"
                      value: "value"
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    generic:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                  promise:
                    var: "var"
                    node_id: "node_id"
                  collection:
                    bindings:
                    - null
                    - null
                  map:
                    bindings: {}
              - var: "var"
                binding:
                  scalar:
                    schema:
                      type:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      uri: "uri"
                    blob:
                      metadata:
                        type:
                          dimensionality: {}
                          format: "format"
                      uri: "uri"
                    none_type: {}
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    binary:
                      tag: "tag"
                      value: "value"
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    generic:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                  promise:
                    var: "var"
                    node_id: "node_id"
                  collection:
                    bindings:
                    - null
                    - null
                  map:
                    bindings: {}
              output_aliases:
              - var: "var"
                alias: "alias"
              - var: "var"
                alias: "alias"
              task_node:
                reference_id:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
              id: "id"
              workflow_node:
                launchplan_ref:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
                sub_workflow_ref:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
            - branch_node:
                if_else:
                  other:
                  - condition:
                      conjunction:
                        operator: {}
                      comparison:
                        left_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        right_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        operator: {}
                  - condition:
                      conjunction:
                        operator: {}
                      comparison:
                        left_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        right_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        operator: {}
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  case:
                    condition:
                      conjunction:
                        operator: {}
                      comparison:
                        left_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        right_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        operator: {}
              metadata:
                retries:
                  retries: 0
                name: "name"
                interruptible: true
                timeout: "timeout"
              upstream_node_ids:
              - "upstream_node_ids"
              - "upstream_node_ids"
              inputs:
              - var: "var"
                binding:
                  scalar:
                    schema:
                      type:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      uri: "uri"
                    blob:
                      metadata:
                        type:
                          dimensionality: {}
                          format: "format"
                      uri: "uri"
                    none_type: {}
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    binary:
                      tag: "tag"
                      value: "value"
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    generic:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                  promise:
                    var: "var"
                    node_id: "node_id"
                  collection:
                    bindings:
                    - null
                    - null
                  map:
                    bindings: {}
              - var: "var"
                binding:
                  scalar:
                    schema:
                      type:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      uri: "uri"
                    blob:
                      metadata:
                        type:
                          dimensionality: {}
                          format: "format"
                      uri: "uri"
                    none_type: {}
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    binary:
                      tag: "tag"
                      value: "value"
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    generic:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                  promise:
                    var: "var"
                    node_id: "node_id"
                  collection:
                    bindings:
                    - null
                    - null
                  map:
                    bindings: {}
              output_aliases:
              - var: "var"
                alias: "alias"
              - var: "var"
                alias: "alias"
              task_node:
                reference_id:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
              id: "id"
              workflow_node:
                launchplan_ref:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
                sub_workflow_ref:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
            metadata_defaults:
              interruptible: true
            id:
              domain: "domain"
              resource_type: {}
              name: "name"
              project: "project"
              version: "version"
            interface:
              outputs:
                variables:
                  key:
                    description: "description"
                    type:
                      schema:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      metadata:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                      blob:
                        dimensionality: {}
                        format: "format"
                      simple: {}
              inputs:
                variables:
                  key:
                    description: "description"
                    type:
                      schema:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      metadata:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                      blob:
                        dimensionality: {}
                        format: "format"
                      simple: {}
          connections:
            upstream:
              key:
                ids:
                - "ids"
                - "ids"
            downstream:
              key:
                ids:
                - "ids"
                - "ids"
        - template:
            outputs:
            - var: "var"
              binding:
                scalar:
                  schema:
                    type:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    uri: "uri"
                  blob:
                    metadata:
                      type:
                        dimensionality: {}
                        format: "format"
                    uri: "uri"
                  none_type: {}
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  binary:
                    tag: "tag"
                    value: "value"
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  generic:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                promise:
                  var: "var"
                  node_id: "node_id"
                collection:
                  bindings:
                  - null
                  - null
                map:
                  bindings: {}
            - var: "var"
              binding:
                scalar:
                  schema:
                    type:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    uri: "uri"
                  blob:
                    metadata:
                      type:
                        dimensionality: {}
                        format: "format"
                    uri: "uri"
                  none_type: {}
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  binary:
                    tag: "tag"
                    value: "value"
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  generic:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                promise:
                  var: "var"
                  node_id: "node_id"
                collection:
                  bindings:
                  - null
                  - null
                map:
                  bindings: {}
            metadata:
              queuing_budget: "queuing_budget"
            failure_node:
              branch_node:
                if_else:
                  other:
                  - condition:
                      conjunction:
                        operator: {}
                      comparison:
                        left_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        right_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        operator: {}
                  - condition:
                      conjunction:
                        operator: {}
                      comparison:
                        left_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        right_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        operator: {}
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  case:
                    condition:
                      conjunction:
                        operator: {}
                      comparison:
                        left_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        right_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        operator: {}
              metadata:
                retries:
                  retries: 0
                name: "name"
                interruptible: true
                timeout: "timeout"
              upstream_node_ids:
              - "upstream_node_ids"
              - "upstream_node_ids"
              inputs:
              - var: "var"
                binding:
                  scalar:
                    schema:
                      type:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      uri: "uri"
                    blob:
                      metadata:
                        type:
                          dimensionality: {}
                          format: "format"
                      uri: "uri"
                    none_type: {}
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    binary:
                      tag: "tag"
                      value: "value"
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    generic:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                  promise:
                    var: "var"
                    node_id: "node_id"
                  collection:
                    bindings:
                    - null
                    - null
                  map:
                    bindings: {}
              - var: "var"
                binding:
                  scalar:
                    schema:
                      type:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      uri: "uri"
                    blob:
                      metadata:
                        type:
                          dimensionality: {}
                          format: "format"
                      uri: "uri"
                    none_type: {}
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    binary:
                      tag: "tag"
                      value: "value"
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    generic:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                  promise:
                    var: "var"
                    node_id: "node_id"
                  collection:
                    bindings:
                    - null
                    - null
                  map:
                    bindings: {}
              output_aliases:
              - var: "var"
                alias: "alias"
              - var: "var"
                alias: "alias"
              task_node:
                reference_id:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
              id: "id"
              workflow_node:
                launchplan_ref:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
                sub_workflow_ref:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
            nodes:
            - branch_node:
                if_else:
                  other:
                  - condition:
                      conjunction:
                        operator: {}
                      comparison:
                        left_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        right_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        operator: {}
                  - condition:
                      conjunction:
                        operator: {}
                      comparison:
                        left_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        right_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        operator: {}
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  case:
                    condition:
                      conjunction:
                        operator: {}
                      comparison:
                        left_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        right_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        operator: {}
              metadata:
                retries:
                  retries: 0
                name: "name"
                interruptible: true
                timeout: "timeout"
              upstream_node_ids:
              - "upstream_node_ids"
              - "upstream_node_ids"
              inputs:
              - var: "var"
                binding:
                  scalar:
                    schema:
                      type:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      uri: "uri"
                    blob:
                      metadata:
                        type:
                          dimensionality: {}
                          format: "format"
                      uri: "uri"
                    none_type: {}
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    binary:
                      tag: "tag"
                      value: "value"
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    generic:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                  promise:
                    var: "var"
                    node_id: "node_id"
                  collection:
                    bindings:
                    - null
                    - null
                  map:
                    bindings: {}
              - var: "var"
                binding:
                  scalar:
                    schema:
                      type:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      uri: "uri"
                    blob:
                      metadata:
                        type:
                          dimensionality: {}
                          format: "format"
                      uri: "uri"
                    none_type: {}
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    binary:
                      tag: "tag"
                      value: "value"
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    generic:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                  promise:
                    var: "var"
                    node_id: "node_id"
                  collection:
                    bindings:
                    - null
                    - null
                  map:
                    bindings: {}
              output_aliases:
              - var: "var"
                alias: "alias"
              - var: "var"
                alias: "alias"
              task_node:
                reference_id:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
              id: "id"
              workflow_node:
                launchplan_ref:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
                sub_workflow_ref:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
            - branch_node:
                if_else:
                  other:
                  - condition:
                      conjunction:
                        operator: {}
                      comparison:
                        left_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        right_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        operator: {}
                  - condition:
                      conjunction:
                        operator: {}
                      comparison:
                        left_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        right_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        operator: {}
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  case:
                    condition:
                      conjunction:
                        operator: {}
                      comparison:
                        left_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        right_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        operator: {}
              metadata:
                retries:
                  retries: 0
                name: "name"
                interruptible: true
                timeout: "timeout"
              upstream_node_ids:
              - "upstream_node_ids"
              - "upstream_node_ids"
              inputs:
              - var: "var"
                binding:
                  scalar:
                    schema:
                      type:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      uri: "uri"
                    blob:
                      metadata:
                        type:
                          dimensionality: {}
                          format: "format"
                      uri: "uri"
                    none_type: {}
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    binary:
                      tag: "tag"
                      value: "value"
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    generic:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                  promise:
                    var: "var"
                    node_id: "node_id"
                  collection:
                    bindings:
                    - null
                    - null
                  map:
                    bindings: {}
              - var: "var"
                binding:
                  scalar:
                    schema:
                      type:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      uri: "uri"
                    blob:
                      metadata:
                        type:
                          dimensionality: {}
                          format: "format"
                      uri: "uri"
                    none_type: {}
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    binary:
                      tag: "tag"
                      value: "value"
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    generic:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                  promise:
                    var: "var"
                    node_id: "node_id"
                  collection:
                    bindings:
                    - null
                    - null
                  map:
                    bindings: {}
              output_aliases:
              - var: "var"
                alias: "alias"
              - var: "var"
                alias: "alias"
              task_node:
                reference_id:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
              id: "id"
              workflow_node:
                launchplan_ref:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
                sub_workflow_ref:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
            metadata_defaults:
              interruptible: true
            id:
              domain: "domain"
              resource_type: {}
              name: "name"
              project: "project"
              version: "version"
            interface:
              outputs:
                variables:
                  key:
                    description: "description"
                    type:
                      schema:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      metadata:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                      blob:
                        dimensionality: {}
                        format: "format"
                      simple: {}
              inputs:
                variables:
                  key:
                    description: "description"
                    type:
                      schema:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      metadata:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                      blob:
                        dimensionality: {}
                        format: "format"
                      simple: {}
          connections:
            upstream:
              key:
                ids:
                - "ids"
                - "ids"
            downstream:
              key:
                ids:
                - "ids"
                - "ids"
        tasks:
        - template:
            container:
              args:
              - "args"
              - "args"
              image: "image"
              resources:
                requests:
                - name: {}
                  value: "value"
                - name: {}
                  value: "value"
                limits:
                - name: {}
                  value: "value"
                - name: {}
                  value: "value"
              env:
              - value: "value"
                key: "key"
              - value: "value"
                key: "key"
              ports:
              - container_port: 6
              - container_port: 6
              config:
              - value: "value"
                key: "key"
              - value: "value"
                key: "key"
              command:
              - "command"
              - "command"
            metadata:
              retries:
                retries: 0
              discoverable: true
              runtime:
                flavor: "flavor"
                type: {}
                version: "version"
              discovery_version: "discovery_version"
              deprecated_error_message: "deprecated_error_message"
              interruptible: true
              timeout: "timeout"
            custom:
              fields:
                key:
                  list_value:
                    values:
                    - null
                    - null
                  number_value: 6.027456183070403
                  string_value: "string_value"
                  null_value: {}
                  bool_value: true
            id:
              domain: "domain"
              resource_type: {}
              name: "name"
              project: "project"
              version: "version"
            type: "type"
            interface:
              outputs:
                variables:
                  key:
                    description: "description"
                    type:
                      schema:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      metadata:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                      blob:
                        dimensionality: {}
                        format: "format"
                      simple: {}
              inputs:
                variables:
                  key:
                    description: "description"
                    type:
                      schema:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      metadata:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                      blob:
                        dimensionality: {}
                        format: "format"
                      simple: {}
        - template:
            container:
              args:
              - "args"
              - "args"
              image: "image"
              resources:
                requests:
                - name: {}
                  value: "value"
                - name: {}
                  value: "value"
                limits:
                - name: {}
                  value: "value"
                - name: {}
                  value: "value"
              env:
              - value: "value"
                key: "key"
              - value: "value"
                key: "key"
              ports:
              - container_port: 6
              - container_port: 6
              config:
              - value: "value"
                key: "key"
              - value: "value"
                key: "key"
              command:
              - "command"
              - "command"
            metadata:
              retries:
                retries: 0
              discoverable: true
              runtime:
                flavor: "flavor"
                type: {}
                version: "version"
              discovery_version: "discovery_version"
              deprecated_error_message: "deprecated_error_message"
              interruptible: true
              timeout: "timeout"
            custom:
              fields:
                key:
                  list_value:
                    values:
                    - null
                    - null
                  number_value: 6.027456183070403
                  string_value: "string_value"
                  null_value: {}
                  bool_value: true
            id:
              domain: "domain"
              resource_type: {}
              name: "name"
              project: "project"
              version: "version"
            type: "type"
            interface:
              outputs:
                variables:
                  key:
                    description: "description"
                    type:
                      schema:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      metadata:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                      blob:
                        dimensionality: {}
                        format: "format"
                      simple: {}
              inputs:
                variables:
                  key:
                    description: "description"
                    type:
                      schema:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      metadata:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                      blob:
                        dimensionality: {}
                        format: "format"
                      simple: {}
        primary:
          template:
            outputs:
            - var: "var"
              binding:
                scalar:
                  schema:
                    type:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    uri: "uri"
                  blob:
                    metadata:
                      type:
                        dimensionality: {}
                        format: "format"
                    uri: "uri"
                  none_type: {}
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  binary:
                    tag: "tag"
                    value: "value"
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  generic:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                promise:
                  var: "var"
                  node_id: "node_id"
                collection:
                  bindings:
                  - null
                  - null
                map:
                  bindings: {}
            - var: "var"
              binding:
                scalar:
                  schema:
                    type:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    uri: "uri"
                  blob:
                    metadata:
                      type:
                        dimensionality: {}
                        format: "format"
                    uri: "uri"
                  none_type: {}
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  binary:
                    tag: "tag"
                    value: "value"
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  generic:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                promise:
                  var: "var"
                  node_id: "node_id"
                collection:
                  bindings:
                  - null
                  - null
                map:
                  bindings: {}
            metadata:
              queuing_budget: "queuing_budget"
            failure_node:
              branch_node:
                if_else:
                  other:
                  - condition:
                      conjunction:
                        operator: {}
                      comparison:
                        left_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        right_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        operator: {}
                  - condition:
                      conjunction:
                        operator: {}
                      comparison:
                        left_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        right_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        operator: {}
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  case:
                    condition:
                      conjunction:
                        operator: {}
                      comparison:
                        left_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        right_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        operator: {}
              metadata:
                retries:
                  retries: 0
                name: "name"
                interruptible: true
                timeout: "timeout"
              upstream_node_ids:
              - "upstream_node_ids"
              - "upstream_node_ids"
              inputs:
              - var: "var"
                binding:
                  scalar:
                    schema:
                      type:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      uri: "uri"
                    blob:
                      metadata:
                        type:
                          dimensionality: {}
                          format: "format"
                      uri: "uri"
                    none_type: {}
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    binary:
                      tag: "tag"
                      value: "value"
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    generic:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                  promise:
                    var: "var"
                    node_id: "node_id"
                  collection:
                    bindings:
                    - null
                    - null
                  map:
                    bindings: {}
              - var: "var"
                binding:
                  scalar:
                    schema:
                      type:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      uri: "uri"
                    blob:
                      metadata:
                        type:
                          dimensionality: {}
                          format: "format"
                      uri: "uri"
                    none_type: {}
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    binary:
                      tag: "tag"
                      value: "value"
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    generic:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                  promise:
                    var: "var"
                    node_id: "node_id"
                  collection:
                    bindings:
                    - null
                    - null
                  map:
                    bindings: {}
              output_aliases:
              - var: "var"
                alias: "alias"
              - var: "var"
                alias: "alias"
              task_node:
                reference_id:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
              id: "id"
              workflow_node:
                launchplan_ref:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
                sub_workflow_ref:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
            nodes:
            - branch_node:
                if_else:
                  other:
                  - condition:
                      conjunction:
                        operator: {}
                      comparison:
                        left_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        right_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        operator: {}
                  - condition:
                      conjunction:
                        operator: {}
                      comparison:
                        left_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        right_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        operator: {}
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  case:
                    condition:
                      conjunction:
                        operator: {}
                      comparison:
                        left_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        right_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        operator: {}
              metadata:
                retries:
                  retries: 0
                name: "name"
                interruptible: true
                timeout: "timeout"
              upstream_node_ids:
              - "upstream_node_ids"
              - "upstream_node_ids"
              inputs:
              - var: "var"
                binding:
                  scalar:
                    schema:
                      type:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      uri: "uri"
                    blob:
                      metadata:
                        type:
                          dimensionality: {}
                          format: "format"
                      uri: "uri"
                    none_type: {}
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    binary:
                      tag: "tag"
                      value: "value"
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    generic:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                  promise:
                    var: "var"
                    node_id: "node_id"
                  collection:
                    bindings:
                    - null
                    - null
                  map:
                    bindings: {}
              - var: "var"
                binding:
                  scalar:
                    schema:
                      type:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      uri: "uri"
                    blob:
                      metadata:
                        type:
                          dimensionality: {}
                          format: "format"
                      uri: "uri"
                    none_type: {}
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    binary:
                      tag: "tag"
                      value: "value"
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    generic:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                  promise:
                    var: "var"
                    node_id: "node_id"
                  collection:
                    bindings:
                    - null
                    - null
                  map:
                    bindings: {}
              output_aliases:
              - var: "var"
                alias: "alias"
              - var: "var"
                alias: "alias"
              task_node:
                reference_id:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
              id: "id"
              workflow_node:
                launchplan_ref:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
                sub_workflow_ref:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
            - branch_node:
                if_else:
                  other:
                  - condition:
                      conjunction:
                        operator: {}
                      comparison:
                        left_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        right_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        operator: {}
                  - condition:
                      conjunction:
                        operator: {}
                      comparison:
                        left_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        right_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        operator: {}
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  case:
                    condition:
                      conjunction:
                        operator: {}
                      comparison:
                        left_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        right_value:
                          primitive:
                            duration: "duration"
                            datetime: "2000-01-23T04:56:07.000+00:00"
                            string_value: "string_value"
                            boolean: true
                            float_value: 1.4658129805029452
                            integer: "integer"
                          var: "var"
                        operator: {}
              metadata:
                retries:
                  retries: 0
                name: "name"
                interruptible: true
                timeout: "timeout"
              upstream_node_ids:
              - "upstream_node_ids"
              - "upstream_node_ids"
              inputs:
              - var: "var"
                binding:
                  scalar:
                    schema:
                      type:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      uri: "uri"
                    blob:
                      metadata:
                        type:
                          dimensionality: {}
                          format: "format"
                      uri: "uri"
                    none_type: {}
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    binary:
                      tag: "tag"
                      value: "value"
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    generic:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                  promise:
                    var: "var"
                    node_id: "node_id"
                  collection:
                    bindings:
                    - null
                    - null
                  map:
                    bindings: {}
              - var: "var"
                binding:
                  scalar:
                    schema:
                      type:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      uri: "uri"
                    blob:
                      metadata:
                        type:
                          dimensionality: {}
                          format: "format"
                      uri: "uri"
                    none_type: {}
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    binary:
                      tag: "tag"
                      value: "value"
                    error:
                      message: "message"
                      failed_node_id: "failed_node_id"
                    generic:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                  promise:
                    var: "var"
                    node_id: "node_id"
                  collection:
                    bindings:
                    - null
                    - null
                  map:
                    bindings: {}
              output_aliases:
              - var: "var"
                alias: "alias"
              - var: "var"
                alias: "alias"
              task_node:
                reference_id:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
              id: "id"
              workflow_node:
                launchplan_ref:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
                sub_workflow_ref:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
            metadata_defaults:
              interruptible: true
            id:
              domain: "domain"
              resource_type: {}
              name: "name"
              project: "project"
              version: "version"
            interface:
              outputs:
                variables:
                  key:
                    description: "description"
                    type:
                      schema:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      metadata:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                      blob:
                        dimensionality: {}
                        format: "format"
                      simple: {}
              inputs:
                variables:
                  key:
                    description: "description"
                    type:
                      schema:
                        columns:
                        - name: "name"
                          type: {}
                        - name: "name"
                          type: {}
                      metadata:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                      blob:
                        dimensionality: {}
                        format: "format"
                      simple: {}
          connections:
            upstream:
              key:
                ids:
                - "ids"
                - "ids"
            downstream:
              key:
                ids:
                - "ids"
                - "ids"
      created_at: "2000-01-23T04:56:07.000+00:00"
  adminWorkflowCreateRequest:
    type: "object"
    properties:
      id:
        description: "id represents the unique identifier of the workflow."
        $ref: "#/definitions/coreIdentifier"
      spec:
        description: "Represents the specification for workflow."
        $ref: "#/definitions/adminWorkflowSpec"
    description: "Represents a request structure to create a revision of a workflow."
  adminWorkflowCreateResponse:
    type: "object"
  adminWorkflowExecutionEventRequest:
    type: "object"
    properties:
      request_id:
        type: "string"
        title: "Unique ID for this request that can be traced between services"
      event:
        description: "Details about the event that occurred."
        $ref: "#/definitions/eventWorkflowExecutionEvent"
    description: "Request to send a notification that a workflow execution event has\
      \ occurred."
  adminWorkflowExecutionEventResponse:
    type: "object"
  adminWorkflowExecutionGetDataResponse:
    type: "object"
    properties:
      outputs:
        description: "Signed url to fetch a core.LiteralMap of execution outputs."
        $ref: "#/definitions/adminUrlBlob"
      inputs:
        description: "Signed url to fetch a core.LiteralMap of execution inputs."
        $ref: "#/definitions/adminUrlBlob"
    description: "Response structure for WorkflowExecutionGetDataRequest which contains\
      \ inputs and outputs for an execution."
    example:
      outputs:
        bytes: "bytes"
        url: "url"
      inputs:
        bytes: "bytes"
        url: "url"
  adminWorkflowList:
    type: "object"
    properties:
      workflows:
        type: "array"
        description: "A list of workflows returned based on the request."
        items:
          $ref: "#/definitions/adminWorkflow"
      token:
        type: "string"
        description: "In the case of multiple pages of results, the server-provided\
          \ token can be used to fetch the next page\nin a query. If there are no\
          \ more results, this value will be empty."
    description: "Represents a list of workflows returned from the admin."
    example:
      workflows:
      - id:
          domain: "domain"
          resource_type: {}
          name: "name"
          project: "project"
          version: "version"
        closure:
          compiled_workflow:
            sub_workflows:
            - template:
                outputs:
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                metadata:
                  queuing_budget: "queuing_budget"
                failure_node:
                  branch_node:
                    if_else:
                      other:
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      case:
                        condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                  metadata:
                    retries:
                      retries: 0
                    name: "name"
                    interruptible: true
                    timeout: "timeout"
                  upstream_node_ids:
                  - "upstream_node_ids"
                  - "upstream_node_ids"
                  inputs:
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  output_aliases:
                  - var: "var"
                    alias: "alias"
                  - var: "var"
                    alias: "alias"
                  task_node:
                    reference_id:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                  id: "id"
                  workflow_node:
                    launchplan_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                    sub_workflow_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                nodes:
                - branch_node:
                    if_else:
                      other:
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      case:
                        condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                  metadata:
                    retries:
                      retries: 0
                    name: "name"
                    interruptible: true
                    timeout: "timeout"
                  upstream_node_ids:
                  - "upstream_node_ids"
                  - "upstream_node_ids"
                  inputs:
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  output_aliases:
                  - var: "var"
                    alias: "alias"
                  - var: "var"
                    alias: "alias"
                  task_node:
                    reference_id:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                  id: "id"
                  workflow_node:
                    launchplan_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                    sub_workflow_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                - branch_node:
                    if_else:
                      other:
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      case:
                        condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                  metadata:
                    retries:
                      retries: 0
                    name: "name"
                    interruptible: true
                    timeout: "timeout"
                  upstream_node_ids:
                  - "upstream_node_ids"
                  - "upstream_node_ids"
                  inputs:
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  output_aliases:
                  - var: "var"
                    alias: "alias"
                  - var: "var"
                    alias: "alias"
                  task_node:
                    reference_id:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                  id: "id"
                  workflow_node:
                    launchplan_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                    sub_workflow_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                metadata_defaults:
                  interruptible: true
                id:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
                interface:
                  outputs:
                    variables:
                      key:
                        description: "description"
                        type:
                          schema:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          metadata:
                            fields:
                              key:
                                list_value:
                                  values:
                                  - null
                                  - null
                                number_value: 6.027456183070403
                                string_value: "string_value"
                                null_value: {}
                                bool_value: true
                          blob:
                            dimensionality: {}
                            format: "format"
                          simple: {}
                  inputs:
                    variables:
                      key:
                        description: "description"
                        type:
                          schema:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          metadata:
                            fields:
                              key:
                                list_value:
                                  values:
                                  - null
                                  - null
                                number_value: 6.027456183070403
                                string_value: "string_value"
                                null_value: {}
                                bool_value: true
                          blob:
                            dimensionality: {}
                            format: "format"
                          simple: {}
              connections:
                upstream:
                  key:
                    ids:
                    - "ids"
                    - "ids"
                downstream:
                  key:
                    ids:
                    - "ids"
                    - "ids"
            - template:
                outputs:
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                metadata:
                  queuing_budget: "queuing_budget"
                failure_node:
                  branch_node:
                    if_else:
                      other:
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      case:
                        condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                  metadata:
                    retries:
                      retries: 0
                    name: "name"
                    interruptible: true
                    timeout: "timeout"
                  upstream_node_ids:
                  - "upstream_node_ids"
                  - "upstream_node_ids"
                  inputs:
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  output_aliases:
                  - var: "var"
                    alias: "alias"
                  - var: "var"
                    alias: "alias"
                  task_node:
                    reference_id:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                  id: "id"
                  workflow_node:
                    launchplan_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                    sub_workflow_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                nodes:
                - branch_node:
                    if_else:
                      other:
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      case:
                        condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                  metadata:
                    retries:
                      retries: 0
                    name: "name"
                    interruptible: true
                    timeout: "timeout"
                  upstream_node_ids:
                  - "upstream_node_ids"
                  - "upstream_node_ids"
                  inputs:
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  output_aliases:
                  - var: "var"
                    alias: "alias"
                  - var: "var"
                    alias: "alias"
                  task_node:
                    reference_id:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                  id: "id"
                  workflow_node:
                    launchplan_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                    sub_workflow_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                - branch_node:
                    if_else:
                      other:
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      case:
                        condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                  metadata:
                    retries:
                      retries: 0
                    name: "name"
                    interruptible: true
                    timeout: "timeout"
                  upstream_node_ids:
                  - "upstream_node_ids"
                  - "upstream_node_ids"
                  inputs:
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  output_aliases:
                  - var: "var"
                    alias: "alias"
                  - var: "var"
                    alias: "alias"
                  task_node:
                    reference_id:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                  id: "id"
                  workflow_node:
                    launchplan_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                    sub_workflow_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                metadata_defaults:
                  interruptible: true
                id:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
                interface:
                  outputs:
                    variables:
                      key:
                        description: "description"
                        type:
                          schema:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          metadata:
                            fields:
                              key:
                                list_value:
                                  values:
                                  - null
                                  - null
                                number_value: 6.027456183070403
                                string_value: "string_value"
                                null_value: {}
                                bool_value: true
                          blob:
                            dimensionality: {}
                            format: "format"
                          simple: {}
                  inputs:
                    variables:
                      key:
                        description: "description"
                        type:
                          schema:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          metadata:
                            fields:
                              key:
                                list_value:
                                  values:
                                  - null
                                  - null
                                number_value: 6.027456183070403
                                string_value: "string_value"
                                null_value: {}
                                bool_value: true
                          blob:
                            dimensionality: {}
                            format: "format"
                          simple: {}
              connections:
                upstream:
                  key:
                    ids:
                    - "ids"
                    - "ids"
                downstream:
                  key:
                    ids:
                    - "ids"
                    - "ids"
            tasks:
            - template:
                container:
                  args:
                  - "args"
                  - "args"
                  image: "image"
                  resources:
                    requests:
                    - name: {}
                      value: "value"
                    - name: {}
                      value: "value"
                    limits:
                    - name: {}
                      value: "value"
                    - name: {}
                      value: "value"
                  env:
                  - value: "value"
                    key: "key"
                  - value: "value"
                    key: "key"
                  ports:
                  - container_port: 6
                  - container_port: 6
                  config:
                  - value: "value"
                    key: "key"
                  - value: "value"
                    key: "key"
                  command:
                  - "command"
                  - "command"
                metadata:
                  retries:
                    retries: 0
                  discoverable: true
                  runtime:
                    flavor: "flavor"
                    type: {}
                    version: "version"
                  discovery_version: "discovery_version"
                  deprecated_error_message: "deprecated_error_message"
                  interruptible: true
                  timeout: "timeout"
                custom:
                  fields:
                    key:
                      list_value:
                        values:
                        - null
                        - null
                      number_value: 6.027456183070403
                      string_value: "string_value"
                      null_value: {}
                      bool_value: true
                id:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
                type: "type"
                interface:
                  outputs:
                    variables:
                      key:
                        description: "description"
                        type:
                          schema:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          metadata:
                            fields:
                              key:
                                list_value:
                                  values:
                                  - null
                                  - null
                                number_value: 6.027456183070403
                                string_value: "string_value"
                                null_value: {}
                                bool_value: true
                          blob:
                            dimensionality: {}
                            format: "format"
                          simple: {}
                  inputs:
                    variables:
                      key:
                        description: "description"
                        type:
                          schema:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          metadata:
                            fields:
                              key:
                                list_value:
                                  values:
                                  - null
                                  - null
                                number_value: 6.027456183070403
                                string_value: "string_value"
                                null_value: {}
                                bool_value: true
                          blob:
                            dimensionality: {}
                            format: "format"
                          simple: {}
            - template:
                container:
                  args:
                  - "args"
                  - "args"
                  image: "image"
                  resources:
                    requests:
                    - name: {}
                      value: "value"
                    - name: {}
                      value: "value"
                    limits:
                    - name: {}
                      value: "value"
                    - name: {}
                      value: "value"
                  env:
                  - value: "value"
                    key: "key"
                  - value: "value"
                    key: "key"
                  ports:
                  - container_port: 6
                  - container_port: 6
                  config:
                  - value: "value"
                    key: "key"
                  - value: "value"
                    key: "key"
                  command:
                  - "command"
                  - "command"
                metadata:
                  retries:
                    retries: 0
                  discoverable: true
                  runtime:
                    flavor: "flavor"
                    type: {}
                    version: "version"
                  discovery_version: "discovery_version"
                  deprecated_error_message: "deprecated_error_message"
                  interruptible: true
                  timeout: "timeout"
                custom:
                  fields:
                    key:
                      list_value:
                        values:
                        - null
                        - null
                      number_value: 6.027456183070403
                      string_value: "string_value"
                      null_value: {}
                      bool_value: true
                id:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
                type: "type"
                interface:
                  outputs:
                    variables:
                      key:
                        description: "description"
                        type:
                          schema:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          metadata:
                            fields:
                              key:
                                list_value:
                                  values:
                                  - null
                                  - null
                                number_value: 6.027456183070403
                                string_value: "string_value"
                                null_value: {}
                                bool_value: true
                          blob:
                            dimensionality: {}
                            format: "format"
                          simple: {}
                  inputs:
                    variables:
                      key:
                        description: "description"
                        type:
                          schema:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          metadata:
                            fields:
                              key:
                                list_value:
                                  values:
                                  - null
                                  - null
                                number_value: 6.027456183070403
                                string_value: "string_value"
                                null_value: {}
                                bool_value: true
                          blob:
                            dimensionality: {}
                            format: "format"
                          simple: {}
            primary:
              template:
                outputs:
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                metadata:
                  queuing_budget: "queuing_budget"
                failure_node:
                  branch_node:
                    if_else:
                      other:
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      case:
                        condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                  metadata:
                    retries:
                      retries: 0
                    name: "name"
                    interruptible: true
                    timeout: "timeout"
                  upstream_node_ids:
                  - "upstream_node_ids"
                  - "upstream_node_ids"
                  inputs:
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  output_aliases:
                  - var: "var"
                    alias: "alias"
                  - var: "var"
                    alias: "alias"
                  task_node:
                    reference_id:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                  id: "id"
                  workflow_node:
                    launchplan_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                    sub_workflow_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                nodes:
                - branch_node:
                    if_else:
                      other:
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      case:
                        condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                  metadata:
                    retries:
                      retries: 0
                    name: "name"
                    interruptible: true
                    timeout: "timeout"
                  upstream_node_ids:
                  - "upstream_node_ids"
                  - "upstream_node_ids"
                  inputs:
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  output_aliases:
                  - var: "var"
                    alias: "alias"
                  - var: "var"
                    alias: "alias"
                  task_node:
                    reference_id:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                  id: "id"
                  workflow_node:
                    launchplan_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                    sub_workflow_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                - branch_node:
                    if_else:
                      other:
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      case:
                        condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                  metadata:
                    retries:
                      retries: 0
                    name: "name"
                    interruptible: true
                    timeout: "timeout"
                  upstream_node_ids:
                  - "upstream_node_ids"
                  - "upstream_node_ids"
                  inputs:
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  output_aliases:
                  - var: "var"
                    alias: "alias"
                  - var: "var"
                    alias: "alias"
                  task_node:
                    reference_id:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                  id: "id"
                  workflow_node:
                    launchplan_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                    sub_workflow_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                metadata_defaults:
                  interruptible: true
                id:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
                interface:
                  outputs:
                    variables:
                      key:
                        description: "description"
                        type:
                          schema:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          metadata:
                            fields:
                              key:
                                list_value:
                                  values:
                                  - null
                                  - null
                                number_value: 6.027456183070403
                                string_value: "string_value"
                                null_value: {}
                                bool_value: true
                          blob:
                            dimensionality: {}
                            format: "format"
                          simple: {}
                  inputs:
                    variables:
                      key:
                        description: "description"
                        type:
                          schema:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          metadata:
                            fields:
                              key:
                                list_value:
                                  values:
                                  - null
                                  - null
                                number_value: 6.027456183070403
                                string_value: "string_value"
                                null_value: {}
                                bool_value: true
                          blob:
                            dimensionality: {}
                            format: "format"
                          simple: {}
              connections:
                upstream:
                  key:
                    ids:
                    - "ids"
                    - "ids"
                downstream:
                  key:
                    ids:
                    - "ids"
                    - "ids"
          created_at: "2000-01-23T04:56:07.000+00:00"
      - id:
          domain: "domain"
          resource_type: {}
          name: "name"
          project: "project"
          version: "version"
        closure:
          compiled_workflow:
            sub_workflows:
            - template:
                outputs:
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                metadata:
                  queuing_budget: "queuing_budget"
                failure_node:
                  branch_node:
                    if_else:
                      other:
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      case:
                        condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                  metadata:
                    retries:
                      retries: 0
                    name: "name"
                    interruptible: true
                    timeout: "timeout"
                  upstream_node_ids:
                  - "upstream_node_ids"
                  - "upstream_node_ids"
                  inputs:
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  output_aliases:
                  - var: "var"
                    alias: "alias"
                  - var: "var"
                    alias: "alias"
                  task_node:
                    reference_id:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                  id: "id"
                  workflow_node:
                    launchplan_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                    sub_workflow_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                nodes:
                - branch_node:
                    if_else:
                      other:
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      case:
                        condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                  metadata:
                    retries:
                      retries: 0
                    name: "name"
                    interruptible: true
                    timeout: "timeout"
                  upstream_node_ids:
                  - "upstream_node_ids"
                  - "upstream_node_ids"
                  inputs:
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  output_aliases:
                  - var: "var"
                    alias: "alias"
                  - var: "var"
                    alias: "alias"
                  task_node:
                    reference_id:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                  id: "id"
                  workflow_node:
                    launchplan_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                    sub_workflow_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                - branch_node:
                    if_else:
                      other:
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      case:
                        condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                  metadata:
                    retries:
                      retries: 0
                    name: "name"
                    interruptible: true
                    timeout: "timeout"
                  upstream_node_ids:
                  - "upstream_node_ids"
                  - "upstream_node_ids"
                  inputs:
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  output_aliases:
                  - var: "var"
                    alias: "alias"
                  - var: "var"
                    alias: "alias"
                  task_node:
                    reference_id:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                  id: "id"
                  workflow_node:
                    launchplan_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                    sub_workflow_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                metadata_defaults:
                  interruptible: true
                id:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
                interface:
                  outputs:
                    variables:
                      key:
                        description: "description"
                        type:
                          schema:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          metadata:
                            fields:
                              key:
                                list_value:
                                  values:
                                  - null
                                  - null
                                number_value: 6.027456183070403
                                string_value: "string_value"
                                null_value: {}
                                bool_value: true
                          blob:
                            dimensionality: {}
                            format: "format"
                          simple: {}
                  inputs:
                    variables:
                      key:
                        description: "description"
                        type:
                          schema:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          metadata:
                            fields:
                              key:
                                list_value:
                                  values:
                                  - null
                                  - null
                                number_value: 6.027456183070403
                                string_value: "string_value"
                                null_value: {}
                                bool_value: true
                          blob:
                            dimensionality: {}
                            format: "format"
                          simple: {}
              connections:
                upstream:
                  key:
                    ids:
                    - "ids"
                    - "ids"
                downstream:
                  key:
                    ids:
                    - "ids"
                    - "ids"
            - template:
                outputs:
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                metadata:
                  queuing_budget: "queuing_budget"
                failure_node:
                  branch_node:
                    if_else:
                      other:
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      case:
                        condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                  metadata:
                    retries:
                      retries: 0
                    name: "name"
                    interruptible: true
                    timeout: "timeout"
                  upstream_node_ids:
                  - "upstream_node_ids"
                  - "upstream_node_ids"
                  inputs:
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  output_aliases:
                  - var: "var"
                    alias: "alias"
                  - var: "var"
                    alias: "alias"
                  task_node:
                    reference_id:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                  id: "id"
                  workflow_node:
                    launchplan_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                    sub_workflow_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                nodes:
                - branch_node:
                    if_else:
                      other:
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      case:
                        condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                  metadata:
                    retries:
                      retries: 0
                    name: "name"
                    interruptible: true
                    timeout: "timeout"
                  upstream_node_ids:
                  - "upstream_node_ids"
                  - "upstream_node_ids"
                  inputs:
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  output_aliases:
                  - var: "var"
                    alias: "alias"
                  - var: "var"
                    alias: "alias"
                  task_node:
                    reference_id:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                  id: "id"
                  workflow_node:
                    launchplan_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                    sub_workflow_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                - branch_node:
                    if_else:
                      other:
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      case:
                        condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                  metadata:
                    retries:
                      retries: 0
                    name: "name"
                    interruptible: true
                    timeout: "timeout"
                  upstream_node_ids:
                  - "upstream_node_ids"
                  - "upstream_node_ids"
                  inputs:
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  output_aliases:
                  - var: "var"
                    alias: "alias"
                  - var: "var"
                    alias: "alias"
                  task_node:
                    reference_id:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                  id: "id"
                  workflow_node:
                    launchplan_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                    sub_workflow_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                metadata_defaults:
                  interruptible: true
                id:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
                interface:
                  outputs:
                    variables:
                      key:
                        description: "description"
                        type:
                          schema:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          metadata:
                            fields:
                              key:
                                list_value:
                                  values:
                                  - null
                                  - null
                                number_value: 6.027456183070403
                                string_value: "string_value"
                                null_value: {}
                                bool_value: true
                          blob:
                            dimensionality: {}
                            format: "format"
                          simple: {}
                  inputs:
                    variables:
                      key:
                        description: "description"
                        type:
                          schema:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          metadata:
                            fields:
                              key:
                                list_value:
                                  values:
                                  - null
                                  - null
                                number_value: 6.027456183070403
                                string_value: "string_value"
                                null_value: {}
                                bool_value: true
                          blob:
                            dimensionality: {}
                            format: "format"
                          simple: {}
              connections:
                upstream:
                  key:
                    ids:
                    - "ids"
                    - "ids"
                downstream:
                  key:
                    ids:
                    - "ids"
                    - "ids"
            tasks:
            - template:
                container:
                  args:
                  - "args"
                  - "args"
                  image: "image"
                  resources:
                    requests:
                    - name: {}
                      value: "value"
                    - name: {}
                      value: "value"
                    limits:
                    - name: {}
                      value: "value"
                    - name: {}
                      value: "value"
                  env:
                  - value: "value"
                    key: "key"
                  - value: "value"
                    key: "key"
                  ports:
                  - container_port: 6
                  - container_port: 6
                  config:
                  - value: "value"
                    key: "key"
                  - value: "value"
                    key: "key"
                  command:
                  - "command"
                  - "command"
                metadata:
                  retries:
                    retries: 0
                  discoverable: true
                  runtime:
                    flavor: "flavor"
                    type: {}
                    version: "version"
                  discovery_version: "discovery_version"
                  deprecated_error_message: "deprecated_error_message"
                  interruptible: true
                  timeout: "timeout"
                custom:
                  fields:
                    key:
                      list_value:
                        values:
                        - null
                        - null
                      number_value: 6.027456183070403
                      string_value: "string_value"
                      null_value: {}
                      bool_value: true
                id:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
                type: "type"
                interface:
                  outputs:
                    variables:
                      key:
                        description: "description"
                        type:
                          schema:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          metadata:
                            fields:
                              key:
                                list_value:
                                  values:
                                  - null
                                  - null
                                number_value: 6.027456183070403
                                string_value: "string_value"
                                null_value: {}
                                bool_value: true
                          blob:
                            dimensionality: {}
                            format: "format"
                          simple: {}
                  inputs:
                    variables:
                      key:
                        description: "description"
                        type:
                          schema:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          metadata:
                            fields:
                              key:
                                list_value:
                                  values:
                                  - null
                                  - null
                                number_value: 6.027456183070403
                                string_value: "string_value"
                                null_value: {}
                                bool_value: true
                          blob:
                            dimensionality: {}
                            format: "format"
                          simple: {}
            - template:
                container:
                  args:
                  - "args"
                  - "args"
                  image: "image"
                  resources:
                    requests:
                    - name: {}
                      value: "value"
                    - name: {}
                      value: "value"
                    limits:
                    - name: {}
                      value: "value"
                    - name: {}
                      value: "value"
                  env:
                  - value: "value"
                    key: "key"
                  - value: "value"
                    key: "key"
                  ports:
                  - container_port: 6
                  - container_port: 6
                  config:
                  - value: "value"
                    key: "key"
                  - value: "value"
                    key: "key"
                  command:
                  - "command"
                  - "command"
                metadata:
                  retries:
                    retries: 0
                  discoverable: true
                  runtime:
                    flavor: "flavor"
                    type: {}
                    version: "version"
                  discovery_version: "discovery_version"
                  deprecated_error_message: "deprecated_error_message"
                  interruptible: true
                  timeout: "timeout"
                custom:
                  fields:
                    key:
                      list_value:
                        values:
                        - null
                        - null
                      number_value: 6.027456183070403
                      string_value: "string_value"
                      null_value: {}
                      bool_value: true
                id:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
                type: "type"
                interface:
                  outputs:
                    variables:
                      key:
                        description: "description"
                        type:
                          schema:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          metadata:
                            fields:
                              key:
                                list_value:
                                  values:
                                  - null
                                  - null
                                number_value: 6.027456183070403
                                string_value: "string_value"
                                null_value: {}
                                bool_value: true
                          blob:
                            dimensionality: {}
                            format: "format"
                          simple: {}
                  inputs:
                    variables:
                      key:
                        description: "description"
                        type:
                          schema:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          metadata:
                            fields:
                              key:
                                list_value:
                                  values:
                                  - null
                                  - null
                                number_value: 6.027456183070403
                                string_value: "string_value"
                                null_value: {}
                                bool_value: true
                          blob:
                            dimensionality: {}
                            format: "format"
                          simple: {}
            primary:
              template:
                outputs:
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                - var: "var"
                  binding:
                    scalar:
                      schema:
                        type:
                          columns:
                          - name: "name"
                            type: {}
                          - name: "name"
                            type: {}
                        uri: "uri"
                      blob:
                        metadata:
                          type:
                            dimensionality: {}
                            format: "format"
                        uri: "uri"
                      none_type: {}
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      binary:
                        tag: "tag"
                        value: "value"
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      generic:
                        fields:
                          key:
                            list_value:
                              values:
                              - null
                              - null
                            number_value: 6.027456183070403
                            string_value: "string_value"
                            null_value: {}
                            bool_value: true
                    promise:
                      var: "var"
                      node_id: "node_id"
                    collection:
                      bindings:
                      - null
                      - null
                    map:
                      bindings: {}
                metadata:
                  queuing_budget: "queuing_budget"
                failure_node:
                  branch_node:
                    if_else:
                      other:
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      case:
                        condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                  metadata:
                    retries:
                      retries: 0
                    name: "name"
                    interruptible: true
                    timeout: "timeout"
                  upstream_node_ids:
                  - "upstream_node_ids"
                  - "upstream_node_ids"
                  inputs:
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  output_aliases:
                  - var: "var"
                    alias: "alias"
                  - var: "var"
                    alias: "alias"
                  task_node:
                    reference_id:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                  id: "id"
                  workflow_node:
                    launchplan_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                    sub_workflow_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                nodes:
                - branch_node:
                    if_else:
                      other:
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      case:
                        condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                  metadata:
                    retries:
                      retries: 0
                    name: "name"
                    interruptible: true
                    timeout: "timeout"
                  upstream_node_ids:
                  - "upstream_node_ids"
                  - "upstream_node_ids"
                  inputs:
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  output_aliases:
                  - var: "var"
                    alias: "alias"
                  - var: "var"
                    alias: "alias"
                  task_node:
                    reference_id:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                  id: "id"
                  workflow_node:
                    launchplan_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                    sub_workflow_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                - branch_node:
                    if_else:
                      other:
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      - condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                      error:
                        message: "message"
                        failed_node_id: "failed_node_id"
                      case:
                        condition:
                          conjunction:
                            operator: {}
                          comparison:
                            left_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            right_value:
                              primitive:
                                duration: "duration"
                                datetime: "2000-01-23T04:56:07.000+00:00"
                                string_value: "string_value"
                                boolean: true
                                float_value: 1.4658129805029452
                                integer: "integer"
                              var: "var"
                            operator: {}
                  metadata:
                    retries:
                      retries: 0
                    name: "name"
                    interruptible: true
                    timeout: "timeout"
                  upstream_node_ids:
                  - "upstream_node_ids"
                  - "upstream_node_ids"
                  inputs:
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  - var: "var"
                    binding:
                      scalar:
                        schema:
                          type:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          uri: "uri"
                        blob:
                          metadata:
                            type:
                              dimensionality: {}
                              format: "format"
                          uri: "uri"
                        none_type: {}
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        binary:
                          tag: "tag"
                          value: "value"
                        error:
                          message: "message"
                          failed_node_id: "failed_node_id"
                        generic:
                          fields:
                            key:
                              list_value:
                                values:
                                - null
                                - null
                              number_value: 6.027456183070403
                              string_value: "string_value"
                              null_value: {}
                              bool_value: true
                      promise:
                        var: "var"
                        node_id: "node_id"
                      collection:
                        bindings:
                        - null
                        - null
                      map:
                        bindings: {}
                  output_aliases:
                  - var: "var"
                    alias: "alias"
                  - var: "var"
                    alias: "alias"
                  task_node:
                    reference_id:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                  id: "id"
                  workflow_node:
                    launchplan_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                    sub_workflow_ref:
                      domain: "domain"
                      resource_type: {}
                      name: "name"
                      project: "project"
                      version: "version"
                metadata_defaults:
                  interruptible: true
                id:
                  domain: "domain"
                  resource_type: {}
                  name: "name"
                  project: "project"
                  version: "version"
                interface:
                  outputs:
                    variables:
                      key:
                        description: "description"
                        type:
                          schema:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          metadata:
                            fields:
                              key:
                                list_value:
                                  values:
                                  - null
                                  - null
                                number_value: 6.027456183070403
                                string_value: "string_value"
                                null_value: {}
                                bool_value: true
                          blob:
                            dimensionality: {}
                            format: "format"
                          simple: {}
                  inputs:
                    variables:
                      key:
                        description: "description"
                        type:
                          schema:
                            columns:
                            - name: "name"
                              type: {}
                            - name: "name"
                              type: {}
                          metadata:
                            fields:
                              key:
                                list_value:
                                  values:
                                  - null
                                  - null
                                number_value: 6.027456183070403
                                string_value: "string_value"
                                null_value: {}
                                bool_value: true
                          blob:
                            dimensionality: {}
                            format: "format"
                          simple: {}
              connections:
                upstream:
                  key:
                    ids:
                    - "ids"
                    - "ids"
                downstream:
                  key:
                    ids:
                    - "ids"
                    - "ids"
          created_at: "2000-01-23T04:56:07.000+00:00"
      token: "token"
  adminWorkflowSpec:
    type: "object"
    properties:
      template:
        description: "Template of the task that encapsulates all the metadata of the\
          \ workflow."
        $ref: "#/definitions/coreWorkflowTemplate"
      sub_workflows:
        type: "array"
        description: "Workflows that are embedded into other workflows need to be\
          \ passed alongside the parent workflow to the\npropeller compiler (since\
          \ the compiler doesn't have any knowledge of other workflows - ie, it doesn't\
          \ reach out\nto Admin to see other registered workflows).  In fact, subworkflows\
          \ do not even need to be registered."
        items:
          $ref: "#/definitions/coreWorkflowTemplate"
    description: "Represents a structure that encapsulates the specification of the\
      \ workflow."
  coreAlias:
    type: "object"
    properties:
      var:
        type: "string"
        description: "Must match one of the output variable names on a node."
      alias:
        type: "string"
        description: "A workflow-level unique alias that downstream nodes can refer\
          \ to in their input."
    description: "Links a variable to an alias."
    example:
      var: "var"
      alias: "alias"
  coreBinary:
    type: "object"
    properties:
      value:
        type: "string"
        format: "byte"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      tag:
        type: "string"
    description: "A simple byte array with a tag to help different parts of the system\
      \ communicate about what is in the byte array.\nIt's strongly advisable that\
      \ consumers of this type define a unique tag and validate the tag before parsing\
      \ the data."
    example:
      tag: "tag"
      value: "value"
  coreBinding:
    type: "object"
    properties:
      var:
        type: "string"
        description: "Variable name must match an input/output variable of the node."
      binding:
        description: "Data to use to bind this variable."
        $ref: "#/definitions/coreBindingData"
    description: "An input/output binding of a variable to either static value or\
      \ a node output."
    example:
      var: "var"
      binding:
        scalar:
          schema:
            type:
              columns:
              - name: "name"
                type: {}
              - name: "name"
                type: {}
            uri: "uri"
          blob:
            metadata:
              type:
                dimensionality: {}
                format: "format"
            uri: "uri"
          none_type: {}
          primitive:
            duration: "duration"
            datetime: "2000-01-23T04:56:07.000+00:00"
            string_value: "string_value"
            boolean: true
            float_value: 1.4658129805029452
            integer: "integer"
          binary:
            tag: "tag"
            value: "value"
          error:
            message: "message"
            failed_node_id: "failed_node_id"
          generic:
            fields:
              key:
                list_value:
                  values:
                  - null
                  - null
                number_value: 6.027456183070403
                string_value: "string_value"
                null_value: {}
                bool_value: true
        promise:
          var: "var"
          node_id: "node_id"
        collection:
          bindings:
          - null
          - null
        map:
          bindings: {}
  coreBindingData:
    type: "object"
    properties:
      scalar:
        description: "A simple scalar value."
        $ref: "#/definitions/coreScalar"
      collection:
        description: "A collection of binding data. This allows nesting of binding\
          \ data to any number\nof levels."
        $ref: "#/definitions/coreBindingDataCollection"
      promise:
        description: "References an output promised by another node."
        $ref: "#/definitions/coreOutputReference"
      map:
        description: "A map of bindings. The key is always a string."
        $ref: "#/definitions/coreBindingDataMap"
    description: "Specifies either a simple value or a reference to another output."
    example:
      scalar:
        schema:
          type:
            columns:
            - name: "name"
              type: {}
            - name: "name"
              type: {}
          uri: "uri"
        blob:
          metadata:
            type:
              dimensionality: {}
              format: "format"
          uri: "uri"
        none_type: {}
        primitive:
          duration: "duration"
          datetime: "2000-01-23T04:56:07.000+00:00"
          string_value: "string_value"
          boolean: true
          float_value: 1.4658129805029452
          integer: "integer"
        binary:
          tag: "tag"
          value: "value"
        error:
          message: "message"
          failed_node_id: "failed_node_id"
        generic:
          fields:
            key:
              list_value:
                values:
                - null
                - null
              number_value: 6.027456183070403
              string_value: "string_value"
              null_value: {}
              bool_value: true
      promise:
        var: "var"
        node_id: "node_id"
      collection:
        bindings:
        - null
        - null
      map:
        bindings: {}
  coreBindingDataCollection:
    type: "object"
    properties:
      bindings:
        type: "array"
        items:
          $ref: "#/definitions/coreBindingData"
    description: "A collection of BindingData items."
    example:
      bindings:
      - null
      - null
  coreBindingDataMap:
    type: "object"
    properties:
      bindings:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/coreBindingData"
    description: "A map of BindingData items."
    example:
      bindings: {}
  coreBlob:
    type: "object"
    properties:
      metadata:
        $ref: "#/definitions/coreBlobMetadata"
      uri:
        type: "string"
    description: "Refers to an offloaded set of files. It encapsulates the type of\
      \ the store and a unique uri for where the data is.\nThere are no restrictions\
      \ on how the uri is formatted since it will depend on how to interact with the\
      \ store."
    example:
      metadata:
        type:
          dimensionality: {}
          format: "format"
      uri: "uri"
  coreBlobMetadata:
    type: "object"
    properties:
      type:
        $ref: "#/definitions/coreBlobType"
    example:
      type:
        dimensionality: {}
        format: "format"
  coreBlobType:
    type: "object"
    properties:
      format:
        type: "string"
        title: "Format can be a free form string understood by SDK/UI etc like\ncsv,\
          \ parquet etc"
      dimensionality:
        $ref: "#/definitions/BlobTypeBlobDimensionality"
    title: "Defines type behavior for blob objects"
    example:
      dimensionality: {}
      format: "format"
  coreBooleanExpression:
    type: "object"
    properties:
      conjunction:
        $ref: "#/definitions/coreConjunctionExpression"
      comparison:
        $ref: "#/definitions/coreComparisonExpression"
    description: "Defines a boolean expression tree. It can be a simple or a conjunction\
      \ expression.\nMultiple expressions can be combined using a conjunction or a\
      \ disjunction to result in a final boolean result."
    example:
      conjunction:
        operator: {}
      comparison:
        left_value:
          primitive:
            duration: "duration"
            datetime: "2000-01-23T04:56:07.000+00:00"
            string_value: "string_value"
            boolean: true
            float_value: 1.4658129805029452
            integer: "integer"
          var: "var"
        right_value:
          primitive:
            duration: "duration"
            datetime: "2000-01-23T04:56:07.000+00:00"
            string_value: "string_value"
            boolean: true
            float_value: 1.4658129805029452
            integer: "integer"
          var: "var"
        operator: {}
  coreBranchNode:
    type: "object"
    properties:
      if_else:
        title: "+required"
        $ref: "#/definitions/coreIfElseBlock"
    description: "BranchNode is a special node that alter the flow of the workflow\
      \ graph. It allows the control flow to branch at\nruntime based on a series\
      \ of conditions that get evaluated on various parameters (e.g. inputs, primtives)."
    example:
      if_else:
        other:
        - condition:
            conjunction:
              operator: {}
            comparison:
              left_value:
                primitive:
                  duration: "duration"
                  datetime: "2000-01-23T04:56:07.000+00:00"
                  string_value: "string_value"
                  boolean: true
                  float_value: 1.4658129805029452
                  integer: "integer"
                var: "var"
              right_value:
                primitive:
                  duration: "duration"
                  datetime: "2000-01-23T04:56:07.000+00:00"
                  string_value: "string_value"
                  boolean: true
                  float_value: 1.4658129805029452
                  integer: "integer"
                var: "var"
              operator: {}
        - condition:
            conjunction:
              operator: {}
            comparison:
              left_value:
                primitive:
                  duration: "duration"
                  datetime: "2000-01-23T04:56:07.000+00:00"
                  string_value: "string_value"
                  boolean: true
                  float_value: 1.4658129805029452
                  integer: "integer"
                var: "var"
              right_value:
                primitive:
                  duration: "duration"
                  datetime: "2000-01-23T04:56:07.000+00:00"
                  string_value: "string_value"
                  boolean: true
                  float_value: 1.4658129805029452
                  integer: "integer"
                var: "var"
              operator: {}
        error:
          message: "message"
          failed_node_id: "failed_node_id"
        case:
          condition:
            conjunction:
              operator: {}
            comparison:
              left_value:
                primitive:
                  duration: "duration"
                  datetime: "2000-01-23T04:56:07.000+00:00"
                  string_value: "string_value"
                  boolean: true
                  float_value: 1.4658129805029452
                  integer: "integer"
                var: "var"
              right_value:
                primitive:
                  duration: "duration"
                  datetime: "2000-01-23T04:56:07.000+00:00"
                  string_value: "string_value"
                  boolean: true
                  float_value: 1.4658129805029452
                  integer: "integer"
                var: "var"
              operator: {}
  coreComparisonExpression:
    type: "object"
    properties:
      operator:
        $ref: "#/definitions/ComparisonExpressionOperator"
      left_value:
        $ref: "#/definitions/coreOperand"
      right_value:
        $ref: "#/definitions/coreOperand"
    description: "Defines a 2-level tree where the root is a comparison operator and\
      \ Operands are primitives or known variables.\nEach expression results in a\
      \ boolean result."
    example:
      left_value:
        primitive:
          duration: "duration"
          datetime: "2000-01-23T04:56:07.000+00:00"
          string_value: "string_value"
          boolean: true
          float_value: 1.4658129805029452
          integer: "integer"
        var: "var"
      right_value:
        primitive:
          duration: "duration"
          datetime: "2000-01-23T04:56:07.000+00:00"
          string_value: "string_value"
          boolean: true
          float_value: 1.4658129805029452
          integer: "integer"
        var: "var"
      operator: {}
  coreCompiledTask:
    type: "object"
    properties:
      template:
        title: "Completely contained TaskTemplate"
        $ref: "#/definitions/coreTaskTemplate"
    title: "Output of the Compilation step. This object represent one Task. We store\
      \ more metadata at this layer"
    example:
      template:
        container:
          args:
          - "args"
          - "args"
          image: "image"
          resources:
            requests:
            - name: {}
              value: "value"
            - name: {}
              value: "value"
            limits:
            - name: {}
              value: "value"
            - name: {}
              value: "value"
          env:
          - value: "value"
            key: "key"
          - value: "value"
            key: "key"
          ports:
          - container_port: 6
          - container_port: 6
          config:
          - value: "value"
            key: "key"
          - value: "value"
            key: "key"
          command:
          - "command"
          - "command"
        metadata:
          retries:
            retries: 0
          discoverable: true
          runtime:
            flavor: "flavor"
            type: {}
            version: "version"
          discovery_version: "discovery_version"
          deprecated_error_message: "deprecated_error_message"
          interruptible: true
          timeout: "timeout"
        custom:
          fields:
            key:
              list_value:
                values:
                - null
                - null
              number_value: 6.027456183070403
              string_value: "string_value"
              null_value: {}
              bool_value: true
        id:
          domain: "domain"
          resource_type: {}
          name: "name"
          project: "project"
          version: "version"
        type: "type"
        interface:
          outputs:
            variables:
              key:
                description: "description"
                type:
                  schema:
                    columns:
                    - name: "name"
                      type: {}
                    - name: "name"
                      type: {}
                  metadata:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                  blob:
                    dimensionality: {}
                    format: "format"
                  simple: {}
          inputs:
            variables:
              key:
                description: "description"
                type:
                  schema:
                    columns:
                    - name: "name"
                      type: {}
                    - name: "name"
                      type: {}
                  metadata:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                  blob:
                    dimensionality: {}
                    format: "format"
                  simple: {}
  coreCompiledWorkflow:
    type: "object"
    properties:
      template:
        title: "Completely contained Workflow Template"
        $ref: "#/definitions/coreWorkflowTemplate"
      connections:
        description: "For internal use only! This field is used by the system and\
          \ must not be filled in. Any values set will be ignored."
        $ref: "#/definitions/coreConnectionSet"
    title: "Output of the compilation Step. This object represents one workflow. We\
      \ store more metadata at this layer"
    example:
      template:
        outputs:
        - var: "var"
          binding:
            scalar:
              schema:
                type:
                  columns:
                  - name: "name"
                    type: {}
                  - name: "name"
                    type: {}
                uri: "uri"
              blob:
                metadata:
                  type:
                    dimensionality: {}
                    format: "format"
                uri: "uri"
              none_type: {}
              primitive:
                duration: "duration"
                datetime: "2000-01-23T04:56:07.000+00:00"
                string_value: "string_value"
                boolean: true
                float_value: 1.4658129805029452
                integer: "integer"
              binary:
                tag: "tag"
                value: "value"
              error:
                message: "message"
                failed_node_id: "failed_node_id"
              generic:
                fields:
                  key:
                    list_value:
                      values:
                      - null
                      - null
                    number_value: 6.027456183070403
                    string_value: "string_value"
                    null_value: {}
                    bool_value: true
            promise:
              var: "var"
              node_id: "node_id"
            collection:
              bindings:
              - null
              - null
            map:
              bindings: {}
        - var: "var"
          binding:
            scalar:
              schema:
                type:
                  columns:
                  - name: "name"
                    type: {}
                  - name: "name"
                    type: {}
                uri: "uri"
              blob:
                metadata:
                  type:
                    dimensionality: {}
                    format: "format"
                uri: "uri"
              none_type: {}
              primitive:
                duration: "duration"
                datetime: "2000-01-23T04:56:07.000+00:00"
                string_value: "string_value"
                boolean: true
                float_value: 1.4658129805029452
                integer: "integer"
              binary:
                tag: "tag"
                value: "value"
              error:
                message: "message"
                failed_node_id: "failed_node_id"
              generic:
                fields:
                  key:
                    list_value:
                      values:
                      - null
                      - null
                    number_value: 6.027456183070403
                    string_value: "string_value"
                    null_value: {}
                    bool_value: true
            promise:
              var: "var"
              node_id: "node_id"
            collection:
              bindings:
              - null
              - null
            map:
              bindings: {}
        metadata:
          queuing_budget: "queuing_budget"
        failure_node:
          branch_node:
            if_else:
              other:
              - condition:
                  conjunction:
                    operator: {}
                  comparison:
                    left_value:
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      var: "var"
                    right_value:
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      var: "var"
                    operator: {}
              - condition:
                  conjunction:
                    operator: {}
                  comparison:
                    left_value:
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      var: "var"
                    right_value:
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      var: "var"
                    operator: {}
              error:
                message: "message"
                failed_node_id: "failed_node_id"
              case:
                condition:
                  conjunction:
                    operator: {}
                  comparison:
                    left_value:
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      var: "var"
                    right_value:
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      var: "var"
                    operator: {}
          metadata:
            retries:
              retries: 0
            name: "name"
            interruptible: true
            timeout: "timeout"
          upstream_node_ids:
          - "upstream_node_ids"
          - "upstream_node_ids"
          inputs:
          - var: "var"
            binding:
              scalar:
                schema:
                  type:
                    columns:
                    - name: "name"
                      type: {}
                    - name: "name"
                      type: {}
                  uri: "uri"
                blob:
                  metadata:
                    type:
                      dimensionality: {}
                      format: "format"
                  uri: "uri"
                none_type: {}
                primitive:
                  duration: "duration"
                  datetime: "2000-01-23T04:56:07.000+00:00"
                  string_value: "string_value"
                  boolean: true
                  float_value: 1.4658129805029452
                  integer: "integer"
                binary:
                  tag: "tag"
                  value: "value"
                error:
                  message: "message"
                  failed_node_id: "failed_node_id"
                generic:
                  fields:
                    key:
                      list_value:
                        values:
                        - null
                        - null
                      number_value: 6.027456183070403
                      string_value: "string_value"
                      null_value: {}
                      bool_value: true
              promise:
                var: "var"
                node_id: "node_id"
              collection:
                bindings:
                - null
                - null
              map:
                bindings: {}
          - var: "var"
            binding:
              scalar:
                schema:
                  type:
                    columns:
                    - name: "name"
                      type: {}
                    - name: "name"
                      type: {}
                  uri: "uri"
                blob:
                  metadata:
                    type:
                      dimensionality: {}
                      format: "format"
                  uri: "uri"
                none_type: {}
                primitive:
                  duration: "duration"
                  datetime: "2000-01-23T04:56:07.000+00:00"
                  string_value: "string_value"
                  boolean: true
                  float_value: 1.4658129805029452
                  integer: "integer"
                binary:
                  tag: "tag"
                  value: "value"
                error:
                  message: "message"
                  failed_node_id: "failed_node_id"
                generic:
                  fields:
                    key:
                      list_value:
                        values:
                        - null
                        - null
                      number_value: 6.027456183070403
                      string_value: "string_value"
                      null_value: {}
                      bool_value: true
              promise:
                var: "var"
                node_id: "node_id"
              collection:
                bindings:
                - null
                - null
              map:
                bindings: {}
          output_aliases:
          - var: "var"
            alias: "alias"
          - var: "var"
            alias: "alias"
          task_node:
            reference_id:
              domain: "domain"
              resource_type: {}
              name: "name"
              project: "project"
              version: "version"
          id: "id"
          workflow_node:
            launchplan_ref:
              domain: "domain"
              resource_type: {}
              name: "name"
              project: "project"
              version: "version"
            sub_workflow_ref:
              domain: "domain"
              resource_type: {}
              name: "name"
              project: "project"
              version: "version"
        nodes:
        - branch_node:
            if_else:
              other:
              - condition:
                  conjunction:
                    operator: {}
                  comparison:
                    left_value:
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      var: "var"
                    right_value:
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      var: "var"
                    operator: {}
              - condition:
                  conjunction:
                    operator: {}
                  comparison:
                    left_value:
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      var: "var"
                    right_value:
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      var: "var"
                    operator: {}
              error:
                message: "message"
                failed_node_id: "failed_node_id"
              case:
                condition:
                  conjunction:
                    operator: {}
                  comparison:
                    left_value:
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      var: "var"
                    right_value:
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      var: "var"
                    operator: {}
          metadata:
            retries:
              retries: 0
            name: "name"
            interruptible: true
            timeout: "timeout"
          upstream_node_ids:
          - "upstream_node_ids"
          - "upstream_node_ids"
          inputs:
          - var: "var"
            binding:
              scalar:
                schema:
                  type:
                    columns:
                    - name: "name"
                      type: {}
                    - name: "name"
                      type: {}
                  uri: "uri"
                blob:
                  metadata:
                    type:
                      dimensionality: {}
                      format: "format"
                  uri: "uri"
                none_type: {}
                primitive:
                  duration: "duration"
                  datetime: "2000-01-23T04:56:07.000+00:00"
                  string_value: "string_value"
                  boolean: true
                  float_value: 1.4658129805029452
                  integer: "integer"
                binary:
                  tag: "tag"
                  value: "value"
                error:
                  message: "message"
                  failed_node_id: "failed_node_id"
                generic:
                  fields:
                    key:
                      list_value:
                        values:
                        - null
                        - null
                      number_value: 6.027456183070403
                      string_value: "string_value"
                      null_value: {}
                      bool_value: true
              promise:
                var: "var"
                node_id: "node_id"
              collection:
                bindings:
                - null
                - null
              map:
                bindings: {}
          - var: "var"
            binding:
              scalar:
                schema:
                  type:
                    columns:
                    - name: "name"
                      type: {}
                    - name: "name"
                      type: {}
                  uri: "uri"
                blob:
                  metadata:
                    type:
                      dimensionality: {}
                      format: "format"
                  uri: "uri"
                none_type: {}
                primitive:
                  duration: "duration"
                  datetime: "2000-01-23T04:56:07.000+00:00"
                  string_value: "string_value"
                  boolean: true
                  float_value: 1.4658129805029452
                  integer: "integer"
                binary:
                  tag: "tag"
                  value: "value"
                error:
                  message: "message"
                  failed_node_id: "failed_node_id"
                generic:
                  fields:
                    key:
                      list_value:
                        values:
                        - null
                        - null
                      number_value: 6.027456183070403
                      string_value: "string_value"
                      null_value: {}
                      bool_value: true
              promise:
                var: "var"
                node_id: "node_id"
              collection:
                bindings:
                - null
                - null
              map:
                bindings: {}
          output_aliases:
          - var: "var"
            alias: "alias"
          - var: "var"
            alias: "alias"
          task_node:
            reference_id:
              domain: "domain"
              resource_type: {}
              name: "name"
              project: "project"
              version: "version"
          id: "id"
          workflow_node:
            launchplan_ref:
              domain: "domain"
              resource_type: {}
              name: "name"
              project: "project"
              version: "version"
            sub_workflow_ref:
              domain: "domain"
              resource_type: {}
              name: "name"
              project: "project"
              version: "version"
        - branch_node:
            if_else:
              other:
              - condition:
                  conjunction:
                    operator: {}
                  comparison:
                    left_value:
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      var: "var"
                    right_value:
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      var: "var"
                    operator: {}
              - condition:
                  conjunction:
                    operator: {}
                  comparison:
                    left_value:
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      var: "var"
                    right_value:
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      var: "var"
                    operator: {}
              error:
                message: "message"
                failed_node_id: "failed_node_id"
              case:
                condition:
                  conjunction:
                    operator: {}
                  comparison:
                    left_value:
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      var: "var"
                    right_value:
                      primitive:
                        duration: "duration"
                        datetime: "2000-01-23T04:56:07.000+00:00"
                        string_value: "string_value"
                        boolean: true
                        float_value: 1.4658129805029452
                        integer: "integer"
                      var: "var"
                    operator: {}
          metadata:
            retries:
              retries: 0
            name: "name"
            interruptible: true
            timeout: "timeout"
          upstream_node_ids:
          - "upstream_node_ids"
          - "upstream_node_ids"
          inputs:
          - var: "var"
            binding:
              scalar:
                schema:
                  type:
                    columns:
                    - name: "name"
                      type: {}
                    - name: "name"
                      type: {}
                  uri: "uri"
                blob:
                  metadata:
                    type:
                      dimensionality: {}
                      format: "format"
                  uri: "uri"
                none_type: {}
                primitive:
                  duration: "duration"
                  datetime: "2000-01-23T04:56:07.000+00:00"
                  string_value: "string_value"
                  boolean: true
                  float_value: 1.4658129805029452
                  integer: "integer"
                binary:
                  tag: "tag"
                  value: "value"
                error:
                  message: "message"
                  failed_node_id: "failed_node_id"
                generic:
                  fields:
                    key:
                      list_value:
                        values:
                        - null
                        - null
                      number_value: 6.027456183070403
                      string_value: "string_value"
                      null_value: {}
                      bool_value: true
              promise:
                var: "var"
                node_id: "node_id"
              collection:
                bindings:
                - null
                - null
              map:
                bindings: {}
          - var: "var"
            binding:
              scalar:
                schema:
                  type:
                    columns:
                    - name: "name"
                      type: {}
                    - name: "name"
                      type: {}
                  uri: "uri"
                blob:
                  metadata:
                    type:
                      dimensionality: {}
                      format: "format"
                  uri: "uri"
                none_type: {}
                primitive:
                  duration: "duration"
                  datetime: "2000-01-23T04:56:07.000+00:00"
                  string_value: "string_value"
                  boolean: true
                  float_value: 1.4658129805029452
                  integer: "integer"
                binary:
                  tag: "tag"
                  value: "value"
                error:
                  message: "message"
                  failed_node_id: "failed_node_id"
                generic:
                  fields:
                    key:
                      list_value:
                        values:
                        - null
                        - null
                      number_value: 6.027456183070403
                      string_value: "string_value"
                      null_value: {}
                      bool_value: true
              promise:
                var: "var"
                node_id: "node_id"
              collection:
                bindings:
                - null
                - null
              map:
                bindings: {}
          output_aliases:
          - var: "var"
            alias: "alias"
          - var: "var"
            alias: "alias"
          task_node:
            reference_id:
              domain: "domain"
              resource_type: {}
              name: "name"
              project: "project"
              version: "version"
          id: "id"
          workflow_node:
            launchplan_ref:
              domain: "domain"
              resource_type: {}
              name: "name"
              project: "project"
              version: "version"
            sub_workflow_ref:
              domain: "domain"
              resource_type: {}
              name: "name"
              project: "project"
              version: "version"
        metadata_defaults:
          interruptible: true
        id:
          domain: "domain"
          resource_type: {}
          name: "name"
          project: "project"
          version: "version"
        interface:
          outputs:
            variables:
              key:
                description: "description"
                type:
                  schema:
                    columns:
                    - name: "name"
                      type: {}
                    - name: "name"
                      type: {}
                  metadata:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                  blob:
                    dimensionality: {}
                    format: "format"
                  simple: {}
          inputs:
            variables:
              key:
                description: "description"
                type:
                  schema:
                    columns:
                    - name: "name"
                      type: {}
                    - name: "name"
                      type: {}
                  metadata:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                  blob:
                    dimensionality: {}
                    format: "format"
                  simple: {}
      connections:
        upstream:
          key:
            ids:
            - "ids"
            - "ids"
        downstream:
          key:
            ids:
            - "ids"
            - "ids"
  coreCompiledWorkflowClosure:
    type: "object"
    properties:
      primary:
        title: "+required"
        $ref: "#/definitions/coreCompiledWorkflow"
      sub_workflows:
        type: "array"
        title: "Guaranteed that there will only exist one and only one workflow with\
          \ a given id, i.e., every sub workflow has a\nunique identifier. Also every\
          \ enclosed subworkflow is used either by a primary workflow or by a subworkflow\n\
          as an inlined workflow\n+optional"
        items:
          $ref: "#/definitions/coreCompiledWorkflow"
      tasks:
        type: "array"
        title: "Guaranteed that there will only exist one and only one task with a\
          \ given id, i.e., every task has a unique id\n+required (atleast 1)"
        items:
          $ref: "#/definitions/coreCompiledTask"
    description: "A Compiled Workflow Closure contains all the information required\
      \ to start a new execution, or to visualize a workflow\nand its details. The\
      \ CompiledWorkflowClosure should always contain a primary workflow, that is\
      \ the main workflow that\nwill being the execution. All subworkflows are denormalized.\
      \ WorkflowNodes refer to the workflow identifiers of\ncompiled subworkflows."
    example:
      sub_workflows:
      - template:
          outputs:
          - var: "var"
            binding:
              scalar:
                schema:
                  type:
                    columns:
                    - name: "name"
                      type: {}
                    - name: "name"
                      type: {}
                  uri: "uri"
                blob:
                  metadata:
                    type:
                      dimensionality: {}
                      format: "format"
                  uri: "uri"
                none_type: {}
                primitive:
                  duration: "duration"
                  datetime: "2000-01-23T04:56:07.000+00:00"
                  string_value: "string_value"
                  boolean: true
                  float_value: 1.4658129805029452
                  integer: "integer"
                binary:
                  tag: "tag"
                  value: "value"
                error:
                  message: "message"
                  failed_node_id: "failed_node_id"
                generic:
                  fields:
                    key:
                      list_value:
                        values:
                        - null
                        - null
                      number_value: 6.027456183070403
                      string_value: "string_value"
                      null_value: {}
                      bool_value: true
              promise:
                var: "var"
                node_id: "node_id"
              collection:
                bindings:
                - null
                - null
              map:
                bindings: {}
          - var: "var"
            binding:
              scalar:
                schema:
                  type:
                    columns:
                    - name: "name"
                      type: {}
                    - name: "name"
                      type: {}
                  uri: "uri"
                blob:
                  metadata:
                    type:
                      dimensionality: {}
                      format: "format"
                  uri: "uri"
                none_type: {}
                primitive:
                  duration: "duration"
                  datetime: "2000-01-23T04:56:07.000+00:00"
                  string_value: "string_value"
                  boolean: true
                  float_value: 1.4658129805029452
                  integer: "integer"
                binary:
                  tag: "tag"
                  value: "value"
                error:
                  message: "message"
                  failed_node_id: "failed_node_id"
                generic:
                  fields:
                    key:
                      list_value:
                        values:
                        - null
                        - null
                      number_value: 6.027456183070403
                      string_value: "string_value"
                      null_value: {}
                      bool_value: true
              promise:
                var: "var"
                node_id: "node_id"
              collection:
                bindings:
                - null
                - null
              map:
                bindings: {}
          metadata:
            queuing_budget: "queuing_budget"
          failure_node:
            branch_node:
              if_else:
                other:
                - condition:
                    conjunction:
                      operator: {}
                    comparison:
                      left_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      right_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      operator: {}
                - condition:
                    conjunction:
                      operator: {}
                    comparison:
                      left_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      right_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      operator: {}
                error:
                  message: "message"
                  failed_node_id: "failed_node_id"
                case:
                  condition:
                    conjunction:
                      operator: {}
                    comparison:
                      left_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      right_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      operator: {}
            metadata:
              retries:
                retries: 0
              name: "name"
              interruptible: true
              timeout: "timeout"
            upstream_node_ids:
            - "upstream_node_ids"
            - "upstream_node_ids"
            inputs:
            - var: "var"
              binding:
                scalar:
                  schema:
                    type:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    uri: "uri"
                  blob:
                    metadata:
                      type:
                        dimensionality: {}
                        format: "format"
                    uri: "uri"
                  none_type: {}
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  binary:
                    tag: "tag"
                    value: "value"
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  generic:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                promise:
                  var: "var"
                  node_id: "node_id"
                collection:
                  bindings:
                  - null
                  - null
                map:
                  bindings: {}
            - var: "var"
              binding:
                scalar:
                  schema:
                    type:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    uri: "uri"
                  blob:
                    metadata:
                      type:
                        dimensionality: {}
                        format: "format"
                    uri: "uri"
                  none_type: {}
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  binary:
                    tag: "tag"
                    value: "value"
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  generic:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                promise:
                  var: "var"
                  node_id: "node_id"
                collection:
                  bindings:
                  - null
                  - null
                map:
                  bindings: {}
            output_aliases:
            - var: "var"
              alias: "alias"
            - var: "var"
              alias: "alias"
            task_node:
              reference_id:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
            id: "id"
            workflow_node:
              launchplan_ref:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
              sub_workflow_ref:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
          nodes:
          - branch_node:
              if_else:
                other:
                - condition:
                    conjunction:
                      operator: {}
                    comparison:
                      left_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      right_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      operator: {}
                - condition:
                    conjunction:
                      operator: {}
                    comparison:
                      left_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      right_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      operator: {}
                error:
                  message: "message"
                  failed_node_id: "failed_node_id"
                case:
                  condition:
                    conjunction:
                      operator: {}
                    comparison:
                      left_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      right_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      operator: {}
            metadata:
              retries:
                retries: 0
              name: "name"
              interruptible: true
              timeout: "timeout"
            upstream_node_ids:
            - "upstream_node_ids"
            - "upstream_node_ids"
            inputs:
            - var: "var"
              binding:
                scalar:
                  schema:
                    type:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    uri: "uri"
                  blob:
                    metadata:
                      type:
                        dimensionality: {}
                        format: "format"
                    uri: "uri"
                  none_type: {}
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  binary:
                    tag: "tag"
                    value: "value"
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  generic:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                promise:
                  var: "var"
                  node_id: "node_id"
                collection:
                  bindings:
                  - null
                  - null
                map:
                  bindings: {}
            - var: "var"
              binding:
                scalar:
                  schema:
                    type:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    uri: "uri"
                  blob:
                    metadata:
                      type:
                        dimensionality: {}
                        format: "format"
                    uri: "uri"
                  none_type: {}
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  binary:
                    tag: "tag"
                    value: "value"
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  generic:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                promise:
                  var: "var"
                  node_id: "node_id"
                collection:
                  bindings:
                  - null
                  - null
                map:
                  bindings: {}
            output_aliases:
            - var: "var"
              alias: "alias"
            - var: "var"
              alias: "alias"
            task_node:
              reference_id:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
            id: "id"
            workflow_node:
              launchplan_ref:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
              sub_workflow_ref:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
          - branch_node:
              if_else:
                other:
                - condition:
                    conjunction:
                      operator: {}
                    comparison:
                      left_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      right_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      operator: {}
                - condition:
                    conjunction:
                      operator: {}
                    comparison:
                      left_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      right_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      operator: {}
                error:
                  message: "message"
                  failed_node_id: "failed_node_id"
                case:
                  condition:
                    conjunction:
                      operator: {}
                    comparison:
                      left_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      right_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      operator: {}
            metadata:
              retries:
                retries: 0
              name: "name"
              interruptible: true
              timeout: "timeout"
            upstream_node_ids:
            - "upstream_node_ids"
            - "upstream_node_ids"
            inputs:
            - var: "var"
              binding:
                scalar:
                  schema:
                    type:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    uri: "uri"
                  blob:
                    metadata:
                      type:
                        dimensionality: {}
                        format: "format"
                    uri: "uri"
                  none_type: {}
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  binary:
                    tag: "tag"
                    value: "value"
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  generic:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                promise:
                  var: "var"
                  node_id: "node_id"
                collection:
                  bindings:
                  - null
                  - null
                map:
                  bindings: {}
            - var: "var"
              binding:
                scalar:
                  schema:
                    type:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    uri: "uri"
                  blob:
                    metadata:
                      type:
                        dimensionality: {}
                        format: "format"
                    uri: "uri"
                  none_type: {}
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  binary:
                    tag: "tag"
                    value: "value"
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  generic:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                promise:
                  var: "var"
                  node_id: "node_id"
                collection:
                  bindings:
                  - null
                  - null
                map:
                  bindings: {}
            output_aliases:
            - var: "var"
              alias: "alias"
            - var: "var"
              alias: "alias"
            task_node:
              reference_id:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
            id: "id"
            workflow_node:
              launchplan_ref:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
              sub_workflow_ref:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
          metadata_defaults:
            interruptible: true
          id:
            domain: "domain"
            resource_type: {}
            name: "name"
            project: "project"
            version: "version"
          interface:
            outputs:
              variables:
                key:
                  description: "description"
                  type:
                    schema:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    metadata:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                    blob:
                      dimensionality: {}
                      format: "format"
                    simple: {}
            inputs:
              variables:
                key:
                  description: "description"
                  type:
                    schema:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    metadata:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                    blob:
                      dimensionality: {}
                      format: "format"
                    simple: {}
        connections:
          upstream:
            key:
              ids:
              - "ids"
              - "ids"
          downstream:
            key:
              ids:
              - "ids"
              - "ids"
      - template:
          outputs:
          - var: "var"
            binding:
              scalar:
                schema:
                  type:
                    columns:
                    - name: "name"
                      type: {}
                    - name: "name"
                      type: {}
                  uri: "uri"
                blob:
                  metadata:
                    type:
                      dimensionality: {}
                      format: "format"
                  uri: "uri"
                none_type: {}
                primitive:
                  duration: "duration"
                  datetime: "2000-01-23T04:56:07.000+00:00"
                  string_value: "string_value"
                  boolean: true
                  float_value: 1.4658129805029452
                  integer: "integer"
                binary:
                  tag: "tag"
                  value: "value"
                error:
                  message: "message"
                  failed_node_id: "failed_node_id"
                generic:
                  fields:
                    key:
                      list_value:
                        values:
                        - null
                        - null
                      number_value: 6.027456183070403
                      string_value: "string_value"
                      null_value: {}
                      bool_value: true
              promise:
                var: "var"
                node_id: "node_id"
              collection:
                bindings:
                - null
                - null
              map:
                bindings: {}
          - var: "var"
            binding:
              scalar:
                schema:
                  type:
                    columns:
                    - name: "name"
                      type: {}
                    - name: "name"
                      type: {}
                  uri: "uri"
                blob:
                  metadata:
                    type:
                      dimensionality: {}
                      format: "format"
                  uri: "uri"
                none_type: {}
                primitive:
                  duration: "duration"
                  datetime: "2000-01-23T04:56:07.000+00:00"
                  string_value: "string_value"
                  boolean: true
                  float_value: 1.4658129805029452
                  integer: "integer"
                binary:
                  tag: "tag"
                  value: "value"
                error:
                  message: "message"
                  failed_node_id: "failed_node_id"
                generic:
                  fields:
                    key:
                      list_value:
                        values:
                        - null
                        - null
                      number_value: 6.027456183070403
                      string_value: "string_value"
                      null_value: {}
                      bool_value: true
              promise:
                var: "var"
                node_id: "node_id"
              collection:
                bindings:
                - null
                - null
              map:
                bindings: {}
          metadata:
            queuing_budget: "queuing_budget"
          failure_node:
            branch_node:
              if_else:
                other:
                - condition:
                    conjunction:
                      operator: {}
                    comparison:
                      left_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      right_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      operator: {}
                - condition:
                    conjunction:
                      operator: {}
                    comparison:
                      left_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      right_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      operator: {}
                error:
                  message: "message"
                  failed_node_id: "failed_node_id"
                case:
                  condition:
                    conjunction:
                      operator: {}
                    comparison:
                      left_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      right_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      operator: {}
            metadata:
              retries:
                retries: 0
              name: "name"
              interruptible: true
              timeout: "timeout"
            upstream_node_ids:
            - "upstream_node_ids"
            - "upstream_node_ids"
            inputs:
            - var: "var"
              binding:
                scalar:
                  schema:
                    type:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    uri: "uri"
                  blob:
                    metadata:
                      type:
                        dimensionality: {}
                        format: "format"
                    uri: "uri"
                  none_type: {}
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  binary:
                    tag: "tag"
                    value: "value"
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  generic:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                promise:
                  var: "var"
                  node_id: "node_id"
                collection:
                  bindings:
                  - null
                  - null
                map:
                  bindings: {}
            - var: "var"
              binding:
                scalar:
                  schema:
                    type:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    uri: "uri"
                  blob:
                    metadata:
                      type:
                        dimensionality: {}
                        format: "format"
                    uri: "uri"
                  none_type: {}
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  binary:
                    tag: "tag"
                    value: "value"
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  generic:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                promise:
                  var: "var"
                  node_id: "node_id"
                collection:
                  bindings:
                  - null
                  - null
                map:
                  bindings: {}
            output_aliases:
            - var: "var"
              alias: "alias"
            - var: "var"
              alias: "alias"
            task_node:
              reference_id:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
            id: "id"
            workflow_node:
              launchplan_ref:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
              sub_workflow_ref:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
          nodes:
          - branch_node:
              if_else:
                other:
                - condition:
                    conjunction:
                      operator: {}
                    comparison:
                      left_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      right_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      operator: {}
                - condition:
                    conjunction:
                      operator: {}
                    comparison:
                      left_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      right_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      operator: {}
                error:
                  message: "message"
                  failed_node_id: "failed_node_id"
                case:
                  condition:
                    conjunction:
                      operator: {}
                    comparison:
                      left_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      right_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      operator: {}
            metadata:
              retries:
                retries: 0
              name: "name"
              interruptible: true
              timeout: "timeout"
            upstream_node_ids:
            - "upstream_node_ids"
            - "upstream_node_ids"
            inputs:
            - var: "var"
              binding:
                scalar:
                  schema:
                    type:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    uri: "uri"
                  blob:
                    metadata:
                      type:
                        dimensionality: {}
                        format: "format"
                    uri: "uri"
                  none_type: {}
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  binary:
                    tag: "tag"
                    value: "value"
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  generic:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                promise:
                  var: "var"
                  node_id: "node_id"
                collection:
                  bindings:
                  - null
                  - null
                map:
                  bindings: {}
            - var: "var"
              binding:
                scalar:
                  schema:
                    type:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    uri: "uri"
                  blob:
                    metadata:
                      type:
                        dimensionality: {}
                        format: "format"
                    uri: "uri"
                  none_type: {}
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  binary:
                    tag: "tag"
                    value: "value"
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  generic:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                promise:
                  var: "var"
                  node_id: "node_id"
                collection:
                  bindings:
                  - null
                  - null
                map:
                  bindings: {}
            output_aliases:
            - var: "var"
              alias: "alias"
            - var: "var"
              alias: "alias"
            task_node:
              reference_id:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
            id: "id"
            workflow_node:
              launchplan_ref:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
              sub_workflow_ref:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
          - branch_node:
              if_else:
                other:
                - condition:
                    conjunction:
                      operator: {}
                    comparison:
                      left_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      right_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      operator: {}
                - condition:
                    conjunction:
                      operator: {}
                    comparison:
                      left_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      right_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      operator: {}
                error:
                  message: "message"
                  failed_node_id: "failed_node_id"
                case:
                  condition:
                    conjunction:
                      operator: {}
                    comparison:
                      left_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      right_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      operator: {}
            metadata:
              retries:
                retries: 0
              name: "name"
              interruptible: true
              timeout: "timeout"
            upstream_node_ids:
            - "upstream_node_ids"
            - "upstream_node_ids"
            inputs:
            - var: "var"
              binding:
                scalar:
                  schema:
                    type:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    uri: "uri"
                  blob:
                    metadata:
                      type:
                        dimensionality: {}
                        format: "format"
                    uri: "uri"
                  none_type: {}
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  binary:
                    tag: "tag"
                    value: "value"
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  generic:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                promise:
                  var: "var"
                  node_id: "node_id"
                collection:
                  bindings:
                  - null
                  - null
                map:
                  bindings: {}
            - var: "var"
              binding:
                scalar:
                  schema:
                    type:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    uri: "uri"
                  blob:
                    metadata:
                      type:
                        dimensionality: {}
                        format: "format"
                    uri: "uri"
                  none_type: {}
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  binary:
                    tag: "tag"
                    value: "value"
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  generic:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                promise:
                  var: "var"
                  node_id: "node_id"
                collection:
                  bindings:
                  - null
                  - null
                map:
                  bindings: {}
            output_aliases:
            - var: "var"
              alias: "alias"
            - var: "var"
              alias: "alias"
            task_node:
              reference_id:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
            id: "id"
            workflow_node:
              launchplan_ref:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
              sub_workflow_ref:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
          metadata_defaults:
            interruptible: true
          id:
            domain: "domain"
            resource_type: {}
            name: "name"
            project: "project"
            version: "version"
          interface:
            outputs:
              variables:
                key:
                  description: "description"
                  type:
                    schema:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    metadata:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                    blob:
                      dimensionality: {}
                      format: "format"
                    simple: {}
            inputs:
              variables:
                key:
                  description: "description"
                  type:
                    schema:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    metadata:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                    blob:
                      dimensionality: {}
                      format: "format"
                    simple: {}
        connections:
          upstream:
            key:
              ids:
              - "ids"
              - "ids"
          downstream:
            key:
              ids:
              - "ids"
              - "ids"
      tasks:
      - template:
          container:
            args:
            - "args"
            - "args"
            image: "image"
            resources:
              requests:
              - name: {}
                value: "value"
              - name: {}
                value: "value"
              limits:
              - name: {}
                value: "value"
              - name: {}
                value: "value"
            env:
            - value: "value"
              key: "key"
            - value: "value"
              key: "key"
            ports:
            - container_port: 6
            - container_port: 6
            config:
            - value: "value"
              key: "key"
            - value: "value"
              key: "key"
            command:
            - "command"
            - "command"
          metadata:
            retries:
              retries: 0
            discoverable: true
            runtime:
              flavor: "flavor"
              type: {}
              version: "version"
            discovery_version: "discovery_version"
            deprecated_error_message: "deprecated_error_message"
            interruptible: true
            timeout: "timeout"
          custom:
            fields:
              key:
                list_value:
                  values:
                  - null
                  - null
                number_value: 6.027456183070403
                string_value: "string_value"
                null_value: {}
                bool_value: true
          id:
            domain: "domain"
            resource_type: {}
            name: "name"
            project: "project"
            version: "version"
          type: "type"
          interface:
            outputs:
              variables:
                key:
                  description: "description"
                  type:
                    schema:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    metadata:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                    blob:
                      dimensionality: {}
                      format: "format"
                    simple: {}
            inputs:
              variables:
                key:
                  description: "description"
                  type:
                    schema:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    metadata:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                    blob:
                      dimensionality: {}
                      format: "format"
                    simple: {}
      - template:
          container:
            args:
            - "args"
            - "args"
            image: "image"
            resources:
              requests:
              - name: {}
                value: "value"
              - name: {}
                value: "value"
              limits:
              - name: {}
                value: "value"
              - name: {}
                value: "value"
            env:
            - value: "value"
              key: "key"
            - value: "value"
              key: "key"
            ports:
            - container_port: 6
            - container_port: 6
            config:
            - value: "value"
              key: "key"
            - value: "value"
              key: "key"
            command:
            - "command"
            - "command"
          metadata:
            retries:
              retries: 0
            discoverable: true
            runtime:
              flavor: "flavor"
              type: {}
              version: "version"
            discovery_version: "discovery_version"
            deprecated_error_message: "deprecated_error_message"
            interruptible: true
            timeout: "timeout"
          custom:
            fields:
              key:
                list_value:
                  values:
                  - null
                  - null
                number_value: 6.027456183070403
                string_value: "string_value"
                null_value: {}
                bool_value: true
          id:
            domain: "domain"
            resource_type: {}
            name: "name"
            project: "project"
            version: "version"
          type: "type"
          interface:
            outputs:
              variables:
                key:
                  description: "description"
                  type:
                    schema:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    metadata:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                    blob:
                      dimensionality: {}
                      format: "format"
                    simple: {}
            inputs:
              variables:
                key:
                  description: "description"
                  type:
                    schema:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    metadata:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                    blob:
                      dimensionality: {}
                      format: "format"
                    simple: {}
      primary:
        template:
          outputs:
          - var: "var"
            binding:
              scalar:
                schema:
                  type:
                    columns:
                    - name: "name"
                      type: {}
                    - name: "name"
                      type: {}
                  uri: "uri"
                blob:
                  metadata:
                    type:
                      dimensionality: {}
                      format: "format"
                  uri: "uri"
                none_type: {}
                primitive:
                  duration: "duration"
                  datetime: "2000-01-23T04:56:07.000+00:00"
                  string_value: "string_value"
                  boolean: true
                  float_value: 1.4658129805029452
                  integer: "integer"
                binary:
                  tag: "tag"
                  value: "value"
                error:
                  message: "message"
                  failed_node_id: "failed_node_id"
                generic:
                  fields:
                    key:
                      list_value:
                        values:
                        - null
                        - null
                      number_value: 6.027456183070403
                      string_value: "string_value"
                      null_value: {}
                      bool_value: true
              promise:
                var: "var"
                node_id: "node_id"
              collection:
                bindings:
                - null
                - null
              map:
                bindings: {}
          - var: "var"
            binding:
              scalar:
                schema:
                  type:
                    columns:
                    - name: "name"
                      type: {}
                    - name: "name"
                      type: {}
                  uri: "uri"
                blob:
                  metadata:
                    type:
                      dimensionality: {}
                      format: "format"
                  uri: "uri"
                none_type: {}
                primitive:
                  duration: "duration"
                  datetime: "2000-01-23T04:56:07.000+00:00"
                  string_value: "string_value"
                  boolean: true
                  float_value: 1.4658129805029452
                  integer: "integer"
                binary:
                  tag: "tag"
                  value: "value"
                error:
                  message: "message"
                  failed_node_id: "failed_node_id"
                generic:
                  fields:
                    key:
                      list_value:
                        values:
                        - null
                        - null
                      number_value: 6.027456183070403
                      string_value: "string_value"
                      null_value: {}
                      bool_value: true
              promise:
                var: "var"
                node_id: "node_id"
              collection:
                bindings:
                - null
                - null
              map:
                bindings: {}
          metadata:
            queuing_budget: "queuing_budget"
          failure_node:
            branch_node:
              if_else:
                other:
                - condition:
                    conjunction:
                      operator: {}
                    comparison:
                      left_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      right_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      operator: {}
                - condition:
                    conjunction:
                      operator: {}
                    comparison:
                      left_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      right_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      operator: {}
                error:
                  message: "message"
                  failed_node_id: "failed_node_id"
                case:
                  condition:
                    conjunction:
                      operator: {}
                    comparison:
                      left_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      right_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      operator: {}
            metadata:
              retries:
                retries: 0
              name: "name"
              interruptible: true
              timeout: "timeout"
            upstream_node_ids:
            - "upstream_node_ids"
            - "upstream_node_ids"
            inputs:
            - var: "var"
              binding:
                scalar:
                  schema:
                    type:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    uri: "uri"
                  blob:
                    metadata:
                      type:
                        dimensionality: {}
                        format: "format"
                    uri: "uri"
                  none_type: {}
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  binary:
                    tag: "tag"
                    value: "value"
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  generic:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                promise:
                  var: "var"
                  node_id: "node_id"
                collection:
                  bindings:
                  - null
                  - null
                map:
                  bindings: {}
            - var: "var"
              binding:
                scalar:
                  schema:
                    type:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    uri: "uri"
                  blob:
                    metadata:
                      type:
                        dimensionality: {}
                        format: "format"
                    uri: "uri"
                  none_type: {}
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  binary:
                    tag: "tag"
                    value: "value"
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  generic:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                promise:
                  var: "var"
                  node_id: "node_id"
                collection:
                  bindings:
                  - null
                  - null
                map:
                  bindings: {}
            output_aliases:
            - var: "var"
              alias: "alias"
            - var: "var"
              alias: "alias"
            task_node:
              reference_id:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
            id: "id"
            workflow_node:
              launchplan_ref:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
              sub_workflow_ref:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
          nodes:
          - branch_node:
              if_else:
                other:
                - condition:
                    conjunction:
                      operator: {}
                    comparison:
                      left_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      right_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      operator: {}
                - condition:
                    conjunction:
                      operator: {}
                    comparison:
                      left_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      right_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      operator: {}
                error:
                  message: "message"
                  failed_node_id: "failed_node_id"
                case:
                  condition:
                    conjunction:
                      operator: {}
                    comparison:
                      left_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      right_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      operator: {}
            metadata:
              retries:
                retries: 0
              name: "name"
              interruptible: true
              timeout: "timeout"
            upstream_node_ids:
            - "upstream_node_ids"
            - "upstream_node_ids"
            inputs:
            - var: "var"
              binding:
                scalar:
                  schema:
                    type:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    uri: "uri"
                  blob:
                    metadata:
                      type:
                        dimensionality: {}
                        format: "format"
                    uri: "uri"
                  none_type: {}
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  binary:
                    tag: "tag"
                    value: "value"
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  generic:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                promise:
                  var: "var"
                  node_id: "node_id"
                collection:
                  bindings:
                  - null
                  - null
                map:
                  bindings: {}
            - var: "var"
              binding:
                scalar:
                  schema:
                    type:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    uri: "uri"
                  blob:
                    metadata:
                      type:
                        dimensionality: {}
                        format: "format"
                    uri: "uri"
                  none_type: {}
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  binary:
                    tag: "tag"
                    value: "value"
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  generic:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                promise:
                  var: "var"
                  node_id: "node_id"
                collection:
                  bindings:
                  - null
                  - null
                map:
                  bindings: {}
            output_aliases:
            - var: "var"
              alias: "alias"
            - var: "var"
              alias: "alias"
            task_node:
              reference_id:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
            id: "id"
            workflow_node:
              launchplan_ref:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
              sub_workflow_ref:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
          - branch_node:
              if_else:
                other:
                - condition:
                    conjunction:
                      operator: {}
                    comparison:
                      left_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      right_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      operator: {}
                - condition:
                    conjunction:
                      operator: {}
                    comparison:
                      left_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      right_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      operator: {}
                error:
                  message: "message"
                  failed_node_id: "failed_node_id"
                case:
                  condition:
                    conjunction:
                      operator: {}
                    comparison:
                      left_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      right_value:
                        primitive:
                          duration: "duration"
                          datetime: "2000-01-23T04:56:07.000+00:00"
                          string_value: "string_value"
                          boolean: true
                          float_value: 1.4658129805029452
                          integer: "integer"
                        var: "var"
                      operator: {}
            metadata:
              retries:
                retries: 0
              name: "name"
              interruptible: true
              timeout: "timeout"
            upstream_node_ids:
            - "upstream_node_ids"
            - "upstream_node_ids"
            inputs:
            - var: "var"
              binding:
                scalar:
                  schema:
                    type:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    uri: "uri"
                  blob:
                    metadata:
                      type:
                        dimensionality: {}
                        format: "format"
                    uri: "uri"
                  none_type: {}
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  binary:
                    tag: "tag"
                    value: "value"
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  generic:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                promise:
                  var: "var"
                  node_id: "node_id"
                collection:
                  bindings:
                  - null
                  - null
                map:
                  bindings: {}
            - var: "var"
              binding:
                scalar:
                  schema:
                    type:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    uri: "uri"
                  blob:
                    metadata:
                      type:
                        dimensionality: {}
                        format: "format"
                    uri: "uri"
                  none_type: {}
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  binary:
                    tag: "tag"
                    value: "value"
                  error:
                    message: "message"
                    failed_node_id: "failed_node_id"
                  generic:
                    fields:
                      key:
                        list_value:
                          values:
                          - null
                          - null
                        number_value: 6.027456183070403
                        string_value: "string_value"
                        null_value: {}
                        bool_value: true
                promise:
                  var: "var"
                  node_id: "node_id"
                collection:
                  bindings:
                  - null
                  - null
                map:
                  bindings: {}
            output_aliases:
            - var: "var"
              alias: "alias"
            - var: "var"
              alias: "alias"
            task_node:
              reference_id:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
            id: "id"
            workflow_node:
              launchplan_ref:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
              sub_workflow_ref:
                domain: "domain"
                resource_type: {}
                name: "name"
                project: "project"
                version: "version"
          metadata_defaults:
            interruptible: true
          id:
            domain: "domain"
            resource_type: {}
            name: "name"
            project: "project"
            version: "version"
          interface:
            outputs:
              variables:
                key:
                  description: "description"
                  type:
                    schema:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    metadata:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                    blob:
                      dimensionality: {}
                      format: "format"
                    simple: {}
            inputs:
              variables:
                key:
                  description: "description"
                  type:
                    schema:
                      columns:
                      - name: "name"
                        type: {}
                      - name: "name"
                        type: {}
                    metadata:
                      fields:
                        key:
                          list_value:
                            values:
                            - null
                            - null
                          number_value: 6.027456183070403
                          string_value: "string_value"
                          null_value: {}
                          bool_value: true
                    blob:
                      dimensionality: {}
                      format: "format"
                    simple: {}
        connections:
          upstream:
            key:
              ids:
              - "ids"
              - "ids"
          downstream:
            key:
              ids:
              - "ids"
              - "ids"
  coreConjunctionExpression:
    type: "object"
    properties:
      operator:
        $ref: "#/definitions/ConjunctionExpressionLogicalOperator"
      left_expression:
        $ref: "#/definitions/coreBooleanExpression"
      right_expression:
        $ref: "#/definitions/coreBooleanExpression"
    description: "Defines a conjunction expression of two boolean expressions."
    example:
      operator: {}
  coreConnectionSet:
    type: "object"
    properties:
      downstream:
        type: "object"
        title: "A list of all the node ids that are downstream from a given node id"
        additionalProperties:
          $ref: "#/definitions/ConnectionSetIdList"
      upstream:
        type: "object"
        title: "A list of all the node ids, that are upstream of this node id"
        additionalProperties:
          $ref: "#/definitions/ConnectionSetIdList"
    title: "Adjacency list for the workflow. This is created as part of the compilation\
      \ process. Every process after the compilation\nstep uses this created ConnectionSet"
    example:
      upstream:
        key:
          ids:
          - "ids"
          - "ids"
      downstream:
        key:
          ids:
          - "ids"
          - "ids"
  coreContainer:
    type: "object"
    properties:
      image:
        type: "string"
        title: "Container image url. Eg: docker/redis:latest"
      command:
        type: "array"
        description: "Command to be executed, if not provided, the default entrypoint\
          \ in the container image will be used."
        items:
          type: "string"
      args:
        type: "array"
        description: "These will default to Flyte given paths. If provided, the system\
          \ will not append known paths. If the task still\nneeds flyte's inputs and\
          \ outputs path, add $(FLYTE_INPUT_FILE), $(FLYTE_OUTPUT_FILE) wherever makes\
          \ sense and the\nsystem will populate these before executing the container."
        items:
          type: "string"
      resources:
        description: "Container resources requirement as specified by the container\
          \ engine."
        $ref: "#/definitions/coreResources"
      env:
        type: "array"
        description: "Environment variables will be set as the container is starting\
          \ up."
        items:
          $ref: "#/definitions/coreKeyValuePair"
      config:
        type: "array"
        description: "Allows extra configs to be available for the container.\nTODO:\
          \ elaborate on how configs will become available."
        items:
          $ref: "#/definitions/coreKeyValuePair"
      ports:
        type: "array"
        title: "Ports to open in the container. This feature is not supported by all\
          \ execution engines. (e.g. supported on K8s but\nnot supported on AWS Batch)"
        items:
          $ref: "#/definitions/coreContainerPort"
    example:
      args:
      - "args"
      - "args"
      image: "image"
      resources:
        requests:
        - name: {}
          value: "value"
        - name: {}
          value: "value"
        limits:
        - name: {}
          value: "value"
        - name: {}
          value: "value"
      env:
      - value: "value"
        key: "key"
      - value: "value"
        key: "key"
      ports:
      - container_port: 6
      - container_port: 6
      config:
      - value: "value"
        key: "key"
      - value: "value"
        key: "key"
      command:
      - "command"
      - "command"
  coreContainerPort:
    type: "object"
    properties:
      container_port:
        type: "integer"
        format: "int64"
        description: "Number of port to expose on the pod's IP address.\nThis must\
          \ be a valid port number, 0 < x < 65536."
    description: "Defines port properties for a container."
    example:
      container_port: 6
  coreError:
    type: "object"
    properties:
      failed_node_id:
        type: "string"
        description: "The node id that threw the error."
      message:
        type: "string"
        description: "Error message thrown."
    description: "Represents an error thrown from a node."
    example:
      message: "message"
      failed_node_id: "failed_node_id"
  coreExecutionError:
    type: "object"
    properties:
      code:
        type: "string"
        title: "Error code indicates a grouping of a type of error.\nMore Info: <Link>"
      message:
        type: "string"
        description: "Detailed description of the error - including stack trace."
      error_uri:
        type: "string"
        title: "Full error contents accessible via a URI"
      kind:
        $ref: "#/definitions/ExecutionErrorErrorKind"
    description: "Represents the error message from the execution."
    example:
      code: "code"
      kind: {}
      message: "message"
      error_uri: "error_uri"
  coreIdentifier:
    type: "object"
    properties:
      resource_type:
        description: "Identifies the specific type of resource that this identifer\
          \ corresponds to."
        $ref: "#/definitions/coreResourceType"
      project:
        type: "string"
        description: "Name of the project the resource belongs to."
      domain:
        type: "string"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
      name:
        type: "string"
        description: "User provided value for the resource."
      version:
        type: "string"
        description: "Specific version of the resource."
    description: "Encapsulation of fields that uniquely identifies a Flyte resource."
    example:
      domain: "domain"
      resource_type: {}
      name: "name"
      project: "project"
      version: "version"
  coreIfBlock:
    type: "object"
    properties:
      condition:
        $ref: "#/definitions/coreBooleanExpression"
      then_node:
        $ref: "#/definitions/coreNode"
    description: "Defines a condition and the execution unit that should be executed\
      \ if the condition is satisfied."
    example:
      condition:
        conjunction:
          operator: {}
        comparison:
          left_value:
            primitive:
              duration: "duration"
              datetime: "2000-01-23T04:56:07.000+00:00"
              string_value: "string_value"
              boolean: true
              float_value: 1.4658129805029452
              integer: "integer"
            var: "var"
          right_value:
            primitive:
              duration: "duration"
              datetime: "2000-01-23T04:56:07.000+00:00"
              string_value: "string_value"
              boolean: true
              float_value: 1.4658129805029452
              integer: "integer"
            var: "var"
          operator: {}
  coreIfElseBlock:
    type: "object"
    properties:
      case:
        description: "+required. First condition to evaluate."
        $ref: "#/definitions/coreIfBlock"
      other:
        type: "array"
        description: "+optional. Additional branches to evaluate."
        items:
          $ref: "#/definitions/coreIfBlock"
      else_node:
        description: "The node to execute in case none of the branches were taken."
        $ref: "#/definitions/coreNode"
      error:
        description: "An error to throw in case none of the branches were taken."
        $ref: "#/definitions/coreError"
    description: "Defines a series of if/else blocks. The first branch whose condition\
      \ evaluates to true is the one to execute.\nIf no conditions were satisfied,\
      \ the else_node or the error will execute."
    example:
      other:
      - condition:
          conjunction:
            operator: {}
          comparison:
            left_value:
              primitive:
                duration: "duration"
                datetime: "2000-01-23T04:56:07.000+00:00"
                string_value: "string_value"
                boolean: true
                float_value: 1.4658129805029452
                integer: "integer"
              var: "var"
            right_value:
              primitive:
                duration: "duration"
                datetime: "2000-01-23T04:56:07.000+00:00"
                string_value: "string_value"
                boolean: true
                float_value: 1.4658129805029452
                integer: "integer"
              var: "var"
            operator: {}
      - condition:
          conjunction:
            operator: {}
          comparison:
            left_value:
              primitive:
                duration: "duration"
                datetime: "2000-01-23T04:56:07.000+00:00"
                string_value: "string_value"
                boolean: true
                float_value: 1.4658129805029452
                integer: "integer"
              var: "var"
            right_value:
              primitive:
                duration: "duration"
                datetime: "2000-01-23T04:56:07.000+00:00"
                string_value: "string_value"
                boolean: true
                float_value: 1.4658129805029452
                integer: "integer"
              var: "var"
            operator: {}
      error:
        message: "message"
        failed_node_id: "failed_node_id"
      case:
        condition:
          conjunction:
            operator: {}
          comparison:
            left_value:
              primitive:
                duration: "duration"
                datetime: "2000-01-23T04:56:07.000+00:00"
                string_value: "string_value"
                boolean: true
                float_value: 1.4658129805029452
                integer: "integer"
              var: "var"
            right_value:
              primitive:
                duration: "duration"
                datetime: "2000-01-23T04:56:07.000+00:00"
                string_value: "string_value"
                boolean: true
                float_value: 1.4658129805029452
                integer: "integer"
              var: "var"
            operator: {}
  coreKeyValuePair:
    type: "object"
    properties:
      key:
        type: "string"
        description: "required."
      value:
        type: "string"
        description: "+optional."
    description: "A generic key value pair."
    example:
      value: "value"
      key: "key"
  coreLiteral:
    type: "object"
    properties:
      scalar:
        description: "A simple value."
        $ref: "#/definitions/coreScalar"
      collection:
        description: "A collection of literals to allow nesting."
        $ref: "#/definitions/coreLiteralCollection"
      map:
        description: "A map of strings to literals."
        $ref: "#/definitions/coreLiteralMap"
    description: "A simple value. This supports any level of nesting (e.g. array of\
      \ array of array of Blobs) as well as simple primitives."
    example:
      scalar:
        schema:
          type:
            columns:
            - name: "name"
              type: {}
            - name: "name"
              type: {}
          uri: "uri"
        blob:
          metadata:
            type:
              dimensionality: {}
              format: "format"
          uri: "uri"
        none_type: {}
        primitive:
          duration: "duration"
          datetime: "2000-01-23T04:56:07.000+00:00"
          string_value: "string_value"
          boolean: true
          float_value: 1.4658129805029452
          integer: "integer"
        binary:
          tag: "tag"
          value: "value"
        error:
          message: "message"
          failed_node_id: "failed_node_id"
        generic:
          fields:
            key:
              list_value:
                values:
                - null
                - null
              number_value: 6.027456183070403
              string_value: "string_value"
              null_value: {}
              bool_value: true
      collection:
        literals:
        - null
        - null
      map:
        literals: {}
  coreLiteralCollection:
    type: "object"
    properties:
      literals:
        type: "array"
        items:
          $ref: "#/definitions/coreLiteral"
    description: "A collection of literals. This is a workaround since oneofs in proto\
      \ messages cannot contain a repeated field."
    example:
      literals:
      - null
      - null
  coreLiteralMap:
    type: "object"
    properties:
      literals:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/coreLiteral"
    description: "A map of literals. This is a workaround since oneofs in proto messages\
      \ cannot contain a repeated field."
    example:
      literals: {}
  coreLiteralType:
    type: "object"
    properties:
      simple:
        description: "A simple type that can be compared one-to-one with another."
        $ref: "#/definitions/coreSimpleType"
      schema:
        description: "A complex type that requires matching of inner fields."
        $ref: "#/definitions/coreSchemaType"
      collection_type:
        description: "Defines the type of the value of a collection. Only homogeneous\
          \ collections are allowed."
        $ref: "#/definitions/coreLiteralType"
      map_value_type:
        description: "Defines the type of the value of a map type. The type of the\
          \ key is always a string."
        $ref: "#/definitions/coreLiteralType"
      blob:
        description: "A blob might have specialized implementation details depending\
          \ on associated metadata."
        $ref: "#/definitions/coreBlobType"
      metadata:
        description: "This field contains type metadata that is descriptive of the\
          \ type, but is NOT considered in type-checking.  This might be used by\n\
          consumers to identify special behavior or display extended information for\
          \ the type."
        $ref: "#/definitions/protobufStruct"
    description: "Defines a strong type to allow type checking between interfaces."
    example:
      schema:
        columns:
        - name: "name"
          type: {}
        - name: "name"
          type: {}
      metadata:
        fields:
          key:
            list_value:
              values:
              - null
              - null
            number_value: 6.027456183070403
            string_value: "string_value"
            null_value: {}
            bool_value: true
      blob:
        dimensionality: {}
        format: "format"
      simple: {}
  coreNode:
    type: "object"
    properties:
      id:
        type: "string"
        description: "A workflow-level unique identifier that identifies this node\
          \ in the workflow. \"inputs\" and \"outputs\" are reserved\nnode ids that\
          \ cannot be used by other nodes."
      metadata:
        description: "Extra metadata about the node."
        $ref: "#/definitions/coreNodeMetadata"
      inputs:
        type: "array"
        description: "Specifies how to bind the underlying interface's inputs. All\
          \ required inputs specified in the underlying interface\nmust be fullfilled."
        items:
          $ref: "#/definitions/coreBinding"
      upstream_node_ids:
        type: "array"
        description: "+optional Specifies execution depdendency for this node ensuring\
          \ it will only get scheduled to run after all its\nupstream nodes have completed.\
          \ This node will have an implicit depdendency on any node that appears in\
          \ inputs\nfield."
        items:
          type: "string"
      output_aliases:
        type: "array"
        description: "+optional. A node can define aliases for a subset of its outputs.\
          \ This is particularly useful if different nodes\nneed to conform to the\
          \ same interface (e.g. all branches in a branch node). Downstream nodes\
          \ must refer to this\nnodes outputs using the alias if one's specified."
        items:
          $ref: "#/definitions/coreAlias"
      task_node:
        description: "Information about the Task to execute in this node."
        $ref: "#/definitions/coreTaskNode"
      workflow_node:
        description: "Information about the Workflow to execute in this mode."
        $ref: "#/definitions/coreWorkflowNode"
      branch_node:
        description: "Information about the branch node to evaluate in this node."
        $ref: "#/definitions/coreBranchNode"
    description: "A Workflow graph Node. One unit of execution in the graph. Each\
      \ node can be linked to a Task, a Workflow or a branch\nnode."
    example:
      branch_node:
        if_else:
          other:
          - condition:
              conjunction:
                operator: {}
              comparison:
                left_value:
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  var: "var"
                right_value:
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  var: "var"
                operator: {}
          - condition:
              conjunction:
                operator: {}
              comparison:
                left_value:
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  var: "var"
                right_value:
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  var: "var"
                operator: {}
          error:
            message: "message"
            failed_node_id: "failed_node_id"
          case:
            condition:
              conjunction:
                operator: {}
              comparison:
                left_value:
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  var: "var"
                right_value:
                  primitive:
                    duration: "duration"
                    datetime: "2000-01-23T04:56:07.000+00:00"
                    string_value: "string_value"
                    boolean: true
                    float_value: 1.4658129805029452
                    integer: "integer"
                  var: "var"
                operator: {}
      metadata:
        retries:
          retries: 0
        name: "name"
        interruptible: true
        timeout: "timeout"
      upstream_node_ids:
      - "upstream_node_ids"
      - "upstream_node_ids"
      inputs:
      - var: "var"
        binding:
          scalar:
            schema:
              type:
                columns:
                - name: "name"
                  type: {}
                - name: "name"
                  type: {}
              uri: "uri"
            blob:
              metadata:
                type:
                  dimensionality: {}
                  format: "format"
              uri: "uri"
            none_type: {}
            primitive:
              duration: "duration"
              datetime: "2000-01-23T04:56:07.000+00:00"
              string_value: "string_value"
              boolean: true
              float_value: 1.4658129805029452
              integer: "integer"
            binary:
              tag: "tag"
              value: "value"
            error:
              message: "message"
              failed_node_id: "failed_node_id"
            generic:
              fields:
                key:
                  list_value:
                    values:
                    - null
                    - null
                  number_value: 6.027456183070403
                  string_value: "string_value"
                  null_value: {}
                  bool_value: true
          promise:
            var: "var"
            node_id: "node_id"
          collection:
            bindings:
            - null
            - null
          map:
            bindings: {}
      - var: "var"
        binding:
          scalar:
            schema:
              type:
                columns:
                - name: "name"
                  type: {}
                - name: "name"
                  type: {}
              uri: "uri"
            blob:
              metadata:
                type:
                  dimensionality: {}
                  format: "format"
              uri: "uri"
            none_type: {}
            primitive:
              duration: "duration"
              datetime: "2000-01-23T04:56:07.000+00:00"
              string_value: "string_value"
              boolean: true
              float_value: 1.4658129805029452
              integer: "integer"
            binary:
              tag: "tag"
              value: "value"
            error:
              message: "message"
              failed_node_id: "failed_node_id"
            generic:
              fields:
                key:
                  list_value:
                    values:
                    - null
                    - null
                  number_value: 6.027456183070403
                  string_value: "string_value"
                  null_value: {}
                  bool_value: true
          promise:
            var: "var"
            node_id: "node_id"
          collection:
            bindings:
            - null
            - null
          map:
            bindings: {}
      output_aliases:
      - var: "var"
        alias: "alias"
      - var: "var"
        alias: "alias"
      task_node:
        reference_id:
          domain: "domain"
          resource_type: {}
          name: "name"
          project: "project"
          version: "version"
      id: "id"
      workflow_node:
        launchplan_ref:
          domain: "domain"
          resource_type: {}
          name: "name"
          project: "project"
          version: "version"
        sub_workflow_ref:
          domain: "domain"
          resource_type: {}
          name: "name"
          project: "project"
          version: "version"
  coreNodeExecutionIdentifier:
    type: "object"
    properties:
      node_id:
        type: "string"
      execution_id:
        $ref: "#/definitions/coreWorkflowExecutionIdentifier"
    description: "Encapsulation of fields that identify a Flyte node execution entity."
    example:
      execution_id:
        domain: "domain"
        name: "name"
        project: "project"
      node_id: "node_id"
  coreNodeExecutionPhase:
    type: "string"
    enum:
    - "UNDEFINED"
    - "QUEUED"
    - "RUNNING"
    - "SUCCEEDED"
    - "FAILING"
    - "FAILED"
    - "ABORTED"
    - "SKIPPED"
    - "TIMED_OUT"
    default: "UNDEFINED"
  coreNodeMetadata:
    type: "object"
    properties:
      name:
        type: "string"
        title: "A friendly name for the Node"
      timeout:
        type: "string"
        description: "The overall timeout of a task."
      retries:
        description: "Number of retries per task."
        $ref: "#/definitions/coreRetryStrategy"
      interruptible:
        type: "boolean"
        format: "boolean"
    description: "Defines extra information about the Node."
    example:
      retries:
        retries: 0
      name: "name"
      interruptible: true
      timeout: "timeout"
  coreOperand:
    type: "object"
    properties:
      primitive:
        title: "Can be a constant"
        $ref: "#/definitions/corePrimitive"
      var:
        type: "string"
        title: "Or one of this node's input variables"
    description: "Defines an operand to a comparison expression."
    example:
      primitive:
        duration: "duration"
        datetime: "2000-01-23T04:56:07.000+00:00"
        string_value: "string_value"
        boolean: true
        float_value: 1.4658129805029452
        integer: "integer"
      var: "var"
  coreOutputReference:
    type: "object"
    properties:
      node_id:
        type: "string"
        description: "Node id must exist at the graph layer."
      var:
        type: "string"
        description: "Variable name must refer to an output variable for the node."
    description: "A reference to an output produced by a node. The type can be retrieved\
      \ -and validated- from\nthe underlying interface of the node."
    example:
      var: "var"
      node_id: "node_id"
  coreParameter:
    type: "object"
    properties:
      var:
        description: "+required Variable. Defines the type of the variable backing\
          \ this parameter."
        $ref: "#/definitions/coreVariable"
      default:
        description: "Defines a default value that has to match the variable type\
          \ defined."
        $ref: "#/definitions/coreLiteral"
      required:
        type: "boolean"
        format: "boolean"
        description: "+optional, is this value required to be filled."
    description: "A parameter is used as input to a launch plan and has\nthe special\
      \ ability to have a default value or mark itself as required."
    example:
      default:
        scalar:
          schema:
            type:
              columns:
              - name: "name"
                type: {}
              - name: "name"
                type: {}
            uri: "uri"
          blob:
            metadata:
              type:
                dimensionality: {}
                format: "format"
            uri: "uri"
          none_type: {}
          primitive:
            duration: "duration"
            datetime: "2000-01-23T04:56:07.000+00:00"
            string_value: "string_value"
            boolean: true
            float_value: 1.4658129805029452
            integer: "integer"
          binary:
            tag: "tag"
            value: "value"
          error:
            message: "message"
            failed_node_id: "failed_node_id"
          generic:
            fields:
              key:
                list_value:
                  values:
                  - null
                  - null
                number_value: 6.027456183070403
                string_value: "string_value"
                null_value: {}
                bool_value: true
        collection:
          literals:
          - null
          - null
        map:
          literals: {}
      var:
        description: "description"
        type:
          schema:
            columns:
            - name: "name"
              type: {}
            - name: "name"
              type: {}
          metadata:
            fields:
              key:
                list_value:
                  values:
                  - null
                  - null
                number_value: 6.027456183070403
                string_value: "string_value"
                null_value: {}
                bool_value: true
          blob:
            dimensionality: {}
            format: "format"
          simple: {}
      required: true
  coreParameterMap:
    type: "object"
    properties:
      parameters:
        type: "object"
        description: "Defines a map of parameter names to parameters."
        additionalProperties:
          $ref: "#/definitions/coreParameter"
    description: "A map of Parameters."
    example:
      parameters:
        key:
          default:
            scalar:
              schema:
                type:
                  columns:
                  - name: "name"
                    type: {}
                  - name: "name"
                    type: {}
                uri: "uri"
              blob:
                metadata:
                  type:
                    dimensionality: {}
                    format: "format"
                uri: "uri"
              none_type: {}
              primitive:
                duration: "duration"
                datetime: "2000-01-23T04:56:07.000+00:00"
                string_value: "string_value"
                boolean: true
                float_value: 1.4658129805029452
                integer: "integer"
              binary:
                tag: "tag"
                value: "value"
              error:
                message: "message"
                failed_node_id: "failed_node_id"
              generic:
                fields:
                  key:
                    list_value:
                      values:
                      - null
                      - null
                    number_value: 6.027456183070403
                    string_value: "string_value"
                    null_value: {}
                    bool_value: true
            collection:
              literals:
              - null
              - null
            map:
              literals: {}
          var:
            description: "description"
            type:
              schema:
                columns:
                - name: "name"
                  type: {}
                - name: "name"
                  type: {}
              metadata:
                fields:
                  key:
                    list_value:
                      values:
                      - null
                      - null
                    number_value: 6.027456183070403
                    string_value: "string_value"
                    null_value: {}
                    bool_value: true
              blob:
                dimensionality: {}
                format: "format"
              simple: {}
          required: true
  corePrimitive:
    type: "object"
    properties:
      integer:
        type: "string"
        format: "int64"
      float_value:
        type: "number"
        format: "double"
      string_value:
        type: "string"
      boolean:
        type: "boolean"
        format: "boolean"
      datetime:
        type: "string"
        format: "date-time"
      duration:
        type: "string"
    title: "Primitive Types"
    example:
      duration: "duration"
      datetime: "2000-01-23T04:56:07.000+00:00"
      string_value: "string_value"
      boolean: true
      float_value: 1.4658129805029452
      integer: "integer"
  coreResourceType:
    type: "string"
    description: "Indicates a resource type within Flyte."
    enum:
    - "UNSPECIFIED"
    - "TASK"
    - "WORKFLOW"
    - "LAUNCH_PLAN"
    default: "UNSPECIFIED"
  coreResources:
    type: "object"
    properties:
      requests:
        type: "array"
        description: "The desired set of resources requested. ResourceNames must be\
          \ unique within the list."
        items:
          $ref: "#/definitions/ResourcesResourceEntry"
      limits:
        type: "array"
        description: "Defines a set of bounds (e.g. min/max) within which the task\
          \ can reliably run. ResourceNames must be unique\nwithin the list."
        items:
          $ref: "#/definitions/ResourcesResourceEntry"
    description: "A customizable interface to convey resources requested for a container.\
      \ This can be interpretted differently for different\ncontainer engines."
    example:
      requests:
      - name: {}
        value: "value"
      - name: {}
        value: "value"
      limits:
      - name: {}
        value: "value"
      - name: {}
        value: "value"
  coreRetryStrategy:
    type: "object"
    properties:
      retries:
        type: "integer"
        format: "int64"
        description: "Number of retries. Retries will be consumed when the job fails\
          \ with a recoverable error.\nThe number of retries must be less than or\
          \ equals to 10."
    description: "Retry strategy associated with an executable unit."
    example:
      retries: 0
  coreRuntimeMetadata:
    type: "object"
    properties:
      type:
        description: "Type of runtime."
        $ref: "#/definitions/RuntimeMetadataRuntimeType"
      version:
        type: "string"
        description: "Version of the runtime. All versions should be backward compatible.\
          \ However, certain cases call for version\nchecks to ensure tighter validation\
          \ or setting expectations."
      flavor:
        type: "string"
        description: "+optional It can be used to provide extra information about\
          \ the runtime (e.g. python, golang... etc.)."
    description: "Runtime information. This is losely defined to allow for extensibility."
    example:
      flavor: "flavor"
      type: {}
      version: "version"
  coreScalar:
    type: "object"
    properties:
      primitive:
        $ref: "#/definitions/corePrimitive"
      blob:
        $ref: "#/definitions/coreBlob"
      binary:
        $ref: "#/definitions/coreBinary"
      schema:
        $ref: "#/definitions/flyteidlcoreSchema"
      none_type:
        $ref: "#/definitions/coreVoid"
      error:
        $ref: "#/definitions/coreError"
      generic:
        $ref: "#/definitions/protobufStruct"
    example:
      schema:
        type:
          columns:
          - name: "name"
            type: {}
          - name: "name"
            type: {}
        uri: "uri"
      blob:
        metadata:
          type:
            dimensionality: {}
            format: "format"
        uri: "uri"
      none_type: {}
      primitive:
        duration: "duration"
        datetime: "2000-01-23T04:56:07.000+00:00"
        string_value: "string_value"
        boolean: true
        float_value: 1.4658129805029452
        integer: "integer"
      binary:
        tag: "tag"
        value: "value"
      error:
        message: "message"
        failed_node_id: "failed_node_id"
      generic:
        fields:
          key:
            list_value:
              values:
              - null
              - null
            number_value: 6.027456183070403
            string_value: "string_value"
            null_value: {}
            bool_value: true
  coreSchemaType:
    type: "object"
    properties:
      columns:
        type: "array"
        description: "A list of ordered columns this schema comprises of."
        items:
          $ref: "#/definitions/SchemaTypeSchemaColumn"
    description: "Defines schema columns and types to strongly type-validate schemas\
      \ interoperability."
    example:
      columns:
      - name: "name"
        type: {}
      - name: "name"
        type: {}
  coreSimpleType:
    type: "string"
    description: "Define a set of simple types."
    enum:
    - "NONE"
    - "INTEGER"
    - "FLOAT"
    - "STRING"
    - "BOOLEAN"
    - "DATETIME"
    - "DURATION"
    - "BINARY"
    - "ERROR"
    - "STRUCT"
    default: "NONE"
  coreTaskExecutionIdentifier:
    type: "object"
    properties:
      task_id:
        $ref: "#/definitions/coreIdentifier"
      node_execution_id:
        $ref: "#/definitions/coreNodeExecutionIdentifier"
      retry_attempt:
        type: "integer"
        format: "int64"
    description: "Encapsulation of fields that identify a Flyte task execution entity."
    example:
      task_id:
        domain: "domain"
        resource_type: {}
        name: "name"
        project: "project"
        version: "version"
      node_execution_id:
        execution_id:
          domain: "domain"
          name: "name"
          project: "project"
        node_id: "node_id"
      retry_attempt: 0
  coreTaskExecutionPhase:
    type: "string"
    title: "- INITIALIZING: To indicate cases where task is initializing, like: ErrImagePull,\
      \ ContainerCreating, PodInitializing\n - WAITING_FOR_RESOURCES: To address cases,\
      \ where underlying resource is not available: Backoff error, Resource quota\
      \ exceeded"
    enum:
    - "UNDEFINED"
    - "QUEUED"
    - "RUNNING"
    - "SUCCEEDED"
    - "ABORTED"
    - "FAILED"
    - "INITIALIZING"
    - "WAITING_FOR_RESOURCES"
    default: "UNDEFINED"
  coreTaskLog:
    type: "object"
    properties:
      uri:
        type: "string"
      name:
        type: "string"
      message_format:
        $ref: "#/definitions/TaskLogMessageFormat"
      ttl:
        type: "string"
    title: "Log information for the task that is specific to a log sink\nWhen our\
      \ log story is flushed out, we may have more metadata here like log link expiry"
    example:
      message_format: {}
      name: "name"
      uri: "uri"
      ttl: "ttl"
  coreTaskMetadata:
    type: "object"
    properties:
      discoverable:
        type: "boolean"
        format: "boolean"
        description: "Indicates whether the system should attempt to lookup this task's\
          \ output to avoid duplication of work."
      runtime:
        description: "Runtime information about the task."
        $ref: "#/definitions/coreRuntimeMetadata"
      timeout:
        type: "string"
        description: "The overall timeout of a task including user-triggered retries."
      retries:
        description: "Number of retries per task."
        $ref: "#/definitions/coreRetryStrategy"
      discovery_version:
        type: "string"
        description: "Indicates a logical version to apply to this task for the purpose\
          \ of discovery."
      deprecated_error_message:
        type: "string"
        description: "If set, this indicates that this task is deprecated.  This will\
          \ enable owners of tasks to notify consumers\nof the ending of support for\
          \ a given task."
      interruptible:
        type: "boolean"
        format: "boolean"
    title: "Task Metadata"
    example:
      retries:
        retries: 0
      discoverable: true
      runtime:
        flavor: "flavor"
        type: {}
        version: "version"
      discovery_version: "discovery_version"
      deprecated_error_message: "deprecated_error_message"
      interruptible: true
      timeout: "timeout"
  coreTaskNode:
    type: "object"
    properties:
      reference_id:
        description: "A globally unique identifier for the task."
        $ref: "#/definitions/coreIdentifier"
    description: "Refers to the task that the Node is to execute."
    example:
      reference_id:
        domain: "domain"
        resource_type: {}
        name: "name"
        project: "project"
        version: "version"
  coreTaskTemplate:
    type: "object"
    properties:
      id:
        description: "Auto generated taskId by the system. Task Id uniquely identifies\
          \ this task globally."
        $ref: "#/definitions/coreIdentifier"
      type:
        type: "string"
        description: "A predefined yet extensible Task type identifier. This can be\
          \ used to customize any of the components. If no\nextensions are provided\
          \ in the system, Flyte will resolve the this task to its TaskCategory and\
          \ default the\nimplementation registered for the TaskCategory."
      metadata:
        description: "Extra metadata about the task."
        $ref: "#/definitions/coreTaskMetadata"
      interface:
        description: "A strongly typed interface for the task. This enables others\
          \ to use this task within a workflow and gauarantees\ncompile-time validation\
          \ of the workflow to avoid costly runtime failures."
        $ref: "#/definitions/coreTypedInterface"
      custom:
        description: "Custom data about the task. This is extensible to allow various\
          \ plugins in the system."
        $ref: "#/definitions/protobufStruct"
      container:
        $ref: "#/definitions/coreContainer"
    description: "A Task structure that uniquely identifies a task in the system\n\
      Tasks are registered as a first step in the system."
    example:
      container:
        args:
        - "args"
        - "args"
        image: "image"
        resources:
          requests:
          - name: {}
            value: "value"
          - name: {}
            value: "value"
          limits:
          - name: {}
            value: "value"
          - name: {}
            value: "value"
        env:
        - value: "value"
          key: "key"
        - value: "value"
          key: "key"
        ports:
        - container_port: 6
        - container_port: 6
        config:
        - value: "value"
          key: "key"
        - value: "value"
          key: "key"
        command:
        - "command"
        - "command"
      metadata:
        retries:
          retries: 0
        discoverable: true
        runtime:
          flavor: "flavor"
          type: {}
          version: "version"
        discovery_version: "discovery_version"
        deprecated_error_message: "deprecated_error_message"
        interruptible: true
        timeout: "timeout"
      custom:
        fields:
          key:
            list_value:
              values:
              - null
              - null
            number_value: 6.027456183070403
            string_value: "string_value"
            null_value: {}
            bool_value: true
      id:
        domain: "domain"
        resource_type: {}
        name: "name"
        project: "project"
        version: "version"
      type: "type"
      interface:
        outputs:
          variables:
            key:
              description: "description"
              type:
                schema:
                  columns:
                  - name: "name"
                    type: {}
                  - name: "name"
                    type: {}
                metadata:
                  fields:
                    key:
                      list_value:
                        values:
                        - null
                        - null
                      number_value: 6.027456183070403
                      string_value: "string_value"
                      null_value: {}
                      bool_value: true
                blob:
                  dimensionality: {}
                  format: "format"
                simple: {}
        inputs:
          variables:
            key:
              description: "description"
              type:
                schema:
                  columns:
                  - name: "name"
                    type: {}
                  - name: "name"
                    type: {}
                metadata:
                  fields:
                    key:
                      list_value:
                        values:
                        - null
                        - null
                      number_value: 6.027456183070403
                      string_value: "string_value"
                      null_value: {}
                      bool_value: true
                blob:
                  dimensionality: {}
                  format: "format"
                simple: {}
  coreTypedInterface:
    type: "object"
    properties:
      inputs:
        $ref: "#/definitions/coreVariableMap"
      outputs:
        $ref: "#/definitions/coreVariableMap"
    description: "Defines strongly typed inputs and outputs."
    example:
      outputs:
        variables:
          key:
            description: "description"
            type:
              schema:
                columns:
                - name: "name"
                  type: {}
                - name: "name"
                  type: {}
              metadata:
                fields:
                  key:
                    list_value:
                      values:
                      - null
                      - null
                    number_value: 6.027456183070403
                    string_value: "string_value"
                    null_value: {}
                    bool_value: true
              blob:
                dimensionality: {}
                format: "format"
              simple: {}
      inputs:
        variables:
          key:
            description: "description"
            type:
              schema:
                columns:
                - name: "name"
                  type: {}
                - name: "name"
                  type: {}
              metadata:
                fields:
                  key:
                    list_value:
                      values:
                      - null
                      - null
                    number_value: 6.027456183070403
                    string_value: "string_value"
                    null_value: {}
                    bool_value: true
              blob:
                dimensionality: {}
                format: "format"
              simple: {}
  coreVariable:
    type: "object"
    properties:
      type:
        description: "Variable literal type."
        $ref: "#/definitions/coreLiteralType"
      description:
        type: "string"
        title: "+optional string describing input variable"
    description: "Defines a strongly typed variable."
    example:
      description: "description"
      type:
        schema:
          columns:
          - name: "name"
            type: {}
          - name: "name"
            type: {}
        metadata:
          fields:
            key:
              list_value:
                values:
                - null
                - null
              number_value: 6.027456183070403
              string_value: "string_value"
              null_value: {}
              bool_value: true
        blob:
          dimensionality: {}
          format: "format"
        simple: {}
  coreVariableMap:
    type: "object"
    properties:
      variables:
        type: "object"
        description: "Defines a map of variable names to variables."
        additionalProperties:
          $ref: "#/definitions/coreVariable"
    title: "A map of Variables"
    example:
      variables:
        key:
          description: "description"
          type:
            schema:
              columns:
              - name: "name"
                type: {}
              - name: "name"
                type: {}
            metadata:
              fields:
                key:
                  list_value:
                    values:
                    - null
                    - null
                  number_value: 6.027456183070403
                  string_value: "string_value"
                  null_value: {}
                  bool_value: true
            blob:
              dimensionality: {}
              format: "format"
            simple: {}
  coreVoid:
    type: "object"
    description: "Used to denote a nil/null/None assignment to a scalar value. The\
      \ underlying LiteralType for Void is intentionally\nundefined since it can be\
      \ assigned to a scalar of any LiteralType."
  coreWorkflowExecutionIdentifier:
    type: "object"
    properties:
      project:
        type: "string"
        description: "Name of the project the resource belongs to."
      domain:
        type: "string"
        description: "Name of the domain the resource belongs to.\nA domain can be\
          \ considered as a subset within a specific project."
      name:
        type: "string"
        description: "User or system provided value for the resource."
    title: "Encapsulation of fields that uniquely identifies a Flyte workflow execution"
    example:
      domain: "domain"
      name: "name"
      project: "project"
  coreWorkflowExecutionPhase:
    type: "string"
    enum:
    - "UNDEFINED"
    - "QUEUED"
    - "RUNNING"
    - "SUCCEEDING"
    - "SUCCEEDED"
    - "FAILING"
    - "FAILED"
    - "ABORTED"
    - "TIMED_OUT"
    default: "UNDEFINED"
  coreWorkflowMetadata:
    type: "object"
    properties:
      queuing_budget:
        type: "string"
        description: "Total wait time a workflow can be delayed by queueing."
    description: "Metadata for the entire workflow.\nTo be used in the future."
    example:
      queuing_budget: "queuing_budget"
  coreWorkflowMetadataDefaults:
    type: "object"
    properties:
      interruptible:
        type: "boolean"
        format: "boolean"
        description: "Identify whether workflow is interruptible.\nThe value set at\
          \ the workflow level will be the defualt value used for nodes\nunless explicitly\
          \ set at the node level."
    description: "Default Workflow Metadata for the entire workflow."
    example:
      interruptible: true
  coreWorkflowNode:
    type: "object"
    properties:
      launchplan_ref:
        description: "A globally unique identifier for the launch plan."
        $ref: "#/definitions/coreIdentifier"
      sub_workflow_ref:
        title: "Reference to a subworkflow, that should be defined with the compiler\
          \ context"
        $ref: "#/definitions/coreIdentifier"
    description: "Refers to a the workflow the node is to execute."
    example:
      launchplan_ref:
        domain: "domain"
        resource_type: {}
        name: "name"
        project: "project"
        version: "version"
      sub_workflow_ref:
        domain: "domain"
        resource_type: {}
        name: "name"
        project: "project"
        version: "version"
  coreWorkflowTemplate:
    type: "object"
    properties:
      id:
        description: "A globally unique identifier for the workflow."
        $ref: "#/definitions/coreIdentifier"
      metadata:
        description: "Extra metadata about the workflow."
        $ref: "#/definitions/coreWorkflowMetadata"
      interface:
        description: "Defines a strongly typed interface for the Workflow. This can\
          \ include some optional parameters."
        $ref: "#/definitions/coreTypedInterface"
      nodes:
        type: "array"
        description: "A list of nodes. In addition, \"globals\" is a special reserved\
          \ node id that can be used to consume workflow inputs."
        items:
          $ref: "#/definitions/coreNode"
      outputs:
        type: "array"
        description: "A list of output bindings that specify how to construct workflow\
          \ outputs. Bindings can pull node outputs or\nspecify literals. All workflow\
          \ outputs specified in the interface field must be bound in order for the\
          \ workflow\nto be validated. A workflow has an implicit dependency on all\
          \ of its nodes to execute successfully in order to\nbind final outputs.\n\
          Most of these outputs will be Binding's with a BindingData of type OutputReference.\
          \  That is, your workflow can\njust have an output of some constant (`Output(5)`),\
          \ but usually, the workflow will be pulling\noutputs from the output of\
          \ a task."
        items:
          $ref: "#/definitions/coreBinding"
      failure_node:
        description: "+optional A catch-all node. This node is executed whenever the\
          \ execution engine determines the workflow has failed.\nThe interface of\
          \ this node must match the Workflow interface with an additional input named\
          \ \"error\" of type\npb.lyft.flyte.core.Error."
        $ref: "#/definitions/coreNode"
      metadata_defaults:
        title: "workflow defaults"
        $ref: "#/definitions/coreWorkflowMetadataDefaults"
    description: "Flyte Workflow Structure that encapsulates task, branch and subworkflow\
      \ nodes to form a statically analyzable,\ndirected acyclic graph."
    example:
      outputs:
      - var: "var"
        binding:
          scalar:
            schema:
              type:
                columns:
                - name: "name"
                  type: {}
                - name: "name"
                  type: {}
              uri: "uri"
            blob:
              metadata:
                type:
                  dimensionality: {}
                  format: "format"
              uri: "uri"
            none_type: {}
            primitive:
              duration: "duration"
              datetime: "2000-01-23T04:56:07.000+00:00"
              string_value: "string_value"
              boolean: true
              float_value: 1.4658129805029452
              integer: "integer"
            binary:
              tag: "tag"
              value: "value"
            error:
              message: "message"
              failed_node_id: "failed_node_id"
            generic:
              fields:
                key:
                  list_value:
                    values:
                    - null
                    - null
                  number_value: 6.027456183070403
                  string_value: "string_value"
                  null_value: {}
                  bool_value: true
          promise:
            var: "var"
            node_id: "node_id"
          collection:
            bindings:
            - null
            - null
          map:
            bindings: {}
      - var: "var"
        binding:
          scalar:
            schema:
              type:
                columns:
                - name: "name"
                  type: {}
                - name: "name"
                  type: {}
              uri: "uri"
            blob:
              metadata:
                type:
                  dimensionality: {}
                  format: "format"
              uri: "uri"
            none_type: {}
            primitive:
              duration: "duration"
              datetime: "2000-01-23T04:56:07.000+00:00"
              string_value: "string_value"
              boolean: true
              float_value: 1.4658129805029452
              integer: "integer"
            binary:
              tag: "tag"
              value: "value"
            error:
              message: "message"
              failed_node_id: "failed_node_id"
            generic:
              fields:
                key:
                  list_value:
                    values:
                    - null
                    - null
                  number_value: 6.027456183070403
                  string_value: "string_value"
                  null_value: {}
                  bool_value: true
          promise:
            var: "var"
            node_id: "node_id"
          collection:
            bindings:
            - null
            - null
          map:
            bindings: {}
      metadata:
        queuing_budget: "queuing_budget"
      failure_node:
        branch_node:
          if_else:
            other:
            - condition:
                conjunction:
                  operator: {}
                comparison:
                  left_value:
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    var: "var"
                  right_value:
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    var: "var"
                  operator: {}
            - condition:
                conjunction:
                  operator: {}
                comparison:
                  left_value:
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    var: "var"
                  right_value:
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    var: "var"
                  operator: {}
            error:
              message: "message"
              failed_node_id: "failed_node_id"
            case:
              condition:
                conjunction:
                  operator: {}
                comparison:
                  left_value:
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    var: "var"
                  right_value:
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    var: "var"
                  operator: {}
        metadata:
          retries:
            retries: 0
          name: "name"
          interruptible: true
          timeout: "timeout"
        upstream_node_ids:
        - "upstream_node_ids"
        - "upstream_node_ids"
        inputs:
        - var: "var"
          binding:
            scalar:
              schema:
                type:
                  columns:
                  - name: "name"
                    type: {}
                  - name: "name"
                    type: {}
                uri: "uri"
              blob:
                metadata:
                  type:
                    dimensionality: {}
                    format: "format"
                uri: "uri"
              none_type: {}
              primitive:
                duration: "duration"
                datetime: "2000-01-23T04:56:07.000+00:00"
                string_value: "string_value"
                boolean: true
                float_value: 1.4658129805029452
                integer: "integer"
              binary:
                tag: "tag"
                value: "value"
              error:
                message: "message"
                failed_node_id: "failed_node_id"
              generic:
                fields:
                  key:
                    list_value:
                      values:
                      - null
                      - null
                    number_value: 6.027456183070403
                    string_value: "string_value"
                    null_value: {}
                    bool_value: true
            promise:
              var: "var"
              node_id: "node_id"
            collection:
              bindings:
              - null
              - null
            map:
              bindings: {}
        - var: "var"
          binding:
            scalar:
              schema:
                type:
                  columns:
                  - name: "name"
                    type: {}
                  - name: "name"
                    type: {}
                uri: "uri"
              blob:
                metadata:
                  type:
                    dimensionality: {}
                    format: "format"
                uri: "uri"
              none_type: {}
              primitive:
                duration: "duration"
                datetime: "2000-01-23T04:56:07.000+00:00"
                string_value: "string_value"
                boolean: true
                float_value: 1.4658129805029452
                integer: "integer"
              binary:
                tag: "tag"
                value: "value"
              error:
                message: "message"
                failed_node_id: "failed_node_id"
              generic:
                fields:
                  key:
                    list_value:
                      values:
                      - null
                      - null
                    number_value: 6.027456183070403
                    string_value: "string_value"
                    null_value: {}
                    bool_value: true
            promise:
              var: "var"
              node_id: "node_id"
            collection:
              bindings:
              - null
              - null
            map:
              bindings: {}
        output_aliases:
        - var: "var"
          alias: "alias"
        - var: "var"
          alias: "alias"
        task_node:
          reference_id:
            domain: "domain"
            resource_type: {}
            name: "name"
            project: "project"
            version: "version"
        id: "id"
        workflow_node:
          launchplan_ref:
            domain: "domain"
            resource_type: {}
            name: "name"
            project: "project"
            version: "version"
          sub_workflow_ref:
            domain: "domain"
            resource_type: {}
            name: "name"
            project: "project"
            version: "version"
      nodes:
      - branch_node:
          if_else:
            other:
            - condition:
                conjunction:
                  operator: {}
                comparison:
                  left_value:
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    var: "var"
                  right_value:
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    var: "var"
                  operator: {}
            - condition:
                conjunction:
                  operator: {}
                comparison:
                  left_value:
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    var: "var"
                  right_value:
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    var: "var"
                  operator: {}
            error:
              message: "message"
              failed_node_id: "failed_node_id"
            case:
              condition:
                conjunction:
                  operator: {}
                comparison:
                  left_value:
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    var: "var"
                  right_value:
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    var: "var"
                  operator: {}
        metadata:
          retries:
            retries: 0
          name: "name"
          interruptible: true
          timeout: "timeout"
        upstream_node_ids:
        - "upstream_node_ids"
        - "upstream_node_ids"
        inputs:
        - var: "var"
          binding:
            scalar:
              schema:
                type:
                  columns:
                  - name: "name"
                    type: {}
                  - name: "name"
                    type: {}
                uri: "uri"
              blob:
                metadata:
                  type:
                    dimensionality: {}
                    format: "format"
                uri: "uri"
              none_type: {}
              primitive:
                duration: "duration"
                datetime: "2000-01-23T04:56:07.000+00:00"
                string_value: "string_value"
                boolean: true
                float_value: 1.4658129805029452
                integer: "integer"
              binary:
                tag: "tag"
                value: "value"
              error:
                message: "message"
                failed_node_id: "failed_node_id"
              generic:
                fields:
                  key:
                    list_value:
                      values:
                      - null
                      - null
                    number_value: 6.027456183070403
                    string_value: "string_value"
                    null_value: {}
                    bool_value: true
            promise:
              var: "var"
              node_id: "node_id"
            collection:
              bindings:
              - null
              - null
            map:
              bindings: {}
        - var: "var"
          binding:
            scalar:
              schema:
                type:
                  columns:
                  - name: "name"
                    type: {}
                  - name: "name"
                    type: {}
                uri: "uri"
              blob:
                metadata:
                  type:
                    dimensionality: {}
                    format: "format"
                uri: "uri"
              none_type: {}
              primitive:
                duration: "duration"
                datetime: "2000-01-23T04:56:07.000+00:00"
                string_value: "string_value"
                boolean: true
                float_value: 1.4658129805029452
                integer: "integer"
              binary:
                tag: "tag"
                value: "value"
              error:
                message: "message"
                failed_node_id: "failed_node_id"
              generic:
                fields:
                  key:
                    list_value:
                      values:
                      - null
                      - null
                    number_value: 6.027456183070403
                    string_value: "string_value"
                    null_value: {}
                    bool_value: true
            promise:
              var: "var"
              node_id: "node_id"
            collection:
              bindings:
              - null
              - null
            map:
              bindings: {}
        output_aliases:
        - var: "var"
          alias: "alias"
        - var: "var"
          alias: "alias"
        task_node:
          reference_id:
            domain: "domain"
            resource_type: {}
            name: "name"
            project: "project"
            version: "version"
        id: "id"
        workflow_node:
          launchplan_ref:
            domain: "domain"
            resource_type: {}
            name: "name"
            project: "project"
            version: "version"
          sub_workflow_ref:
            domain: "domain"
            resource_type: {}
            name: "name"
            project: "project"
            version: "version"
      - branch_node:
          if_else:
            other:
            - condition:
                conjunction:
                  operator: {}
                comparison:
                  left_value:
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    var: "var"
                  right_value:
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    var: "var"
                  operator: {}
            - condition:
                conjunction:
                  operator: {}
                comparison:
                  left_value:
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    var: "var"
                  right_value:
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    var: "var"
                  operator: {}
            error:
              message: "message"
              failed_node_id: "failed_node_id"
            case:
              condition:
                conjunction:
                  operator: {}
                comparison:
                  left_value:
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    var: "var"
                  right_value:
                    primitive:
                      duration: "duration"
                      datetime: "2000-01-23T04:56:07.000+00:00"
                      string_value: "string_value"
                      boolean: true
                      float_value: 1.4658129805029452
                      integer: "integer"
                    var: "var"
                  operator: {}
        metadata:
          retries:
            retries: 0
          name: "name"
          interruptible: true
          timeout: "timeout"
        upstream_node_ids:
        - "upstream_node_ids"
        - "upstream_node_ids"
        inputs:
        - var: "var"
          binding:
            scalar:
              schema:
                type:
                  columns:
                  - name: "name"
                    type: {}
                  - name: "name"
                    type: {}
                uri: "uri"
              blob:
                metadata:
                  type:
                    dimensionality: {}
                    format: "format"
                uri: "uri"
              none_type: {}
              primitive:
                duration: "duration"
                datetime: "2000-01-23T04:56:07.000+00:00"
                string_value: "string_value"
                boolean: true
                float_value: 1.4658129805029452
                integer: "integer"
              binary:
                tag: "tag"
                value: "value"
              error:
                message: "message"
                failed_node_id: "failed_node_id"
              generic:
                fields:
                  key:
                    list_value:
                      values:
                      - null
                      - null
                    number_value: 6.027456183070403
                    string_value: "string_value"
                    null_value: {}
                    bool_value: true
            promise:
              var: "var"
              node_id: "node_id"
            collection:
              bindings:
              - null
              - null
            map:
              bindings: {}
        - var: "var"
          binding:
            scalar:
              schema:
                type:
                  columns:
                  - name: "name"
                    type: {}
                  - name: "name"
                    type: {}
                uri: "uri"
              blob:
                metadata:
                  type:
                    dimensionality: {}
                    format: "format"
                uri: "uri"
              none_type: {}
              primitive:
                duration: "duration"
                datetime: "2000-01-23T04:56:07.000+00:00"
                string_value: "string_value"
                boolean: true
                float_value: 1.4658129805029452
                integer: "integer"
              binary:
                tag: "tag"
                value: "value"
              error:
                message: "message"
                failed_node_id: "failed_node_id"
              generic:
                fields:
                  key:
                    list_value:
                      values:
                      - null
                      - null
                    number_value: 6.027456183070403
                    string_value: "string_value"
                    null_value: {}
                    bool_value: true
            promise:
              var: "var"
              node_id: "node_id"
            collection:
              bindings:
              - null
              - null
            map:
              bindings: {}
        output_aliases:
        - var: "var"
          alias: "alias"
        - var: "var"
          alias: "alias"
        task_node:
          reference_id:
            domain: "domain"
            resource_type: {}
            name: "name"
            project: "project"
            version: "version"
        id: "id"
        workflow_node:
          launchplan_ref:
            domain: "domain"
            resource_type: {}
            name: "name"
            project: "project"
            version: "version"
          sub_workflow_ref:
            domain: "domain"
            resource_type: {}
            name: "name"
            project: "project"
            version: "version"
      metadata_defaults:
        interruptible: true
      id:
        domain: "domain"
        resource_type: {}
        name: "name"
        project: "project"
        version: "version"
      interface:
        outputs:
          variables:
            key:
              description: "description"
              type:
                schema:
                  columns:
                  - name: "name"
                    type: {}
                  - name: "name"
                    type: {}
                metadata:
                  fields:
                    key:
                      list_value:
                        values:
                        - null
                        - null
                      number_value: 6.027456183070403
                      string_value: "string_value"
                      null_value: {}
                      bool_value: true
                blob:
                  dimensionality: {}
                  format: "format"
                simple: {}
        inputs:
          variables:
            key:
              description: "description"
              type:
                schema:
                  columns:
                  - name: "name"
                    type: {}
                  - name: "name"
                    type: {}
                metadata:
                  fields:
                    key:
                      list_value:
                        values:
                        - null
                        - null
                      number_value: 6.027456183070403
                      string_value: "string_value"
                      null_value: {}
                      bool_value: true
                blob:
                  dimensionality: {}
                  format: "format"
                simple: {}
  eventNodeExecutionEvent:
    type: "object"
    properties:
      id:
        title: "Unique identifier for this node execution"
        $ref: "#/definitions/coreNodeExecutionIdentifier"
      producer_id:
        type: "string"
        title: "the id of the originator (Propeller) of the event"
      phase:
        $ref: "#/definitions/coreNodeExecutionPhase"
      occurred_at:
        type: "string"
        format: "date-time"
        description: "This timestamp represents when the original event occurred,\
          \ it is generated\nby the executor of the node."
      input_uri:
        type: "string"
      output_uri:
        type: "string"
        description: "URL to the output of the execution, it encodes all the information\n\
          including Cloud source provider. ie., s3://..."
      error:
        title: "Error information for the execution"
        $ref: "#/definitions/coreExecutionError"
      workflow_node_metadata:
        $ref: "#/definitions/flyteidleventWorkflowNodeMetadata"
      parent_task_metadata:
        description: "Specifies which task (if any) launched this node."
        $ref: "#/definitions/eventParentTaskExecutionMetadata"
  eventParentTaskExecutionMetadata:
    type: "object"
    properties:
      id:
        $ref: "#/definitions/coreTaskExecutionIdentifier"
  eventTaskExecutionEvent:
    type: "object"
    properties:
      task_id:
        description: "ID of the task. In combination with the retryAttempt this will\
          \ indicate\nthe task execution uniquely for a given parent node execution."
        $ref: "#/definitions/coreIdentifier"
      parent_node_execution_id:
        title: "A task execution is always kicked off by a node execution, the event\
          \ consumer\nwill use the parent_id to relate the task to it's parent node\
          \ execution"
        $ref: "#/definitions/coreNodeExecutionIdentifier"
      retry_attempt:
        type: "integer"
        format: "int64"
        title: "retry attempt number for this task, ie., 2 for the second attempt"
      phase:
        title: "Phase associated with the event"
        $ref: "#/definitions/coreTaskExecutionPhase"
      producer_id:
        type: "string"
        title: "id of the process that sent this event, mainly for trace debugging"
      logs:
        type: "array"
        title: "log information for the task execution"
        items:
          $ref: "#/definitions/coreTaskLog"
      occurred_at:
        type: "string"
        format: "date-time"
        description: "This timestamp represents when the original event occurred,\
          \ it is generated\nby the executor of the task."
      input_uri:
        type: "string"
        description: "URI of the input file, it encodes all the information\nincluding\
          \ Cloud source provider. ie., s3://..."
      output_uri:
        type: "string"
        description: "URI to the output of the execution, it will be in a format that\
          \ encodes all the information\nincluding Cloud source provider. ie., s3://..."
      error:
        title: "Error information for the execution"
        $ref: "#/definitions/coreExecutionError"
      custom_info:
        description: "Custom data that the task plugin sends back. This is extensible\
          \ to allow various plugins in the system."
        $ref: "#/definitions/protobufStruct"
      phase_version:
        type: "integer"
        format: "int64"
        description: "Some phases, like RUNNING, can send multiple events with changed\
          \ metadata (new logs, additional custom_info, etc)\nthat should be recorded\
          \ regardless of the lack of phase change.\nThe version field should be incremented\
          \ when metadata changes across the duration of an individual phase."
    description: "Plugin specific execution event information. For tasks like Python,\
      \ Hive, Spark, DynamicJob."
  eventWorkflowExecutionEvent:
    type: "object"
    properties:
      execution_id:
        title: "Workflow execution id"
        $ref: "#/definitions/coreWorkflowExecutionIdentifier"
      producer_id:
        type: "string"
        title: "the id of the originator (Propeller) of the event"
      phase:
        $ref: "#/definitions/coreWorkflowExecutionPhase"
      occurred_at:
        type: "string"
        format: "date-time"
        description: "This timestamp represents when the original event occurred,\
          \ it is generated\nby the executor of the workflow."
      output_uri:
        type: "string"
        description: "URL to the output of the execution, it encodes all the information\n\
          including Cloud source provider. ie., s3://..."
      error:
        title: "Error information for the execution"
        $ref: "#/definitions/coreExecutionError"
  flyteidladminNodeExecution:
    type: "object"
    properties:
      id:
        description: "Uniquely identifies an individual node execution."
        $ref: "#/definitions/coreNodeExecutionIdentifier"
      input_uri:
        type: "string"
        description: "Path to remote data store where input blob is stored."
      closure:
        description: "Computed results associated with this node execution."
        $ref: "#/definitions/adminNodeExecutionClosure"
      metadata:
        title: "Metadata for Node Execution"
        $ref: "#/definitions/adminNodeExecutionMetaData"
    description: "Encapsulates all details for a single node execution entity.\nA\
      \ node represents a component in the overall workflow graph. A node launch a\
      \ task, multiple tasks, an entire nested\nsub-workflow, or even a separate child-workflow\
      \ execution.\nThe same task can be called repeatedly in a single workflow but\
      \ each node is unique."
    example:
      metadata: {}
      input_uri: "input_uri"
      id:
        execution_id:
          domain: "domain"
          name: "name"
          project: "project"
        node_id: "node_id"
      closure:
        phase: {}
        duration: "duration"
        workflow_node_metadata:
          executionId:
            domain: "domain"
            name: "name"
            project: "project"
        updated_at: "2000-01-23T04:56:07.000+00:00"
        output_uri: "output_uri"
        started_at: "2000-01-23T04:56:07.000+00:00"
        created_at: "2000-01-23T04:56:07.000+00:00"
        error:
          code: "code"
          kind: {}
          message: "message"
          error_uri: "error_uri"
  flyteidladminTaskExecution:
    type: "object"
    properties:
      id:
        description: "Unique identifier for the task execution."
        $ref: "#/definitions/coreTaskExecutionIdentifier"
      input_uri:
        type: "string"
        description: "Path to remote data store where input blob is stored."
      closure:
        description: "Task execution details and results."
        $ref: "#/definitions/adminTaskExecutionClosure"
      is_parent:
        type: "boolean"
        format: "boolean"
        description: "Whether this task spawned nodes."
    description: "Encapsulates all details for a single task execution entity.\nA\
      \ task execution represents an instantiated task, including all inputs and additional\n\
      metadata as well as computed results included state, outputs, and duration-based\
      \ attributes."
    example:
      input_uri: "input_uri"
      id:
        task_id:
          domain: "domain"
          resource_type: {}
          name: "name"
          project: "project"
          version: "version"
        node_execution_id:
          execution_id:
            domain: "domain"
            name: "name"
            project: "project"
          node_id: "node_id"
        retry_attempt: 0
      is_parent: true
      closure:
        phase: {}
        duration: "duration"
        updated_at: "2000-01-23T04:56:07.000+00:00"
        custom_info:
          fields:
            key:
              list_value:
                values:
                - null
                - null
              number_value: 6.027456183070403
              string_value: "string_value"
              null_value: {}
              bool_value: true
        output_uri: "output_uri"
        started_at: "2000-01-23T04:56:07.000+00:00"
        created_at: "2000-01-23T04:56:07.000+00:00"
        error:
          code: "code"
          kind: {}
          message: "message"
          error_uri: "error_uri"
        logs:
        - message_format: {}
          name: "name"
          uri: "uri"
          ttl: "ttl"
        - message_format: {}
          name: "name"
          uri: "uri"
          ttl: "ttl"
  flyteidladminWorkflowNodeMetadata:
    type: "object"
    properties:
      executionId:
        $ref: "#/definitions/coreWorkflowExecutionIdentifier"
    title: "Metadata for a WorkflowNode"
    example:
      executionId:
        domain: "domain"
        name: "name"
        project: "project"
  flyteidlcoreSchema:
    type: "object"
    properties:
      uri:
        type: "string"
      type:
        $ref: "#/definitions/coreSchemaType"
    description: "A strongly typed schema that defines the interface of data retrieved\
      \ from the underlying storage medium."
    example:
      type:
        columns:
        - name: "name"
          type: {}
        - name: "name"
          type: {}
      uri: "uri"
  flyteidleventWorkflowNodeMetadata:
    type: "object"
    properties:
      execution_id:
        $ref: "#/definitions/coreWorkflowExecutionIdentifier"
    title: "For Workflow Nodes we need to send information about the workflow that's\
      \ launched"
  protobufListValue:
    type: "object"
    properties:
      values:
        type: "array"
        description: "Repeated field of dynamically typed values."
        items:
          $ref: "#/definitions/protobufValue"
    description: "`ListValue` is a wrapper around a repeated field of values.\n\n\
      The JSON representation for `ListValue` is JSON array."
    example:
      values:
      - null
      - null
  protobufNullValue:
    type: "string"
    description: "`NullValue` is a singleton enumeration to represent the null value\
      \ for the\n`Value` type union.\n\n The JSON representation for `NullValue` is\
      \ JSON `null`.\n\n - NULL_VALUE: Null value."
    enum:
    - "NULL_VALUE"
    default: "NULL_VALUE"
  protobufStruct:
    type: "object"
    properties:
      fields:
        type: "object"
        description: "Unordered map of dynamically typed values."
        additionalProperties:
          $ref: "#/definitions/protobufValue"
    description: "`Struct` represents a structured data value, consisting of fields\n\
      which map to dynamically typed values. In some languages, `Struct`\nmight be\
      \ supported by a native representation. For example, in\nscripting languages\
      \ like JS a struct is represented as an\nobject. The details of that representation\
      \ are described together\nwith the proto support for the language.\n\nThe JSON\
      \ representation for `Struct` is JSON object."
    example:
      fields:
        key:
          list_value:
            values:
            - null
            - null
          number_value: 6.027456183070403
          string_value: "string_value"
          null_value: {}
          bool_value: true
  protobufValue:
    type: "object"
    properties:
      null_value:
        description: "Represents a null value."
        $ref: "#/definitions/protobufNullValue"
      number_value:
        type: "number"
        format: "double"
        description: "Represents a double value."
      string_value:
        type: "string"
        description: "Represents a string value."
      bool_value:
        type: "boolean"
        format: "boolean"
        description: "Represents a boolean value."
      struct_value:
        description: "Represents a structured value."
        $ref: "#/definitions/protobufStruct"
      list_value:
        description: "Represents a repeated `Value`."
        $ref: "#/definitions/protobufListValue"
    description: "`Value` represents a dynamically typed value which can be either\n\
      null, a number, a string, a boolean, a recursive struct value, or a\nlist of\
      \ values. A producer of value is expected to set one of that\nvariants, absence\
      \ of any variant indicates an error.\n\nThe JSON representation for `Value`\
      \ is JSON value."
    example:
      list_value:
        values:
        - null
        - null
      number_value: 6.027456183070403
      string_value: "string_value"
      null_value: {}
      bool_value: true
