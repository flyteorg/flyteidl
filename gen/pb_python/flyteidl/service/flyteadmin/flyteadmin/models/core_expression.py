# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyteadmin.models.core_parameter import CoreParameter  # noqa: F401,E501


class CoreExpression(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lhs': 'CoreParameter',
        'rhs': 'CoreParameter',
        'plus': 'str',
        'minus': 'str'
    }

    attribute_map = {
        'lhs': 'lhs',
        'rhs': 'rhs',
        'plus': 'plus',
        'minus': 'minus'
    }

    def __init__(self, lhs=None, rhs=None, plus=None, minus=None):  # noqa: E501
        """CoreExpression - a model defined in Swagger"""  # noqa: E501

        self._lhs = None
        self._rhs = None
        self._plus = None
        self._minus = None
        self.discriminator = None

        if lhs is not None:
            self.lhs = lhs
        if rhs is not None:
            self.rhs = rhs
        if plus is not None:
            self.plus = plus
        if minus is not None:
            self.minus = minus

    @property
    def lhs(self):
        """Gets the lhs of this CoreExpression.  # noqa: E501


        :return: The lhs of this CoreExpression.  # noqa: E501
        :rtype: CoreParameter
        """
        return self._lhs

    @lhs.setter
    def lhs(self, lhs):
        """Sets the lhs of this CoreExpression.


        :param lhs: The lhs of this CoreExpression.  # noqa: E501
        :type: CoreParameter
        """

        self._lhs = lhs

    @property
    def rhs(self):
        """Gets the rhs of this CoreExpression.  # noqa: E501


        :return: The rhs of this CoreExpression.  # noqa: E501
        :rtype: CoreParameter
        """
        return self._rhs

    @rhs.setter
    def rhs(self, rhs):
        """Sets the rhs of this CoreExpression.


        :param rhs: The rhs of this CoreExpression.  # noqa: E501
        :type: CoreParameter
        """

        self._rhs = rhs

    @property
    def plus(self):
        """Gets the plus of this CoreExpression.  # noqa: E501


        :return: The plus of this CoreExpression.  # noqa: E501
        :rtype: str
        """
        return self._plus

    @plus.setter
    def plus(self, plus):
        """Sets the plus of this CoreExpression.


        :param plus: The plus of this CoreExpression.  # noqa: E501
        :type: str
        """

        self._plus = plus

    @property
    def minus(self):
        """Gets the minus of this CoreExpression.  # noqa: E501


        :return: The minus of this CoreExpression.  # noqa: E501
        :rtype: str
        """
        return self._minus

    @minus.setter
    def minus(self, minus):
        """Sets the minus of this CoreExpression.


        :param minus: The minus of this CoreExpression.  # noqa: E501
        :type: str
        """

        self._minus = minus

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoreExpression, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreExpression):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
