// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/launch_plan.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fadmin_2flaunch_5fplan_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fadmin_2flaunch_5fplan_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/execution.pb.h"
#include "flyteidl/core/literals.pb.h"
#include "flyteidl/core/identifier.pb.h"
#include "flyteidl/core/interface.pb.h"
#include "flyteidl/core/security.pb.h"
#include "flyteidl/admin/schedule.pb.h"
#include "flyteidl/admin/common.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2flaunch_5fplan_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fadmin_2flaunch_5fplan_2eproto();
namespace flyteidl {
namespace admin {
class ActiveLaunchPlanListRequest;
class ActiveLaunchPlanListRequestDefaultTypeInternal;
extern ActiveLaunchPlanListRequestDefaultTypeInternal _ActiveLaunchPlanListRequest_default_instance_;
class ActiveLaunchPlanRequest;
class ActiveLaunchPlanRequestDefaultTypeInternal;
extern ActiveLaunchPlanRequestDefaultTypeInternal _ActiveLaunchPlanRequest_default_instance_;
class Auth;
class AuthDefaultTypeInternal;
extern AuthDefaultTypeInternal _Auth_default_instance_;
class LaunchPlan;
class LaunchPlanDefaultTypeInternal;
extern LaunchPlanDefaultTypeInternal _LaunchPlan_default_instance_;
class LaunchPlanClosure;
class LaunchPlanClosureDefaultTypeInternal;
extern LaunchPlanClosureDefaultTypeInternal _LaunchPlanClosure_default_instance_;
class LaunchPlanCreateRequest;
class LaunchPlanCreateRequestDefaultTypeInternal;
extern LaunchPlanCreateRequestDefaultTypeInternal _LaunchPlanCreateRequest_default_instance_;
class LaunchPlanCreateResponse;
class LaunchPlanCreateResponseDefaultTypeInternal;
extern LaunchPlanCreateResponseDefaultTypeInternal _LaunchPlanCreateResponse_default_instance_;
class LaunchPlanList;
class LaunchPlanListDefaultTypeInternal;
extern LaunchPlanListDefaultTypeInternal _LaunchPlanList_default_instance_;
class LaunchPlanMetadata;
class LaunchPlanMetadataDefaultTypeInternal;
extern LaunchPlanMetadataDefaultTypeInternal _LaunchPlanMetadata_default_instance_;
class LaunchPlanSpec;
class LaunchPlanSpecDefaultTypeInternal;
extern LaunchPlanSpecDefaultTypeInternal _LaunchPlanSpec_default_instance_;
class LaunchPlanUpdateRequest;
class LaunchPlanUpdateRequestDefaultTypeInternal;
extern LaunchPlanUpdateRequestDefaultTypeInternal _LaunchPlanUpdateRequest_default_instance_;
class LaunchPlanUpdateResponse;
class LaunchPlanUpdateResponseDefaultTypeInternal;
extern LaunchPlanUpdateResponseDefaultTypeInternal _LaunchPlanUpdateResponse_default_instance_;
}  // namespace admin
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::admin::ActiveLaunchPlanListRequest* Arena::CreateMaybeMessage<::flyteidl::admin::ActiveLaunchPlanListRequest>(Arena*);
template<> ::flyteidl::admin::ActiveLaunchPlanRequest* Arena::CreateMaybeMessage<::flyteidl::admin::ActiveLaunchPlanRequest>(Arena*);
template<> ::flyteidl::admin::Auth* Arena::CreateMaybeMessage<::flyteidl::admin::Auth>(Arena*);
template<> ::flyteidl::admin::LaunchPlan* Arena::CreateMaybeMessage<::flyteidl::admin::LaunchPlan>(Arena*);
template<> ::flyteidl::admin::LaunchPlanClosure* Arena::CreateMaybeMessage<::flyteidl::admin::LaunchPlanClosure>(Arena*);
template<> ::flyteidl::admin::LaunchPlanCreateRequest* Arena::CreateMaybeMessage<::flyteidl::admin::LaunchPlanCreateRequest>(Arena*);
template<> ::flyteidl::admin::LaunchPlanCreateResponse* Arena::CreateMaybeMessage<::flyteidl::admin::LaunchPlanCreateResponse>(Arena*);
template<> ::flyteidl::admin::LaunchPlanList* Arena::CreateMaybeMessage<::flyteidl::admin::LaunchPlanList>(Arena*);
template<> ::flyteidl::admin::LaunchPlanMetadata* Arena::CreateMaybeMessage<::flyteidl::admin::LaunchPlanMetadata>(Arena*);
template<> ::flyteidl::admin::LaunchPlanSpec* Arena::CreateMaybeMessage<::flyteidl::admin::LaunchPlanSpec>(Arena*);
template<> ::flyteidl::admin::LaunchPlanUpdateRequest* Arena::CreateMaybeMessage<::flyteidl::admin::LaunchPlanUpdateRequest>(Arena*);
template<> ::flyteidl::admin::LaunchPlanUpdateResponse* Arena::CreateMaybeMessage<::flyteidl::admin::LaunchPlanUpdateResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace admin {

enum LaunchPlanState {
  INACTIVE = 0,
  ACTIVE = 1,
  LaunchPlanState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  LaunchPlanState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool LaunchPlanState_IsValid(int value);
const LaunchPlanState LaunchPlanState_MIN = INACTIVE;
const LaunchPlanState LaunchPlanState_MAX = ACTIVE;
const int LaunchPlanState_ARRAYSIZE = LaunchPlanState_MAX + 1;

const ::google::protobuf::EnumDescriptor* LaunchPlanState_descriptor();
inline const ::std::string& LaunchPlanState_Name(LaunchPlanState value) {
  return ::google::protobuf::internal::NameOfEnum(
    LaunchPlanState_descriptor(), value);
}
inline bool LaunchPlanState_Parse(
    const ::std::string& name, LaunchPlanState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LaunchPlanState>(
    LaunchPlanState_descriptor(), name, value);
}
// ===================================================================

class LaunchPlanCreateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.LaunchPlanCreateRequest) */ {
 public:
  LaunchPlanCreateRequest();
  virtual ~LaunchPlanCreateRequest();

  LaunchPlanCreateRequest(const LaunchPlanCreateRequest& from);

  inline LaunchPlanCreateRequest& operator=(const LaunchPlanCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaunchPlanCreateRequest(LaunchPlanCreateRequest&& from) noexcept
    : LaunchPlanCreateRequest() {
    *this = ::std::move(from);
  }

  inline LaunchPlanCreateRequest& operator=(LaunchPlanCreateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LaunchPlanCreateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaunchPlanCreateRequest* internal_default_instance() {
    return reinterpret_cast<const LaunchPlanCreateRequest*>(
               &_LaunchPlanCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LaunchPlanCreateRequest* other);
  friend void swap(LaunchPlanCreateRequest& a, LaunchPlanCreateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaunchPlanCreateRequest* New() const final {
    return CreateMaybeMessage<LaunchPlanCreateRequest>(nullptr);
  }

  LaunchPlanCreateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaunchPlanCreateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaunchPlanCreateRequest& from);
  void MergeFrom(const LaunchPlanCreateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchPlanCreateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::Identifier& id() const;
  ::flyteidl::core::Identifier* release_id();
  ::flyteidl::core::Identifier* mutable_id();
  void set_allocated_id(::flyteidl::core::Identifier* id);

  // .flyteidl.admin.LaunchPlanSpec spec = 2;
  bool has_spec() const;
  void clear_spec();
  static const int kSpecFieldNumber = 2;
  const ::flyteidl::admin::LaunchPlanSpec& spec() const;
  ::flyteidl::admin::LaunchPlanSpec* release_spec();
  ::flyteidl::admin::LaunchPlanSpec* mutable_spec();
  void set_allocated_spec(::flyteidl::admin::LaunchPlanSpec* spec);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.LaunchPlanCreateRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::Identifier* id_;
  ::flyteidl::admin::LaunchPlanSpec* spec_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
};
// -------------------------------------------------------------------

class LaunchPlanCreateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.LaunchPlanCreateResponse) */ {
 public:
  LaunchPlanCreateResponse();
  virtual ~LaunchPlanCreateResponse();

  LaunchPlanCreateResponse(const LaunchPlanCreateResponse& from);

  inline LaunchPlanCreateResponse& operator=(const LaunchPlanCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaunchPlanCreateResponse(LaunchPlanCreateResponse&& from) noexcept
    : LaunchPlanCreateResponse() {
    *this = ::std::move(from);
  }

  inline LaunchPlanCreateResponse& operator=(LaunchPlanCreateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LaunchPlanCreateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaunchPlanCreateResponse* internal_default_instance() {
    return reinterpret_cast<const LaunchPlanCreateResponse*>(
               &_LaunchPlanCreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LaunchPlanCreateResponse* other);
  friend void swap(LaunchPlanCreateResponse& a, LaunchPlanCreateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaunchPlanCreateResponse* New() const final {
    return CreateMaybeMessage<LaunchPlanCreateResponse>(nullptr);
  }

  LaunchPlanCreateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaunchPlanCreateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaunchPlanCreateResponse& from);
  void MergeFrom(const LaunchPlanCreateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchPlanCreateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.LaunchPlanCreateResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
};
// -------------------------------------------------------------------

class LaunchPlan final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.LaunchPlan) */ {
 public:
  LaunchPlan();
  virtual ~LaunchPlan();

  LaunchPlan(const LaunchPlan& from);

  inline LaunchPlan& operator=(const LaunchPlan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaunchPlan(LaunchPlan&& from) noexcept
    : LaunchPlan() {
    *this = ::std::move(from);
  }

  inline LaunchPlan& operator=(LaunchPlan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LaunchPlan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaunchPlan* internal_default_instance() {
    return reinterpret_cast<const LaunchPlan*>(
               &_LaunchPlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LaunchPlan* other);
  friend void swap(LaunchPlan& a, LaunchPlan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaunchPlan* New() const final {
    return CreateMaybeMessage<LaunchPlan>(nullptr);
  }

  LaunchPlan* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaunchPlan>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaunchPlan& from);
  void MergeFrom(const LaunchPlan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchPlan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::Identifier& id() const;
  ::flyteidl::core::Identifier* release_id();
  ::flyteidl::core::Identifier* mutable_id();
  void set_allocated_id(::flyteidl::core::Identifier* id);

  // .flyteidl.admin.LaunchPlanSpec spec = 2;
  bool has_spec() const;
  void clear_spec();
  static const int kSpecFieldNumber = 2;
  const ::flyteidl::admin::LaunchPlanSpec& spec() const;
  ::flyteidl::admin::LaunchPlanSpec* release_spec();
  ::flyteidl::admin::LaunchPlanSpec* mutable_spec();
  void set_allocated_spec(::flyteidl::admin::LaunchPlanSpec* spec);

  // .flyteidl.admin.LaunchPlanClosure closure = 3;
  bool has_closure() const;
  void clear_closure();
  static const int kClosureFieldNumber = 3;
  const ::flyteidl::admin::LaunchPlanClosure& closure() const;
  ::flyteidl::admin::LaunchPlanClosure* release_closure();
  ::flyteidl::admin::LaunchPlanClosure* mutable_closure();
  void set_allocated_closure(::flyteidl::admin::LaunchPlanClosure* closure);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.LaunchPlan)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::Identifier* id_;
  ::flyteidl::admin::LaunchPlanSpec* spec_;
  ::flyteidl::admin::LaunchPlanClosure* closure_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
};
// -------------------------------------------------------------------

class LaunchPlanList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.LaunchPlanList) */ {
 public:
  LaunchPlanList();
  virtual ~LaunchPlanList();

  LaunchPlanList(const LaunchPlanList& from);

  inline LaunchPlanList& operator=(const LaunchPlanList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaunchPlanList(LaunchPlanList&& from) noexcept
    : LaunchPlanList() {
    *this = ::std::move(from);
  }

  inline LaunchPlanList& operator=(LaunchPlanList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LaunchPlanList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaunchPlanList* internal_default_instance() {
    return reinterpret_cast<const LaunchPlanList*>(
               &_LaunchPlanList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LaunchPlanList* other);
  friend void swap(LaunchPlanList& a, LaunchPlanList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaunchPlanList* New() const final {
    return CreateMaybeMessage<LaunchPlanList>(nullptr);
  }

  LaunchPlanList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaunchPlanList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaunchPlanList& from);
  void MergeFrom(const LaunchPlanList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchPlanList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.admin.LaunchPlan launch_plans = 1;
  int launch_plans_size() const;
  void clear_launch_plans();
  static const int kLaunchPlansFieldNumber = 1;
  ::flyteidl::admin::LaunchPlan* mutable_launch_plans(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::LaunchPlan >*
      mutable_launch_plans();
  const ::flyteidl::admin::LaunchPlan& launch_plans(int index) const;
  ::flyteidl::admin::LaunchPlan* add_launch_plans();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::LaunchPlan >&
      launch_plans() const;

  // string token = 2;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.LaunchPlanList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::LaunchPlan > launch_plans_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
};
// -------------------------------------------------------------------

class Auth final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Auth) */ {
 public:
  Auth();
  virtual ~Auth();

  Auth(const Auth& from);

  inline Auth& operator=(const Auth& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Auth(Auth&& from) noexcept
    : Auth() {
    *this = ::std::move(from);
  }

  inline Auth& operator=(Auth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Auth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Auth* internal_default_instance() {
    return reinterpret_cast<const Auth*>(
               &_Auth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Auth* other);
  friend void swap(Auth& a, Auth& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Auth* New() const final {
    return CreateMaybeMessage<Auth>(nullptr);
  }

  Auth* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Auth>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Auth& from);
  void MergeFrom(const Auth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Auth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string assumable_iam_role = 1;
  void clear_assumable_iam_role();
  static const int kAssumableIamRoleFieldNumber = 1;
  const ::std::string& assumable_iam_role() const;
  void set_assumable_iam_role(const ::std::string& value);
  #if LANG_CXX11
  void set_assumable_iam_role(::std::string&& value);
  #endif
  void set_assumable_iam_role(const char* value);
  void set_assumable_iam_role(const char* value, size_t size);
  ::std::string* mutable_assumable_iam_role();
  ::std::string* release_assumable_iam_role();
  void set_allocated_assumable_iam_role(::std::string* assumable_iam_role);

  // string kubernetes_service_account = 2;
  void clear_kubernetes_service_account();
  static const int kKubernetesServiceAccountFieldNumber = 2;
  const ::std::string& kubernetes_service_account() const;
  void set_kubernetes_service_account(const ::std::string& value);
  #if LANG_CXX11
  void set_kubernetes_service_account(::std::string&& value);
  #endif
  void set_kubernetes_service_account(const char* value);
  void set_kubernetes_service_account(const char* value, size_t size);
  ::std::string* mutable_kubernetes_service_account();
  ::std::string* release_kubernetes_service_account();
  void set_allocated_kubernetes_service_account(::std::string* kubernetes_service_account);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Auth)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr assumable_iam_role_;
  ::google::protobuf::internal::ArenaStringPtr kubernetes_service_account_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
};
// -------------------------------------------------------------------

class LaunchPlanSpec final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.LaunchPlanSpec) */ {
 public:
  LaunchPlanSpec();
  virtual ~LaunchPlanSpec();

  LaunchPlanSpec(const LaunchPlanSpec& from);

  inline LaunchPlanSpec& operator=(const LaunchPlanSpec& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaunchPlanSpec(LaunchPlanSpec&& from) noexcept
    : LaunchPlanSpec() {
    *this = ::std::move(from);
  }

  inline LaunchPlanSpec& operator=(LaunchPlanSpec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LaunchPlanSpec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaunchPlanSpec* internal_default_instance() {
    return reinterpret_cast<const LaunchPlanSpec*>(
               &_LaunchPlanSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(LaunchPlanSpec* other);
  friend void swap(LaunchPlanSpec& a, LaunchPlanSpec& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaunchPlanSpec* New() const final {
    return CreateMaybeMessage<LaunchPlanSpec>(nullptr);
  }

  LaunchPlanSpec* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaunchPlanSpec>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaunchPlanSpec& from);
  void MergeFrom(const LaunchPlanSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchPlanSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string role = 5 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_role();
  PROTOBUF_DEPRECATED static const int kRoleFieldNumber = 5;
  PROTOBUF_DEPRECATED const ::std::string& role() const;
  PROTOBUF_DEPRECATED void set_role(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_role(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_role(const char* value);
  PROTOBUF_DEPRECATED void set_role(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_role();
  PROTOBUF_DEPRECATED ::std::string* release_role();
  PROTOBUF_DEPRECATED void set_allocated_role(::std::string* role);

  // .flyteidl.core.Identifier workflow_id = 1;
  bool has_workflow_id() const;
  void clear_workflow_id();
  static const int kWorkflowIdFieldNumber = 1;
  const ::flyteidl::core::Identifier& workflow_id() const;
  ::flyteidl::core::Identifier* release_workflow_id();
  ::flyteidl::core::Identifier* mutable_workflow_id();
  void set_allocated_workflow_id(::flyteidl::core::Identifier* workflow_id);

  // .flyteidl.admin.LaunchPlanMetadata entity_metadata = 2;
  bool has_entity_metadata() const;
  void clear_entity_metadata();
  static const int kEntityMetadataFieldNumber = 2;
  const ::flyteidl::admin::LaunchPlanMetadata& entity_metadata() const;
  ::flyteidl::admin::LaunchPlanMetadata* release_entity_metadata();
  ::flyteidl::admin::LaunchPlanMetadata* mutable_entity_metadata();
  void set_allocated_entity_metadata(::flyteidl::admin::LaunchPlanMetadata* entity_metadata);

  // .flyteidl.core.ParameterMap default_inputs = 3;
  bool has_default_inputs() const;
  void clear_default_inputs();
  static const int kDefaultInputsFieldNumber = 3;
  const ::flyteidl::core::ParameterMap& default_inputs() const;
  ::flyteidl::core::ParameterMap* release_default_inputs();
  ::flyteidl::core::ParameterMap* mutable_default_inputs();
  void set_allocated_default_inputs(::flyteidl::core::ParameterMap* default_inputs);

  // .flyteidl.core.LiteralMap fixed_inputs = 4;
  bool has_fixed_inputs() const;
  void clear_fixed_inputs();
  static const int kFixedInputsFieldNumber = 4;
  const ::flyteidl::core::LiteralMap& fixed_inputs() const;
  ::flyteidl::core::LiteralMap* release_fixed_inputs();
  ::flyteidl::core::LiteralMap* mutable_fixed_inputs();
  void set_allocated_fixed_inputs(::flyteidl::core::LiteralMap* fixed_inputs);

  // .flyteidl.admin.Labels labels = 6;
  bool has_labels() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 6;
  const ::flyteidl::admin::Labels& labels() const;
  ::flyteidl::admin::Labels* release_labels();
  ::flyteidl::admin::Labels* mutable_labels();
  void set_allocated_labels(::flyteidl::admin::Labels* labels);

  // .flyteidl.admin.Annotations annotations = 7;
  bool has_annotations() const;
  void clear_annotations();
  static const int kAnnotationsFieldNumber = 7;
  const ::flyteidl::admin::Annotations& annotations() const;
  ::flyteidl::admin::Annotations* release_annotations();
  ::flyteidl::admin::Annotations* mutable_annotations();
  void set_allocated_annotations(::flyteidl::admin::Annotations* annotations);

  // .flyteidl.admin.Auth auth = 8 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_auth() const;
  PROTOBUF_DEPRECATED void clear_auth();
  PROTOBUF_DEPRECATED static const int kAuthFieldNumber = 8;
  PROTOBUF_DEPRECATED const ::flyteidl::admin::Auth& auth() const;
  PROTOBUF_DEPRECATED ::flyteidl::admin::Auth* release_auth();
  PROTOBUF_DEPRECATED ::flyteidl::admin::Auth* mutable_auth();
  PROTOBUF_DEPRECATED void set_allocated_auth(::flyteidl::admin::Auth* auth);

  // .flyteidl.admin.AuthRole auth_role = 9 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_auth_role() const;
  PROTOBUF_DEPRECATED void clear_auth_role();
  PROTOBUF_DEPRECATED static const int kAuthRoleFieldNumber = 9;
  PROTOBUF_DEPRECATED const ::flyteidl::admin::AuthRole& auth_role() const;
  PROTOBUF_DEPRECATED ::flyteidl::admin::AuthRole* release_auth_role();
  PROTOBUF_DEPRECATED ::flyteidl::admin::AuthRole* mutable_auth_role();
  PROTOBUF_DEPRECATED void set_allocated_auth_role(::flyteidl::admin::AuthRole* auth_role);

  // .flyteidl.core.SecurityContext security_context = 10;
  bool has_security_context() const;
  void clear_security_context();
  static const int kSecurityContextFieldNumber = 10;
  const ::flyteidl::core::SecurityContext& security_context() const;
  ::flyteidl::core::SecurityContext* release_security_context();
  ::flyteidl::core::SecurityContext* mutable_security_context();
  void set_allocated_security_context(::flyteidl::core::SecurityContext* security_context);

  // .flyteidl.core.QualityOfService quality_of_service = 16;
  bool has_quality_of_service() const;
  void clear_quality_of_service();
  static const int kQualityOfServiceFieldNumber = 16;
  const ::flyteidl::core::QualityOfService& quality_of_service() const;
  ::flyteidl::core::QualityOfService* release_quality_of_service();
  ::flyteidl::core::QualityOfService* mutable_quality_of_service();
  void set_allocated_quality_of_service(::flyteidl::core::QualityOfService* quality_of_service);

  // .flyteidl.admin.RawOutputDataConfig raw_output_data_config = 17;
  bool has_raw_output_data_config() const;
  void clear_raw_output_data_config();
  static const int kRawOutputDataConfigFieldNumber = 17;
  const ::flyteidl::admin::RawOutputDataConfig& raw_output_data_config() const;
  ::flyteidl::admin::RawOutputDataConfig* release_raw_output_data_config();
  ::flyteidl::admin::RawOutputDataConfig* mutable_raw_output_data_config();
  void set_allocated_raw_output_data_config(::flyteidl::admin::RawOutputDataConfig* raw_output_data_config);

  // .google.protobuf.BoolValue interruptible = 19;
  bool has_interruptible() const;
  void clear_interruptible();
  static const int kInterruptibleFieldNumber = 19;
  const ::google::protobuf::BoolValue& interruptible() const;
  ::google::protobuf::BoolValue* release_interruptible();
  ::google::protobuf::BoolValue* mutable_interruptible();
  void set_allocated_interruptible(::google::protobuf::BoolValue* interruptible);

  // int32 max_parallelism = 18;
  void clear_max_parallelism();
  static const int kMaxParallelismFieldNumber = 18;
  ::google::protobuf::int32 max_parallelism() const;
  void set_max_parallelism(::google::protobuf::int32 value);

  // bool overwrite_cache = 20;
  void clear_overwrite_cache();
  static const int kOverwriteCacheFieldNumber = 20;
  bool overwrite_cache() const;
  void set_overwrite_cache(bool value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.LaunchPlanSpec)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr role_;
  ::flyteidl::core::Identifier* workflow_id_;
  ::flyteidl::admin::LaunchPlanMetadata* entity_metadata_;
  ::flyteidl::core::ParameterMap* default_inputs_;
  ::flyteidl::core::LiteralMap* fixed_inputs_;
  ::flyteidl::admin::Labels* labels_;
  ::flyteidl::admin::Annotations* annotations_;
  ::flyteidl::admin::Auth* auth_;
  ::flyteidl::admin::AuthRole* auth_role_;
  ::flyteidl::core::SecurityContext* security_context_;
  ::flyteidl::core::QualityOfService* quality_of_service_;
  ::flyteidl::admin::RawOutputDataConfig* raw_output_data_config_;
  ::google::protobuf::BoolValue* interruptible_;
  ::google::protobuf::int32 max_parallelism_;
  bool overwrite_cache_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
};
// -------------------------------------------------------------------

class LaunchPlanClosure final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.LaunchPlanClosure) */ {
 public:
  LaunchPlanClosure();
  virtual ~LaunchPlanClosure();

  LaunchPlanClosure(const LaunchPlanClosure& from);

  inline LaunchPlanClosure& operator=(const LaunchPlanClosure& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaunchPlanClosure(LaunchPlanClosure&& from) noexcept
    : LaunchPlanClosure() {
    *this = ::std::move(from);
  }

  inline LaunchPlanClosure& operator=(LaunchPlanClosure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LaunchPlanClosure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaunchPlanClosure* internal_default_instance() {
    return reinterpret_cast<const LaunchPlanClosure*>(
               &_LaunchPlanClosure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(LaunchPlanClosure* other);
  friend void swap(LaunchPlanClosure& a, LaunchPlanClosure& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaunchPlanClosure* New() const final {
    return CreateMaybeMessage<LaunchPlanClosure>(nullptr);
  }

  LaunchPlanClosure* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaunchPlanClosure>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaunchPlanClosure& from);
  void MergeFrom(const LaunchPlanClosure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchPlanClosure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.ParameterMap expected_inputs = 2;
  bool has_expected_inputs() const;
  void clear_expected_inputs();
  static const int kExpectedInputsFieldNumber = 2;
  const ::flyteidl::core::ParameterMap& expected_inputs() const;
  ::flyteidl::core::ParameterMap* release_expected_inputs();
  ::flyteidl::core::ParameterMap* mutable_expected_inputs();
  void set_allocated_expected_inputs(::flyteidl::core::ParameterMap* expected_inputs);

  // .flyteidl.core.VariableMap expected_outputs = 3;
  bool has_expected_outputs() const;
  void clear_expected_outputs();
  static const int kExpectedOutputsFieldNumber = 3;
  const ::flyteidl::core::VariableMap& expected_outputs() const;
  ::flyteidl::core::VariableMap* release_expected_outputs();
  ::flyteidl::core::VariableMap* mutable_expected_outputs();
  void set_allocated_expected_outputs(::flyteidl::core::VariableMap* expected_outputs);

  // .google.protobuf.Timestamp created_at = 4;
  bool has_created_at() const;
  void clear_created_at();
  static const int kCreatedAtFieldNumber = 4;
  const ::google::protobuf::Timestamp& created_at() const;
  ::google::protobuf::Timestamp* release_created_at();
  ::google::protobuf::Timestamp* mutable_created_at();
  void set_allocated_created_at(::google::protobuf::Timestamp* created_at);

  // .google.protobuf.Timestamp updated_at = 5;
  bool has_updated_at() const;
  void clear_updated_at();
  static const int kUpdatedAtFieldNumber = 5;
  const ::google::protobuf::Timestamp& updated_at() const;
  ::google::protobuf::Timestamp* release_updated_at();
  ::google::protobuf::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::google::protobuf::Timestamp* updated_at);

  // .flyteidl.admin.LaunchPlanState state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::flyteidl::admin::LaunchPlanState state() const;
  void set_state(::flyteidl::admin::LaunchPlanState value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.LaunchPlanClosure)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::ParameterMap* expected_inputs_;
  ::flyteidl::core::VariableMap* expected_outputs_;
  ::google::protobuf::Timestamp* created_at_;
  ::google::protobuf::Timestamp* updated_at_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
};
// -------------------------------------------------------------------

class LaunchPlanMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.LaunchPlanMetadata) */ {
 public:
  LaunchPlanMetadata();
  virtual ~LaunchPlanMetadata();

  LaunchPlanMetadata(const LaunchPlanMetadata& from);

  inline LaunchPlanMetadata& operator=(const LaunchPlanMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaunchPlanMetadata(LaunchPlanMetadata&& from) noexcept
    : LaunchPlanMetadata() {
    *this = ::std::move(from);
  }

  inline LaunchPlanMetadata& operator=(LaunchPlanMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LaunchPlanMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaunchPlanMetadata* internal_default_instance() {
    return reinterpret_cast<const LaunchPlanMetadata*>(
               &_LaunchPlanMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(LaunchPlanMetadata* other);
  friend void swap(LaunchPlanMetadata& a, LaunchPlanMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaunchPlanMetadata* New() const final {
    return CreateMaybeMessage<LaunchPlanMetadata>(nullptr);
  }

  LaunchPlanMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaunchPlanMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaunchPlanMetadata& from);
  void MergeFrom(const LaunchPlanMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchPlanMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.admin.Notification notifications = 2;
  int notifications_size() const;
  void clear_notifications();
  static const int kNotificationsFieldNumber = 2;
  ::flyteidl::admin::Notification* mutable_notifications(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Notification >*
      mutable_notifications();
  const ::flyteidl::admin::Notification& notifications(int index) const;
  ::flyteidl::admin::Notification* add_notifications();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Notification >&
      notifications() const;

  // .flyteidl.admin.Schedule schedule = 1;
  bool has_schedule() const;
  void clear_schedule();
  static const int kScheduleFieldNumber = 1;
  const ::flyteidl::admin::Schedule& schedule() const;
  ::flyteidl::admin::Schedule* release_schedule();
  ::flyteidl::admin::Schedule* mutable_schedule();
  void set_allocated_schedule(::flyteidl::admin::Schedule* schedule);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.LaunchPlanMetadata)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Notification > notifications_;
  ::flyteidl::admin::Schedule* schedule_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
};
// -------------------------------------------------------------------

class LaunchPlanUpdateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.LaunchPlanUpdateRequest) */ {
 public:
  LaunchPlanUpdateRequest();
  virtual ~LaunchPlanUpdateRequest();

  LaunchPlanUpdateRequest(const LaunchPlanUpdateRequest& from);

  inline LaunchPlanUpdateRequest& operator=(const LaunchPlanUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaunchPlanUpdateRequest(LaunchPlanUpdateRequest&& from) noexcept
    : LaunchPlanUpdateRequest() {
    *this = ::std::move(from);
  }

  inline LaunchPlanUpdateRequest& operator=(LaunchPlanUpdateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LaunchPlanUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaunchPlanUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const LaunchPlanUpdateRequest*>(
               &_LaunchPlanUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(LaunchPlanUpdateRequest* other);
  friend void swap(LaunchPlanUpdateRequest& a, LaunchPlanUpdateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaunchPlanUpdateRequest* New() const final {
    return CreateMaybeMessage<LaunchPlanUpdateRequest>(nullptr);
  }

  LaunchPlanUpdateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaunchPlanUpdateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaunchPlanUpdateRequest& from);
  void MergeFrom(const LaunchPlanUpdateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchPlanUpdateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::Identifier& id() const;
  ::flyteidl::core::Identifier* release_id();
  ::flyteidl::core::Identifier* mutable_id();
  void set_allocated_id(::flyteidl::core::Identifier* id);

  // .flyteidl.admin.LaunchPlanState state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::flyteidl::admin::LaunchPlanState state() const;
  void set_state(::flyteidl::admin::LaunchPlanState value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.LaunchPlanUpdateRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::Identifier* id_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
};
// -------------------------------------------------------------------

class LaunchPlanUpdateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.LaunchPlanUpdateResponse) */ {
 public:
  LaunchPlanUpdateResponse();
  virtual ~LaunchPlanUpdateResponse();

  LaunchPlanUpdateResponse(const LaunchPlanUpdateResponse& from);

  inline LaunchPlanUpdateResponse& operator=(const LaunchPlanUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaunchPlanUpdateResponse(LaunchPlanUpdateResponse&& from) noexcept
    : LaunchPlanUpdateResponse() {
    *this = ::std::move(from);
  }

  inline LaunchPlanUpdateResponse& operator=(LaunchPlanUpdateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LaunchPlanUpdateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaunchPlanUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const LaunchPlanUpdateResponse*>(
               &_LaunchPlanUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(LaunchPlanUpdateResponse* other);
  friend void swap(LaunchPlanUpdateResponse& a, LaunchPlanUpdateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaunchPlanUpdateResponse* New() const final {
    return CreateMaybeMessage<LaunchPlanUpdateResponse>(nullptr);
  }

  LaunchPlanUpdateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaunchPlanUpdateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaunchPlanUpdateResponse& from);
  void MergeFrom(const LaunchPlanUpdateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchPlanUpdateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.LaunchPlanUpdateResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
};
// -------------------------------------------------------------------

class ActiveLaunchPlanRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ActiveLaunchPlanRequest) */ {
 public:
  ActiveLaunchPlanRequest();
  virtual ~ActiveLaunchPlanRequest();

  ActiveLaunchPlanRequest(const ActiveLaunchPlanRequest& from);

  inline ActiveLaunchPlanRequest& operator=(const ActiveLaunchPlanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActiveLaunchPlanRequest(ActiveLaunchPlanRequest&& from) noexcept
    : ActiveLaunchPlanRequest() {
    *this = ::std::move(from);
  }

  inline ActiveLaunchPlanRequest& operator=(ActiveLaunchPlanRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ActiveLaunchPlanRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActiveLaunchPlanRequest* internal_default_instance() {
    return reinterpret_cast<const ActiveLaunchPlanRequest*>(
               &_ActiveLaunchPlanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ActiveLaunchPlanRequest* other);
  friend void swap(ActiveLaunchPlanRequest& a, ActiveLaunchPlanRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActiveLaunchPlanRequest* New() const final {
    return CreateMaybeMessage<ActiveLaunchPlanRequest>(nullptr);
  }

  ActiveLaunchPlanRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ActiveLaunchPlanRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ActiveLaunchPlanRequest& from);
  void MergeFrom(const ActiveLaunchPlanRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActiveLaunchPlanRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.admin.NamedEntityIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::admin::NamedEntityIdentifier& id() const;
  ::flyteidl::admin::NamedEntityIdentifier* release_id();
  ::flyteidl::admin::NamedEntityIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::admin::NamedEntityIdentifier* id);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ActiveLaunchPlanRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::admin::NamedEntityIdentifier* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
};
// -------------------------------------------------------------------

class ActiveLaunchPlanListRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ActiveLaunchPlanListRequest) */ {
 public:
  ActiveLaunchPlanListRequest();
  virtual ~ActiveLaunchPlanListRequest();

  ActiveLaunchPlanListRequest(const ActiveLaunchPlanListRequest& from);

  inline ActiveLaunchPlanListRequest& operator=(const ActiveLaunchPlanListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActiveLaunchPlanListRequest(ActiveLaunchPlanListRequest&& from) noexcept
    : ActiveLaunchPlanListRequest() {
    *this = ::std::move(from);
  }

  inline ActiveLaunchPlanListRequest& operator=(ActiveLaunchPlanListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ActiveLaunchPlanListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActiveLaunchPlanListRequest* internal_default_instance() {
    return reinterpret_cast<const ActiveLaunchPlanListRequest*>(
               &_ActiveLaunchPlanListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ActiveLaunchPlanListRequest* other);
  friend void swap(ActiveLaunchPlanListRequest& a, ActiveLaunchPlanListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActiveLaunchPlanListRequest* New() const final {
    return CreateMaybeMessage<ActiveLaunchPlanListRequest>(nullptr);
  }

  ActiveLaunchPlanListRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ActiveLaunchPlanListRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ActiveLaunchPlanListRequest& from);
  void MergeFrom(const ActiveLaunchPlanListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActiveLaunchPlanListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project = 1;
  void clear_project();
  static const int kProjectFieldNumber = 1;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  #if LANG_CXX11
  void set_project(::std::string&& value);
  #endif
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);

  // string domain = 2;
  void clear_domain();
  static const int kDomainFieldNumber = 2;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string token = 4;
  void clear_token();
  static const int kTokenFieldNumber = 4;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // .flyteidl.admin.Sort sort_by = 5;
  bool has_sort_by() const;
  void clear_sort_by();
  static const int kSortByFieldNumber = 5;
  const ::flyteidl::admin::Sort& sort_by() const;
  ::flyteidl::admin::Sort* release_sort_by();
  ::flyteidl::admin::Sort* mutable_sort_by();
  void set_allocated_sort_by(::flyteidl::admin::Sort* sort_by);

  // uint32 limit = 3;
  void clear_limit();
  static const int kLimitFieldNumber = 3;
  ::google::protobuf::uint32 limit() const;
  void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ActiveLaunchPlanListRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::flyteidl::admin::Sort* sort_by_;
  ::google::protobuf::uint32 limit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LaunchPlanCreateRequest

// .flyteidl.core.Identifier id = 1;
inline bool LaunchPlanCreateRequest::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::flyteidl::core::Identifier& LaunchPlanCreateRequest::id() const {
  const ::flyteidl::core::Identifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanCreateRequest.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Identifier*>(
      &::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* LaunchPlanCreateRequest::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanCreateRequest.id)
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identifier* LaunchPlanCreateRequest::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanCreateRequest.id)
  return id_;
}
inline void LaunchPlanCreateRequest::set_allocated_id(::flyteidl::core::Identifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanCreateRequest.id)
}

// .flyteidl.admin.LaunchPlanSpec spec = 2;
inline bool LaunchPlanCreateRequest::has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline void LaunchPlanCreateRequest::clear_spec() {
  if (GetArenaNoVirtual() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::flyteidl::admin::LaunchPlanSpec& LaunchPlanCreateRequest::spec() const {
  const ::flyteidl::admin::LaunchPlanSpec* p = spec_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanCreateRequest.spec)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::LaunchPlanSpec*>(
      &::flyteidl::admin::_LaunchPlanSpec_default_instance_);
}
inline ::flyteidl::admin::LaunchPlanSpec* LaunchPlanCreateRequest::release_spec() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanCreateRequest.spec)
  
  ::flyteidl::admin::LaunchPlanSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::LaunchPlanSpec* LaunchPlanCreateRequest::mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::LaunchPlanSpec>(GetArenaNoVirtual());
    spec_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanCreateRequest.spec)
  return spec_;
}
inline void LaunchPlanCreateRequest::set_allocated_spec(::flyteidl::admin::LaunchPlanSpec* spec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      spec = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanCreateRequest.spec)
}

// -------------------------------------------------------------------

// LaunchPlanCreateResponse

// -------------------------------------------------------------------

// LaunchPlan

// .flyteidl.core.Identifier id = 1;
inline bool LaunchPlan::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::flyteidl::core::Identifier& LaunchPlan::id() const {
  const ::flyteidl::core::Identifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlan.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Identifier*>(
      &::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* LaunchPlan::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlan.id)
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identifier* LaunchPlan::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlan.id)
  return id_;
}
inline void LaunchPlan::set_allocated_id(::flyteidl::core::Identifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlan.id)
}

// .flyteidl.admin.LaunchPlanSpec spec = 2;
inline bool LaunchPlan::has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline void LaunchPlan::clear_spec() {
  if (GetArenaNoVirtual() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::flyteidl::admin::LaunchPlanSpec& LaunchPlan::spec() const {
  const ::flyteidl::admin::LaunchPlanSpec* p = spec_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlan.spec)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::LaunchPlanSpec*>(
      &::flyteidl::admin::_LaunchPlanSpec_default_instance_);
}
inline ::flyteidl::admin::LaunchPlanSpec* LaunchPlan::release_spec() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlan.spec)
  
  ::flyteidl::admin::LaunchPlanSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::LaunchPlanSpec* LaunchPlan::mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::LaunchPlanSpec>(GetArenaNoVirtual());
    spec_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlan.spec)
  return spec_;
}
inline void LaunchPlan::set_allocated_spec(::flyteidl::admin::LaunchPlanSpec* spec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      spec = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlan.spec)
}

// .flyteidl.admin.LaunchPlanClosure closure = 3;
inline bool LaunchPlan::has_closure() const {
  return this != internal_default_instance() && closure_ != nullptr;
}
inline void LaunchPlan::clear_closure() {
  if (GetArenaNoVirtual() == nullptr && closure_ != nullptr) {
    delete closure_;
  }
  closure_ = nullptr;
}
inline const ::flyteidl::admin::LaunchPlanClosure& LaunchPlan::closure() const {
  const ::flyteidl::admin::LaunchPlanClosure* p = closure_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlan.closure)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::LaunchPlanClosure*>(
      &::flyteidl::admin::_LaunchPlanClosure_default_instance_);
}
inline ::flyteidl::admin::LaunchPlanClosure* LaunchPlan::release_closure() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlan.closure)
  
  ::flyteidl::admin::LaunchPlanClosure* temp = closure_;
  closure_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::LaunchPlanClosure* LaunchPlan::mutable_closure() {
  
  if (closure_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::LaunchPlanClosure>(GetArenaNoVirtual());
    closure_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlan.closure)
  return closure_;
}
inline void LaunchPlan::set_allocated_closure(::flyteidl::admin::LaunchPlanClosure* closure) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete closure_;
  }
  if (closure) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      closure = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, closure, submessage_arena);
    }
    
  } else {
    
  }
  closure_ = closure;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlan.closure)
}

// -------------------------------------------------------------------

// LaunchPlanList

// repeated .flyteidl.admin.LaunchPlan launch_plans = 1;
inline int LaunchPlanList::launch_plans_size() const {
  return launch_plans_.size();
}
inline void LaunchPlanList::clear_launch_plans() {
  launch_plans_.Clear();
}
inline ::flyteidl::admin::LaunchPlan* LaunchPlanList::mutable_launch_plans(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanList.launch_plans)
  return launch_plans_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::LaunchPlan >*
LaunchPlanList::mutable_launch_plans() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.LaunchPlanList.launch_plans)
  return &launch_plans_;
}
inline const ::flyteidl::admin::LaunchPlan& LaunchPlanList::launch_plans(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanList.launch_plans)
  return launch_plans_.Get(index);
}
inline ::flyteidl::admin::LaunchPlan* LaunchPlanList::add_launch_plans() {
  // @@protoc_insertion_point(field_add:flyteidl.admin.LaunchPlanList.launch_plans)
  return launch_plans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::LaunchPlan >&
LaunchPlanList::launch_plans() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.LaunchPlanList.launch_plans)
  return launch_plans_;
}

// string token = 2;
inline void LaunchPlanList::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LaunchPlanList::token() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanList.token)
  return token_.GetNoArena();
}
inline void LaunchPlanList::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchPlanList.token)
}
#if LANG_CXX11
inline void LaunchPlanList::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.LaunchPlanList.token)
}
#endif
inline void LaunchPlanList::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.LaunchPlanList.token)
}
inline void LaunchPlanList::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.LaunchPlanList.token)
}
inline ::std::string* LaunchPlanList::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanList.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaunchPlanList::release_token() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanList.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaunchPlanList::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanList.token)
}

// -------------------------------------------------------------------

// Auth

// string assumable_iam_role = 1;
inline void Auth::clear_assumable_iam_role() {
  assumable_iam_role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Auth::assumable_iam_role() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Auth.assumable_iam_role)
  return assumable_iam_role_.GetNoArena();
}
inline void Auth::set_assumable_iam_role(const ::std::string& value) {
  
  assumable_iam_role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.Auth.assumable_iam_role)
}
#if LANG_CXX11
inline void Auth::set_assumable_iam_role(::std::string&& value) {
  
  assumable_iam_role_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.Auth.assumable_iam_role)
}
#endif
inline void Auth::set_assumable_iam_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  assumable_iam_role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.Auth.assumable_iam_role)
}
inline void Auth::set_assumable_iam_role(const char* value, size_t size) {
  
  assumable_iam_role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.Auth.assumable_iam_role)
}
inline ::std::string* Auth::mutable_assumable_iam_role() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Auth.assumable_iam_role)
  return assumable_iam_role_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Auth::release_assumable_iam_role() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Auth.assumable_iam_role)
  
  return assumable_iam_role_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Auth::set_allocated_assumable_iam_role(::std::string* assumable_iam_role) {
  if (assumable_iam_role != nullptr) {
    
  } else {
    
  }
  assumable_iam_role_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assumable_iam_role);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Auth.assumable_iam_role)
}

// string kubernetes_service_account = 2;
inline void Auth::clear_kubernetes_service_account() {
  kubernetes_service_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Auth::kubernetes_service_account() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Auth.kubernetes_service_account)
  return kubernetes_service_account_.GetNoArena();
}
inline void Auth::set_kubernetes_service_account(const ::std::string& value) {
  
  kubernetes_service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.Auth.kubernetes_service_account)
}
#if LANG_CXX11
inline void Auth::set_kubernetes_service_account(::std::string&& value) {
  
  kubernetes_service_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.Auth.kubernetes_service_account)
}
#endif
inline void Auth::set_kubernetes_service_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kubernetes_service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.Auth.kubernetes_service_account)
}
inline void Auth::set_kubernetes_service_account(const char* value, size_t size) {
  
  kubernetes_service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.Auth.kubernetes_service_account)
}
inline ::std::string* Auth::mutable_kubernetes_service_account() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Auth.kubernetes_service_account)
  return kubernetes_service_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Auth::release_kubernetes_service_account() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Auth.kubernetes_service_account)
  
  return kubernetes_service_account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Auth::set_allocated_kubernetes_service_account(::std::string* kubernetes_service_account) {
  if (kubernetes_service_account != nullptr) {
    
  } else {
    
  }
  kubernetes_service_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kubernetes_service_account);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Auth.kubernetes_service_account)
}

// -------------------------------------------------------------------

// LaunchPlanSpec

// .flyteidl.core.Identifier workflow_id = 1;
inline bool LaunchPlanSpec::has_workflow_id() const {
  return this != internal_default_instance() && workflow_id_ != nullptr;
}
inline const ::flyteidl::core::Identifier& LaunchPlanSpec::workflow_id() const {
  const ::flyteidl::core::Identifier* p = workflow_id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanSpec.workflow_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Identifier*>(
      &::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* LaunchPlanSpec::release_workflow_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanSpec.workflow_id)
  
  ::flyteidl::core::Identifier* temp = workflow_id_;
  workflow_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identifier* LaunchPlanSpec::mutable_workflow_id() {
  
  if (workflow_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identifier>(GetArenaNoVirtual());
    workflow_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanSpec.workflow_id)
  return workflow_id_;
}
inline void LaunchPlanSpec::set_allocated_workflow_id(::flyteidl::core::Identifier* workflow_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(workflow_id_);
  }
  if (workflow_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      workflow_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, workflow_id, submessage_arena);
    }
    
  } else {
    
  }
  workflow_id_ = workflow_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanSpec.workflow_id)
}

// .flyteidl.admin.LaunchPlanMetadata entity_metadata = 2;
inline bool LaunchPlanSpec::has_entity_metadata() const {
  return this != internal_default_instance() && entity_metadata_ != nullptr;
}
inline void LaunchPlanSpec::clear_entity_metadata() {
  if (GetArenaNoVirtual() == nullptr && entity_metadata_ != nullptr) {
    delete entity_metadata_;
  }
  entity_metadata_ = nullptr;
}
inline const ::flyteidl::admin::LaunchPlanMetadata& LaunchPlanSpec::entity_metadata() const {
  const ::flyteidl::admin::LaunchPlanMetadata* p = entity_metadata_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanSpec.entity_metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::LaunchPlanMetadata*>(
      &::flyteidl::admin::_LaunchPlanMetadata_default_instance_);
}
inline ::flyteidl::admin::LaunchPlanMetadata* LaunchPlanSpec::release_entity_metadata() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanSpec.entity_metadata)
  
  ::flyteidl::admin::LaunchPlanMetadata* temp = entity_metadata_;
  entity_metadata_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::LaunchPlanMetadata* LaunchPlanSpec::mutable_entity_metadata() {
  
  if (entity_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::LaunchPlanMetadata>(GetArenaNoVirtual());
    entity_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanSpec.entity_metadata)
  return entity_metadata_;
}
inline void LaunchPlanSpec::set_allocated_entity_metadata(::flyteidl::admin::LaunchPlanMetadata* entity_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete entity_metadata_;
  }
  if (entity_metadata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      entity_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, entity_metadata, submessage_arena);
    }
    
  } else {
    
  }
  entity_metadata_ = entity_metadata;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanSpec.entity_metadata)
}

// .flyteidl.core.ParameterMap default_inputs = 3;
inline bool LaunchPlanSpec::has_default_inputs() const {
  return this != internal_default_instance() && default_inputs_ != nullptr;
}
inline const ::flyteidl::core::ParameterMap& LaunchPlanSpec::default_inputs() const {
  const ::flyteidl::core::ParameterMap* p = default_inputs_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanSpec.default_inputs)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::ParameterMap*>(
      &::flyteidl::core::_ParameterMap_default_instance_);
}
inline ::flyteidl::core::ParameterMap* LaunchPlanSpec::release_default_inputs() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanSpec.default_inputs)
  
  ::flyteidl::core::ParameterMap* temp = default_inputs_;
  default_inputs_ = nullptr;
  return temp;
}
inline ::flyteidl::core::ParameterMap* LaunchPlanSpec::mutable_default_inputs() {
  
  if (default_inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::ParameterMap>(GetArenaNoVirtual());
    default_inputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanSpec.default_inputs)
  return default_inputs_;
}
inline void LaunchPlanSpec::set_allocated_default_inputs(::flyteidl::core::ParameterMap* default_inputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(default_inputs_);
  }
  if (default_inputs) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      default_inputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, default_inputs, submessage_arena);
    }
    
  } else {
    
  }
  default_inputs_ = default_inputs;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanSpec.default_inputs)
}

// .flyteidl.core.LiteralMap fixed_inputs = 4;
inline bool LaunchPlanSpec::has_fixed_inputs() const {
  return this != internal_default_instance() && fixed_inputs_ != nullptr;
}
inline const ::flyteidl::core::LiteralMap& LaunchPlanSpec::fixed_inputs() const {
  const ::flyteidl::core::LiteralMap* p = fixed_inputs_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanSpec.fixed_inputs)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::LiteralMap*>(
      &::flyteidl::core::_LiteralMap_default_instance_);
}
inline ::flyteidl::core::LiteralMap* LaunchPlanSpec::release_fixed_inputs() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanSpec.fixed_inputs)
  
  ::flyteidl::core::LiteralMap* temp = fixed_inputs_;
  fixed_inputs_ = nullptr;
  return temp;
}
inline ::flyteidl::core::LiteralMap* LaunchPlanSpec::mutable_fixed_inputs() {
  
  if (fixed_inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::LiteralMap>(GetArenaNoVirtual());
    fixed_inputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanSpec.fixed_inputs)
  return fixed_inputs_;
}
inline void LaunchPlanSpec::set_allocated_fixed_inputs(::flyteidl::core::LiteralMap* fixed_inputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(fixed_inputs_);
  }
  if (fixed_inputs) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fixed_inputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fixed_inputs, submessage_arena);
    }
    
  } else {
    
  }
  fixed_inputs_ = fixed_inputs;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanSpec.fixed_inputs)
}

// string role = 5 [deprecated = true];
inline void LaunchPlanSpec::clear_role() {
  role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LaunchPlanSpec::role() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanSpec.role)
  return role_.GetNoArena();
}
inline void LaunchPlanSpec::set_role(const ::std::string& value) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchPlanSpec.role)
}
#if LANG_CXX11
inline void LaunchPlanSpec::set_role(::std::string&& value) {
  
  role_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.LaunchPlanSpec.role)
}
#endif
inline void LaunchPlanSpec::set_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.LaunchPlanSpec.role)
}
inline void LaunchPlanSpec::set_role(const char* value, size_t size) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.LaunchPlanSpec.role)
}
inline ::std::string* LaunchPlanSpec::mutable_role() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanSpec.role)
  return role_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaunchPlanSpec::release_role() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanSpec.role)
  
  return role_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaunchPlanSpec::set_allocated_role(::std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  role_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanSpec.role)
}

// .flyteidl.admin.Labels labels = 6;
inline bool LaunchPlanSpec::has_labels() const {
  return this != internal_default_instance() && labels_ != nullptr;
}
inline const ::flyteidl::admin::Labels& LaunchPlanSpec::labels() const {
  const ::flyteidl::admin::Labels* p = labels_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanSpec.labels)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::Labels*>(
      &::flyteidl::admin::_Labels_default_instance_);
}
inline ::flyteidl::admin::Labels* LaunchPlanSpec::release_labels() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanSpec.labels)
  
  ::flyteidl::admin::Labels* temp = labels_;
  labels_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Labels* LaunchPlanSpec::mutable_labels() {
  
  if (labels_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Labels>(GetArenaNoVirtual());
    labels_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanSpec.labels)
  return labels_;
}
inline void LaunchPlanSpec::set_allocated_labels(::flyteidl::admin::Labels* labels) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(labels_);
  }
  if (labels) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      labels = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, labels, submessage_arena);
    }
    
  } else {
    
  }
  labels_ = labels;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanSpec.labels)
}

// .flyteidl.admin.Annotations annotations = 7;
inline bool LaunchPlanSpec::has_annotations() const {
  return this != internal_default_instance() && annotations_ != nullptr;
}
inline const ::flyteidl::admin::Annotations& LaunchPlanSpec::annotations() const {
  const ::flyteidl::admin::Annotations* p = annotations_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanSpec.annotations)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::Annotations*>(
      &::flyteidl::admin::_Annotations_default_instance_);
}
inline ::flyteidl::admin::Annotations* LaunchPlanSpec::release_annotations() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanSpec.annotations)
  
  ::flyteidl::admin::Annotations* temp = annotations_;
  annotations_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Annotations* LaunchPlanSpec::mutable_annotations() {
  
  if (annotations_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Annotations>(GetArenaNoVirtual());
    annotations_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanSpec.annotations)
  return annotations_;
}
inline void LaunchPlanSpec::set_allocated_annotations(::flyteidl::admin::Annotations* annotations) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(annotations_);
  }
  if (annotations) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      annotations = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, annotations, submessage_arena);
    }
    
  } else {
    
  }
  annotations_ = annotations;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanSpec.annotations)
}

// .flyteidl.admin.Auth auth = 8 [deprecated = true];
inline bool LaunchPlanSpec::has_auth() const {
  return this != internal_default_instance() && auth_ != nullptr;
}
inline void LaunchPlanSpec::clear_auth() {
  if (GetArenaNoVirtual() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
}
inline const ::flyteidl::admin::Auth& LaunchPlanSpec::auth() const {
  const ::flyteidl::admin::Auth* p = auth_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanSpec.auth)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::Auth*>(
      &::flyteidl::admin::_Auth_default_instance_);
}
inline ::flyteidl::admin::Auth* LaunchPlanSpec::release_auth() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanSpec.auth)
  
  ::flyteidl::admin::Auth* temp = auth_;
  auth_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Auth* LaunchPlanSpec::mutable_auth() {
  
  if (auth_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Auth>(GetArenaNoVirtual());
    auth_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanSpec.auth)
  return auth_;
}
inline void LaunchPlanSpec::set_allocated_auth(::flyteidl::admin::Auth* auth) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete auth_;
  }
  if (auth) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, auth, submessage_arena);
    }
    
  } else {
    
  }
  auth_ = auth;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanSpec.auth)
}

// .flyteidl.admin.AuthRole auth_role = 9 [deprecated = true];
inline bool LaunchPlanSpec::has_auth_role() const {
  return this != internal_default_instance() && auth_role_ != nullptr;
}
inline const ::flyteidl::admin::AuthRole& LaunchPlanSpec::auth_role() const {
  const ::flyteidl::admin::AuthRole* p = auth_role_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanSpec.auth_role)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::AuthRole*>(
      &::flyteidl::admin::_AuthRole_default_instance_);
}
inline ::flyteidl::admin::AuthRole* LaunchPlanSpec::release_auth_role() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanSpec.auth_role)
  
  ::flyteidl::admin::AuthRole* temp = auth_role_;
  auth_role_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::AuthRole* LaunchPlanSpec::mutable_auth_role() {
  
  if (auth_role_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::AuthRole>(GetArenaNoVirtual());
    auth_role_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanSpec.auth_role)
  return auth_role_;
}
inline void LaunchPlanSpec::set_allocated_auth_role(::flyteidl::admin::AuthRole* auth_role) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(auth_role_);
  }
  if (auth_role) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth_role = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, auth_role, submessage_arena);
    }
    
  } else {
    
  }
  auth_role_ = auth_role;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanSpec.auth_role)
}

// .flyteidl.core.SecurityContext security_context = 10;
inline bool LaunchPlanSpec::has_security_context() const {
  return this != internal_default_instance() && security_context_ != nullptr;
}
inline const ::flyteidl::core::SecurityContext& LaunchPlanSpec::security_context() const {
  const ::flyteidl::core::SecurityContext* p = security_context_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanSpec.security_context)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::SecurityContext*>(
      &::flyteidl::core::_SecurityContext_default_instance_);
}
inline ::flyteidl::core::SecurityContext* LaunchPlanSpec::release_security_context() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanSpec.security_context)
  
  ::flyteidl::core::SecurityContext* temp = security_context_;
  security_context_ = nullptr;
  return temp;
}
inline ::flyteidl::core::SecurityContext* LaunchPlanSpec::mutable_security_context() {
  
  if (security_context_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::SecurityContext>(GetArenaNoVirtual());
    security_context_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanSpec.security_context)
  return security_context_;
}
inline void LaunchPlanSpec::set_allocated_security_context(::flyteidl::core::SecurityContext* security_context) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(security_context_);
  }
  if (security_context) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      security_context = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, security_context, submessage_arena);
    }
    
  } else {
    
  }
  security_context_ = security_context;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanSpec.security_context)
}

// .flyteidl.core.QualityOfService quality_of_service = 16;
inline bool LaunchPlanSpec::has_quality_of_service() const {
  return this != internal_default_instance() && quality_of_service_ != nullptr;
}
inline const ::flyteidl::core::QualityOfService& LaunchPlanSpec::quality_of_service() const {
  const ::flyteidl::core::QualityOfService* p = quality_of_service_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanSpec.quality_of_service)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::QualityOfService*>(
      &::flyteidl::core::_QualityOfService_default_instance_);
}
inline ::flyteidl::core::QualityOfService* LaunchPlanSpec::release_quality_of_service() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanSpec.quality_of_service)
  
  ::flyteidl::core::QualityOfService* temp = quality_of_service_;
  quality_of_service_ = nullptr;
  return temp;
}
inline ::flyteidl::core::QualityOfService* LaunchPlanSpec::mutable_quality_of_service() {
  
  if (quality_of_service_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::QualityOfService>(GetArenaNoVirtual());
    quality_of_service_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanSpec.quality_of_service)
  return quality_of_service_;
}
inline void LaunchPlanSpec::set_allocated_quality_of_service(::flyteidl::core::QualityOfService* quality_of_service) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(quality_of_service_);
  }
  if (quality_of_service) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quality_of_service = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quality_of_service, submessage_arena);
    }
    
  } else {
    
  }
  quality_of_service_ = quality_of_service;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanSpec.quality_of_service)
}

// .flyteidl.admin.RawOutputDataConfig raw_output_data_config = 17;
inline bool LaunchPlanSpec::has_raw_output_data_config() const {
  return this != internal_default_instance() && raw_output_data_config_ != nullptr;
}
inline const ::flyteidl::admin::RawOutputDataConfig& LaunchPlanSpec::raw_output_data_config() const {
  const ::flyteidl::admin::RawOutputDataConfig* p = raw_output_data_config_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanSpec.raw_output_data_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::RawOutputDataConfig*>(
      &::flyteidl::admin::_RawOutputDataConfig_default_instance_);
}
inline ::flyteidl::admin::RawOutputDataConfig* LaunchPlanSpec::release_raw_output_data_config() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanSpec.raw_output_data_config)
  
  ::flyteidl::admin::RawOutputDataConfig* temp = raw_output_data_config_;
  raw_output_data_config_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::RawOutputDataConfig* LaunchPlanSpec::mutable_raw_output_data_config() {
  
  if (raw_output_data_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::RawOutputDataConfig>(GetArenaNoVirtual());
    raw_output_data_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanSpec.raw_output_data_config)
  return raw_output_data_config_;
}
inline void LaunchPlanSpec::set_allocated_raw_output_data_config(::flyteidl::admin::RawOutputDataConfig* raw_output_data_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(raw_output_data_config_);
  }
  if (raw_output_data_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      raw_output_data_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, raw_output_data_config, submessage_arena);
    }
    
  } else {
    
  }
  raw_output_data_config_ = raw_output_data_config;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanSpec.raw_output_data_config)
}

// int32 max_parallelism = 18;
inline void LaunchPlanSpec::clear_max_parallelism() {
  max_parallelism_ = 0;
}
inline ::google::protobuf::int32 LaunchPlanSpec::max_parallelism() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanSpec.max_parallelism)
  return max_parallelism_;
}
inline void LaunchPlanSpec::set_max_parallelism(::google::protobuf::int32 value) {
  
  max_parallelism_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchPlanSpec.max_parallelism)
}

// .google.protobuf.BoolValue interruptible = 19;
inline bool LaunchPlanSpec::has_interruptible() const {
  return this != internal_default_instance() && interruptible_ != nullptr;
}
inline const ::google::protobuf::BoolValue& LaunchPlanSpec::interruptible() const {
  const ::google::protobuf::BoolValue* p = interruptible_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanSpec.interruptible)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* LaunchPlanSpec::release_interruptible() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanSpec.interruptible)
  
  ::google::protobuf::BoolValue* temp = interruptible_;
  interruptible_ = nullptr;
  return temp;
}
inline ::google::protobuf::BoolValue* LaunchPlanSpec::mutable_interruptible() {
  
  if (interruptible_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::BoolValue>(GetArenaNoVirtual());
    interruptible_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanSpec.interruptible)
  return interruptible_;
}
inline void LaunchPlanSpec::set_allocated_interruptible(::google::protobuf::BoolValue* interruptible) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(interruptible_);
  }
  if (interruptible) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(interruptible)->GetArena();
    if (message_arena != submessage_arena) {
      interruptible = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interruptible, submessage_arena);
    }
    
  } else {
    
  }
  interruptible_ = interruptible;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanSpec.interruptible)
}

// bool overwrite_cache = 20;
inline void LaunchPlanSpec::clear_overwrite_cache() {
  overwrite_cache_ = false;
}
inline bool LaunchPlanSpec::overwrite_cache() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanSpec.overwrite_cache)
  return overwrite_cache_;
}
inline void LaunchPlanSpec::set_overwrite_cache(bool value) {
  
  overwrite_cache_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchPlanSpec.overwrite_cache)
}

// -------------------------------------------------------------------

// LaunchPlanClosure

// .flyteidl.admin.LaunchPlanState state = 1;
inline void LaunchPlanClosure::clear_state() {
  state_ = 0;
}
inline ::flyteidl::admin::LaunchPlanState LaunchPlanClosure::state() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanClosure.state)
  return static_cast< ::flyteidl::admin::LaunchPlanState >(state_);
}
inline void LaunchPlanClosure::set_state(::flyteidl::admin::LaunchPlanState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchPlanClosure.state)
}

// .flyteidl.core.ParameterMap expected_inputs = 2;
inline bool LaunchPlanClosure::has_expected_inputs() const {
  return this != internal_default_instance() && expected_inputs_ != nullptr;
}
inline const ::flyteidl::core::ParameterMap& LaunchPlanClosure::expected_inputs() const {
  const ::flyteidl::core::ParameterMap* p = expected_inputs_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanClosure.expected_inputs)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::ParameterMap*>(
      &::flyteidl::core::_ParameterMap_default_instance_);
}
inline ::flyteidl::core::ParameterMap* LaunchPlanClosure::release_expected_inputs() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanClosure.expected_inputs)
  
  ::flyteidl::core::ParameterMap* temp = expected_inputs_;
  expected_inputs_ = nullptr;
  return temp;
}
inline ::flyteidl::core::ParameterMap* LaunchPlanClosure::mutable_expected_inputs() {
  
  if (expected_inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::ParameterMap>(GetArenaNoVirtual());
    expected_inputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanClosure.expected_inputs)
  return expected_inputs_;
}
inline void LaunchPlanClosure::set_allocated_expected_inputs(::flyteidl::core::ParameterMap* expected_inputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(expected_inputs_);
  }
  if (expected_inputs) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      expected_inputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expected_inputs, submessage_arena);
    }
    
  } else {
    
  }
  expected_inputs_ = expected_inputs;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanClosure.expected_inputs)
}

// .flyteidl.core.VariableMap expected_outputs = 3;
inline bool LaunchPlanClosure::has_expected_outputs() const {
  return this != internal_default_instance() && expected_outputs_ != nullptr;
}
inline const ::flyteidl::core::VariableMap& LaunchPlanClosure::expected_outputs() const {
  const ::flyteidl::core::VariableMap* p = expected_outputs_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanClosure.expected_outputs)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::VariableMap*>(
      &::flyteidl::core::_VariableMap_default_instance_);
}
inline ::flyteidl::core::VariableMap* LaunchPlanClosure::release_expected_outputs() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanClosure.expected_outputs)
  
  ::flyteidl::core::VariableMap* temp = expected_outputs_;
  expected_outputs_ = nullptr;
  return temp;
}
inline ::flyteidl::core::VariableMap* LaunchPlanClosure::mutable_expected_outputs() {
  
  if (expected_outputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::VariableMap>(GetArenaNoVirtual());
    expected_outputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanClosure.expected_outputs)
  return expected_outputs_;
}
inline void LaunchPlanClosure::set_allocated_expected_outputs(::flyteidl::core::VariableMap* expected_outputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(expected_outputs_);
  }
  if (expected_outputs) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      expected_outputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expected_outputs, submessage_arena);
    }
    
  } else {
    
  }
  expected_outputs_ = expected_outputs;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanClosure.expected_outputs)
}

// .google.protobuf.Timestamp created_at = 4;
inline bool LaunchPlanClosure::has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& LaunchPlanClosure::created_at() const {
  const ::google::protobuf::Timestamp* p = created_at_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanClosure.created_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* LaunchPlanClosure::release_created_at() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanClosure.created_at)
  
  ::google::protobuf::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* LaunchPlanClosure::mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    created_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanClosure.created_at)
  return created_at_;
}
inline void LaunchPlanClosure::set_allocated_created_at(::google::protobuf::Timestamp* created_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanClosure.created_at)
}

// .google.protobuf.Timestamp updated_at = 5;
inline bool LaunchPlanClosure::has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& LaunchPlanClosure::updated_at() const {
  const ::google::protobuf::Timestamp* p = updated_at_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanClosure.updated_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* LaunchPlanClosure::release_updated_at() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanClosure.updated_at)
  
  ::google::protobuf::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* LaunchPlanClosure::mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    updated_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanClosure.updated_at)
  return updated_at_;
}
inline void LaunchPlanClosure::set_allocated_updated_at(::google::protobuf::Timestamp* updated_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanClosure.updated_at)
}

// -------------------------------------------------------------------

// LaunchPlanMetadata

// .flyteidl.admin.Schedule schedule = 1;
inline bool LaunchPlanMetadata::has_schedule() const {
  return this != internal_default_instance() && schedule_ != nullptr;
}
inline const ::flyteidl::admin::Schedule& LaunchPlanMetadata::schedule() const {
  const ::flyteidl::admin::Schedule* p = schedule_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanMetadata.schedule)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::Schedule*>(
      &::flyteidl::admin::_Schedule_default_instance_);
}
inline ::flyteidl::admin::Schedule* LaunchPlanMetadata::release_schedule() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanMetadata.schedule)
  
  ::flyteidl::admin::Schedule* temp = schedule_;
  schedule_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Schedule* LaunchPlanMetadata::mutable_schedule() {
  
  if (schedule_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Schedule>(GetArenaNoVirtual());
    schedule_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanMetadata.schedule)
  return schedule_;
}
inline void LaunchPlanMetadata::set_allocated_schedule(::flyteidl::admin::Schedule* schedule) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(schedule_);
  }
  if (schedule) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      schedule = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, schedule, submessage_arena);
    }
    
  } else {
    
  }
  schedule_ = schedule;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanMetadata.schedule)
}

// repeated .flyteidl.admin.Notification notifications = 2;
inline int LaunchPlanMetadata::notifications_size() const {
  return notifications_.size();
}
inline ::flyteidl::admin::Notification* LaunchPlanMetadata::mutable_notifications(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanMetadata.notifications)
  return notifications_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Notification >*
LaunchPlanMetadata::mutable_notifications() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.LaunchPlanMetadata.notifications)
  return &notifications_;
}
inline const ::flyteidl::admin::Notification& LaunchPlanMetadata::notifications(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanMetadata.notifications)
  return notifications_.Get(index);
}
inline ::flyteidl::admin::Notification* LaunchPlanMetadata::add_notifications() {
  // @@protoc_insertion_point(field_add:flyteidl.admin.LaunchPlanMetadata.notifications)
  return notifications_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Notification >&
LaunchPlanMetadata::notifications() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.LaunchPlanMetadata.notifications)
  return notifications_;
}

// -------------------------------------------------------------------

// LaunchPlanUpdateRequest

// .flyteidl.core.Identifier id = 1;
inline bool LaunchPlanUpdateRequest::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::flyteidl::core::Identifier& LaunchPlanUpdateRequest::id() const {
  const ::flyteidl::core::Identifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanUpdateRequest.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Identifier*>(
      &::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* LaunchPlanUpdateRequest::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchPlanUpdateRequest.id)
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identifier* LaunchPlanUpdateRequest::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchPlanUpdateRequest.id)
  return id_;
}
inline void LaunchPlanUpdateRequest::set_allocated_id(::flyteidl::core::Identifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchPlanUpdateRequest.id)
}

// .flyteidl.admin.LaunchPlanState state = 2;
inline void LaunchPlanUpdateRequest::clear_state() {
  state_ = 0;
}
inline ::flyteidl::admin::LaunchPlanState LaunchPlanUpdateRequest::state() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchPlanUpdateRequest.state)
  return static_cast< ::flyteidl::admin::LaunchPlanState >(state_);
}
inline void LaunchPlanUpdateRequest::set_state(::flyteidl::admin::LaunchPlanState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchPlanUpdateRequest.state)
}

// -------------------------------------------------------------------

// LaunchPlanUpdateResponse

// -------------------------------------------------------------------

// ActiveLaunchPlanRequest

// .flyteidl.admin.NamedEntityIdentifier id = 1;
inline bool ActiveLaunchPlanRequest::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::flyteidl::admin::NamedEntityIdentifier& ActiveLaunchPlanRequest::id() const {
  const ::flyteidl::admin::NamedEntityIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.ActiveLaunchPlanRequest.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::NamedEntityIdentifier*>(
      &::flyteidl::admin::_NamedEntityIdentifier_default_instance_);
}
inline ::flyteidl::admin::NamedEntityIdentifier* ActiveLaunchPlanRequest::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ActiveLaunchPlanRequest.id)
  
  ::flyteidl::admin::NamedEntityIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::NamedEntityIdentifier* ActiveLaunchPlanRequest::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::NamedEntityIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ActiveLaunchPlanRequest.id)
  return id_;
}
inline void ActiveLaunchPlanRequest::set_allocated_id(::flyteidl::admin::NamedEntityIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ActiveLaunchPlanRequest.id)
}

// -------------------------------------------------------------------

// ActiveLaunchPlanListRequest

// string project = 1;
inline void ActiveLaunchPlanListRequest::clear_project() {
  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ActiveLaunchPlanListRequest::project() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ActiveLaunchPlanListRequest.project)
  return project_.GetNoArena();
}
inline void ActiveLaunchPlanListRequest::set_project(const ::std::string& value) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.ActiveLaunchPlanListRequest.project)
}
#if LANG_CXX11
inline void ActiveLaunchPlanListRequest::set_project(::std::string&& value) {
  
  project_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.ActiveLaunchPlanListRequest.project)
}
#endif
inline void ActiveLaunchPlanListRequest::set_project(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.ActiveLaunchPlanListRequest.project)
}
inline void ActiveLaunchPlanListRequest::set_project(const char* value, size_t size) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.ActiveLaunchPlanListRequest.project)
}
inline ::std::string* ActiveLaunchPlanListRequest::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ActiveLaunchPlanListRequest.project)
  return project_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActiveLaunchPlanListRequest::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ActiveLaunchPlanListRequest.project)
  
  return project_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActiveLaunchPlanListRequest::set_allocated_project(::std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ActiveLaunchPlanListRequest.project)
}

// string domain = 2;
inline void ActiveLaunchPlanListRequest::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ActiveLaunchPlanListRequest::domain() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ActiveLaunchPlanListRequest.domain)
  return domain_.GetNoArena();
}
inline void ActiveLaunchPlanListRequest::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.ActiveLaunchPlanListRequest.domain)
}
#if LANG_CXX11
inline void ActiveLaunchPlanListRequest::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.ActiveLaunchPlanListRequest.domain)
}
#endif
inline void ActiveLaunchPlanListRequest::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.ActiveLaunchPlanListRequest.domain)
}
inline void ActiveLaunchPlanListRequest::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.ActiveLaunchPlanListRequest.domain)
}
inline ::std::string* ActiveLaunchPlanListRequest::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ActiveLaunchPlanListRequest.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActiveLaunchPlanListRequest::release_domain() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ActiveLaunchPlanListRequest.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActiveLaunchPlanListRequest::set_allocated_domain(::std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ActiveLaunchPlanListRequest.domain)
}

// uint32 limit = 3;
inline void ActiveLaunchPlanListRequest::clear_limit() {
  limit_ = 0u;
}
inline ::google::protobuf::uint32 ActiveLaunchPlanListRequest::limit() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ActiveLaunchPlanListRequest.limit)
  return limit_;
}
inline void ActiveLaunchPlanListRequest::set_limit(::google::protobuf::uint32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.ActiveLaunchPlanListRequest.limit)
}

// string token = 4;
inline void ActiveLaunchPlanListRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ActiveLaunchPlanListRequest::token() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ActiveLaunchPlanListRequest.token)
  return token_.GetNoArena();
}
inline void ActiveLaunchPlanListRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.ActiveLaunchPlanListRequest.token)
}
#if LANG_CXX11
inline void ActiveLaunchPlanListRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.ActiveLaunchPlanListRequest.token)
}
#endif
inline void ActiveLaunchPlanListRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.ActiveLaunchPlanListRequest.token)
}
inline void ActiveLaunchPlanListRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.ActiveLaunchPlanListRequest.token)
}
inline ::std::string* ActiveLaunchPlanListRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ActiveLaunchPlanListRequest.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActiveLaunchPlanListRequest::release_token() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ActiveLaunchPlanListRequest.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActiveLaunchPlanListRequest::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ActiveLaunchPlanListRequest.token)
}

// .flyteidl.admin.Sort sort_by = 5;
inline bool ActiveLaunchPlanListRequest::has_sort_by() const {
  return this != internal_default_instance() && sort_by_ != nullptr;
}
inline const ::flyteidl::admin::Sort& ActiveLaunchPlanListRequest::sort_by() const {
  const ::flyteidl::admin::Sort* p = sort_by_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.ActiveLaunchPlanListRequest.sort_by)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::Sort*>(
      &::flyteidl::admin::_Sort_default_instance_);
}
inline ::flyteidl::admin::Sort* ActiveLaunchPlanListRequest::release_sort_by() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ActiveLaunchPlanListRequest.sort_by)
  
  ::flyteidl::admin::Sort* temp = sort_by_;
  sort_by_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Sort* ActiveLaunchPlanListRequest::mutable_sort_by() {
  
  if (sort_by_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Sort>(GetArenaNoVirtual());
    sort_by_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ActiveLaunchPlanListRequest.sort_by)
  return sort_by_;
}
inline void ActiveLaunchPlanListRequest::set_allocated_sort_by(::flyteidl::admin::Sort* sort_by) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sort_by_);
  }
  if (sort_by) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sort_by = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sort_by, submessage_arena);
    }
    
  } else {
    
  }
  sort_by_ = sort_by;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ActiveLaunchPlanListRequest.sort_by)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::flyteidl::admin::LaunchPlanState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::admin::LaunchPlanState>() {
  return ::flyteidl::admin::LaunchPlanState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fadmin_2flaunch_5fplan_2eproto
