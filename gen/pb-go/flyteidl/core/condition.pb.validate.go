// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl/core/condition.proto

package core

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _condition_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ComparisonExpression with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ComparisonExpression) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Operator

	if v, ok := interface{}(m.GetLeftValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComparisonExpressionValidationError{
				field:  "LeftValue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRightValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComparisonExpressionValidationError{
				field:  "RightValue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ComparisonExpressionValidationError is the validation error returned by
// ComparisonExpression.Validate if the designated constraints aren't met.
type ComparisonExpressionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComparisonExpressionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComparisonExpressionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComparisonExpressionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComparisonExpressionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComparisonExpressionValidationError) ErrorName() string {
	return "ComparisonExpressionValidationError"
}

// Error satisfies the builtin error interface
func (e ComparisonExpressionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComparisonExpression.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComparisonExpressionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComparisonExpressionValidationError{}

// Validate checks the field values on Operand with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Operand) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Val.(type) {

	case *Operand_Primitive:

		if v, ok := interface{}(m.GetPrimitive()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OperandValidationError{
					field:  "Primitive",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Operand_Var:
		// no validation rules for Var

	}

	return nil
}

// OperandValidationError is the validation error returned by Operand.Validate
// if the designated constraints aren't met.
type OperandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperandValidationError) ErrorName() string { return "OperandValidationError" }

// Error satisfies the builtin error interface
func (e OperandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperandValidationError{}

// Validate checks the field values on BooleanExpression with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *BooleanExpression) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Expr.(type) {

	case *BooleanExpression_Conjunction:

		if v, ok := interface{}(m.GetConjunction()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BooleanExpressionValidationError{
					field:  "Conjunction",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *BooleanExpression_Comparison:

		if v, ok := interface{}(m.GetComparison()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BooleanExpressionValidationError{
					field:  "Comparison",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// BooleanExpressionValidationError is the validation error returned by
// BooleanExpression.Validate if the designated constraints aren't met.
type BooleanExpressionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BooleanExpressionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BooleanExpressionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BooleanExpressionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BooleanExpressionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BooleanExpressionValidationError) ErrorName() string {
	return "BooleanExpressionValidationError"
}

// Error satisfies the builtin error interface
func (e BooleanExpressionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBooleanExpression.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BooleanExpressionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BooleanExpressionValidationError{}

// Validate checks the field values on ConjunctionExpression with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ConjunctionExpression) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Operator

	if v, ok := interface{}(m.GetLeftExpression()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConjunctionExpressionValidationError{
				field:  "LeftExpression",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRightExpression()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConjunctionExpressionValidationError{
				field:  "RightExpression",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ConjunctionExpressionValidationError is the validation error returned by
// ConjunctionExpression.Validate if the designated constraints aren't met.
type ConjunctionExpressionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConjunctionExpressionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConjunctionExpressionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConjunctionExpressionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConjunctionExpressionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConjunctionExpressionValidationError) ErrorName() string {
	return "ConjunctionExpressionValidationError"
}

// Error satisfies the builtin error interface
func (e ConjunctionExpressionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConjunctionExpression.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConjunctionExpressionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConjunctionExpressionValidationError{}
