// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/node_execution.proto

package com.flyteidl.admin;

public interface NodeExecutionMetaDataOrBuilder extends
    // @@protoc_insertion_point(interface_extends:flyteidl.admin.NodeExecutionMetaData)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Node executions are grouped depending on retries of the parent
   * Retry group is unique within the context of a parent node.
   * </pre>
   *
   * <code>string retry_group = 1 [json_name = "retryGroup"];</code>
   * @return The retryGroup.
   */
  java.lang.String getRetryGroup();
  /**
   * <pre>
   * Node executions are grouped depending on retries of the parent
   * Retry group is unique within the context of a parent node.
   * </pre>
   *
   * <code>string retry_group = 1 [json_name = "retryGroup"];</code>
   * @return The bytes for retryGroup.
   */
  com.google.protobuf.ByteString
      getRetryGroupBytes();

  /**
   * <pre>
   * Boolean flag indicating if the node has child nodes under it
   * This can be true when a node contains a dynamic workflow which then produces
   * child nodes.
   * </pre>
   *
   * <code>bool is_parent_node = 2 [json_name = "isParentNode"];</code>
   * @return The isParentNode.
   */
  boolean getIsParentNode();

  /**
   * <pre>
   * Node id of the node in the original workflow
   * This maps to value of WorkflowTemplate.nodes[X].id
   * </pre>
   *
   * <code>string spec_node_id = 3 [json_name = "specNodeId"];</code>
   * @return The specNodeId.
   */
  java.lang.String getSpecNodeId();
  /**
   * <pre>
   * Node id of the node in the original workflow
   * This maps to value of WorkflowTemplate.nodes[X].id
   * </pre>
   *
   * <code>string spec_node_id = 3 [json_name = "specNodeId"];</code>
   * @return The bytes for specNodeId.
   */
  com.google.protobuf.ByteString
      getSpecNodeIdBytes();

  /**
   * <pre>
   * Boolean flag indicating if the node has contains a dynamic workflow which then produces child nodes.
   * This is to distinguish between subworkflows and dynamic workflows which can both have is_parent_node as true.
   * </pre>
   *
   * <code>bool is_dynamic = 4 [json_name = "isDynamic"];</code>
   * @return The isDynamic.
   */
  boolean getIsDynamic();
}
