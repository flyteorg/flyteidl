// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/sidecar.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fplugins_2fsidecar_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fplugins_2fsidecar_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "k8s.io/api/core/v1/generated.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fsidecar_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fplugins_2fsidecar_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fplugins_2fsidecar_2eproto;
namespace flyteidl {
namespace plugins {
class SidecarJob;
struct SidecarJobDefaultTypeInternal;
extern SidecarJobDefaultTypeInternal _SidecarJob_default_instance_;
class SidecarJob_AnnotationsEntry_DoNotUse;
struct SidecarJob_AnnotationsEntry_DoNotUseDefaultTypeInternal;
extern SidecarJob_AnnotationsEntry_DoNotUseDefaultTypeInternal _SidecarJob_AnnotationsEntry_DoNotUse_default_instance_;
class SidecarJob_LabelsEntry_DoNotUse;
struct SidecarJob_LabelsEntry_DoNotUseDefaultTypeInternal;
extern SidecarJob_LabelsEntry_DoNotUseDefaultTypeInternal _SidecarJob_LabelsEntry_DoNotUse_default_instance_;
}  // namespace plugins
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::plugins::SidecarJob* Arena::CreateMaybeMessage<::flyteidl::plugins::SidecarJob>(Arena*);
template<> ::flyteidl::plugins::SidecarJob_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage<::flyteidl::plugins::SidecarJob_AnnotationsEntry_DoNotUse>(Arena*);
template<> ::flyteidl::plugins::SidecarJob_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::flyteidl::plugins::SidecarJob_LabelsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace plugins {

// ===================================================================

class SidecarJob_AnnotationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SidecarJob_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SidecarJob_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  SidecarJob_AnnotationsEntry_DoNotUse();
  explicit constexpr SidecarJob_AnnotationsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SidecarJob_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SidecarJob_AnnotationsEntry_DoNotUse& other);
  static const SidecarJob_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SidecarJob_AnnotationsEntry_DoNotUse*>(&_SidecarJob_AnnotationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flyteidl.plugins.SidecarJob.AnnotationsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flyteidl.plugins.SidecarJob.AnnotationsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class SidecarJob_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SidecarJob_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SidecarJob_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  SidecarJob_LabelsEntry_DoNotUse();
  explicit constexpr SidecarJob_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SidecarJob_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SidecarJob_LabelsEntry_DoNotUse& other);
  static const SidecarJob_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SidecarJob_LabelsEntry_DoNotUse*>(&_SidecarJob_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flyteidl.plugins.SidecarJob.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flyteidl.plugins.SidecarJob.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class SidecarJob final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.SidecarJob) */ {
 public:
  inline SidecarJob() : SidecarJob(nullptr) {}
  ~SidecarJob() override;
  explicit constexpr SidecarJob(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SidecarJob(const SidecarJob& from);
  SidecarJob(SidecarJob&& from) noexcept
    : SidecarJob() {
    *this = ::std::move(from);
  }

  inline SidecarJob& operator=(const SidecarJob& from) {
    CopyFrom(from);
    return *this;
  }
  inline SidecarJob& operator=(SidecarJob&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SidecarJob& default_instance() {
    return *internal_default_instance();
  }
  static inline const SidecarJob* internal_default_instance() {
    return reinterpret_cast<const SidecarJob*>(
               &_SidecarJob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SidecarJob& a, SidecarJob& b) {
    a.Swap(&b);
  }
  inline void Swap(SidecarJob* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SidecarJob* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SidecarJob* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SidecarJob>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SidecarJob* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.plugins.SidecarJob";
  }
  protected:
  explicit SidecarJob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 3,
    kLabelsFieldNumber = 4,
    kPrimaryContainerNameFieldNumber = 2,
    kPodSpecFieldNumber = 1,
  };
  // map<string, string> annotations = 3 [json_name = "annotations"];
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_annotations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_annotations();

  // map<string, string> labels = 4 [json_name = "labels"];
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string primary_container_name = 2 [json_name = "primaryContainerName"];
  void clear_primary_container_name();
  const std::string& primary_container_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_primary_container_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_primary_container_name();
  PROTOBUF_NODISCARD std::string* release_primary_container_name();
  void set_allocated_primary_container_name(std::string* primary_container_name);
  private:
  const std::string& _internal_primary_container_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primary_container_name(const std::string& value);
  std::string* _internal_mutable_primary_container_name();
  public:

  // .k8s.io.api.core.v1.PodSpec pod_spec = 1 [json_name = "podSpec"];
  bool has_pod_spec() const;
  private:
  bool _internal_has_pod_spec() const;
  public:
  void clear_pod_spec();
  const ::k8s::io::api::core::v1::PodSpec& pod_spec() const;
  PROTOBUF_NODISCARD ::k8s::io::api::core::v1::PodSpec* release_pod_spec();
  ::k8s::io::api::core::v1::PodSpec* mutable_pod_spec();
  void set_allocated_pod_spec(::k8s::io::api::core::v1::PodSpec* pod_spec);
  private:
  const ::k8s::io::api::core::v1::PodSpec& _internal_pod_spec() const;
  ::k8s::io::api::core::v1::PodSpec* _internal_mutable_pod_spec();
  public:
  void unsafe_arena_set_allocated_pod_spec(
      ::k8s::io::api::core::v1::PodSpec* pod_spec);
  ::k8s::io::api::core::v1::PodSpec* unsafe_arena_release_pod_spec();

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.SidecarJob)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SidecarJob_AnnotationsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> annotations_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SidecarJob_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primary_container_name_;
  ::k8s::io::api::core::v1::PodSpec* pod_spec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsidecar_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SidecarJob

// .k8s.io.api.core.v1.PodSpec pod_spec = 1 [json_name = "podSpec"];
inline bool SidecarJob::_internal_has_pod_spec() const {
  return this != internal_default_instance() && pod_spec_ != nullptr;
}
inline bool SidecarJob::has_pod_spec() const {
  return _internal_has_pod_spec();
}
inline const ::k8s::io::api::core::v1::PodSpec& SidecarJob::_internal_pod_spec() const {
  const ::k8s::io::api::core::v1::PodSpec* p = pod_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::k8s::io::api::core::v1::PodSpec&>(
      ::k8s::io::api::core::v1::_PodSpec_default_instance_);
}
inline const ::k8s::io::api::core::v1::PodSpec& SidecarJob::pod_spec() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.SidecarJob.pod_spec)
  return _internal_pod_spec();
}
inline void SidecarJob::unsafe_arena_set_allocated_pod_spec(
    ::k8s::io::api::core::v1::PodSpec* pod_spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pod_spec_);
  }
  pod_spec_ = pod_spec;
  if (pod_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.plugins.SidecarJob.pod_spec)
}
inline ::k8s::io::api::core::v1::PodSpec* SidecarJob::release_pod_spec() {
  
  ::k8s::io::api::core::v1::PodSpec* temp = pod_spec_;
  pod_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::k8s::io::api::core::v1::PodSpec* SidecarJob::unsafe_arena_release_pod_spec() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.SidecarJob.pod_spec)
  
  ::k8s::io::api::core::v1::PodSpec* temp = pod_spec_;
  pod_spec_ = nullptr;
  return temp;
}
inline ::k8s::io::api::core::v1::PodSpec* SidecarJob::_internal_mutable_pod_spec() {
  
  if (pod_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::k8s::io::api::core::v1::PodSpec>(GetArenaForAllocation());
    pod_spec_ = p;
  }
  return pod_spec_;
}
inline ::k8s::io::api::core::v1::PodSpec* SidecarJob::mutable_pod_spec() {
  ::k8s::io::api::core::v1::PodSpec* _msg = _internal_mutable_pod_spec();
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.SidecarJob.pod_spec)
  return _msg;
}
inline void SidecarJob::set_allocated_pod_spec(::k8s::io::api::core::v1::PodSpec* pod_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pod_spec_);
  }
  if (pod_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pod_spec));
    if (message_arena != submessage_arena) {
      pod_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pod_spec, submessage_arena);
    }
    
  } else {
    
  }
  pod_spec_ = pod_spec;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.SidecarJob.pod_spec)
}

// string primary_container_name = 2 [json_name = "primaryContainerName"];
inline void SidecarJob::clear_primary_container_name() {
  primary_container_name_.ClearToEmpty();
}
inline const std::string& SidecarJob::primary_container_name() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.SidecarJob.primary_container_name)
  return _internal_primary_container_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SidecarJob::set_primary_container_name(ArgT0&& arg0, ArgT... args) {
 
 primary_container_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.plugins.SidecarJob.primary_container_name)
}
inline std::string* SidecarJob::mutable_primary_container_name() {
  std::string* _s = _internal_mutable_primary_container_name();
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.SidecarJob.primary_container_name)
  return _s;
}
inline const std::string& SidecarJob::_internal_primary_container_name() const {
  return primary_container_name_.Get();
}
inline void SidecarJob::_internal_set_primary_container_name(const std::string& value) {
  
  primary_container_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SidecarJob::_internal_mutable_primary_container_name() {
  
  return primary_container_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SidecarJob::release_primary_container_name() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.SidecarJob.primary_container_name)
  return primary_container_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SidecarJob::set_allocated_primary_container_name(std::string* primary_container_name) {
  if (primary_container_name != nullptr) {
    
  } else {
    
  }
  primary_container_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), primary_container_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (primary_container_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    primary_container_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.SidecarJob.primary_container_name)
}

// map<string, string> annotations = 3 [json_name = "annotations"];
inline int SidecarJob::_internal_annotations_size() const {
  return annotations_.size();
}
inline int SidecarJob::annotations_size() const {
  return _internal_annotations_size();
}
inline void SidecarJob::clear_annotations() {
  annotations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SidecarJob::_internal_annotations() const {
  return annotations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SidecarJob::annotations() const {
  // @@protoc_insertion_point(field_map:flyteidl.plugins.SidecarJob.annotations)
  return _internal_annotations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SidecarJob::_internal_mutable_annotations() {
  return annotations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SidecarJob::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:flyteidl.plugins.SidecarJob.annotations)
  return _internal_mutable_annotations();
}

// map<string, string> labels = 4 [json_name = "labels"];
inline int SidecarJob::_internal_labels_size() const {
  return labels_.size();
}
inline int SidecarJob::labels_size() const {
  return _internal_labels_size();
}
inline void SidecarJob::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SidecarJob::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SidecarJob::labels() const {
  // @@protoc_insertion_point(field_map:flyteidl.plugins.SidecarJob.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SidecarJob::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SidecarJob::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:flyteidl.plugins.SidecarJob.labels)
  return _internal_mutable_labels();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace plugins
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fplugins_2fsidecar_2eproto
