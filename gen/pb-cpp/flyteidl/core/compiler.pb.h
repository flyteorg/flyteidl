// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/compiler.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fcore_2fcompiler_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fcore_2fcompiler_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/workflow.pb.h"
#include "flyteidl/core/tasks.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fcompiler_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fcore_2fcompiler_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fcore_2fcompiler_2eproto;
namespace flyteidl {
namespace core {
class CompiledTask;
struct CompiledTaskDefaultTypeInternal;
extern CompiledTaskDefaultTypeInternal _CompiledTask_default_instance_;
class CompiledWorkflow;
struct CompiledWorkflowDefaultTypeInternal;
extern CompiledWorkflowDefaultTypeInternal _CompiledWorkflow_default_instance_;
class CompiledWorkflowClosure;
struct CompiledWorkflowClosureDefaultTypeInternal;
extern CompiledWorkflowClosureDefaultTypeInternal _CompiledWorkflowClosure_default_instance_;
class ConnectionSet;
struct ConnectionSetDefaultTypeInternal;
extern ConnectionSetDefaultTypeInternal _ConnectionSet_default_instance_;
class ConnectionSet_DownstreamEntry_DoNotUse;
struct ConnectionSet_DownstreamEntry_DoNotUseDefaultTypeInternal;
extern ConnectionSet_DownstreamEntry_DoNotUseDefaultTypeInternal _ConnectionSet_DownstreamEntry_DoNotUse_default_instance_;
class ConnectionSet_IdList;
struct ConnectionSet_IdListDefaultTypeInternal;
extern ConnectionSet_IdListDefaultTypeInternal _ConnectionSet_IdList_default_instance_;
class ConnectionSet_UpstreamEntry_DoNotUse;
struct ConnectionSet_UpstreamEntry_DoNotUseDefaultTypeInternal;
extern ConnectionSet_UpstreamEntry_DoNotUseDefaultTypeInternal _ConnectionSet_UpstreamEntry_DoNotUse_default_instance_;
}  // namespace core
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::core::CompiledTask* Arena::CreateMaybeMessage<::flyteidl::core::CompiledTask>(Arena*);
template<> ::flyteidl::core::CompiledWorkflow* Arena::CreateMaybeMessage<::flyteidl::core::CompiledWorkflow>(Arena*);
template<> ::flyteidl::core::CompiledWorkflowClosure* Arena::CreateMaybeMessage<::flyteidl::core::CompiledWorkflowClosure>(Arena*);
template<> ::flyteidl::core::ConnectionSet* Arena::CreateMaybeMessage<::flyteidl::core::ConnectionSet>(Arena*);
template<> ::flyteidl::core::ConnectionSet_DownstreamEntry_DoNotUse* Arena::CreateMaybeMessage<::flyteidl::core::ConnectionSet_DownstreamEntry_DoNotUse>(Arena*);
template<> ::flyteidl::core::ConnectionSet_IdList* Arena::CreateMaybeMessage<::flyteidl::core::ConnectionSet_IdList>(Arena*);
template<> ::flyteidl::core::ConnectionSet_UpstreamEntry_DoNotUse* Arena::CreateMaybeMessage<::flyteidl::core::ConnectionSet_UpstreamEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace core {

// ===================================================================

class ConnectionSet_IdList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.ConnectionSet.IdList) */ {
 public:
  inline ConnectionSet_IdList() : ConnectionSet_IdList(nullptr) {}
  ~ConnectionSet_IdList() override;
  explicit constexpr ConnectionSet_IdList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectionSet_IdList(const ConnectionSet_IdList& from);
  ConnectionSet_IdList(ConnectionSet_IdList&& from) noexcept
    : ConnectionSet_IdList() {
    *this = ::std::move(from);
  }

  inline ConnectionSet_IdList& operator=(const ConnectionSet_IdList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionSet_IdList& operator=(ConnectionSet_IdList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectionSet_IdList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectionSet_IdList* internal_default_instance() {
    return reinterpret_cast<const ConnectionSet_IdList*>(
               &_ConnectionSet_IdList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConnectionSet_IdList& a, ConnectionSet_IdList& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionSet_IdList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionSet_IdList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectionSet_IdList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectionSet_IdList>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionSet_IdList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.ConnectionSet.IdList";
  }
  protected:
  explicit ConnectionSet_IdList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // repeated string ids = 1 [json_name = "ids"];
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.core.ConnectionSet.IdList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fcompiler_2eproto;
};
// -------------------------------------------------------------------

class ConnectionSet_DownstreamEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ConnectionSet_DownstreamEntry_DoNotUse, 
    std::string, ::flyteidl::core::ConnectionSet_IdList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ConnectionSet_DownstreamEntry_DoNotUse, 
    std::string, ::flyteidl::core::ConnectionSet_IdList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ConnectionSet_DownstreamEntry_DoNotUse();
  explicit constexpr ConnectionSet_DownstreamEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ConnectionSet_DownstreamEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ConnectionSet_DownstreamEntry_DoNotUse& other);
  static const ConnectionSet_DownstreamEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ConnectionSet_DownstreamEntry_DoNotUse*>(&_ConnectionSet_DownstreamEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flyteidl.core.ConnectionSet.DownstreamEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ConnectionSet_UpstreamEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ConnectionSet_UpstreamEntry_DoNotUse, 
    std::string, ::flyteidl::core::ConnectionSet_IdList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ConnectionSet_UpstreamEntry_DoNotUse, 
    std::string, ::flyteidl::core::ConnectionSet_IdList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ConnectionSet_UpstreamEntry_DoNotUse();
  explicit constexpr ConnectionSet_UpstreamEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ConnectionSet_UpstreamEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ConnectionSet_UpstreamEntry_DoNotUse& other);
  static const ConnectionSet_UpstreamEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ConnectionSet_UpstreamEntry_DoNotUse*>(&_ConnectionSet_UpstreamEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flyteidl.core.ConnectionSet.UpstreamEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ConnectionSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.ConnectionSet) */ {
 public:
  inline ConnectionSet() : ConnectionSet(nullptr) {}
  ~ConnectionSet() override;
  explicit constexpr ConnectionSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectionSet(const ConnectionSet& from);
  ConnectionSet(ConnectionSet&& from) noexcept
    : ConnectionSet() {
    *this = ::std::move(from);
  }

  inline ConnectionSet& operator=(const ConnectionSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionSet& operator=(ConnectionSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectionSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectionSet* internal_default_instance() {
    return reinterpret_cast<const ConnectionSet*>(
               &_ConnectionSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ConnectionSet& a, ConnectionSet& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectionSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectionSet>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.ConnectionSet";
  }
  protected:
  explicit ConnectionSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConnectionSet_IdList IdList;

  // accessors -------------------------------------------------------

  enum : int {
    kDownstreamFieldNumber = 7,
    kUpstreamFieldNumber = 8,
  };
  // map<string, .flyteidl.core.ConnectionSet.IdList> downstream = 7 [json_name = "downstream"];
  int downstream_size() const;
  private:
  int _internal_downstream_size() const;
  public:
  void clear_downstream();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::ConnectionSet_IdList >&
      _internal_downstream() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::ConnectionSet_IdList >*
      _internal_mutable_downstream();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::ConnectionSet_IdList >&
      downstream() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::ConnectionSet_IdList >*
      mutable_downstream();

  // map<string, .flyteidl.core.ConnectionSet.IdList> upstream = 8 [json_name = "upstream"];
  int upstream_size() const;
  private:
  int _internal_upstream_size() const;
  public:
  void clear_upstream();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::ConnectionSet_IdList >&
      _internal_upstream() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::ConnectionSet_IdList >*
      _internal_mutable_upstream();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::ConnectionSet_IdList >&
      upstream() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::ConnectionSet_IdList >*
      mutable_upstream();

  // @@protoc_insertion_point(class_scope:flyteidl.core.ConnectionSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ConnectionSet_DownstreamEntry_DoNotUse,
      std::string, ::flyteidl::core::ConnectionSet_IdList,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> downstream_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ConnectionSet_UpstreamEntry_DoNotUse,
      std::string, ::flyteidl::core::ConnectionSet_IdList,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> upstream_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fcompiler_2eproto;
};
// -------------------------------------------------------------------

class CompiledWorkflow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.CompiledWorkflow) */ {
 public:
  inline CompiledWorkflow() : CompiledWorkflow(nullptr) {}
  ~CompiledWorkflow() override;
  explicit constexpr CompiledWorkflow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompiledWorkflow(const CompiledWorkflow& from);
  CompiledWorkflow(CompiledWorkflow&& from) noexcept
    : CompiledWorkflow() {
    *this = ::std::move(from);
  }

  inline CompiledWorkflow& operator=(const CompiledWorkflow& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompiledWorkflow& operator=(CompiledWorkflow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompiledWorkflow& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompiledWorkflow* internal_default_instance() {
    return reinterpret_cast<const CompiledWorkflow*>(
               &_CompiledWorkflow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CompiledWorkflow& a, CompiledWorkflow& b) {
    a.Swap(&b);
  }
  inline void Swap(CompiledWorkflow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompiledWorkflow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompiledWorkflow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompiledWorkflow>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompiledWorkflow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.CompiledWorkflow";
  }
  protected:
  explicit CompiledWorkflow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTemplateFieldNumber = 1,
    kConnectionsFieldNumber = 2,
  };
  // .flyteidl.core.WorkflowTemplate template = 1 [json_name = "template"];
  bool has_template_() const;
  private:
  bool _internal_has_template_() const;
  public:
  void clear_template_();
  const ::flyteidl::core::WorkflowTemplate& template_() const;
  PROTOBUF_NODISCARD ::flyteidl::core::WorkflowTemplate* release_template_();
  ::flyteidl::core::WorkflowTemplate* mutable_template_();
  void set_allocated_template_(::flyteidl::core::WorkflowTemplate* template_);
  private:
  const ::flyteidl::core::WorkflowTemplate& _internal_template_() const;
  ::flyteidl::core::WorkflowTemplate* _internal_mutable_template_();
  public:
  void unsafe_arena_set_allocated_template_(
      ::flyteidl::core::WorkflowTemplate* template_);
  ::flyteidl::core::WorkflowTemplate* unsafe_arena_release_template_();

  // .flyteidl.core.ConnectionSet connections = 2 [json_name = "connections"];
  bool has_connections() const;
  private:
  bool _internal_has_connections() const;
  public:
  void clear_connections();
  const ::flyteidl::core::ConnectionSet& connections() const;
  PROTOBUF_NODISCARD ::flyteidl::core::ConnectionSet* release_connections();
  ::flyteidl::core::ConnectionSet* mutable_connections();
  void set_allocated_connections(::flyteidl::core::ConnectionSet* connections);
  private:
  const ::flyteidl::core::ConnectionSet& _internal_connections() const;
  ::flyteidl::core::ConnectionSet* _internal_mutable_connections();
  public:
  void unsafe_arena_set_allocated_connections(
      ::flyteidl::core::ConnectionSet* connections);
  ::flyteidl::core::ConnectionSet* unsafe_arena_release_connections();

  // @@protoc_insertion_point(class_scope:flyteidl.core.CompiledWorkflow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::WorkflowTemplate* template__;
  ::flyteidl::core::ConnectionSet* connections_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fcompiler_2eproto;
};
// -------------------------------------------------------------------

class CompiledTask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.CompiledTask) */ {
 public:
  inline CompiledTask() : CompiledTask(nullptr) {}
  ~CompiledTask() override;
  explicit constexpr CompiledTask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompiledTask(const CompiledTask& from);
  CompiledTask(CompiledTask&& from) noexcept
    : CompiledTask() {
    *this = ::std::move(from);
  }

  inline CompiledTask& operator=(const CompiledTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompiledTask& operator=(CompiledTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompiledTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompiledTask* internal_default_instance() {
    return reinterpret_cast<const CompiledTask*>(
               &_CompiledTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CompiledTask& a, CompiledTask& b) {
    a.Swap(&b);
  }
  inline void Swap(CompiledTask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompiledTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompiledTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompiledTask>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompiledTask* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.CompiledTask";
  }
  protected:
  explicit CompiledTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTemplateFieldNumber = 1,
  };
  // .flyteidl.core.TaskTemplate template = 1 [json_name = "template"];
  bool has_template_() const;
  private:
  bool _internal_has_template_() const;
  public:
  void clear_template_();
  const ::flyteidl::core::TaskTemplate& template_() const;
  PROTOBUF_NODISCARD ::flyteidl::core::TaskTemplate* release_template_();
  ::flyteidl::core::TaskTemplate* mutable_template_();
  void set_allocated_template_(::flyteidl::core::TaskTemplate* template_);
  private:
  const ::flyteidl::core::TaskTemplate& _internal_template_() const;
  ::flyteidl::core::TaskTemplate* _internal_mutable_template_();
  public:
  void unsafe_arena_set_allocated_template_(
      ::flyteidl::core::TaskTemplate* template_);
  ::flyteidl::core::TaskTemplate* unsafe_arena_release_template_();

  // @@protoc_insertion_point(class_scope:flyteidl.core.CompiledTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::TaskTemplate* template__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fcompiler_2eproto;
};
// -------------------------------------------------------------------

class CompiledWorkflowClosure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.CompiledWorkflowClosure) */ {
 public:
  inline CompiledWorkflowClosure() : CompiledWorkflowClosure(nullptr) {}
  ~CompiledWorkflowClosure() override;
  explicit constexpr CompiledWorkflowClosure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompiledWorkflowClosure(const CompiledWorkflowClosure& from);
  CompiledWorkflowClosure(CompiledWorkflowClosure&& from) noexcept
    : CompiledWorkflowClosure() {
    *this = ::std::move(from);
  }

  inline CompiledWorkflowClosure& operator=(const CompiledWorkflowClosure& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompiledWorkflowClosure& operator=(CompiledWorkflowClosure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompiledWorkflowClosure& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompiledWorkflowClosure* internal_default_instance() {
    return reinterpret_cast<const CompiledWorkflowClosure*>(
               &_CompiledWorkflowClosure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CompiledWorkflowClosure& a, CompiledWorkflowClosure& b) {
    a.Swap(&b);
  }
  inline void Swap(CompiledWorkflowClosure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompiledWorkflowClosure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompiledWorkflowClosure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompiledWorkflowClosure>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompiledWorkflowClosure* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.CompiledWorkflowClosure";
  }
  protected:
  explicit CompiledWorkflowClosure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubWorkflowsFieldNumber = 2,
    kTasksFieldNumber = 3,
    kPrimaryFieldNumber = 1,
  };
  // repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2 [json_name = "subWorkflows"];
  int sub_workflows_size() const;
  private:
  int _internal_sub_workflows_size() const;
  public:
  void clear_sub_workflows();
  ::flyteidl::core::CompiledWorkflow* mutable_sub_workflows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::CompiledWorkflow >*
      mutable_sub_workflows();
  private:
  const ::flyteidl::core::CompiledWorkflow& _internal_sub_workflows(int index) const;
  ::flyteidl::core::CompiledWorkflow* _internal_add_sub_workflows();
  public:
  const ::flyteidl::core::CompiledWorkflow& sub_workflows(int index) const;
  ::flyteidl::core::CompiledWorkflow* add_sub_workflows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::CompiledWorkflow >&
      sub_workflows() const;

  // repeated .flyteidl.core.CompiledTask tasks = 3 [json_name = "tasks"];
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::flyteidl::core::CompiledTask* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::CompiledTask >*
      mutable_tasks();
  private:
  const ::flyteidl::core::CompiledTask& _internal_tasks(int index) const;
  ::flyteidl::core::CompiledTask* _internal_add_tasks();
  public:
  const ::flyteidl::core::CompiledTask& tasks(int index) const;
  ::flyteidl::core::CompiledTask* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::CompiledTask >&
      tasks() const;

  // .flyteidl.core.CompiledWorkflow primary = 1 [json_name = "primary"];
  bool has_primary() const;
  private:
  bool _internal_has_primary() const;
  public:
  void clear_primary();
  const ::flyteidl::core::CompiledWorkflow& primary() const;
  PROTOBUF_NODISCARD ::flyteidl::core::CompiledWorkflow* release_primary();
  ::flyteidl::core::CompiledWorkflow* mutable_primary();
  void set_allocated_primary(::flyteidl::core::CompiledWorkflow* primary);
  private:
  const ::flyteidl::core::CompiledWorkflow& _internal_primary() const;
  ::flyteidl::core::CompiledWorkflow* _internal_mutable_primary();
  public:
  void unsafe_arena_set_allocated_primary(
      ::flyteidl::core::CompiledWorkflow* primary);
  ::flyteidl::core::CompiledWorkflow* unsafe_arena_release_primary();

  // @@protoc_insertion_point(class_scope:flyteidl.core.CompiledWorkflowClosure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::CompiledWorkflow > sub_workflows_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::CompiledTask > tasks_;
  ::flyteidl::core::CompiledWorkflow* primary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fcompiler_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConnectionSet_IdList

// repeated string ids = 1 [json_name = "ids"];
inline int ConnectionSet_IdList::_internal_ids_size() const {
  return ids_.size();
}
inline int ConnectionSet_IdList::ids_size() const {
  return _internal_ids_size();
}
inline void ConnectionSet_IdList::clear_ids() {
  ids_.Clear();
}
inline std::string* ConnectionSet_IdList::add_ids() {
  std::string* _s = _internal_add_ids();
  // @@protoc_insertion_point(field_add_mutable:flyteidl.core.ConnectionSet.IdList.ids)
  return _s;
}
inline const std::string& ConnectionSet_IdList::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& ConnectionSet_IdList::ids(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.ConnectionSet.IdList.ids)
  return _internal_ids(index);
}
inline std::string* ConnectionSet_IdList::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.ConnectionSet.IdList.ids)
  return ids_.Mutable(index);
}
inline void ConnectionSet_IdList::set_ids(int index, const std::string& value) {
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flyteidl.core.ConnectionSet.IdList.ids)
}
inline void ConnectionSet_IdList::set_ids(int index, std::string&& value) {
  ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flyteidl.core.ConnectionSet.IdList.ids)
}
inline void ConnectionSet_IdList::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.core.ConnectionSet.IdList.ids)
}
inline void ConnectionSet_IdList::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.ConnectionSet.IdList.ids)
}
inline std::string* ConnectionSet_IdList::_internal_add_ids() {
  return ids_.Add();
}
inline void ConnectionSet_IdList::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.core.ConnectionSet.IdList.ids)
}
inline void ConnectionSet_IdList::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.core.ConnectionSet.IdList.ids)
}
inline void ConnectionSet_IdList::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.core.ConnectionSet.IdList.ids)
}
inline void ConnectionSet_IdList::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.core.ConnectionSet.IdList.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConnectionSet_IdList::ids() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.ConnectionSet.IdList.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConnectionSet_IdList::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.ConnectionSet.IdList.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ConnectionSet

// map<string, .flyteidl.core.ConnectionSet.IdList> downstream = 7 [json_name = "downstream"];
inline int ConnectionSet::_internal_downstream_size() const {
  return downstream_.size();
}
inline int ConnectionSet::downstream_size() const {
  return _internal_downstream_size();
}
inline void ConnectionSet::clear_downstream() {
  downstream_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::ConnectionSet_IdList >&
ConnectionSet::_internal_downstream() const {
  return downstream_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::ConnectionSet_IdList >&
ConnectionSet::downstream() const {
  // @@protoc_insertion_point(field_map:flyteidl.core.ConnectionSet.downstream)
  return _internal_downstream();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::ConnectionSet_IdList >*
ConnectionSet::_internal_mutable_downstream() {
  return downstream_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::ConnectionSet_IdList >*
ConnectionSet::mutable_downstream() {
  // @@protoc_insertion_point(field_mutable_map:flyteidl.core.ConnectionSet.downstream)
  return _internal_mutable_downstream();
}

// map<string, .flyteidl.core.ConnectionSet.IdList> upstream = 8 [json_name = "upstream"];
inline int ConnectionSet::_internal_upstream_size() const {
  return upstream_.size();
}
inline int ConnectionSet::upstream_size() const {
  return _internal_upstream_size();
}
inline void ConnectionSet::clear_upstream() {
  upstream_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::ConnectionSet_IdList >&
ConnectionSet::_internal_upstream() const {
  return upstream_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::ConnectionSet_IdList >&
ConnectionSet::upstream() const {
  // @@protoc_insertion_point(field_map:flyteidl.core.ConnectionSet.upstream)
  return _internal_upstream();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::ConnectionSet_IdList >*
ConnectionSet::_internal_mutable_upstream() {
  return upstream_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::core::ConnectionSet_IdList >*
ConnectionSet::mutable_upstream() {
  // @@protoc_insertion_point(field_mutable_map:flyteidl.core.ConnectionSet.upstream)
  return _internal_mutable_upstream();
}

// -------------------------------------------------------------------

// CompiledWorkflow

// .flyteidl.core.WorkflowTemplate template = 1 [json_name = "template"];
inline bool CompiledWorkflow::_internal_has_template_() const {
  return this != internal_default_instance() && template__ != nullptr;
}
inline bool CompiledWorkflow::has_template_() const {
  return _internal_has_template_();
}
inline const ::flyteidl::core::WorkflowTemplate& CompiledWorkflow::_internal_template_() const {
  const ::flyteidl::core::WorkflowTemplate* p = template__;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::WorkflowTemplate&>(
      ::flyteidl::core::_WorkflowTemplate_default_instance_);
}
inline const ::flyteidl::core::WorkflowTemplate& CompiledWorkflow::template_() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.CompiledWorkflow.template)
  return _internal_template_();
}
inline void CompiledWorkflow::unsafe_arena_set_allocated_template_(
    ::flyteidl::core::WorkflowTemplate* template_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(template__);
  }
  template__ = template_;
  if (template_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.CompiledWorkflow.template)
}
inline ::flyteidl::core::WorkflowTemplate* CompiledWorkflow::release_template_() {
  
  ::flyteidl::core::WorkflowTemplate* temp = template__;
  template__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::WorkflowTemplate* CompiledWorkflow::unsafe_arena_release_template_() {
  // @@protoc_insertion_point(field_release:flyteidl.core.CompiledWorkflow.template)
  
  ::flyteidl::core::WorkflowTemplate* temp = template__;
  template__ = nullptr;
  return temp;
}
inline ::flyteidl::core::WorkflowTemplate* CompiledWorkflow::_internal_mutable_template_() {
  
  if (template__ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::WorkflowTemplate>(GetArenaForAllocation());
    template__ = p;
  }
  return template__;
}
inline ::flyteidl::core::WorkflowTemplate* CompiledWorkflow::mutable_template_() {
  ::flyteidl::core::WorkflowTemplate* _msg = _internal_mutable_template_();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.CompiledWorkflow.template)
  return _msg;
}
inline void CompiledWorkflow::set_allocated_template_(::flyteidl::core::WorkflowTemplate* template_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(template__);
  }
  if (template_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(template_));
    if (message_arena != submessage_arena) {
      template_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, template_, submessage_arena);
    }
    
  } else {
    
  }
  template__ = template_;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.CompiledWorkflow.template)
}

// .flyteidl.core.ConnectionSet connections = 2 [json_name = "connections"];
inline bool CompiledWorkflow::_internal_has_connections() const {
  return this != internal_default_instance() && connections_ != nullptr;
}
inline bool CompiledWorkflow::has_connections() const {
  return _internal_has_connections();
}
inline void CompiledWorkflow::clear_connections() {
  if (GetArenaForAllocation() == nullptr && connections_ != nullptr) {
    delete connections_;
  }
  connections_ = nullptr;
}
inline const ::flyteidl::core::ConnectionSet& CompiledWorkflow::_internal_connections() const {
  const ::flyteidl::core::ConnectionSet* p = connections_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::ConnectionSet&>(
      ::flyteidl::core::_ConnectionSet_default_instance_);
}
inline const ::flyteidl::core::ConnectionSet& CompiledWorkflow::connections() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.CompiledWorkflow.connections)
  return _internal_connections();
}
inline void CompiledWorkflow::unsafe_arena_set_allocated_connections(
    ::flyteidl::core::ConnectionSet* connections) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connections_);
  }
  connections_ = connections;
  if (connections) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.CompiledWorkflow.connections)
}
inline ::flyteidl::core::ConnectionSet* CompiledWorkflow::release_connections() {
  
  ::flyteidl::core::ConnectionSet* temp = connections_;
  connections_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::ConnectionSet* CompiledWorkflow::unsafe_arena_release_connections() {
  // @@protoc_insertion_point(field_release:flyteidl.core.CompiledWorkflow.connections)
  
  ::flyteidl::core::ConnectionSet* temp = connections_;
  connections_ = nullptr;
  return temp;
}
inline ::flyteidl::core::ConnectionSet* CompiledWorkflow::_internal_mutable_connections() {
  
  if (connections_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::ConnectionSet>(GetArenaForAllocation());
    connections_ = p;
  }
  return connections_;
}
inline ::flyteidl::core::ConnectionSet* CompiledWorkflow::mutable_connections() {
  ::flyteidl::core::ConnectionSet* _msg = _internal_mutable_connections();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.CompiledWorkflow.connections)
  return _msg;
}
inline void CompiledWorkflow::set_allocated_connections(::flyteidl::core::ConnectionSet* connections) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete connections_;
  }
  if (connections) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::ConnectionSet>::GetOwningArena(connections);
    if (message_arena != submessage_arena) {
      connections = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connections, submessage_arena);
    }
    
  } else {
    
  }
  connections_ = connections;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.CompiledWorkflow.connections)
}

// -------------------------------------------------------------------

// CompiledTask

// .flyteidl.core.TaskTemplate template = 1 [json_name = "template"];
inline bool CompiledTask::_internal_has_template_() const {
  return this != internal_default_instance() && template__ != nullptr;
}
inline bool CompiledTask::has_template_() const {
  return _internal_has_template_();
}
inline const ::flyteidl::core::TaskTemplate& CompiledTask::_internal_template_() const {
  const ::flyteidl::core::TaskTemplate* p = template__;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::TaskTemplate&>(
      ::flyteidl::core::_TaskTemplate_default_instance_);
}
inline const ::flyteidl::core::TaskTemplate& CompiledTask::template_() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.CompiledTask.template)
  return _internal_template_();
}
inline void CompiledTask::unsafe_arena_set_allocated_template_(
    ::flyteidl::core::TaskTemplate* template_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(template__);
  }
  template__ = template_;
  if (template_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.CompiledTask.template)
}
inline ::flyteidl::core::TaskTemplate* CompiledTask::release_template_() {
  
  ::flyteidl::core::TaskTemplate* temp = template__;
  template__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::TaskTemplate* CompiledTask::unsafe_arena_release_template_() {
  // @@protoc_insertion_point(field_release:flyteidl.core.CompiledTask.template)
  
  ::flyteidl::core::TaskTemplate* temp = template__;
  template__ = nullptr;
  return temp;
}
inline ::flyteidl::core::TaskTemplate* CompiledTask::_internal_mutable_template_() {
  
  if (template__ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::TaskTemplate>(GetArenaForAllocation());
    template__ = p;
  }
  return template__;
}
inline ::flyteidl::core::TaskTemplate* CompiledTask::mutable_template_() {
  ::flyteidl::core::TaskTemplate* _msg = _internal_mutable_template_();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.CompiledTask.template)
  return _msg;
}
inline void CompiledTask::set_allocated_template_(::flyteidl::core::TaskTemplate* template_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(template__);
  }
  if (template_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(template_));
    if (message_arena != submessage_arena) {
      template_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, template_, submessage_arena);
    }
    
  } else {
    
  }
  template__ = template_;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.CompiledTask.template)
}

// -------------------------------------------------------------------

// CompiledWorkflowClosure

// .flyteidl.core.CompiledWorkflow primary = 1 [json_name = "primary"];
inline bool CompiledWorkflowClosure::_internal_has_primary() const {
  return this != internal_default_instance() && primary_ != nullptr;
}
inline bool CompiledWorkflowClosure::has_primary() const {
  return _internal_has_primary();
}
inline void CompiledWorkflowClosure::clear_primary() {
  if (GetArenaForAllocation() == nullptr && primary_ != nullptr) {
    delete primary_;
  }
  primary_ = nullptr;
}
inline const ::flyteidl::core::CompiledWorkflow& CompiledWorkflowClosure::_internal_primary() const {
  const ::flyteidl::core::CompiledWorkflow* p = primary_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::CompiledWorkflow&>(
      ::flyteidl::core::_CompiledWorkflow_default_instance_);
}
inline const ::flyteidl::core::CompiledWorkflow& CompiledWorkflowClosure::primary() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.CompiledWorkflowClosure.primary)
  return _internal_primary();
}
inline void CompiledWorkflowClosure::unsafe_arena_set_allocated_primary(
    ::flyteidl::core::CompiledWorkflow* primary) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(primary_);
  }
  primary_ = primary;
  if (primary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.CompiledWorkflowClosure.primary)
}
inline ::flyteidl::core::CompiledWorkflow* CompiledWorkflowClosure::release_primary() {
  
  ::flyteidl::core::CompiledWorkflow* temp = primary_;
  primary_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::CompiledWorkflow* CompiledWorkflowClosure::unsafe_arena_release_primary() {
  // @@protoc_insertion_point(field_release:flyteidl.core.CompiledWorkflowClosure.primary)
  
  ::flyteidl::core::CompiledWorkflow* temp = primary_;
  primary_ = nullptr;
  return temp;
}
inline ::flyteidl::core::CompiledWorkflow* CompiledWorkflowClosure::_internal_mutable_primary() {
  
  if (primary_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::CompiledWorkflow>(GetArenaForAllocation());
    primary_ = p;
  }
  return primary_;
}
inline ::flyteidl::core::CompiledWorkflow* CompiledWorkflowClosure::mutable_primary() {
  ::flyteidl::core::CompiledWorkflow* _msg = _internal_mutable_primary();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.CompiledWorkflowClosure.primary)
  return _msg;
}
inline void CompiledWorkflowClosure::set_allocated_primary(::flyteidl::core::CompiledWorkflow* primary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete primary_;
  }
  if (primary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::CompiledWorkflow>::GetOwningArena(primary);
    if (message_arena != submessage_arena) {
      primary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, primary, submessage_arena);
    }
    
  } else {
    
  }
  primary_ = primary;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.CompiledWorkflowClosure.primary)
}

// repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2 [json_name = "subWorkflows"];
inline int CompiledWorkflowClosure::_internal_sub_workflows_size() const {
  return sub_workflows_.size();
}
inline int CompiledWorkflowClosure::sub_workflows_size() const {
  return _internal_sub_workflows_size();
}
inline void CompiledWorkflowClosure::clear_sub_workflows() {
  sub_workflows_.Clear();
}
inline ::flyteidl::core::CompiledWorkflow* CompiledWorkflowClosure::mutable_sub_workflows(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.CompiledWorkflowClosure.sub_workflows)
  return sub_workflows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::CompiledWorkflow >*
CompiledWorkflowClosure::mutable_sub_workflows() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.CompiledWorkflowClosure.sub_workflows)
  return &sub_workflows_;
}
inline const ::flyteidl::core::CompiledWorkflow& CompiledWorkflowClosure::_internal_sub_workflows(int index) const {
  return sub_workflows_.Get(index);
}
inline const ::flyteidl::core::CompiledWorkflow& CompiledWorkflowClosure::sub_workflows(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.CompiledWorkflowClosure.sub_workflows)
  return _internal_sub_workflows(index);
}
inline ::flyteidl::core::CompiledWorkflow* CompiledWorkflowClosure::_internal_add_sub_workflows() {
  return sub_workflows_.Add();
}
inline ::flyteidl::core::CompiledWorkflow* CompiledWorkflowClosure::add_sub_workflows() {
  ::flyteidl::core::CompiledWorkflow* _add = _internal_add_sub_workflows();
  // @@protoc_insertion_point(field_add:flyteidl.core.CompiledWorkflowClosure.sub_workflows)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::CompiledWorkflow >&
CompiledWorkflowClosure::sub_workflows() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.CompiledWorkflowClosure.sub_workflows)
  return sub_workflows_;
}

// repeated .flyteidl.core.CompiledTask tasks = 3 [json_name = "tasks"];
inline int CompiledWorkflowClosure::_internal_tasks_size() const {
  return tasks_.size();
}
inline int CompiledWorkflowClosure::tasks_size() const {
  return _internal_tasks_size();
}
inline void CompiledWorkflowClosure::clear_tasks() {
  tasks_.Clear();
}
inline ::flyteidl::core::CompiledTask* CompiledWorkflowClosure::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.CompiledWorkflowClosure.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::CompiledTask >*
CompiledWorkflowClosure::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.CompiledWorkflowClosure.tasks)
  return &tasks_;
}
inline const ::flyteidl::core::CompiledTask& CompiledWorkflowClosure::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::flyteidl::core::CompiledTask& CompiledWorkflowClosure::tasks(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.CompiledWorkflowClosure.tasks)
  return _internal_tasks(index);
}
inline ::flyteidl::core::CompiledTask* CompiledWorkflowClosure::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::flyteidl::core::CompiledTask* CompiledWorkflowClosure::add_tasks() {
  ::flyteidl::core::CompiledTask* _add = _internal_add_tasks();
  // @@protoc_insertion_point(field_add:flyteidl.core.CompiledWorkflowClosure.tasks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::CompiledTask >&
CompiledWorkflowClosure::tasks() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.CompiledWorkflowClosure.tasks)
  return tasks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fcore_2fcompiler_2eproto
