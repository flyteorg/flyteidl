# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyteadmin.models.core_quality_of_service import CoreQualityOfService  # noqa: F401,E501
from flyteadmin.models.workflow_metadata_on_failure_policy import WorkflowMetadataOnFailurePolicy  # noqa: F401,E501


class CoreWorkflowMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'quality_of_service': 'CoreQualityOfService',
        'on_failure': 'WorkflowMetadataOnFailurePolicy',
        'tags': 'dict(str, str)'
    }

    attribute_map = {
        'quality_of_service': 'quality_of_service',
        'on_failure': 'on_failure',
        'tags': 'tags'
    }

    def __init__(self, quality_of_service=None, on_failure=None, tags=None):  # noqa: E501
        """CoreWorkflowMetadata - a model defined in Swagger"""  # noqa: E501

        self._quality_of_service = None
        self._on_failure = None
        self._tags = None
        self.discriminator = None

        if quality_of_service is not None:
            self.quality_of_service = quality_of_service
        if on_failure is not None:
            self.on_failure = on_failure
        if tags is not None:
            self.tags = tags

    @property
    def quality_of_service(self):
        """Gets the quality_of_service of this CoreWorkflowMetadata.  # noqa: E501

        Indicates the runtime priority of workflow executions.  # noqa: E501

        :return: The quality_of_service of this CoreWorkflowMetadata.  # noqa: E501
        :rtype: CoreQualityOfService
        """
        return self._quality_of_service

    @quality_of_service.setter
    def quality_of_service(self, quality_of_service):
        """Sets the quality_of_service of this CoreWorkflowMetadata.

        Indicates the runtime priority of workflow executions.  # noqa: E501

        :param quality_of_service: The quality_of_service of this CoreWorkflowMetadata.  # noqa: E501
        :type: CoreQualityOfService
        """

        self._quality_of_service = quality_of_service

    @property
    def on_failure(self):
        """Gets the on_failure of this CoreWorkflowMetadata.  # noqa: E501

        Defines how the system should behave when a failure is detected in the workflow execution.  # noqa: E501

        :return: The on_failure of this CoreWorkflowMetadata.  # noqa: E501
        :rtype: WorkflowMetadataOnFailurePolicy
        """
        return self._on_failure

    @on_failure.setter
    def on_failure(self, on_failure):
        """Sets the on_failure of this CoreWorkflowMetadata.

        Defines how the system should behave when a failure is detected in the workflow execution.  # noqa: E501

        :param on_failure: The on_failure of this CoreWorkflowMetadata.  # noqa: E501
        :type: WorkflowMetadataOnFailurePolicy
        """

        self._on_failure = on_failure

    @property
    def tags(self):
        """Gets the tags of this CoreWorkflowMetadata.  # noqa: E501


        :return: The tags of this CoreWorkflowMetadata.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CoreWorkflowMetadata.


        :param tags: The tags of this CoreWorkflowMetadata.  # noqa: E501
        :type: dict(str, str)
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoreWorkflowMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreWorkflowMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
