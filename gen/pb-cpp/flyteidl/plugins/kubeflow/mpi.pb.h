// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/kubeflow/mpi.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/tasks.pb.h"
#include "flyteidl/plugins/kubeflow/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto();
namespace flyteidl {
namespace plugins {
namespace kubeflow {
class DistributedMPITrainingReplicaSpec;
class DistributedMPITrainingReplicaSpecDefaultTypeInternal;
extern DistributedMPITrainingReplicaSpecDefaultTypeInternal _DistributedMPITrainingReplicaSpec_default_instance_;
class DistributedMPITrainingTask;
class DistributedMPITrainingTaskDefaultTypeInternal;
extern DistributedMPITrainingTaskDefaultTypeInternal _DistributedMPITrainingTask_default_instance_;
}  // namespace kubeflow
}  // namespace plugins
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec* Arena::CreateMaybeMessage<::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec>(Arena*);
template<> ::flyteidl::plugins::kubeflow::DistributedMPITrainingTask* Arena::CreateMaybeMessage<::flyteidl::plugins::kubeflow::DistributedMPITrainingTask>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace plugins {
namespace kubeflow {

// ===================================================================

class DistributedMPITrainingTask final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.kubeflow.DistributedMPITrainingTask) */ {
 public:
  DistributedMPITrainingTask();
  virtual ~DistributedMPITrainingTask();

  DistributedMPITrainingTask(const DistributedMPITrainingTask& from);

  inline DistributedMPITrainingTask& operator=(const DistributedMPITrainingTask& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DistributedMPITrainingTask(DistributedMPITrainingTask&& from) noexcept
    : DistributedMPITrainingTask() {
    *this = ::std::move(from);
  }

  inline DistributedMPITrainingTask& operator=(DistributedMPITrainingTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DistributedMPITrainingTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DistributedMPITrainingTask* internal_default_instance() {
    return reinterpret_cast<const DistributedMPITrainingTask*>(
               &_DistributedMPITrainingTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DistributedMPITrainingTask* other);
  friend void swap(DistributedMPITrainingTask& a, DistributedMPITrainingTask& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DistributedMPITrainingTask* New() const final {
    return CreateMaybeMessage<DistributedMPITrainingTask>(nullptr);
  }

  DistributedMPITrainingTask* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DistributedMPITrainingTask>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DistributedMPITrainingTask& from);
  void MergeFrom(const DistributedMPITrainingTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistributedMPITrainingTask* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec worker_replicas = 1;
  bool has_worker_replicas() const;
  void clear_worker_replicas();
  static const int kWorkerReplicasFieldNumber = 1;
  const ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec& worker_replicas() const;
  ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec* release_worker_replicas();
  ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec* mutable_worker_replicas();
  void set_allocated_worker_replicas(::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec* worker_replicas);

  // .flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec launcher_replicas = 2;
  bool has_launcher_replicas() const;
  void clear_launcher_replicas();
  static const int kLauncherReplicasFieldNumber = 2;
  const ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec& launcher_replicas() const;
  ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec* release_launcher_replicas();
  ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec* mutable_launcher_replicas();
  void set_allocated_launcher_replicas(::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec* launcher_replicas);

  // .flyteidl.plugins.kubeflow.RunPolicy run_policy = 3;
  bool has_run_policy() const;
  void clear_run_policy();
  static const int kRunPolicyFieldNumber = 3;
  const ::flyteidl::plugins::kubeflow::RunPolicy& run_policy() const;
  ::flyteidl::plugins::kubeflow::RunPolicy* release_run_policy();
  ::flyteidl::plugins::kubeflow::RunPolicy* mutable_run_policy();
  void set_allocated_run_policy(::flyteidl::plugins::kubeflow::RunPolicy* run_policy);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.kubeflow.DistributedMPITrainingTask)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec* worker_replicas_;
  ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec* launcher_replicas_;
  ::flyteidl::plugins::kubeflow::RunPolicy* run_policy_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto;
};
// -------------------------------------------------------------------

class DistributedMPITrainingReplicaSpec final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec) */ {
 public:
  DistributedMPITrainingReplicaSpec();
  virtual ~DistributedMPITrainingReplicaSpec();

  DistributedMPITrainingReplicaSpec(const DistributedMPITrainingReplicaSpec& from);

  inline DistributedMPITrainingReplicaSpec& operator=(const DistributedMPITrainingReplicaSpec& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DistributedMPITrainingReplicaSpec(DistributedMPITrainingReplicaSpec&& from) noexcept
    : DistributedMPITrainingReplicaSpec() {
    *this = ::std::move(from);
  }

  inline DistributedMPITrainingReplicaSpec& operator=(DistributedMPITrainingReplicaSpec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DistributedMPITrainingReplicaSpec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DistributedMPITrainingReplicaSpec* internal_default_instance() {
    return reinterpret_cast<const DistributedMPITrainingReplicaSpec*>(
               &_DistributedMPITrainingReplicaSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DistributedMPITrainingReplicaSpec* other);
  friend void swap(DistributedMPITrainingReplicaSpec& a, DistributedMPITrainingReplicaSpec& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DistributedMPITrainingReplicaSpec* New() const final {
    return CreateMaybeMessage<DistributedMPITrainingReplicaSpec>(nullptr);
  }

  DistributedMPITrainingReplicaSpec* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DistributedMPITrainingReplicaSpec>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DistributedMPITrainingReplicaSpec& from);
  void MergeFrom(const DistributedMPITrainingReplicaSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistributedMPITrainingReplicaSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string command = 5;
  int command_size() const;
  void clear_command();
  static const int kCommandFieldNumber = 5;
  const ::std::string& command(int index) const;
  ::std::string* mutable_command(int index);
  void set_command(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_command(int index, ::std::string&& value);
  #endif
  void set_command(int index, const char* value);
  void set_command(int index, const char* value, size_t size);
  ::std::string* add_command();
  void add_command(const ::std::string& value);
  #if LANG_CXX11
  void add_command(::std::string&& value);
  #endif
  void add_command(const char* value);
  void add_command(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& command() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_command();

  // string image = 2;
  void clear_image();
  static const int kImageFieldNumber = 2;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  #if LANG_CXX11
  void set_image(::std::string&& value);
  #endif
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  // .flyteidl.core.Resources resources = 3;
  bool has_resources() const;
  void clear_resources();
  static const int kResourcesFieldNumber = 3;
  const ::flyteidl::core::Resources& resources() const;
  ::flyteidl::core::Resources* release_resources();
  ::flyteidl::core::Resources* mutable_resources();
  void set_allocated_resources(::flyteidl::core::Resources* resources);

  // int32 replicas = 1;
  void clear_replicas();
  static const int kReplicasFieldNumber = 1;
  ::google::protobuf::int32 replicas() const;
  void set_replicas(::google::protobuf::int32 value);

  // .flyteidl.plugins.kubeflow.RestartPolicy restart_policy = 4;
  void clear_restart_policy();
  static const int kRestartPolicyFieldNumber = 4;
  ::flyteidl::plugins::kubeflow::RestartPolicy restart_policy() const;
  void set_restart_policy(::flyteidl::plugins::kubeflow::RestartPolicy value);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> command_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  ::flyteidl::core::Resources* resources_;
  ::google::protobuf::int32 replicas_;
  int restart_policy_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DistributedMPITrainingTask

// .flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec worker_replicas = 1;
inline bool DistributedMPITrainingTask::has_worker_replicas() const {
  return this != internal_default_instance() && worker_replicas_ != nullptr;
}
inline void DistributedMPITrainingTask::clear_worker_replicas() {
  if (GetArenaNoVirtual() == nullptr && worker_replicas_ != nullptr) {
    delete worker_replicas_;
  }
  worker_replicas_ = nullptr;
}
inline const ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec& DistributedMPITrainingTask::worker_replicas() const {
  const ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec* p = worker_replicas_;
  // @@protoc_insertion_point(field_get:flyteidl.plugins.kubeflow.DistributedMPITrainingTask.worker_replicas)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec*>(
      &::flyteidl::plugins::kubeflow::_DistributedMPITrainingReplicaSpec_default_instance_);
}
inline ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec* DistributedMPITrainingTask::release_worker_replicas() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.kubeflow.DistributedMPITrainingTask.worker_replicas)
  
  ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec* temp = worker_replicas_;
  worker_replicas_ = nullptr;
  return temp;
}
inline ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec* DistributedMPITrainingTask::mutable_worker_replicas() {
  
  if (worker_replicas_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec>(GetArenaNoVirtual());
    worker_replicas_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.kubeflow.DistributedMPITrainingTask.worker_replicas)
  return worker_replicas_;
}
inline void DistributedMPITrainingTask::set_allocated_worker_replicas(::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec* worker_replicas) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete worker_replicas_;
  }
  if (worker_replicas) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      worker_replicas = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, worker_replicas, submessage_arena);
    }
    
  } else {
    
  }
  worker_replicas_ = worker_replicas;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.kubeflow.DistributedMPITrainingTask.worker_replicas)
}

// .flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec launcher_replicas = 2;
inline bool DistributedMPITrainingTask::has_launcher_replicas() const {
  return this != internal_default_instance() && launcher_replicas_ != nullptr;
}
inline void DistributedMPITrainingTask::clear_launcher_replicas() {
  if (GetArenaNoVirtual() == nullptr && launcher_replicas_ != nullptr) {
    delete launcher_replicas_;
  }
  launcher_replicas_ = nullptr;
}
inline const ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec& DistributedMPITrainingTask::launcher_replicas() const {
  const ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec* p = launcher_replicas_;
  // @@protoc_insertion_point(field_get:flyteidl.plugins.kubeflow.DistributedMPITrainingTask.launcher_replicas)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec*>(
      &::flyteidl::plugins::kubeflow::_DistributedMPITrainingReplicaSpec_default_instance_);
}
inline ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec* DistributedMPITrainingTask::release_launcher_replicas() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.kubeflow.DistributedMPITrainingTask.launcher_replicas)
  
  ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec* temp = launcher_replicas_;
  launcher_replicas_ = nullptr;
  return temp;
}
inline ::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec* DistributedMPITrainingTask::mutable_launcher_replicas() {
  
  if (launcher_replicas_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec>(GetArenaNoVirtual());
    launcher_replicas_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.kubeflow.DistributedMPITrainingTask.launcher_replicas)
  return launcher_replicas_;
}
inline void DistributedMPITrainingTask::set_allocated_launcher_replicas(::flyteidl::plugins::kubeflow::DistributedMPITrainingReplicaSpec* launcher_replicas) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete launcher_replicas_;
  }
  if (launcher_replicas) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      launcher_replicas = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, launcher_replicas, submessage_arena);
    }
    
  } else {
    
  }
  launcher_replicas_ = launcher_replicas;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.kubeflow.DistributedMPITrainingTask.launcher_replicas)
}

// .flyteidl.plugins.kubeflow.RunPolicy run_policy = 3;
inline bool DistributedMPITrainingTask::has_run_policy() const {
  return this != internal_default_instance() && run_policy_ != nullptr;
}
inline const ::flyteidl::plugins::kubeflow::RunPolicy& DistributedMPITrainingTask::run_policy() const {
  const ::flyteidl::plugins::kubeflow::RunPolicy* p = run_policy_;
  // @@protoc_insertion_point(field_get:flyteidl.plugins.kubeflow.DistributedMPITrainingTask.run_policy)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::plugins::kubeflow::RunPolicy*>(
      &::flyteidl::plugins::kubeflow::_RunPolicy_default_instance_);
}
inline ::flyteidl::plugins::kubeflow::RunPolicy* DistributedMPITrainingTask::release_run_policy() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.kubeflow.DistributedMPITrainingTask.run_policy)
  
  ::flyteidl::plugins::kubeflow::RunPolicy* temp = run_policy_;
  run_policy_ = nullptr;
  return temp;
}
inline ::flyteidl::plugins::kubeflow::RunPolicy* DistributedMPITrainingTask::mutable_run_policy() {
  
  if (run_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::plugins::kubeflow::RunPolicy>(GetArenaNoVirtual());
    run_policy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.kubeflow.DistributedMPITrainingTask.run_policy)
  return run_policy_;
}
inline void DistributedMPITrainingTask::set_allocated_run_policy(::flyteidl::plugins::kubeflow::RunPolicy* run_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(run_policy_);
  }
  if (run_policy) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      run_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, run_policy, submessage_arena);
    }
    
  } else {
    
  }
  run_policy_ = run_policy;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.kubeflow.DistributedMPITrainingTask.run_policy)
}

// -------------------------------------------------------------------

// DistributedMPITrainingReplicaSpec

// int32 replicas = 1;
inline void DistributedMPITrainingReplicaSpec::clear_replicas() {
  replicas_ = 0;
}
inline ::google::protobuf::int32 DistributedMPITrainingReplicaSpec::replicas() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.replicas)
  return replicas_;
}
inline void DistributedMPITrainingReplicaSpec::set_replicas(::google::protobuf::int32 value) {
  
  replicas_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.replicas)
}

// string image = 2;
inline void DistributedMPITrainingReplicaSpec::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DistributedMPITrainingReplicaSpec::image() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.image)
  return image_.GetNoArena();
}
inline void DistributedMPITrainingReplicaSpec::set_image(const ::std::string& value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.image)
}
#if LANG_CXX11
inline void DistributedMPITrainingReplicaSpec::set_image(::std::string&& value) {
  
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.image)
}
#endif
inline void DistributedMPITrainingReplicaSpec::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.image)
}
inline void DistributedMPITrainingReplicaSpec::set_image(const char* value, size_t size) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.image)
}
inline ::std::string* DistributedMPITrainingReplicaSpec::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DistributedMPITrainingReplicaSpec::release_image() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.image)
  
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DistributedMPITrainingReplicaSpec::set_allocated_image(::std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.image)
}

// .flyteidl.core.Resources resources = 3;
inline bool DistributedMPITrainingReplicaSpec::has_resources() const {
  return this != internal_default_instance() && resources_ != nullptr;
}
inline const ::flyteidl::core::Resources& DistributedMPITrainingReplicaSpec::resources() const {
  const ::flyteidl::core::Resources* p = resources_;
  // @@protoc_insertion_point(field_get:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.resources)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Resources*>(
      &::flyteidl::core::_Resources_default_instance_);
}
inline ::flyteidl::core::Resources* DistributedMPITrainingReplicaSpec::release_resources() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.resources)
  
  ::flyteidl::core::Resources* temp = resources_;
  resources_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Resources* DistributedMPITrainingReplicaSpec::mutable_resources() {
  
  if (resources_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Resources>(GetArenaNoVirtual());
    resources_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.resources)
  return resources_;
}
inline void DistributedMPITrainingReplicaSpec::set_allocated_resources(::flyteidl::core::Resources* resources) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(resources_);
  }
  if (resources) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resources = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resources, submessage_arena);
    }
    
  } else {
    
  }
  resources_ = resources;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.resources)
}

// .flyteidl.plugins.kubeflow.RestartPolicy restart_policy = 4;
inline void DistributedMPITrainingReplicaSpec::clear_restart_policy() {
  restart_policy_ = 0;
}
inline ::flyteidl::plugins::kubeflow::RestartPolicy DistributedMPITrainingReplicaSpec::restart_policy() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.restart_policy)
  return static_cast< ::flyteidl::plugins::kubeflow::RestartPolicy >(restart_policy_);
}
inline void DistributedMPITrainingReplicaSpec::set_restart_policy(::flyteidl::plugins::kubeflow::RestartPolicy value) {
  
  restart_policy_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.restart_policy)
}

// repeated string command = 5;
inline int DistributedMPITrainingReplicaSpec::command_size() const {
  return command_.size();
}
inline void DistributedMPITrainingReplicaSpec::clear_command() {
  command_.Clear();
}
inline const ::std::string& DistributedMPITrainingReplicaSpec::command(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.command)
  return command_.Get(index);
}
inline ::std::string* DistributedMPITrainingReplicaSpec::mutable_command(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.command)
  return command_.Mutable(index);
}
inline void DistributedMPITrainingReplicaSpec::set_command(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.command)
  command_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DistributedMPITrainingReplicaSpec::set_command(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.command)
  command_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DistributedMPITrainingReplicaSpec::set_command(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  command_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.command)
}
inline void DistributedMPITrainingReplicaSpec::set_command(int index, const char* value, size_t size) {
  command_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.command)
}
inline ::std::string* DistributedMPITrainingReplicaSpec::add_command() {
  // @@protoc_insertion_point(field_add_mutable:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.command)
  return command_.Add();
}
inline void DistributedMPITrainingReplicaSpec::add_command(const ::std::string& value) {
  command_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.command)
}
#if LANG_CXX11
inline void DistributedMPITrainingReplicaSpec::add_command(::std::string&& value) {
  command_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.command)
}
#endif
inline void DistributedMPITrainingReplicaSpec::add_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  command_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.command)
}
inline void DistributedMPITrainingReplicaSpec::add_command(const char* value, size_t size) {
  command_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.command)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
DistributedMPITrainingReplicaSpec::command() const {
  // @@protoc_insertion_point(field_list:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.command)
  return command_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
DistributedMPITrainingReplicaSpec::mutable_command() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.plugins.kubeflow.DistributedMPITrainingReplicaSpec.command)
  return &command_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kubeflow
}  // namespace plugins
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fplugins_2fkubeflow_2fmpi_2eproto
