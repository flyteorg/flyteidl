# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyteadmin.models.admin_labels import AdminLabels  # noqa: F401,E501
from flyteadmin.models.admin_long_description import AdminLongDescription  # noqa: F401,E501
from flyteadmin.models.admin_source_code import AdminSourceCode  # noqa: F401,E501


class AdminEntityDescription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'short_description': 'str',
        'long_description': 'AdminLongDescription',
        'tags': 'list[str]',
        'labels': 'AdminLabels',
        'source': 'AdminSourceCode'
    }

    attribute_map = {
        'short_description': 'short_description',
        'long_description': 'long_description',
        'tags': 'tags',
        'labels': 'labels',
        'source': 'source'
    }

    def __init__(self, short_description=None, long_description=None, tags=None, labels=None, source=None):  # noqa: E501
        """AdminEntityDescription - a model defined in Swagger"""  # noqa: E501

        self._short_description = None
        self._long_description = None
        self._tags = None
        self._labels = None
        self._source = None
        self.discriminator = None

        if short_description is not None:
            self.short_description = short_description
        if long_description is not None:
            self.long_description = long_description
        if tags is not None:
            self.tags = tags
        if labels is not None:
            self.labels = labels
        if source is not None:
            self.source = source

    @property
    def short_description(self):
        """Gets the short_description of this AdminEntityDescription.  # noqa: E501

        One-liner overview of the entity.  # noqa: E501

        :return: The short_description of this AdminEntityDescription.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this AdminEntityDescription.

        One-liner overview of the entity.  # noqa: E501

        :param short_description: The short_description of this AdminEntityDescription.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def long_description(self):
        """Gets the long_description of this AdminEntityDescription.  # noqa: E501

        Full user description with formatting preserved.  # noqa: E501

        :return: The long_description of this AdminEntityDescription.  # noqa: E501
        :rtype: AdminLongDescription
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this AdminEntityDescription.

        Full user description with formatting preserved.  # noqa: E501

        :param long_description: The long_description of this AdminEntityDescription.  # noqa: E501
        :type: AdminLongDescription
        """

        self._long_description = long_description

    @property
    def tags(self):
        """Gets the tags of this AdminEntityDescription.  # noqa: E501

        User-specified tags. These are arbitrary and can be used for searching filtering and discovering entities.  # noqa: E501

        :return: The tags of this AdminEntityDescription.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AdminEntityDescription.

        User-specified tags. These are arbitrary and can be used for searching filtering and discovering entities.  # noqa: E501

        :param tags: The tags of this AdminEntityDescription.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def labels(self):
        """Gets the labels of this AdminEntityDescription.  # noqa: E501

        User-defined free-form key-value pair attributes. These are arbitrary and can be used for searching, filtering and discovering entities.  # noqa: E501

        :return: The labels of this AdminEntityDescription.  # noqa: E501
        :rtype: AdminLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this AdminEntityDescription.

        User-defined free-form key-value pair attributes. These are arbitrary and can be used for searching, filtering and discovering entities.  # noqa: E501

        :param labels: The labels of this AdminEntityDescription.  # noqa: E501
        :type: AdminLabels
        """

        self._labels = labels

    @property
    def source(self):
        """Gets the source of this AdminEntityDescription.  # noqa: E501

        Optional link to source code used to define this entity.  # noqa: E501

        :return: The source of this AdminEntityDescription.  # noqa: E501
        :rtype: AdminSourceCode
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this AdminEntityDescription.

        Optional link to source code used to define this entity.  # noqa: E501

        :param source: The source of this AdminEntityDescription.  # noqa: E501
        :type: AdminSourceCode
        """

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdminEntityDescription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdminEntityDescription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
