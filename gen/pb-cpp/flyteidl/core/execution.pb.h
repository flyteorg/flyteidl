// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/execution.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fcore_2fexecution_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fcore_2fexecution_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fexecution_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fcore_2fexecution_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fcore_2fexecution_2eproto;
namespace flyteidl {
namespace core {
class ExecutionError;
struct ExecutionErrorDefaultTypeInternal;
extern ExecutionErrorDefaultTypeInternal _ExecutionError_default_instance_;
class NodeExecution;
struct NodeExecutionDefaultTypeInternal;
extern NodeExecutionDefaultTypeInternal _NodeExecution_default_instance_;
class QualityOfService;
struct QualityOfServiceDefaultTypeInternal;
extern QualityOfServiceDefaultTypeInternal _QualityOfService_default_instance_;
class QualityOfServiceSpec;
struct QualityOfServiceSpecDefaultTypeInternal;
extern QualityOfServiceSpecDefaultTypeInternal _QualityOfServiceSpec_default_instance_;
class TaskExecution;
struct TaskExecutionDefaultTypeInternal;
extern TaskExecutionDefaultTypeInternal _TaskExecution_default_instance_;
class TaskLog;
struct TaskLogDefaultTypeInternal;
extern TaskLogDefaultTypeInternal _TaskLog_default_instance_;
class WorkflowExecution;
struct WorkflowExecutionDefaultTypeInternal;
extern WorkflowExecutionDefaultTypeInternal _WorkflowExecution_default_instance_;
}  // namespace core
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::core::ExecutionError* Arena::CreateMaybeMessage<::flyteidl::core::ExecutionError>(Arena*);
template<> ::flyteidl::core::NodeExecution* Arena::CreateMaybeMessage<::flyteidl::core::NodeExecution>(Arena*);
template<> ::flyteidl::core::QualityOfService* Arena::CreateMaybeMessage<::flyteidl::core::QualityOfService>(Arena*);
template<> ::flyteidl::core::QualityOfServiceSpec* Arena::CreateMaybeMessage<::flyteidl::core::QualityOfServiceSpec>(Arena*);
template<> ::flyteidl::core::TaskExecution* Arena::CreateMaybeMessage<::flyteidl::core::TaskExecution>(Arena*);
template<> ::flyteidl::core::TaskLog* Arena::CreateMaybeMessage<::flyteidl::core::TaskLog>(Arena*);
template<> ::flyteidl::core::WorkflowExecution* Arena::CreateMaybeMessage<::flyteidl::core::WorkflowExecution>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace core {

enum WorkflowExecution_Phase : int {
  WorkflowExecution_Phase_UNDEFINED = 0,
  WorkflowExecution_Phase_QUEUED = 1,
  WorkflowExecution_Phase_RUNNING = 2,
  WorkflowExecution_Phase_SUCCEEDING = 3,
  WorkflowExecution_Phase_SUCCEEDED = 4,
  WorkflowExecution_Phase_FAILING = 5,
  WorkflowExecution_Phase_FAILED = 6,
  WorkflowExecution_Phase_ABORTED = 7,
  WorkflowExecution_Phase_TIMED_OUT = 8,
  WorkflowExecution_Phase_ABORTING = 9,
  WorkflowExecution_Phase_WorkflowExecution_Phase_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WorkflowExecution_Phase_WorkflowExecution_Phase_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WorkflowExecution_Phase_IsValid(int value);
constexpr WorkflowExecution_Phase WorkflowExecution_Phase_Phase_MIN = WorkflowExecution_Phase_UNDEFINED;
constexpr WorkflowExecution_Phase WorkflowExecution_Phase_Phase_MAX = WorkflowExecution_Phase_ABORTING;
constexpr int WorkflowExecution_Phase_Phase_ARRAYSIZE = WorkflowExecution_Phase_Phase_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkflowExecution_Phase_descriptor();
template<typename T>
inline const std::string& WorkflowExecution_Phase_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WorkflowExecution_Phase>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WorkflowExecution_Phase_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WorkflowExecution_Phase_descriptor(), enum_t_value);
}
inline bool WorkflowExecution_Phase_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WorkflowExecution_Phase* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WorkflowExecution_Phase>(
    WorkflowExecution_Phase_descriptor(), name, value);
}
enum NodeExecution_Phase : int {
  NodeExecution_Phase_UNDEFINED = 0,
  NodeExecution_Phase_QUEUED = 1,
  NodeExecution_Phase_RUNNING = 2,
  NodeExecution_Phase_SUCCEEDED = 3,
  NodeExecution_Phase_FAILING = 4,
  NodeExecution_Phase_FAILED = 5,
  NodeExecution_Phase_ABORTED = 6,
  NodeExecution_Phase_SKIPPED = 7,
  NodeExecution_Phase_TIMED_OUT = 8,
  NodeExecution_Phase_DYNAMIC_RUNNING = 9,
  NodeExecution_Phase_RECOVERED = 10,
  NodeExecution_Phase_NodeExecution_Phase_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NodeExecution_Phase_NodeExecution_Phase_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NodeExecution_Phase_IsValid(int value);
constexpr NodeExecution_Phase NodeExecution_Phase_Phase_MIN = NodeExecution_Phase_UNDEFINED;
constexpr NodeExecution_Phase NodeExecution_Phase_Phase_MAX = NodeExecution_Phase_RECOVERED;
constexpr int NodeExecution_Phase_Phase_ARRAYSIZE = NodeExecution_Phase_Phase_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeExecution_Phase_descriptor();
template<typename T>
inline const std::string& NodeExecution_Phase_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NodeExecution_Phase>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NodeExecution_Phase_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NodeExecution_Phase_descriptor(), enum_t_value);
}
inline bool NodeExecution_Phase_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NodeExecution_Phase* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NodeExecution_Phase>(
    NodeExecution_Phase_descriptor(), name, value);
}
enum TaskExecution_Phase : int {
  TaskExecution_Phase_UNDEFINED = 0,
  TaskExecution_Phase_QUEUED = 1,
  TaskExecution_Phase_RUNNING = 2,
  TaskExecution_Phase_SUCCEEDED = 3,
  TaskExecution_Phase_ABORTED = 4,
  TaskExecution_Phase_FAILED = 5,
  TaskExecution_Phase_INITIALIZING = 6,
  TaskExecution_Phase_WAITING_FOR_RESOURCES = 7,
  TaskExecution_Phase_TaskExecution_Phase_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TaskExecution_Phase_TaskExecution_Phase_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TaskExecution_Phase_IsValid(int value);
constexpr TaskExecution_Phase TaskExecution_Phase_Phase_MIN = TaskExecution_Phase_UNDEFINED;
constexpr TaskExecution_Phase TaskExecution_Phase_Phase_MAX = TaskExecution_Phase_WAITING_FOR_RESOURCES;
constexpr int TaskExecution_Phase_Phase_ARRAYSIZE = TaskExecution_Phase_Phase_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskExecution_Phase_descriptor();
template<typename T>
inline const std::string& TaskExecution_Phase_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TaskExecution_Phase>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TaskExecution_Phase_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TaskExecution_Phase_descriptor(), enum_t_value);
}
inline bool TaskExecution_Phase_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TaskExecution_Phase* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TaskExecution_Phase>(
    TaskExecution_Phase_descriptor(), name, value);
}
enum ExecutionError_ErrorKind : int {
  ExecutionError_ErrorKind_UNKNOWN = 0,
  ExecutionError_ErrorKind_USER = 1,
  ExecutionError_ErrorKind_SYSTEM = 2,
  ExecutionError_ErrorKind_ExecutionError_ErrorKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ExecutionError_ErrorKind_ExecutionError_ErrorKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ExecutionError_ErrorKind_IsValid(int value);
constexpr ExecutionError_ErrorKind ExecutionError_ErrorKind_ErrorKind_MIN = ExecutionError_ErrorKind_UNKNOWN;
constexpr ExecutionError_ErrorKind ExecutionError_ErrorKind_ErrorKind_MAX = ExecutionError_ErrorKind_SYSTEM;
constexpr int ExecutionError_ErrorKind_ErrorKind_ARRAYSIZE = ExecutionError_ErrorKind_ErrorKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExecutionError_ErrorKind_descriptor();
template<typename T>
inline const std::string& ExecutionError_ErrorKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ExecutionError_ErrorKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ExecutionError_ErrorKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ExecutionError_ErrorKind_descriptor(), enum_t_value);
}
inline bool ExecutionError_ErrorKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ExecutionError_ErrorKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ExecutionError_ErrorKind>(
    ExecutionError_ErrorKind_descriptor(), name, value);
}
enum TaskLog_MessageFormat : int {
  TaskLog_MessageFormat_UNKNOWN = 0,
  TaskLog_MessageFormat_CSV = 1,
  TaskLog_MessageFormat_JSON = 2,
  TaskLog_MessageFormat_TaskLog_MessageFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TaskLog_MessageFormat_TaskLog_MessageFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TaskLog_MessageFormat_IsValid(int value);
constexpr TaskLog_MessageFormat TaskLog_MessageFormat_MessageFormat_MIN = TaskLog_MessageFormat_UNKNOWN;
constexpr TaskLog_MessageFormat TaskLog_MessageFormat_MessageFormat_MAX = TaskLog_MessageFormat_JSON;
constexpr int TaskLog_MessageFormat_MessageFormat_ARRAYSIZE = TaskLog_MessageFormat_MessageFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskLog_MessageFormat_descriptor();
template<typename T>
inline const std::string& TaskLog_MessageFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TaskLog_MessageFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TaskLog_MessageFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TaskLog_MessageFormat_descriptor(), enum_t_value);
}
inline bool TaskLog_MessageFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TaskLog_MessageFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TaskLog_MessageFormat>(
    TaskLog_MessageFormat_descriptor(), name, value);
}
enum QualityOfService_Tier : int {
  QualityOfService_Tier_UNDEFINED = 0,
  QualityOfService_Tier_HIGH = 1,
  QualityOfService_Tier_MEDIUM = 2,
  QualityOfService_Tier_LOW = 3,
  QualityOfService_Tier_QualityOfService_Tier_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  QualityOfService_Tier_QualityOfService_Tier_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool QualityOfService_Tier_IsValid(int value);
constexpr QualityOfService_Tier QualityOfService_Tier_Tier_MIN = QualityOfService_Tier_UNDEFINED;
constexpr QualityOfService_Tier QualityOfService_Tier_Tier_MAX = QualityOfService_Tier_LOW;
constexpr int QualityOfService_Tier_Tier_ARRAYSIZE = QualityOfService_Tier_Tier_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QualityOfService_Tier_descriptor();
template<typename T>
inline const std::string& QualityOfService_Tier_Name(T enum_t_value) {
  static_assert(::std::is_same<T, QualityOfService_Tier>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function QualityOfService_Tier_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    QualityOfService_Tier_descriptor(), enum_t_value);
}
inline bool QualityOfService_Tier_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, QualityOfService_Tier* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<QualityOfService_Tier>(
    QualityOfService_Tier_descriptor(), name, value);
}
// ===================================================================

class WorkflowExecution final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:flyteidl.core.WorkflowExecution) */ {
 public:
  inline WorkflowExecution() : WorkflowExecution(nullptr) {}
  explicit constexpr WorkflowExecution(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowExecution(const WorkflowExecution& from);
  WorkflowExecution(WorkflowExecution&& from) noexcept
    : WorkflowExecution() {
    *this = ::std::move(from);
  }

  inline WorkflowExecution& operator=(const WorkflowExecution& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowExecution& operator=(WorkflowExecution&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowExecution& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowExecution* internal_default_instance() {
    return reinterpret_cast<const WorkflowExecution*>(
               &_WorkflowExecution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WorkflowExecution& a, WorkflowExecution& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowExecution* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowExecution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkflowExecution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkflowExecution>(arena);
  }

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.WorkflowExecution";
  }
  protected:
  explicit WorkflowExecution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WorkflowExecution_Phase Phase;
  static constexpr Phase UNDEFINED =
    WorkflowExecution_Phase_UNDEFINED;
  static constexpr Phase QUEUED =
    WorkflowExecution_Phase_QUEUED;
  static constexpr Phase RUNNING =
    WorkflowExecution_Phase_RUNNING;
  static constexpr Phase SUCCEEDING =
    WorkflowExecution_Phase_SUCCEEDING;
  static constexpr Phase SUCCEEDED =
    WorkflowExecution_Phase_SUCCEEDED;
  static constexpr Phase FAILING =
    WorkflowExecution_Phase_FAILING;
  static constexpr Phase FAILED =
    WorkflowExecution_Phase_FAILED;
  static constexpr Phase ABORTED =
    WorkflowExecution_Phase_ABORTED;
  static constexpr Phase TIMED_OUT =
    WorkflowExecution_Phase_TIMED_OUT;
  static constexpr Phase ABORTING =
    WorkflowExecution_Phase_ABORTING;
  static inline bool Phase_IsValid(int value) {
    return WorkflowExecution_Phase_IsValid(value);
  }
  static constexpr Phase Phase_MIN =
    WorkflowExecution_Phase_Phase_MIN;
  static constexpr Phase Phase_MAX =
    WorkflowExecution_Phase_Phase_MAX;
  static constexpr int Phase_ARRAYSIZE =
    WorkflowExecution_Phase_Phase_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Phase_descriptor() {
    return WorkflowExecution_Phase_descriptor();
  }
  template<typename T>
  static inline const std::string& Phase_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Phase>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Phase_Name.");
    return WorkflowExecution_Phase_Name(enum_t_value);
  }
  static inline bool Phase_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Phase* value) {
    return WorkflowExecution_Phase_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.core.WorkflowExecution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class NodeExecution final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:flyteidl.core.NodeExecution) */ {
 public:
  inline NodeExecution() : NodeExecution(nullptr) {}
  explicit constexpr NodeExecution(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeExecution(const NodeExecution& from);
  NodeExecution(NodeExecution&& from) noexcept
    : NodeExecution() {
    *this = ::std::move(from);
  }

  inline NodeExecution& operator=(const NodeExecution& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeExecution& operator=(NodeExecution&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeExecution& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeExecution* internal_default_instance() {
    return reinterpret_cast<const NodeExecution*>(
               &_NodeExecution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NodeExecution& a, NodeExecution& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeExecution* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeExecution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeExecution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeExecution>(arena);
  }

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.NodeExecution";
  }
  protected:
  explicit NodeExecution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NodeExecution_Phase Phase;
  static constexpr Phase UNDEFINED =
    NodeExecution_Phase_UNDEFINED;
  static constexpr Phase QUEUED =
    NodeExecution_Phase_QUEUED;
  static constexpr Phase RUNNING =
    NodeExecution_Phase_RUNNING;
  static constexpr Phase SUCCEEDED =
    NodeExecution_Phase_SUCCEEDED;
  static constexpr Phase FAILING =
    NodeExecution_Phase_FAILING;
  static constexpr Phase FAILED =
    NodeExecution_Phase_FAILED;
  static constexpr Phase ABORTED =
    NodeExecution_Phase_ABORTED;
  static constexpr Phase SKIPPED =
    NodeExecution_Phase_SKIPPED;
  static constexpr Phase TIMED_OUT =
    NodeExecution_Phase_TIMED_OUT;
  static constexpr Phase DYNAMIC_RUNNING =
    NodeExecution_Phase_DYNAMIC_RUNNING;
  static constexpr Phase RECOVERED =
    NodeExecution_Phase_RECOVERED;
  static inline bool Phase_IsValid(int value) {
    return NodeExecution_Phase_IsValid(value);
  }
  static constexpr Phase Phase_MIN =
    NodeExecution_Phase_Phase_MIN;
  static constexpr Phase Phase_MAX =
    NodeExecution_Phase_Phase_MAX;
  static constexpr int Phase_ARRAYSIZE =
    NodeExecution_Phase_Phase_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Phase_descriptor() {
    return NodeExecution_Phase_descriptor();
  }
  template<typename T>
  static inline const std::string& Phase_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Phase>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Phase_Name.");
    return NodeExecution_Phase_Name(enum_t_value);
  }
  static inline bool Phase_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Phase* value) {
    return NodeExecution_Phase_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.core.NodeExecution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class TaskExecution final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:flyteidl.core.TaskExecution) */ {
 public:
  inline TaskExecution() : TaskExecution(nullptr) {}
  explicit constexpr TaskExecution(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskExecution(const TaskExecution& from);
  TaskExecution(TaskExecution&& from) noexcept
    : TaskExecution() {
    *this = ::std::move(from);
  }

  inline TaskExecution& operator=(const TaskExecution& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskExecution& operator=(TaskExecution&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskExecution& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskExecution* internal_default_instance() {
    return reinterpret_cast<const TaskExecution*>(
               &_TaskExecution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TaskExecution& a, TaskExecution& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskExecution* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskExecution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskExecution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskExecution>(arena);
  }

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.TaskExecution";
  }
  protected:
  explicit TaskExecution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TaskExecution_Phase Phase;
  static constexpr Phase UNDEFINED =
    TaskExecution_Phase_UNDEFINED;
  static constexpr Phase QUEUED =
    TaskExecution_Phase_QUEUED;
  static constexpr Phase RUNNING =
    TaskExecution_Phase_RUNNING;
  static constexpr Phase SUCCEEDED =
    TaskExecution_Phase_SUCCEEDED;
  static constexpr Phase ABORTED =
    TaskExecution_Phase_ABORTED;
  static constexpr Phase FAILED =
    TaskExecution_Phase_FAILED;
  static constexpr Phase INITIALIZING =
    TaskExecution_Phase_INITIALIZING;
  static constexpr Phase WAITING_FOR_RESOURCES =
    TaskExecution_Phase_WAITING_FOR_RESOURCES;
  static inline bool Phase_IsValid(int value) {
    return TaskExecution_Phase_IsValid(value);
  }
  static constexpr Phase Phase_MIN =
    TaskExecution_Phase_Phase_MIN;
  static constexpr Phase Phase_MAX =
    TaskExecution_Phase_Phase_MAX;
  static constexpr int Phase_ARRAYSIZE =
    TaskExecution_Phase_Phase_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Phase_descriptor() {
    return TaskExecution_Phase_descriptor();
  }
  template<typename T>
  static inline const std::string& Phase_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Phase>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Phase_Name.");
    return TaskExecution_Phase_Name(enum_t_value);
  }
  static inline bool Phase_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Phase* value) {
    return TaskExecution_Phase_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.core.TaskExecution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class ExecutionError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.ExecutionError) */ {
 public:
  inline ExecutionError() : ExecutionError(nullptr) {}
  ~ExecutionError() override;
  explicit constexpr ExecutionError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecutionError(const ExecutionError& from);
  ExecutionError(ExecutionError&& from) noexcept
    : ExecutionError() {
    *this = ::std::move(from);
  }

  inline ExecutionError& operator=(const ExecutionError& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecutionError& operator=(ExecutionError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecutionError& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecutionError* internal_default_instance() {
    return reinterpret_cast<const ExecutionError*>(
               &_ExecutionError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ExecutionError& a, ExecutionError& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecutionError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecutionError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExecutionError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExecutionError>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionError* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.ExecutionError";
  }
  protected:
  explicit ExecutionError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ExecutionError_ErrorKind ErrorKind;
  static constexpr ErrorKind UNKNOWN =
    ExecutionError_ErrorKind_UNKNOWN;
  static constexpr ErrorKind USER =
    ExecutionError_ErrorKind_USER;
  static constexpr ErrorKind SYSTEM =
    ExecutionError_ErrorKind_SYSTEM;
  static inline bool ErrorKind_IsValid(int value) {
    return ExecutionError_ErrorKind_IsValid(value);
  }
  static constexpr ErrorKind ErrorKind_MIN =
    ExecutionError_ErrorKind_ErrorKind_MIN;
  static constexpr ErrorKind ErrorKind_MAX =
    ExecutionError_ErrorKind_ErrorKind_MAX;
  static constexpr int ErrorKind_ARRAYSIZE =
    ExecutionError_ErrorKind_ErrorKind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ErrorKind_descriptor() {
    return ExecutionError_ErrorKind_descriptor();
  }
  template<typename T>
  static inline const std::string& ErrorKind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ErrorKind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ErrorKind_Name.");
    return ExecutionError_ErrorKind_Name(enum_t_value);
  }
  static inline bool ErrorKind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ErrorKind* value) {
    return ExecutionError_ErrorKind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kMessageFieldNumber = 2,
    kErrorUriFieldNumber = 3,
    kKindFieldNumber = 4,
  };
  // string code = 1 [json_name = "code"];
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string message = 2 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string error_uri = 3 [json_name = "errorUri"];
  void clear_error_uri();
  const std::string& error_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_uri();
  PROTOBUF_NODISCARD std::string* release_error_uri();
  void set_allocated_error_uri(std::string* error_uri);
  private:
  const std::string& _internal_error_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_uri(const std::string& value);
  std::string* _internal_mutable_error_uri();
  public:

  // .flyteidl.core.ExecutionError.ErrorKind kind = 4 [json_name = "kind"];
  void clear_kind();
  ::flyteidl::core::ExecutionError_ErrorKind kind() const;
  void set_kind(::flyteidl::core::ExecutionError_ErrorKind value);
  private:
  ::flyteidl::core::ExecutionError_ErrorKind _internal_kind() const;
  void _internal_set_kind(::flyteidl::core::ExecutionError_ErrorKind value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.core.ExecutionError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_uri_;
  int kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class TaskLog final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.TaskLog) */ {
 public:
  inline TaskLog() : TaskLog(nullptr) {}
  ~TaskLog() override;
  explicit constexpr TaskLog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskLog(const TaskLog& from);
  TaskLog(TaskLog&& from) noexcept
    : TaskLog() {
    *this = ::std::move(from);
  }

  inline TaskLog& operator=(const TaskLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskLog& operator=(TaskLog&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskLog* internal_default_instance() {
    return reinterpret_cast<const TaskLog*>(
               &_TaskLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TaskLog& a, TaskLog& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskLog* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskLog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskLog>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskLog* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.TaskLog";
  }
  protected:
  explicit TaskLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TaskLog_MessageFormat MessageFormat;
  static constexpr MessageFormat UNKNOWN =
    TaskLog_MessageFormat_UNKNOWN;
  static constexpr MessageFormat CSV =
    TaskLog_MessageFormat_CSV;
  static constexpr MessageFormat JSON =
    TaskLog_MessageFormat_JSON;
  static inline bool MessageFormat_IsValid(int value) {
    return TaskLog_MessageFormat_IsValid(value);
  }
  static constexpr MessageFormat MessageFormat_MIN =
    TaskLog_MessageFormat_MessageFormat_MIN;
  static constexpr MessageFormat MessageFormat_MAX =
    TaskLog_MessageFormat_MessageFormat_MAX;
  static constexpr int MessageFormat_ARRAYSIZE =
    TaskLog_MessageFormat_MessageFormat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageFormat_descriptor() {
    return TaskLog_MessageFormat_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageFormat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageFormat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageFormat_Name.");
    return TaskLog_MessageFormat_Name(enum_t_value);
  }
  static inline bool MessageFormat_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MessageFormat* value) {
    return TaskLog_MessageFormat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
    kNameFieldNumber = 2,
    kTtlFieldNumber = 4,
    kMessageFormatFieldNumber = 3,
  };
  // string uri = 1 [json_name = "uri"];
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Duration ttl = 4 [json_name = "ttl"];
  bool has_ttl() const;
  private:
  bool _internal_has_ttl() const;
  public:
  void clear_ttl();
  const ::PROTOBUF_NAMESPACE_ID::Duration& ttl() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_ttl();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_ttl();
  void set_allocated_ttl(::PROTOBUF_NAMESPACE_ID::Duration* ttl);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_ttl() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_ttl();
  public:
  void unsafe_arena_set_allocated_ttl(
      ::PROTOBUF_NAMESPACE_ID::Duration* ttl);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_ttl();

  // .flyteidl.core.TaskLog.MessageFormat message_format = 3 [json_name = "messageFormat"];
  void clear_message_format();
  ::flyteidl::core::TaskLog_MessageFormat message_format() const;
  void set_message_format(::flyteidl::core::TaskLog_MessageFormat value);
  private:
  ::flyteidl::core::TaskLog_MessageFormat _internal_message_format() const;
  void _internal_set_message_format(::flyteidl::core::TaskLog_MessageFormat value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.core.TaskLog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::Duration* ttl_;
  int message_format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class QualityOfServiceSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.QualityOfServiceSpec) */ {
 public:
  inline QualityOfServiceSpec() : QualityOfServiceSpec(nullptr) {}
  ~QualityOfServiceSpec() override;
  explicit constexpr QualityOfServiceSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QualityOfServiceSpec(const QualityOfServiceSpec& from);
  QualityOfServiceSpec(QualityOfServiceSpec&& from) noexcept
    : QualityOfServiceSpec() {
    *this = ::std::move(from);
  }

  inline QualityOfServiceSpec& operator=(const QualityOfServiceSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline QualityOfServiceSpec& operator=(QualityOfServiceSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QualityOfServiceSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const QualityOfServiceSpec* internal_default_instance() {
    return reinterpret_cast<const QualityOfServiceSpec*>(
               &_QualityOfServiceSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QualityOfServiceSpec& a, QualityOfServiceSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(QualityOfServiceSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QualityOfServiceSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QualityOfServiceSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QualityOfServiceSpec>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QualityOfServiceSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.QualityOfServiceSpec";
  }
  protected:
  explicit QualityOfServiceSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueueingBudgetFieldNumber = 1,
  };
  // .google.protobuf.Duration queueing_budget = 1 [json_name = "queueingBudget"];
  bool has_queueing_budget() const;
  private:
  bool _internal_has_queueing_budget() const;
  public:
  void clear_queueing_budget();
  const ::PROTOBUF_NAMESPACE_ID::Duration& queueing_budget() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_queueing_budget();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_queueing_budget();
  void set_allocated_queueing_budget(::PROTOBUF_NAMESPACE_ID::Duration* queueing_budget);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_queueing_budget() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_queueing_budget();
  public:
  void unsafe_arena_set_allocated_queueing_budget(
      ::PROTOBUF_NAMESPACE_ID::Duration* queueing_budget);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_queueing_budget();

  // @@protoc_insertion_point(class_scope:flyteidl.core.QualityOfServiceSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Duration* queueing_budget_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class QualityOfService final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.QualityOfService) */ {
 public:
  inline QualityOfService() : QualityOfService(nullptr) {}
  ~QualityOfService() override;
  explicit constexpr QualityOfService(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QualityOfService(const QualityOfService& from);
  QualityOfService(QualityOfService&& from) noexcept
    : QualityOfService() {
    *this = ::std::move(from);
  }

  inline QualityOfService& operator=(const QualityOfService& from) {
    CopyFrom(from);
    return *this;
  }
  inline QualityOfService& operator=(QualityOfService&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QualityOfService& default_instance() {
    return *internal_default_instance();
  }
  enum DesignationCase {
    kTier = 1,
    kSpec = 2,
    DESIGNATION_NOT_SET = 0,
  };

  static inline const QualityOfService* internal_default_instance() {
    return reinterpret_cast<const QualityOfService*>(
               &_QualityOfService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QualityOfService& a, QualityOfService& b) {
    a.Swap(&b);
  }
  inline void Swap(QualityOfService* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QualityOfService* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QualityOfService* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QualityOfService>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QualityOfService* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.QualityOfService";
  }
  protected:
  explicit QualityOfService(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef QualityOfService_Tier Tier;
  static constexpr Tier UNDEFINED =
    QualityOfService_Tier_UNDEFINED;
  static constexpr Tier HIGH =
    QualityOfService_Tier_HIGH;
  static constexpr Tier MEDIUM =
    QualityOfService_Tier_MEDIUM;
  static constexpr Tier LOW =
    QualityOfService_Tier_LOW;
  static inline bool Tier_IsValid(int value) {
    return QualityOfService_Tier_IsValid(value);
  }
  static constexpr Tier Tier_MIN =
    QualityOfService_Tier_Tier_MIN;
  static constexpr Tier Tier_MAX =
    QualityOfService_Tier_Tier_MAX;
  static constexpr int Tier_ARRAYSIZE =
    QualityOfService_Tier_Tier_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Tier_descriptor() {
    return QualityOfService_Tier_descriptor();
  }
  template<typename T>
  static inline const std::string& Tier_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Tier>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Tier_Name.");
    return QualityOfService_Tier_Name(enum_t_value);
  }
  static inline bool Tier_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Tier* value) {
    return QualityOfService_Tier_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTierFieldNumber = 1,
    kSpecFieldNumber = 2,
  };
  // .flyteidl.core.QualityOfService.Tier tier = 1 [json_name = "tier"];
  bool has_tier() const;
  private:
  bool _internal_has_tier() const;
  public:
  void clear_tier();
  ::flyteidl::core::QualityOfService_Tier tier() const;
  void set_tier(::flyteidl::core::QualityOfService_Tier value);
  private:
  ::flyteidl::core::QualityOfService_Tier _internal_tier() const;
  void _internal_set_tier(::flyteidl::core::QualityOfService_Tier value);
  public:

  // .flyteidl.core.QualityOfServiceSpec spec = 2 [json_name = "spec"];
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::flyteidl::core::QualityOfServiceSpec& spec() const;
  PROTOBUF_NODISCARD ::flyteidl::core::QualityOfServiceSpec* release_spec();
  ::flyteidl::core::QualityOfServiceSpec* mutable_spec();
  void set_allocated_spec(::flyteidl::core::QualityOfServiceSpec* spec);
  private:
  const ::flyteidl::core::QualityOfServiceSpec& _internal_spec() const;
  ::flyteidl::core::QualityOfServiceSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::flyteidl::core::QualityOfServiceSpec* spec);
  ::flyteidl::core::QualityOfServiceSpec* unsafe_arena_release_spec();

  void clear_designation();
  DesignationCase designation_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.core.QualityOfService)
 private:
  class _Internal;
  void set_has_tier();
  void set_has_spec();

  inline bool has_designation() const;
  inline void clear_has_designation();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DesignationUnion {
    constexpr DesignationUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    int tier_;
    ::flyteidl::core::QualityOfServiceSpec* spec_;
  } designation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fcore_2fexecution_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorkflowExecution

// -------------------------------------------------------------------

// NodeExecution

// -------------------------------------------------------------------

// TaskExecution

// -------------------------------------------------------------------

// ExecutionError

// string code = 1 [json_name = "code"];
inline void ExecutionError::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& ExecutionError::code() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.ExecutionError.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExecutionError::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.core.ExecutionError.code)
}
inline std::string* ExecutionError::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.ExecutionError.code)
  return _s;
}
inline const std::string& ExecutionError::_internal_code() const {
  return code_.Get();
}
inline void ExecutionError::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExecutionError::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExecutionError::release_code() {
  // @@protoc_insertion_point(field_release:flyteidl.core.ExecutionError.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExecutionError::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.ExecutionError.code)
}

// string message = 2 [json_name = "message"];
inline void ExecutionError::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ExecutionError::message() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.ExecutionError.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExecutionError::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.core.ExecutionError.message)
}
inline std::string* ExecutionError::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.ExecutionError.message)
  return _s;
}
inline const std::string& ExecutionError::_internal_message() const {
  return message_.Get();
}
inline void ExecutionError::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExecutionError::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExecutionError::release_message() {
  // @@protoc_insertion_point(field_release:flyteidl.core.ExecutionError.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExecutionError::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.ExecutionError.message)
}

// string error_uri = 3 [json_name = "errorUri"];
inline void ExecutionError::clear_error_uri() {
  error_uri_.ClearToEmpty();
}
inline const std::string& ExecutionError::error_uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.ExecutionError.error_uri)
  return _internal_error_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExecutionError::set_error_uri(ArgT0&& arg0, ArgT... args) {
 
 error_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.core.ExecutionError.error_uri)
}
inline std::string* ExecutionError::mutable_error_uri() {
  std::string* _s = _internal_mutable_error_uri();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.ExecutionError.error_uri)
  return _s;
}
inline const std::string& ExecutionError::_internal_error_uri() const {
  return error_uri_.Get();
}
inline void ExecutionError::_internal_set_error_uri(const std::string& value) {
  
  error_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExecutionError::_internal_mutable_error_uri() {
  
  return error_uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExecutionError::release_error_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.core.ExecutionError.error_uri)
  return error_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExecutionError::set_allocated_error_uri(std::string* error_uri) {
  if (error_uri != nullptr) {
    
  } else {
    
  }
  error_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_uri,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_uri_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.ExecutionError.error_uri)
}

// .flyteidl.core.ExecutionError.ErrorKind kind = 4 [json_name = "kind"];
inline void ExecutionError::clear_kind() {
  kind_ = 0;
}
inline ::flyteidl::core::ExecutionError_ErrorKind ExecutionError::_internal_kind() const {
  return static_cast< ::flyteidl::core::ExecutionError_ErrorKind >(kind_);
}
inline ::flyteidl::core::ExecutionError_ErrorKind ExecutionError::kind() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.ExecutionError.kind)
  return _internal_kind();
}
inline void ExecutionError::_internal_set_kind(::flyteidl::core::ExecutionError_ErrorKind value) {
  
  kind_ = value;
}
inline void ExecutionError::set_kind(::flyteidl::core::ExecutionError_ErrorKind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:flyteidl.core.ExecutionError.kind)
}

// -------------------------------------------------------------------

// TaskLog

// string uri = 1 [json_name = "uri"];
inline void TaskLog::clear_uri() {
  uri_.ClearToEmpty();
}
inline const std::string& TaskLog::uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.TaskLog.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskLog::set_uri(ArgT0&& arg0, ArgT... args) {
 
 uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.core.TaskLog.uri)
}
inline std::string* TaskLog::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.TaskLog.uri)
  return _s;
}
inline const std::string& TaskLog::_internal_uri() const {
  return uri_.Get();
}
inline void TaskLog::_internal_set_uri(const std::string& value) {
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskLog::_internal_mutable_uri() {
  
  return uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskLog::release_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.core.TaskLog.uri)
  return uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskLog::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uri_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.TaskLog.uri)
}

// string name = 2 [json_name = "name"];
inline void TaskLog::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& TaskLog::name() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.TaskLog.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskLog::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.core.TaskLog.name)
}
inline std::string* TaskLog::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.TaskLog.name)
  return _s;
}
inline const std::string& TaskLog::_internal_name() const {
  return name_.Get();
}
inline void TaskLog::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskLog::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskLog::release_name() {
  // @@protoc_insertion_point(field_release:flyteidl.core.TaskLog.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskLog::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.TaskLog.name)
}

// .flyteidl.core.TaskLog.MessageFormat message_format = 3 [json_name = "messageFormat"];
inline void TaskLog::clear_message_format() {
  message_format_ = 0;
}
inline ::flyteidl::core::TaskLog_MessageFormat TaskLog::_internal_message_format() const {
  return static_cast< ::flyteidl::core::TaskLog_MessageFormat >(message_format_);
}
inline ::flyteidl::core::TaskLog_MessageFormat TaskLog::message_format() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.TaskLog.message_format)
  return _internal_message_format();
}
inline void TaskLog::_internal_set_message_format(::flyteidl::core::TaskLog_MessageFormat value) {
  
  message_format_ = value;
}
inline void TaskLog::set_message_format(::flyteidl::core::TaskLog_MessageFormat value) {
  _internal_set_message_format(value);
  // @@protoc_insertion_point(field_set:flyteidl.core.TaskLog.message_format)
}

// .google.protobuf.Duration ttl = 4 [json_name = "ttl"];
inline bool TaskLog::_internal_has_ttl() const {
  return this != internal_default_instance() && ttl_ != nullptr;
}
inline bool TaskLog::has_ttl() const {
  return _internal_has_ttl();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& TaskLog::_internal_ttl() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = ttl_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& TaskLog::ttl() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.TaskLog.ttl)
  return _internal_ttl();
}
inline void TaskLog::unsafe_arena_set_allocated_ttl(
    ::PROTOBUF_NAMESPACE_ID::Duration* ttl) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ttl_);
  }
  ttl_ = ttl;
  if (ttl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.TaskLog.ttl)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TaskLog::release_ttl() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = ttl_;
  ttl_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TaskLog::unsafe_arena_release_ttl() {
  // @@protoc_insertion_point(field_release:flyteidl.core.TaskLog.ttl)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = ttl_;
  ttl_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TaskLog::_internal_mutable_ttl() {
  
  if (ttl_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    ttl_ = p;
  }
  return ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TaskLog::mutable_ttl() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_ttl();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.TaskLog.ttl)
  return _msg;
}
inline void TaskLog::set_allocated_ttl(::PROTOBUF_NAMESPACE_ID::Duration* ttl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ttl_);
  }
  if (ttl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ttl));
    if (message_arena != submessage_arena) {
      ttl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ttl, submessage_arena);
    }
    
  } else {
    
  }
  ttl_ = ttl;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.TaskLog.ttl)
}

// -------------------------------------------------------------------

// QualityOfServiceSpec

// .google.protobuf.Duration queueing_budget = 1 [json_name = "queueingBudget"];
inline bool QualityOfServiceSpec::_internal_has_queueing_budget() const {
  return this != internal_default_instance() && queueing_budget_ != nullptr;
}
inline bool QualityOfServiceSpec::has_queueing_budget() const {
  return _internal_has_queueing_budget();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& QualityOfServiceSpec::_internal_queueing_budget() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = queueing_budget_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& QualityOfServiceSpec::queueing_budget() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.QualityOfServiceSpec.queueing_budget)
  return _internal_queueing_budget();
}
inline void QualityOfServiceSpec::unsafe_arena_set_allocated_queueing_budget(
    ::PROTOBUF_NAMESPACE_ID::Duration* queueing_budget) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(queueing_budget_);
  }
  queueing_budget_ = queueing_budget;
  if (queueing_budget) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.QualityOfServiceSpec.queueing_budget)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* QualityOfServiceSpec::release_queueing_budget() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = queueing_budget_;
  queueing_budget_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* QualityOfServiceSpec::unsafe_arena_release_queueing_budget() {
  // @@protoc_insertion_point(field_release:flyteidl.core.QualityOfServiceSpec.queueing_budget)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = queueing_budget_;
  queueing_budget_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* QualityOfServiceSpec::_internal_mutable_queueing_budget() {
  
  if (queueing_budget_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    queueing_budget_ = p;
  }
  return queueing_budget_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* QualityOfServiceSpec::mutable_queueing_budget() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_queueing_budget();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.QualityOfServiceSpec.queueing_budget)
  return _msg;
}
inline void QualityOfServiceSpec::set_allocated_queueing_budget(::PROTOBUF_NAMESPACE_ID::Duration* queueing_budget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(queueing_budget_);
  }
  if (queueing_budget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(queueing_budget));
    if (message_arena != submessage_arena) {
      queueing_budget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, queueing_budget, submessage_arena);
    }
    
  } else {
    
  }
  queueing_budget_ = queueing_budget;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.QualityOfServiceSpec.queueing_budget)
}

// -------------------------------------------------------------------

// QualityOfService

// .flyteidl.core.QualityOfService.Tier tier = 1 [json_name = "tier"];
inline bool QualityOfService::_internal_has_tier() const {
  return designation_case() == kTier;
}
inline bool QualityOfService::has_tier() const {
  return _internal_has_tier();
}
inline void QualityOfService::set_has_tier() {
  _oneof_case_[0] = kTier;
}
inline void QualityOfService::clear_tier() {
  if (_internal_has_tier()) {
    designation_.tier_ = 0;
    clear_has_designation();
  }
}
inline ::flyteidl::core::QualityOfService_Tier QualityOfService::_internal_tier() const {
  if (_internal_has_tier()) {
    return static_cast< ::flyteidl::core::QualityOfService_Tier >(designation_.tier_);
  }
  return static_cast< ::flyteidl::core::QualityOfService_Tier >(0);
}
inline ::flyteidl::core::QualityOfService_Tier QualityOfService::tier() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.QualityOfService.tier)
  return _internal_tier();
}
inline void QualityOfService::_internal_set_tier(::flyteidl::core::QualityOfService_Tier value) {
  if (!_internal_has_tier()) {
    clear_designation();
    set_has_tier();
  }
  designation_.tier_ = value;
}
inline void QualityOfService::set_tier(::flyteidl::core::QualityOfService_Tier value) {
  _internal_set_tier(value);
  // @@protoc_insertion_point(field_set:flyteidl.core.QualityOfService.tier)
}

// .flyteidl.core.QualityOfServiceSpec spec = 2 [json_name = "spec"];
inline bool QualityOfService::_internal_has_spec() const {
  return designation_case() == kSpec;
}
inline bool QualityOfService::has_spec() const {
  return _internal_has_spec();
}
inline void QualityOfService::set_has_spec() {
  _oneof_case_[0] = kSpec;
}
inline void QualityOfService::clear_spec() {
  if (_internal_has_spec()) {
    if (GetArenaForAllocation() == nullptr) {
      delete designation_.spec_;
    }
    clear_has_designation();
  }
}
inline ::flyteidl::core::QualityOfServiceSpec* QualityOfService::release_spec() {
  // @@protoc_insertion_point(field_release:flyteidl.core.QualityOfService.spec)
  if (_internal_has_spec()) {
    clear_has_designation();
      ::flyteidl::core::QualityOfServiceSpec* temp = designation_.spec_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    designation_.spec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::QualityOfServiceSpec& QualityOfService::_internal_spec() const {
  return _internal_has_spec()
      ? *designation_.spec_
      : reinterpret_cast< ::flyteidl::core::QualityOfServiceSpec&>(::flyteidl::core::_QualityOfServiceSpec_default_instance_);
}
inline const ::flyteidl::core::QualityOfServiceSpec& QualityOfService::spec() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.QualityOfService.spec)
  return _internal_spec();
}
inline ::flyteidl::core::QualityOfServiceSpec* QualityOfService::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.core.QualityOfService.spec)
  if (_internal_has_spec()) {
    clear_has_designation();
    ::flyteidl::core::QualityOfServiceSpec* temp = designation_.spec_;
    designation_.spec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void QualityOfService::unsafe_arena_set_allocated_spec(::flyteidl::core::QualityOfServiceSpec* spec) {
  clear_designation();
  if (spec) {
    set_has_spec();
    designation_.spec_ = spec;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.QualityOfService.spec)
}
inline ::flyteidl::core::QualityOfServiceSpec* QualityOfService::_internal_mutable_spec() {
  if (!_internal_has_spec()) {
    clear_designation();
    set_has_spec();
    designation_.spec_ = CreateMaybeMessage< ::flyteidl::core::QualityOfServiceSpec >(GetArenaForAllocation());
  }
  return designation_.spec_;
}
inline ::flyteidl::core::QualityOfServiceSpec* QualityOfService::mutable_spec() {
  ::flyteidl::core::QualityOfServiceSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.QualityOfService.spec)
  return _msg;
}

inline bool QualityOfService::has_designation() const {
  return designation_case() != DESIGNATION_NOT_SET;
}
inline void QualityOfService::clear_has_designation() {
  _oneof_case_[0] = DESIGNATION_NOT_SET;
}
inline QualityOfService::DesignationCase QualityOfService::designation_case() const {
  return QualityOfService::DesignationCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace flyteidl

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::flyteidl::core::WorkflowExecution_Phase> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::core::WorkflowExecution_Phase>() {
  return ::flyteidl::core::WorkflowExecution_Phase_descriptor();
}
template <> struct is_proto_enum< ::flyteidl::core::NodeExecution_Phase> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::core::NodeExecution_Phase>() {
  return ::flyteidl::core::NodeExecution_Phase_descriptor();
}
template <> struct is_proto_enum< ::flyteidl::core::TaskExecution_Phase> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::core::TaskExecution_Phase>() {
  return ::flyteidl::core::TaskExecution_Phase_descriptor();
}
template <> struct is_proto_enum< ::flyteidl::core::ExecutionError_ErrorKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::core::ExecutionError_ErrorKind>() {
  return ::flyteidl::core::ExecutionError_ErrorKind_descriptor();
}
template <> struct is_proto_enum< ::flyteidl::core::TaskLog_MessageFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::core::TaskLog_MessageFormat>() {
  return ::flyteidl::core::TaskLog_MessageFormat_descriptor();
}
template <> struct is_proto_enum< ::flyteidl::core::QualityOfService_Tier> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::core::QualityOfService_Tier>() {
  return ::flyteidl::core::QualityOfService_Tier_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fcore_2fexecution_2eproto
