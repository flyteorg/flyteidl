// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/project.proto

#include "flyteidl/admin/project.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace admin {
constexpr Domain::Domain(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DomainDefaultTypeInternal {
  constexpr DomainDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DomainDefaultTypeInternal() {}
  union {
    Domain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DomainDefaultTypeInternal _Domain_default_instance_;
constexpr Project::Project(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : domains_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , labels_(nullptr)
  , state_(0)
{}
struct ProjectDefaultTypeInternal {
  constexpr ProjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProjectDefaultTypeInternal() {}
  union {
    Project _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProjectDefaultTypeInternal _Project_default_instance_;
constexpr Projects::Projects(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : projects_()
  , token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ProjectsDefaultTypeInternal {
  constexpr ProjectsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProjectsDefaultTypeInternal() {}
  union {
    Projects _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProjectsDefaultTypeInternal _Projects_default_instance_;
constexpr ProjectListRequest::ProjectListRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filters_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sort_by_(nullptr)
  , limit_(0u){}
struct ProjectListRequestDefaultTypeInternal {
  constexpr ProjectListRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProjectListRequestDefaultTypeInternal() {}
  union {
    ProjectListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProjectListRequestDefaultTypeInternal _ProjectListRequest_default_instance_;
constexpr ProjectRegisterRequest::ProjectRegisterRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : project_(nullptr){}
struct ProjectRegisterRequestDefaultTypeInternal {
  constexpr ProjectRegisterRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProjectRegisterRequestDefaultTypeInternal() {}
  union {
    ProjectRegisterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProjectRegisterRequestDefaultTypeInternal _ProjectRegisterRequest_default_instance_;
constexpr ProjectRegisterResponse::ProjectRegisterResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ProjectRegisterResponseDefaultTypeInternal {
  constexpr ProjectRegisterResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProjectRegisterResponseDefaultTypeInternal() {}
  union {
    ProjectRegisterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProjectRegisterResponseDefaultTypeInternal _ProjectRegisterResponse_default_instance_;
constexpr ProjectUpdateResponse::ProjectUpdateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ProjectUpdateResponseDefaultTypeInternal {
  constexpr ProjectUpdateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProjectUpdateResponseDefaultTypeInternal() {}
  union {
    ProjectUpdateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProjectUpdateResponseDefaultTypeInternal _ProjectUpdateResponse_default_instance_;
}  // namespace admin
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fadmin_2fproject_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fadmin_2fproject_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fadmin_2fproject_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fadmin_2fproject_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Domain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Domain, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Domain, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Project, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Project, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Project, name_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Project, domains_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Project, description_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Project, labels_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Project, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Projects, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Projects, projects_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Projects, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ProjectListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ProjectListRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ProjectListRequest, token_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ProjectListRequest, filters_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ProjectListRequest, sort_by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ProjectRegisterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ProjectRegisterRequest, project_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ProjectRegisterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ProjectUpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::admin::Domain)},
  { 8, -1, -1, sizeof(::flyteidl::admin::Project)},
  { 20, -1, -1, sizeof(::flyteidl::admin::Projects)},
  { 28, -1, -1, sizeof(::flyteidl::admin::ProjectListRequest)},
  { 38, -1, -1, sizeof(::flyteidl::admin::ProjectRegisterRequest)},
  { 45, -1, -1, sizeof(::flyteidl::admin::ProjectRegisterResponse)},
  { 51, -1, -1, sizeof(::flyteidl::admin::ProjectUpdateResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_Domain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_Project_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_Projects_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_ProjectListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_ProjectRegisterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_ProjectRegisterResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_ProjectUpdateResponse_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fadmin_2fproject_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034flyteidl/admin/project.proto\022\016flyteidl"
  ".admin\032\033flyteidl/admin/common.proto\",\n\006D"
  "omain\022\016\n\002id\030\001 \001(\tR\002id\022\022\n\004name\030\002 \001(\tR\004nam"
  "e\"\255\002\n\007Project\022\016\n\002id\030\001 \001(\tR\002id\022\022\n\004name\030\002 "
  "\001(\tR\004name\0220\n\007domains\030\003 \003(\0132\026.flyteidl.ad"
  "min.DomainR\007domains\022 \n\013description\030\004 \001(\t"
  "R\013description\022.\n\006labels\030\005 \001(\0132\026.flyteidl"
  ".admin.LabelsR\006labels\022:\n\005state\030\006 \001(\0162$.f"
  "lyteidl.admin.Project.ProjectStateR\005stat"
  "e\">\n\014ProjectState\022\n\n\006ACTIVE\020\000\022\014\n\010ARCHIVE"
  "D\020\001\022\024\n\020SYSTEM_GENERATED\020\002\"U\n\010Projects\0223\n"
  "\010projects\030\001 \003(\0132\027.flyteidl.admin.Project"
  "R\010projects\022\024\n\005token\030\002 \001(\tR\005token\"\211\001\n\022Pro"
  "jectListRequest\022\024\n\005limit\030\001 \001(\rR\005limit\022\024\n"
  "\005token\030\002 \001(\tR\005token\022\030\n\007filters\030\003 \001(\tR\007fi"
  "lters\022-\n\007sort_by\030\004 \001(\0132\024.flyteidl.admin."
  "SortR\006sortBy\"K\n\026ProjectRegisterRequest\0221"
  "\n\007project\030\001 \001(\0132\027.flyteidl.admin.Project"
  "R\007project\"\031\n\027ProjectRegisterResponse\"\027\n\025"
  "ProjectUpdateResponseB\265\001\n\022com.flyteidl.a"
  "dminB\014ProjectProtoH\002Z5github.com/flyteor"
  "g/flyteidl/gen/pb-go/flyteidl/admin\370\001\000\242\002"
  "\003FAX\252\002\016Flyteidl.Admin\312\002\016Flyteidl\\Admin\342\002"
  "\032Flyteidl\\Admin\\GPBMetadata\352\002\017Flyteidl::"
  "Adminb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flyteidl_2fadmin_2fproject_2eproto_deps[1] = {
  &::descriptor_table_flyteidl_2fadmin_2fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fadmin_2fproject_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2fproject_2eproto = {
  false, false, 973, descriptor_table_protodef_flyteidl_2fadmin_2fproject_2eproto, "flyteidl/admin/project.proto", 
  &descriptor_table_flyteidl_2fadmin_2fproject_2eproto_once, descriptor_table_flyteidl_2fadmin_2fproject_2eproto_deps, 1, 7,
  schemas, file_default_instances, TableStruct_flyteidl_2fadmin_2fproject_2eproto::offsets,
  file_level_metadata_flyteidl_2fadmin_2fproject_2eproto, file_level_enum_descriptors_flyteidl_2fadmin_2fproject_2eproto, file_level_service_descriptors_flyteidl_2fadmin_2fproject_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fadmin_2fproject_2eproto_getter() {
  return &descriptor_table_flyteidl_2fadmin_2fproject_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fadmin_2fproject_2eproto(&descriptor_table_flyteidl_2fadmin_2fproject_2eproto);
namespace flyteidl {
namespace admin {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Project_ProjectState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fadmin_2fproject_2eproto);
  return file_level_enum_descriptors_flyteidl_2fadmin_2fproject_2eproto[0];
}
bool Project_ProjectState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Project_ProjectState Project::ACTIVE;
constexpr Project_ProjectState Project::ARCHIVED;
constexpr Project_ProjectState Project::SYSTEM_GENERATED;
constexpr Project_ProjectState Project::ProjectState_MIN;
constexpr Project_ProjectState Project::ProjectState_MAX;
constexpr int Project::ProjectState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Domain::_Internal {
 public:
};

Domain::Domain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.Domain)
}
Domain::Domain(const Domain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Domain)
}

inline void Domain::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Domain::~Domain() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Domain)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Domain::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Domain::ArenaDtor(void* object) {
  Domain* _this = reinterpret_cast< Domain* >(object);
  (void)_this;
}
void Domain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Domain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Domain::InternalSwap(Domain* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Domain::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fproject_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fproject_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fproject_2eproto[0]);
}

// ===================================================================

class Project::_Internal {
 public:
  static const ::flyteidl::admin::Labels& labels(const Project* msg);
};

const ::flyteidl::admin::Labels&
Project::_Internal::labels(const Project* msg) {
  return *msg->labels_;
}
void Project::clear_labels() {
  if (GetArenaForAllocation() == nullptr && labels_ != nullptr) {
    delete labels_;
  }
  labels_ = nullptr;
}
Project::Project(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  domains_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.Project)
}
Project::Project(const Project& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      domains_(from.domains_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_labels()) {
    labels_ = new ::flyteidl::admin::Labels(*from.labels_);
  } else {
    labels_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Project)
}

inline void Project::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&labels_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&labels_)) + sizeof(state_));
}

Project::~Project() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Project)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Project::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete labels_;
}

void Project::ArenaDtor(void* object) {
  Project* _this = reinterpret_cast< Project* >(object);
  (void)_this;
}
void Project::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Project::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Project::InternalSwap(Project* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Project::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fproject_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fproject_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fproject_2eproto[1]);
}

// ===================================================================

class Projects::_Internal {
 public:
};

Projects::Projects(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  projects_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.Projects)
}
Projects::Projects(const Projects& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      projects_(from.projects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Projects)
}

inline void Projects::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Projects::~Projects() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Projects)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Projects::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Projects::ArenaDtor(void* object) {
  Projects* _this = reinterpret_cast< Projects* >(object);
  (void)_this;
}
void Projects::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Projects::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Projects::InternalSwap(Projects* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Projects::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fproject_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fproject_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fproject_2eproto[2]);
}

// ===================================================================

class ProjectListRequest::_Internal {
 public:
  static const ::flyteidl::admin::Sort& sort_by(const ProjectListRequest* msg);
};

const ::flyteidl::admin::Sort&
ProjectListRequest::_Internal::sort_by(const ProjectListRequest* msg) {
  return *msg->sort_by_;
}
void ProjectListRequest::clear_sort_by() {
  if (GetArenaForAllocation() == nullptr && sort_by_ != nullptr) {
    delete sort_by_;
  }
  sort_by_ = nullptr;
}
ProjectListRequest::ProjectListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.ProjectListRequest)
}
ProjectListRequest::ProjectListRequest(const ProjectListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  filters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filters().empty()) {
    filters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filters(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_sort_by()) {
    sort_by_ = new ::flyteidl::admin::Sort(*from.sort_by_);
  } else {
    sort_by_ = nullptr;
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ProjectListRequest)
}

inline void ProjectListRequest::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
filters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sort_by_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&sort_by_)) + sizeof(limit_));
}

ProjectListRequest::~ProjectListRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ProjectListRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProjectListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filters_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sort_by_;
}

void ProjectListRequest::ArenaDtor(void* object) {
  ProjectListRequest* _this = reinterpret_cast< ProjectListRequest* >(object);
  (void)_this;
}
void ProjectListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProjectListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProjectListRequest::InternalSwap(ProjectListRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectListRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fproject_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fproject_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fproject_2eproto[3]);
}

// ===================================================================

class ProjectRegisterRequest::_Internal {
 public:
  static const ::flyteidl::admin::Project& project(const ProjectRegisterRequest* msg);
};

const ::flyteidl::admin::Project&
ProjectRegisterRequest::_Internal::project(const ProjectRegisterRequest* msg) {
  return *msg->project_;
}
ProjectRegisterRequest::ProjectRegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.ProjectRegisterRequest)
}
ProjectRegisterRequest::ProjectRegisterRequest(const ProjectRegisterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_project()) {
    project_ = new ::flyteidl::admin::Project(*from.project_);
  } else {
    project_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ProjectRegisterRequest)
}

inline void ProjectRegisterRequest::SharedCtor() {
project_ = nullptr;
}

ProjectRegisterRequest::~ProjectRegisterRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ProjectRegisterRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProjectRegisterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete project_;
}

void ProjectRegisterRequest::ArenaDtor(void* object) {
  ProjectRegisterRequest* _this = reinterpret_cast< ProjectRegisterRequest* >(object);
  (void)_this;
}
void ProjectRegisterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProjectRegisterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProjectRegisterRequest::InternalSwap(ProjectRegisterRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectRegisterRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fproject_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fproject_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fproject_2eproto[4]);
}

// ===================================================================

class ProjectRegisterResponse::_Internal {
 public:
};

ProjectRegisterResponse::ProjectRegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.ProjectRegisterResponse)
}
ProjectRegisterResponse::ProjectRegisterResponse(const ProjectRegisterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ProjectRegisterResponse)
}



::PROTOBUF_NAMESPACE_ID::Metadata ProjectRegisterResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fproject_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fproject_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fproject_2eproto[5]);
}

// ===================================================================

class ProjectUpdateResponse::_Internal {
 public:
};

ProjectUpdateResponse::ProjectUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.ProjectUpdateResponse)
}
ProjectUpdateResponse::ProjectUpdateResponse(const ProjectUpdateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ProjectUpdateResponse)
}



::PROTOBUF_NAMESPACE_ID::Metadata ProjectUpdateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fproject_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fproject_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fproject_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Domain* Arena::CreateMaybeMessage< ::flyteidl::admin::Domain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::Domain >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Project* Arena::CreateMaybeMessage< ::flyteidl::admin::Project >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::Project >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Projects* Arena::CreateMaybeMessage< ::flyteidl::admin::Projects >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::Projects >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ProjectListRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::ProjectListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::ProjectListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ProjectRegisterRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::ProjectRegisterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::ProjectRegisterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ProjectRegisterResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::ProjectRegisterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::ProjectRegisterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ProjectUpdateResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::ProjectUpdateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::ProjectUpdateResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
