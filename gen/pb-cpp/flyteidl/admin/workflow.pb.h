// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/workflow.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2fworkflow_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2fworkflow_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/compiler.pb.h"
#include "flyteidl/core/identifier.pb.h"
#include "flyteidl/core/workflow.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fworkflow_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fadmin_2fworkflow_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2fworkflow_2eproto;
namespace flyteidl {
namespace admin {
class Workflow;
struct WorkflowDefaultTypeInternal;
extern WorkflowDefaultTypeInternal _Workflow_default_instance_;
class WorkflowClosure;
struct WorkflowClosureDefaultTypeInternal;
extern WorkflowClosureDefaultTypeInternal _WorkflowClosure_default_instance_;
class WorkflowCreateRequest;
struct WorkflowCreateRequestDefaultTypeInternal;
extern WorkflowCreateRequestDefaultTypeInternal _WorkflowCreateRequest_default_instance_;
class WorkflowCreateResponse;
struct WorkflowCreateResponseDefaultTypeInternal;
extern WorkflowCreateResponseDefaultTypeInternal _WorkflowCreateResponse_default_instance_;
class WorkflowList;
struct WorkflowListDefaultTypeInternal;
extern WorkflowListDefaultTypeInternal _WorkflowList_default_instance_;
class WorkflowSpec;
struct WorkflowSpecDefaultTypeInternal;
extern WorkflowSpecDefaultTypeInternal _WorkflowSpec_default_instance_;
}  // namespace admin
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::admin::Workflow* Arena::CreateMaybeMessage<::flyteidl::admin::Workflow>(Arena*);
template<> ::flyteidl::admin::WorkflowClosure* Arena::CreateMaybeMessage<::flyteidl::admin::WorkflowClosure>(Arena*);
template<> ::flyteidl::admin::WorkflowCreateRequest* Arena::CreateMaybeMessage<::flyteidl::admin::WorkflowCreateRequest>(Arena*);
template<> ::flyteidl::admin::WorkflowCreateResponse* Arena::CreateMaybeMessage<::flyteidl::admin::WorkflowCreateResponse>(Arena*);
template<> ::flyteidl::admin::WorkflowList* Arena::CreateMaybeMessage<::flyteidl::admin::WorkflowList>(Arena*);
template<> ::flyteidl::admin::WorkflowSpec* Arena::CreateMaybeMessage<::flyteidl::admin::WorkflowSpec>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace admin {

// ===================================================================

class WorkflowCreateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.WorkflowCreateRequest) */ {
 public:
  inline WorkflowCreateRequest() : WorkflowCreateRequest(nullptr) {}
  ~WorkflowCreateRequest() override;
  explicit constexpr WorkflowCreateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowCreateRequest(const WorkflowCreateRequest& from);
  WorkflowCreateRequest(WorkflowCreateRequest&& from) noexcept
    : WorkflowCreateRequest() {
    *this = ::std::move(from);
  }

  inline WorkflowCreateRequest& operator=(const WorkflowCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowCreateRequest& operator=(WorkflowCreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowCreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowCreateRequest* internal_default_instance() {
    return reinterpret_cast<const WorkflowCreateRequest*>(
               &_WorkflowCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WorkflowCreateRequest& a, WorkflowCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowCreateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowCreateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkflowCreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkflowCreateRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowCreateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.WorkflowCreateRequest";
  }
  protected:
  explicit WorkflowCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSpecFieldNumber = 2,
  };
  // .flyteidl.core.Identifier id = 1 [json_name = "id"];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::flyteidl::core::Identifier& id() const;
  PROTOBUF_NODISCARD ::flyteidl::core::Identifier* release_id();
  ::flyteidl::core::Identifier* mutable_id();
  void set_allocated_id(::flyteidl::core::Identifier* id);
  private:
  const ::flyteidl::core::Identifier& _internal_id() const;
  ::flyteidl::core::Identifier* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::flyteidl::core::Identifier* id);
  ::flyteidl::core::Identifier* unsafe_arena_release_id();

  // .flyteidl.admin.WorkflowSpec spec = 2 [json_name = "spec"];
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::flyteidl::admin::WorkflowSpec& spec() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::WorkflowSpec* release_spec();
  ::flyteidl::admin::WorkflowSpec* mutable_spec();
  void set_allocated_spec(::flyteidl::admin::WorkflowSpec* spec);
  private:
  const ::flyteidl::admin::WorkflowSpec& _internal_spec() const;
  ::flyteidl::admin::WorkflowSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::flyteidl::admin::WorkflowSpec* spec);
  ::flyteidl::admin::WorkflowSpec* unsafe_arena_release_spec();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.WorkflowCreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::Identifier* id_;
  ::flyteidl::admin::WorkflowSpec* spec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class WorkflowCreateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:flyteidl.admin.WorkflowCreateResponse) */ {
 public:
  inline WorkflowCreateResponse() : WorkflowCreateResponse(nullptr) {}
  explicit constexpr WorkflowCreateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowCreateResponse(const WorkflowCreateResponse& from);
  WorkflowCreateResponse(WorkflowCreateResponse&& from) noexcept
    : WorkflowCreateResponse() {
    *this = ::std::move(from);
  }

  inline WorkflowCreateResponse& operator=(const WorkflowCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowCreateResponse& operator=(WorkflowCreateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowCreateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowCreateResponse* internal_default_instance() {
    return reinterpret_cast<const WorkflowCreateResponse*>(
               &_WorkflowCreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WorkflowCreateResponse& a, WorkflowCreateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowCreateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowCreateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkflowCreateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkflowCreateResponse>(arena);
  }

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.WorkflowCreateResponse";
  }
  protected:
  explicit WorkflowCreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.WorkflowCreateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class Workflow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Workflow) */ {
 public:
  inline Workflow() : Workflow(nullptr) {}
  ~Workflow() override;
  explicit constexpr Workflow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Workflow(const Workflow& from);
  Workflow(Workflow&& from) noexcept
    : Workflow() {
    *this = ::std::move(from);
  }

  inline Workflow& operator=(const Workflow& from) {
    CopyFrom(from);
    return *this;
  }
  inline Workflow& operator=(Workflow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Workflow& default_instance() {
    return *internal_default_instance();
  }
  static inline const Workflow* internal_default_instance() {
    return reinterpret_cast<const Workflow*>(
               &_Workflow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Workflow& a, Workflow& b) {
    a.Swap(&b);
  }
  inline void Swap(Workflow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Workflow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Workflow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Workflow>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Workflow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.Workflow";
  }
  protected:
  explicit Workflow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kClosureFieldNumber = 2,
  };
  // .flyteidl.core.Identifier id = 1 [json_name = "id"];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::flyteidl::core::Identifier& id() const;
  PROTOBUF_NODISCARD ::flyteidl::core::Identifier* release_id();
  ::flyteidl::core::Identifier* mutable_id();
  void set_allocated_id(::flyteidl::core::Identifier* id);
  private:
  const ::flyteidl::core::Identifier& _internal_id() const;
  ::flyteidl::core::Identifier* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::flyteidl::core::Identifier* id);
  ::flyteidl::core::Identifier* unsafe_arena_release_id();

  // .flyteidl.admin.WorkflowClosure closure = 2 [json_name = "closure"];
  bool has_closure() const;
  private:
  bool _internal_has_closure() const;
  public:
  void clear_closure();
  const ::flyteidl::admin::WorkflowClosure& closure() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::WorkflowClosure* release_closure();
  ::flyteidl::admin::WorkflowClosure* mutable_closure();
  void set_allocated_closure(::flyteidl::admin::WorkflowClosure* closure);
  private:
  const ::flyteidl::admin::WorkflowClosure& _internal_closure() const;
  ::flyteidl::admin::WorkflowClosure* _internal_mutable_closure();
  public:
  void unsafe_arena_set_allocated_closure(
      ::flyteidl::admin::WorkflowClosure* closure);
  ::flyteidl::admin::WorkflowClosure* unsafe_arena_release_closure();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Workflow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::Identifier* id_;
  ::flyteidl::admin::WorkflowClosure* closure_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class WorkflowList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.WorkflowList) */ {
 public:
  inline WorkflowList() : WorkflowList(nullptr) {}
  ~WorkflowList() override;
  explicit constexpr WorkflowList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowList(const WorkflowList& from);
  WorkflowList(WorkflowList&& from) noexcept
    : WorkflowList() {
    *this = ::std::move(from);
  }

  inline WorkflowList& operator=(const WorkflowList& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowList& operator=(WorkflowList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowList& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowList* internal_default_instance() {
    return reinterpret_cast<const WorkflowList*>(
               &_WorkflowList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WorkflowList& a, WorkflowList& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkflowList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkflowList>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.WorkflowList";
  }
  protected:
  explicit WorkflowList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkflowsFieldNumber = 1,
    kTokenFieldNumber = 2,
  };
  // repeated .flyteidl.admin.Workflow workflows = 1 [json_name = "workflows"];
  int workflows_size() const;
  private:
  int _internal_workflows_size() const;
  public:
  void clear_workflows();
  ::flyteidl::admin::Workflow* mutable_workflows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Workflow >*
      mutable_workflows();
  private:
  const ::flyteidl::admin::Workflow& _internal_workflows(int index) const;
  ::flyteidl::admin::Workflow* _internal_add_workflows();
  public:
  const ::flyteidl::admin::Workflow& workflows(int index) const;
  ::flyteidl::admin::Workflow* add_workflows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Workflow >&
      workflows() const;

  // string token = 2 [json_name = "token"];
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.WorkflowList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Workflow > workflows_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class WorkflowSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.WorkflowSpec) */ {
 public:
  inline WorkflowSpec() : WorkflowSpec(nullptr) {}
  ~WorkflowSpec() override;
  explicit constexpr WorkflowSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowSpec(const WorkflowSpec& from);
  WorkflowSpec(WorkflowSpec&& from) noexcept
    : WorkflowSpec() {
    *this = ::std::move(from);
  }

  inline WorkflowSpec& operator=(const WorkflowSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowSpec& operator=(WorkflowSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowSpec* internal_default_instance() {
    return reinterpret_cast<const WorkflowSpec*>(
               &_WorkflowSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WorkflowSpec& a, WorkflowSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkflowSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkflowSpec>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.WorkflowSpec";
  }
  protected:
  explicit WorkflowSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubWorkflowsFieldNumber = 2,
    kTemplateFieldNumber = 1,
  };
  // repeated .flyteidl.core.WorkflowTemplate sub_workflows = 2 [json_name = "subWorkflows"];
  int sub_workflows_size() const;
  private:
  int _internal_sub_workflows_size() const;
  public:
  void clear_sub_workflows();
  ::flyteidl::core::WorkflowTemplate* mutable_sub_workflows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::WorkflowTemplate >*
      mutable_sub_workflows();
  private:
  const ::flyteidl::core::WorkflowTemplate& _internal_sub_workflows(int index) const;
  ::flyteidl::core::WorkflowTemplate* _internal_add_sub_workflows();
  public:
  const ::flyteidl::core::WorkflowTemplate& sub_workflows(int index) const;
  ::flyteidl::core::WorkflowTemplate* add_sub_workflows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::WorkflowTemplate >&
      sub_workflows() const;

  // .flyteidl.core.WorkflowTemplate template = 1 [json_name = "template"];
  bool has_template_() const;
  private:
  bool _internal_has_template_() const;
  public:
  void clear_template_();
  const ::flyteidl::core::WorkflowTemplate& template_() const;
  PROTOBUF_NODISCARD ::flyteidl::core::WorkflowTemplate* release_template_();
  ::flyteidl::core::WorkflowTemplate* mutable_template_();
  void set_allocated_template_(::flyteidl::core::WorkflowTemplate* template_);
  private:
  const ::flyteidl::core::WorkflowTemplate& _internal_template_() const;
  ::flyteidl::core::WorkflowTemplate* _internal_mutable_template_();
  public:
  void unsafe_arena_set_allocated_template_(
      ::flyteidl::core::WorkflowTemplate* template_);
  ::flyteidl::core::WorkflowTemplate* unsafe_arena_release_template_();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.WorkflowSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::WorkflowTemplate > sub_workflows_;
  ::flyteidl::core::WorkflowTemplate* template__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fworkflow_2eproto;
};
// -------------------------------------------------------------------

class WorkflowClosure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.WorkflowClosure) */ {
 public:
  inline WorkflowClosure() : WorkflowClosure(nullptr) {}
  ~WorkflowClosure() override;
  explicit constexpr WorkflowClosure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowClosure(const WorkflowClosure& from);
  WorkflowClosure(WorkflowClosure&& from) noexcept
    : WorkflowClosure() {
    *this = ::std::move(from);
  }

  inline WorkflowClosure& operator=(const WorkflowClosure& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowClosure& operator=(WorkflowClosure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowClosure& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowClosure* internal_default_instance() {
    return reinterpret_cast<const WorkflowClosure*>(
               &_WorkflowClosure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WorkflowClosure& a, WorkflowClosure& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowClosure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowClosure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkflowClosure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkflowClosure>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowClosure* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.WorkflowClosure";
  }
  protected:
  explicit WorkflowClosure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompiledWorkflowFieldNumber = 1,
    kCreatedAtFieldNumber = 2,
  };
  // .flyteidl.core.CompiledWorkflowClosure compiled_workflow = 1 [json_name = "compiledWorkflow"];
  bool has_compiled_workflow() const;
  private:
  bool _internal_has_compiled_workflow() const;
  public:
  void clear_compiled_workflow();
  const ::flyteidl::core::CompiledWorkflowClosure& compiled_workflow() const;
  PROTOBUF_NODISCARD ::flyteidl::core::CompiledWorkflowClosure* release_compiled_workflow();
  ::flyteidl::core::CompiledWorkflowClosure* mutable_compiled_workflow();
  void set_allocated_compiled_workflow(::flyteidl::core::CompiledWorkflowClosure* compiled_workflow);
  private:
  const ::flyteidl::core::CompiledWorkflowClosure& _internal_compiled_workflow() const;
  ::flyteidl::core::CompiledWorkflowClosure* _internal_mutable_compiled_workflow();
  public:
  void unsafe_arena_set_allocated_compiled_workflow(
      ::flyteidl::core::CompiledWorkflowClosure* compiled_workflow);
  ::flyteidl::core::CompiledWorkflowClosure* unsafe_arena_release_compiled_workflow();

  // .google.protobuf.Timestamp created_at = 2 [json_name = "createdAt"];
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.WorkflowClosure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::CompiledWorkflowClosure* compiled_workflow_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fworkflow_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorkflowCreateRequest

// .flyteidl.core.Identifier id = 1 [json_name = "id"];
inline bool WorkflowCreateRequest::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool WorkflowCreateRequest::has_id() const {
  return _internal_has_id();
}
inline const ::flyteidl::core::Identifier& WorkflowCreateRequest::_internal_id() const {
  const ::flyteidl::core::Identifier* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::Identifier&>(
      ::flyteidl::core::_Identifier_default_instance_);
}
inline const ::flyteidl::core::Identifier& WorkflowCreateRequest::id() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowCreateRequest.id)
  return _internal_id();
}
inline void WorkflowCreateRequest::unsafe_arena_set_allocated_id(
    ::flyteidl::core::Identifier* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.WorkflowCreateRequest.id)
}
inline ::flyteidl::core::Identifier* WorkflowCreateRequest::release_id() {
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::Identifier* WorkflowCreateRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowCreateRequest.id)
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identifier* WorkflowCreateRequest::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identifier>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::flyteidl::core::Identifier* WorkflowCreateRequest::mutable_id() {
  ::flyteidl::core::Identifier* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowCreateRequest.id)
  return _msg;
}
inline void WorkflowCreateRequest::set_allocated_id(::flyteidl::core::Identifier* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowCreateRequest.id)
}

// .flyteidl.admin.WorkflowSpec spec = 2 [json_name = "spec"];
inline bool WorkflowCreateRequest::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool WorkflowCreateRequest::has_spec() const {
  return _internal_has_spec();
}
inline void WorkflowCreateRequest::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::flyteidl::admin::WorkflowSpec& WorkflowCreateRequest::_internal_spec() const {
  const ::flyteidl::admin::WorkflowSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::WorkflowSpec&>(
      ::flyteidl::admin::_WorkflowSpec_default_instance_);
}
inline const ::flyteidl::admin::WorkflowSpec& WorkflowCreateRequest::spec() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowCreateRequest.spec)
  return _internal_spec();
}
inline void WorkflowCreateRequest::unsafe_arena_set_allocated_spec(
    ::flyteidl::admin::WorkflowSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.WorkflowCreateRequest.spec)
}
inline ::flyteidl::admin::WorkflowSpec* WorkflowCreateRequest::release_spec() {
  
  ::flyteidl::admin::WorkflowSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::WorkflowSpec* WorkflowCreateRequest::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowCreateRequest.spec)
  
  ::flyteidl::admin::WorkflowSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::WorkflowSpec* WorkflowCreateRequest::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::WorkflowSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::flyteidl::admin::WorkflowSpec* WorkflowCreateRequest::mutable_spec() {
  ::flyteidl::admin::WorkflowSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowCreateRequest.spec)
  return _msg;
}
inline void WorkflowCreateRequest::set_allocated_spec(::flyteidl::admin::WorkflowSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::WorkflowSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowCreateRequest.spec)
}

// -------------------------------------------------------------------

// WorkflowCreateResponse

// -------------------------------------------------------------------

// Workflow

// .flyteidl.core.Identifier id = 1 [json_name = "id"];
inline bool Workflow::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool Workflow::has_id() const {
  return _internal_has_id();
}
inline const ::flyteidl::core::Identifier& Workflow::_internal_id() const {
  const ::flyteidl::core::Identifier* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::Identifier&>(
      ::flyteidl::core::_Identifier_default_instance_);
}
inline const ::flyteidl::core::Identifier& Workflow::id() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Workflow.id)
  return _internal_id();
}
inline void Workflow::unsafe_arena_set_allocated_id(
    ::flyteidl::core::Identifier* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.Workflow.id)
}
inline ::flyteidl::core::Identifier* Workflow::release_id() {
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::Identifier* Workflow::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Workflow.id)
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identifier* Workflow::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identifier>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::flyteidl::core::Identifier* Workflow::mutable_id() {
  ::flyteidl::core::Identifier* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Workflow.id)
  return _msg;
}
inline void Workflow::set_allocated_id(::flyteidl::core::Identifier* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Workflow.id)
}

// .flyteidl.admin.WorkflowClosure closure = 2 [json_name = "closure"];
inline bool Workflow::_internal_has_closure() const {
  return this != internal_default_instance() && closure_ != nullptr;
}
inline bool Workflow::has_closure() const {
  return _internal_has_closure();
}
inline void Workflow::clear_closure() {
  if (GetArenaForAllocation() == nullptr && closure_ != nullptr) {
    delete closure_;
  }
  closure_ = nullptr;
}
inline const ::flyteidl::admin::WorkflowClosure& Workflow::_internal_closure() const {
  const ::flyteidl::admin::WorkflowClosure* p = closure_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::WorkflowClosure&>(
      ::flyteidl::admin::_WorkflowClosure_default_instance_);
}
inline const ::flyteidl::admin::WorkflowClosure& Workflow::closure() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Workflow.closure)
  return _internal_closure();
}
inline void Workflow::unsafe_arena_set_allocated_closure(
    ::flyteidl::admin::WorkflowClosure* closure) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(closure_);
  }
  closure_ = closure;
  if (closure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.Workflow.closure)
}
inline ::flyteidl::admin::WorkflowClosure* Workflow::release_closure() {
  
  ::flyteidl::admin::WorkflowClosure* temp = closure_;
  closure_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::WorkflowClosure* Workflow::unsafe_arena_release_closure() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Workflow.closure)
  
  ::flyteidl::admin::WorkflowClosure* temp = closure_;
  closure_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::WorkflowClosure* Workflow::_internal_mutable_closure() {
  
  if (closure_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::WorkflowClosure>(GetArenaForAllocation());
    closure_ = p;
  }
  return closure_;
}
inline ::flyteidl::admin::WorkflowClosure* Workflow::mutable_closure() {
  ::flyteidl::admin::WorkflowClosure* _msg = _internal_mutable_closure();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Workflow.closure)
  return _msg;
}
inline void Workflow::set_allocated_closure(::flyteidl::admin::WorkflowClosure* closure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete closure_;
  }
  if (closure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::WorkflowClosure>::GetOwningArena(closure);
    if (message_arena != submessage_arena) {
      closure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, closure, submessage_arena);
    }
    
  } else {
    
  }
  closure_ = closure;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Workflow.closure)
}

// -------------------------------------------------------------------

// WorkflowList

// repeated .flyteidl.admin.Workflow workflows = 1 [json_name = "workflows"];
inline int WorkflowList::_internal_workflows_size() const {
  return workflows_.size();
}
inline int WorkflowList::workflows_size() const {
  return _internal_workflows_size();
}
inline void WorkflowList::clear_workflows() {
  workflows_.Clear();
}
inline ::flyteidl::admin::Workflow* WorkflowList::mutable_workflows(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowList.workflows)
  return workflows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Workflow >*
WorkflowList::mutable_workflows() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.WorkflowList.workflows)
  return &workflows_;
}
inline const ::flyteidl::admin::Workflow& WorkflowList::_internal_workflows(int index) const {
  return workflows_.Get(index);
}
inline const ::flyteidl::admin::Workflow& WorkflowList::workflows(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowList.workflows)
  return _internal_workflows(index);
}
inline ::flyteidl::admin::Workflow* WorkflowList::_internal_add_workflows() {
  return workflows_.Add();
}
inline ::flyteidl::admin::Workflow* WorkflowList::add_workflows() {
  ::flyteidl::admin::Workflow* _add = _internal_add_workflows();
  // @@protoc_insertion_point(field_add:flyteidl.admin.WorkflowList.workflows)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Workflow >&
WorkflowList::workflows() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.WorkflowList.workflows)
  return workflows_;
}

// string token = 2 [json_name = "token"];
inline void WorkflowList::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& WorkflowList::token() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowList.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkflowList::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.WorkflowList.token)
}
inline std::string* WorkflowList::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowList.token)
  return _s;
}
inline const std::string& WorkflowList::_internal_token() const {
  return token_.Get();
}
inline void WorkflowList::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorkflowList::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorkflowList::release_token() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowList.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WorkflowList::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowList.token)
}

// -------------------------------------------------------------------

// WorkflowSpec

// .flyteidl.core.WorkflowTemplate template = 1 [json_name = "template"];
inline bool WorkflowSpec::_internal_has_template_() const {
  return this != internal_default_instance() && template__ != nullptr;
}
inline bool WorkflowSpec::has_template_() const {
  return _internal_has_template_();
}
inline const ::flyteidl::core::WorkflowTemplate& WorkflowSpec::_internal_template_() const {
  const ::flyteidl::core::WorkflowTemplate* p = template__;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::WorkflowTemplate&>(
      ::flyteidl::core::_WorkflowTemplate_default_instance_);
}
inline const ::flyteidl::core::WorkflowTemplate& WorkflowSpec::template_() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowSpec.template)
  return _internal_template_();
}
inline void WorkflowSpec::unsafe_arena_set_allocated_template_(
    ::flyteidl::core::WorkflowTemplate* template_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(template__);
  }
  template__ = template_;
  if (template_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.WorkflowSpec.template)
}
inline ::flyteidl::core::WorkflowTemplate* WorkflowSpec::release_template_() {
  
  ::flyteidl::core::WorkflowTemplate* temp = template__;
  template__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::WorkflowTemplate* WorkflowSpec::unsafe_arena_release_template_() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowSpec.template)
  
  ::flyteidl::core::WorkflowTemplate* temp = template__;
  template__ = nullptr;
  return temp;
}
inline ::flyteidl::core::WorkflowTemplate* WorkflowSpec::_internal_mutable_template_() {
  
  if (template__ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::WorkflowTemplate>(GetArenaForAllocation());
    template__ = p;
  }
  return template__;
}
inline ::flyteidl::core::WorkflowTemplate* WorkflowSpec::mutable_template_() {
  ::flyteidl::core::WorkflowTemplate* _msg = _internal_mutable_template_();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowSpec.template)
  return _msg;
}
inline void WorkflowSpec::set_allocated_template_(::flyteidl::core::WorkflowTemplate* template_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(template__);
  }
  if (template_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(template_));
    if (message_arena != submessage_arena) {
      template_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, template_, submessage_arena);
    }
    
  } else {
    
  }
  template__ = template_;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowSpec.template)
}

// repeated .flyteidl.core.WorkflowTemplate sub_workflows = 2 [json_name = "subWorkflows"];
inline int WorkflowSpec::_internal_sub_workflows_size() const {
  return sub_workflows_.size();
}
inline int WorkflowSpec::sub_workflows_size() const {
  return _internal_sub_workflows_size();
}
inline ::flyteidl::core::WorkflowTemplate* WorkflowSpec::mutable_sub_workflows(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowSpec.sub_workflows)
  return sub_workflows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::WorkflowTemplate >*
WorkflowSpec::mutable_sub_workflows() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.WorkflowSpec.sub_workflows)
  return &sub_workflows_;
}
inline const ::flyteidl::core::WorkflowTemplate& WorkflowSpec::_internal_sub_workflows(int index) const {
  return sub_workflows_.Get(index);
}
inline const ::flyteidl::core::WorkflowTemplate& WorkflowSpec::sub_workflows(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowSpec.sub_workflows)
  return _internal_sub_workflows(index);
}
inline ::flyteidl::core::WorkflowTemplate* WorkflowSpec::_internal_add_sub_workflows() {
  return sub_workflows_.Add();
}
inline ::flyteidl::core::WorkflowTemplate* WorkflowSpec::add_sub_workflows() {
  ::flyteidl::core::WorkflowTemplate* _add = _internal_add_sub_workflows();
  // @@protoc_insertion_point(field_add:flyteidl.admin.WorkflowSpec.sub_workflows)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::WorkflowTemplate >&
WorkflowSpec::sub_workflows() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.WorkflowSpec.sub_workflows)
  return sub_workflows_;
}

// -------------------------------------------------------------------

// WorkflowClosure

// .flyteidl.core.CompiledWorkflowClosure compiled_workflow = 1 [json_name = "compiledWorkflow"];
inline bool WorkflowClosure::_internal_has_compiled_workflow() const {
  return this != internal_default_instance() && compiled_workflow_ != nullptr;
}
inline bool WorkflowClosure::has_compiled_workflow() const {
  return _internal_has_compiled_workflow();
}
inline const ::flyteidl::core::CompiledWorkflowClosure& WorkflowClosure::_internal_compiled_workflow() const {
  const ::flyteidl::core::CompiledWorkflowClosure* p = compiled_workflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::CompiledWorkflowClosure&>(
      ::flyteidl::core::_CompiledWorkflowClosure_default_instance_);
}
inline const ::flyteidl::core::CompiledWorkflowClosure& WorkflowClosure::compiled_workflow() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowClosure.compiled_workflow)
  return _internal_compiled_workflow();
}
inline void WorkflowClosure::unsafe_arena_set_allocated_compiled_workflow(
    ::flyteidl::core::CompiledWorkflowClosure* compiled_workflow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(compiled_workflow_);
  }
  compiled_workflow_ = compiled_workflow;
  if (compiled_workflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.WorkflowClosure.compiled_workflow)
}
inline ::flyteidl::core::CompiledWorkflowClosure* WorkflowClosure::release_compiled_workflow() {
  
  ::flyteidl::core::CompiledWorkflowClosure* temp = compiled_workflow_;
  compiled_workflow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::CompiledWorkflowClosure* WorkflowClosure::unsafe_arena_release_compiled_workflow() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowClosure.compiled_workflow)
  
  ::flyteidl::core::CompiledWorkflowClosure* temp = compiled_workflow_;
  compiled_workflow_ = nullptr;
  return temp;
}
inline ::flyteidl::core::CompiledWorkflowClosure* WorkflowClosure::_internal_mutable_compiled_workflow() {
  
  if (compiled_workflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::CompiledWorkflowClosure>(GetArenaForAllocation());
    compiled_workflow_ = p;
  }
  return compiled_workflow_;
}
inline ::flyteidl::core::CompiledWorkflowClosure* WorkflowClosure::mutable_compiled_workflow() {
  ::flyteidl::core::CompiledWorkflowClosure* _msg = _internal_mutable_compiled_workflow();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowClosure.compiled_workflow)
  return _msg;
}
inline void WorkflowClosure::set_allocated_compiled_workflow(::flyteidl::core::CompiledWorkflowClosure* compiled_workflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(compiled_workflow_);
  }
  if (compiled_workflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(compiled_workflow));
    if (message_arena != submessage_arena) {
      compiled_workflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compiled_workflow, submessage_arena);
    }
    
  } else {
    
  }
  compiled_workflow_ = compiled_workflow;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowClosure.compiled_workflow)
}

// .google.protobuf.Timestamp created_at = 2 [json_name = "createdAt"];
inline bool WorkflowClosure::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool WorkflowClosure::has_created_at() const {
  return _internal_has_created_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& WorkflowClosure::_internal_created_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& WorkflowClosure::created_at() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowClosure.created_at)
  return _internal_created_at();
}
inline void WorkflowClosure::unsafe_arena_set_allocated_created_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.WorkflowClosure.created_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* WorkflowClosure::release_created_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* WorkflowClosure::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowClosure.created_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* WorkflowClosure::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    created_at_ = p;
  }
  return created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* WorkflowClosure::mutable_created_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowClosure.created_at)
  return _msg;
}
inline void WorkflowClosure::set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at));
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowClosure.created_at)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2fworkflow_2eproto
