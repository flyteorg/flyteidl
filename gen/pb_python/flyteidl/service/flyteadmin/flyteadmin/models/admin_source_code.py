# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AdminSourceCode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file': 'str',
        'line_number': 'int',
        'repo': 'str',
        'branch': 'str',
        'link': 'str',
        'language': 'str'
    }

    attribute_map = {
        'file': 'file',
        'line_number': 'line_number',
        'repo': 'repo',
        'branch': 'branch',
        'link': 'link',
        'language': 'language'
    }

    def __init__(self, file=None, line_number=None, repo=None, branch=None, link=None, language=None):  # noqa: E501
        """AdminSourceCode - a model defined in Swagger"""  # noqa: E501

        self._file = None
        self._line_number = None
        self._repo = None
        self._branch = None
        self._link = None
        self._language = None
        self.discriminator = None

        if file is not None:
            self.file = file
        if line_number is not None:
            self.line_number = line_number
        if repo is not None:
            self.repo = repo
        if branch is not None:
            self.branch = branch
        if link is not None:
            self.link = link
        if language is not None:
            self.language = language

    @property
    def file(self):
        """Gets the file of this AdminSourceCode.  # noqa: E501


        :return: The file of this AdminSourceCode.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this AdminSourceCode.


        :param file: The file of this AdminSourceCode.  # noqa: E501
        :type: str
        """

        self._file = file

    @property
    def line_number(self):
        """Gets the line_number of this AdminSourceCode.  # noqa: E501


        :return: The line_number of this AdminSourceCode.  # noqa: E501
        :rtype: int
        """
        return self._line_number

    @line_number.setter
    def line_number(self, line_number):
        """Sets the line_number of this AdminSourceCode.


        :param line_number: The line_number of this AdminSourceCode.  # noqa: E501
        :type: int
        """

        self._line_number = line_number

    @property
    def repo(self):
        """Gets the repo of this AdminSourceCode.  # noqa: E501


        :return: The repo of this AdminSourceCode.  # noqa: E501
        :rtype: str
        """
        return self._repo

    @repo.setter
    def repo(self, repo):
        """Sets the repo of this AdminSourceCode.


        :param repo: The repo of this AdminSourceCode.  # noqa: E501
        :type: str
        """

        self._repo = repo

    @property
    def branch(self):
        """Gets the branch of this AdminSourceCode.  # noqa: E501


        :return: The branch of this AdminSourceCode.  # noqa: E501
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this AdminSourceCode.


        :param branch: The branch of this AdminSourceCode.  # noqa: E501
        :type: str
        """

        self._branch = branch

    @property
    def link(self):
        """Gets the link of this AdminSourceCode.  # noqa: E501


        :return: The link of this AdminSourceCode.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this AdminSourceCode.


        :param link: The link of this AdminSourceCode.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def language(self):
        """Gets the language of this AdminSourceCode.  # noqa: E501


        :return: The language of this AdminSourceCode.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this AdminSourceCode.


        :param language: The language of this AdminSourceCode.  # noqa: E501
        :type: str
        """

        self._language = language

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdminSourceCode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdminSourceCode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
