// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/core/artifact_id.proto

package core

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ArtifactKey struct {
	// Project and domain and suffix needs to be unique across a given artifact store.
	Project              string   `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Domain               string   `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArtifactKey) Reset()         { *m = ArtifactKey{} }
func (m *ArtifactKey) String() string { return proto.CompactTextString(m) }
func (*ArtifactKey) ProtoMessage()    {}
func (*ArtifactKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_1079b0707e23f978, []int{0}
}

func (m *ArtifactKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArtifactKey.Unmarshal(m, b)
}
func (m *ArtifactKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArtifactKey.Marshal(b, m, deterministic)
}
func (m *ArtifactKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArtifactKey.Merge(m, src)
}
func (m *ArtifactKey) XXX_Size() int {
	return xxx_messageInfo_ArtifactKey.Size(m)
}
func (m *ArtifactKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ArtifactKey.DiscardUnknown(m)
}

var xxx_messageInfo_ArtifactKey proto.InternalMessageInfo

func (m *ArtifactKey) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ArtifactKey) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ArtifactKey) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Only valid for triggers
type ArtifactBindingData struct {
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// These two fields are only relevant in the partition value case
	PartitionKey         string   `protobuf:"bytes,2,opt,name=partition_key,json=partitionKey,proto3" json:"partition_key,omitempty"`
	Transform            string   `protobuf:"bytes,3,opt,name=transform,proto3" json:"transform,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArtifactBindingData) Reset()         { *m = ArtifactBindingData{} }
func (m *ArtifactBindingData) String() string { return proto.CompactTextString(m) }
func (*ArtifactBindingData) ProtoMessage()    {}
func (*ArtifactBindingData) Descriptor() ([]byte, []int) {
	return fileDescriptor_1079b0707e23f978, []int{1}
}

func (m *ArtifactBindingData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArtifactBindingData.Unmarshal(m, b)
}
func (m *ArtifactBindingData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArtifactBindingData.Marshal(b, m, deterministic)
}
func (m *ArtifactBindingData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArtifactBindingData.Merge(m, src)
}
func (m *ArtifactBindingData) XXX_Size() int {
	return xxx_messageInfo_ArtifactBindingData.Size(m)
}
func (m *ArtifactBindingData) XXX_DiscardUnknown() {
	xxx_messageInfo_ArtifactBindingData.DiscardUnknown(m)
}

var xxx_messageInfo_ArtifactBindingData proto.InternalMessageInfo

func (m *ArtifactBindingData) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ArtifactBindingData) GetPartitionKey() string {
	if m != nil {
		return m.PartitionKey
	}
	return ""
}

func (m *ArtifactBindingData) GetTransform() string {
	if m != nil {
		return m.Transform
	}
	return ""
}

type PartitionValue struct {
	StaticValue          string               `protobuf:"bytes,1,opt,name=static_value,json=staticValue,proto3" json:"static_value,omitempty"`
	Binding              *ArtifactBindingData `protobuf:"bytes,2,opt,name=binding,proto3" json:"binding,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PartitionValue) Reset()         { *m = PartitionValue{} }
func (m *PartitionValue) String() string { return proto.CompactTextString(m) }
func (*PartitionValue) ProtoMessage()    {}
func (*PartitionValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_1079b0707e23f978, []int{2}
}

func (m *PartitionValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartitionValue.Unmarshal(m, b)
}
func (m *PartitionValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartitionValue.Marshal(b, m, deterministic)
}
func (m *PartitionValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionValue.Merge(m, src)
}
func (m *PartitionValue) XXX_Size() int {
	return xxx_messageInfo_PartitionValue.Size(m)
}
func (m *PartitionValue) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionValue.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionValue proto.InternalMessageInfo

func (m *PartitionValue) GetStaticValue() string {
	if m != nil {
		return m.StaticValue
	}
	return ""
}

func (m *PartitionValue) GetBinding() *ArtifactBindingData {
	if m != nil {
		return m.Binding
	}
	return nil
}

type Partitions struct {
	Value                map[string]*PartitionValue `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Partitions) Reset()         { *m = Partitions{} }
func (m *Partitions) String() string { return proto.CompactTextString(m) }
func (*Partitions) ProtoMessage()    {}
func (*Partitions) Descriptor() ([]byte, []int) {
	return fileDescriptor_1079b0707e23f978, []int{3}
}

func (m *Partitions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Partitions.Unmarshal(m, b)
}
func (m *Partitions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Partitions.Marshal(b, m, deterministic)
}
func (m *Partitions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Partitions.Merge(m, src)
}
func (m *Partitions) XXX_Size() int {
	return xxx_messageInfo_Partitions.Size(m)
}
func (m *Partitions) XXX_DiscardUnknown() {
	xxx_messageInfo_Partitions.DiscardUnknown(m)
}

var xxx_messageInfo_Partitions proto.InternalMessageInfo

func (m *Partitions) GetValue() map[string]*PartitionValue {
	if m != nil {
		return m.Value
	}
	return nil
}

type ArtifactID struct {
	ArtifactKey *ArtifactKey `protobuf:"bytes,1,opt,name=artifact_key,json=artifactKey,proto3" json:"artifact_key,omitempty"`
	Version     string       `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Think of a partition as a tag on an Artifact, except it's a key-value pair.
	// Different partitions naturally have different versions (execution ids).
	// This is a oneof because of partition querying... we need a way to distinguish between
	// a user not-specifying partitions when searching, and specifically searching for an Artifact
	// that is not partitioned (this can happen if an Artifact goes from partitioned to non-
	// partitioned across executions).
	//
	// Types that are valid to be assigned to Dimensions:
	//	*ArtifactID_Partitions
	Dimensions           isArtifactID_Dimensions `protobuf_oneof:"dimensions"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ArtifactID) Reset()         { *m = ArtifactID{} }
func (m *ArtifactID) String() string { return proto.CompactTextString(m) }
func (*ArtifactID) ProtoMessage()    {}
func (*ArtifactID) Descriptor() ([]byte, []int) {
	return fileDescriptor_1079b0707e23f978, []int{4}
}

func (m *ArtifactID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArtifactID.Unmarshal(m, b)
}
func (m *ArtifactID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArtifactID.Marshal(b, m, deterministic)
}
func (m *ArtifactID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArtifactID.Merge(m, src)
}
func (m *ArtifactID) XXX_Size() int {
	return xxx_messageInfo_ArtifactID.Size(m)
}
func (m *ArtifactID) XXX_DiscardUnknown() {
	xxx_messageInfo_ArtifactID.DiscardUnknown(m)
}

var xxx_messageInfo_ArtifactID proto.InternalMessageInfo

func (m *ArtifactID) GetArtifactKey() *ArtifactKey {
	if m != nil {
		return m.ArtifactKey
	}
	return nil
}

func (m *ArtifactID) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type isArtifactID_Dimensions interface {
	isArtifactID_Dimensions()
}

type ArtifactID_Partitions struct {
	Partitions *Partitions `protobuf:"bytes,3,opt,name=partitions,proto3,oneof"`
}

func (*ArtifactID_Partitions) isArtifactID_Dimensions() {}

func (m *ArtifactID) GetDimensions() isArtifactID_Dimensions {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *ArtifactID) GetPartitions() *Partitions {
	if x, ok := m.GetDimensions().(*ArtifactID_Partitions); ok {
		return x.Partitions
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ArtifactID) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ArtifactID_Partitions)(nil),
	}
}

type ArtifactTag struct {
	ArtifactKey          *ArtifactKey `protobuf:"bytes,1,opt,name=artifact_key,json=artifactKey,proto3" json:"artifact_key,omitempty"`
	Value                string       `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ArtifactTag) Reset()         { *m = ArtifactTag{} }
func (m *ArtifactTag) String() string { return proto.CompactTextString(m) }
func (*ArtifactTag) ProtoMessage()    {}
func (*ArtifactTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_1079b0707e23f978, []int{5}
}

func (m *ArtifactTag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArtifactTag.Unmarshal(m, b)
}
func (m *ArtifactTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArtifactTag.Marshal(b, m, deterministic)
}
func (m *ArtifactTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArtifactTag.Merge(m, src)
}
func (m *ArtifactTag) XXX_Size() int {
	return xxx_messageInfo_ArtifactTag.Size(m)
}
func (m *ArtifactTag) XXX_DiscardUnknown() {
	xxx_messageInfo_ArtifactTag.DiscardUnknown(m)
}

var xxx_messageInfo_ArtifactTag proto.InternalMessageInfo

func (m *ArtifactTag) GetArtifactKey() *ArtifactKey {
	if m != nil {
		return m.ArtifactKey
	}
	return nil
}

func (m *ArtifactTag) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Uniqueness constraints for Artifacts
//  - project, domain, name, version, partitions
// Option 2 (tags are standalone, point to an individual artifact id):
//  - project, domain, name, alias (points to one partition if partitioned)
//  - project, domain, name, partition key, partition value
type ArtifactQuery struct {
	// Types that are valid to be assigned to Identifier:
	//	*ArtifactQuery_ArtifactId
	//	*ArtifactQuery_ArtifactTag
	//	*ArtifactQuery_Uri
	//	*ArtifactQuery_Binding
	Identifier           isArtifactQuery_Identifier `protobuf_oneof:"identifier"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ArtifactQuery) Reset()         { *m = ArtifactQuery{} }
func (m *ArtifactQuery) String() string { return proto.CompactTextString(m) }
func (*ArtifactQuery) ProtoMessage()    {}
func (*ArtifactQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_1079b0707e23f978, []int{6}
}

func (m *ArtifactQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArtifactQuery.Unmarshal(m, b)
}
func (m *ArtifactQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArtifactQuery.Marshal(b, m, deterministic)
}
func (m *ArtifactQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArtifactQuery.Merge(m, src)
}
func (m *ArtifactQuery) XXX_Size() int {
	return xxx_messageInfo_ArtifactQuery.Size(m)
}
func (m *ArtifactQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ArtifactQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ArtifactQuery proto.InternalMessageInfo

type isArtifactQuery_Identifier interface {
	isArtifactQuery_Identifier()
}

type ArtifactQuery_ArtifactId struct {
	ArtifactId *ArtifactID `protobuf:"bytes,1,opt,name=artifact_id,json=artifactId,proto3,oneof"`
}

type ArtifactQuery_ArtifactTag struct {
	ArtifactTag *ArtifactTag `protobuf:"bytes,2,opt,name=artifact_tag,json=artifactTag,proto3,oneof"`
}

type ArtifactQuery_Uri struct {
	Uri string `protobuf:"bytes,3,opt,name=uri,proto3,oneof"`
}

type ArtifactQuery_Binding struct {
	Binding *ArtifactBindingData `protobuf:"bytes,4,opt,name=binding,proto3,oneof"`
}

func (*ArtifactQuery_ArtifactId) isArtifactQuery_Identifier() {}

func (*ArtifactQuery_ArtifactTag) isArtifactQuery_Identifier() {}

func (*ArtifactQuery_Uri) isArtifactQuery_Identifier() {}

func (*ArtifactQuery_Binding) isArtifactQuery_Identifier() {}

func (m *ArtifactQuery) GetIdentifier() isArtifactQuery_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *ArtifactQuery) GetArtifactId() *ArtifactID {
	if x, ok := m.GetIdentifier().(*ArtifactQuery_ArtifactId); ok {
		return x.ArtifactId
	}
	return nil
}

func (m *ArtifactQuery) GetArtifactTag() *ArtifactTag {
	if x, ok := m.GetIdentifier().(*ArtifactQuery_ArtifactTag); ok {
		return x.ArtifactTag
	}
	return nil
}

func (m *ArtifactQuery) GetUri() string {
	if x, ok := m.GetIdentifier().(*ArtifactQuery_Uri); ok {
		return x.Uri
	}
	return ""
}

func (m *ArtifactQuery) GetBinding() *ArtifactBindingData {
	if x, ok := m.GetIdentifier().(*ArtifactQuery_Binding); ok {
		return x.Binding
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ArtifactQuery) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ArtifactQuery_ArtifactId)(nil),
		(*ArtifactQuery_ArtifactTag)(nil),
		(*ArtifactQuery_Uri)(nil),
		(*ArtifactQuery_Binding)(nil),
	}
}

type Trigger struct {
	// This will be set to a launch plan type, but note that this is different than the actual launch plan type.
	TriggerId *Identifier `protobuf:"bytes,1,opt,name=trigger_id,json=triggerId,proto3" json:"trigger_id,omitempty"`
	// These are partial artifact IDs that will be triggered on
	// Consider making these ArtifactQuery instead.
	Triggers             []*ArtifactID `protobuf:"bytes,2,rep,name=triggers,proto3" json:"triggers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Trigger) Reset()         { *m = Trigger{} }
func (m *Trigger) String() string { return proto.CompactTextString(m) }
func (*Trigger) ProtoMessage()    {}
func (*Trigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_1079b0707e23f978, []int{7}
}

func (m *Trigger) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trigger.Unmarshal(m, b)
}
func (m *Trigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trigger.Marshal(b, m, deterministic)
}
func (m *Trigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trigger.Merge(m, src)
}
func (m *Trigger) XXX_Size() int {
	return xxx_messageInfo_Trigger.Size(m)
}
func (m *Trigger) XXX_DiscardUnknown() {
	xxx_messageInfo_Trigger.DiscardUnknown(m)
}

var xxx_messageInfo_Trigger proto.InternalMessageInfo

func (m *Trigger) GetTriggerId() *Identifier {
	if m != nil {
		return m.TriggerId
	}
	return nil
}

func (m *Trigger) GetTriggers() []*ArtifactID {
	if m != nil {
		return m.Triggers
	}
	return nil
}

func init() {
	proto.RegisterType((*ArtifactKey)(nil), "flyteidl.core.ArtifactKey")
	proto.RegisterType((*ArtifactBindingData)(nil), "flyteidl.core.ArtifactBindingData")
	proto.RegisterType((*PartitionValue)(nil), "flyteidl.core.PartitionValue")
	proto.RegisterType((*Partitions)(nil), "flyteidl.core.Partitions")
	proto.RegisterMapType((map[string]*PartitionValue)(nil), "flyteidl.core.Partitions.ValueEntry")
	proto.RegisterType((*ArtifactID)(nil), "flyteidl.core.ArtifactID")
	proto.RegisterType((*ArtifactTag)(nil), "flyteidl.core.ArtifactTag")
	proto.RegisterType((*ArtifactQuery)(nil), "flyteidl.core.ArtifactQuery")
	proto.RegisterType((*Trigger)(nil), "flyteidl.core.Trigger")
}

func init() { proto.RegisterFile("flyteidl/core/artifact_id.proto", fileDescriptor_1079b0707e23f978) }

var fileDescriptor_1079b0707e23f978 = []byte{
	// 554 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0x6e, 0xda, 0x6d, 0xa5, 0x27, 0x2d, 0x42, 0x66, 0x42, 0x5d, 0xc5, 0x6f, 0xe0, 0x62, 0x37,
	0x24, 0x52, 0x07, 0x68, 0x1a, 0x03, 0x44, 0x55, 0xa4, 0x56, 0xbb, 0x81, 0x50, 0x81, 0xc4, 0x4d,
	0xe5, 0x26, 0x6e, 0x30, 0x34, 0x76, 0x71, 0xdc, 0x89, 0xf0, 0x36, 0xbc, 0x01, 0x8f, 0xc6, 0x23,
	0x20, 0xdb, 0x71, 0xd2, 0x22, 0x22, 0x21, 0xed, 0xce, 0xe7, 0xe4, 0x3b, 0xdf, 0x39, 0xdf, 0xc9,
	0x67, 0xc3, 0xbd, 0xe5, 0x2a, 0x97, 0x84, 0xc6, 0xab, 0x20, 0xe2, 0x82, 0x04, 0x58, 0x48, 0xba,
	0xc4, 0x91, 0x9c, 0xd3, 0xd8, 0x5f, 0x0b, 0x2e, 0x39, 0xea, 0x59, 0x80, 0xaf, 0x00, 0x83, 0xbb,
	0xbb, 0x78, 0x1a, 0x13, 0x26, 0xe9, 0x92, 0x12, 0x61, 0xe0, 0xde, 0x7b, 0x70, 0x5f, 0x17, 0x1c,
	0x17, 0x24, 0x47, 0x7d, 0x68, 0xaf, 0x05, 0xff, 0x42, 0x22, 0xd9, 0x77, 0xee, 0x3b, 0xc7, 0x9d,
	0xd0, 0x86, 0xe8, 0x16, 0x1c, 0xc4, 0x3c, 0xc5, 0x94, 0xf5, 0x9b, 0xfa, 0x43, 0x11, 0x21, 0x04,
	0x7b, 0x0c, 0xa7, 0xa4, 0xdf, 0xd2, 0x59, 0x7d, 0xf6, 0x18, 0xdc, 0xb4, 0xa4, 0x23, 0xca, 0x62,
	0xca, 0x92, 0x31, 0x96, 0x18, 0x1d, 0xc2, 0x3e, 0x65, 0x31, 0xf9, 0xae, 0xa9, 0x7b, 0xa1, 0x09,
	0xd0, 0x43, 0xe8, 0xad, 0x95, 0x0c, 0x49, 0x39, 0x9b, 0x7f, 0x25, 0x79, 0xc1, 0xdf, 0x2d, 0x93,
	0x6a, 0xae, 0xdb, 0xd0, 0x91, 0x02, 0xb3, 0x6c, 0xc9, 0x45, 0x5a, 0xb4, 0xaa, 0x12, 0xde, 0x37,
	0xb8, 0xfe, 0xd6, 0xa2, 0x3f, 0xe0, 0xd5, 0x86, 0xa0, 0x07, 0xd0, 0xcd, 0x24, 0x96, 0x34, 0x9a,
	0x5f, 0xaa, 0xb8, 0x10, 0xe3, 0x9a, 0x9c, 0x81, 0x9c, 0x43, 0x7b, 0x61, 0x86, 0xd3, 0x1d, 0xdd,
	0xa1, 0xe7, 0xef, 0xac, 0xce, 0xff, 0x87, 0x84, 0xd0, 0x96, 0x78, 0x3f, 0x1d, 0x80, 0xb2, 0x67,
	0x86, 0xce, 0x60, 0xdf, 0x36, 0x6a, 0x1d, 0xbb, 0xc3, 0x47, 0x7f, 0x51, 0x55, 0x48, 0x5f, 0x37,
	0x7f, 0xc3, 0xa4, 0xc8, 0x43, 0x53, 0x32, 0xf8, 0x08, 0x50, 0x25, 0xd1, 0x0d, 0x68, 0xa9, 0x25,
	0x98, 0x81, 0xd5, 0x11, 0x9d, 0x58, 0x6e, 0x33, 0xe6, 0x9d, 0x3a, 0x6e, 0x4d, 0x52, 0x90, 0x9e,
	0x35, 0x4f, 0x1d, 0xef, 0x97, 0x03, 0x60, 0x45, 0x4c, 0xc7, 0xe8, 0x05, 0x74, 0x4b, 0xbb, 0xd8,
	0x16, 0xee, 0x70, 0x50, 0xa3, 0xfa, 0x82, 0xe4, 0xa1, 0x8b, 0x77, 0xad, 0x71, 0x49, 0x44, 0x46,
	0xb9, 0x75, 0x80, 0x0d, 0xd1, 0x73, 0x80, 0xf2, 0x67, 0x65, 0xfa, 0xef, 0xb8, 0xc3, 0xa3, 0xda,
	0x0d, 0x4c, 0x1a, 0xe1, 0x16, 0x7c, 0xd4, 0x05, 0x88, 0x69, 0x4a, 0x98, 0x62, 0xca, 0xbc, 0x45,
	0x65, 0xc7, 0x19, 0x4e, 0xae, 0x3a, 0xf2, 0xe1, 0xf6, 0xe6, 0x3a, 0xc5, 0x6a, 0xbc, 0xdf, 0x0e,
	0xf4, 0x6c, 0xc9, 0xbb, 0x0d, 0x11, 0x39, 0x3a, 0x07, 0x77, 0xeb, 0x22, 0x15, 0x5d, 0x8e, 0x6a,
	0xba, 0x4c, 0xc7, 0x4a, 0x81, 0xc5, 0x4f, 0x63, 0xf4, 0x6a, 0x6b, 0x48, 0x89, 0xad, 0x9b, 0xea,
	0x86, 0x9c, 0xe1, 0x64, 0xd2, 0xa8, 0xc6, 0x54, 0x2a, 0x11, 0xb4, 0x36, 0x82, 0x1a, 0x5b, 0x4f,
	0x1a, 0xa1, 0x0a, 0xd0, 0xcb, 0xca, 0x9d, 0x7b, 0xff, 0xeb, 0xce, 0x49, 0xa3, 0xf4, 0xa7, 0x5a,
	0x6b, 0x75, 0xd7, 0xbd, 0x1f, 0xd0, 0x9e, 0x09, 0x9a, 0x24, 0x44, 0xa0, 0x53, 0x00, 0x69, 0x8e,
	0xf5, 0x52, 0xa7, 0x65, 0xa5, 0xba, 0x65, 0x1a, 0x3c, 0x8d, 0xd1, 0x53, 0xb8, 0x56, 0x04, 0x59,
	0xbf, 0xa9, 0x6d, 0x5e, 0xbf, 0xa2, 0xb0, 0x84, 0x8e, 0x9e, 0x7d, 0x7a, 0x92, 0x50, 0xf9, 0x79,
	0xb3, 0xf0, 0x23, 0x9e, 0x06, 0xba, 0x80, 0x8b, 0x24, 0x28, 0xdf, 0xa5, 0x84, 0xb0, 0x60, 0xbd,
	0x78, 0x9c, 0xf0, 0x60, 0xe7, 0xa9, 0x5a, 0x1c, 0xe8, 0x07, 0xea, 0xe4, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xa8, 0xbb, 0xf7, 0x06, 0xf2, 0x04, 0x00, 0x00,
}
