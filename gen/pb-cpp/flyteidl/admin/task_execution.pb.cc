// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/task_execution.proto

#include "flyteidl/admin/task_execution.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace admin {
constexpr TaskExecutionGetRequest::TaskExecutionGetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr){}
struct TaskExecutionGetRequestDefaultTypeInternal {
  constexpr TaskExecutionGetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskExecutionGetRequestDefaultTypeInternal() {}
  union {
    TaskExecutionGetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskExecutionGetRequestDefaultTypeInternal _TaskExecutionGetRequest_default_instance_;
constexpr TaskExecutionListRequest::TaskExecutionListRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filters_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_execution_id_(nullptr)
  , sort_by_(nullptr)
  , limit_(0u){}
struct TaskExecutionListRequestDefaultTypeInternal {
  constexpr TaskExecutionListRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskExecutionListRequestDefaultTypeInternal() {}
  union {
    TaskExecutionListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskExecutionListRequestDefaultTypeInternal _TaskExecutionListRequest_default_instance_;
constexpr TaskExecution::TaskExecution(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : input_uri_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr)
  , closure_(nullptr)
  , is_parent_(false){}
struct TaskExecutionDefaultTypeInternal {
  constexpr TaskExecutionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskExecutionDefaultTypeInternal() {}
  union {
    TaskExecution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskExecutionDefaultTypeInternal _TaskExecution_default_instance_;
constexpr TaskExecutionList::TaskExecutionList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_executions_()
  , token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TaskExecutionListDefaultTypeInternal {
  constexpr TaskExecutionListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskExecutionListDefaultTypeInternal() {}
  union {
    TaskExecutionList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskExecutionListDefaultTypeInternal _TaskExecutionList_default_instance_;
constexpr TaskExecutionClosure::TaskExecutionClosure(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logs_()
  , reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , task_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , started_at_(nullptr)
  , duration_(nullptr)
  , created_at_(nullptr)
  , updated_at_(nullptr)
  , custom_info_(nullptr)
  , metadata_(nullptr)
  , phase_(0)

  , event_version_(0)
  , _oneof_case_{}{}
struct TaskExecutionClosureDefaultTypeInternal {
  constexpr TaskExecutionClosureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskExecutionClosureDefaultTypeInternal() {}
  union {
    TaskExecutionClosure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskExecutionClosureDefaultTypeInternal _TaskExecutionClosure_default_instance_;
constexpr TaskExecutionGetDataRequest::TaskExecutionGetDataRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr){}
struct TaskExecutionGetDataRequestDefaultTypeInternal {
  constexpr TaskExecutionGetDataRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskExecutionGetDataRequestDefaultTypeInternal() {}
  union {
    TaskExecutionGetDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskExecutionGetDataRequestDefaultTypeInternal _TaskExecutionGetDataRequest_default_instance_;
constexpr TaskExecutionGetDataResponse::TaskExecutionGetDataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inputs_(nullptr)
  , outputs_(nullptr)
  , full_inputs_(nullptr)
  , full_outputs_(nullptr){}
struct TaskExecutionGetDataResponseDefaultTypeInternal {
  constexpr TaskExecutionGetDataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskExecutionGetDataResponseDefaultTypeInternal() {}
  union {
    TaskExecutionGetDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskExecutionGetDataResponseDefaultTypeInternal _TaskExecutionGetDataResponse_default_instance_;
}  // namespace admin
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fadmin_2ftask_5fexecution_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fadmin_2ftask_5fexecution_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fadmin_2ftask_5fexecution_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fadmin_2ftask_5fexecution_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionGetRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionListRequest, node_execution_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionListRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionListRequest, token_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionListRequest, filters_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionListRequest, sort_by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecution, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecution, input_uri_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecution, closure_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecution, is_parent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionList, task_executions_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionList, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, phase_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, logs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, started_at_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, duration_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, created_at_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, updated_at_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, custom_info_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, reason_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, task_type_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, metadata_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, event_version_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, output_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionGetDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionGetDataRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionGetDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionGetDataResponse, inputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionGetDataResponse, outputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionGetDataResponse, full_inputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionGetDataResponse, full_outputs_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::admin::TaskExecutionGetRequest)},
  { 7, -1, -1, sizeof(::flyteidl::admin::TaskExecutionListRequest)},
  { 18, -1, -1, sizeof(::flyteidl::admin::TaskExecution)},
  { 28, -1, -1, sizeof(::flyteidl::admin::TaskExecutionList)},
  { 36, -1, -1, sizeof(::flyteidl::admin::TaskExecutionClosure)},
  { 57, -1, -1, sizeof(::flyteidl::admin::TaskExecutionGetDataRequest)},
  { 64, -1, -1, sizeof(::flyteidl::admin::TaskExecutionGetDataResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_TaskExecutionGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_TaskExecutionListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_TaskExecution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_TaskExecutionList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_TaskExecutionClosure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_TaskExecutionGetDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_TaskExecutionGetDataResponse_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fadmin_2ftask_5fexecution_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#flyteidl/admin/task_execution.proto\022\016f"
  "lyteidl.admin\032\033flyteidl/admin/common.pro"
  "to\032\035flyteidl/core/execution.proto\032\036flyte"
  "idl/core/identifier.proto\032\034flyteidl/core"
  "/literals.proto\032\032flyteidl/event/event.pr"
  "oto\032\037google/protobuf/timestamp.proto\032\036go"
  "ogle/protobuf/duration.proto\032\034google/pro"
  "tobuf/struct.proto\"Q\n\027TaskExecutionGetRe"
  "quest\0226\n\002id\030\001 \001(\0132&.flyteidl.core.TaskEx"
  "ecutionIdentifierR\002id\"\343\001\n\030TaskExecutionL"
  "istRequest\022R\n\021node_execution_id\030\001 \001(\0132&."
  "flyteidl.core.NodeExecutionIdentifierR\017n"
  "odeExecutionId\022\024\n\005limit\030\002 \001(\rR\005limit\022\024\n\005"
  "token\030\003 \001(\tR\005token\022\030\n\007filters\030\004 \001(\tR\007fil"
  "ters\022-\n\007sort_by\030\005 \001(\0132\024.flyteidl.admin.S"
  "ortR\006sortBy\"\301\001\n\rTaskExecution\0226\n\002id\030\001 \001("
  "\0132&.flyteidl.core.TaskExecutionIdentifie"
  "rR\002id\022\033\n\tinput_uri\030\002 \001(\tR\010inputUri\022>\n\007cl"
  "osure\030\003 \001(\0132$.flyteidl.admin.TaskExecuti"
  "onClosureR\007closure\022\033\n\tis_parent\030\004 \001(\010R\010i"
  "sParent\"q\n\021TaskExecutionList\022F\n\017task_exe"
  "cutions\030\001 \003(\0132\035.flyteidl.admin.TaskExecu"
  "tionR\016taskExecutions\022\024\n\005token\030\002 \001(\tR\005tok"
  "en\"\352\005\n\024TaskExecutionClosure\022#\n\noutput_ur"
  "i\030\001 \001(\tB\002\030\001H\000R\toutputUri\0225\n\005error\030\002 \001(\0132"
  "\035.flyteidl.core.ExecutionErrorH\000R\005error\022"
  "@\n\013output_data\030\014 \001(\0132\031.flyteidl.core.Lit"
  "eralMapB\002\030\001H\000R\noutputData\0228\n\005phase\030\003 \001(\016"
  "2\".flyteidl.core.TaskExecution.PhaseR\005ph"
  "ase\022*\n\004logs\030\004 \003(\0132\026.flyteidl.core.TaskLo"
  "gR\004logs\0229\n\nstarted_at\030\005 \001(\0132\032.google.pro"
  "tobuf.TimestampR\tstartedAt\0225\n\010duration\030\006"
  " \001(\0132\031.google.protobuf.DurationR\010duratio"
  "n\0229\n\ncreated_at\030\007 \001(\0132\032.google.protobuf."
  "TimestampR\tcreatedAt\0229\n\nupdated_at\030\010 \001(\013"
  "2\032.google.protobuf.TimestampR\tupdatedAt\022"
  "8\n\013custom_info\030\t \001(\0132\027.google.protobuf.S"
  "tructR\ncustomInfo\022\026\n\006reason\030\n \001(\tR\006reaso"
  "n\022\033\n\ttask_type\030\013 \001(\tR\010taskType\022A\n\010metada"
  "ta\030\020 \001(\0132%.flyteidl.event.TaskExecutionM"
  "etadataR\010metadata\022#\n\revent_version\030\021 \001(\005"
  "R\014eventVersionB\017\n\routput_result\"U\n\033TaskE"
  "xecutionGetDataRequest\0226\n\002id\030\001 \001(\0132&.fly"
  "teidl.core.TaskExecutionIdentifierR\002id\"\204"
  "\002\n\034TaskExecutionGetDataResponse\0223\n\006input"
  "s\030\001 \001(\0132\027.flyteidl.admin.UrlBlobB\002\030\001R\006in"
  "puts\0225\n\007outputs\030\002 \001(\0132\027.flyteidl.admin.U"
  "rlBlobB\002\030\001R\007outputs\022:\n\013full_inputs\030\003 \001(\013"
  "2\031.flyteidl.core.LiteralMapR\nfullInputs\022"
  "<\n\014full_outputs\030\004 \001(\0132\031.flyteidl.core.Li"
  "teralMapR\013fullOutputsB\273\001\n\022com.flyteidl.a"
  "dminB\022TaskExecutionProtoH\002Z5github.com/f"
  "lyteorg/flyteidl/gen/pb-go/flyteidl/admi"
  "n\370\001\000\242\002\003FAX\252\002\016Flyteidl.Admin\312\002\016Flyteidl\\A"
  "dmin\342\002\032Flyteidl\\Admin\\GPBMetadata\352\002\017Flyt"
  "eidl::Adminb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto_deps[8] = {
  &::descriptor_table_flyteidl_2fadmin_2fcommon_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fexecution_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fidentifier_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fliterals_2eproto,
  &::descriptor_table_flyteidl_2fevent_2fevent_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto = {
  false, false, 2219, descriptor_table_protodef_flyteidl_2fadmin_2ftask_5fexecution_2eproto, "flyteidl/admin/task_execution.proto", 
  &descriptor_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto_once, descriptor_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto_deps, 8, 7,
  schemas, file_default_instances, TableStruct_flyteidl_2fadmin_2ftask_5fexecution_2eproto::offsets,
  file_level_metadata_flyteidl_2fadmin_2ftask_5fexecution_2eproto, file_level_enum_descriptors_flyteidl_2fadmin_2ftask_5fexecution_2eproto, file_level_service_descriptors_flyteidl_2fadmin_2ftask_5fexecution_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto_getter() {
  return &descriptor_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fadmin_2ftask_5fexecution_2eproto(&descriptor_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto);
namespace flyteidl {
namespace admin {

// ===================================================================

class TaskExecutionGetRequest::_Internal {
 public:
  static const ::flyteidl::core::TaskExecutionIdentifier& id(const TaskExecutionGetRequest* msg);
};

const ::flyteidl::core::TaskExecutionIdentifier&
TaskExecutionGetRequest::_Internal::id(const TaskExecutionGetRequest* msg) {
  return *msg->id_;
}
void TaskExecutionGetRequest::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
TaskExecutionGetRequest::TaskExecutionGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.TaskExecutionGetRequest)
}
TaskExecutionGetRequest::TaskExecutionGetRequest(const TaskExecutionGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::flyteidl::core::TaskExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskExecutionGetRequest)
}

inline void TaskExecutionGetRequest::SharedCtor() {
id_ = nullptr;
}

TaskExecutionGetRequest::~TaskExecutionGetRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskExecutionGetRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskExecutionGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void TaskExecutionGetRequest::ArenaDtor(void* object) {
  TaskExecutionGetRequest* _this = reinterpret_cast< TaskExecutionGetRequest* >(object);
  (void)_this;
}
void TaskExecutionGetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskExecutionGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskExecutionGetRequest::InternalSwap(TaskExecutionGetRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata TaskExecutionGetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2ftask_5fexecution_2eproto[0]);
}

// ===================================================================

class TaskExecutionListRequest::_Internal {
 public:
  static const ::flyteidl::core::NodeExecutionIdentifier& node_execution_id(const TaskExecutionListRequest* msg);
  static const ::flyteidl::admin::Sort& sort_by(const TaskExecutionListRequest* msg);
};

const ::flyteidl::core::NodeExecutionIdentifier&
TaskExecutionListRequest::_Internal::node_execution_id(const TaskExecutionListRequest* msg) {
  return *msg->node_execution_id_;
}
const ::flyteidl::admin::Sort&
TaskExecutionListRequest::_Internal::sort_by(const TaskExecutionListRequest* msg) {
  return *msg->sort_by_;
}
void TaskExecutionListRequest::clear_node_execution_id() {
  if (GetArenaForAllocation() == nullptr && node_execution_id_ != nullptr) {
    delete node_execution_id_;
  }
  node_execution_id_ = nullptr;
}
void TaskExecutionListRequest::clear_sort_by() {
  if (GetArenaForAllocation() == nullptr && sort_by_ != nullptr) {
    delete sort_by_;
  }
  sort_by_ = nullptr;
}
TaskExecutionListRequest::TaskExecutionListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.TaskExecutionListRequest)
}
TaskExecutionListRequest::TaskExecutionListRequest(const TaskExecutionListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  filters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filters().empty()) {
    filters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filters(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_node_execution_id()) {
    node_execution_id_ = new ::flyteidl::core::NodeExecutionIdentifier(*from.node_execution_id_);
  } else {
    node_execution_id_ = nullptr;
  }
  if (from._internal_has_sort_by()) {
    sort_by_ = new ::flyteidl::admin::Sort(*from.sort_by_);
  } else {
    sort_by_ = nullptr;
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskExecutionListRequest)
}

inline void TaskExecutionListRequest::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
filters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&node_execution_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&node_execution_id_)) + sizeof(limit_));
}

TaskExecutionListRequest::~TaskExecutionListRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskExecutionListRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskExecutionListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filters_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete node_execution_id_;
  if (this != internal_default_instance()) delete sort_by_;
}

void TaskExecutionListRequest::ArenaDtor(void* object) {
  TaskExecutionListRequest* _this = reinterpret_cast< TaskExecutionListRequest* >(object);
  (void)_this;
}
void TaskExecutionListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskExecutionListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskExecutionListRequest::InternalSwap(TaskExecutionListRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata TaskExecutionListRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2ftask_5fexecution_2eproto[1]);
}

// ===================================================================

class TaskExecution::_Internal {
 public:
  static const ::flyteidl::core::TaskExecutionIdentifier& id(const TaskExecution* msg);
  static const ::flyteidl::admin::TaskExecutionClosure& closure(const TaskExecution* msg);
};

const ::flyteidl::core::TaskExecutionIdentifier&
TaskExecution::_Internal::id(const TaskExecution* msg) {
  return *msg->id_;
}
const ::flyteidl::admin::TaskExecutionClosure&
TaskExecution::_Internal::closure(const TaskExecution* msg) {
  return *msg->closure_;
}
void TaskExecution::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
TaskExecution::TaskExecution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.TaskExecution)
}
TaskExecution::TaskExecution(const TaskExecution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  input_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    input_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_input_uri().empty()) {
    input_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_input_uri(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    id_ = new ::flyteidl::core::TaskExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_closure()) {
    closure_ = new ::flyteidl::admin::TaskExecutionClosure(*from.closure_);
  } else {
    closure_ = nullptr;
  }
  is_parent_ = from.is_parent_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskExecution)
}

inline void TaskExecution::SharedCtor() {
input_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  input_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_parent_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_parent_));
}

TaskExecution::~TaskExecution() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskExecution)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskExecution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  input_uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete closure_;
}

void TaskExecution::ArenaDtor(void* object) {
  TaskExecution* _this = reinterpret_cast< TaskExecution* >(object);
  (void)_this;
}
void TaskExecution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskExecution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskExecution::InternalSwap(TaskExecution* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata TaskExecution::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2ftask_5fexecution_2eproto[2]);
}

// ===================================================================

class TaskExecutionList::_Internal {
 public:
};

TaskExecutionList::TaskExecutionList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  task_executions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.TaskExecutionList)
}
TaskExecutionList::TaskExecutionList(const TaskExecutionList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      task_executions_(from.task_executions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskExecutionList)
}

inline void TaskExecutionList::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TaskExecutionList::~TaskExecutionList() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskExecutionList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskExecutionList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskExecutionList::ArenaDtor(void* object) {
  TaskExecutionList* _this = reinterpret_cast< TaskExecutionList* >(object);
  (void)_this;
}
void TaskExecutionList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskExecutionList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskExecutionList::InternalSwap(TaskExecutionList* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata TaskExecutionList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2ftask_5fexecution_2eproto[3]);
}

// ===================================================================

class TaskExecutionClosure::_Internal {
 public:
  static const ::flyteidl::core::ExecutionError& error(const TaskExecutionClosure* msg);
  static const ::flyteidl::core::LiteralMap& output_data(const TaskExecutionClosure* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& started_at(const TaskExecutionClosure* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& duration(const TaskExecutionClosure* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const TaskExecutionClosure* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const TaskExecutionClosure* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& custom_info(const TaskExecutionClosure* msg);
  static const ::flyteidl::event::TaskExecutionMetadata& metadata(const TaskExecutionClosure* msg);
};

const ::flyteidl::core::ExecutionError&
TaskExecutionClosure::_Internal::error(const TaskExecutionClosure* msg) {
  return *msg->output_result_.error_;
}
const ::flyteidl::core::LiteralMap&
TaskExecutionClosure::_Internal::output_data(const TaskExecutionClosure* msg) {
  return *msg->output_result_.output_data_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TaskExecutionClosure::_Internal::started_at(const TaskExecutionClosure* msg) {
  return *msg->started_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
TaskExecutionClosure::_Internal::duration(const TaskExecutionClosure* msg) {
  return *msg->duration_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TaskExecutionClosure::_Internal::created_at(const TaskExecutionClosure* msg) {
  return *msg->created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TaskExecutionClosure::_Internal::updated_at(const TaskExecutionClosure* msg) {
  return *msg->updated_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
TaskExecutionClosure::_Internal::custom_info(const TaskExecutionClosure* msg) {
  return *msg->custom_info_;
}
const ::flyteidl::event::TaskExecutionMetadata&
TaskExecutionClosure::_Internal::metadata(const TaskExecutionClosure* msg) {
  return *msg->metadata_;
}
void TaskExecutionClosure::set_allocated_error(::flyteidl::core::ExecutionError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output_result();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    output_result_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionClosure.error)
}
void TaskExecutionClosure::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete output_result_.error_;
    }
    clear_has_output_result();
  }
}
void TaskExecutionClosure::set_allocated_output_data(::flyteidl::core::LiteralMap* output_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output_result();
  if (output_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_data));
    if (message_arena != submessage_arena) {
      output_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_data, submessage_arena);
    }
    set_has_output_data();
    output_result_.output_data_ = output_data;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionClosure.output_data)
}
void TaskExecutionClosure::clear_output_data() {
  if (_internal_has_output_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete output_result_.output_data_;
    }
    clear_has_output_result();
  }
}
void TaskExecutionClosure::clear_logs() {
  logs_.Clear();
}
void TaskExecutionClosure::clear_started_at() {
  if (GetArenaForAllocation() == nullptr && started_at_ != nullptr) {
    delete started_at_;
  }
  started_at_ = nullptr;
}
void TaskExecutionClosure::clear_duration() {
  if (GetArenaForAllocation() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
}
void TaskExecutionClosure::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void TaskExecutionClosure::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
}
void TaskExecutionClosure::clear_custom_info() {
  if (GetArenaForAllocation() == nullptr && custom_info_ != nullptr) {
    delete custom_info_;
  }
  custom_info_ = nullptr;
}
void TaskExecutionClosure::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
TaskExecutionClosure::TaskExecutionClosure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  logs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.TaskExecutionClosure)
}
TaskExecutionClosure::TaskExecutionClosure(const TaskExecutionClosure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      logs_(from.logs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reason().empty()) {
    reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reason(), 
      GetArenaForAllocation());
  }
  task_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    task_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_type().empty()) {
    task_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_started_at()) {
    started_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.started_at_);
  } else {
    started_at_ = nullptr;
  }
  if (from._internal_has_duration()) {
    duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_updated_at()) {
    updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.updated_at_);
  } else {
    updated_at_ = nullptr;
  }
  if (from._internal_has_custom_info()) {
    custom_info_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.custom_info_);
  } else {
    custom_info_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::flyteidl::event::TaskExecutionMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  ::memcpy(&phase_, &from.phase_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_version_) -
    reinterpret_cast<char*>(&phase_)) + sizeof(event_version_));
  clear_has_output_result();
  switch (from.output_result_case()) {
    case kOutputUri: {
      _internal_set_output_uri(from._internal_output_uri());
      break;
    }
    case kError: {
      _internal_mutable_error()->::flyteidl::core::ExecutionError::MergeFrom(from._internal_error());
      break;
    }
    case kOutputData: {
      _internal_mutable_output_data()->::flyteidl::core::LiteralMap::MergeFrom(from._internal_output_data());
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskExecutionClosure)
}

inline void TaskExecutionClosure::SharedCtor() {
reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
task_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  task_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&started_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_version_) -
    reinterpret_cast<char*>(&started_at_)) + sizeof(event_version_));
clear_has_output_result();
}

TaskExecutionClosure::~TaskExecutionClosure() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskExecutionClosure)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskExecutionClosure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete started_at_;
  if (this != internal_default_instance()) delete duration_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete updated_at_;
  if (this != internal_default_instance()) delete custom_info_;
  if (this != internal_default_instance()) delete metadata_;
  if (has_output_result()) {
    clear_output_result();
  }
}

void TaskExecutionClosure::ArenaDtor(void* object) {
  TaskExecutionClosure* _this = reinterpret_cast< TaskExecutionClosure* >(object);
  (void)_this;
}
void TaskExecutionClosure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskExecutionClosure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskExecutionClosure::clear_output_result() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.admin.TaskExecutionClosure)
  switch (output_result_case()) {
    case kOutputUri: {
      output_result_.output_uri_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete output_result_.error_;
      }
      break;
    }
    case kOutputData: {
      if (GetArenaForAllocation() == nullptr) {
        delete output_result_.output_data_;
      }
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OUTPUT_RESULT_NOT_SET;
}


void TaskExecutionClosure::InternalSwap(TaskExecutionClosure* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata TaskExecutionClosure::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2ftask_5fexecution_2eproto[4]);
}

// ===================================================================

class TaskExecutionGetDataRequest::_Internal {
 public:
  static const ::flyteidl::core::TaskExecutionIdentifier& id(const TaskExecutionGetDataRequest* msg);
};

const ::flyteidl::core::TaskExecutionIdentifier&
TaskExecutionGetDataRequest::_Internal::id(const TaskExecutionGetDataRequest* msg) {
  return *msg->id_;
}
void TaskExecutionGetDataRequest::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
TaskExecutionGetDataRequest::TaskExecutionGetDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.TaskExecutionGetDataRequest)
}
TaskExecutionGetDataRequest::TaskExecutionGetDataRequest(const TaskExecutionGetDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::flyteidl::core::TaskExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskExecutionGetDataRequest)
}

inline void TaskExecutionGetDataRequest::SharedCtor() {
id_ = nullptr;
}

TaskExecutionGetDataRequest::~TaskExecutionGetDataRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskExecutionGetDataRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskExecutionGetDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void TaskExecutionGetDataRequest::ArenaDtor(void* object) {
  TaskExecutionGetDataRequest* _this = reinterpret_cast< TaskExecutionGetDataRequest* >(object);
  (void)_this;
}
void TaskExecutionGetDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskExecutionGetDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskExecutionGetDataRequest::InternalSwap(TaskExecutionGetDataRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata TaskExecutionGetDataRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2ftask_5fexecution_2eproto[5]);
}

// ===================================================================

class TaskExecutionGetDataResponse::_Internal {
 public:
  static const ::flyteidl::admin::UrlBlob& inputs(const TaskExecutionGetDataResponse* msg);
  static const ::flyteidl::admin::UrlBlob& outputs(const TaskExecutionGetDataResponse* msg);
  static const ::flyteidl::core::LiteralMap& full_inputs(const TaskExecutionGetDataResponse* msg);
  static const ::flyteidl::core::LiteralMap& full_outputs(const TaskExecutionGetDataResponse* msg);
};

const ::flyteidl::admin::UrlBlob&
TaskExecutionGetDataResponse::_Internal::inputs(const TaskExecutionGetDataResponse* msg) {
  return *msg->inputs_;
}
const ::flyteidl::admin::UrlBlob&
TaskExecutionGetDataResponse::_Internal::outputs(const TaskExecutionGetDataResponse* msg) {
  return *msg->outputs_;
}
const ::flyteidl::core::LiteralMap&
TaskExecutionGetDataResponse::_Internal::full_inputs(const TaskExecutionGetDataResponse* msg) {
  return *msg->full_inputs_;
}
const ::flyteidl::core::LiteralMap&
TaskExecutionGetDataResponse::_Internal::full_outputs(const TaskExecutionGetDataResponse* msg) {
  return *msg->full_outputs_;
}
void TaskExecutionGetDataResponse::clear_inputs() {
  if (GetArenaForAllocation() == nullptr && inputs_ != nullptr) {
    delete inputs_;
  }
  inputs_ = nullptr;
}
void TaskExecutionGetDataResponse::clear_outputs() {
  if (GetArenaForAllocation() == nullptr && outputs_ != nullptr) {
    delete outputs_;
  }
  outputs_ = nullptr;
}
void TaskExecutionGetDataResponse::clear_full_inputs() {
  if (GetArenaForAllocation() == nullptr && full_inputs_ != nullptr) {
    delete full_inputs_;
  }
  full_inputs_ = nullptr;
}
void TaskExecutionGetDataResponse::clear_full_outputs() {
  if (GetArenaForAllocation() == nullptr && full_outputs_ != nullptr) {
    delete full_outputs_;
  }
  full_outputs_ = nullptr;
}
TaskExecutionGetDataResponse::TaskExecutionGetDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.TaskExecutionGetDataResponse)
}
TaskExecutionGetDataResponse::TaskExecutionGetDataResponse(const TaskExecutionGetDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_inputs()) {
    inputs_ = new ::flyteidl::admin::UrlBlob(*from.inputs_);
  } else {
    inputs_ = nullptr;
  }
  if (from._internal_has_outputs()) {
    outputs_ = new ::flyteidl::admin::UrlBlob(*from.outputs_);
  } else {
    outputs_ = nullptr;
  }
  if (from._internal_has_full_inputs()) {
    full_inputs_ = new ::flyteidl::core::LiteralMap(*from.full_inputs_);
  } else {
    full_inputs_ = nullptr;
  }
  if (from._internal_has_full_outputs()) {
    full_outputs_ = new ::flyteidl::core::LiteralMap(*from.full_outputs_);
  } else {
    full_outputs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskExecutionGetDataResponse)
}

inline void TaskExecutionGetDataResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&inputs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&full_outputs_) -
    reinterpret_cast<char*>(&inputs_)) + sizeof(full_outputs_));
}

TaskExecutionGetDataResponse::~TaskExecutionGetDataResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskExecutionGetDataResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskExecutionGetDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete inputs_;
  if (this != internal_default_instance()) delete outputs_;
  if (this != internal_default_instance()) delete full_inputs_;
  if (this != internal_default_instance()) delete full_outputs_;
}

void TaskExecutionGetDataResponse::ArenaDtor(void* object) {
  TaskExecutionGetDataResponse* _this = reinterpret_cast< TaskExecutionGetDataResponse* >(object);
  (void)_this;
}
void TaskExecutionGetDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskExecutionGetDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskExecutionGetDataResponse::InternalSwap(TaskExecutionGetDataResponse* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata TaskExecutionGetDataResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2ftask_5fexecution_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskExecutionGetRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskExecutionGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::TaskExecutionGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskExecutionListRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskExecutionListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::TaskExecutionListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskExecution* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskExecution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::TaskExecution >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskExecutionList* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskExecutionList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::TaskExecutionList >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskExecutionClosure* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskExecutionClosure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::TaskExecutionClosure >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskExecutionGetDataRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskExecutionGetDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::TaskExecutionGetDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskExecutionGetDataResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskExecutionGetDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::TaskExecutionGetDataResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
