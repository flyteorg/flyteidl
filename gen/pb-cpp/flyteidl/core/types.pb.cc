// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/types.proto

#include "flyteidl/core/types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace core {
constexpr SchemaType_SchemaColumn::SchemaType_SchemaColumn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct SchemaType_SchemaColumnDefaultTypeInternal {
  constexpr SchemaType_SchemaColumnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaType_SchemaColumnDefaultTypeInternal() {}
  union {
    SchemaType_SchemaColumn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaType_SchemaColumnDefaultTypeInternal _SchemaType_SchemaColumn_default_instance_;
constexpr SchemaType::SchemaType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : columns_(){}
struct SchemaTypeDefaultTypeInternal {
  constexpr SchemaTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaTypeDefaultTypeInternal() {}
  union {
    SchemaType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaTypeDefaultTypeInternal _SchemaType_default_instance_;
constexpr StructuredDatasetType_DatasetColumn::StructuredDatasetType_DatasetColumn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , literal_type_(nullptr){}
struct StructuredDatasetType_DatasetColumnDefaultTypeInternal {
  constexpr StructuredDatasetType_DatasetColumnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StructuredDatasetType_DatasetColumnDefaultTypeInternal() {}
  union {
    StructuredDatasetType_DatasetColumn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StructuredDatasetType_DatasetColumnDefaultTypeInternal _StructuredDatasetType_DatasetColumn_default_instance_;
constexpr StructuredDatasetType::StructuredDatasetType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : columns_()
  , format_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , external_schema_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , external_schema_bytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct StructuredDatasetTypeDefaultTypeInternal {
  constexpr StructuredDatasetTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StructuredDatasetTypeDefaultTypeInternal() {}
  union {
    StructuredDatasetType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StructuredDatasetTypeDefaultTypeInternal _StructuredDatasetType_default_instance_;
constexpr BlobType::BlobType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : format_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dimensionality_(0)
{}
struct BlobTypeDefaultTypeInternal {
  constexpr BlobTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlobTypeDefaultTypeInternal() {}
  union {
    BlobType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlobTypeDefaultTypeInternal _BlobType_default_instance_;
constexpr EnumType::EnumType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_(){}
struct EnumTypeDefaultTypeInternal {
  constexpr EnumTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnumTypeDefaultTypeInternal() {}
  union {
    EnumType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnumTypeDefaultTypeInternal _EnumType_default_instance_;
constexpr UnionType::UnionType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : variants_(){}
struct UnionTypeDefaultTypeInternal {
  constexpr UnionTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnionTypeDefaultTypeInternal() {}
  union {
    UnionType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnionTypeDefaultTypeInternal _UnionType_default_instance_;
constexpr TypeStructure::TypeStructure(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TypeStructureDefaultTypeInternal {
  constexpr TypeStructureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TypeStructureDefaultTypeInternal() {}
  union {
    TypeStructure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TypeStructureDefaultTypeInternal _TypeStructure_default_instance_;
constexpr TypeAnnotation::TypeAnnotation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : annotations_(nullptr){}
struct TypeAnnotationDefaultTypeInternal {
  constexpr TypeAnnotationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TypeAnnotationDefaultTypeInternal() {}
  union {
    TypeAnnotation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TypeAnnotationDefaultTypeInternal _TypeAnnotation_default_instance_;
constexpr LiteralType::LiteralType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr)
  , annotation_(nullptr)
  , structure_(nullptr)
  , _oneof_case_{}{}
struct LiteralTypeDefaultTypeInternal {
  constexpr LiteralTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LiteralTypeDefaultTypeInternal() {}
  union {
    LiteralType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LiteralTypeDefaultTypeInternal _LiteralType_default_instance_;
constexpr OutputReference::OutputReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , var_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct OutputReferenceDefaultTypeInternal {
  constexpr OutputReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OutputReferenceDefaultTypeInternal() {}
  union {
    OutputReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OutputReferenceDefaultTypeInternal _OutputReference_default_instance_;
constexpr Error::Error(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : failed_node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ErrorDefaultTypeInternal {
  constexpr ErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ErrorDefaultTypeInternal() {}
  union {
    Error _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ErrorDefaultTypeInternal _Error_default_instance_;
}  // namespace core
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fcore_2ftypes_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fcore_2ftypes_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fcore_2ftypes_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fcore_2ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::SchemaType_SchemaColumn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::SchemaType_SchemaColumn, name_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::SchemaType_SchemaColumn, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::SchemaType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::SchemaType, columns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::StructuredDatasetType_DatasetColumn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::StructuredDatasetType_DatasetColumn, name_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::StructuredDatasetType_DatasetColumn, literal_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::StructuredDatasetType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::StructuredDatasetType, columns_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::StructuredDatasetType, format_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::StructuredDatasetType, external_schema_type_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::StructuredDatasetType, external_schema_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::BlobType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::BlobType, format_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::BlobType, dimensionality_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::EnumType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::EnumType, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::UnionType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::UnionType, variants_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TypeStructure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TypeStructure, tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TypeAnnotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TypeAnnotation, annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::LiteralType, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::LiteralType, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::LiteralType, metadata_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::LiteralType, annotation_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::LiteralType, structure_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::LiteralType, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::OutputReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::OutputReference, node_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::OutputReference, var_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Error, failed_node_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Error, message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::core::SchemaType_SchemaColumn)},
  { 8, -1, -1, sizeof(::flyteidl::core::SchemaType)},
  { 15, -1, -1, sizeof(::flyteidl::core::StructuredDatasetType_DatasetColumn)},
  { 23, -1, -1, sizeof(::flyteidl::core::StructuredDatasetType)},
  { 33, -1, -1, sizeof(::flyteidl::core::BlobType)},
  { 41, -1, -1, sizeof(::flyteidl::core::EnumType)},
  { 48, -1, -1, sizeof(::flyteidl::core::UnionType)},
  { 55, -1, -1, sizeof(::flyteidl::core::TypeStructure)},
  { 62, -1, -1, sizeof(::flyteidl::core::TypeAnnotation)},
  { 69, -1, -1, sizeof(::flyteidl::core::LiteralType)},
  { 87, -1, -1, sizeof(::flyteidl::core::OutputReference)},
  { 95, -1, -1, sizeof(::flyteidl::core::Error)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_SchemaType_SchemaColumn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_SchemaType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_StructuredDatasetType_DatasetColumn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_StructuredDatasetType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_BlobType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_EnumType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_UnionType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_TypeStructure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_TypeAnnotation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_LiteralType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_OutputReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_Error_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fcore_2ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031flyteidl/core/types.proto\022\rflyteidl.co"
  "re\032\034google/protobuf/struct.proto\"\241\002\n\nSch"
  "emaType\022@\n\007columns\030\003 \003(\0132&.flyteidl.core"
  ".SchemaType.SchemaColumnR\007columns\032\320\001\n\014Sc"
  "hemaColumn\022\022\n\004name\030\001 \001(\tR\004name\022K\n\004type\030\002"
  " \001(\01627.flyteidl.core.SchemaType.SchemaCo"
  "lumn.SchemaColumnTypeR\004type\"_\n\020SchemaCol"
  "umnType\022\013\n\007INTEGER\020\000\022\t\n\005FLOAT\020\001\022\n\n\006STRIN"
  "G\020\002\022\013\n\007BOOLEAN\020\003\022\014\n\010DATETIME\020\004\022\014\n\010DURATI"
  "ON\020\005\"\307\002\n\025StructuredDatasetType\022L\n\007column"
  "s\030\001 \003(\01322.flyteidl.core.StructuredDatase"
  "tType.DatasetColumnR\007columns\022\026\n\006format\030\002"
  " \001(\tR\006format\0220\n\024external_schema_type\030\003 \001"
  "(\tR\022externalSchemaType\0222\n\025external_schem"
  "a_bytes\030\004 \001(\014R\023externalSchemaBytes\032b\n\rDa"
  "tasetColumn\022\022\n\004name\030\001 \001(\tR\004name\022=\n\014liter"
  "al_type\030\002 \001(\0132\032.flyteidl.core.LiteralTyp"
  "eR\013literalType\"\247\001\n\010BlobType\022\026\n\006format\030\001 "
  "\001(\tR\006format\022R\n\016dimensionality\030\002 \001(\0162*.fl"
  "yteidl.core.BlobType.BlobDimensionalityR"
  "\016dimensionality\"/\n\022BlobDimensionality\022\n\n"
  "\006SINGLE\020\000\022\r\n\tMULTIPART\020\001\"\"\n\010EnumType\022\026\n\006"
  "values\030\001 \003(\tR\006values\"C\n\tUnionType\0226\n\010var"
  "iants\030\001 \003(\0132\032.flyteidl.core.LiteralTypeR"
  "\010variants\"!\n\rTypeStructure\022\020\n\003tag\030\001 \001(\tR"
  "\003tag\"K\n\016TypeAnnotation\0229\n\013annotations\030\001 "
  "\001(\0132\027.google.protobuf.StructR\013annotation"
  "s\"\274\005\n\013LiteralType\0223\n\006simple\030\001 \001(\0162\031.flyt"
  "eidl.core.SimpleTypeH\000R\006simple\0223\n\006schema"
  "\030\002 \001(\0132\031.flyteidl.core.SchemaTypeH\000R\006sch"
  "ema\022E\n\017collection_type\030\003 \001(\0132\032.flyteidl."
  "core.LiteralTypeH\000R\016collectionType\022B\n\016ma"
  "p_value_type\030\004 \001(\0132\032.flyteidl.core.Liter"
  "alTypeH\000R\014mapValueType\022-\n\004blob\030\005 \001(\0132\027.f"
  "lyteidl.core.BlobTypeH\000R\004blob\0226\n\tenum_ty"
  "pe\030\007 \001(\0132\027.flyteidl.core.EnumTypeH\000R\010enu"
  "mType\022^\n\027structured_dataset_type\030\010 \001(\0132$"
  ".flyteidl.core.StructuredDatasetTypeH\000R\025"
  "structuredDatasetType\0229\n\nunion_type\030\n \001("
  "\0132\030.flyteidl.core.UnionTypeH\000R\tunionType"
  "\0223\n\010metadata\030\006 \001(\0132\027.google.protobuf.Str"
  "uctR\010metadata\022=\n\nannotation\030\t \001(\0132\035.flyt"
  "eidl.core.TypeAnnotationR\nannotation\022:\n\t"
  "structure\030\013 \001(\0132\034.flyteidl.core.TypeStru"
  "ctureR\tstructureB\006\n\004type\"<\n\017OutputRefere"
  "nce\022\027\n\007node_id\030\001 \001(\tR\006nodeId\022\020\n\003var\030\002 \001("
  "\tR\003var\"G\n\005Error\022$\n\016failed_node_id\030\001 \001(\tR"
  "\014failedNodeId\022\030\n\007message\030\002 \001(\tR\007message*"
  "\206\001\n\nSimpleType\022\010\n\004NONE\020\000\022\013\n\007INTEGER\020\001\022\t\n"
  "\005FLOAT\020\002\022\n\n\006STRING\020\003\022\013\n\007BOOLEAN\020\004\022\014\n\010DAT"
  "ETIME\020\005\022\014\n\010DURATION\020\006\022\n\n\006BINARY\020\007\022\t\n\005ERR"
  "OR\020\010\022\n\n\006STRUCT\020\tB\255\001\n\021com.flyteidl.coreB\n"
  "TypesProtoH\002Z4github.com/flyteorg/flytei"
  "dl/gen/pb-go/flyteidl/core\370\001\000\242\002\003FCX\252\002\rFl"
  "yteidl.Core\312\002\rFlyteidl\\Core\342\002\031Flyteidl\\C"
  "ore\\GPBMetadata\352\002\016Flyteidl::Coreb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flyteidl_2fcore_2ftypes_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fcore_2ftypes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fcore_2ftypes_2eproto = {
  false, false, 2240, descriptor_table_protodef_flyteidl_2fcore_2ftypes_2eproto, "flyteidl/core/types.proto", 
  &descriptor_table_flyteidl_2fcore_2ftypes_2eproto_once, descriptor_table_flyteidl_2fcore_2ftypes_2eproto_deps, 1, 12,
  schemas, file_default_instances, TableStruct_flyteidl_2fcore_2ftypes_2eproto::offsets,
  file_level_metadata_flyteidl_2fcore_2ftypes_2eproto, file_level_enum_descriptors_flyteidl_2fcore_2ftypes_2eproto, file_level_service_descriptors_flyteidl_2fcore_2ftypes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fcore_2ftypes_2eproto_getter() {
  return &descriptor_table_flyteidl_2fcore_2ftypes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fcore_2ftypes_2eproto(&descriptor_table_flyteidl_2fcore_2ftypes_2eproto);
namespace flyteidl {
namespace core {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SchemaType_SchemaColumn_SchemaColumnType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fcore_2ftypes_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2ftypes_2eproto[0];
}
bool SchemaType_SchemaColumn_SchemaColumnType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SchemaType_SchemaColumn_SchemaColumnType SchemaType_SchemaColumn::INTEGER;
constexpr SchemaType_SchemaColumn_SchemaColumnType SchemaType_SchemaColumn::FLOAT;
constexpr SchemaType_SchemaColumn_SchemaColumnType SchemaType_SchemaColumn::STRING;
constexpr SchemaType_SchemaColumn_SchemaColumnType SchemaType_SchemaColumn::BOOLEAN;
constexpr SchemaType_SchemaColumn_SchemaColumnType SchemaType_SchemaColumn::DATETIME;
constexpr SchemaType_SchemaColumn_SchemaColumnType SchemaType_SchemaColumn::DURATION;
constexpr SchemaType_SchemaColumn_SchemaColumnType SchemaType_SchemaColumn::SchemaColumnType_MIN;
constexpr SchemaType_SchemaColumn_SchemaColumnType SchemaType_SchemaColumn::SchemaColumnType_MAX;
constexpr int SchemaType_SchemaColumn::SchemaColumnType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlobType_BlobDimensionality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fcore_2ftypes_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2ftypes_2eproto[1];
}
bool BlobType_BlobDimensionality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BlobType_BlobDimensionality BlobType::SINGLE;
constexpr BlobType_BlobDimensionality BlobType::MULTIPART;
constexpr BlobType_BlobDimensionality BlobType::BlobDimensionality_MIN;
constexpr BlobType_BlobDimensionality BlobType::BlobDimensionality_MAX;
constexpr int BlobType::BlobDimensionality_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SimpleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fcore_2ftypes_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2ftypes_2eproto[2];
}
bool SimpleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SchemaType_SchemaColumn::_Internal {
 public:
};

SchemaType_SchemaColumn::SchemaType_SchemaColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.SchemaType.SchemaColumn)
}
SchemaType_SchemaColumn::SchemaType_SchemaColumn(const SchemaType_SchemaColumn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.SchemaType.SchemaColumn)
}

inline void SchemaType_SchemaColumn::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

SchemaType_SchemaColumn::~SchemaType_SchemaColumn() {
  // @@protoc_insertion_point(destructor:flyteidl.core.SchemaType.SchemaColumn)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SchemaType_SchemaColumn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SchemaType_SchemaColumn::ArenaDtor(void* object) {
  SchemaType_SchemaColumn* _this = reinterpret_cast< SchemaType_SchemaColumn* >(object);
  (void)_this;
}
void SchemaType_SchemaColumn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaType_SchemaColumn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaType_SchemaColumn::InternalSwap(SchemaType_SchemaColumn* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaType_SchemaColumn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ftypes_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ftypes_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ftypes_2eproto[0]);
}

// ===================================================================

class SchemaType::_Internal {
 public:
};

SchemaType::SchemaType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  columns_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.SchemaType)
}
SchemaType::SchemaType(const SchemaType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      columns_(from.columns_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.SchemaType)
}

inline void SchemaType::SharedCtor() {
}

SchemaType::~SchemaType() {
  // @@protoc_insertion_point(destructor:flyteidl.core.SchemaType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SchemaType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SchemaType::ArenaDtor(void* object) {
  SchemaType* _this = reinterpret_cast< SchemaType* >(object);
  (void)_this;
}
void SchemaType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaType::InternalSwap(SchemaType* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ftypes_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ftypes_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ftypes_2eproto[1]);
}

// ===================================================================

class StructuredDatasetType_DatasetColumn::_Internal {
 public:
  static const ::flyteidl::core::LiteralType& literal_type(const StructuredDatasetType_DatasetColumn* msg);
};

const ::flyteidl::core::LiteralType&
StructuredDatasetType_DatasetColumn::_Internal::literal_type(const StructuredDatasetType_DatasetColumn* msg) {
  return *msg->literal_type_;
}
StructuredDatasetType_DatasetColumn::StructuredDatasetType_DatasetColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.StructuredDatasetType.DatasetColumn)
}
StructuredDatasetType_DatasetColumn::StructuredDatasetType_DatasetColumn(const StructuredDatasetType_DatasetColumn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_literal_type()) {
    literal_type_ = new ::flyteidl::core::LiteralType(*from.literal_type_);
  } else {
    literal_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.StructuredDatasetType.DatasetColumn)
}

inline void StructuredDatasetType_DatasetColumn::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
literal_type_ = nullptr;
}

StructuredDatasetType_DatasetColumn::~StructuredDatasetType_DatasetColumn() {
  // @@protoc_insertion_point(destructor:flyteidl.core.StructuredDatasetType.DatasetColumn)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StructuredDatasetType_DatasetColumn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete literal_type_;
}

void StructuredDatasetType_DatasetColumn::ArenaDtor(void* object) {
  StructuredDatasetType_DatasetColumn* _this = reinterpret_cast< StructuredDatasetType_DatasetColumn* >(object);
  (void)_this;
}
void StructuredDatasetType_DatasetColumn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StructuredDatasetType_DatasetColumn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StructuredDatasetType_DatasetColumn::InternalSwap(StructuredDatasetType_DatasetColumn* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata StructuredDatasetType_DatasetColumn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ftypes_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ftypes_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ftypes_2eproto[2]);
}

// ===================================================================

class StructuredDatasetType::_Internal {
 public:
};

StructuredDatasetType::StructuredDatasetType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  columns_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.StructuredDatasetType)
}
StructuredDatasetType::StructuredDatasetType(const StructuredDatasetType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      columns_(from.columns_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_format().empty()) {
    format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_format(), 
      GetArenaForAllocation());
  }
  external_schema_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    external_schema_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_external_schema_type().empty()) {
    external_schema_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_external_schema_type(), 
      GetArenaForAllocation());
  }
  external_schema_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    external_schema_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_external_schema_bytes().empty()) {
    external_schema_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_external_schema_bytes(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.StructuredDatasetType)
}

inline void StructuredDatasetType::SharedCtor() {
format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
external_schema_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  external_schema_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
external_schema_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  external_schema_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StructuredDatasetType::~StructuredDatasetType() {
  // @@protoc_insertion_point(destructor:flyteidl.core.StructuredDatasetType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StructuredDatasetType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  external_schema_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  external_schema_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StructuredDatasetType::ArenaDtor(void* object) {
  StructuredDatasetType* _this = reinterpret_cast< StructuredDatasetType* >(object);
  (void)_this;
}
void StructuredDatasetType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StructuredDatasetType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StructuredDatasetType::InternalSwap(StructuredDatasetType* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata StructuredDatasetType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ftypes_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ftypes_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ftypes_2eproto[3]);
}

// ===================================================================

class BlobType::_Internal {
 public:
};

BlobType::BlobType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.BlobType)
}
BlobType::BlobType(const BlobType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_format().empty()) {
    format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_format(), 
      GetArenaForAllocation());
  }
  dimensionality_ = from.dimensionality_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.BlobType)
}

inline void BlobType::SharedCtor() {
format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dimensionality_ = 0;
}

BlobType::~BlobType() {
  // @@protoc_insertion_point(destructor:flyteidl.core.BlobType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlobType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlobType::ArenaDtor(void* object) {
  BlobType* _this = reinterpret_cast< BlobType* >(object);
  (void)_this;
}
void BlobType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlobType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlobType::InternalSwap(BlobType* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata BlobType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ftypes_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ftypes_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ftypes_2eproto[4]);
}

// ===================================================================

class EnumType::_Internal {
 public:
};

EnumType::EnumType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.EnumType)
}
EnumType::EnumType(const EnumType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.EnumType)
}

inline void EnumType::SharedCtor() {
}

EnumType::~EnumType() {
  // @@protoc_insertion_point(destructor:flyteidl.core.EnumType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EnumType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnumType::ArenaDtor(void* object) {
  EnumType* _this = reinterpret_cast< EnumType* >(object);
  (void)_this;
}
void EnumType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnumType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnumType::InternalSwap(EnumType* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata EnumType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ftypes_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ftypes_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ftypes_2eproto[5]);
}

// ===================================================================

class UnionType::_Internal {
 public:
};

UnionType::UnionType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  variants_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.UnionType)
}
UnionType::UnionType(const UnionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      variants_(from.variants_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.UnionType)
}

inline void UnionType::SharedCtor() {
}

UnionType::~UnionType() {
  // @@protoc_insertion_point(destructor:flyteidl.core.UnionType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UnionType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnionType::ArenaDtor(void* object) {
  UnionType* _this = reinterpret_cast< UnionType* >(object);
  (void)_this;
}
void UnionType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnionType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnionType::InternalSwap(UnionType* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata UnionType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ftypes_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ftypes_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ftypes_2eproto[6]);
}

// ===================================================================

class TypeStructure::_Internal {
 public:
};

TypeStructure::TypeStructure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.TypeStructure)
}
TypeStructure::TypeStructure(const TypeStructure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag().empty()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.TypeStructure)
}

inline void TypeStructure::SharedCtor() {
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TypeStructure::~TypeStructure() {
  // @@protoc_insertion_point(destructor:flyteidl.core.TypeStructure)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TypeStructure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TypeStructure::ArenaDtor(void* object) {
  TypeStructure* _this = reinterpret_cast< TypeStructure* >(object);
  (void)_this;
}
void TypeStructure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TypeStructure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TypeStructure::InternalSwap(TypeStructure* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata TypeStructure::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ftypes_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ftypes_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ftypes_2eproto[7]);
}

// ===================================================================

class TypeAnnotation::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& annotations(const TypeAnnotation* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
TypeAnnotation::_Internal::annotations(const TypeAnnotation* msg) {
  return *msg->annotations_;
}
void TypeAnnotation::clear_annotations() {
  if (GetArenaForAllocation() == nullptr && annotations_ != nullptr) {
    delete annotations_;
  }
  annotations_ = nullptr;
}
TypeAnnotation::TypeAnnotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.TypeAnnotation)
}
TypeAnnotation::TypeAnnotation(const TypeAnnotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_annotations()) {
    annotations_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.annotations_);
  } else {
    annotations_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.TypeAnnotation)
}

inline void TypeAnnotation::SharedCtor() {
annotations_ = nullptr;
}

TypeAnnotation::~TypeAnnotation() {
  // @@protoc_insertion_point(destructor:flyteidl.core.TypeAnnotation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TypeAnnotation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete annotations_;
}

void TypeAnnotation::ArenaDtor(void* object) {
  TypeAnnotation* _this = reinterpret_cast< TypeAnnotation* >(object);
  (void)_this;
}
void TypeAnnotation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TypeAnnotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TypeAnnotation::InternalSwap(TypeAnnotation* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata TypeAnnotation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ftypes_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ftypes_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ftypes_2eproto[8]);
}

// ===================================================================

class LiteralType::_Internal {
 public:
  static const ::flyteidl::core::SchemaType& schema(const LiteralType* msg);
  static const ::flyteidl::core::LiteralType& collection_type(const LiteralType* msg);
  static const ::flyteidl::core::LiteralType& map_value_type(const LiteralType* msg);
  static const ::flyteidl::core::BlobType& blob(const LiteralType* msg);
  static const ::flyteidl::core::EnumType& enum_type(const LiteralType* msg);
  static const ::flyteidl::core::StructuredDatasetType& structured_dataset_type(const LiteralType* msg);
  static const ::flyteidl::core::UnionType& union_type(const LiteralType* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& metadata(const LiteralType* msg);
  static const ::flyteidl::core::TypeAnnotation& annotation(const LiteralType* msg);
  static const ::flyteidl::core::TypeStructure& structure(const LiteralType* msg);
};

const ::flyteidl::core::SchemaType&
LiteralType::_Internal::schema(const LiteralType* msg) {
  return *msg->type_.schema_;
}
const ::flyteidl::core::LiteralType&
LiteralType::_Internal::collection_type(const LiteralType* msg) {
  return *msg->type_.collection_type_;
}
const ::flyteidl::core::LiteralType&
LiteralType::_Internal::map_value_type(const LiteralType* msg) {
  return *msg->type_.map_value_type_;
}
const ::flyteidl::core::BlobType&
LiteralType::_Internal::blob(const LiteralType* msg) {
  return *msg->type_.blob_;
}
const ::flyteidl::core::EnumType&
LiteralType::_Internal::enum_type(const LiteralType* msg) {
  return *msg->type_.enum_type_;
}
const ::flyteidl::core::StructuredDatasetType&
LiteralType::_Internal::structured_dataset_type(const LiteralType* msg) {
  return *msg->type_.structured_dataset_type_;
}
const ::flyteidl::core::UnionType&
LiteralType::_Internal::union_type(const LiteralType* msg) {
  return *msg->type_.union_type_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
LiteralType::_Internal::metadata(const LiteralType* msg) {
  return *msg->metadata_;
}
const ::flyteidl::core::TypeAnnotation&
LiteralType::_Internal::annotation(const LiteralType* msg) {
  return *msg->annotation_;
}
const ::flyteidl::core::TypeStructure&
LiteralType::_Internal::structure(const LiteralType* msg) {
  return *msg->structure_;
}
void LiteralType::set_allocated_schema(::flyteidl::core::SchemaType* schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::SchemaType>::GetOwningArena(schema);
    if (message_arena != submessage_arena) {
      schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema, submessage_arena);
    }
    set_has_schema();
    type_.schema_ = schema;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.LiteralType.schema)
}
void LiteralType::set_allocated_collection_type(::flyteidl::core::LiteralType* collection_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (collection_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::LiteralType>::GetOwningArena(collection_type);
    if (message_arena != submessage_arena) {
      collection_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collection_type, submessage_arena);
    }
    set_has_collection_type();
    type_.collection_type_ = collection_type;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.LiteralType.collection_type)
}
void LiteralType::set_allocated_map_value_type(::flyteidl::core::LiteralType* map_value_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (map_value_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::LiteralType>::GetOwningArena(map_value_type);
    if (message_arena != submessage_arena) {
      map_value_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_value_type, submessage_arena);
    }
    set_has_map_value_type();
    type_.map_value_type_ = map_value_type;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.LiteralType.map_value_type)
}
void LiteralType::set_allocated_blob(::flyteidl::core::BlobType* blob) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (blob) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::BlobType>::GetOwningArena(blob);
    if (message_arena != submessage_arena) {
      blob = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blob, submessage_arena);
    }
    set_has_blob();
    type_.blob_ = blob;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.LiteralType.blob)
}
void LiteralType::set_allocated_enum_type(::flyteidl::core::EnumType* enum_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (enum_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::EnumType>::GetOwningArena(enum_type);
    if (message_arena != submessage_arena) {
      enum_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enum_type, submessage_arena);
    }
    set_has_enum_type();
    type_.enum_type_ = enum_type;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.LiteralType.enum_type)
}
void LiteralType::set_allocated_structured_dataset_type(::flyteidl::core::StructuredDatasetType* structured_dataset_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (structured_dataset_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::StructuredDatasetType>::GetOwningArena(structured_dataset_type);
    if (message_arena != submessage_arena) {
      structured_dataset_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, structured_dataset_type, submessage_arena);
    }
    set_has_structured_dataset_type();
    type_.structured_dataset_type_ = structured_dataset_type;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.LiteralType.structured_dataset_type)
}
void LiteralType::set_allocated_union_type(::flyteidl::core::UnionType* union_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (union_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::UnionType>::GetOwningArena(union_type);
    if (message_arena != submessage_arena) {
      union_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, union_type, submessage_arena);
    }
    set_has_union_type();
    type_.union_type_ = union_type;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.LiteralType.union_type)
}
void LiteralType::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
LiteralType::LiteralType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.LiteralType)
}
LiteralType::LiteralType(const LiteralType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_annotation()) {
    annotation_ = new ::flyteidl::core::TypeAnnotation(*from.annotation_);
  } else {
    annotation_ = nullptr;
  }
  if (from._internal_has_structure()) {
    structure_ = new ::flyteidl::core::TypeStructure(*from.structure_);
  } else {
    structure_ = nullptr;
  }
  clear_has_type();
  switch (from.type_case()) {
    case kSimple: {
      _internal_set_simple(from._internal_simple());
      break;
    }
    case kSchema: {
      _internal_mutable_schema()->::flyteidl::core::SchemaType::MergeFrom(from._internal_schema());
      break;
    }
    case kCollectionType: {
      _internal_mutable_collection_type()->::flyteidl::core::LiteralType::MergeFrom(from._internal_collection_type());
      break;
    }
    case kMapValueType: {
      _internal_mutable_map_value_type()->::flyteidl::core::LiteralType::MergeFrom(from._internal_map_value_type());
      break;
    }
    case kBlob: {
      _internal_mutable_blob()->::flyteidl::core::BlobType::MergeFrom(from._internal_blob());
      break;
    }
    case kEnumType: {
      _internal_mutable_enum_type()->::flyteidl::core::EnumType::MergeFrom(from._internal_enum_type());
      break;
    }
    case kStructuredDatasetType: {
      _internal_mutable_structured_dataset_type()->::flyteidl::core::StructuredDatasetType::MergeFrom(from._internal_structured_dataset_type());
      break;
    }
    case kUnionType: {
      _internal_mutable_union_type()->::flyteidl::core::UnionType::MergeFrom(from._internal_union_type());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.LiteralType)
}

inline void LiteralType::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&structure_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(structure_));
clear_has_type();
}

LiteralType::~LiteralType() {
  // @@protoc_insertion_point(destructor:flyteidl.core.LiteralType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LiteralType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete annotation_;
  if (this != internal_default_instance()) delete structure_;
  if (has_type()) {
    clear_type();
  }
}

void LiteralType::ArenaDtor(void* object) {
  LiteralType* _this = reinterpret_cast< LiteralType* >(object);
  (void)_this;
}
void LiteralType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiteralType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LiteralType::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.LiteralType)
  switch (type_case()) {
    case kSimple: {
      // No need to clear
      break;
    }
    case kSchema: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.schema_;
      }
      break;
    }
    case kCollectionType: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.collection_type_;
      }
      break;
    }
    case kMapValueType: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.map_value_type_;
      }
      break;
    }
    case kBlob: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.blob_;
      }
      break;
    }
    case kEnumType: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.enum_type_;
      }
      break;
    }
    case kStructuredDatasetType: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.structured_dataset_type_;
      }
      break;
    }
    case kUnionType: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.union_type_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void LiteralType::InternalSwap(LiteralType* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata LiteralType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ftypes_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ftypes_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ftypes_2eproto[9]);
}

// ===================================================================

class OutputReference::_Internal {
 public:
};

OutputReference::OutputReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.OutputReference)
}
OutputReference::OutputReference(const OutputReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_id().empty()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(), 
      GetArenaForAllocation());
  }
  var_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    var_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var().empty()) {
    var_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_var(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.OutputReference)
}

inline void OutputReference::SharedCtor() {
node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
var_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  var_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OutputReference::~OutputReference() {
  // @@protoc_insertion_point(destructor:flyteidl.core.OutputReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OutputReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OutputReference::ArenaDtor(void* object) {
  OutputReference* _this = reinterpret_cast< OutputReference* >(object);
  (void)_this;
}
void OutputReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutputReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OutputReference::InternalSwap(OutputReference* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata OutputReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ftypes_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ftypes_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ftypes_2eproto[10]);
}

// ===================================================================

class Error::_Internal {
 public:
};

Error::Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.Error)
}
Error::Error(const Error& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  failed_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    failed_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_failed_node_id().empty()) {
    failed_node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_failed_node_id(), 
      GetArenaForAllocation());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Error)
}

inline void Error::SharedCtor() {
failed_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  failed_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Error)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Error::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  failed_node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Error::ArenaDtor(void* object) {
  Error* _this = reinterpret_cast< Error* >(object);
  (void)_this;
}
void Error::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Error::InternalSwap(Error* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Error::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ftypes_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ftypes_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ftypes_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::core::SchemaType_SchemaColumn* Arena::CreateMaybeMessage< ::flyteidl::core::SchemaType_SchemaColumn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::SchemaType_SchemaColumn >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::SchemaType* Arena::CreateMaybeMessage< ::flyteidl::core::SchemaType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::SchemaType >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::StructuredDatasetType_DatasetColumn* Arena::CreateMaybeMessage< ::flyteidl::core::StructuredDatasetType_DatasetColumn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::StructuredDatasetType_DatasetColumn >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::StructuredDatasetType* Arena::CreateMaybeMessage< ::flyteidl::core::StructuredDatasetType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::StructuredDatasetType >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::BlobType* Arena::CreateMaybeMessage< ::flyteidl::core::BlobType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::BlobType >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::EnumType* Arena::CreateMaybeMessage< ::flyteidl::core::EnumType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::EnumType >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::UnionType* Arena::CreateMaybeMessage< ::flyteidl::core::UnionType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::UnionType >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::TypeStructure* Arena::CreateMaybeMessage< ::flyteidl::core::TypeStructure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::TypeStructure >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::TypeAnnotation* Arena::CreateMaybeMessage< ::flyteidl::core::TypeAnnotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::TypeAnnotation >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::LiteralType* Arena::CreateMaybeMessage< ::flyteidl::core::LiteralType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::LiteralType >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::OutputReference* Arena::CreateMaybeMessage< ::flyteidl::core::OutputReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::OutputReference >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::Error* Arena::CreateMaybeMessage< ::flyteidl::core::Error >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::Error >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
