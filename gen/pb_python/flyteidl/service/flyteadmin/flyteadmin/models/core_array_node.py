# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyteadmin.models.core_node import CoreNode  # noqa: F401,E501


class CoreArrayNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'node': 'CoreNode',
        'parallelism': 'int',
        'min_successes': 'int',
        'min_success_ratio': 'float'
    }

    attribute_map = {
        'node': 'node',
        'parallelism': 'parallelism',
        'min_successes': 'min_successes',
        'min_success_ratio': 'min_success_ratio'
    }

    def __init__(self, node=None, parallelism=None, min_successes=None, min_success_ratio=None):  # noqa: E501
        """CoreArrayNode - a model defined in Swagger"""  # noqa: E501

        self._node = None
        self._parallelism = None
        self._min_successes = None
        self._min_success_ratio = None
        self.discriminator = None

        if node is not None:
            self.node = node
        if parallelism is not None:
            self.parallelism = parallelism
        if min_successes is not None:
            self.min_successes = min_successes
        if min_success_ratio is not None:
            self.min_success_ratio = min_success_ratio

    @property
    def node(self):
        """Gets the node of this CoreArrayNode.  # noqa: E501

        node is the sub-node that will be executed for each element in the array.  # noqa: E501

        :return: The node of this CoreArrayNode.  # noqa: E501
        :rtype: CoreNode
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this CoreArrayNode.

        node is the sub-node that will be executed for each element in the array.  # noqa: E501

        :param node: The node of this CoreArrayNode.  # noqa: E501
        :type: CoreNode
        """

        self._node = node

    @property
    def parallelism(self):
        """Gets the parallelism of this CoreArrayNode.  # noqa: E501

        parallelism defines the minimum number of instances to bring up concurrently at any given point. Note that this is an optimistic restriction and that, due to network partitioning or other failures, the actual number of currently running instances might be more. This has to be a positive number if assigned. Default value is size.  # noqa: E501

        :return: The parallelism of this CoreArrayNode.  # noqa: E501
        :rtype: int
        """
        return self._parallelism

    @parallelism.setter
    def parallelism(self, parallelism):
        """Sets the parallelism of this CoreArrayNode.

        parallelism defines the minimum number of instances to bring up concurrently at any given point. Note that this is an optimistic restriction and that, due to network partitioning or other failures, the actual number of currently running instances might be more. This has to be a positive number if assigned. Default value is size.  # noqa: E501

        :param parallelism: The parallelism of this CoreArrayNode.  # noqa: E501
        :type: int
        """

        self._parallelism = parallelism

    @property
    def min_successes(self):
        """Gets the min_successes of this CoreArrayNode.  # noqa: E501

        min_successes is an absolute number of the minimum number of successful completions of sub-nodes. As soon as this criteria is met, the ArrayNode will be marked as successful and outputs will be computed. This has to be a non-negative number if assigned. Default value is size (if specified).  # noqa: E501

        :return: The min_successes of this CoreArrayNode.  # noqa: E501
        :rtype: int
        """
        return self._min_successes

    @min_successes.setter
    def min_successes(self, min_successes):
        """Sets the min_successes of this CoreArrayNode.

        min_successes is an absolute number of the minimum number of successful completions of sub-nodes. As soon as this criteria is met, the ArrayNode will be marked as successful and outputs will be computed. This has to be a non-negative number if assigned. Default value is size (if specified).  # noqa: E501

        :param min_successes: The min_successes of this CoreArrayNode.  # noqa: E501
        :type: int
        """

        self._min_successes = min_successes

    @property
    def min_success_ratio(self):
        """Gets the min_success_ratio of this CoreArrayNode.  # noqa: E501

        If the array job size is not known beforehand, the min_success_ratio can instead be used to determine when an ArrayNode can be marked successful.  # noqa: E501

        :return: The min_success_ratio of this CoreArrayNode.  # noqa: E501
        :rtype: float
        """
        return self._min_success_ratio

    @min_success_ratio.setter
    def min_success_ratio(self, min_success_ratio):
        """Sets the min_success_ratio of this CoreArrayNode.

        If the array job size is not known beforehand, the min_success_ratio can instead be used to determine when an ArrayNode can be marked successful.  # noqa: E501

        :param min_success_ratio: The min_success_ratio of this CoreArrayNode.  # noqa: E501
        :type: float
        """

        self._min_success_ratio = min_success_ratio

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoreArrayNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreArrayNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
