// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/dynamic_job.proto

package com.flyteidl.core;

public interface DynamicJobSpecOrBuilder extends
    // @@protoc_insertion_point(interface_extends:flyteidl.core.DynamicJobSpec)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * A collection of nodes to execute.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Node nodes = 1 [json_name = "nodes"];</code>
   */
  java.util.List<com.flyteidl.core.Node> 
      getNodesList();
  /**
   * <pre>
   * A collection of nodes to execute.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Node nodes = 1 [json_name = "nodes"];</code>
   */
  com.flyteidl.core.Node getNodes(int index);
  /**
   * <pre>
   * A collection of nodes to execute.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Node nodes = 1 [json_name = "nodes"];</code>
   */
  int getNodesCount();
  /**
   * <pre>
   * A collection of nodes to execute.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Node nodes = 1 [json_name = "nodes"];</code>
   */
  java.util.List<? extends com.flyteidl.core.NodeOrBuilder> 
      getNodesOrBuilderList();
  /**
   * <pre>
   * A collection of nodes to execute.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Node nodes = 1 [json_name = "nodes"];</code>
   */
  com.flyteidl.core.NodeOrBuilder getNodesOrBuilder(
      int index);

  /**
   * <pre>
   * An absolute number of successful completions of nodes required to mark this job as succeeded. As soon as this
   * criteria is met, the dynamic job will be marked as successful and outputs will be computed. If this number
   * becomes impossible to reach (e.g. number of currently running tasks + number of already succeeded tasks &lt;
   * min_successes) the task will be aborted immediately and marked as failed. The default value of this field, if not
   * specified, is the count of nodes repeated field.
   * </pre>
   *
   * <code>int64 min_successes = 2 [json_name = "minSuccesses"];</code>
   * @return The minSuccesses.
   */
  long getMinSuccesses();

  /**
   * <pre>
   * Describes how to bind the final output of the dynamic job from the outputs of executed nodes. The referenced ids
   * in bindings should have the generated id for the subtask.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Binding outputs = 3 [json_name = "outputs"];</code>
   */
  java.util.List<com.flyteidl.core.Binding> 
      getOutputsList();
  /**
   * <pre>
   * Describes how to bind the final output of the dynamic job from the outputs of executed nodes. The referenced ids
   * in bindings should have the generated id for the subtask.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Binding outputs = 3 [json_name = "outputs"];</code>
   */
  com.flyteidl.core.Binding getOutputs(int index);
  /**
   * <pre>
   * Describes how to bind the final output of the dynamic job from the outputs of executed nodes. The referenced ids
   * in bindings should have the generated id for the subtask.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Binding outputs = 3 [json_name = "outputs"];</code>
   */
  int getOutputsCount();
  /**
   * <pre>
   * Describes how to bind the final output of the dynamic job from the outputs of executed nodes. The referenced ids
   * in bindings should have the generated id for the subtask.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Binding outputs = 3 [json_name = "outputs"];</code>
   */
  java.util.List<? extends com.flyteidl.core.BindingOrBuilder> 
      getOutputsOrBuilderList();
  /**
   * <pre>
   * Describes how to bind the final output of the dynamic job from the outputs of executed nodes. The referenced ids
   * in bindings should have the generated id for the subtask.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Binding outputs = 3 [json_name = "outputs"];</code>
   */
  com.flyteidl.core.BindingOrBuilder getOutputsOrBuilder(
      int index);

  /**
   * <pre>
   * [Optional] A complete list of task specs referenced in nodes.
   * </pre>
   *
   * <code>repeated .flyteidl.core.TaskTemplate tasks = 4 [json_name = "tasks"];</code>
   */
  java.util.List<com.flyteidl.core.TaskTemplate> 
      getTasksList();
  /**
   * <pre>
   * [Optional] A complete list of task specs referenced in nodes.
   * </pre>
   *
   * <code>repeated .flyteidl.core.TaskTemplate tasks = 4 [json_name = "tasks"];</code>
   */
  com.flyteidl.core.TaskTemplate getTasks(int index);
  /**
   * <pre>
   * [Optional] A complete list of task specs referenced in nodes.
   * </pre>
   *
   * <code>repeated .flyteidl.core.TaskTemplate tasks = 4 [json_name = "tasks"];</code>
   */
  int getTasksCount();
  /**
   * <pre>
   * [Optional] A complete list of task specs referenced in nodes.
   * </pre>
   *
   * <code>repeated .flyteidl.core.TaskTemplate tasks = 4 [json_name = "tasks"];</code>
   */
  java.util.List<? extends com.flyteidl.core.TaskTemplateOrBuilder> 
      getTasksOrBuilderList();
  /**
   * <pre>
   * [Optional] A complete list of task specs referenced in nodes.
   * </pre>
   *
   * <code>repeated .flyteidl.core.TaskTemplate tasks = 4 [json_name = "tasks"];</code>
   */
  com.flyteidl.core.TaskTemplateOrBuilder getTasksOrBuilder(
      int index);

  /**
   * <pre>
   * [Optional] A complete list of task specs referenced in nodes.
   * </pre>
   *
   * <code>repeated .flyteidl.core.WorkflowTemplate subworkflows = 5 [json_name = "subworkflows"];</code>
   */
  java.util.List<com.flyteidl.core.WorkflowTemplate> 
      getSubworkflowsList();
  /**
   * <pre>
   * [Optional] A complete list of task specs referenced in nodes.
   * </pre>
   *
   * <code>repeated .flyteidl.core.WorkflowTemplate subworkflows = 5 [json_name = "subworkflows"];</code>
   */
  com.flyteidl.core.WorkflowTemplate getSubworkflows(int index);
  /**
   * <pre>
   * [Optional] A complete list of task specs referenced in nodes.
   * </pre>
   *
   * <code>repeated .flyteidl.core.WorkflowTemplate subworkflows = 5 [json_name = "subworkflows"];</code>
   */
  int getSubworkflowsCount();
  /**
   * <pre>
   * [Optional] A complete list of task specs referenced in nodes.
   * </pre>
   *
   * <code>repeated .flyteidl.core.WorkflowTemplate subworkflows = 5 [json_name = "subworkflows"];</code>
   */
  java.util.List<? extends com.flyteidl.core.WorkflowTemplateOrBuilder> 
      getSubworkflowsOrBuilderList();
  /**
   * <pre>
   * [Optional] A complete list of task specs referenced in nodes.
   * </pre>
   *
   * <code>repeated .flyteidl.core.WorkflowTemplate subworkflows = 5 [json_name = "subworkflows"];</code>
   */
  com.flyteidl.core.WorkflowTemplateOrBuilder getSubworkflowsOrBuilder(
      int index);
}
