// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/plugins/snowflake.proto

package plugins

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// This message works with the 'snowflake' task type in the SDK and is the object that will be in the 'custom' field
// of a Snowflake task's TaskTemplate
type SnowflakeQuery struct {
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// Define a cluster of compute resources in Snowflake
	Warehouse            string   `protobuf:"bytes,2,opt,name=warehouse,proto3" json:"warehouse,omitempty"`
	Schema               string   `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	Database             string   `protobuf:"bytes,4,opt,name=database,proto3" json:"database,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnowflakeQuery) Reset()         { *m = SnowflakeQuery{} }
func (m *SnowflakeQuery) String() string { return proto.CompactTextString(m) }
func (*SnowflakeQuery) ProtoMessage()    {}
func (*SnowflakeQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecf229a6551d4902, []int{0}
}

func (m *SnowflakeQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnowflakeQuery.Unmarshal(m, b)
}
func (m *SnowflakeQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnowflakeQuery.Marshal(b, m, deterministic)
}
func (m *SnowflakeQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnowflakeQuery.Merge(m, src)
}
func (m *SnowflakeQuery) XXX_Size() int {
	return xxx_messageInfo_SnowflakeQuery.Size(m)
}
func (m *SnowflakeQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_SnowflakeQuery.DiscardUnknown(m)
}

var xxx_messageInfo_SnowflakeQuery proto.InternalMessageInfo

func (m *SnowflakeQuery) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *SnowflakeQuery) GetWarehouse() string {
	if m != nil {
		return m.Warehouse
	}
	return ""
}

func (m *SnowflakeQuery) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *SnowflakeQuery) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func init() {
	proto.RegisterType((*SnowflakeQuery)(nil), "flyteidl.plugins.SnowflakeQuery")
}

func init() { proto.RegisterFile("flyteidl/plugins/snowflake.proto", fileDescriptor_ecf229a6551d4902) }

var fileDescriptor_ecf229a6551d4902 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x48, 0xcb, 0xa9, 0x2c,
	0x49, 0xcd, 0x4c, 0xc9, 0xd1, 0x2f, 0xc8, 0x29, 0x4d, 0xcf, 0xcc, 0x2b, 0xd6, 0x2f, 0xce, 0xcb,
	0x2f, 0x4f, 0xcb, 0x49, 0xcc, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x80, 0xa9,
	0xd0, 0x83, 0xaa, 0x50, 0xaa, 0xe1, 0xe2, 0x0b, 0x86, 0x29, 0x0a, 0x2c, 0x4d, 0x2d, 0xaa, 0x14,
	0x92, 0xe0, 0x62, 0x4f, 0x4c, 0x4e, 0xce, 0x2f, 0xcd, 0x2b, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0,
	0x0c, 0x82, 0x71, 0x85, 0x64, 0xb8, 0x38, 0xcb, 0x13, 0x8b, 0x52, 0x33, 0xf2, 0x4b, 0x8b, 0x53,
	0x25, 0x98, 0xc0, 0x72, 0x08, 0x01, 0x21, 0x31, 0x2e, 0xb6, 0xe2, 0xe4, 0x8c, 0xd4, 0xdc, 0x44,
	0x09, 0x66, 0xb0, 0x14, 0x94, 0x27, 0x24, 0xc5, 0xc5, 0x91, 0x92, 0x58, 0x92, 0x98, 0x94, 0x58,
	0x9c, 0x2a, 0xc1, 0x02, 0x96, 0x81, 0xf3, 0x9d, 0x2c, 0xa3, 0xcc, 0xd3, 0x33, 0x4b, 0x32, 0x4a,
	0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xc1, 0x8e, 0xcb, 0x2f, 0x4a, 0xd7, 0x87, 0xfb, 0x23, 0x3d,
	0x35, 0x4f, 0xbf, 0x20, 0x49, 0x37, 0x3d, 0x5f, 0x1f, 0xdd, 0x6b, 0x49, 0x6c, 0x60, 0x1f, 0x19,
	0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x3f, 0x57, 0xea, 0xf5, 0x00, 0x00, 0x00,
}
