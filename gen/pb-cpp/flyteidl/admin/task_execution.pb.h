// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/task_execution.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2ftask_5fexecution_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2ftask_5fexecution_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/admin/common.pb.h"
#include "flyteidl/core/execution.pb.h"
#include "flyteidl/core/identifier.pb.h"
#include "flyteidl/core/literals.pb.h"
#include "flyteidl/event/event.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2ftask_5fexecution_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fadmin_2ftask_5fexecution_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto;
namespace flyteidl {
namespace admin {
class TaskExecution;
struct TaskExecutionDefaultTypeInternal;
extern TaskExecutionDefaultTypeInternal _TaskExecution_default_instance_;
class TaskExecutionClosure;
struct TaskExecutionClosureDefaultTypeInternal;
extern TaskExecutionClosureDefaultTypeInternal _TaskExecutionClosure_default_instance_;
class TaskExecutionGetDataRequest;
struct TaskExecutionGetDataRequestDefaultTypeInternal;
extern TaskExecutionGetDataRequestDefaultTypeInternal _TaskExecutionGetDataRequest_default_instance_;
class TaskExecutionGetDataResponse;
struct TaskExecutionGetDataResponseDefaultTypeInternal;
extern TaskExecutionGetDataResponseDefaultTypeInternal _TaskExecutionGetDataResponse_default_instance_;
class TaskExecutionGetRequest;
struct TaskExecutionGetRequestDefaultTypeInternal;
extern TaskExecutionGetRequestDefaultTypeInternal _TaskExecutionGetRequest_default_instance_;
class TaskExecutionList;
struct TaskExecutionListDefaultTypeInternal;
extern TaskExecutionListDefaultTypeInternal _TaskExecutionList_default_instance_;
class TaskExecutionListRequest;
struct TaskExecutionListRequestDefaultTypeInternal;
extern TaskExecutionListRequestDefaultTypeInternal _TaskExecutionListRequest_default_instance_;
}  // namespace admin
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::admin::TaskExecution* Arena::CreateMaybeMessage<::flyteidl::admin::TaskExecution>(Arena*);
template<> ::flyteidl::admin::TaskExecutionClosure* Arena::CreateMaybeMessage<::flyteidl::admin::TaskExecutionClosure>(Arena*);
template<> ::flyteidl::admin::TaskExecutionGetDataRequest* Arena::CreateMaybeMessage<::flyteidl::admin::TaskExecutionGetDataRequest>(Arena*);
template<> ::flyteidl::admin::TaskExecutionGetDataResponse* Arena::CreateMaybeMessage<::flyteidl::admin::TaskExecutionGetDataResponse>(Arena*);
template<> ::flyteidl::admin::TaskExecutionGetRequest* Arena::CreateMaybeMessage<::flyteidl::admin::TaskExecutionGetRequest>(Arena*);
template<> ::flyteidl::admin::TaskExecutionList* Arena::CreateMaybeMessage<::flyteidl::admin::TaskExecutionList>(Arena*);
template<> ::flyteidl::admin::TaskExecutionListRequest* Arena::CreateMaybeMessage<::flyteidl::admin::TaskExecutionListRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace admin {

// ===================================================================

class TaskExecutionGetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskExecutionGetRequest) */ {
 public:
  inline TaskExecutionGetRequest() : TaskExecutionGetRequest(nullptr) {}
  ~TaskExecutionGetRequest() override;
  explicit constexpr TaskExecutionGetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskExecutionGetRequest(const TaskExecutionGetRequest& from);
  TaskExecutionGetRequest(TaskExecutionGetRequest&& from) noexcept
    : TaskExecutionGetRequest() {
    *this = ::std::move(from);
  }

  inline TaskExecutionGetRequest& operator=(const TaskExecutionGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskExecutionGetRequest& operator=(TaskExecutionGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskExecutionGetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskExecutionGetRequest* internal_default_instance() {
    return reinterpret_cast<const TaskExecutionGetRequest*>(
               &_TaskExecutionGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TaskExecutionGetRequest& a, TaskExecutionGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskExecutionGetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskExecutionGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskExecutionGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskExecutionGetRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskExecutionGetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.TaskExecutionGetRequest";
  }
  protected:
  explicit TaskExecutionGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // .flyteidl.core.TaskExecutionIdentifier id = 1 [json_name = "id"];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::flyteidl::core::TaskExecutionIdentifier& id() const;
  PROTOBUF_NODISCARD ::flyteidl::core::TaskExecutionIdentifier* release_id();
  ::flyteidl::core::TaskExecutionIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::core::TaskExecutionIdentifier* id);
  private:
  const ::flyteidl::core::TaskExecutionIdentifier& _internal_id() const;
  ::flyteidl::core::TaskExecutionIdentifier* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::flyteidl::core::TaskExecutionIdentifier* id);
  ::flyteidl::core::TaskExecutionIdentifier* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskExecutionGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::TaskExecutionIdentifier* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2ftask_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class TaskExecutionListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskExecutionListRequest) */ {
 public:
  inline TaskExecutionListRequest() : TaskExecutionListRequest(nullptr) {}
  ~TaskExecutionListRequest() override;
  explicit constexpr TaskExecutionListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskExecutionListRequest(const TaskExecutionListRequest& from);
  TaskExecutionListRequest(TaskExecutionListRequest&& from) noexcept
    : TaskExecutionListRequest() {
    *this = ::std::move(from);
  }

  inline TaskExecutionListRequest& operator=(const TaskExecutionListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskExecutionListRequest& operator=(TaskExecutionListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskExecutionListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskExecutionListRequest* internal_default_instance() {
    return reinterpret_cast<const TaskExecutionListRequest*>(
               &_TaskExecutionListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TaskExecutionListRequest& a, TaskExecutionListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskExecutionListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskExecutionListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskExecutionListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskExecutionListRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskExecutionListRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.TaskExecutionListRequest";
  }
  protected:
  explicit TaskExecutionListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 3,
    kFiltersFieldNumber = 4,
    kNodeExecutionIdFieldNumber = 1,
    kSortByFieldNumber = 5,
    kLimitFieldNumber = 2,
  };
  // string token = 3 [json_name = "token"];
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string filters = 4 [json_name = "filters"];
  void clear_filters();
  const std::string& filters() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filters(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filters();
  PROTOBUF_NODISCARD std::string* release_filters();
  void set_allocated_filters(std::string* filters);
  private:
  const std::string& _internal_filters() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filters(const std::string& value);
  std::string* _internal_mutable_filters();
  public:

  // .flyteidl.core.NodeExecutionIdentifier node_execution_id = 1 [json_name = "nodeExecutionId"];
  bool has_node_execution_id() const;
  private:
  bool _internal_has_node_execution_id() const;
  public:
  void clear_node_execution_id();
  const ::flyteidl::core::NodeExecutionIdentifier& node_execution_id() const;
  PROTOBUF_NODISCARD ::flyteidl::core::NodeExecutionIdentifier* release_node_execution_id();
  ::flyteidl::core::NodeExecutionIdentifier* mutable_node_execution_id();
  void set_allocated_node_execution_id(::flyteidl::core::NodeExecutionIdentifier* node_execution_id);
  private:
  const ::flyteidl::core::NodeExecutionIdentifier& _internal_node_execution_id() const;
  ::flyteidl::core::NodeExecutionIdentifier* _internal_mutable_node_execution_id();
  public:
  void unsafe_arena_set_allocated_node_execution_id(
      ::flyteidl::core::NodeExecutionIdentifier* node_execution_id);
  ::flyteidl::core::NodeExecutionIdentifier* unsafe_arena_release_node_execution_id();

  // .flyteidl.admin.Sort sort_by = 5 [json_name = "sortBy"];
  bool has_sort_by() const;
  private:
  bool _internal_has_sort_by() const;
  public:
  void clear_sort_by();
  const ::flyteidl::admin::Sort& sort_by() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::Sort* release_sort_by();
  ::flyteidl::admin::Sort* mutable_sort_by();
  void set_allocated_sort_by(::flyteidl::admin::Sort* sort_by);
  private:
  const ::flyteidl::admin::Sort& _internal_sort_by() const;
  ::flyteidl::admin::Sort* _internal_mutable_sort_by();
  public:
  void unsafe_arena_set_allocated_sort_by(
      ::flyteidl::admin::Sort* sort_by);
  ::flyteidl::admin::Sort* unsafe_arena_release_sort_by();

  // uint32 limit = 2 [json_name = "limit"];
  void clear_limit();
  uint32_t limit() const;
  void set_limit(uint32_t value);
  private:
  uint32_t _internal_limit() const;
  void _internal_set_limit(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskExecutionListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filters_;
  ::flyteidl::core::NodeExecutionIdentifier* node_execution_id_;
  ::flyteidl::admin::Sort* sort_by_;
  uint32_t limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2ftask_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class TaskExecution final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskExecution) */ {
 public:
  inline TaskExecution() : TaskExecution(nullptr) {}
  ~TaskExecution() override;
  explicit constexpr TaskExecution(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskExecution(const TaskExecution& from);
  TaskExecution(TaskExecution&& from) noexcept
    : TaskExecution() {
    *this = ::std::move(from);
  }

  inline TaskExecution& operator=(const TaskExecution& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskExecution& operator=(TaskExecution&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskExecution& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskExecution* internal_default_instance() {
    return reinterpret_cast<const TaskExecution*>(
               &_TaskExecution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TaskExecution& a, TaskExecution& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskExecution* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskExecution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskExecution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskExecution>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskExecution* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.TaskExecution";
  }
  protected:
  explicit TaskExecution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputUriFieldNumber = 2,
    kIdFieldNumber = 1,
    kClosureFieldNumber = 3,
    kIsParentFieldNumber = 4,
  };
  // string input_uri = 2 [json_name = "inputUri"];
  void clear_input_uri();
  const std::string& input_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_uri();
  PROTOBUF_NODISCARD std::string* release_input_uri();
  void set_allocated_input_uri(std::string* input_uri);
  private:
  const std::string& _internal_input_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_uri(const std::string& value);
  std::string* _internal_mutable_input_uri();
  public:

  // .flyteidl.core.TaskExecutionIdentifier id = 1 [json_name = "id"];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::flyteidl::core::TaskExecutionIdentifier& id() const;
  PROTOBUF_NODISCARD ::flyteidl::core::TaskExecutionIdentifier* release_id();
  ::flyteidl::core::TaskExecutionIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::core::TaskExecutionIdentifier* id);
  private:
  const ::flyteidl::core::TaskExecutionIdentifier& _internal_id() const;
  ::flyteidl::core::TaskExecutionIdentifier* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::flyteidl::core::TaskExecutionIdentifier* id);
  ::flyteidl::core::TaskExecutionIdentifier* unsafe_arena_release_id();

  // .flyteidl.admin.TaskExecutionClosure closure = 3 [json_name = "closure"];
  bool has_closure() const;
  private:
  bool _internal_has_closure() const;
  public:
  void clear_closure();
  const ::flyteidl::admin::TaskExecutionClosure& closure() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::TaskExecutionClosure* release_closure();
  ::flyteidl::admin::TaskExecutionClosure* mutable_closure();
  void set_allocated_closure(::flyteidl::admin::TaskExecutionClosure* closure);
  private:
  const ::flyteidl::admin::TaskExecutionClosure& _internal_closure() const;
  ::flyteidl::admin::TaskExecutionClosure* _internal_mutable_closure();
  public:
  void unsafe_arena_set_allocated_closure(
      ::flyteidl::admin::TaskExecutionClosure* closure);
  ::flyteidl::admin::TaskExecutionClosure* unsafe_arena_release_closure();

  // bool is_parent = 4 [json_name = "isParent"];
  void clear_is_parent();
  bool is_parent() const;
  void set_is_parent(bool value);
  private:
  bool _internal_is_parent() const;
  void _internal_set_is_parent(bool value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskExecution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_uri_;
  ::flyteidl::core::TaskExecutionIdentifier* id_;
  ::flyteidl::admin::TaskExecutionClosure* closure_;
  bool is_parent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2ftask_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class TaskExecutionList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskExecutionList) */ {
 public:
  inline TaskExecutionList() : TaskExecutionList(nullptr) {}
  ~TaskExecutionList() override;
  explicit constexpr TaskExecutionList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskExecutionList(const TaskExecutionList& from);
  TaskExecutionList(TaskExecutionList&& from) noexcept
    : TaskExecutionList() {
    *this = ::std::move(from);
  }

  inline TaskExecutionList& operator=(const TaskExecutionList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskExecutionList& operator=(TaskExecutionList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskExecutionList& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskExecutionList* internal_default_instance() {
    return reinterpret_cast<const TaskExecutionList*>(
               &_TaskExecutionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TaskExecutionList& a, TaskExecutionList& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskExecutionList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskExecutionList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskExecutionList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskExecutionList>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskExecutionList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.TaskExecutionList";
  }
  protected:
  explicit TaskExecutionList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskExecutionsFieldNumber = 1,
    kTokenFieldNumber = 2,
  };
  // repeated .flyteidl.admin.TaskExecution task_executions = 1 [json_name = "taskExecutions"];
  int task_executions_size() const;
  private:
  int _internal_task_executions_size() const;
  public:
  void clear_task_executions();
  ::flyteidl::admin::TaskExecution* mutable_task_executions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::TaskExecution >*
      mutable_task_executions();
  private:
  const ::flyteidl::admin::TaskExecution& _internal_task_executions(int index) const;
  ::flyteidl::admin::TaskExecution* _internal_add_task_executions();
  public:
  const ::flyteidl::admin::TaskExecution& task_executions(int index) const;
  ::flyteidl::admin::TaskExecution* add_task_executions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::TaskExecution >&
      task_executions() const;

  // string token = 2 [json_name = "token"];
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskExecutionList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::TaskExecution > task_executions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2ftask_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class TaskExecutionClosure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskExecutionClosure) */ {
 public:
  inline TaskExecutionClosure() : TaskExecutionClosure(nullptr) {}
  ~TaskExecutionClosure() override;
  explicit constexpr TaskExecutionClosure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskExecutionClosure(const TaskExecutionClosure& from);
  TaskExecutionClosure(TaskExecutionClosure&& from) noexcept
    : TaskExecutionClosure() {
    *this = ::std::move(from);
  }

  inline TaskExecutionClosure& operator=(const TaskExecutionClosure& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskExecutionClosure& operator=(TaskExecutionClosure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskExecutionClosure& default_instance() {
    return *internal_default_instance();
  }
  enum OutputResultCase {
    kOutputUri = 1,
    kError = 2,
    kOutputData = 12,
    OUTPUT_RESULT_NOT_SET = 0,
  };

  static inline const TaskExecutionClosure* internal_default_instance() {
    return reinterpret_cast<const TaskExecutionClosure*>(
               &_TaskExecutionClosure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TaskExecutionClosure& a, TaskExecutionClosure& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskExecutionClosure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskExecutionClosure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskExecutionClosure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskExecutionClosure>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskExecutionClosure* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.TaskExecutionClosure";
  }
  protected:
  explicit TaskExecutionClosure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogsFieldNumber = 4,
    kReasonFieldNumber = 10,
    kTaskTypeFieldNumber = 11,
    kStartedAtFieldNumber = 5,
    kDurationFieldNumber = 6,
    kCreatedAtFieldNumber = 7,
    kUpdatedAtFieldNumber = 8,
    kCustomInfoFieldNumber = 9,
    kMetadataFieldNumber = 16,
    kPhaseFieldNumber = 3,
    kEventVersionFieldNumber = 17,
    kOutputUriFieldNumber = 1,
    kErrorFieldNumber = 2,
    kOutputDataFieldNumber = 12,
  };
  // repeated .flyteidl.core.TaskLog logs = 4 [json_name = "logs"];
  int logs_size() const;
  private:
  int _internal_logs_size() const;
  public:
  void clear_logs();
  ::flyteidl::core::TaskLog* mutable_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::TaskLog >*
      mutable_logs();
  private:
  const ::flyteidl::core::TaskLog& _internal_logs(int index) const;
  ::flyteidl::core::TaskLog* _internal_add_logs();
  public:
  const ::flyteidl::core::TaskLog& logs(int index) const;
  ::flyteidl::core::TaskLog* add_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::TaskLog >&
      logs() const;

  // string reason = 10 [json_name = "reason"];
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // string task_type = 11 [json_name = "taskType"];
  void clear_task_type();
  const std::string& task_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_type();
  PROTOBUF_NODISCARD std::string* release_task_type();
  void set_allocated_task_type(std::string* task_type);
  private:
  const std::string& _internal_task_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_type(const std::string& value);
  std::string* _internal_mutable_task_type();
  public:

  // .google.protobuf.Timestamp started_at = 5 [json_name = "startedAt"];
  bool has_started_at() const;
  private:
  bool _internal_has_started_at() const;
  public:
  void clear_started_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& started_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_started_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_started_at();
  void set_allocated_started_at(::PROTOBUF_NAMESPACE_ID::Timestamp* started_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_started_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_started_at();
  public:
  void unsafe_arena_set_allocated_started_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* started_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_started_at();

  // .google.protobuf.Duration duration = 6 [json_name = "duration"];
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const ::PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(::PROTOBUF_NAMESPACE_ID::Duration* duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration();

  // .google.protobuf.Timestamp created_at = 7 [json_name = "createdAt"];
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 8 [json_name = "updatedAt"];
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // .google.protobuf.Struct custom_info = 9 [json_name = "customInfo"];
  bool has_custom_info() const;
  private:
  bool _internal_has_custom_info() const;
  public:
  void clear_custom_info();
  const ::PROTOBUF_NAMESPACE_ID::Struct& custom_info() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_custom_info();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_custom_info();
  void set_allocated_custom_info(::PROTOBUF_NAMESPACE_ID::Struct* custom_info);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_custom_info() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_custom_info();
  public:
  void unsafe_arena_set_allocated_custom_info(
      ::PROTOBUF_NAMESPACE_ID::Struct* custom_info);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_custom_info();

  // .flyteidl.event.TaskExecutionMetadata metadata = 16 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::flyteidl::event::TaskExecutionMetadata& metadata() const;
  PROTOBUF_NODISCARD ::flyteidl::event::TaskExecutionMetadata* release_metadata();
  ::flyteidl::event::TaskExecutionMetadata* mutable_metadata();
  void set_allocated_metadata(::flyteidl::event::TaskExecutionMetadata* metadata);
  private:
  const ::flyteidl::event::TaskExecutionMetadata& _internal_metadata() const;
  ::flyteidl::event::TaskExecutionMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::flyteidl::event::TaskExecutionMetadata* metadata);
  ::flyteidl::event::TaskExecutionMetadata* unsafe_arena_release_metadata();

  // .flyteidl.core.TaskExecution.Phase phase = 3 [json_name = "phase"];
  void clear_phase();
  ::flyteidl::core::TaskExecution_Phase phase() const;
  void set_phase(::flyteidl::core::TaskExecution_Phase value);
  private:
  ::flyteidl::core::TaskExecution_Phase _internal_phase() const;
  void _internal_set_phase(::flyteidl::core::TaskExecution_Phase value);
  public:

  // int32 event_version = 17 [json_name = "eventVersion"];
  void clear_event_version();
  int32_t event_version() const;
  void set_event_version(int32_t value);
  private:
  int32_t _internal_event_version() const;
  void _internal_set_event_version(int32_t value);
  public:

  // string output_uri = 1 [json_name = "outputUri", deprecated = true];
  PROTOBUF_DEPRECATED bool has_output_uri() const;
  private:
  bool _internal_has_output_uri() const;
  public:
  PROTOBUF_DEPRECATED void clear_output_uri();
  PROTOBUF_DEPRECATED const std::string& output_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_output_uri(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_output_uri();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_output_uri();
  PROTOBUF_DEPRECATED void set_allocated_output_uri(std::string* output_uri);
  private:
  const std::string& _internal_output_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_uri(const std::string& value);
  std::string* _internal_mutable_output_uri();
  public:

  // .flyteidl.core.ExecutionError error = 2 [json_name = "error"];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::flyteidl::core::ExecutionError& error() const;
  PROTOBUF_NODISCARD ::flyteidl::core::ExecutionError* release_error();
  ::flyteidl::core::ExecutionError* mutable_error();
  void set_allocated_error(::flyteidl::core::ExecutionError* error);
  private:
  const ::flyteidl::core::ExecutionError& _internal_error() const;
  ::flyteidl::core::ExecutionError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::flyteidl::core::ExecutionError* error);
  ::flyteidl::core::ExecutionError* unsafe_arena_release_error();

  // .flyteidl.core.LiteralMap output_data = 12 [json_name = "outputData", deprecated = true];
  PROTOBUF_DEPRECATED bool has_output_data() const;
  private:
  bool _internal_has_output_data() const;
  public:
  PROTOBUF_DEPRECATED void clear_output_data();
  PROTOBUF_DEPRECATED const ::flyteidl::core::LiteralMap& output_data() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::flyteidl::core::LiteralMap* release_output_data();
  PROTOBUF_DEPRECATED ::flyteidl::core::LiteralMap* mutable_output_data();
  PROTOBUF_DEPRECATED void set_allocated_output_data(::flyteidl::core::LiteralMap* output_data);
  private:
  const ::flyteidl::core::LiteralMap& _internal_output_data() const;
  ::flyteidl::core::LiteralMap* _internal_mutable_output_data();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_output_data(
      ::flyteidl::core::LiteralMap* output_data);
  PROTOBUF_DEPRECATED ::flyteidl::core::LiteralMap* unsafe_arena_release_output_data();

  void clear_output_result();
  OutputResultCase output_result_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskExecutionClosure)
 private:
  class _Internal;
  void set_has_output_uri();
  void set_has_error();
  void set_has_output_data();

  inline bool has_output_result() const;
  inline void clear_has_output_result();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::TaskLog > logs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_type_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* started_at_;
  ::PROTOBUF_NAMESPACE_ID::Duration* duration_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  ::PROTOBUF_NAMESPACE_ID::Struct* custom_info_;
  ::flyteidl::event::TaskExecutionMetadata* metadata_;
  int phase_;
  int32_t event_version_;
  union OutputResultUnion {
    constexpr OutputResultUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_uri_;
    ::flyteidl::core::ExecutionError* error_;
    ::flyteidl::core::LiteralMap* output_data_;
  } output_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fadmin_2ftask_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class TaskExecutionGetDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskExecutionGetDataRequest) */ {
 public:
  inline TaskExecutionGetDataRequest() : TaskExecutionGetDataRequest(nullptr) {}
  ~TaskExecutionGetDataRequest() override;
  explicit constexpr TaskExecutionGetDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskExecutionGetDataRequest(const TaskExecutionGetDataRequest& from);
  TaskExecutionGetDataRequest(TaskExecutionGetDataRequest&& from) noexcept
    : TaskExecutionGetDataRequest() {
    *this = ::std::move(from);
  }

  inline TaskExecutionGetDataRequest& operator=(const TaskExecutionGetDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskExecutionGetDataRequest& operator=(TaskExecutionGetDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskExecutionGetDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskExecutionGetDataRequest* internal_default_instance() {
    return reinterpret_cast<const TaskExecutionGetDataRequest*>(
               &_TaskExecutionGetDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TaskExecutionGetDataRequest& a, TaskExecutionGetDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskExecutionGetDataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskExecutionGetDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskExecutionGetDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskExecutionGetDataRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskExecutionGetDataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.TaskExecutionGetDataRequest";
  }
  protected:
  explicit TaskExecutionGetDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // .flyteidl.core.TaskExecutionIdentifier id = 1 [json_name = "id"];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::flyteidl::core::TaskExecutionIdentifier& id() const;
  PROTOBUF_NODISCARD ::flyteidl::core::TaskExecutionIdentifier* release_id();
  ::flyteidl::core::TaskExecutionIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::core::TaskExecutionIdentifier* id);
  private:
  const ::flyteidl::core::TaskExecutionIdentifier& _internal_id() const;
  ::flyteidl::core::TaskExecutionIdentifier* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::flyteidl::core::TaskExecutionIdentifier* id);
  ::flyteidl::core::TaskExecutionIdentifier* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskExecutionGetDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::TaskExecutionIdentifier* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2ftask_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class TaskExecutionGetDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskExecutionGetDataResponse) */ {
 public:
  inline TaskExecutionGetDataResponse() : TaskExecutionGetDataResponse(nullptr) {}
  ~TaskExecutionGetDataResponse() override;
  explicit constexpr TaskExecutionGetDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskExecutionGetDataResponse(const TaskExecutionGetDataResponse& from);
  TaskExecutionGetDataResponse(TaskExecutionGetDataResponse&& from) noexcept
    : TaskExecutionGetDataResponse() {
    *this = ::std::move(from);
  }

  inline TaskExecutionGetDataResponse& operator=(const TaskExecutionGetDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskExecutionGetDataResponse& operator=(TaskExecutionGetDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskExecutionGetDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskExecutionGetDataResponse* internal_default_instance() {
    return reinterpret_cast<const TaskExecutionGetDataResponse*>(
               &_TaskExecutionGetDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TaskExecutionGetDataResponse& a, TaskExecutionGetDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskExecutionGetDataResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskExecutionGetDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskExecutionGetDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskExecutionGetDataResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskExecutionGetDataResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.TaskExecutionGetDataResponse";
  }
  protected:
  explicit TaskExecutionGetDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 1,
    kOutputsFieldNumber = 2,
    kFullInputsFieldNumber = 3,
    kFullOutputsFieldNumber = 4,
  };
  // .flyteidl.admin.UrlBlob inputs = 1 [json_name = "inputs", deprecated = true];
  PROTOBUF_DEPRECATED bool has_inputs() const;
  private:
  bool _internal_has_inputs() const;
  public:
  PROTOBUF_DEPRECATED void clear_inputs();
  PROTOBUF_DEPRECATED const ::flyteidl::admin::UrlBlob& inputs() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::flyteidl::admin::UrlBlob* release_inputs();
  PROTOBUF_DEPRECATED ::flyteidl::admin::UrlBlob* mutable_inputs();
  PROTOBUF_DEPRECATED void set_allocated_inputs(::flyteidl::admin::UrlBlob* inputs);
  private:
  const ::flyteidl::admin::UrlBlob& _internal_inputs() const;
  ::flyteidl::admin::UrlBlob* _internal_mutable_inputs();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_inputs(
      ::flyteidl::admin::UrlBlob* inputs);
  PROTOBUF_DEPRECATED ::flyteidl::admin::UrlBlob* unsafe_arena_release_inputs();

  // .flyteidl.admin.UrlBlob outputs = 2 [json_name = "outputs", deprecated = true];
  PROTOBUF_DEPRECATED bool has_outputs() const;
  private:
  bool _internal_has_outputs() const;
  public:
  PROTOBUF_DEPRECATED void clear_outputs();
  PROTOBUF_DEPRECATED const ::flyteidl::admin::UrlBlob& outputs() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::flyteidl::admin::UrlBlob* release_outputs();
  PROTOBUF_DEPRECATED ::flyteidl::admin::UrlBlob* mutable_outputs();
  PROTOBUF_DEPRECATED void set_allocated_outputs(::flyteidl::admin::UrlBlob* outputs);
  private:
  const ::flyteidl::admin::UrlBlob& _internal_outputs() const;
  ::flyteidl::admin::UrlBlob* _internal_mutable_outputs();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_outputs(
      ::flyteidl::admin::UrlBlob* outputs);
  PROTOBUF_DEPRECATED ::flyteidl::admin::UrlBlob* unsafe_arena_release_outputs();

  // .flyteidl.core.LiteralMap full_inputs = 3 [json_name = "fullInputs"];
  bool has_full_inputs() const;
  private:
  bool _internal_has_full_inputs() const;
  public:
  void clear_full_inputs();
  const ::flyteidl::core::LiteralMap& full_inputs() const;
  PROTOBUF_NODISCARD ::flyteidl::core::LiteralMap* release_full_inputs();
  ::flyteidl::core::LiteralMap* mutable_full_inputs();
  void set_allocated_full_inputs(::flyteidl::core::LiteralMap* full_inputs);
  private:
  const ::flyteidl::core::LiteralMap& _internal_full_inputs() const;
  ::flyteidl::core::LiteralMap* _internal_mutable_full_inputs();
  public:
  void unsafe_arena_set_allocated_full_inputs(
      ::flyteidl::core::LiteralMap* full_inputs);
  ::flyteidl::core::LiteralMap* unsafe_arena_release_full_inputs();

  // .flyteidl.core.LiteralMap full_outputs = 4 [json_name = "fullOutputs"];
  bool has_full_outputs() const;
  private:
  bool _internal_has_full_outputs() const;
  public:
  void clear_full_outputs();
  const ::flyteidl::core::LiteralMap& full_outputs() const;
  PROTOBUF_NODISCARD ::flyteidl::core::LiteralMap* release_full_outputs();
  ::flyteidl::core::LiteralMap* mutable_full_outputs();
  void set_allocated_full_outputs(::flyteidl::core::LiteralMap* full_outputs);
  private:
  const ::flyteidl::core::LiteralMap& _internal_full_outputs() const;
  ::flyteidl::core::LiteralMap* _internal_mutable_full_outputs();
  public:
  void unsafe_arena_set_allocated_full_outputs(
      ::flyteidl::core::LiteralMap* full_outputs);
  ::flyteidl::core::LiteralMap* unsafe_arena_release_full_outputs();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskExecutionGetDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::admin::UrlBlob* inputs_;
  ::flyteidl::admin::UrlBlob* outputs_;
  ::flyteidl::core::LiteralMap* full_inputs_;
  ::flyteidl::core::LiteralMap* full_outputs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2ftask_5fexecution_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskExecutionGetRequest

// .flyteidl.core.TaskExecutionIdentifier id = 1 [json_name = "id"];
inline bool TaskExecutionGetRequest::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool TaskExecutionGetRequest::has_id() const {
  return _internal_has_id();
}
inline const ::flyteidl::core::TaskExecutionIdentifier& TaskExecutionGetRequest::_internal_id() const {
  const ::flyteidl::core::TaskExecutionIdentifier* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::TaskExecutionIdentifier&>(
      ::flyteidl::core::_TaskExecutionIdentifier_default_instance_);
}
inline const ::flyteidl::core::TaskExecutionIdentifier& TaskExecutionGetRequest::id() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionGetRequest.id)
  return _internal_id();
}
inline void TaskExecutionGetRequest::unsafe_arena_set_allocated_id(
    ::flyteidl::core::TaskExecutionIdentifier* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.TaskExecutionGetRequest.id)
}
inline ::flyteidl::core::TaskExecutionIdentifier* TaskExecutionGetRequest::release_id() {
  
  ::flyteidl::core::TaskExecutionIdentifier* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::TaskExecutionIdentifier* TaskExecutionGetRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionGetRequest.id)
  
  ::flyteidl::core::TaskExecutionIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::TaskExecutionIdentifier* TaskExecutionGetRequest::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::TaskExecutionIdentifier>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::flyteidl::core::TaskExecutionIdentifier* TaskExecutionGetRequest::mutable_id() {
  ::flyteidl::core::TaskExecutionIdentifier* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionGetRequest.id)
  return _msg;
}
inline void TaskExecutionGetRequest::set_allocated_id(::flyteidl::core::TaskExecutionIdentifier* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionGetRequest.id)
}

// -------------------------------------------------------------------

// TaskExecutionListRequest

// .flyteidl.core.NodeExecutionIdentifier node_execution_id = 1 [json_name = "nodeExecutionId"];
inline bool TaskExecutionListRequest::_internal_has_node_execution_id() const {
  return this != internal_default_instance() && node_execution_id_ != nullptr;
}
inline bool TaskExecutionListRequest::has_node_execution_id() const {
  return _internal_has_node_execution_id();
}
inline const ::flyteidl::core::NodeExecutionIdentifier& TaskExecutionListRequest::_internal_node_execution_id() const {
  const ::flyteidl::core::NodeExecutionIdentifier* p = node_execution_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::NodeExecutionIdentifier&>(
      ::flyteidl::core::_NodeExecutionIdentifier_default_instance_);
}
inline const ::flyteidl::core::NodeExecutionIdentifier& TaskExecutionListRequest::node_execution_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionListRequest.node_execution_id)
  return _internal_node_execution_id();
}
inline void TaskExecutionListRequest::unsafe_arena_set_allocated_node_execution_id(
    ::flyteidl::core::NodeExecutionIdentifier* node_execution_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_execution_id_);
  }
  node_execution_id_ = node_execution_id;
  if (node_execution_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.TaskExecutionListRequest.node_execution_id)
}
inline ::flyteidl::core::NodeExecutionIdentifier* TaskExecutionListRequest::release_node_execution_id() {
  
  ::flyteidl::core::NodeExecutionIdentifier* temp = node_execution_id_;
  node_execution_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::NodeExecutionIdentifier* TaskExecutionListRequest::unsafe_arena_release_node_execution_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionListRequest.node_execution_id)
  
  ::flyteidl::core::NodeExecutionIdentifier* temp = node_execution_id_;
  node_execution_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::NodeExecutionIdentifier* TaskExecutionListRequest::_internal_mutable_node_execution_id() {
  
  if (node_execution_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::NodeExecutionIdentifier>(GetArenaForAllocation());
    node_execution_id_ = p;
  }
  return node_execution_id_;
}
inline ::flyteidl::core::NodeExecutionIdentifier* TaskExecutionListRequest::mutable_node_execution_id() {
  ::flyteidl::core::NodeExecutionIdentifier* _msg = _internal_mutable_node_execution_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionListRequest.node_execution_id)
  return _msg;
}
inline void TaskExecutionListRequest::set_allocated_node_execution_id(::flyteidl::core::NodeExecutionIdentifier* node_execution_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_execution_id_);
  }
  if (node_execution_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_execution_id));
    if (message_arena != submessage_arena) {
      node_execution_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_execution_id, submessage_arena);
    }
    
  } else {
    
  }
  node_execution_id_ = node_execution_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionListRequest.node_execution_id)
}

// uint32 limit = 2 [json_name = "limit"];
inline void TaskExecutionListRequest::clear_limit() {
  limit_ = 0u;
}
inline uint32_t TaskExecutionListRequest::_internal_limit() const {
  return limit_;
}
inline uint32_t TaskExecutionListRequest::limit() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionListRequest.limit)
  return _internal_limit();
}
inline void TaskExecutionListRequest::_internal_set_limit(uint32_t value) {
  
  limit_ = value;
}
inline void TaskExecutionListRequest::set_limit(uint32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskExecutionListRequest.limit)
}

// string token = 3 [json_name = "token"];
inline void TaskExecutionListRequest::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& TaskExecutionListRequest::token() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionListRequest.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskExecutionListRequest::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskExecutionListRequest.token)
}
inline std::string* TaskExecutionListRequest::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionListRequest.token)
  return _s;
}
inline const std::string& TaskExecutionListRequest::_internal_token() const {
  return token_.Get();
}
inline void TaskExecutionListRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskExecutionListRequest::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskExecutionListRequest::release_token() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionListRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskExecutionListRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionListRequest.token)
}

// string filters = 4 [json_name = "filters"];
inline void TaskExecutionListRequest::clear_filters() {
  filters_.ClearToEmpty();
}
inline const std::string& TaskExecutionListRequest::filters() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionListRequest.filters)
  return _internal_filters();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskExecutionListRequest::set_filters(ArgT0&& arg0, ArgT... args) {
 
 filters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskExecutionListRequest.filters)
}
inline std::string* TaskExecutionListRequest::mutable_filters() {
  std::string* _s = _internal_mutable_filters();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionListRequest.filters)
  return _s;
}
inline const std::string& TaskExecutionListRequest::_internal_filters() const {
  return filters_.Get();
}
inline void TaskExecutionListRequest::_internal_set_filters(const std::string& value) {
  
  filters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskExecutionListRequest::_internal_mutable_filters() {
  
  return filters_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskExecutionListRequest::release_filters() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionListRequest.filters)
  return filters_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskExecutionListRequest::set_allocated_filters(std::string* filters) {
  if (filters != nullptr) {
    
  } else {
    
  }
  filters_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filters,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filters_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionListRequest.filters)
}

// .flyteidl.admin.Sort sort_by = 5 [json_name = "sortBy"];
inline bool TaskExecutionListRequest::_internal_has_sort_by() const {
  return this != internal_default_instance() && sort_by_ != nullptr;
}
inline bool TaskExecutionListRequest::has_sort_by() const {
  return _internal_has_sort_by();
}
inline const ::flyteidl::admin::Sort& TaskExecutionListRequest::_internal_sort_by() const {
  const ::flyteidl::admin::Sort* p = sort_by_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::Sort&>(
      ::flyteidl::admin::_Sort_default_instance_);
}
inline const ::flyteidl::admin::Sort& TaskExecutionListRequest::sort_by() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionListRequest.sort_by)
  return _internal_sort_by();
}
inline void TaskExecutionListRequest::unsafe_arena_set_allocated_sort_by(
    ::flyteidl::admin::Sort* sort_by) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sort_by_);
  }
  sort_by_ = sort_by;
  if (sort_by) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.TaskExecutionListRequest.sort_by)
}
inline ::flyteidl::admin::Sort* TaskExecutionListRequest::release_sort_by() {
  
  ::flyteidl::admin::Sort* temp = sort_by_;
  sort_by_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::Sort* TaskExecutionListRequest::unsafe_arena_release_sort_by() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionListRequest.sort_by)
  
  ::flyteidl::admin::Sort* temp = sort_by_;
  sort_by_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Sort* TaskExecutionListRequest::_internal_mutable_sort_by() {
  
  if (sort_by_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Sort>(GetArenaForAllocation());
    sort_by_ = p;
  }
  return sort_by_;
}
inline ::flyteidl::admin::Sort* TaskExecutionListRequest::mutable_sort_by() {
  ::flyteidl::admin::Sort* _msg = _internal_mutable_sort_by();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionListRequest.sort_by)
  return _msg;
}
inline void TaskExecutionListRequest::set_allocated_sort_by(::flyteidl::admin::Sort* sort_by) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sort_by_);
  }
  if (sort_by) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sort_by));
    if (message_arena != submessage_arena) {
      sort_by = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sort_by, submessage_arena);
    }
    
  } else {
    
  }
  sort_by_ = sort_by;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionListRequest.sort_by)
}

// -------------------------------------------------------------------

// TaskExecution

// .flyteidl.core.TaskExecutionIdentifier id = 1 [json_name = "id"];
inline bool TaskExecution::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool TaskExecution::has_id() const {
  return _internal_has_id();
}
inline const ::flyteidl::core::TaskExecutionIdentifier& TaskExecution::_internal_id() const {
  const ::flyteidl::core::TaskExecutionIdentifier* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::TaskExecutionIdentifier&>(
      ::flyteidl::core::_TaskExecutionIdentifier_default_instance_);
}
inline const ::flyteidl::core::TaskExecutionIdentifier& TaskExecution::id() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecution.id)
  return _internal_id();
}
inline void TaskExecution::unsafe_arena_set_allocated_id(
    ::flyteidl::core::TaskExecutionIdentifier* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.TaskExecution.id)
}
inline ::flyteidl::core::TaskExecutionIdentifier* TaskExecution::release_id() {
  
  ::flyteidl::core::TaskExecutionIdentifier* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::TaskExecutionIdentifier* TaskExecution::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecution.id)
  
  ::flyteidl::core::TaskExecutionIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::TaskExecutionIdentifier* TaskExecution::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::TaskExecutionIdentifier>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::flyteidl::core::TaskExecutionIdentifier* TaskExecution::mutable_id() {
  ::flyteidl::core::TaskExecutionIdentifier* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecution.id)
  return _msg;
}
inline void TaskExecution::set_allocated_id(::flyteidl::core::TaskExecutionIdentifier* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecution.id)
}

// string input_uri = 2 [json_name = "inputUri"];
inline void TaskExecution::clear_input_uri() {
  input_uri_.ClearToEmpty();
}
inline const std::string& TaskExecution::input_uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecution.input_uri)
  return _internal_input_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskExecution::set_input_uri(ArgT0&& arg0, ArgT... args) {
 
 input_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskExecution.input_uri)
}
inline std::string* TaskExecution::mutable_input_uri() {
  std::string* _s = _internal_mutable_input_uri();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecution.input_uri)
  return _s;
}
inline const std::string& TaskExecution::_internal_input_uri() const {
  return input_uri_.Get();
}
inline void TaskExecution::_internal_set_input_uri(const std::string& value) {
  
  input_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskExecution::_internal_mutable_input_uri() {
  
  return input_uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskExecution::release_input_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecution.input_uri)
  return input_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskExecution::set_allocated_input_uri(std::string* input_uri) {
  if (input_uri != nullptr) {
    
  } else {
    
  }
  input_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_uri,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (input_uri_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    input_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecution.input_uri)
}

// .flyteidl.admin.TaskExecutionClosure closure = 3 [json_name = "closure"];
inline bool TaskExecution::_internal_has_closure() const {
  return this != internal_default_instance() && closure_ != nullptr;
}
inline bool TaskExecution::has_closure() const {
  return _internal_has_closure();
}
inline void TaskExecution::clear_closure() {
  if (GetArenaForAllocation() == nullptr && closure_ != nullptr) {
    delete closure_;
  }
  closure_ = nullptr;
}
inline const ::flyteidl::admin::TaskExecutionClosure& TaskExecution::_internal_closure() const {
  const ::flyteidl::admin::TaskExecutionClosure* p = closure_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::TaskExecutionClosure&>(
      ::flyteidl::admin::_TaskExecutionClosure_default_instance_);
}
inline const ::flyteidl::admin::TaskExecutionClosure& TaskExecution::closure() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecution.closure)
  return _internal_closure();
}
inline void TaskExecution::unsafe_arena_set_allocated_closure(
    ::flyteidl::admin::TaskExecutionClosure* closure) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(closure_);
  }
  closure_ = closure;
  if (closure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.TaskExecution.closure)
}
inline ::flyteidl::admin::TaskExecutionClosure* TaskExecution::release_closure() {
  
  ::flyteidl::admin::TaskExecutionClosure* temp = closure_;
  closure_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::TaskExecutionClosure* TaskExecution::unsafe_arena_release_closure() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecution.closure)
  
  ::flyteidl::admin::TaskExecutionClosure* temp = closure_;
  closure_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::TaskExecutionClosure* TaskExecution::_internal_mutable_closure() {
  
  if (closure_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::TaskExecutionClosure>(GetArenaForAllocation());
    closure_ = p;
  }
  return closure_;
}
inline ::flyteidl::admin::TaskExecutionClosure* TaskExecution::mutable_closure() {
  ::flyteidl::admin::TaskExecutionClosure* _msg = _internal_mutable_closure();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecution.closure)
  return _msg;
}
inline void TaskExecution::set_allocated_closure(::flyteidl::admin::TaskExecutionClosure* closure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete closure_;
  }
  if (closure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::TaskExecutionClosure>::GetOwningArena(closure);
    if (message_arena != submessage_arena) {
      closure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, closure, submessage_arena);
    }
    
  } else {
    
  }
  closure_ = closure;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecution.closure)
}

// bool is_parent = 4 [json_name = "isParent"];
inline void TaskExecution::clear_is_parent() {
  is_parent_ = false;
}
inline bool TaskExecution::_internal_is_parent() const {
  return is_parent_;
}
inline bool TaskExecution::is_parent() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecution.is_parent)
  return _internal_is_parent();
}
inline void TaskExecution::_internal_set_is_parent(bool value) {
  
  is_parent_ = value;
}
inline void TaskExecution::set_is_parent(bool value) {
  _internal_set_is_parent(value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskExecution.is_parent)
}

// -------------------------------------------------------------------

// TaskExecutionList

// repeated .flyteidl.admin.TaskExecution task_executions = 1 [json_name = "taskExecutions"];
inline int TaskExecutionList::_internal_task_executions_size() const {
  return task_executions_.size();
}
inline int TaskExecutionList::task_executions_size() const {
  return _internal_task_executions_size();
}
inline void TaskExecutionList::clear_task_executions() {
  task_executions_.Clear();
}
inline ::flyteidl::admin::TaskExecution* TaskExecutionList::mutable_task_executions(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionList.task_executions)
  return task_executions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::TaskExecution >*
TaskExecutionList::mutable_task_executions() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.TaskExecutionList.task_executions)
  return &task_executions_;
}
inline const ::flyteidl::admin::TaskExecution& TaskExecutionList::_internal_task_executions(int index) const {
  return task_executions_.Get(index);
}
inline const ::flyteidl::admin::TaskExecution& TaskExecutionList::task_executions(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionList.task_executions)
  return _internal_task_executions(index);
}
inline ::flyteidl::admin::TaskExecution* TaskExecutionList::_internal_add_task_executions() {
  return task_executions_.Add();
}
inline ::flyteidl::admin::TaskExecution* TaskExecutionList::add_task_executions() {
  ::flyteidl::admin::TaskExecution* _add = _internal_add_task_executions();
  // @@protoc_insertion_point(field_add:flyteidl.admin.TaskExecutionList.task_executions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::TaskExecution >&
TaskExecutionList::task_executions() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.TaskExecutionList.task_executions)
  return task_executions_;
}

// string token = 2 [json_name = "token"];
inline void TaskExecutionList::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& TaskExecutionList::token() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionList.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskExecutionList::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskExecutionList.token)
}
inline std::string* TaskExecutionList::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionList.token)
  return _s;
}
inline const std::string& TaskExecutionList::_internal_token() const {
  return token_.Get();
}
inline void TaskExecutionList::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskExecutionList::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskExecutionList::release_token() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionList.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskExecutionList::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionList.token)
}

// -------------------------------------------------------------------

// TaskExecutionClosure

// string output_uri = 1 [json_name = "outputUri", deprecated = true];
inline bool TaskExecutionClosure::_internal_has_output_uri() const {
  return output_result_case() == kOutputUri;
}
inline bool TaskExecutionClosure::has_output_uri() const {
  return _internal_has_output_uri();
}
inline void TaskExecutionClosure::set_has_output_uri() {
  _oneof_case_[0] = kOutputUri;
}
inline void TaskExecutionClosure::clear_output_uri() {
  if (_internal_has_output_uri()) {
    output_result_.output_uri_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_output_result();
  }
}
inline const std::string& TaskExecutionClosure::output_uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.output_uri)
  return _internal_output_uri();
}
template <typename ArgT0, typename... ArgT>
inline void TaskExecutionClosure::set_output_uri(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskExecutionClosure.output_uri)
}
inline std::string* TaskExecutionClosure::mutable_output_uri() {
  std::string* _s = _internal_mutable_output_uri();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionClosure.output_uri)
  return _s;
}
inline const std::string& TaskExecutionClosure::_internal_output_uri() const {
  if (_internal_has_output_uri()) {
    return output_result_.output_uri_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TaskExecutionClosure::_internal_set_output_uri(const std::string& value) {
  if (!_internal_has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskExecutionClosure::_internal_mutable_output_uri() {
  if (!_internal_has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return output_result_.output_uri_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskExecutionClosure::release_output_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionClosure.output_uri)
  if (_internal_has_output_uri()) {
    clear_has_output_result();
    return output_result_.output_uri_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void TaskExecutionClosure::set_allocated_output_uri(std::string* output_uri) {
  if (has_output_result()) {
    clear_output_result();
  }
  if (output_uri != nullptr) {
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(output_uri);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(output_uri);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionClosure.output_uri)
}

// .flyteidl.core.ExecutionError error = 2 [json_name = "error"];
inline bool TaskExecutionClosure::_internal_has_error() const {
  return output_result_case() == kError;
}
inline bool TaskExecutionClosure::has_error() const {
  return _internal_has_error();
}
inline void TaskExecutionClosure::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::flyteidl::core::ExecutionError* TaskExecutionClosure::release_error() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionClosure.error)
  if (_internal_has_error()) {
    clear_has_output_result();
      ::flyteidl::core::ExecutionError* temp = output_result_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    output_result_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::ExecutionError& TaskExecutionClosure::_internal_error() const {
  return _internal_has_error()
      ? *output_result_.error_
      : reinterpret_cast< ::flyteidl::core::ExecutionError&>(::flyteidl::core::_ExecutionError_default_instance_);
}
inline const ::flyteidl::core::ExecutionError& TaskExecutionClosure::error() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.error)
  return _internal_error();
}
inline ::flyteidl::core::ExecutionError* TaskExecutionClosure::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.admin.TaskExecutionClosure.error)
  if (_internal_has_error()) {
    clear_has_output_result();
    ::flyteidl::core::ExecutionError* temp = output_result_.error_;
    output_result_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskExecutionClosure::unsafe_arena_set_allocated_error(::flyteidl::core::ExecutionError* error) {
  clear_output_result();
  if (error) {
    set_has_error();
    output_result_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.TaskExecutionClosure.error)
}
inline ::flyteidl::core::ExecutionError* TaskExecutionClosure::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_output_result();
    set_has_error();
    output_result_.error_ = CreateMaybeMessage< ::flyteidl::core::ExecutionError >(GetArenaForAllocation());
  }
  return output_result_.error_;
}
inline ::flyteidl::core::ExecutionError* TaskExecutionClosure::mutable_error() {
  ::flyteidl::core::ExecutionError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionClosure.error)
  return _msg;
}

// .flyteidl.core.LiteralMap output_data = 12 [json_name = "outputData", deprecated = true];
inline bool TaskExecutionClosure::_internal_has_output_data() const {
  return output_result_case() == kOutputData;
}
inline bool TaskExecutionClosure::has_output_data() const {
  return _internal_has_output_data();
}
inline void TaskExecutionClosure::set_has_output_data() {
  _oneof_case_[0] = kOutputData;
}
inline ::flyteidl::core::LiteralMap* TaskExecutionClosure::release_output_data() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionClosure.output_data)
  if (_internal_has_output_data()) {
    clear_has_output_result();
      ::flyteidl::core::LiteralMap* temp = output_result_.output_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    output_result_.output_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::LiteralMap& TaskExecutionClosure::_internal_output_data() const {
  return _internal_has_output_data()
      ? *output_result_.output_data_
      : reinterpret_cast< ::flyteidl::core::LiteralMap&>(::flyteidl::core::_LiteralMap_default_instance_);
}
inline const ::flyteidl::core::LiteralMap& TaskExecutionClosure::output_data() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.output_data)
  return _internal_output_data();
}
inline ::flyteidl::core::LiteralMap* TaskExecutionClosure::unsafe_arena_release_output_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.admin.TaskExecutionClosure.output_data)
  if (_internal_has_output_data()) {
    clear_has_output_result();
    ::flyteidl::core::LiteralMap* temp = output_result_.output_data_;
    output_result_.output_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskExecutionClosure::unsafe_arena_set_allocated_output_data(::flyteidl::core::LiteralMap* output_data) {
  clear_output_result();
  if (output_data) {
    set_has_output_data();
    output_result_.output_data_ = output_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.TaskExecutionClosure.output_data)
}
inline ::flyteidl::core::LiteralMap* TaskExecutionClosure::_internal_mutable_output_data() {
  if (!_internal_has_output_data()) {
    clear_output_result();
    set_has_output_data();
    output_result_.output_data_ = CreateMaybeMessage< ::flyteidl::core::LiteralMap >(GetArenaForAllocation());
  }
  return output_result_.output_data_;
}
inline ::flyteidl::core::LiteralMap* TaskExecutionClosure::mutable_output_data() {
  ::flyteidl::core::LiteralMap* _msg = _internal_mutable_output_data();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionClosure.output_data)
  return _msg;
}

// .flyteidl.core.TaskExecution.Phase phase = 3 [json_name = "phase"];
inline void TaskExecutionClosure::clear_phase() {
  phase_ = 0;
}
inline ::flyteidl::core::TaskExecution_Phase TaskExecutionClosure::_internal_phase() const {
  return static_cast< ::flyteidl::core::TaskExecution_Phase >(phase_);
}
inline ::flyteidl::core::TaskExecution_Phase TaskExecutionClosure::phase() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.phase)
  return _internal_phase();
}
inline void TaskExecutionClosure::_internal_set_phase(::flyteidl::core::TaskExecution_Phase value) {
  
  phase_ = value;
}
inline void TaskExecutionClosure::set_phase(::flyteidl::core::TaskExecution_Phase value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskExecutionClosure.phase)
}

// repeated .flyteidl.core.TaskLog logs = 4 [json_name = "logs"];
inline int TaskExecutionClosure::_internal_logs_size() const {
  return logs_.size();
}
inline int TaskExecutionClosure::logs_size() const {
  return _internal_logs_size();
}
inline ::flyteidl::core::TaskLog* TaskExecutionClosure::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionClosure.logs)
  return logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::TaskLog >*
TaskExecutionClosure::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.TaskExecutionClosure.logs)
  return &logs_;
}
inline const ::flyteidl::core::TaskLog& TaskExecutionClosure::_internal_logs(int index) const {
  return logs_.Get(index);
}
inline const ::flyteidl::core::TaskLog& TaskExecutionClosure::logs(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.logs)
  return _internal_logs(index);
}
inline ::flyteidl::core::TaskLog* TaskExecutionClosure::_internal_add_logs() {
  return logs_.Add();
}
inline ::flyteidl::core::TaskLog* TaskExecutionClosure::add_logs() {
  ::flyteidl::core::TaskLog* _add = _internal_add_logs();
  // @@protoc_insertion_point(field_add:flyteidl.admin.TaskExecutionClosure.logs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::TaskLog >&
TaskExecutionClosure::logs() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.TaskExecutionClosure.logs)
  return logs_;
}

// .google.protobuf.Timestamp started_at = 5 [json_name = "startedAt"];
inline bool TaskExecutionClosure::_internal_has_started_at() const {
  return this != internal_default_instance() && started_at_ != nullptr;
}
inline bool TaskExecutionClosure::has_started_at() const {
  return _internal_has_started_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TaskExecutionClosure::_internal_started_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = started_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TaskExecutionClosure::started_at() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.started_at)
  return _internal_started_at();
}
inline void TaskExecutionClosure::unsafe_arena_set_allocated_started_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* started_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_at_);
  }
  started_at_ = started_at;
  if (started_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.TaskExecutionClosure.started_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TaskExecutionClosure::release_started_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = started_at_;
  started_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TaskExecutionClosure::unsafe_arena_release_started_at() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionClosure.started_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = started_at_;
  started_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TaskExecutionClosure::_internal_mutable_started_at() {
  
  if (started_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    started_at_ = p;
  }
  return started_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TaskExecutionClosure::mutable_started_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_started_at();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionClosure.started_at)
  return _msg;
}
inline void TaskExecutionClosure::set_allocated_started_at(::PROTOBUF_NAMESPACE_ID::Timestamp* started_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_at_);
  }
  if (started_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_at));
    if (message_arena != submessage_arena) {
      started_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, started_at, submessage_arena);
    }
    
  } else {
    
  }
  started_at_ = started_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionClosure.started_at)
}

// .google.protobuf.Duration duration = 6 [json_name = "duration"];
inline bool TaskExecutionClosure::_internal_has_duration() const {
  return this != internal_default_instance() && duration_ != nullptr;
}
inline bool TaskExecutionClosure::has_duration() const {
  return _internal_has_duration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& TaskExecutionClosure::_internal_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& TaskExecutionClosure::duration() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.duration)
  return _internal_duration();
}
inline void TaskExecutionClosure::unsafe_arena_set_allocated_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  duration_ = duration;
  if (duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.TaskExecutionClosure.duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TaskExecutionClosure::release_duration() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TaskExecutionClosure::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionClosure.duration)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TaskExecutionClosure::_internal_mutable_duration() {
  
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    duration_ = p;
  }
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TaskExecutionClosure::mutable_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_duration();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionClosure.duration)
  return _msg;
}
inline void TaskExecutionClosure::set_allocated_duration(::PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration));
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionClosure.duration)
}

// .google.protobuf.Timestamp created_at = 7 [json_name = "createdAt"];
inline bool TaskExecutionClosure::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool TaskExecutionClosure::has_created_at() const {
  return _internal_has_created_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TaskExecutionClosure::_internal_created_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TaskExecutionClosure::created_at() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.created_at)
  return _internal_created_at();
}
inline void TaskExecutionClosure::unsafe_arena_set_allocated_created_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.TaskExecutionClosure.created_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TaskExecutionClosure::release_created_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TaskExecutionClosure::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionClosure.created_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TaskExecutionClosure::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    created_at_ = p;
  }
  return created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TaskExecutionClosure::mutable_created_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionClosure.created_at)
  return _msg;
}
inline void TaskExecutionClosure::set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at));
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionClosure.created_at)
}

// .google.protobuf.Timestamp updated_at = 8 [json_name = "updatedAt"];
inline bool TaskExecutionClosure::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool TaskExecutionClosure::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TaskExecutionClosure::_internal_updated_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TaskExecutionClosure::updated_at() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.updated_at)
  return _internal_updated_at();
}
inline void TaskExecutionClosure::unsafe_arena_set_allocated_updated_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.TaskExecutionClosure.updated_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TaskExecutionClosure::release_updated_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TaskExecutionClosure::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionClosure.updated_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TaskExecutionClosure::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    updated_at_ = p;
  }
  return updated_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TaskExecutionClosure::mutable_updated_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionClosure.updated_at)
  return _msg;
}
inline void TaskExecutionClosure::set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at));
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionClosure.updated_at)
}

// .google.protobuf.Struct custom_info = 9 [json_name = "customInfo"];
inline bool TaskExecutionClosure::_internal_has_custom_info() const {
  return this != internal_default_instance() && custom_info_ != nullptr;
}
inline bool TaskExecutionClosure::has_custom_info() const {
  return _internal_has_custom_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& TaskExecutionClosure::_internal_custom_info() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = custom_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& TaskExecutionClosure::custom_info() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.custom_info)
  return _internal_custom_info();
}
inline void TaskExecutionClosure::unsafe_arena_set_allocated_custom_info(
    ::PROTOBUF_NAMESPACE_ID::Struct* custom_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_info_);
  }
  custom_info_ = custom_info;
  if (custom_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.TaskExecutionClosure.custom_info)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TaskExecutionClosure::release_custom_info() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = custom_info_;
  custom_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TaskExecutionClosure::unsafe_arena_release_custom_info() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionClosure.custom_info)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = custom_info_;
  custom_info_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TaskExecutionClosure::_internal_mutable_custom_info() {
  
  if (custom_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    custom_info_ = p;
  }
  return custom_info_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TaskExecutionClosure::mutable_custom_info() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_custom_info();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionClosure.custom_info)
  return _msg;
}
inline void TaskExecutionClosure::set_allocated_custom_info(::PROTOBUF_NAMESPACE_ID::Struct* custom_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_info_);
  }
  if (custom_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_info));
    if (message_arena != submessage_arena) {
      custom_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_info, submessage_arena);
    }
    
  } else {
    
  }
  custom_info_ = custom_info;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionClosure.custom_info)
}

// string reason = 10 [json_name = "reason"];
inline void TaskExecutionClosure::clear_reason() {
  reason_.ClearToEmpty();
}
inline const std::string& TaskExecutionClosure::reason() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskExecutionClosure::set_reason(ArgT0&& arg0, ArgT... args) {
 
 reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskExecutionClosure.reason)
}
inline std::string* TaskExecutionClosure::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionClosure.reason)
  return _s;
}
inline const std::string& TaskExecutionClosure::_internal_reason() const {
  return reason_.Get();
}
inline void TaskExecutionClosure::_internal_set_reason(const std::string& value) {
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskExecutionClosure::_internal_mutable_reason() {
  
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskExecutionClosure::release_reason() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionClosure.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskExecutionClosure::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reason_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionClosure.reason)
}

// string task_type = 11 [json_name = "taskType"];
inline void TaskExecutionClosure::clear_task_type() {
  task_type_.ClearToEmpty();
}
inline const std::string& TaskExecutionClosure::task_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.task_type)
  return _internal_task_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskExecutionClosure::set_task_type(ArgT0&& arg0, ArgT... args) {
 
 task_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskExecutionClosure.task_type)
}
inline std::string* TaskExecutionClosure::mutable_task_type() {
  std::string* _s = _internal_mutable_task_type();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionClosure.task_type)
  return _s;
}
inline const std::string& TaskExecutionClosure::_internal_task_type() const {
  return task_type_.Get();
}
inline void TaskExecutionClosure::_internal_set_task_type(const std::string& value) {
  
  task_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskExecutionClosure::_internal_mutable_task_type() {
  
  return task_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskExecutionClosure::release_task_type() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionClosure.task_type)
  return task_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskExecutionClosure::set_allocated_task_type(std::string* task_type) {
  if (task_type != nullptr) {
    
  } else {
    
  }
  task_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (task_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    task_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionClosure.task_type)
}

// .flyteidl.event.TaskExecutionMetadata metadata = 16 [json_name = "metadata"];
inline bool TaskExecutionClosure::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool TaskExecutionClosure::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::flyteidl::event::TaskExecutionMetadata& TaskExecutionClosure::_internal_metadata() const {
  const ::flyteidl::event::TaskExecutionMetadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::event::TaskExecutionMetadata&>(
      ::flyteidl::event::_TaskExecutionMetadata_default_instance_);
}
inline const ::flyteidl::event::TaskExecutionMetadata& TaskExecutionClosure::metadata() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.metadata)
  return _internal_metadata();
}
inline void TaskExecutionClosure::unsafe_arena_set_allocated_metadata(
    ::flyteidl::event::TaskExecutionMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.TaskExecutionClosure.metadata)
}
inline ::flyteidl::event::TaskExecutionMetadata* TaskExecutionClosure::release_metadata() {
  
  ::flyteidl::event::TaskExecutionMetadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::event::TaskExecutionMetadata* TaskExecutionClosure::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionClosure.metadata)
  
  ::flyteidl::event::TaskExecutionMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::flyteidl::event::TaskExecutionMetadata* TaskExecutionClosure::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::event::TaskExecutionMetadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::flyteidl::event::TaskExecutionMetadata* TaskExecutionClosure::mutable_metadata() {
  ::flyteidl::event::TaskExecutionMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionClosure.metadata)
  return _msg;
}
inline void TaskExecutionClosure::set_allocated_metadata(::flyteidl::event::TaskExecutionMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata));
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionClosure.metadata)
}

// int32 event_version = 17 [json_name = "eventVersion"];
inline void TaskExecutionClosure::clear_event_version() {
  event_version_ = 0;
}
inline int32_t TaskExecutionClosure::_internal_event_version() const {
  return event_version_;
}
inline int32_t TaskExecutionClosure::event_version() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.event_version)
  return _internal_event_version();
}
inline void TaskExecutionClosure::_internal_set_event_version(int32_t value) {
  
  event_version_ = value;
}
inline void TaskExecutionClosure::set_event_version(int32_t value) {
  _internal_set_event_version(value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskExecutionClosure.event_version)
}

inline bool TaskExecutionClosure::has_output_result() const {
  return output_result_case() != OUTPUT_RESULT_NOT_SET;
}
inline void TaskExecutionClosure::clear_has_output_result() {
  _oneof_case_[0] = OUTPUT_RESULT_NOT_SET;
}
inline TaskExecutionClosure::OutputResultCase TaskExecutionClosure::output_result_case() const {
  return TaskExecutionClosure::OutputResultCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TaskExecutionGetDataRequest

// .flyteidl.core.TaskExecutionIdentifier id = 1 [json_name = "id"];
inline bool TaskExecutionGetDataRequest::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool TaskExecutionGetDataRequest::has_id() const {
  return _internal_has_id();
}
inline const ::flyteidl::core::TaskExecutionIdentifier& TaskExecutionGetDataRequest::_internal_id() const {
  const ::flyteidl::core::TaskExecutionIdentifier* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::TaskExecutionIdentifier&>(
      ::flyteidl::core::_TaskExecutionIdentifier_default_instance_);
}
inline const ::flyteidl::core::TaskExecutionIdentifier& TaskExecutionGetDataRequest::id() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionGetDataRequest.id)
  return _internal_id();
}
inline void TaskExecutionGetDataRequest::unsafe_arena_set_allocated_id(
    ::flyteidl::core::TaskExecutionIdentifier* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.TaskExecutionGetDataRequest.id)
}
inline ::flyteidl::core::TaskExecutionIdentifier* TaskExecutionGetDataRequest::release_id() {
  
  ::flyteidl::core::TaskExecutionIdentifier* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::TaskExecutionIdentifier* TaskExecutionGetDataRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionGetDataRequest.id)
  
  ::flyteidl::core::TaskExecutionIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::TaskExecutionIdentifier* TaskExecutionGetDataRequest::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::TaskExecutionIdentifier>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::flyteidl::core::TaskExecutionIdentifier* TaskExecutionGetDataRequest::mutable_id() {
  ::flyteidl::core::TaskExecutionIdentifier* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionGetDataRequest.id)
  return _msg;
}
inline void TaskExecutionGetDataRequest::set_allocated_id(::flyteidl::core::TaskExecutionIdentifier* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionGetDataRequest.id)
}

// -------------------------------------------------------------------

// TaskExecutionGetDataResponse

// .flyteidl.admin.UrlBlob inputs = 1 [json_name = "inputs", deprecated = true];
inline bool TaskExecutionGetDataResponse::_internal_has_inputs() const {
  return this != internal_default_instance() && inputs_ != nullptr;
}
inline bool TaskExecutionGetDataResponse::has_inputs() const {
  return _internal_has_inputs();
}
inline const ::flyteidl::admin::UrlBlob& TaskExecutionGetDataResponse::_internal_inputs() const {
  const ::flyteidl::admin::UrlBlob* p = inputs_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::UrlBlob&>(
      ::flyteidl::admin::_UrlBlob_default_instance_);
}
inline const ::flyteidl::admin::UrlBlob& TaskExecutionGetDataResponse::inputs() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionGetDataResponse.inputs)
  return _internal_inputs();
}
inline void TaskExecutionGetDataResponse::unsafe_arena_set_allocated_inputs(
    ::flyteidl::admin::UrlBlob* inputs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inputs_);
  }
  inputs_ = inputs;
  if (inputs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.TaskExecutionGetDataResponse.inputs)
}
inline ::flyteidl::admin::UrlBlob* TaskExecutionGetDataResponse::release_inputs() {
  
  ::flyteidl::admin::UrlBlob* temp = inputs_;
  inputs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::UrlBlob* TaskExecutionGetDataResponse::unsafe_arena_release_inputs() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionGetDataResponse.inputs)
  
  ::flyteidl::admin::UrlBlob* temp = inputs_;
  inputs_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::UrlBlob* TaskExecutionGetDataResponse::_internal_mutable_inputs() {
  
  if (inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::UrlBlob>(GetArenaForAllocation());
    inputs_ = p;
  }
  return inputs_;
}
inline ::flyteidl::admin::UrlBlob* TaskExecutionGetDataResponse::mutable_inputs() {
  ::flyteidl::admin::UrlBlob* _msg = _internal_mutable_inputs();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionGetDataResponse.inputs)
  return _msg;
}
inline void TaskExecutionGetDataResponse::set_allocated_inputs(::flyteidl::admin::UrlBlob* inputs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inputs_);
  }
  if (inputs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inputs));
    if (message_arena != submessage_arena) {
      inputs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inputs, submessage_arena);
    }
    
  } else {
    
  }
  inputs_ = inputs;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionGetDataResponse.inputs)
}

// .flyteidl.admin.UrlBlob outputs = 2 [json_name = "outputs", deprecated = true];
inline bool TaskExecutionGetDataResponse::_internal_has_outputs() const {
  return this != internal_default_instance() && outputs_ != nullptr;
}
inline bool TaskExecutionGetDataResponse::has_outputs() const {
  return _internal_has_outputs();
}
inline const ::flyteidl::admin::UrlBlob& TaskExecutionGetDataResponse::_internal_outputs() const {
  const ::flyteidl::admin::UrlBlob* p = outputs_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::UrlBlob&>(
      ::flyteidl::admin::_UrlBlob_default_instance_);
}
inline const ::flyteidl::admin::UrlBlob& TaskExecutionGetDataResponse::outputs() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionGetDataResponse.outputs)
  return _internal_outputs();
}
inline void TaskExecutionGetDataResponse::unsafe_arena_set_allocated_outputs(
    ::flyteidl::admin::UrlBlob* outputs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(outputs_);
  }
  outputs_ = outputs;
  if (outputs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.TaskExecutionGetDataResponse.outputs)
}
inline ::flyteidl::admin::UrlBlob* TaskExecutionGetDataResponse::release_outputs() {
  
  ::flyteidl::admin::UrlBlob* temp = outputs_;
  outputs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::UrlBlob* TaskExecutionGetDataResponse::unsafe_arena_release_outputs() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionGetDataResponse.outputs)
  
  ::flyteidl::admin::UrlBlob* temp = outputs_;
  outputs_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::UrlBlob* TaskExecutionGetDataResponse::_internal_mutable_outputs() {
  
  if (outputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::UrlBlob>(GetArenaForAllocation());
    outputs_ = p;
  }
  return outputs_;
}
inline ::flyteidl::admin::UrlBlob* TaskExecutionGetDataResponse::mutable_outputs() {
  ::flyteidl::admin::UrlBlob* _msg = _internal_mutable_outputs();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionGetDataResponse.outputs)
  return _msg;
}
inline void TaskExecutionGetDataResponse::set_allocated_outputs(::flyteidl::admin::UrlBlob* outputs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(outputs_);
  }
  if (outputs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(outputs));
    if (message_arena != submessage_arena) {
      outputs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outputs, submessage_arena);
    }
    
  } else {
    
  }
  outputs_ = outputs;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionGetDataResponse.outputs)
}

// .flyteidl.core.LiteralMap full_inputs = 3 [json_name = "fullInputs"];
inline bool TaskExecutionGetDataResponse::_internal_has_full_inputs() const {
  return this != internal_default_instance() && full_inputs_ != nullptr;
}
inline bool TaskExecutionGetDataResponse::has_full_inputs() const {
  return _internal_has_full_inputs();
}
inline const ::flyteidl::core::LiteralMap& TaskExecutionGetDataResponse::_internal_full_inputs() const {
  const ::flyteidl::core::LiteralMap* p = full_inputs_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::LiteralMap&>(
      ::flyteidl::core::_LiteralMap_default_instance_);
}
inline const ::flyteidl::core::LiteralMap& TaskExecutionGetDataResponse::full_inputs() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionGetDataResponse.full_inputs)
  return _internal_full_inputs();
}
inline void TaskExecutionGetDataResponse::unsafe_arena_set_allocated_full_inputs(
    ::flyteidl::core::LiteralMap* full_inputs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(full_inputs_);
  }
  full_inputs_ = full_inputs;
  if (full_inputs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.TaskExecutionGetDataResponse.full_inputs)
}
inline ::flyteidl::core::LiteralMap* TaskExecutionGetDataResponse::release_full_inputs() {
  
  ::flyteidl::core::LiteralMap* temp = full_inputs_;
  full_inputs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::LiteralMap* TaskExecutionGetDataResponse::unsafe_arena_release_full_inputs() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionGetDataResponse.full_inputs)
  
  ::flyteidl::core::LiteralMap* temp = full_inputs_;
  full_inputs_ = nullptr;
  return temp;
}
inline ::flyteidl::core::LiteralMap* TaskExecutionGetDataResponse::_internal_mutable_full_inputs() {
  
  if (full_inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::LiteralMap>(GetArenaForAllocation());
    full_inputs_ = p;
  }
  return full_inputs_;
}
inline ::flyteidl::core::LiteralMap* TaskExecutionGetDataResponse::mutable_full_inputs() {
  ::flyteidl::core::LiteralMap* _msg = _internal_mutable_full_inputs();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionGetDataResponse.full_inputs)
  return _msg;
}
inline void TaskExecutionGetDataResponse::set_allocated_full_inputs(::flyteidl::core::LiteralMap* full_inputs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(full_inputs_);
  }
  if (full_inputs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(full_inputs));
    if (message_arena != submessage_arena) {
      full_inputs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, full_inputs, submessage_arena);
    }
    
  } else {
    
  }
  full_inputs_ = full_inputs;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionGetDataResponse.full_inputs)
}

// .flyteidl.core.LiteralMap full_outputs = 4 [json_name = "fullOutputs"];
inline bool TaskExecutionGetDataResponse::_internal_has_full_outputs() const {
  return this != internal_default_instance() && full_outputs_ != nullptr;
}
inline bool TaskExecutionGetDataResponse::has_full_outputs() const {
  return _internal_has_full_outputs();
}
inline const ::flyteidl::core::LiteralMap& TaskExecutionGetDataResponse::_internal_full_outputs() const {
  const ::flyteidl::core::LiteralMap* p = full_outputs_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::LiteralMap&>(
      ::flyteidl::core::_LiteralMap_default_instance_);
}
inline const ::flyteidl::core::LiteralMap& TaskExecutionGetDataResponse::full_outputs() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionGetDataResponse.full_outputs)
  return _internal_full_outputs();
}
inline void TaskExecutionGetDataResponse::unsafe_arena_set_allocated_full_outputs(
    ::flyteidl::core::LiteralMap* full_outputs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(full_outputs_);
  }
  full_outputs_ = full_outputs;
  if (full_outputs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.TaskExecutionGetDataResponse.full_outputs)
}
inline ::flyteidl::core::LiteralMap* TaskExecutionGetDataResponse::release_full_outputs() {
  
  ::flyteidl::core::LiteralMap* temp = full_outputs_;
  full_outputs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::LiteralMap* TaskExecutionGetDataResponse::unsafe_arena_release_full_outputs() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionGetDataResponse.full_outputs)
  
  ::flyteidl::core::LiteralMap* temp = full_outputs_;
  full_outputs_ = nullptr;
  return temp;
}
inline ::flyteidl::core::LiteralMap* TaskExecutionGetDataResponse::_internal_mutable_full_outputs() {
  
  if (full_outputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::LiteralMap>(GetArenaForAllocation());
    full_outputs_ = p;
  }
  return full_outputs_;
}
inline ::flyteidl::core::LiteralMap* TaskExecutionGetDataResponse::mutable_full_outputs() {
  ::flyteidl::core::LiteralMap* _msg = _internal_mutable_full_outputs();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionGetDataResponse.full_outputs)
  return _msg;
}
inline void TaskExecutionGetDataResponse::set_allocated_full_outputs(::flyteidl::core::LiteralMap* full_outputs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(full_outputs_);
  }
  if (full_outputs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(full_outputs));
    if (message_arena != submessage_arena) {
      full_outputs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, full_outputs, submessage_arena);
    }
    
  } else {
    
  }
  full_outputs_ = full_outputs;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionGetDataResponse.full_outputs)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2ftask_5fexecution_2eproto
