// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/workflow_closure.proto

#include "flyteidl/core/workflow_closure.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace core {
constexpr WorkflowClosure::WorkflowClosure(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tasks_()
  , workflow_(nullptr){}
struct WorkflowClosureDefaultTypeInternal {
  constexpr WorkflowClosureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowClosureDefaultTypeInternal() {}
  union {
    WorkflowClosure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowClosureDefaultTypeInternal _WorkflowClosure_default_instance_;
}  // namespace core
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fcore_2fworkflow_5fclosure_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fcore_2fworkflow_5fclosure_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fcore_2fworkflow_5fclosure_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fcore_2fworkflow_5fclosure_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowClosure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowClosure, workflow_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowClosure, tasks_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::core::WorkflowClosure)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_WorkflowClosure_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fcore_2fworkflow_5fclosure_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$flyteidl/core/workflow_closure.proto\022\r"
  "flyteidl.core\032\034flyteidl/core/workflow.pr"
  "oto\032\031flyteidl/core/tasks.proto\"\201\001\n\017Workf"
  "lowClosure\022;\n\010workflow\030\001 \001(\0132\037.flyteidl."
  "core.WorkflowTemplateR\010workflow\0221\n\005tasks"
  "\030\002 \003(\0132\033.flyteidl.core.TaskTemplateR\005tas"
  "ksB\267\001\n\021com.flyteidl.coreB\024WorkflowClosur"
  "eProtoH\002Z4github.com/flyteorg/flyteidl/g"
  "en/pb-go/flyteidl/core\370\001\000\242\002\003FCX\252\002\rFlytei"
  "dl.Core\312\002\rFlyteidl\\Core\342\002\031Flyteidl\\Core\\"
  "GPBMetadata\352\002\016Flyteidl::Coreb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flyteidl_2fcore_2fworkflow_5fclosure_2eproto_deps[2] = {
  &::descriptor_table_flyteidl_2fcore_2ftasks_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fworkflow_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fcore_2fworkflow_5fclosure_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fcore_2fworkflow_5fclosure_2eproto = {
  false, false, 436, descriptor_table_protodef_flyteidl_2fcore_2fworkflow_5fclosure_2eproto, "flyteidl/core/workflow_closure.proto", 
  &descriptor_table_flyteidl_2fcore_2fworkflow_5fclosure_2eproto_once, descriptor_table_flyteidl_2fcore_2fworkflow_5fclosure_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_flyteidl_2fcore_2fworkflow_5fclosure_2eproto::offsets,
  file_level_metadata_flyteidl_2fcore_2fworkflow_5fclosure_2eproto, file_level_enum_descriptors_flyteidl_2fcore_2fworkflow_5fclosure_2eproto, file_level_service_descriptors_flyteidl_2fcore_2fworkflow_5fclosure_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fcore_2fworkflow_5fclosure_2eproto_getter() {
  return &descriptor_table_flyteidl_2fcore_2fworkflow_5fclosure_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fcore_2fworkflow_5fclosure_2eproto(&descriptor_table_flyteidl_2fcore_2fworkflow_5fclosure_2eproto);
namespace flyteidl {
namespace core {

// ===================================================================

class WorkflowClosure::_Internal {
 public:
  static const ::flyteidl::core::WorkflowTemplate& workflow(const WorkflowClosure* msg);
};

const ::flyteidl::core::WorkflowTemplate&
WorkflowClosure::_Internal::workflow(const WorkflowClosure* msg) {
  return *msg->workflow_;
}
void WorkflowClosure::clear_workflow() {
  if (GetArenaForAllocation() == nullptr && workflow_ != nullptr) {
    delete workflow_;
  }
  workflow_ = nullptr;
}
void WorkflowClosure::clear_tasks() {
  tasks_.Clear();
}
WorkflowClosure::WorkflowClosure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tasks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.WorkflowClosure)
}
WorkflowClosure::WorkflowClosure(const WorkflowClosure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_workflow()) {
    workflow_ = new ::flyteidl::core::WorkflowTemplate(*from.workflow_);
  } else {
    workflow_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.WorkflowClosure)
}

inline void WorkflowClosure::SharedCtor() {
workflow_ = nullptr;
}

WorkflowClosure::~WorkflowClosure() {
  // @@protoc_insertion_point(destructor:flyteidl.core.WorkflowClosure)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkflowClosure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete workflow_;
}

void WorkflowClosure::ArenaDtor(void* object) {
  WorkflowClosure* _this = reinterpret_cast< WorkflowClosure* >(object);
  (void)_this;
}
void WorkflowClosure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkflowClosure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkflowClosure::InternalSwap(WorkflowClosure* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowClosure::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fworkflow_5fclosure_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fworkflow_5fclosure_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fworkflow_5fclosure_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::core::WorkflowClosure* Arena::CreateMaybeMessage< ::flyteidl::core::WorkflowClosure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::WorkflowClosure >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
