// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/task.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2ftask_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2ftask_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/identifier.pb.h"
#include "flyteidl/core/tasks.pb.h"
#include "flyteidl/core/compiler.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2ftask_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fadmin_2ftask_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2ftask_2eproto;
namespace flyteidl {
namespace admin {
class Task;
struct TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class TaskClosure;
struct TaskClosureDefaultTypeInternal;
extern TaskClosureDefaultTypeInternal _TaskClosure_default_instance_;
class TaskCreateRequest;
struct TaskCreateRequestDefaultTypeInternal;
extern TaskCreateRequestDefaultTypeInternal _TaskCreateRequest_default_instance_;
class TaskCreateResponse;
struct TaskCreateResponseDefaultTypeInternal;
extern TaskCreateResponseDefaultTypeInternal _TaskCreateResponse_default_instance_;
class TaskList;
struct TaskListDefaultTypeInternal;
extern TaskListDefaultTypeInternal _TaskList_default_instance_;
class TaskSpec;
struct TaskSpecDefaultTypeInternal;
extern TaskSpecDefaultTypeInternal _TaskSpec_default_instance_;
}  // namespace admin
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::admin::Task* Arena::CreateMaybeMessage<::flyteidl::admin::Task>(Arena*);
template<> ::flyteidl::admin::TaskClosure* Arena::CreateMaybeMessage<::flyteidl::admin::TaskClosure>(Arena*);
template<> ::flyteidl::admin::TaskCreateRequest* Arena::CreateMaybeMessage<::flyteidl::admin::TaskCreateRequest>(Arena*);
template<> ::flyteidl::admin::TaskCreateResponse* Arena::CreateMaybeMessage<::flyteidl::admin::TaskCreateResponse>(Arena*);
template<> ::flyteidl::admin::TaskList* Arena::CreateMaybeMessage<::flyteidl::admin::TaskList>(Arena*);
template<> ::flyteidl::admin::TaskSpec* Arena::CreateMaybeMessage<::flyteidl::admin::TaskSpec>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace admin {

// ===================================================================

class TaskCreateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskCreateRequest) */ {
 public:
  inline TaskCreateRequest() : TaskCreateRequest(nullptr) {}
  ~TaskCreateRequest() override;
  explicit constexpr TaskCreateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskCreateRequest(const TaskCreateRequest& from);
  TaskCreateRequest(TaskCreateRequest&& from) noexcept
    : TaskCreateRequest() {
    *this = ::std::move(from);
  }

  inline TaskCreateRequest& operator=(const TaskCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskCreateRequest& operator=(TaskCreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskCreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskCreateRequest* internal_default_instance() {
    return reinterpret_cast<const TaskCreateRequest*>(
               &_TaskCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TaskCreateRequest& a, TaskCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskCreateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskCreateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskCreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskCreateRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskCreateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.TaskCreateRequest";
  }
  protected:
  explicit TaskCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSpecFieldNumber = 2,
  };
  // .flyteidl.core.Identifier id = 1 [json_name = "id"];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::flyteidl::core::Identifier& id() const;
  PROTOBUF_NODISCARD ::flyteidl::core::Identifier* release_id();
  ::flyteidl::core::Identifier* mutable_id();
  void set_allocated_id(::flyteidl::core::Identifier* id);
  private:
  const ::flyteidl::core::Identifier& _internal_id() const;
  ::flyteidl::core::Identifier* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::flyteidl::core::Identifier* id);
  ::flyteidl::core::Identifier* unsafe_arena_release_id();

  // .flyteidl.admin.TaskSpec spec = 2 [json_name = "spec"];
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::flyteidl::admin::TaskSpec& spec() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::TaskSpec* release_spec();
  ::flyteidl::admin::TaskSpec* mutable_spec();
  void set_allocated_spec(::flyteidl::admin::TaskSpec* spec);
  private:
  const ::flyteidl::admin::TaskSpec& _internal_spec() const;
  ::flyteidl::admin::TaskSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::flyteidl::admin::TaskSpec* spec);
  ::flyteidl::admin::TaskSpec* unsafe_arena_release_spec();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskCreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::Identifier* id_;
  ::flyteidl::admin::TaskSpec* spec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2ftask_2eproto;
};
// -------------------------------------------------------------------

class TaskCreateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskCreateResponse) */ {
 public:
  inline TaskCreateResponse() : TaskCreateResponse(nullptr) {}
  explicit constexpr TaskCreateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskCreateResponse(const TaskCreateResponse& from);
  TaskCreateResponse(TaskCreateResponse&& from) noexcept
    : TaskCreateResponse() {
    *this = ::std::move(from);
  }

  inline TaskCreateResponse& operator=(const TaskCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskCreateResponse& operator=(TaskCreateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskCreateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskCreateResponse* internal_default_instance() {
    return reinterpret_cast<const TaskCreateResponse*>(
               &_TaskCreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TaskCreateResponse& a, TaskCreateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskCreateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskCreateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskCreateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskCreateResponse>(arena);
  }

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.TaskCreateResponse";
  }
  protected:
  explicit TaskCreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskCreateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2ftask_2eproto;
};
// -------------------------------------------------------------------

class Task final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Task) */ {
 public:
  inline Task() : Task(nullptr) {}
  ~Task() override;
  explicit constexpr Task(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Task(const Task& from);
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Task& default_instance() {
    return *internal_default_instance();
  }
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }
  inline void Swap(Task* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Task* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.Task";
  }
  protected:
  explicit Task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kClosureFieldNumber = 2,
  };
  // .flyteidl.core.Identifier id = 1 [json_name = "id"];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::flyteidl::core::Identifier& id() const;
  PROTOBUF_NODISCARD ::flyteidl::core::Identifier* release_id();
  ::flyteidl::core::Identifier* mutable_id();
  void set_allocated_id(::flyteidl::core::Identifier* id);
  private:
  const ::flyteidl::core::Identifier& _internal_id() const;
  ::flyteidl::core::Identifier* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::flyteidl::core::Identifier* id);
  ::flyteidl::core::Identifier* unsafe_arena_release_id();

  // .flyteidl.admin.TaskClosure closure = 2 [json_name = "closure"];
  bool has_closure() const;
  private:
  bool _internal_has_closure() const;
  public:
  void clear_closure();
  const ::flyteidl::admin::TaskClosure& closure() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::TaskClosure* release_closure();
  ::flyteidl::admin::TaskClosure* mutable_closure();
  void set_allocated_closure(::flyteidl::admin::TaskClosure* closure);
  private:
  const ::flyteidl::admin::TaskClosure& _internal_closure() const;
  ::flyteidl::admin::TaskClosure* _internal_mutable_closure();
  public:
  void unsafe_arena_set_allocated_closure(
      ::flyteidl::admin::TaskClosure* closure);
  ::flyteidl::admin::TaskClosure* unsafe_arena_release_closure();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Task)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::Identifier* id_;
  ::flyteidl::admin::TaskClosure* closure_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2ftask_2eproto;
};
// -------------------------------------------------------------------

class TaskList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskList) */ {
 public:
  inline TaskList() : TaskList(nullptr) {}
  ~TaskList() override;
  explicit constexpr TaskList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskList(const TaskList& from);
  TaskList(TaskList&& from) noexcept
    : TaskList() {
    *this = ::std::move(from);
  }

  inline TaskList& operator=(const TaskList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskList& operator=(TaskList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskList& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskList* internal_default_instance() {
    return reinterpret_cast<const TaskList*>(
               &_TaskList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TaskList& a, TaskList& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskList>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.TaskList";
  }
  protected:
  explicit TaskList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 1,
    kTokenFieldNumber = 2,
  };
  // repeated .flyteidl.admin.Task tasks = 1 [json_name = "tasks"];
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::flyteidl::admin::Task* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Task >*
      mutable_tasks();
  private:
  const ::flyteidl::admin::Task& _internal_tasks(int index) const;
  ::flyteidl::admin::Task* _internal_add_tasks();
  public:
  const ::flyteidl::admin::Task& tasks(int index) const;
  ::flyteidl::admin::Task* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Task >&
      tasks() const;

  // string token = 2 [json_name = "token"];
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Task > tasks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2ftask_2eproto;
};
// -------------------------------------------------------------------

class TaskSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskSpec) */ {
 public:
  inline TaskSpec() : TaskSpec(nullptr) {}
  ~TaskSpec() override;
  explicit constexpr TaskSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskSpec(const TaskSpec& from);
  TaskSpec(TaskSpec&& from) noexcept
    : TaskSpec() {
    *this = ::std::move(from);
  }

  inline TaskSpec& operator=(const TaskSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskSpec& operator=(TaskSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskSpec* internal_default_instance() {
    return reinterpret_cast<const TaskSpec*>(
               &_TaskSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TaskSpec& a, TaskSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskSpec>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.TaskSpec";
  }
  protected:
  explicit TaskSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTemplateFieldNumber = 1,
  };
  // .flyteidl.core.TaskTemplate template = 1 [json_name = "template"];
  bool has_template_() const;
  private:
  bool _internal_has_template_() const;
  public:
  void clear_template_();
  const ::flyteidl::core::TaskTemplate& template_() const;
  PROTOBUF_NODISCARD ::flyteidl::core::TaskTemplate* release_template_();
  ::flyteidl::core::TaskTemplate* mutable_template_();
  void set_allocated_template_(::flyteidl::core::TaskTemplate* template_);
  private:
  const ::flyteidl::core::TaskTemplate& _internal_template_() const;
  ::flyteidl::core::TaskTemplate* _internal_mutable_template_();
  public:
  void unsafe_arena_set_allocated_template_(
      ::flyteidl::core::TaskTemplate* template_);
  ::flyteidl::core::TaskTemplate* unsafe_arena_release_template_();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::TaskTemplate* template__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2ftask_2eproto;
};
// -------------------------------------------------------------------

class TaskClosure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskClosure) */ {
 public:
  inline TaskClosure() : TaskClosure(nullptr) {}
  ~TaskClosure() override;
  explicit constexpr TaskClosure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskClosure(const TaskClosure& from);
  TaskClosure(TaskClosure&& from) noexcept
    : TaskClosure() {
    *this = ::std::move(from);
  }

  inline TaskClosure& operator=(const TaskClosure& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskClosure& operator=(TaskClosure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskClosure& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskClosure* internal_default_instance() {
    return reinterpret_cast<const TaskClosure*>(
               &_TaskClosure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TaskClosure& a, TaskClosure& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskClosure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskClosure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskClosure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskClosure>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskClosure* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.TaskClosure";
  }
  protected:
  explicit TaskClosure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompiledTaskFieldNumber = 1,
    kCreatedAtFieldNumber = 2,
  };
  // .flyteidl.core.CompiledTask compiled_task = 1 [json_name = "compiledTask"];
  bool has_compiled_task() const;
  private:
  bool _internal_has_compiled_task() const;
  public:
  void clear_compiled_task();
  const ::flyteidl::core::CompiledTask& compiled_task() const;
  PROTOBUF_NODISCARD ::flyteidl::core::CompiledTask* release_compiled_task();
  ::flyteidl::core::CompiledTask* mutable_compiled_task();
  void set_allocated_compiled_task(::flyteidl::core::CompiledTask* compiled_task);
  private:
  const ::flyteidl::core::CompiledTask& _internal_compiled_task() const;
  ::flyteidl::core::CompiledTask* _internal_mutable_compiled_task();
  public:
  void unsafe_arena_set_allocated_compiled_task(
      ::flyteidl::core::CompiledTask* compiled_task);
  ::flyteidl::core::CompiledTask* unsafe_arena_release_compiled_task();

  // .google.protobuf.Timestamp created_at = 2 [json_name = "createdAt"];
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskClosure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::CompiledTask* compiled_task_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2ftask_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskCreateRequest

// .flyteidl.core.Identifier id = 1 [json_name = "id"];
inline bool TaskCreateRequest::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool TaskCreateRequest::has_id() const {
  return _internal_has_id();
}
inline const ::flyteidl::core::Identifier& TaskCreateRequest::_internal_id() const {
  const ::flyteidl::core::Identifier* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::Identifier&>(
      ::flyteidl::core::_Identifier_default_instance_);
}
inline const ::flyteidl::core::Identifier& TaskCreateRequest::id() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskCreateRequest.id)
  return _internal_id();
}
inline void TaskCreateRequest::unsafe_arena_set_allocated_id(
    ::flyteidl::core::Identifier* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.TaskCreateRequest.id)
}
inline ::flyteidl::core::Identifier* TaskCreateRequest::release_id() {
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::Identifier* TaskCreateRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskCreateRequest.id)
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identifier* TaskCreateRequest::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identifier>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::flyteidl::core::Identifier* TaskCreateRequest::mutable_id() {
  ::flyteidl::core::Identifier* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskCreateRequest.id)
  return _msg;
}
inline void TaskCreateRequest::set_allocated_id(::flyteidl::core::Identifier* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskCreateRequest.id)
}

// .flyteidl.admin.TaskSpec spec = 2 [json_name = "spec"];
inline bool TaskCreateRequest::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool TaskCreateRequest::has_spec() const {
  return _internal_has_spec();
}
inline void TaskCreateRequest::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::flyteidl::admin::TaskSpec& TaskCreateRequest::_internal_spec() const {
  const ::flyteidl::admin::TaskSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::TaskSpec&>(
      ::flyteidl::admin::_TaskSpec_default_instance_);
}
inline const ::flyteidl::admin::TaskSpec& TaskCreateRequest::spec() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskCreateRequest.spec)
  return _internal_spec();
}
inline void TaskCreateRequest::unsafe_arena_set_allocated_spec(
    ::flyteidl::admin::TaskSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.TaskCreateRequest.spec)
}
inline ::flyteidl::admin::TaskSpec* TaskCreateRequest::release_spec() {
  
  ::flyteidl::admin::TaskSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::TaskSpec* TaskCreateRequest::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskCreateRequest.spec)
  
  ::flyteidl::admin::TaskSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::TaskSpec* TaskCreateRequest::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::TaskSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::flyteidl::admin::TaskSpec* TaskCreateRequest::mutable_spec() {
  ::flyteidl::admin::TaskSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskCreateRequest.spec)
  return _msg;
}
inline void TaskCreateRequest::set_allocated_spec(::flyteidl::admin::TaskSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::TaskSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskCreateRequest.spec)
}

// -------------------------------------------------------------------

// TaskCreateResponse

// -------------------------------------------------------------------

// Task

// .flyteidl.core.Identifier id = 1 [json_name = "id"];
inline bool Task::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool Task::has_id() const {
  return _internal_has_id();
}
inline const ::flyteidl::core::Identifier& Task::_internal_id() const {
  const ::flyteidl::core::Identifier* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::Identifier&>(
      ::flyteidl::core::_Identifier_default_instance_);
}
inline const ::flyteidl::core::Identifier& Task::id() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Task.id)
  return _internal_id();
}
inline void Task::unsafe_arena_set_allocated_id(
    ::flyteidl::core::Identifier* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.Task.id)
}
inline ::flyteidl::core::Identifier* Task::release_id() {
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::Identifier* Task::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Task.id)
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identifier* Task::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identifier>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::flyteidl::core::Identifier* Task::mutable_id() {
  ::flyteidl::core::Identifier* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Task.id)
  return _msg;
}
inline void Task::set_allocated_id(::flyteidl::core::Identifier* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Task.id)
}

// .flyteidl.admin.TaskClosure closure = 2 [json_name = "closure"];
inline bool Task::_internal_has_closure() const {
  return this != internal_default_instance() && closure_ != nullptr;
}
inline bool Task::has_closure() const {
  return _internal_has_closure();
}
inline void Task::clear_closure() {
  if (GetArenaForAllocation() == nullptr && closure_ != nullptr) {
    delete closure_;
  }
  closure_ = nullptr;
}
inline const ::flyteidl::admin::TaskClosure& Task::_internal_closure() const {
  const ::flyteidl::admin::TaskClosure* p = closure_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::TaskClosure&>(
      ::flyteidl::admin::_TaskClosure_default_instance_);
}
inline const ::flyteidl::admin::TaskClosure& Task::closure() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Task.closure)
  return _internal_closure();
}
inline void Task::unsafe_arena_set_allocated_closure(
    ::flyteidl::admin::TaskClosure* closure) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(closure_);
  }
  closure_ = closure;
  if (closure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.Task.closure)
}
inline ::flyteidl::admin::TaskClosure* Task::release_closure() {
  
  ::flyteidl::admin::TaskClosure* temp = closure_;
  closure_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::TaskClosure* Task::unsafe_arena_release_closure() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Task.closure)
  
  ::flyteidl::admin::TaskClosure* temp = closure_;
  closure_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::TaskClosure* Task::_internal_mutable_closure() {
  
  if (closure_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::TaskClosure>(GetArenaForAllocation());
    closure_ = p;
  }
  return closure_;
}
inline ::flyteidl::admin::TaskClosure* Task::mutable_closure() {
  ::flyteidl::admin::TaskClosure* _msg = _internal_mutable_closure();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Task.closure)
  return _msg;
}
inline void Task::set_allocated_closure(::flyteidl::admin::TaskClosure* closure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete closure_;
  }
  if (closure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::TaskClosure>::GetOwningArena(closure);
    if (message_arena != submessage_arena) {
      closure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, closure, submessage_arena);
    }
    
  } else {
    
  }
  closure_ = closure;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Task.closure)
}

// -------------------------------------------------------------------

// TaskList

// repeated .flyteidl.admin.Task tasks = 1 [json_name = "tasks"];
inline int TaskList::_internal_tasks_size() const {
  return tasks_.size();
}
inline int TaskList::tasks_size() const {
  return _internal_tasks_size();
}
inline void TaskList::clear_tasks() {
  tasks_.Clear();
}
inline ::flyteidl::admin::Task* TaskList::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskList.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Task >*
TaskList::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.TaskList.tasks)
  return &tasks_;
}
inline const ::flyteidl::admin::Task& TaskList::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::flyteidl::admin::Task& TaskList::tasks(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskList.tasks)
  return _internal_tasks(index);
}
inline ::flyteidl::admin::Task* TaskList::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::flyteidl::admin::Task* TaskList::add_tasks() {
  ::flyteidl::admin::Task* _add = _internal_add_tasks();
  // @@protoc_insertion_point(field_add:flyteidl.admin.TaskList.tasks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Task >&
TaskList::tasks() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.TaskList.tasks)
  return tasks_;
}

// string token = 2 [json_name = "token"];
inline void TaskList::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& TaskList::token() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskList.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskList::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskList.token)
}
inline std::string* TaskList::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskList.token)
  return _s;
}
inline const std::string& TaskList::_internal_token() const {
  return token_.Get();
}
inline void TaskList::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskList::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskList::release_token() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskList.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskList::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskList.token)
}

// -------------------------------------------------------------------

// TaskSpec

// .flyteidl.core.TaskTemplate template = 1 [json_name = "template"];
inline bool TaskSpec::_internal_has_template_() const {
  return this != internal_default_instance() && template__ != nullptr;
}
inline bool TaskSpec::has_template_() const {
  return _internal_has_template_();
}
inline const ::flyteidl::core::TaskTemplate& TaskSpec::_internal_template_() const {
  const ::flyteidl::core::TaskTemplate* p = template__;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::TaskTemplate&>(
      ::flyteidl::core::_TaskTemplate_default_instance_);
}
inline const ::flyteidl::core::TaskTemplate& TaskSpec::template_() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskSpec.template)
  return _internal_template_();
}
inline void TaskSpec::unsafe_arena_set_allocated_template_(
    ::flyteidl::core::TaskTemplate* template_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(template__);
  }
  template__ = template_;
  if (template_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.TaskSpec.template)
}
inline ::flyteidl::core::TaskTemplate* TaskSpec::release_template_() {
  
  ::flyteidl::core::TaskTemplate* temp = template__;
  template__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::TaskTemplate* TaskSpec::unsafe_arena_release_template_() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskSpec.template)
  
  ::flyteidl::core::TaskTemplate* temp = template__;
  template__ = nullptr;
  return temp;
}
inline ::flyteidl::core::TaskTemplate* TaskSpec::_internal_mutable_template_() {
  
  if (template__ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::TaskTemplate>(GetArenaForAllocation());
    template__ = p;
  }
  return template__;
}
inline ::flyteidl::core::TaskTemplate* TaskSpec::mutable_template_() {
  ::flyteidl::core::TaskTemplate* _msg = _internal_mutable_template_();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskSpec.template)
  return _msg;
}
inline void TaskSpec::set_allocated_template_(::flyteidl::core::TaskTemplate* template_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(template__);
  }
  if (template_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(template_));
    if (message_arena != submessage_arena) {
      template_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, template_, submessage_arena);
    }
    
  } else {
    
  }
  template__ = template_;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskSpec.template)
}

// -------------------------------------------------------------------

// TaskClosure

// .flyteidl.core.CompiledTask compiled_task = 1 [json_name = "compiledTask"];
inline bool TaskClosure::_internal_has_compiled_task() const {
  return this != internal_default_instance() && compiled_task_ != nullptr;
}
inline bool TaskClosure::has_compiled_task() const {
  return _internal_has_compiled_task();
}
inline const ::flyteidl::core::CompiledTask& TaskClosure::_internal_compiled_task() const {
  const ::flyteidl::core::CompiledTask* p = compiled_task_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::CompiledTask&>(
      ::flyteidl::core::_CompiledTask_default_instance_);
}
inline const ::flyteidl::core::CompiledTask& TaskClosure::compiled_task() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskClosure.compiled_task)
  return _internal_compiled_task();
}
inline void TaskClosure::unsafe_arena_set_allocated_compiled_task(
    ::flyteidl::core::CompiledTask* compiled_task) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(compiled_task_);
  }
  compiled_task_ = compiled_task;
  if (compiled_task) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.TaskClosure.compiled_task)
}
inline ::flyteidl::core::CompiledTask* TaskClosure::release_compiled_task() {
  
  ::flyteidl::core::CompiledTask* temp = compiled_task_;
  compiled_task_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::CompiledTask* TaskClosure::unsafe_arena_release_compiled_task() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskClosure.compiled_task)
  
  ::flyteidl::core::CompiledTask* temp = compiled_task_;
  compiled_task_ = nullptr;
  return temp;
}
inline ::flyteidl::core::CompiledTask* TaskClosure::_internal_mutable_compiled_task() {
  
  if (compiled_task_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::CompiledTask>(GetArenaForAllocation());
    compiled_task_ = p;
  }
  return compiled_task_;
}
inline ::flyteidl::core::CompiledTask* TaskClosure::mutable_compiled_task() {
  ::flyteidl::core::CompiledTask* _msg = _internal_mutable_compiled_task();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskClosure.compiled_task)
  return _msg;
}
inline void TaskClosure::set_allocated_compiled_task(::flyteidl::core::CompiledTask* compiled_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(compiled_task_);
  }
  if (compiled_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(compiled_task));
    if (message_arena != submessage_arena) {
      compiled_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compiled_task, submessage_arena);
    }
    
  } else {
    
  }
  compiled_task_ = compiled_task;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskClosure.compiled_task)
}

// .google.protobuf.Timestamp created_at = 2 [json_name = "createdAt"];
inline bool TaskClosure::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool TaskClosure::has_created_at() const {
  return _internal_has_created_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TaskClosure::_internal_created_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TaskClosure::created_at() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskClosure.created_at)
  return _internal_created_at();
}
inline void TaskClosure::unsafe_arena_set_allocated_created_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.TaskClosure.created_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TaskClosure::release_created_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TaskClosure::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskClosure.created_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TaskClosure::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    created_at_ = p;
  }
  return created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TaskClosure::mutable_created_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskClosure.created_at)
  return _msg;
}
inline void TaskClosure::set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at));
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskClosure.created_at)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2ftask_2eproto
