// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/settings.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fadmin_2fsettings_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fadmin_2fsettings_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/admin/cluster_assignment.pb.h"
#include "flyteidl/core/execution.pb.h"
#include "flyteidl/admin/matchable_resource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fsettings_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fadmin_2fsettings_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fadmin_2fsettings_2eproto();
namespace flyteidl {
namespace admin {
class DomainLevel;
class DomainLevelDefaultTypeInternal;
extern DomainLevelDefaultTypeInternal _DomainLevel_default_instance_;
class DomainSettings;
class DomainSettingsDefaultTypeInternal;
extern DomainSettingsDefaultTypeInternal _DomainSettings_default_instance_;
class DomainSettings_WorkflowSettingsEntry_DoNotUse;
class DomainSettings_WorkflowSettingsEntry_DoNotUseDefaultTypeInternal;
extern DomainSettings_WorkflowSettingsEntry_DoNotUseDefaultTypeInternal _DomainSettings_WorkflowSettingsEntry_DoNotUse_default_instance_;
class FullSettingsGetRequest;
class FullSettingsGetRequestDefaultTypeInternal;
extern FullSettingsGetRequestDefaultTypeInternal _FullSettingsGetRequest_default_instance_;
class FullSettingsGetResponse;
class FullSettingsGetResponseDefaultTypeInternal;
extern FullSettingsGetResponseDefaultTypeInternal _FullSettingsGetResponse_default_instance_;
class FullSettingsUpdateRequest;
class FullSettingsUpdateRequestDefaultTypeInternal;
extern FullSettingsUpdateRequestDefaultTypeInternal _FullSettingsUpdateRequest_default_instance_;
class FullSettingsUpdateResponse;
class FullSettingsUpdateResponseDefaultTypeInternal;
extern FullSettingsUpdateResponseDefaultTypeInternal _FullSettingsUpdateResponse_default_instance_;
class GlobalLevel;
class GlobalLevelDefaultTypeInternal;
extern GlobalLevelDefaultTypeInternal _GlobalLevel_default_instance_;
class LaunchplanLevel;
class LaunchplanLevelDefaultTypeInternal;
extern LaunchplanLevelDefaultTypeInternal _LaunchplanLevel_default_instance_;
class LaunchplanSettings;
class LaunchplanSettingsDefaultTypeInternal;
extern LaunchplanSettingsDefaultTypeInternal _LaunchplanSettings_default_instance_;
class ProjectLevel;
class ProjectLevelDefaultTypeInternal;
extern ProjectLevelDefaultTypeInternal _ProjectLevel_default_instance_;
class ProjectSettings;
class ProjectSettingsDefaultTypeInternal;
extern ProjectSettingsDefaultTypeInternal _ProjectSettings_default_instance_;
class ProjectSettings_DomainSettingsEntry_DoNotUse;
class ProjectSettings_DomainSettingsEntry_DoNotUseDefaultTypeInternal;
extern ProjectSettings_DomainSettingsEntry_DoNotUseDefaultTypeInternal _ProjectSettings_DomainSettingsEntry_DoNotUse_default_instance_;
class Settings;
class SettingsDefaultTypeInternal;
extern SettingsDefaultTypeInternal _Settings_default_instance_;
class SettingsCollection;
class SettingsCollectionDefaultTypeInternal;
extern SettingsCollectionDefaultTypeInternal _SettingsCollection_default_instance_;
class SettingsDeleteRequest;
class SettingsDeleteRequestDefaultTypeInternal;
extern SettingsDeleteRequestDefaultTypeInternal _SettingsDeleteRequest_default_instance_;
class SettingsDeleteResponse;
class SettingsDeleteResponseDefaultTypeInternal;
extern SettingsDeleteResponseDefaultTypeInternal _SettingsDeleteResponse_default_instance_;
class SettingsGetRequest;
class SettingsGetRequestDefaultTypeInternal;
extern SettingsGetRequestDefaultTypeInternal _SettingsGetRequest_default_instance_;
class SettingsGetResponse;
class SettingsGetResponseDefaultTypeInternal;
extern SettingsGetResponseDefaultTypeInternal _SettingsGetResponse_default_instance_;
class SettingsUpdateRequest;
class SettingsUpdateRequestDefaultTypeInternal;
extern SettingsUpdateRequestDefaultTypeInternal _SettingsUpdateRequest_default_instance_;
class Settings_ProjectSettingsEntry_DoNotUse;
class Settings_ProjectSettingsEntry_DoNotUseDefaultTypeInternal;
extern Settings_ProjectSettingsEntry_DoNotUseDefaultTypeInternal _Settings_ProjectSettingsEntry_DoNotUse_default_instance_;
class WorkflowLevel;
class WorkflowLevelDefaultTypeInternal;
extern WorkflowLevelDefaultTypeInternal _WorkflowLevel_default_instance_;
class WorkflowSettings;
class WorkflowSettingsDefaultTypeInternal;
extern WorkflowSettingsDefaultTypeInternal _WorkflowSettings_default_instance_;
class WorkflowSettings_LaunchplanSettingsEntry_DoNotUse;
class WorkflowSettings_LaunchplanSettingsEntry_DoNotUseDefaultTypeInternal;
extern WorkflowSettings_LaunchplanSettingsEntry_DoNotUseDefaultTypeInternal _WorkflowSettings_LaunchplanSettingsEntry_DoNotUse_default_instance_;
}  // namespace admin
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::admin::DomainLevel* Arena::CreateMaybeMessage<::flyteidl::admin::DomainLevel>(Arena*);
template<> ::flyteidl::admin::DomainSettings* Arena::CreateMaybeMessage<::flyteidl::admin::DomainSettings>(Arena*);
template<> ::flyteidl::admin::DomainSettings_WorkflowSettingsEntry_DoNotUse* Arena::CreateMaybeMessage<::flyteidl::admin::DomainSettings_WorkflowSettingsEntry_DoNotUse>(Arena*);
template<> ::flyteidl::admin::FullSettingsGetRequest* Arena::CreateMaybeMessage<::flyteidl::admin::FullSettingsGetRequest>(Arena*);
template<> ::flyteidl::admin::FullSettingsGetResponse* Arena::CreateMaybeMessage<::flyteidl::admin::FullSettingsGetResponse>(Arena*);
template<> ::flyteidl::admin::FullSettingsUpdateRequest* Arena::CreateMaybeMessage<::flyteidl::admin::FullSettingsUpdateRequest>(Arena*);
template<> ::flyteidl::admin::FullSettingsUpdateResponse* Arena::CreateMaybeMessage<::flyteidl::admin::FullSettingsUpdateResponse>(Arena*);
template<> ::flyteidl::admin::GlobalLevel* Arena::CreateMaybeMessage<::flyteidl::admin::GlobalLevel>(Arena*);
template<> ::flyteidl::admin::LaunchplanLevel* Arena::CreateMaybeMessage<::flyteidl::admin::LaunchplanLevel>(Arena*);
template<> ::flyteidl::admin::LaunchplanSettings* Arena::CreateMaybeMessage<::flyteidl::admin::LaunchplanSettings>(Arena*);
template<> ::flyteidl::admin::ProjectLevel* Arena::CreateMaybeMessage<::flyteidl::admin::ProjectLevel>(Arena*);
template<> ::flyteidl::admin::ProjectSettings* Arena::CreateMaybeMessage<::flyteidl::admin::ProjectSettings>(Arena*);
template<> ::flyteidl::admin::ProjectSettings_DomainSettingsEntry_DoNotUse* Arena::CreateMaybeMessage<::flyteidl::admin::ProjectSettings_DomainSettingsEntry_DoNotUse>(Arena*);
template<> ::flyteidl::admin::Settings* Arena::CreateMaybeMessage<::flyteidl::admin::Settings>(Arena*);
template<> ::flyteidl::admin::SettingsCollection* Arena::CreateMaybeMessage<::flyteidl::admin::SettingsCollection>(Arena*);
template<> ::flyteidl::admin::SettingsDeleteRequest* Arena::CreateMaybeMessage<::flyteidl::admin::SettingsDeleteRequest>(Arena*);
template<> ::flyteidl::admin::SettingsDeleteResponse* Arena::CreateMaybeMessage<::flyteidl::admin::SettingsDeleteResponse>(Arena*);
template<> ::flyteidl::admin::SettingsGetRequest* Arena::CreateMaybeMessage<::flyteidl::admin::SettingsGetRequest>(Arena*);
template<> ::flyteidl::admin::SettingsGetResponse* Arena::CreateMaybeMessage<::flyteidl::admin::SettingsGetResponse>(Arena*);
template<> ::flyteidl::admin::SettingsUpdateRequest* Arena::CreateMaybeMessage<::flyteidl::admin::SettingsUpdateRequest>(Arena*);
template<> ::flyteidl::admin::Settings_ProjectSettingsEntry_DoNotUse* Arena::CreateMaybeMessage<::flyteidl::admin::Settings_ProjectSettingsEntry_DoNotUse>(Arena*);
template<> ::flyteidl::admin::WorkflowLevel* Arena::CreateMaybeMessage<::flyteidl::admin::WorkflowLevel>(Arena*);
template<> ::flyteidl::admin::WorkflowSettings* Arena::CreateMaybeMessage<::flyteidl::admin::WorkflowSettings>(Arena*);
template<> ::flyteidl::admin::WorkflowSettings_LaunchplanSettingsEntry_DoNotUse* Arena::CreateMaybeMessage<::flyteidl::admin::WorkflowSettings_LaunchplanSettingsEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace admin {

// ===================================================================

class SettingsCollection final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.SettingsCollection) */ {
 public:
  SettingsCollection();
  virtual ~SettingsCollection();

  SettingsCollection(const SettingsCollection& from);

  inline SettingsCollection& operator=(const SettingsCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SettingsCollection(SettingsCollection&& from) noexcept
    : SettingsCollection() {
    *this = ::std::move(from);
  }

  inline SettingsCollection& operator=(SettingsCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SettingsCollection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SettingsCollection* internal_default_instance() {
    return reinterpret_cast<const SettingsCollection*>(
               &_SettingsCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SettingsCollection* other);
  friend void swap(SettingsCollection& a, SettingsCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SettingsCollection* New() const final {
    return CreateMaybeMessage<SettingsCollection>(nullptr);
  }

  SettingsCollection* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SettingsCollection>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SettingsCollection& from);
  void MergeFrom(const SettingsCollection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettingsCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.admin.TaskResourceAttributes task_resource_settings = 1;
  bool has_task_resource_settings() const;
  void clear_task_resource_settings();
  static const int kTaskResourceSettingsFieldNumber = 1;
  const ::flyteidl::admin::TaskResourceAttributes& task_resource_settings() const;
  ::flyteidl::admin::TaskResourceAttributes* release_task_resource_settings();
  ::flyteidl::admin::TaskResourceAttributes* mutable_task_resource_settings();
  void set_allocated_task_resource_settings(::flyteidl::admin::TaskResourceAttributes* task_resource_settings);

  // .flyteidl.admin.ClusterResourceAttributes cluster_resource_settings = 2;
  bool has_cluster_resource_settings() const;
  void clear_cluster_resource_settings();
  static const int kClusterResourceSettingsFieldNumber = 2;
  const ::flyteidl::admin::ClusterResourceAttributes& cluster_resource_settings() const;
  ::flyteidl::admin::ClusterResourceAttributes* release_cluster_resource_settings();
  ::flyteidl::admin::ClusterResourceAttributes* mutable_cluster_resource_settings();
  void set_allocated_cluster_resource_settings(::flyteidl::admin::ClusterResourceAttributes* cluster_resource_settings);

  // .flyteidl.admin.ExecutionQueueAttributes execution_queue_settings = 3;
  bool has_execution_queue_settings() const;
  void clear_execution_queue_settings();
  static const int kExecutionQueueSettingsFieldNumber = 3;
  const ::flyteidl::admin::ExecutionQueueAttributes& execution_queue_settings() const;
  ::flyteidl::admin::ExecutionQueueAttributes* release_execution_queue_settings();
  ::flyteidl::admin::ExecutionQueueAttributes* mutable_execution_queue_settings();
  void set_allocated_execution_queue_settings(::flyteidl::admin::ExecutionQueueAttributes* execution_queue_settings);

  // .flyteidl.admin.ExecutionClusterLabel execution_cluster_label_settings = 4;
  bool has_execution_cluster_label_settings() const;
  void clear_execution_cluster_label_settings();
  static const int kExecutionClusterLabelSettingsFieldNumber = 4;
  const ::flyteidl::admin::ExecutionClusterLabel& execution_cluster_label_settings() const;
  ::flyteidl::admin::ExecutionClusterLabel* release_execution_cluster_label_settings();
  ::flyteidl::admin::ExecutionClusterLabel* mutable_execution_cluster_label_settings();
  void set_allocated_execution_cluster_label_settings(::flyteidl::admin::ExecutionClusterLabel* execution_cluster_label_settings);

  // .flyteidl.core.QualityOfService quality_of_service_settings = 5;
  bool has_quality_of_service_settings() const;
  void clear_quality_of_service_settings();
  static const int kQualityOfServiceSettingsFieldNumber = 5;
  const ::flyteidl::core::QualityOfService& quality_of_service_settings() const;
  ::flyteidl::core::QualityOfService* release_quality_of_service_settings();
  ::flyteidl::core::QualityOfService* mutable_quality_of_service_settings();
  void set_allocated_quality_of_service_settings(::flyteidl::core::QualityOfService* quality_of_service_settings);

  // .flyteidl.admin.PluginOverride plugin_override_settings = 6;
  bool has_plugin_override_settings() const;
  void clear_plugin_override_settings();
  static const int kPluginOverrideSettingsFieldNumber = 6;
  const ::flyteidl::admin::PluginOverride& plugin_override_settings() const;
  ::flyteidl::admin::PluginOverride* release_plugin_override_settings();
  ::flyteidl::admin::PluginOverride* mutable_plugin_override_settings();
  void set_allocated_plugin_override_settings(::flyteidl::admin::PluginOverride* plugin_override_settings);

  // .flyteidl.admin.WorkflowExecutionConfig workflow_execution_settings = 7;
  bool has_workflow_execution_settings() const;
  void clear_workflow_execution_settings();
  static const int kWorkflowExecutionSettingsFieldNumber = 7;
  const ::flyteidl::admin::WorkflowExecutionConfig& workflow_execution_settings() const;
  ::flyteidl::admin::WorkflowExecutionConfig* release_workflow_execution_settings();
  ::flyteidl::admin::WorkflowExecutionConfig* mutable_workflow_execution_settings();
  void set_allocated_workflow_execution_settings(::flyteidl::admin::WorkflowExecutionConfig* workflow_execution_settings);

  // .flyteidl.admin.ClusterAssignment cluster_assignment_settings = 8;
  bool has_cluster_assignment_settings() const;
  void clear_cluster_assignment_settings();
  static const int kClusterAssignmentSettingsFieldNumber = 8;
  const ::flyteidl::admin::ClusterAssignment& cluster_assignment_settings() const;
  ::flyteidl::admin::ClusterAssignment* release_cluster_assignment_settings();
  ::flyteidl::admin::ClusterAssignment* mutable_cluster_assignment_settings();
  void set_allocated_cluster_assignment_settings(::flyteidl::admin::ClusterAssignment* cluster_assignment_settings);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.SettingsCollection)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::admin::TaskResourceAttributes* task_resource_settings_;
  ::flyteidl::admin::ClusterResourceAttributes* cluster_resource_settings_;
  ::flyteidl::admin::ExecutionQueueAttributes* execution_queue_settings_;
  ::flyteidl::admin::ExecutionClusterLabel* execution_cluster_label_settings_;
  ::flyteidl::core::QualityOfService* quality_of_service_settings_;
  ::flyteidl::admin::PluginOverride* plugin_override_settings_;
  ::flyteidl::admin::WorkflowExecutionConfig* workflow_execution_settings_;
  ::flyteidl::admin::ClusterAssignment* cluster_assignment_settings_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fsettings_2eproto;
};
// -------------------------------------------------------------------

class Settings_ProjectSettingsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Settings_ProjectSettingsEntry_DoNotUse, 
    ::std::string, ::flyteidl::admin::ProjectSettings,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<Settings_ProjectSettingsEntry_DoNotUse, 
    ::std::string, ::flyteidl::admin::ProjectSettings,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Settings_ProjectSettingsEntry_DoNotUse();
  Settings_ProjectSettingsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Settings_ProjectSettingsEntry_DoNotUse& other);
  static const Settings_ProjectSettingsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Settings_ProjectSettingsEntry_DoNotUse*>(&_Settings_ProjectSettingsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Settings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Settings) */ {
 public:
  Settings();
  virtual ~Settings();

  Settings(const Settings& from);

  inline Settings& operator=(const Settings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Settings(Settings&& from) noexcept
    : Settings() {
    *this = ::std::move(from);
  }

  inline Settings& operator=(Settings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Settings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Settings* internal_default_instance() {
    return reinterpret_cast<const Settings*>(
               &_Settings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Settings* other);
  friend void swap(Settings& a, Settings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Settings* New() const final {
    return CreateMaybeMessage<Settings>(nullptr);
  }

  Settings* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Settings>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Settings& from);
  void MergeFrom(const Settings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Settings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .flyteidl.admin.ProjectSettings> project_settings = 2;
  int project_settings_size() const;
  void clear_project_settings();
  static const int kProjectSettingsFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::flyteidl::admin::ProjectSettings >&
      project_settings() const;
  ::google::protobuf::Map< ::std::string, ::flyteidl::admin::ProjectSettings >*
      mutable_project_settings();

  // .flyteidl.admin.SettingsCollection global = 1;
  bool has_global() const;
  void clear_global();
  static const int kGlobalFieldNumber = 1;
  const ::flyteidl::admin::SettingsCollection& global() const;
  ::flyteidl::admin::SettingsCollection* release_global();
  ::flyteidl::admin::SettingsCollection* mutable_global();
  void set_allocated_global(::flyteidl::admin::SettingsCollection* global);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Settings)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Settings_ProjectSettingsEntry_DoNotUse,
      ::std::string, ::flyteidl::admin::ProjectSettings,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > project_settings_;
  ::flyteidl::admin::SettingsCollection* global_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fsettings_2eproto;
};
// -------------------------------------------------------------------

class ProjectSettings_DomainSettingsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ProjectSettings_DomainSettingsEntry_DoNotUse, 
    ::std::string, ::flyteidl::admin::DomainSettings,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<ProjectSettings_DomainSettingsEntry_DoNotUse, 
    ::std::string, ::flyteidl::admin::DomainSettings,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ProjectSettings_DomainSettingsEntry_DoNotUse();
  ProjectSettings_DomainSettingsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ProjectSettings_DomainSettingsEntry_DoNotUse& other);
  static const ProjectSettings_DomainSettingsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ProjectSettings_DomainSettingsEntry_DoNotUse*>(&_ProjectSettings_DomainSettingsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ProjectSettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ProjectSettings) */ {
 public:
  ProjectSettings();
  virtual ~ProjectSettings();

  ProjectSettings(const ProjectSettings& from);

  inline ProjectSettings& operator=(const ProjectSettings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProjectSettings(ProjectSettings&& from) noexcept
    : ProjectSettings() {
    *this = ::std::move(from);
  }

  inline ProjectSettings& operator=(ProjectSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ProjectSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjectSettings* internal_default_instance() {
    return reinterpret_cast<const ProjectSettings*>(
               &_ProjectSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ProjectSettings* other);
  friend void swap(ProjectSettings& a, ProjectSettings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProjectSettings* New() const final {
    return CreateMaybeMessage<ProjectSettings>(nullptr);
  }

  ProjectSettings* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProjectSettings>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProjectSettings& from);
  void MergeFrom(const ProjectSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .flyteidl.admin.DomainSettings> domain_settings = 3;
  int domain_settings_size() const;
  void clear_domain_settings();
  static const int kDomainSettingsFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::flyteidl::admin::DomainSettings >&
      domain_settings() const;
  ::google::protobuf::Map< ::std::string, ::flyteidl::admin::DomainSettings >*
      mutable_domain_settings();

  // string project = 1;
  void clear_project();
  static const int kProjectFieldNumber = 1;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  #if LANG_CXX11
  void set_project(::std::string&& value);
  #endif
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);

  // .flyteidl.admin.SettingsCollection settings = 2;
  bool has_settings() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 2;
  const ::flyteidl::admin::SettingsCollection& settings() const;
  ::flyteidl::admin::SettingsCollection* release_settings();
  ::flyteidl::admin::SettingsCollection* mutable_settings();
  void set_allocated_settings(::flyteidl::admin::SettingsCollection* settings);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ProjectSettings)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      ProjectSettings_DomainSettingsEntry_DoNotUse,
      ::std::string, ::flyteidl::admin::DomainSettings,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > domain_settings_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::flyteidl::admin::SettingsCollection* settings_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fsettings_2eproto;
};
// -------------------------------------------------------------------

class DomainSettings_WorkflowSettingsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<DomainSettings_WorkflowSettingsEntry_DoNotUse, 
    ::std::string, ::flyteidl::admin::WorkflowSettings,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<DomainSettings_WorkflowSettingsEntry_DoNotUse, 
    ::std::string, ::flyteidl::admin::WorkflowSettings,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  DomainSettings_WorkflowSettingsEntry_DoNotUse();
  DomainSettings_WorkflowSettingsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const DomainSettings_WorkflowSettingsEntry_DoNotUse& other);
  static const DomainSettings_WorkflowSettingsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DomainSettings_WorkflowSettingsEntry_DoNotUse*>(&_DomainSettings_WorkflowSettingsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class DomainSettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.DomainSettings) */ {
 public:
  DomainSettings();
  virtual ~DomainSettings();

  DomainSettings(const DomainSettings& from);

  inline DomainSettings& operator=(const DomainSettings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DomainSettings(DomainSettings&& from) noexcept
    : DomainSettings() {
    *this = ::std::move(from);
  }

  inline DomainSettings& operator=(DomainSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DomainSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DomainSettings* internal_default_instance() {
    return reinterpret_cast<const DomainSettings*>(
               &_DomainSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(DomainSettings* other);
  friend void swap(DomainSettings& a, DomainSettings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DomainSettings* New() const final {
    return CreateMaybeMessage<DomainSettings>(nullptr);
  }

  DomainSettings* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DomainSettings>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DomainSettings& from);
  void MergeFrom(const DomainSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DomainSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .flyteidl.admin.WorkflowSettings> workflow_settings = 3;
  int workflow_settings_size() const;
  void clear_workflow_settings();
  static const int kWorkflowSettingsFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::flyteidl::admin::WorkflowSettings >&
      workflow_settings() const;
  ::google::protobuf::Map< ::std::string, ::flyteidl::admin::WorkflowSettings >*
      mutable_workflow_settings();

  // string domain = 1;
  void clear_domain();
  static const int kDomainFieldNumber = 1;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // .flyteidl.admin.SettingsCollection settings = 2;
  bool has_settings() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 2;
  const ::flyteidl::admin::SettingsCollection& settings() const;
  ::flyteidl::admin::SettingsCollection* release_settings();
  ::flyteidl::admin::SettingsCollection* mutable_settings();
  void set_allocated_settings(::flyteidl::admin::SettingsCollection* settings);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.DomainSettings)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      DomainSettings_WorkflowSettingsEntry_DoNotUse,
      ::std::string, ::flyteidl::admin::WorkflowSettings,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > workflow_settings_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::flyteidl::admin::SettingsCollection* settings_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fsettings_2eproto;
};
// -------------------------------------------------------------------

class WorkflowSettings_LaunchplanSettingsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<WorkflowSettings_LaunchplanSettingsEntry_DoNotUse, 
    ::std::string, ::flyteidl::admin::LaunchplanSettings,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<WorkflowSettings_LaunchplanSettingsEntry_DoNotUse, 
    ::std::string, ::flyteidl::admin::LaunchplanSettings,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  WorkflowSettings_LaunchplanSettingsEntry_DoNotUse();
  WorkflowSettings_LaunchplanSettingsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const WorkflowSettings_LaunchplanSettingsEntry_DoNotUse& other);
  static const WorkflowSettings_LaunchplanSettingsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const WorkflowSettings_LaunchplanSettingsEntry_DoNotUse*>(&_WorkflowSettings_LaunchplanSettingsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class WorkflowSettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.WorkflowSettings) */ {
 public:
  WorkflowSettings();
  virtual ~WorkflowSettings();

  WorkflowSettings(const WorkflowSettings& from);

  inline WorkflowSettings& operator=(const WorkflowSettings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowSettings(WorkflowSettings&& from) noexcept
    : WorkflowSettings() {
    *this = ::std::move(from);
  }

  inline WorkflowSettings& operator=(WorkflowSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WorkflowSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowSettings* internal_default_instance() {
    return reinterpret_cast<const WorkflowSettings*>(
               &_WorkflowSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(WorkflowSettings* other);
  friend void swap(WorkflowSettings& a, WorkflowSettings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowSettings* New() const final {
    return CreateMaybeMessage<WorkflowSettings>(nullptr);
  }

  WorkflowSettings* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowSettings>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WorkflowSettings& from);
  void MergeFrom(const WorkflowSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .flyteidl.admin.LaunchplanSettings> launchplan_settings = 3;
  int launchplan_settings_size() const;
  void clear_launchplan_settings();
  static const int kLaunchplanSettingsFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::flyteidl::admin::LaunchplanSettings >&
      launchplan_settings() const;
  ::google::protobuf::Map< ::std::string, ::flyteidl::admin::LaunchplanSettings >*
      mutable_launchplan_settings();

  // string workflow = 1;
  void clear_workflow();
  static const int kWorkflowFieldNumber = 1;
  const ::std::string& workflow() const;
  void set_workflow(const ::std::string& value);
  #if LANG_CXX11
  void set_workflow(::std::string&& value);
  #endif
  void set_workflow(const char* value);
  void set_workflow(const char* value, size_t size);
  ::std::string* mutable_workflow();
  ::std::string* release_workflow();
  void set_allocated_workflow(::std::string* workflow);

  // .flyteidl.admin.SettingsCollection settings = 2;
  bool has_settings() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 2;
  const ::flyteidl::admin::SettingsCollection& settings() const;
  ::flyteidl::admin::SettingsCollection* release_settings();
  ::flyteidl::admin::SettingsCollection* mutable_settings();
  void set_allocated_settings(::flyteidl::admin::SettingsCollection* settings);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.WorkflowSettings)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      WorkflowSettings_LaunchplanSettingsEntry_DoNotUse,
      ::std::string, ::flyteidl::admin::LaunchplanSettings,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > launchplan_settings_;
  ::google::protobuf::internal::ArenaStringPtr workflow_;
  ::flyteidl::admin::SettingsCollection* settings_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fsettings_2eproto;
};
// -------------------------------------------------------------------

class LaunchplanSettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.LaunchplanSettings) */ {
 public:
  LaunchplanSettings();
  virtual ~LaunchplanSettings();

  LaunchplanSettings(const LaunchplanSettings& from);

  inline LaunchplanSettings& operator=(const LaunchplanSettings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaunchplanSettings(LaunchplanSettings&& from) noexcept
    : LaunchplanSettings() {
    *this = ::std::move(from);
  }

  inline LaunchplanSettings& operator=(LaunchplanSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LaunchplanSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaunchplanSettings* internal_default_instance() {
    return reinterpret_cast<const LaunchplanSettings*>(
               &_LaunchplanSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(LaunchplanSettings* other);
  friend void swap(LaunchplanSettings& a, LaunchplanSettings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaunchplanSettings* New() const final {
    return CreateMaybeMessage<LaunchplanSettings>(nullptr);
  }

  LaunchplanSettings* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaunchplanSettings>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaunchplanSettings& from);
  void MergeFrom(const LaunchplanSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchplanSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string launchplan = 1;
  void clear_launchplan();
  static const int kLaunchplanFieldNumber = 1;
  const ::std::string& launchplan() const;
  void set_launchplan(const ::std::string& value);
  #if LANG_CXX11
  void set_launchplan(::std::string&& value);
  #endif
  void set_launchplan(const char* value);
  void set_launchplan(const char* value, size_t size);
  ::std::string* mutable_launchplan();
  ::std::string* release_launchplan();
  void set_allocated_launchplan(::std::string* launchplan);

  // .flyteidl.admin.SettingsCollection settings = 2;
  bool has_settings() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 2;
  const ::flyteidl::admin::SettingsCollection& settings() const;
  ::flyteidl::admin::SettingsCollection* release_settings();
  ::flyteidl::admin::SettingsCollection* mutable_settings();
  void set_allocated_settings(::flyteidl::admin::SettingsCollection* settings);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.LaunchplanSettings)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr launchplan_;
  ::flyteidl::admin::SettingsCollection* settings_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fsettings_2eproto;
};
// -------------------------------------------------------------------

class GlobalLevel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.GlobalLevel) */ {
 public:
  GlobalLevel();
  virtual ~GlobalLevel();

  GlobalLevel(const GlobalLevel& from);

  inline GlobalLevel& operator=(const GlobalLevel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GlobalLevel(GlobalLevel&& from) noexcept
    : GlobalLevel() {
    *this = ::std::move(from);
  }

  inline GlobalLevel& operator=(GlobalLevel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GlobalLevel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalLevel* internal_default_instance() {
    return reinterpret_cast<const GlobalLevel*>(
               &_GlobalLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(GlobalLevel* other);
  friend void swap(GlobalLevel& a, GlobalLevel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GlobalLevel* New() const final {
    return CreateMaybeMessage<GlobalLevel>(nullptr);
  }

  GlobalLevel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GlobalLevel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GlobalLevel& from);
  void MergeFrom(const GlobalLevel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalLevel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.GlobalLevel)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fsettings_2eproto;
};
// -------------------------------------------------------------------

class ProjectLevel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ProjectLevel) */ {
 public:
  ProjectLevel();
  virtual ~ProjectLevel();

  ProjectLevel(const ProjectLevel& from);

  inline ProjectLevel& operator=(const ProjectLevel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProjectLevel(ProjectLevel&& from) noexcept
    : ProjectLevel() {
    *this = ::std::move(from);
  }

  inline ProjectLevel& operator=(ProjectLevel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ProjectLevel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjectLevel* internal_default_instance() {
    return reinterpret_cast<const ProjectLevel*>(
               &_ProjectLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ProjectLevel* other);
  friend void swap(ProjectLevel& a, ProjectLevel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProjectLevel* New() const final {
    return CreateMaybeMessage<ProjectLevel>(nullptr);
  }

  ProjectLevel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProjectLevel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProjectLevel& from);
  void MergeFrom(const ProjectLevel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectLevel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project = 1;
  void clear_project();
  static const int kProjectFieldNumber = 1;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  #if LANG_CXX11
  void set_project(::std::string&& value);
  #endif
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ProjectLevel)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fsettings_2eproto;
};
// -------------------------------------------------------------------

class DomainLevel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.DomainLevel) */ {
 public:
  DomainLevel();
  virtual ~DomainLevel();

  DomainLevel(const DomainLevel& from);

  inline DomainLevel& operator=(const DomainLevel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DomainLevel(DomainLevel&& from) noexcept
    : DomainLevel() {
    *this = ::std::move(from);
  }

  inline DomainLevel& operator=(DomainLevel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DomainLevel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DomainLevel* internal_default_instance() {
    return reinterpret_cast<const DomainLevel*>(
               &_DomainLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(DomainLevel* other);
  friend void swap(DomainLevel& a, DomainLevel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DomainLevel* New() const final {
    return CreateMaybeMessage<DomainLevel>(nullptr);
  }

  DomainLevel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DomainLevel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DomainLevel& from);
  void MergeFrom(const DomainLevel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DomainLevel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project = 1;
  void clear_project();
  static const int kProjectFieldNumber = 1;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  #if LANG_CXX11
  void set_project(::std::string&& value);
  #endif
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);

  // string domain = 2;
  void clear_domain();
  static const int kDomainFieldNumber = 2;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.DomainLevel)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fsettings_2eproto;
};
// -------------------------------------------------------------------

class WorkflowLevel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.WorkflowLevel) */ {
 public:
  WorkflowLevel();
  virtual ~WorkflowLevel();

  WorkflowLevel(const WorkflowLevel& from);

  inline WorkflowLevel& operator=(const WorkflowLevel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowLevel(WorkflowLevel&& from) noexcept
    : WorkflowLevel() {
    *this = ::std::move(from);
  }

  inline WorkflowLevel& operator=(WorkflowLevel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WorkflowLevel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowLevel* internal_default_instance() {
    return reinterpret_cast<const WorkflowLevel*>(
               &_WorkflowLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(WorkflowLevel* other);
  friend void swap(WorkflowLevel& a, WorkflowLevel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowLevel* New() const final {
    return CreateMaybeMessage<WorkflowLevel>(nullptr);
  }

  WorkflowLevel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowLevel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WorkflowLevel& from);
  void MergeFrom(const WorkflowLevel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowLevel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project = 1;
  void clear_project();
  static const int kProjectFieldNumber = 1;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  #if LANG_CXX11
  void set_project(::std::string&& value);
  #endif
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);

  // string domain = 2;
  void clear_domain();
  static const int kDomainFieldNumber = 2;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string workflow = 3;
  void clear_workflow();
  static const int kWorkflowFieldNumber = 3;
  const ::std::string& workflow() const;
  void set_workflow(const ::std::string& value);
  #if LANG_CXX11
  void set_workflow(::std::string&& value);
  #endif
  void set_workflow(const char* value);
  void set_workflow(const char* value, size_t size);
  ::std::string* mutable_workflow();
  ::std::string* release_workflow();
  void set_allocated_workflow(::std::string* workflow);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.WorkflowLevel)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr workflow_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fsettings_2eproto;
};
// -------------------------------------------------------------------

class LaunchplanLevel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.LaunchplanLevel) */ {
 public:
  LaunchplanLevel();
  virtual ~LaunchplanLevel();

  LaunchplanLevel(const LaunchplanLevel& from);

  inline LaunchplanLevel& operator=(const LaunchplanLevel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaunchplanLevel(LaunchplanLevel&& from) noexcept
    : LaunchplanLevel() {
    *this = ::std::move(from);
  }

  inline LaunchplanLevel& operator=(LaunchplanLevel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LaunchplanLevel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaunchplanLevel* internal_default_instance() {
    return reinterpret_cast<const LaunchplanLevel*>(
               &_LaunchplanLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(LaunchplanLevel* other);
  friend void swap(LaunchplanLevel& a, LaunchplanLevel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaunchplanLevel* New() const final {
    return CreateMaybeMessage<LaunchplanLevel>(nullptr);
  }

  LaunchplanLevel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaunchplanLevel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaunchplanLevel& from);
  void MergeFrom(const LaunchplanLevel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchplanLevel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project = 1;
  void clear_project();
  static const int kProjectFieldNumber = 1;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  #if LANG_CXX11
  void set_project(::std::string&& value);
  #endif
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);

  // string domain = 2;
  void clear_domain();
  static const int kDomainFieldNumber = 2;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string workflow = 3;
  void clear_workflow();
  static const int kWorkflowFieldNumber = 3;
  const ::std::string& workflow() const;
  void set_workflow(const ::std::string& value);
  #if LANG_CXX11
  void set_workflow(::std::string&& value);
  #endif
  void set_workflow(const char* value);
  void set_workflow(const char* value, size_t size);
  ::std::string* mutable_workflow();
  ::std::string* release_workflow();
  void set_allocated_workflow(::std::string* workflow);

  // string launchplan = 4;
  void clear_launchplan();
  static const int kLaunchplanFieldNumber = 4;
  const ::std::string& launchplan() const;
  void set_launchplan(const ::std::string& value);
  #if LANG_CXX11
  void set_launchplan(::std::string&& value);
  #endif
  void set_launchplan(const char* value);
  void set_launchplan(const char* value, size_t size);
  ::std::string* mutable_launchplan();
  ::std::string* release_launchplan();
  void set_allocated_launchplan(::std::string* launchplan);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.LaunchplanLevel)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr workflow_;
  ::google::protobuf::internal::ArenaStringPtr launchplan_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fsettings_2eproto;
};
// -------------------------------------------------------------------

class SettingsUpdateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.SettingsUpdateRequest) */ {
 public:
  SettingsUpdateRequest();
  virtual ~SettingsUpdateRequest();

  SettingsUpdateRequest(const SettingsUpdateRequest& from);

  inline SettingsUpdateRequest& operator=(const SettingsUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SettingsUpdateRequest(SettingsUpdateRequest&& from) noexcept
    : SettingsUpdateRequest() {
    *this = ::std::move(from);
  }

  inline SettingsUpdateRequest& operator=(SettingsUpdateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SettingsUpdateRequest& default_instance();

  enum LevelCase {
    kGlobalLevel = 1,
    kProjectLevel = 2,
    kDomainLevel = 3,
    kWorkflowLevel = 4,
    kLaunchplanLevel = 5,
    LEVEL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SettingsUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const SettingsUpdateRequest*>(
               &_SettingsUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(SettingsUpdateRequest* other);
  friend void swap(SettingsUpdateRequest& a, SettingsUpdateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SettingsUpdateRequest* New() const final {
    return CreateMaybeMessage<SettingsUpdateRequest>(nullptr);
  }

  SettingsUpdateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SettingsUpdateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SettingsUpdateRequest& from);
  void MergeFrom(const SettingsUpdateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettingsUpdateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.admin.SettingsCollection settings = 6;
  bool has_settings() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 6;
  const ::flyteidl::admin::SettingsCollection& settings() const;
  ::flyteidl::admin::SettingsCollection* release_settings();
  ::flyteidl::admin::SettingsCollection* mutable_settings();
  void set_allocated_settings(::flyteidl::admin::SettingsCollection* settings);

  // .flyteidl.admin.GlobalLevel global_level = 1;
  bool has_global_level() const;
  void clear_global_level();
  static const int kGlobalLevelFieldNumber = 1;
  const ::flyteidl::admin::GlobalLevel& global_level() const;
  ::flyteidl::admin::GlobalLevel* release_global_level();
  ::flyteidl::admin::GlobalLevel* mutable_global_level();
  void set_allocated_global_level(::flyteidl::admin::GlobalLevel* global_level);

  // .flyteidl.admin.ProjectLevel project_level = 2;
  bool has_project_level() const;
  void clear_project_level();
  static const int kProjectLevelFieldNumber = 2;
  const ::flyteidl::admin::ProjectLevel& project_level() const;
  ::flyteidl::admin::ProjectLevel* release_project_level();
  ::flyteidl::admin::ProjectLevel* mutable_project_level();
  void set_allocated_project_level(::flyteidl::admin::ProjectLevel* project_level);

  // .flyteidl.admin.DomainLevel domain_level = 3;
  bool has_domain_level() const;
  void clear_domain_level();
  static const int kDomainLevelFieldNumber = 3;
  const ::flyteidl::admin::DomainLevel& domain_level() const;
  ::flyteidl::admin::DomainLevel* release_domain_level();
  ::flyteidl::admin::DomainLevel* mutable_domain_level();
  void set_allocated_domain_level(::flyteidl::admin::DomainLevel* domain_level);

  // .flyteidl.admin.WorkflowLevel workflow_level = 4;
  bool has_workflow_level() const;
  void clear_workflow_level();
  static const int kWorkflowLevelFieldNumber = 4;
  const ::flyteidl::admin::WorkflowLevel& workflow_level() const;
  ::flyteidl::admin::WorkflowLevel* release_workflow_level();
  ::flyteidl::admin::WorkflowLevel* mutable_workflow_level();
  void set_allocated_workflow_level(::flyteidl::admin::WorkflowLevel* workflow_level);

  // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
  bool has_launchplan_level() const;
  void clear_launchplan_level();
  static const int kLaunchplanLevelFieldNumber = 5;
  const ::flyteidl::admin::LaunchplanLevel& launchplan_level() const;
  ::flyteidl::admin::LaunchplanLevel* release_launchplan_level();
  ::flyteidl::admin::LaunchplanLevel* mutable_launchplan_level();
  void set_allocated_launchplan_level(::flyteidl::admin::LaunchplanLevel* launchplan_level);

  void clear_level();
  LevelCase level_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.admin.SettingsUpdateRequest)
 private:
  class HasBitSetters;
  void set_has_global_level();
  void set_has_project_level();
  void set_has_domain_level();
  void set_has_workflow_level();
  void set_has_launchplan_level();

  inline bool has_level() const;
  inline void clear_has_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::admin::SettingsCollection* settings_;
  union LevelUnion {
    LevelUnion() {}
    ::flyteidl::admin::GlobalLevel* global_level_;
    ::flyteidl::admin::ProjectLevel* project_level_;
    ::flyteidl::admin::DomainLevel* domain_level_;
    ::flyteidl::admin::WorkflowLevel* workflow_level_;
    ::flyteidl::admin::LaunchplanLevel* launchplan_level_;
  } level_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fadmin_2fsettings_2eproto;
};
// -------------------------------------------------------------------

class FullSettingsUpdateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.FullSettingsUpdateRequest) */ {
 public:
  FullSettingsUpdateRequest();
  virtual ~FullSettingsUpdateRequest();

  FullSettingsUpdateRequest(const FullSettingsUpdateRequest& from);

  inline FullSettingsUpdateRequest& operator=(const FullSettingsUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FullSettingsUpdateRequest(FullSettingsUpdateRequest&& from) noexcept
    : FullSettingsUpdateRequest() {
    *this = ::std::move(from);
  }

  inline FullSettingsUpdateRequest& operator=(FullSettingsUpdateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FullSettingsUpdateRequest& default_instance();

  enum LevelCase {
    kGlobalLevel = 1,
    kProjectLevel = 2,
    kDomainLevel = 3,
    kWorkflowLevel = 4,
    kLaunchplanLevel = 5,
    LEVEL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FullSettingsUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const FullSettingsUpdateRequest*>(
               &_FullSettingsUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(FullSettingsUpdateRequest* other);
  friend void swap(FullSettingsUpdateRequest& a, FullSettingsUpdateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FullSettingsUpdateRequest* New() const final {
    return CreateMaybeMessage<FullSettingsUpdateRequest>(nullptr);
  }

  FullSettingsUpdateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FullSettingsUpdateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FullSettingsUpdateRequest& from);
  void MergeFrom(const FullSettingsUpdateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FullSettingsUpdateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.admin.SettingsCollection settings = 6;
  bool has_settings() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 6;
  const ::flyteidl::admin::SettingsCollection& settings() const;
  ::flyteidl::admin::SettingsCollection* release_settings();
  ::flyteidl::admin::SettingsCollection* mutable_settings();
  void set_allocated_settings(::flyteidl::admin::SettingsCollection* settings);

  // .flyteidl.admin.GlobalLevel global_level = 1;
  bool has_global_level() const;
  void clear_global_level();
  static const int kGlobalLevelFieldNumber = 1;
  const ::flyteidl::admin::GlobalLevel& global_level() const;
  ::flyteidl::admin::GlobalLevel* release_global_level();
  ::flyteidl::admin::GlobalLevel* mutable_global_level();
  void set_allocated_global_level(::flyteidl::admin::GlobalLevel* global_level);

  // .flyteidl.admin.ProjectLevel project_level = 2;
  bool has_project_level() const;
  void clear_project_level();
  static const int kProjectLevelFieldNumber = 2;
  const ::flyteidl::admin::ProjectLevel& project_level() const;
  ::flyteidl::admin::ProjectLevel* release_project_level();
  ::flyteidl::admin::ProjectLevel* mutable_project_level();
  void set_allocated_project_level(::flyteidl::admin::ProjectLevel* project_level);

  // .flyteidl.admin.DomainLevel domain_level = 3;
  bool has_domain_level() const;
  void clear_domain_level();
  static const int kDomainLevelFieldNumber = 3;
  const ::flyteidl::admin::DomainLevel& domain_level() const;
  ::flyteidl::admin::DomainLevel* release_domain_level();
  ::flyteidl::admin::DomainLevel* mutable_domain_level();
  void set_allocated_domain_level(::flyteidl::admin::DomainLevel* domain_level);

  // .flyteidl.admin.WorkflowLevel workflow_level = 4;
  bool has_workflow_level() const;
  void clear_workflow_level();
  static const int kWorkflowLevelFieldNumber = 4;
  const ::flyteidl::admin::WorkflowLevel& workflow_level() const;
  ::flyteidl::admin::WorkflowLevel* release_workflow_level();
  ::flyteidl::admin::WorkflowLevel* mutable_workflow_level();
  void set_allocated_workflow_level(::flyteidl::admin::WorkflowLevel* workflow_level);

  // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
  bool has_launchplan_level() const;
  void clear_launchplan_level();
  static const int kLaunchplanLevelFieldNumber = 5;
  const ::flyteidl::admin::LaunchplanLevel& launchplan_level() const;
  ::flyteidl::admin::LaunchplanLevel* release_launchplan_level();
  ::flyteidl::admin::LaunchplanLevel* mutable_launchplan_level();
  void set_allocated_launchplan_level(::flyteidl::admin::LaunchplanLevel* launchplan_level);

  void clear_level();
  LevelCase level_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.admin.FullSettingsUpdateRequest)
 private:
  class HasBitSetters;
  void set_has_global_level();
  void set_has_project_level();
  void set_has_domain_level();
  void set_has_workflow_level();
  void set_has_launchplan_level();

  inline bool has_level() const;
  inline void clear_has_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::admin::SettingsCollection* settings_;
  union LevelUnion {
    LevelUnion() {}
    ::flyteidl::admin::GlobalLevel* global_level_;
    ::flyteidl::admin::ProjectLevel* project_level_;
    ::flyteidl::admin::DomainLevel* domain_level_;
    ::flyteidl::admin::WorkflowLevel* workflow_level_;
    ::flyteidl::admin::LaunchplanLevel* launchplan_level_;
  } level_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fadmin_2fsettings_2eproto;
};
// -------------------------------------------------------------------

class FullSettingsUpdateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.FullSettingsUpdateResponse) */ {
 public:
  FullSettingsUpdateResponse();
  virtual ~FullSettingsUpdateResponse();

  FullSettingsUpdateResponse(const FullSettingsUpdateResponse& from);

  inline FullSettingsUpdateResponse& operator=(const FullSettingsUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FullSettingsUpdateResponse(FullSettingsUpdateResponse&& from) noexcept
    : FullSettingsUpdateResponse() {
    *this = ::std::move(from);
  }

  inline FullSettingsUpdateResponse& operator=(FullSettingsUpdateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FullSettingsUpdateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FullSettingsUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const FullSettingsUpdateResponse*>(
               &_FullSettingsUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(FullSettingsUpdateResponse* other);
  friend void swap(FullSettingsUpdateResponse& a, FullSettingsUpdateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FullSettingsUpdateResponse* New() const final {
    return CreateMaybeMessage<FullSettingsUpdateResponse>(nullptr);
  }

  FullSettingsUpdateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FullSettingsUpdateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FullSettingsUpdateResponse& from);
  void MergeFrom(const FullSettingsUpdateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FullSettingsUpdateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.FullSettingsUpdateResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fsettings_2eproto;
};
// -------------------------------------------------------------------

class SettingsGetRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.SettingsGetRequest) */ {
 public:
  SettingsGetRequest();
  virtual ~SettingsGetRequest();

  SettingsGetRequest(const SettingsGetRequest& from);

  inline SettingsGetRequest& operator=(const SettingsGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SettingsGetRequest(SettingsGetRequest&& from) noexcept
    : SettingsGetRequest() {
    *this = ::std::move(from);
  }

  inline SettingsGetRequest& operator=(SettingsGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SettingsGetRequest& default_instance();

  enum LevelCase {
    kGlobalLevel = 1,
    kProjectLevel = 2,
    kDomainLevel = 3,
    kWorkflowLevel = 4,
    kLaunchplanLevel = 5,
    LEVEL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SettingsGetRequest* internal_default_instance() {
    return reinterpret_cast<const SettingsGetRequest*>(
               &_SettingsGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(SettingsGetRequest* other);
  friend void swap(SettingsGetRequest& a, SettingsGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SettingsGetRequest* New() const final {
    return CreateMaybeMessage<SettingsGetRequest>(nullptr);
  }

  SettingsGetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SettingsGetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SettingsGetRequest& from);
  void MergeFrom(const SettingsGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettingsGetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.admin.GlobalLevel global_level = 1;
  bool has_global_level() const;
  void clear_global_level();
  static const int kGlobalLevelFieldNumber = 1;
  const ::flyteidl::admin::GlobalLevel& global_level() const;
  ::flyteidl::admin::GlobalLevel* release_global_level();
  ::flyteidl::admin::GlobalLevel* mutable_global_level();
  void set_allocated_global_level(::flyteidl::admin::GlobalLevel* global_level);

  // .flyteidl.admin.ProjectLevel project_level = 2;
  bool has_project_level() const;
  void clear_project_level();
  static const int kProjectLevelFieldNumber = 2;
  const ::flyteidl::admin::ProjectLevel& project_level() const;
  ::flyteidl::admin::ProjectLevel* release_project_level();
  ::flyteidl::admin::ProjectLevel* mutable_project_level();
  void set_allocated_project_level(::flyteidl::admin::ProjectLevel* project_level);

  // .flyteidl.admin.DomainLevel domain_level = 3;
  bool has_domain_level() const;
  void clear_domain_level();
  static const int kDomainLevelFieldNumber = 3;
  const ::flyteidl::admin::DomainLevel& domain_level() const;
  ::flyteidl::admin::DomainLevel* release_domain_level();
  ::flyteidl::admin::DomainLevel* mutable_domain_level();
  void set_allocated_domain_level(::flyteidl::admin::DomainLevel* domain_level);

  // .flyteidl.admin.WorkflowLevel workflow_level = 4;
  bool has_workflow_level() const;
  void clear_workflow_level();
  static const int kWorkflowLevelFieldNumber = 4;
  const ::flyteidl::admin::WorkflowLevel& workflow_level() const;
  ::flyteidl::admin::WorkflowLevel* release_workflow_level();
  ::flyteidl::admin::WorkflowLevel* mutable_workflow_level();
  void set_allocated_workflow_level(::flyteidl::admin::WorkflowLevel* workflow_level);

  // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
  bool has_launchplan_level() const;
  void clear_launchplan_level();
  static const int kLaunchplanLevelFieldNumber = 5;
  const ::flyteidl::admin::LaunchplanLevel& launchplan_level() const;
  ::flyteidl::admin::LaunchplanLevel* release_launchplan_level();
  ::flyteidl::admin::LaunchplanLevel* mutable_launchplan_level();
  void set_allocated_launchplan_level(::flyteidl::admin::LaunchplanLevel* launchplan_level);

  void clear_level();
  LevelCase level_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.admin.SettingsGetRequest)
 private:
  class HasBitSetters;
  void set_has_global_level();
  void set_has_project_level();
  void set_has_domain_level();
  void set_has_workflow_level();
  void set_has_launchplan_level();

  inline bool has_level() const;
  inline void clear_has_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union LevelUnion {
    LevelUnion() {}
    ::flyteidl::admin::GlobalLevel* global_level_;
    ::flyteidl::admin::ProjectLevel* project_level_;
    ::flyteidl::admin::DomainLevel* domain_level_;
    ::flyteidl::admin::WorkflowLevel* workflow_level_;
    ::flyteidl::admin::LaunchplanLevel* launchplan_level_;
  } level_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fadmin_2fsettings_2eproto;
};
// -------------------------------------------------------------------

class SettingsGetResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.SettingsGetResponse) */ {
 public:
  SettingsGetResponse();
  virtual ~SettingsGetResponse();

  SettingsGetResponse(const SettingsGetResponse& from);

  inline SettingsGetResponse& operator=(const SettingsGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SettingsGetResponse(SettingsGetResponse&& from) noexcept
    : SettingsGetResponse() {
    *this = ::std::move(from);
  }

  inline SettingsGetResponse& operator=(SettingsGetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SettingsGetResponse& default_instance();

  enum LevelCase {
    kGlobalLevel = 1,
    kProjectLevel = 2,
    kDomainLevel = 3,
    kWorkflowLevel = 4,
    kLaunchplanLevel = 5,
    LEVEL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SettingsGetResponse* internal_default_instance() {
    return reinterpret_cast<const SettingsGetResponse*>(
               &_SettingsGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(SettingsGetResponse* other);
  friend void swap(SettingsGetResponse& a, SettingsGetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SettingsGetResponse* New() const final {
    return CreateMaybeMessage<SettingsGetResponse>(nullptr);
  }

  SettingsGetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SettingsGetResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SettingsGetResponse& from);
  void MergeFrom(const SettingsGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettingsGetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.admin.SettingsCollection settings = 6;
  bool has_settings() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 6;
  const ::flyteidl::admin::SettingsCollection& settings() const;
  ::flyteidl::admin::SettingsCollection* release_settings();
  ::flyteidl::admin::SettingsCollection* mutable_settings();
  void set_allocated_settings(::flyteidl::admin::SettingsCollection* settings);

  // .flyteidl.admin.GlobalLevel global_level = 1;
  bool has_global_level() const;
  void clear_global_level();
  static const int kGlobalLevelFieldNumber = 1;
  const ::flyteidl::admin::GlobalLevel& global_level() const;
  ::flyteidl::admin::GlobalLevel* release_global_level();
  ::flyteidl::admin::GlobalLevel* mutable_global_level();
  void set_allocated_global_level(::flyteidl::admin::GlobalLevel* global_level);

  // .flyteidl.admin.ProjectLevel project_level = 2;
  bool has_project_level() const;
  void clear_project_level();
  static const int kProjectLevelFieldNumber = 2;
  const ::flyteidl::admin::ProjectLevel& project_level() const;
  ::flyteidl::admin::ProjectLevel* release_project_level();
  ::flyteidl::admin::ProjectLevel* mutable_project_level();
  void set_allocated_project_level(::flyteidl::admin::ProjectLevel* project_level);

  // .flyteidl.admin.DomainLevel domain_level = 3;
  bool has_domain_level() const;
  void clear_domain_level();
  static const int kDomainLevelFieldNumber = 3;
  const ::flyteidl::admin::DomainLevel& domain_level() const;
  ::flyteidl::admin::DomainLevel* release_domain_level();
  ::flyteidl::admin::DomainLevel* mutable_domain_level();
  void set_allocated_domain_level(::flyteidl::admin::DomainLevel* domain_level);

  // .flyteidl.admin.WorkflowLevel workflow_level = 4;
  bool has_workflow_level() const;
  void clear_workflow_level();
  static const int kWorkflowLevelFieldNumber = 4;
  const ::flyteidl::admin::WorkflowLevel& workflow_level() const;
  ::flyteidl::admin::WorkflowLevel* release_workflow_level();
  ::flyteidl::admin::WorkflowLevel* mutable_workflow_level();
  void set_allocated_workflow_level(::flyteidl::admin::WorkflowLevel* workflow_level);

  // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
  bool has_launchplan_level() const;
  void clear_launchplan_level();
  static const int kLaunchplanLevelFieldNumber = 5;
  const ::flyteidl::admin::LaunchplanLevel& launchplan_level() const;
  ::flyteidl::admin::LaunchplanLevel* release_launchplan_level();
  ::flyteidl::admin::LaunchplanLevel* mutable_launchplan_level();
  void set_allocated_launchplan_level(::flyteidl::admin::LaunchplanLevel* launchplan_level);

  void clear_level();
  LevelCase level_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.admin.SettingsGetResponse)
 private:
  class HasBitSetters;
  void set_has_global_level();
  void set_has_project_level();
  void set_has_domain_level();
  void set_has_workflow_level();
  void set_has_launchplan_level();

  inline bool has_level() const;
  inline void clear_has_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::admin::SettingsCollection* settings_;
  union LevelUnion {
    LevelUnion() {}
    ::flyteidl::admin::GlobalLevel* global_level_;
    ::flyteidl::admin::ProjectLevel* project_level_;
    ::flyteidl::admin::DomainLevel* domain_level_;
    ::flyteidl::admin::WorkflowLevel* workflow_level_;
    ::flyteidl::admin::LaunchplanLevel* launchplan_level_;
  } level_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fadmin_2fsettings_2eproto;
};
// -------------------------------------------------------------------

class FullSettingsGetRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.FullSettingsGetRequest) */ {
 public:
  FullSettingsGetRequest();
  virtual ~FullSettingsGetRequest();

  FullSettingsGetRequest(const FullSettingsGetRequest& from);

  inline FullSettingsGetRequest& operator=(const FullSettingsGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FullSettingsGetRequest(FullSettingsGetRequest&& from) noexcept
    : FullSettingsGetRequest() {
    *this = ::std::move(from);
  }

  inline FullSettingsGetRequest& operator=(FullSettingsGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FullSettingsGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FullSettingsGetRequest* internal_default_instance() {
    return reinterpret_cast<const FullSettingsGetRequest*>(
               &_FullSettingsGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(FullSettingsGetRequest* other);
  friend void swap(FullSettingsGetRequest& a, FullSettingsGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FullSettingsGetRequest* New() const final {
    return CreateMaybeMessage<FullSettingsGetRequest>(nullptr);
  }

  FullSettingsGetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FullSettingsGetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FullSettingsGetRequest& from);
  void MergeFrom(const FullSettingsGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FullSettingsGetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.FullSettingsGetRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fsettings_2eproto;
};
// -------------------------------------------------------------------

class FullSettingsGetResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.FullSettingsGetResponse) */ {
 public:
  FullSettingsGetResponse();
  virtual ~FullSettingsGetResponse();

  FullSettingsGetResponse(const FullSettingsGetResponse& from);

  inline FullSettingsGetResponse& operator=(const FullSettingsGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FullSettingsGetResponse(FullSettingsGetResponse&& from) noexcept
    : FullSettingsGetResponse() {
    *this = ::std::move(from);
  }

  inline FullSettingsGetResponse& operator=(FullSettingsGetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FullSettingsGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FullSettingsGetResponse* internal_default_instance() {
    return reinterpret_cast<const FullSettingsGetResponse*>(
               &_FullSettingsGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(FullSettingsGetResponse* other);
  friend void swap(FullSettingsGetResponse& a, FullSettingsGetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FullSettingsGetResponse* New() const final {
    return CreateMaybeMessage<FullSettingsGetResponse>(nullptr);
  }

  FullSettingsGetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FullSettingsGetResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FullSettingsGetResponse& from);
  void MergeFrom(const FullSettingsGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FullSettingsGetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.admin.Settings settings = 1;
  bool has_settings() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 1;
  const ::flyteidl::admin::Settings& settings() const;
  ::flyteidl::admin::Settings* release_settings();
  ::flyteidl::admin::Settings* mutable_settings();
  void set_allocated_settings(::flyteidl::admin::Settings* settings);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.FullSettingsGetResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::admin::Settings* settings_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fsettings_2eproto;
};
// -------------------------------------------------------------------

class SettingsDeleteRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.SettingsDeleteRequest) */ {
 public:
  SettingsDeleteRequest();
  virtual ~SettingsDeleteRequest();

  SettingsDeleteRequest(const SettingsDeleteRequest& from);

  inline SettingsDeleteRequest& operator=(const SettingsDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SettingsDeleteRequest(SettingsDeleteRequest&& from) noexcept
    : SettingsDeleteRequest() {
    *this = ::std::move(from);
  }

  inline SettingsDeleteRequest& operator=(SettingsDeleteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SettingsDeleteRequest& default_instance();

  enum LevelCase {
    kGlobalLevel = 1,
    kProjectLevel = 2,
    kDomainLevel = 3,
    kWorkflowLevel = 4,
    kLaunchplanLevel = 5,
    LEVEL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SettingsDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const SettingsDeleteRequest*>(
               &_SettingsDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(SettingsDeleteRequest* other);
  friend void swap(SettingsDeleteRequest& a, SettingsDeleteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SettingsDeleteRequest* New() const final {
    return CreateMaybeMessage<SettingsDeleteRequest>(nullptr);
  }

  SettingsDeleteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SettingsDeleteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SettingsDeleteRequest& from);
  void MergeFrom(const SettingsDeleteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettingsDeleteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.admin.GlobalLevel global_level = 1;
  bool has_global_level() const;
  void clear_global_level();
  static const int kGlobalLevelFieldNumber = 1;
  const ::flyteidl::admin::GlobalLevel& global_level() const;
  ::flyteidl::admin::GlobalLevel* release_global_level();
  ::flyteidl::admin::GlobalLevel* mutable_global_level();
  void set_allocated_global_level(::flyteidl::admin::GlobalLevel* global_level);

  // .flyteidl.admin.ProjectLevel project_level = 2;
  bool has_project_level() const;
  void clear_project_level();
  static const int kProjectLevelFieldNumber = 2;
  const ::flyteidl::admin::ProjectLevel& project_level() const;
  ::flyteidl::admin::ProjectLevel* release_project_level();
  ::flyteidl::admin::ProjectLevel* mutable_project_level();
  void set_allocated_project_level(::flyteidl::admin::ProjectLevel* project_level);

  // .flyteidl.admin.DomainLevel domain_level = 3;
  bool has_domain_level() const;
  void clear_domain_level();
  static const int kDomainLevelFieldNumber = 3;
  const ::flyteidl::admin::DomainLevel& domain_level() const;
  ::flyteidl::admin::DomainLevel* release_domain_level();
  ::flyteidl::admin::DomainLevel* mutable_domain_level();
  void set_allocated_domain_level(::flyteidl::admin::DomainLevel* domain_level);

  // .flyteidl.admin.WorkflowLevel workflow_level = 4;
  bool has_workflow_level() const;
  void clear_workflow_level();
  static const int kWorkflowLevelFieldNumber = 4;
  const ::flyteidl::admin::WorkflowLevel& workflow_level() const;
  ::flyteidl::admin::WorkflowLevel* release_workflow_level();
  ::flyteidl::admin::WorkflowLevel* mutable_workflow_level();
  void set_allocated_workflow_level(::flyteidl::admin::WorkflowLevel* workflow_level);

  // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
  bool has_launchplan_level() const;
  void clear_launchplan_level();
  static const int kLaunchplanLevelFieldNumber = 5;
  const ::flyteidl::admin::LaunchplanLevel& launchplan_level() const;
  ::flyteidl::admin::LaunchplanLevel* release_launchplan_level();
  ::flyteidl::admin::LaunchplanLevel* mutable_launchplan_level();
  void set_allocated_launchplan_level(::flyteidl::admin::LaunchplanLevel* launchplan_level);

  void clear_level();
  LevelCase level_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.admin.SettingsDeleteRequest)
 private:
  class HasBitSetters;
  void set_has_global_level();
  void set_has_project_level();
  void set_has_domain_level();
  void set_has_workflow_level();
  void set_has_launchplan_level();

  inline bool has_level() const;
  inline void clear_has_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union LevelUnion {
    LevelUnion() {}
    ::flyteidl::admin::GlobalLevel* global_level_;
    ::flyteidl::admin::ProjectLevel* project_level_;
    ::flyteidl::admin::DomainLevel* domain_level_;
    ::flyteidl::admin::WorkflowLevel* workflow_level_;
    ::flyteidl::admin::LaunchplanLevel* launchplan_level_;
  } level_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fadmin_2fsettings_2eproto;
};
// -------------------------------------------------------------------

class SettingsDeleteResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.SettingsDeleteResponse) */ {
 public:
  SettingsDeleteResponse();
  virtual ~SettingsDeleteResponse();

  SettingsDeleteResponse(const SettingsDeleteResponse& from);

  inline SettingsDeleteResponse& operator=(const SettingsDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SettingsDeleteResponse(SettingsDeleteResponse&& from) noexcept
    : SettingsDeleteResponse() {
    *this = ::std::move(from);
  }

  inline SettingsDeleteResponse& operator=(SettingsDeleteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SettingsDeleteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SettingsDeleteResponse* internal_default_instance() {
    return reinterpret_cast<const SettingsDeleteResponse*>(
               &_SettingsDeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(SettingsDeleteResponse* other);
  friend void swap(SettingsDeleteResponse& a, SettingsDeleteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SettingsDeleteResponse* New() const final {
    return CreateMaybeMessage<SettingsDeleteResponse>(nullptr);
  }

  SettingsDeleteResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SettingsDeleteResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SettingsDeleteResponse& from);
  void MergeFrom(const SettingsDeleteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettingsDeleteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.SettingsDeleteResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fsettings_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SettingsCollection

// .flyteidl.admin.TaskResourceAttributes task_resource_settings = 1;
inline bool SettingsCollection::has_task_resource_settings() const {
  return this != internal_default_instance() && task_resource_settings_ != nullptr;
}
inline const ::flyteidl::admin::TaskResourceAttributes& SettingsCollection::task_resource_settings() const {
  const ::flyteidl::admin::TaskResourceAttributes* p = task_resource_settings_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsCollection.task_resource_settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::TaskResourceAttributes*>(
      &::flyteidl::admin::_TaskResourceAttributes_default_instance_);
}
inline ::flyteidl::admin::TaskResourceAttributes* SettingsCollection::release_task_resource_settings() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsCollection.task_resource_settings)
  
  ::flyteidl::admin::TaskResourceAttributes* temp = task_resource_settings_;
  task_resource_settings_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::TaskResourceAttributes* SettingsCollection::mutable_task_resource_settings() {
  
  if (task_resource_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::TaskResourceAttributes>(GetArenaNoVirtual());
    task_resource_settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsCollection.task_resource_settings)
  return task_resource_settings_;
}
inline void SettingsCollection::set_allocated_task_resource_settings(::flyteidl::admin::TaskResourceAttributes* task_resource_settings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(task_resource_settings_);
  }
  if (task_resource_settings) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task_resource_settings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task_resource_settings, submessage_arena);
    }
    
  } else {
    
  }
  task_resource_settings_ = task_resource_settings;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsCollection.task_resource_settings)
}

// .flyteidl.admin.ClusterResourceAttributes cluster_resource_settings = 2;
inline bool SettingsCollection::has_cluster_resource_settings() const {
  return this != internal_default_instance() && cluster_resource_settings_ != nullptr;
}
inline const ::flyteidl::admin::ClusterResourceAttributes& SettingsCollection::cluster_resource_settings() const {
  const ::flyteidl::admin::ClusterResourceAttributes* p = cluster_resource_settings_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsCollection.cluster_resource_settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::ClusterResourceAttributes*>(
      &::flyteidl::admin::_ClusterResourceAttributes_default_instance_);
}
inline ::flyteidl::admin::ClusterResourceAttributes* SettingsCollection::release_cluster_resource_settings() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsCollection.cluster_resource_settings)
  
  ::flyteidl::admin::ClusterResourceAttributes* temp = cluster_resource_settings_;
  cluster_resource_settings_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::ClusterResourceAttributes* SettingsCollection::mutable_cluster_resource_settings() {
  
  if (cluster_resource_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::ClusterResourceAttributes>(GetArenaNoVirtual());
    cluster_resource_settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsCollection.cluster_resource_settings)
  return cluster_resource_settings_;
}
inline void SettingsCollection::set_allocated_cluster_resource_settings(::flyteidl::admin::ClusterResourceAttributes* cluster_resource_settings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cluster_resource_settings_);
  }
  if (cluster_resource_settings) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cluster_resource_settings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cluster_resource_settings, submessage_arena);
    }
    
  } else {
    
  }
  cluster_resource_settings_ = cluster_resource_settings;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsCollection.cluster_resource_settings)
}

// .flyteidl.admin.ExecutionQueueAttributes execution_queue_settings = 3;
inline bool SettingsCollection::has_execution_queue_settings() const {
  return this != internal_default_instance() && execution_queue_settings_ != nullptr;
}
inline const ::flyteidl::admin::ExecutionQueueAttributes& SettingsCollection::execution_queue_settings() const {
  const ::flyteidl::admin::ExecutionQueueAttributes* p = execution_queue_settings_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsCollection.execution_queue_settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::ExecutionQueueAttributes*>(
      &::flyteidl::admin::_ExecutionQueueAttributes_default_instance_);
}
inline ::flyteidl::admin::ExecutionQueueAttributes* SettingsCollection::release_execution_queue_settings() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsCollection.execution_queue_settings)
  
  ::flyteidl::admin::ExecutionQueueAttributes* temp = execution_queue_settings_;
  execution_queue_settings_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::ExecutionQueueAttributes* SettingsCollection::mutable_execution_queue_settings() {
  
  if (execution_queue_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::ExecutionQueueAttributes>(GetArenaNoVirtual());
    execution_queue_settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsCollection.execution_queue_settings)
  return execution_queue_settings_;
}
inline void SettingsCollection::set_allocated_execution_queue_settings(::flyteidl::admin::ExecutionQueueAttributes* execution_queue_settings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(execution_queue_settings_);
  }
  if (execution_queue_settings) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      execution_queue_settings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, execution_queue_settings, submessage_arena);
    }
    
  } else {
    
  }
  execution_queue_settings_ = execution_queue_settings;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsCollection.execution_queue_settings)
}

// .flyteidl.admin.ExecutionClusterLabel execution_cluster_label_settings = 4;
inline bool SettingsCollection::has_execution_cluster_label_settings() const {
  return this != internal_default_instance() && execution_cluster_label_settings_ != nullptr;
}
inline const ::flyteidl::admin::ExecutionClusterLabel& SettingsCollection::execution_cluster_label_settings() const {
  const ::flyteidl::admin::ExecutionClusterLabel* p = execution_cluster_label_settings_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsCollection.execution_cluster_label_settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::ExecutionClusterLabel*>(
      &::flyteidl::admin::_ExecutionClusterLabel_default_instance_);
}
inline ::flyteidl::admin::ExecutionClusterLabel* SettingsCollection::release_execution_cluster_label_settings() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsCollection.execution_cluster_label_settings)
  
  ::flyteidl::admin::ExecutionClusterLabel* temp = execution_cluster_label_settings_;
  execution_cluster_label_settings_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::ExecutionClusterLabel* SettingsCollection::mutable_execution_cluster_label_settings() {
  
  if (execution_cluster_label_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::ExecutionClusterLabel>(GetArenaNoVirtual());
    execution_cluster_label_settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsCollection.execution_cluster_label_settings)
  return execution_cluster_label_settings_;
}
inline void SettingsCollection::set_allocated_execution_cluster_label_settings(::flyteidl::admin::ExecutionClusterLabel* execution_cluster_label_settings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(execution_cluster_label_settings_);
  }
  if (execution_cluster_label_settings) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      execution_cluster_label_settings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, execution_cluster_label_settings, submessage_arena);
    }
    
  } else {
    
  }
  execution_cluster_label_settings_ = execution_cluster_label_settings;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsCollection.execution_cluster_label_settings)
}

// .flyteidl.core.QualityOfService quality_of_service_settings = 5;
inline bool SettingsCollection::has_quality_of_service_settings() const {
  return this != internal_default_instance() && quality_of_service_settings_ != nullptr;
}
inline const ::flyteidl::core::QualityOfService& SettingsCollection::quality_of_service_settings() const {
  const ::flyteidl::core::QualityOfService* p = quality_of_service_settings_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsCollection.quality_of_service_settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::QualityOfService*>(
      &::flyteidl::core::_QualityOfService_default_instance_);
}
inline ::flyteidl::core::QualityOfService* SettingsCollection::release_quality_of_service_settings() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsCollection.quality_of_service_settings)
  
  ::flyteidl::core::QualityOfService* temp = quality_of_service_settings_;
  quality_of_service_settings_ = nullptr;
  return temp;
}
inline ::flyteidl::core::QualityOfService* SettingsCollection::mutable_quality_of_service_settings() {
  
  if (quality_of_service_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::QualityOfService>(GetArenaNoVirtual());
    quality_of_service_settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsCollection.quality_of_service_settings)
  return quality_of_service_settings_;
}
inline void SettingsCollection::set_allocated_quality_of_service_settings(::flyteidl::core::QualityOfService* quality_of_service_settings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(quality_of_service_settings_);
  }
  if (quality_of_service_settings) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quality_of_service_settings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quality_of_service_settings, submessage_arena);
    }
    
  } else {
    
  }
  quality_of_service_settings_ = quality_of_service_settings;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsCollection.quality_of_service_settings)
}

// .flyteidl.admin.PluginOverride plugin_override_settings = 6;
inline bool SettingsCollection::has_plugin_override_settings() const {
  return this != internal_default_instance() && plugin_override_settings_ != nullptr;
}
inline const ::flyteidl::admin::PluginOverride& SettingsCollection::plugin_override_settings() const {
  const ::flyteidl::admin::PluginOverride* p = plugin_override_settings_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsCollection.plugin_override_settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::PluginOverride*>(
      &::flyteidl::admin::_PluginOverride_default_instance_);
}
inline ::flyteidl::admin::PluginOverride* SettingsCollection::release_plugin_override_settings() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsCollection.plugin_override_settings)
  
  ::flyteidl::admin::PluginOverride* temp = plugin_override_settings_;
  plugin_override_settings_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::PluginOverride* SettingsCollection::mutable_plugin_override_settings() {
  
  if (plugin_override_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::PluginOverride>(GetArenaNoVirtual());
    plugin_override_settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsCollection.plugin_override_settings)
  return plugin_override_settings_;
}
inline void SettingsCollection::set_allocated_plugin_override_settings(::flyteidl::admin::PluginOverride* plugin_override_settings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(plugin_override_settings_);
  }
  if (plugin_override_settings) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      plugin_override_settings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, plugin_override_settings, submessage_arena);
    }
    
  } else {
    
  }
  plugin_override_settings_ = plugin_override_settings;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsCollection.plugin_override_settings)
}

// .flyteidl.admin.WorkflowExecutionConfig workflow_execution_settings = 7;
inline bool SettingsCollection::has_workflow_execution_settings() const {
  return this != internal_default_instance() && workflow_execution_settings_ != nullptr;
}
inline const ::flyteidl::admin::WorkflowExecutionConfig& SettingsCollection::workflow_execution_settings() const {
  const ::flyteidl::admin::WorkflowExecutionConfig* p = workflow_execution_settings_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsCollection.workflow_execution_settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::WorkflowExecutionConfig*>(
      &::flyteidl::admin::_WorkflowExecutionConfig_default_instance_);
}
inline ::flyteidl::admin::WorkflowExecutionConfig* SettingsCollection::release_workflow_execution_settings() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsCollection.workflow_execution_settings)
  
  ::flyteidl::admin::WorkflowExecutionConfig* temp = workflow_execution_settings_;
  workflow_execution_settings_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::WorkflowExecutionConfig* SettingsCollection::mutable_workflow_execution_settings() {
  
  if (workflow_execution_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::WorkflowExecutionConfig>(GetArenaNoVirtual());
    workflow_execution_settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsCollection.workflow_execution_settings)
  return workflow_execution_settings_;
}
inline void SettingsCollection::set_allocated_workflow_execution_settings(::flyteidl::admin::WorkflowExecutionConfig* workflow_execution_settings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(workflow_execution_settings_);
  }
  if (workflow_execution_settings) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      workflow_execution_settings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, workflow_execution_settings, submessage_arena);
    }
    
  } else {
    
  }
  workflow_execution_settings_ = workflow_execution_settings;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsCollection.workflow_execution_settings)
}

// .flyteidl.admin.ClusterAssignment cluster_assignment_settings = 8;
inline bool SettingsCollection::has_cluster_assignment_settings() const {
  return this != internal_default_instance() && cluster_assignment_settings_ != nullptr;
}
inline const ::flyteidl::admin::ClusterAssignment& SettingsCollection::cluster_assignment_settings() const {
  const ::flyteidl::admin::ClusterAssignment* p = cluster_assignment_settings_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsCollection.cluster_assignment_settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::ClusterAssignment*>(
      &::flyteidl::admin::_ClusterAssignment_default_instance_);
}
inline ::flyteidl::admin::ClusterAssignment* SettingsCollection::release_cluster_assignment_settings() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsCollection.cluster_assignment_settings)
  
  ::flyteidl::admin::ClusterAssignment* temp = cluster_assignment_settings_;
  cluster_assignment_settings_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::ClusterAssignment* SettingsCollection::mutable_cluster_assignment_settings() {
  
  if (cluster_assignment_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::ClusterAssignment>(GetArenaNoVirtual());
    cluster_assignment_settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsCollection.cluster_assignment_settings)
  return cluster_assignment_settings_;
}
inline void SettingsCollection::set_allocated_cluster_assignment_settings(::flyteidl::admin::ClusterAssignment* cluster_assignment_settings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cluster_assignment_settings_);
  }
  if (cluster_assignment_settings) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cluster_assignment_settings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cluster_assignment_settings, submessage_arena);
    }
    
  } else {
    
  }
  cluster_assignment_settings_ = cluster_assignment_settings;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsCollection.cluster_assignment_settings)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Settings

// .flyteidl.admin.SettingsCollection global = 1;
inline bool Settings::has_global() const {
  return this != internal_default_instance() && global_ != nullptr;
}
inline void Settings::clear_global() {
  if (GetArenaNoVirtual() == nullptr && global_ != nullptr) {
    delete global_;
  }
  global_ = nullptr;
}
inline const ::flyteidl::admin::SettingsCollection& Settings::global() const {
  const ::flyteidl::admin::SettingsCollection* p = global_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.Settings.global)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::SettingsCollection*>(
      &::flyteidl::admin::_SettingsCollection_default_instance_);
}
inline ::flyteidl::admin::SettingsCollection* Settings::release_global() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Settings.global)
  
  ::flyteidl::admin::SettingsCollection* temp = global_;
  global_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::SettingsCollection* Settings::mutable_global() {
  
  if (global_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::SettingsCollection>(GetArenaNoVirtual());
    global_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Settings.global)
  return global_;
}
inline void Settings::set_allocated_global(::flyteidl::admin::SettingsCollection* global) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete global_;
  }
  if (global) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      global = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, global, submessage_arena);
    }
    
  } else {
    
  }
  global_ = global;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Settings.global)
}

// map<string, .flyteidl.admin.ProjectSettings> project_settings = 2;
inline int Settings::project_settings_size() const {
  return project_settings_.size();
}
inline void Settings::clear_project_settings() {
  project_settings_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::flyteidl::admin::ProjectSettings >&
Settings::project_settings() const {
  // @@protoc_insertion_point(field_map:flyteidl.admin.Settings.project_settings)
  return project_settings_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::flyteidl::admin::ProjectSettings >*
Settings::mutable_project_settings() {
  // @@protoc_insertion_point(field_mutable_map:flyteidl.admin.Settings.project_settings)
  return project_settings_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ProjectSettings

// string project = 1;
inline void ProjectSettings::clear_project() {
  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProjectSettings::project() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ProjectSettings.project)
  return project_.GetNoArena();
}
inline void ProjectSettings::set_project(const ::std::string& value) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.ProjectSettings.project)
}
#if LANG_CXX11
inline void ProjectSettings::set_project(::std::string&& value) {
  
  project_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.ProjectSettings.project)
}
#endif
inline void ProjectSettings::set_project(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.ProjectSettings.project)
}
inline void ProjectSettings::set_project(const char* value, size_t size) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.ProjectSettings.project)
}
inline ::std::string* ProjectSettings::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ProjectSettings.project)
  return project_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProjectSettings::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ProjectSettings.project)
  
  return project_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProjectSettings::set_allocated_project(::std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ProjectSettings.project)
}

// .flyteidl.admin.SettingsCollection settings = 2;
inline bool ProjectSettings::has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline void ProjectSettings::clear_settings() {
  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::flyteidl::admin::SettingsCollection& ProjectSettings::settings() const {
  const ::flyteidl::admin::SettingsCollection* p = settings_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.ProjectSettings.settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::SettingsCollection*>(
      &::flyteidl::admin::_SettingsCollection_default_instance_);
}
inline ::flyteidl::admin::SettingsCollection* ProjectSettings::release_settings() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ProjectSettings.settings)
  
  ::flyteidl::admin::SettingsCollection* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::SettingsCollection* ProjectSettings::mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::SettingsCollection>(GetArenaNoVirtual());
    settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ProjectSettings.settings)
  return settings_;
}
inline void ProjectSettings::set_allocated_settings(::flyteidl::admin::SettingsCollection* settings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ProjectSettings.settings)
}

// map<string, .flyteidl.admin.DomainSettings> domain_settings = 3;
inline int ProjectSettings::domain_settings_size() const {
  return domain_settings_.size();
}
inline void ProjectSettings::clear_domain_settings() {
  domain_settings_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::flyteidl::admin::DomainSettings >&
ProjectSettings::domain_settings() const {
  // @@protoc_insertion_point(field_map:flyteidl.admin.ProjectSettings.domain_settings)
  return domain_settings_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::flyteidl::admin::DomainSettings >*
ProjectSettings::mutable_domain_settings() {
  // @@protoc_insertion_point(field_mutable_map:flyteidl.admin.ProjectSettings.domain_settings)
  return domain_settings_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DomainSettings

// string domain = 1;
inline void DomainSettings::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DomainSettings::domain() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.DomainSettings.domain)
  return domain_.GetNoArena();
}
inline void DomainSettings::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.DomainSettings.domain)
}
#if LANG_CXX11
inline void DomainSettings::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.DomainSettings.domain)
}
#endif
inline void DomainSettings::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.DomainSettings.domain)
}
inline void DomainSettings::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.DomainSettings.domain)
}
inline ::std::string* DomainSettings::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.DomainSettings.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DomainSettings::release_domain() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.DomainSettings.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DomainSettings::set_allocated_domain(::std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.DomainSettings.domain)
}

// .flyteidl.admin.SettingsCollection settings = 2;
inline bool DomainSettings::has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline void DomainSettings::clear_settings() {
  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::flyteidl::admin::SettingsCollection& DomainSettings::settings() const {
  const ::flyteidl::admin::SettingsCollection* p = settings_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.DomainSettings.settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::SettingsCollection*>(
      &::flyteidl::admin::_SettingsCollection_default_instance_);
}
inline ::flyteidl::admin::SettingsCollection* DomainSettings::release_settings() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.DomainSettings.settings)
  
  ::flyteidl::admin::SettingsCollection* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::SettingsCollection* DomainSettings::mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::SettingsCollection>(GetArenaNoVirtual());
    settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.DomainSettings.settings)
  return settings_;
}
inline void DomainSettings::set_allocated_settings(::flyteidl::admin::SettingsCollection* settings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.DomainSettings.settings)
}

// map<string, .flyteidl.admin.WorkflowSettings> workflow_settings = 3;
inline int DomainSettings::workflow_settings_size() const {
  return workflow_settings_.size();
}
inline void DomainSettings::clear_workflow_settings() {
  workflow_settings_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::flyteidl::admin::WorkflowSettings >&
DomainSettings::workflow_settings() const {
  // @@protoc_insertion_point(field_map:flyteidl.admin.DomainSettings.workflow_settings)
  return workflow_settings_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::flyteidl::admin::WorkflowSettings >*
DomainSettings::mutable_workflow_settings() {
  // @@protoc_insertion_point(field_mutable_map:flyteidl.admin.DomainSettings.workflow_settings)
  return workflow_settings_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// WorkflowSettings

// string workflow = 1;
inline void WorkflowSettings::clear_workflow() {
  workflow_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WorkflowSettings::workflow() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowSettings.workflow)
  return workflow_.GetNoArena();
}
inline void WorkflowSettings::set_workflow(const ::std::string& value) {
  
  workflow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.WorkflowSettings.workflow)
}
#if LANG_CXX11
inline void WorkflowSettings::set_workflow(::std::string&& value) {
  
  workflow_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.WorkflowSettings.workflow)
}
#endif
inline void WorkflowSettings::set_workflow(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workflow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.WorkflowSettings.workflow)
}
inline void WorkflowSettings::set_workflow(const char* value, size_t size) {
  
  workflow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.WorkflowSettings.workflow)
}
inline ::std::string* WorkflowSettings::mutable_workflow() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowSettings.workflow)
  return workflow_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WorkflowSettings::release_workflow() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowSettings.workflow)
  
  return workflow_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WorkflowSettings::set_allocated_workflow(::std::string* workflow) {
  if (workflow != nullptr) {
    
  } else {
    
  }
  workflow_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), workflow);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowSettings.workflow)
}

// .flyteidl.admin.SettingsCollection settings = 2;
inline bool WorkflowSettings::has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline void WorkflowSettings::clear_settings() {
  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::flyteidl::admin::SettingsCollection& WorkflowSettings::settings() const {
  const ::flyteidl::admin::SettingsCollection* p = settings_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowSettings.settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::SettingsCollection*>(
      &::flyteidl::admin::_SettingsCollection_default_instance_);
}
inline ::flyteidl::admin::SettingsCollection* WorkflowSettings::release_settings() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowSettings.settings)
  
  ::flyteidl::admin::SettingsCollection* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::SettingsCollection* WorkflowSettings::mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::SettingsCollection>(GetArenaNoVirtual());
    settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowSettings.settings)
  return settings_;
}
inline void WorkflowSettings::set_allocated_settings(::flyteidl::admin::SettingsCollection* settings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowSettings.settings)
}

// map<string, .flyteidl.admin.LaunchplanSettings> launchplan_settings = 3;
inline int WorkflowSettings::launchplan_settings_size() const {
  return launchplan_settings_.size();
}
inline void WorkflowSettings::clear_launchplan_settings() {
  launchplan_settings_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::flyteidl::admin::LaunchplanSettings >&
WorkflowSettings::launchplan_settings() const {
  // @@protoc_insertion_point(field_map:flyteidl.admin.WorkflowSettings.launchplan_settings)
  return launchplan_settings_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::flyteidl::admin::LaunchplanSettings >*
WorkflowSettings::mutable_launchplan_settings() {
  // @@protoc_insertion_point(field_mutable_map:flyteidl.admin.WorkflowSettings.launchplan_settings)
  return launchplan_settings_.MutableMap();
}

// -------------------------------------------------------------------

// LaunchplanSettings

// string launchplan = 1;
inline void LaunchplanSettings::clear_launchplan() {
  launchplan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LaunchplanSettings::launchplan() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchplanSettings.launchplan)
  return launchplan_.GetNoArena();
}
inline void LaunchplanSettings::set_launchplan(const ::std::string& value) {
  
  launchplan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchplanSettings.launchplan)
}
#if LANG_CXX11
inline void LaunchplanSettings::set_launchplan(::std::string&& value) {
  
  launchplan_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.LaunchplanSettings.launchplan)
}
#endif
inline void LaunchplanSettings::set_launchplan(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  launchplan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.LaunchplanSettings.launchplan)
}
inline void LaunchplanSettings::set_launchplan(const char* value, size_t size) {
  
  launchplan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.LaunchplanSettings.launchplan)
}
inline ::std::string* LaunchplanSettings::mutable_launchplan() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchplanSettings.launchplan)
  return launchplan_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaunchplanSettings::release_launchplan() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchplanSettings.launchplan)
  
  return launchplan_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaunchplanSettings::set_allocated_launchplan(::std::string* launchplan) {
  if (launchplan != nullptr) {
    
  } else {
    
  }
  launchplan_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), launchplan);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchplanSettings.launchplan)
}

// .flyteidl.admin.SettingsCollection settings = 2;
inline bool LaunchplanSettings::has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline void LaunchplanSettings::clear_settings() {
  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::flyteidl::admin::SettingsCollection& LaunchplanSettings::settings() const {
  const ::flyteidl::admin::SettingsCollection* p = settings_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchplanSettings.settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::SettingsCollection*>(
      &::flyteidl::admin::_SettingsCollection_default_instance_);
}
inline ::flyteidl::admin::SettingsCollection* LaunchplanSettings::release_settings() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchplanSettings.settings)
  
  ::flyteidl::admin::SettingsCollection* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::SettingsCollection* LaunchplanSettings::mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::SettingsCollection>(GetArenaNoVirtual());
    settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchplanSettings.settings)
  return settings_;
}
inline void LaunchplanSettings::set_allocated_settings(::flyteidl::admin::SettingsCollection* settings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchplanSettings.settings)
}

// -------------------------------------------------------------------

// GlobalLevel

// -------------------------------------------------------------------

// ProjectLevel

// string project = 1;
inline void ProjectLevel::clear_project() {
  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProjectLevel::project() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ProjectLevel.project)
  return project_.GetNoArena();
}
inline void ProjectLevel::set_project(const ::std::string& value) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.ProjectLevel.project)
}
#if LANG_CXX11
inline void ProjectLevel::set_project(::std::string&& value) {
  
  project_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.ProjectLevel.project)
}
#endif
inline void ProjectLevel::set_project(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.ProjectLevel.project)
}
inline void ProjectLevel::set_project(const char* value, size_t size) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.ProjectLevel.project)
}
inline ::std::string* ProjectLevel::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ProjectLevel.project)
  return project_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProjectLevel::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ProjectLevel.project)
  
  return project_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProjectLevel::set_allocated_project(::std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ProjectLevel.project)
}

// -------------------------------------------------------------------

// DomainLevel

// string project = 1;
inline void DomainLevel::clear_project() {
  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DomainLevel::project() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.DomainLevel.project)
  return project_.GetNoArena();
}
inline void DomainLevel::set_project(const ::std::string& value) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.DomainLevel.project)
}
#if LANG_CXX11
inline void DomainLevel::set_project(::std::string&& value) {
  
  project_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.DomainLevel.project)
}
#endif
inline void DomainLevel::set_project(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.DomainLevel.project)
}
inline void DomainLevel::set_project(const char* value, size_t size) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.DomainLevel.project)
}
inline ::std::string* DomainLevel::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.DomainLevel.project)
  return project_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DomainLevel::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.DomainLevel.project)
  
  return project_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DomainLevel::set_allocated_project(::std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.DomainLevel.project)
}

// string domain = 2;
inline void DomainLevel::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DomainLevel::domain() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.DomainLevel.domain)
  return domain_.GetNoArena();
}
inline void DomainLevel::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.DomainLevel.domain)
}
#if LANG_CXX11
inline void DomainLevel::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.DomainLevel.domain)
}
#endif
inline void DomainLevel::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.DomainLevel.domain)
}
inline void DomainLevel::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.DomainLevel.domain)
}
inline ::std::string* DomainLevel::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.DomainLevel.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DomainLevel::release_domain() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.DomainLevel.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DomainLevel::set_allocated_domain(::std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.DomainLevel.domain)
}

// -------------------------------------------------------------------

// WorkflowLevel

// string project = 1;
inline void WorkflowLevel::clear_project() {
  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WorkflowLevel::project() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowLevel.project)
  return project_.GetNoArena();
}
inline void WorkflowLevel::set_project(const ::std::string& value) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.WorkflowLevel.project)
}
#if LANG_CXX11
inline void WorkflowLevel::set_project(::std::string&& value) {
  
  project_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.WorkflowLevel.project)
}
#endif
inline void WorkflowLevel::set_project(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.WorkflowLevel.project)
}
inline void WorkflowLevel::set_project(const char* value, size_t size) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.WorkflowLevel.project)
}
inline ::std::string* WorkflowLevel::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowLevel.project)
  return project_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WorkflowLevel::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowLevel.project)
  
  return project_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WorkflowLevel::set_allocated_project(::std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowLevel.project)
}

// string domain = 2;
inline void WorkflowLevel::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WorkflowLevel::domain() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowLevel.domain)
  return domain_.GetNoArena();
}
inline void WorkflowLevel::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.WorkflowLevel.domain)
}
#if LANG_CXX11
inline void WorkflowLevel::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.WorkflowLevel.domain)
}
#endif
inline void WorkflowLevel::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.WorkflowLevel.domain)
}
inline void WorkflowLevel::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.WorkflowLevel.domain)
}
inline ::std::string* WorkflowLevel::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowLevel.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WorkflowLevel::release_domain() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowLevel.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WorkflowLevel::set_allocated_domain(::std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowLevel.domain)
}

// string workflow = 3;
inline void WorkflowLevel::clear_workflow() {
  workflow_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WorkflowLevel::workflow() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowLevel.workflow)
  return workflow_.GetNoArena();
}
inline void WorkflowLevel::set_workflow(const ::std::string& value) {
  
  workflow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.WorkflowLevel.workflow)
}
#if LANG_CXX11
inline void WorkflowLevel::set_workflow(::std::string&& value) {
  
  workflow_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.WorkflowLevel.workflow)
}
#endif
inline void WorkflowLevel::set_workflow(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workflow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.WorkflowLevel.workflow)
}
inline void WorkflowLevel::set_workflow(const char* value, size_t size) {
  
  workflow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.WorkflowLevel.workflow)
}
inline ::std::string* WorkflowLevel::mutable_workflow() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowLevel.workflow)
  return workflow_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WorkflowLevel::release_workflow() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowLevel.workflow)
  
  return workflow_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WorkflowLevel::set_allocated_workflow(::std::string* workflow) {
  if (workflow != nullptr) {
    
  } else {
    
  }
  workflow_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), workflow);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowLevel.workflow)
}

// -------------------------------------------------------------------

// LaunchplanLevel

// string project = 1;
inline void LaunchplanLevel::clear_project() {
  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LaunchplanLevel::project() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchplanLevel.project)
  return project_.GetNoArena();
}
inline void LaunchplanLevel::set_project(const ::std::string& value) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchplanLevel.project)
}
#if LANG_CXX11
inline void LaunchplanLevel::set_project(::std::string&& value) {
  
  project_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.LaunchplanLevel.project)
}
#endif
inline void LaunchplanLevel::set_project(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.LaunchplanLevel.project)
}
inline void LaunchplanLevel::set_project(const char* value, size_t size) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.LaunchplanLevel.project)
}
inline ::std::string* LaunchplanLevel::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchplanLevel.project)
  return project_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaunchplanLevel::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchplanLevel.project)
  
  return project_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaunchplanLevel::set_allocated_project(::std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchplanLevel.project)
}

// string domain = 2;
inline void LaunchplanLevel::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LaunchplanLevel::domain() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchplanLevel.domain)
  return domain_.GetNoArena();
}
inline void LaunchplanLevel::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchplanLevel.domain)
}
#if LANG_CXX11
inline void LaunchplanLevel::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.LaunchplanLevel.domain)
}
#endif
inline void LaunchplanLevel::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.LaunchplanLevel.domain)
}
inline void LaunchplanLevel::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.LaunchplanLevel.domain)
}
inline ::std::string* LaunchplanLevel::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchplanLevel.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaunchplanLevel::release_domain() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchplanLevel.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaunchplanLevel::set_allocated_domain(::std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchplanLevel.domain)
}

// string workflow = 3;
inline void LaunchplanLevel::clear_workflow() {
  workflow_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LaunchplanLevel::workflow() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchplanLevel.workflow)
  return workflow_.GetNoArena();
}
inline void LaunchplanLevel::set_workflow(const ::std::string& value) {
  
  workflow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchplanLevel.workflow)
}
#if LANG_CXX11
inline void LaunchplanLevel::set_workflow(::std::string&& value) {
  
  workflow_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.LaunchplanLevel.workflow)
}
#endif
inline void LaunchplanLevel::set_workflow(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workflow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.LaunchplanLevel.workflow)
}
inline void LaunchplanLevel::set_workflow(const char* value, size_t size) {
  
  workflow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.LaunchplanLevel.workflow)
}
inline ::std::string* LaunchplanLevel::mutable_workflow() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchplanLevel.workflow)
  return workflow_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaunchplanLevel::release_workflow() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchplanLevel.workflow)
  
  return workflow_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaunchplanLevel::set_allocated_workflow(::std::string* workflow) {
  if (workflow != nullptr) {
    
  } else {
    
  }
  workflow_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), workflow);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchplanLevel.workflow)
}

// string launchplan = 4;
inline void LaunchplanLevel::clear_launchplan() {
  launchplan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LaunchplanLevel::launchplan() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LaunchplanLevel.launchplan)
  return launchplan_.GetNoArena();
}
inline void LaunchplanLevel::set_launchplan(const ::std::string& value) {
  
  launchplan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.LaunchplanLevel.launchplan)
}
#if LANG_CXX11
inline void LaunchplanLevel::set_launchplan(::std::string&& value) {
  
  launchplan_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.LaunchplanLevel.launchplan)
}
#endif
inline void LaunchplanLevel::set_launchplan(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  launchplan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.LaunchplanLevel.launchplan)
}
inline void LaunchplanLevel::set_launchplan(const char* value, size_t size) {
  
  launchplan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.LaunchplanLevel.launchplan)
}
inline ::std::string* LaunchplanLevel::mutable_launchplan() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LaunchplanLevel.launchplan)
  return launchplan_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaunchplanLevel::release_launchplan() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LaunchplanLevel.launchplan)
  
  return launchplan_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaunchplanLevel::set_allocated_launchplan(::std::string* launchplan) {
  if (launchplan != nullptr) {
    
  } else {
    
  }
  launchplan_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), launchplan);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LaunchplanLevel.launchplan)
}

// -------------------------------------------------------------------

// SettingsUpdateRequest

// .flyteidl.admin.GlobalLevel global_level = 1;
inline bool SettingsUpdateRequest::has_global_level() const {
  return level_case() == kGlobalLevel;
}
inline void SettingsUpdateRequest::set_has_global_level() {
  _oneof_case_[0] = kGlobalLevel;
}
inline void SettingsUpdateRequest::clear_global_level() {
  if (has_global_level()) {
    delete level_.global_level_;
    clear_has_level();
  }
}
inline ::flyteidl::admin::GlobalLevel* SettingsUpdateRequest::release_global_level() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsUpdateRequest.global_level)
  if (has_global_level()) {
    clear_has_level();
      ::flyteidl::admin::GlobalLevel* temp = level_.global_level_;
    level_.global_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::GlobalLevel& SettingsUpdateRequest::global_level() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsUpdateRequest.global_level)
  return has_global_level()
      ? *level_.global_level_
      : *reinterpret_cast< ::flyteidl::admin::GlobalLevel*>(&::flyteidl::admin::_GlobalLevel_default_instance_);
}
inline ::flyteidl::admin::GlobalLevel* SettingsUpdateRequest::mutable_global_level() {
  if (!has_global_level()) {
    clear_level();
    set_has_global_level();
    level_.global_level_ = CreateMaybeMessage< ::flyteidl::admin::GlobalLevel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsUpdateRequest.global_level)
  return level_.global_level_;
}

// .flyteidl.admin.ProjectLevel project_level = 2;
inline bool SettingsUpdateRequest::has_project_level() const {
  return level_case() == kProjectLevel;
}
inline void SettingsUpdateRequest::set_has_project_level() {
  _oneof_case_[0] = kProjectLevel;
}
inline void SettingsUpdateRequest::clear_project_level() {
  if (has_project_level()) {
    delete level_.project_level_;
    clear_has_level();
  }
}
inline ::flyteidl::admin::ProjectLevel* SettingsUpdateRequest::release_project_level() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsUpdateRequest.project_level)
  if (has_project_level()) {
    clear_has_level();
      ::flyteidl::admin::ProjectLevel* temp = level_.project_level_;
    level_.project_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::ProjectLevel& SettingsUpdateRequest::project_level() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsUpdateRequest.project_level)
  return has_project_level()
      ? *level_.project_level_
      : *reinterpret_cast< ::flyteidl::admin::ProjectLevel*>(&::flyteidl::admin::_ProjectLevel_default_instance_);
}
inline ::flyteidl::admin::ProjectLevel* SettingsUpdateRequest::mutable_project_level() {
  if (!has_project_level()) {
    clear_level();
    set_has_project_level();
    level_.project_level_ = CreateMaybeMessage< ::flyteidl::admin::ProjectLevel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsUpdateRequest.project_level)
  return level_.project_level_;
}

// .flyteidl.admin.DomainLevel domain_level = 3;
inline bool SettingsUpdateRequest::has_domain_level() const {
  return level_case() == kDomainLevel;
}
inline void SettingsUpdateRequest::set_has_domain_level() {
  _oneof_case_[0] = kDomainLevel;
}
inline void SettingsUpdateRequest::clear_domain_level() {
  if (has_domain_level()) {
    delete level_.domain_level_;
    clear_has_level();
  }
}
inline ::flyteidl::admin::DomainLevel* SettingsUpdateRequest::release_domain_level() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsUpdateRequest.domain_level)
  if (has_domain_level()) {
    clear_has_level();
      ::flyteidl::admin::DomainLevel* temp = level_.domain_level_;
    level_.domain_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::DomainLevel& SettingsUpdateRequest::domain_level() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsUpdateRequest.domain_level)
  return has_domain_level()
      ? *level_.domain_level_
      : *reinterpret_cast< ::flyteidl::admin::DomainLevel*>(&::flyteidl::admin::_DomainLevel_default_instance_);
}
inline ::flyteidl::admin::DomainLevel* SettingsUpdateRequest::mutable_domain_level() {
  if (!has_domain_level()) {
    clear_level();
    set_has_domain_level();
    level_.domain_level_ = CreateMaybeMessage< ::flyteidl::admin::DomainLevel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsUpdateRequest.domain_level)
  return level_.domain_level_;
}

// .flyteidl.admin.WorkflowLevel workflow_level = 4;
inline bool SettingsUpdateRequest::has_workflow_level() const {
  return level_case() == kWorkflowLevel;
}
inline void SettingsUpdateRequest::set_has_workflow_level() {
  _oneof_case_[0] = kWorkflowLevel;
}
inline void SettingsUpdateRequest::clear_workflow_level() {
  if (has_workflow_level()) {
    delete level_.workflow_level_;
    clear_has_level();
  }
}
inline ::flyteidl::admin::WorkflowLevel* SettingsUpdateRequest::release_workflow_level() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsUpdateRequest.workflow_level)
  if (has_workflow_level()) {
    clear_has_level();
      ::flyteidl::admin::WorkflowLevel* temp = level_.workflow_level_;
    level_.workflow_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::WorkflowLevel& SettingsUpdateRequest::workflow_level() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsUpdateRequest.workflow_level)
  return has_workflow_level()
      ? *level_.workflow_level_
      : *reinterpret_cast< ::flyteidl::admin::WorkflowLevel*>(&::flyteidl::admin::_WorkflowLevel_default_instance_);
}
inline ::flyteidl::admin::WorkflowLevel* SettingsUpdateRequest::mutable_workflow_level() {
  if (!has_workflow_level()) {
    clear_level();
    set_has_workflow_level();
    level_.workflow_level_ = CreateMaybeMessage< ::flyteidl::admin::WorkflowLevel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsUpdateRequest.workflow_level)
  return level_.workflow_level_;
}

// .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
inline bool SettingsUpdateRequest::has_launchplan_level() const {
  return level_case() == kLaunchplanLevel;
}
inline void SettingsUpdateRequest::set_has_launchplan_level() {
  _oneof_case_[0] = kLaunchplanLevel;
}
inline void SettingsUpdateRequest::clear_launchplan_level() {
  if (has_launchplan_level()) {
    delete level_.launchplan_level_;
    clear_has_level();
  }
}
inline ::flyteidl::admin::LaunchplanLevel* SettingsUpdateRequest::release_launchplan_level() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsUpdateRequest.launchplan_level)
  if (has_launchplan_level()) {
    clear_has_level();
      ::flyteidl::admin::LaunchplanLevel* temp = level_.launchplan_level_;
    level_.launchplan_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::LaunchplanLevel& SettingsUpdateRequest::launchplan_level() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsUpdateRequest.launchplan_level)
  return has_launchplan_level()
      ? *level_.launchplan_level_
      : *reinterpret_cast< ::flyteidl::admin::LaunchplanLevel*>(&::flyteidl::admin::_LaunchplanLevel_default_instance_);
}
inline ::flyteidl::admin::LaunchplanLevel* SettingsUpdateRequest::mutable_launchplan_level() {
  if (!has_launchplan_level()) {
    clear_level();
    set_has_launchplan_level();
    level_.launchplan_level_ = CreateMaybeMessage< ::flyteidl::admin::LaunchplanLevel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsUpdateRequest.launchplan_level)
  return level_.launchplan_level_;
}

// .flyteidl.admin.SettingsCollection settings = 6;
inline bool SettingsUpdateRequest::has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline void SettingsUpdateRequest::clear_settings() {
  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::flyteidl::admin::SettingsCollection& SettingsUpdateRequest::settings() const {
  const ::flyteidl::admin::SettingsCollection* p = settings_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsUpdateRequest.settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::SettingsCollection*>(
      &::flyteidl::admin::_SettingsCollection_default_instance_);
}
inline ::flyteidl::admin::SettingsCollection* SettingsUpdateRequest::release_settings() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsUpdateRequest.settings)
  
  ::flyteidl::admin::SettingsCollection* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::SettingsCollection* SettingsUpdateRequest::mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::SettingsCollection>(GetArenaNoVirtual());
    settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsUpdateRequest.settings)
  return settings_;
}
inline void SettingsUpdateRequest::set_allocated_settings(::flyteidl::admin::SettingsCollection* settings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsUpdateRequest.settings)
}

inline bool SettingsUpdateRequest::has_level() const {
  return level_case() != LEVEL_NOT_SET;
}
inline void SettingsUpdateRequest::clear_has_level() {
  _oneof_case_[0] = LEVEL_NOT_SET;
}
inline SettingsUpdateRequest::LevelCase SettingsUpdateRequest::level_case() const {
  return SettingsUpdateRequest::LevelCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FullSettingsUpdateRequest

// .flyteidl.admin.GlobalLevel global_level = 1;
inline bool FullSettingsUpdateRequest::has_global_level() const {
  return level_case() == kGlobalLevel;
}
inline void FullSettingsUpdateRequest::set_has_global_level() {
  _oneof_case_[0] = kGlobalLevel;
}
inline void FullSettingsUpdateRequest::clear_global_level() {
  if (has_global_level()) {
    delete level_.global_level_;
    clear_has_level();
  }
}
inline ::flyteidl::admin::GlobalLevel* FullSettingsUpdateRequest::release_global_level() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.FullSettingsUpdateRequest.global_level)
  if (has_global_level()) {
    clear_has_level();
      ::flyteidl::admin::GlobalLevel* temp = level_.global_level_;
    level_.global_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::GlobalLevel& FullSettingsUpdateRequest::global_level() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.FullSettingsUpdateRequest.global_level)
  return has_global_level()
      ? *level_.global_level_
      : *reinterpret_cast< ::flyteidl::admin::GlobalLevel*>(&::flyteidl::admin::_GlobalLevel_default_instance_);
}
inline ::flyteidl::admin::GlobalLevel* FullSettingsUpdateRequest::mutable_global_level() {
  if (!has_global_level()) {
    clear_level();
    set_has_global_level();
    level_.global_level_ = CreateMaybeMessage< ::flyteidl::admin::GlobalLevel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.FullSettingsUpdateRequest.global_level)
  return level_.global_level_;
}

// .flyteidl.admin.ProjectLevel project_level = 2;
inline bool FullSettingsUpdateRequest::has_project_level() const {
  return level_case() == kProjectLevel;
}
inline void FullSettingsUpdateRequest::set_has_project_level() {
  _oneof_case_[0] = kProjectLevel;
}
inline void FullSettingsUpdateRequest::clear_project_level() {
  if (has_project_level()) {
    delete level_.project_level_;
    clear_has_level();
  }
}
inline ::flyteidl::admin::ProjectLevel* FullSettingsUpdateRequest::release_project_level() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.FullSettingsUpdateRequest.project_level)
  if (has_project_level()) {
    clear_has_level();
      ::flyteidl::admin::ProjectLevel* temp = level_.project_level_;
    level_.project_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::ProjectLevel& FullSettingsUpdateRequest::project_level() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.FullSettingsUpdateRequest.project_level)
  return has_project_level()
      ? *level_.project_level_
      : *reinterpret_cast< ::flyteidl::admin::ProjectLevel*>(&::flyteidl::admin::_ProjectLevel_default_instance_);
}
inline ::flyteidl::admin::ProjectLevel* FullSettingsUpdateRequest::mutable_project_level() {
  if (!has_project_level()) {
    clear_level();
    set_has_project_level();
    level_.project_level_ = CreateMaybeMessage< ::flyteidl::admin::ProjectLevel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.FullSettingsUpdateRequest.project_level)
  return level_.project_level_;
}

// .flyteidl.admin.DomainLevel domain_level = 3;
inline bool FullSettingsUpdateRequest::has_domain_level() const {
  return level_case() == kDomainLevel;
}
inline void FullSettingsUpdateRequest::set_has_domain_level() {
  _oneof_case_[0] = kDomainLevel;
}
inline void FullSettingsUpdateRequest::clear_domain_level() {
  if (has_domain_level()) {
    delete level_.domain_level_;
    clear_has_level();
  }
}
inline ::flyteidl::admin::DomainLevel* FullSettingsUpdateRequest::release_domain_level() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.FullSettingsUpdateRequest.domain_level)
  if (has_domain_level()) {
    clear_has_level();
      ::flyteidl::admin::DomainLevel* temp = level_.domain_level_;
    level_.domain_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::DomainLevel& FullSettingsUpdateRequest::domain_level() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.FullSettingsUpdateRequest.domain_level)
  return has_domain_level()
      ? *level_.domain_level_
      : *reinterpret_cast< ::flyteidl::admin::DomainLevel*>(&::flyteidl::admin::_DomainLevel_default_instance_);
}
inline ::flyteidl::admin::DomainLevel* FullSettingsUpdateRequest::mutable_domain_level() {
  if (!has_domain_level()) {
    clear_level();
    set_has_domain_level();
    level_.domain_level_ = CreateMaybeMessage< ::flyteidl::admin::DomainLevel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.FullSettingsUpdateRequest.domain_level)
  return level_.domain_level_;
}

// .flyteidl.admin.WorkflowLevel workflow_level = 4;
inline bool FullSettingsUpdateRequest::has_workflow_level() const {
  return level_case() == kWorkflowLevel;
}
inline void FullSettingsUpdateRequest::set_has_workflow_level() {
  _oneof_case_[0] = kWorkflowLevel;
}
inline void FullSettingsUpdateRequest::clear_workflow_level() {
  if (has_workflow_level()) {
    delete level_.workflow_level_;
    clear_has_level();
  }
}
inline ::flyteidl::admin::WorkflowLevel* FullSettingsUpdateRequest::release_workflow_level() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.FullSettingsUpdateRequest.workflow_level)
  if (has_workflow_level()) {
    clear_has_level();
      ::flyteidl::admin::WorkflowLevel* temp = level_.workflow_level_;
    level_.workflow_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::WorkflowLevel& FullSettingsUpdateRequest::workflow_level() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.FullSettingsUpdateRequest.workflow_level)
  return has_workflow_level()
      ? *level_.workflow_level_
      : *reinterpret_cast< ::flyteidl::admin::WorkflowLevel*>(&::flyteidl::admin::_WorkflowLevel_default_instance_);
}
inline ::flyteidl::admin::WorkflowLevel* FullSettingsUpdateRequest::mutable_workflow_level() {
  if (!has_workflow_level()) {
    clear_level();
    set_has_workflow_level();
    level_.workflow_level_ = CreateMaybeMessage< ::flyteidl::admin::WorkflowLevel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.FullSettingsUpdateRequest.workflow_level)
  return level_.workflow_level_;
}

// .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
inline bool FullSettingsUpdateRequest::has_launchplan_level() const {
  return level_case() == kLaunchplanLevel;
}
inline void FullSettingsUpdateRequest::set_has_launchplan_level() {
  _oneof_case_[0] = kLaunchplanLevel;
}
inline void FullSettingsUpdateRequest::clear_launchplan_level() {
  if (has_launchplan_level()) {
    delete level_.launchplan_level_;
    clear_has_level();
  }
}
inline ::flyteidl::admin::LaunchplanLevel* FullSettingsUpdateRequest::release_launchplan_level() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.FullSettingsUpdateRequest.launchplan_level)
  if (has_launchplan_level()) {
    clear_has_level();
      ::flyteidl::admin::LaunchplanLevel* temp = level_.launchplan_level_;
    level_.launchplan_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::LaunchplanLevel& FullSettingsUpdateRequest::launchplan_level() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.FullSettingsUpdateRequest.launchplan_level)
  return has_launchplan_level()
      ? *level_.launchplan_level_
      : *reinterpret_cast< ::flyteidl::admin::LaunchplanLevel*>(&::flyteidl::admin::_LaunchplanLevel_default_instance_);
}
inline ::flyteidl::admin::LaunchplanLevel* FullSettingsUpdateRequest::mutable_launchplan_level() {
  if (!has_launchplan_level()) {
    clear_level();
    set_has_launchplan_level();
    level_.launchplan_level_ = CreateMaybeMessage< ::flyteidl::admin::LaunchplanLevel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.FullSettingsUpdateRequest.launchplan_level)
  return level_.launchplan_level_;
}

// .flyteidl.admin.SettingsCollection settings = 6;
inline bool FullSettingsUpdateRequest::has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline void FullSettingsUpdateRequest::clear_settings() {
  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::flyteidl::admin::SettingsCollection& FullSettingsUpdateRequest::settings() const {
  const ::flyteidl::admin::SettingsCollection* p = settings_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.FullSettingsUpdateRequest.settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::SettingsCollection*>(
      &::flyteidl::admin::_SettingsCollection_default_instance_);
}
inline ::flyteidl::admin::SettingsCollection* FullSettingsUpdateRequest::release_settings() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.FullSettingsUpdateRequest.settings)
  
  ::flyteidl::admin::SettingsCollection* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::SettingsCollection* FullSettingsUpdateRequest::mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::SettingsCollection>(GetArenaNoVirtual());
    settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.FullSettingsUpdateRequest.settings)
  return settings_;
}
inline void FullSettingsUpdateRequest::set_allocated_settings(::flyteidl::admin::SettingsCollection* settings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.FullSettingsUpdateRequest.settings)
}

inline bool FullSettingsUpdateRequest::has_level() const {
  return level_case() != LEVEL_NOT_SET;
}
inline void FullSettingsUpdateRequest::clear_has_level() {
  _oneof_case_[0] = LEVEL_NOT_SET;
}
inline FullSettingsUpdateRequest::LevelCase FullSettingsUpdateRequest::level_case() const {
  return FullSettingsUpdateRequest::LevelCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FullSettingsUpdateResponse

// -------------------------------------------------------------------

// SettingsGetRequest

// .flyteidl.admin.GlobalLevel global_level = 1;
inline bool SettingsGetRequest::has_global_level() const {
  return level_case() == kGlobalLevel;
}
inline void SettingsGetRequest::set_has_global_level() {
  _oneof_case_[0] = kGlobalLevel;
}
inline void SettingsGetRequest::clear_global_level() {
  if (has_global_level()) {
    delete level_.global_level_;
    clear_has_level();
  }
}
inline ::flyteidl::admin::GlobalLevel* SettingsGetRequest::release_global_level() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsGetRequest.global_level)
  if (has_global_level()) {
    clear_has_level();
      ::flyteidl::admin::GlobalLevel* temp = level_.global_level_;
    level_.global_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::GlobalLevel& SettingsGetRequest::global_level() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsGetRequest.global_level)
  return has_global_level()
      ? *level_.global_level_
      : *reinterpret_cast< ::flyteidl::admin::GlobalLevel*>(&::flyteidl::admin::_GlobalLevel_default_instance_);
}
inline ::flyteidl::admin::GlobalLevel* SettingsGetRequest::mutable_global_level() {
  if (!has_global_level()) {
    clear_level();
    set_has_global_level();
    level_.global_level_ = CreateMaybeMessage< ::flyteidl::admin::GlobalLevel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsGetRequest.global_level)
  return level_.global_level_;
}

// .flyteidl.admin.ProjectLevel project_level = 2;
inline bool SettingsGetRequest::has_project_level() const {
  return level_case() == kProjectLevel;
}
inline void SettingsGetRequest::set_has_project_level() {
  _oneof_case_[0] = kProjectLevel;
}
inline void SettingsGetRequest::clear_project_level() {
  if (has_project_level()) {
    delete level_.project_level_;
    clear_has_level();
  }
}
inline ::flyteidl::admin::ProjectLevel* SettingsGetRequest::release_project_level() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsGetRequest.project_level)
  if (has_project_level()) {
    clear_has_level();
      ::flyteidl::admin::ProjectLevel* temp = level_.project_level_;
    level_.project_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::ProjectLevel& SettingsGetRequest::project_level() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsGetRequest.project_level)
  return has_project_level()
      ? *level_.project_level_
      : *reinterpret_cast< ::flyteidl::admin::ProjectLevel*>(&::flyteidl::admin::_ProjectLevel_default_instance_);
}
inline ::flyteidl::admin::ProjectLevel* SettingsGetRequest::mutable_project_level() {
  if (!has_project_level()) {
    clear_level();
    set_has_project_level();
    level_.project_level_ = CreateMaybeMessage< ::flyteidl::admin::ProjectLevel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsGetRequest.project_level)
  return level_.project_level_;
}

// .flyteidl.admin.DomainLevel domain_level = 3;
inline bool SettingsGetRequest::has_domain_level() const {
  return level_case() == kDomainLevel;
}
inline void SettingsGetRequest::set_has_domain_level() {
  _oneof_case_[0] = kDomainLevel;
}
inline void SettingsGetRequest::clear_domain_level() {
  if (has_domain_level()) {
    delete level_.domain_level_;
    clear_has_level();
  }
}
inline ::flyteidl::admin::DomainLevel* SettingsGetRequest::release_domain_level() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsGetRequest.domain_level)
  if (has_domain_level()) {
    clear_has_level();
      ::flyteidl::admin::DomainLevel* temp = level_.domain_level_;
    level_.domain_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::DomainLevel& SettingsGetRequest::domain_level() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsGetRequest.domain_level)
  return has_domain_level()
      ? *level_.domain_level_
      : *reinterpret_cast< ::flyteidl::admin::DomainLevel*>(&::flyteidl::admin::_DomainLevel_default_instance_);
}
inline ::flyteidl::admin::DomainLevel* SettingsGetRequest::mutable_domain_level() {
  if (!has_domain_level()) {
    clear_level();
    set_has_domain_level();
    level_.domain_level_ = CreateMaybeMessage< ::flyteidl::admin::DomainLevel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsGetRequest.domain_level)
  return level_.domain_level_;
}

// .flyteidl.admin.WorkflowLevel workflow_level = 4;
inline bool SettingsGetRequest::has_workflow_level() const {
  return level_case() == kWorkflowLevel;
}
inline void SettingsGetRequest::set_has_workflow_level() {
  _oneof_case_[0] = kWorkflowLevel;
}
inline void SettingsGetRequest::clear_workflow_level() {
  if (has_workflow_level()) {
    delete level_.workflow_level_;
    clear_has_level();
  }
}
inline ::flyteidl::admin::WorkflowLevel* SettingsGetRequest::release_workflow_level() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsGetRequest.workflow_level)
  if (has_workflow_level()) {
    clear_has_level();
      ::flyteidl::admin::WorkflowLevel* temp = level_.workflow_level_;
    level_.workflow_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::WorkflowLevel& SettingsGetRequest::workflow_level() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsGetRequest.workflow_level)
  return has_workflow_level()
      ? *level_.workflow_level_
      : *reinterpret_cast< ::flyteidl::admin::WorkflowLevel*>(&::flyteidl::admin::_WorkflowLevel_default_instance_);
}
inline ::flyteidl::admin::WorkflowLevel* SettingsGetRequest::mutable_workflow_level() {
  if (!has_workflow_level()) {
    clear_level();
    set_has_workflow_level();
    level_.workflow_level_ = CreateMaybeMessage< ::flyteidl::admin::WorkflowLevel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsGetRequest.workflow_level)
  return level_.workflow_level_;
}

// .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
inline bool SettingsGetRequest::has_launchplan_level() const {
  return level_case() == kLaunchplanLevel;
}
inline void SettingsGetRequest::set_has_launchplan_level() {
  _oneof_case_[0] = kLaunchplanLevel;
}
inline void SettingsGetRequest::clear_launchplan_level() {
  if (has_launchplan_level()) {
    delete level_.launchplan_level_;
    clear_has_level();
  }
}
inline ::flyteidl::admin::LaunchplanLevel* SettingsGetRequest::release_launchplan_level() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsGetRequest.launchplan_level)
  if (has_launchplan_level()) {
    clear_has_level();
      ::flyteidl::admin::LaunchplanLevel* temp = level_.launchplan_level_;
    level_.launchplan_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::LaunchplanLevel& SettingsGetRequest::launchplan_level() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsGetRequest.launchplan_level)
  return has_launchplan_level()
      ? *level_.launchplan_level_
      : *reinterpret_cast< ::flyteidl::admin::LaunchplanLevel*>(&::flyteidl::admin::_LaunchplanLevel_default_instance_);
}
inline ::flyteidl::admin::LaunchplanLevel* SettingsGetRequest::mutable_launchplan_level() {
  if (!has_launchplan_level()) {
    clear_level();
    set_has_launchplan_level();
    level_.launchplan_level_ = CreateMaybeMessage< ::flyteidl::admin::LaunchplanLevel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsGetRequest.launchplan_level)
  return level_.launchplan_level_;
}

inline bool SettingsGetRequest::has_level() const {
  return level_case() != LEVEL_NOT_SET;
}
inline void SettingsGetRequest::clear_has_level() {
  _oneof_case_[0] = LEVEL_NOT_SET;
}
inline SettingsGetRequest::LevelCase SettingsGetRequest::level_case() const {
  return SettingsGetRequest::LevelCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SettingsGetResponse

// .flyteidl.admin.GlobalLevel global_level = 1;
inline bool SettingsGetResponse::has_global_level() const {
  return level_case() == kGlobalLevel;
}
inline void SettingsGetResponse::set_has_global_level() {
  _oneof_case_[0] = kGlobalLevel;
}
inline void SettingsGetResponse::clear_global_level() {
  if (has_global_level()) {
    delete level_.global_level_;
    clear_has_level();
  }
}
inline ::flyteidl::admin::GlobalLevel* SettingsGetResponse::release_global_level() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsGetResponse.global_level)
  if (has_global_level()) {
    clear_has_level();
      ::flyteidl::admin::GlobalLevel* temp = level_.global_level_;
    level_.global_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::GlobalLevel& SettingsGetResponse::global_level() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsGetResponse.global_level)
  return has_global_level()
      ? *level_.global_level_
      : *reinterpret_cast< ::flyteidl::admin::GlobalLevel*>(&::flyteidl::admin::_GlobalLevel_default_instance_);
}
inline ::flyteidl::admin::GlobalLevel* SettingsGetResponse::mutable_global_level() {
  if (!has_global_level()) {
    clear_level();
    set_has_global_level();
    level_.global_level_ = CreateMaybeMessage< ::flyteidl::admin::GlobalLevel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsGetResponse.global_level)
  return level_.global_level_;
}

// .flyteidl.admin.ProjectLevel project_level = 2;
inline bool SettingsGetResponse::has_project_level() const {
  return level_case() == kProjectLevel;
}
inline void SettingsGetResponse::set_has_project_level() {
  _oneof_case_[0] = kProjectLevel;
}
inline void SettingsGetResponse::clear_project_level() {
  if (has_project_level()) {
    delete level_.project_level_;
    clear_has_level();
  }
}
inline ::flyteidl::admin::ProjectLevel* SettingsGetResponse::release_project_level() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsGetResponse.project_level)
  if (has_project_level()) {
    clear_has_level();
      ::flyteidl::admin::ProjectLevel* temp = level_.project_level_;
    level_.project_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::ProjectLevel& SettingsGetResponse::project_level() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsGetResponse.project_level)
  return has_project_level()
      ? *level_.project_level_
      : *reinterpret_cast< ::flyteidl::admin::ProjectLevel*>(&::flyteidl::admin::_ProjectLevel_default_instance_);
}
inline ::flyteidl::admin::ProjectLevel* SettingsGetResponse::mutable_project_level() {
  if (!has_project_level()) {
    clear_level();
    set_has_project_level();
    level_.project_level_ = CreateMaybeMessage< ::flyteidl::admin::ProjectLevel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsGetResponse.project_level)
  return level_.project_level_;
}

// .flyteidl.admin.DomainLevel domain_level = 3;
inline bool SettingsGetResponse::has_domain_level() const {
  return level_case() == kDomainLevel;
}
inline void SettingsGetResponse::set_has_domain_level() {
  _oneof_case_[0] = kDomainLevel;
}
inline void SettingsGetResponse::clear_domain_level() {
  if (has_domain_level()) {
    delete level_.domain_level_;
    clear_has_level();
  }
}
inline ::flyteidl::admin::DomainLevel* SettingsGetResponse::release_domain_level() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsGetResponse.domain_level)
  if (has_domain_level()) {
    clear_has_level();
      ::flyteidl::admin::DomainLevel* temp = level_.domain_level_;
    level_.domain_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::DomainLevel& SettingsGetResponse::domain_level() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsGetResponse.domain_level)
  return has_domain_level()
      ? *level_.domain_level_
      : *reinterpret_cast< ::flyteidl::admin::DomainLevel*>(&::flyteidl::admin::_DomainLevel_default_instance_);
}
inline ::flyteidl::admin::DomainLevel* SettingsGetResponse::mutable_domain_level() {
  if (!has_domain_level()) {
    clear_level();
    set_has_domain_level();
    level_.domain_level_ = CreateMaybeMessage< ::flyteidl::admin::DomainLevel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsGetResponse.domain_level)
  return level_.domain_level_;
}

// .flyteidl.admin.WorkflowLevel workflow_level = 4;
inline bool SettingsGetResponse::has_workflow_level() const {
  return level_case() == kWorkflowLevel;
}
inline void SettingsGetResponse::set_has_workflow_level() {
  _oneof_case_[0] = kWorkflowLevel;
}
inline void SettingsGetResponse::clear_workflow_level() {
  if (has_workflow_level()) {
    delete level_.workflow_level_;
    clear_has_level();
  }
}
inline ::flyteidl::admin::WorkflowLevel* SettingsGetResponse::release_workflow_level() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsGetResponse.workflow_level)
  if (has_workflow_level()) {
    clear_has_level();
      ::flyteidl::admin::WorkflowLevel* temp = level_.workflow_level_;
    level_.workflow_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::WorkflowLevel& SettingsGetResponse::workflow_level() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsGetResponse.workflow_level)
  return has_workflow_level()
      ? *level_.workflow_level_
      : *reinterpret_cast< ::flyteidl::admin::WorkflowLevel*>(&::flyteidl::admin::_WorkflowLevel_default_instance_);
}
inline ::flyteidl::admin::WorkflowLevel* SettingsGetResponse::mutable_workflow_level() {
  if (!has_workflow_level()) {
    clear_level();
    set_has_workflow_level();
    level_.workflow_level_ = CreateMaybeMessage< ::flyteidl::admin::WorkflowLevel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsGetResponse.workflow_level)
  return level_.workflow_level_;
}

// .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
inline bool SettingsGetResponse::has_launchplan_level() const {
  return level_case() == kLaunchplanLevel;
}
inline void SettingsGetResponse::set_has_launchplan_level() {
  _oneof_case_[0] = kLaunchplanLevel;
}
inline void SettingsGetResponse::clear_launchplan_level() {
  if (has_launchplan_level()) {
    delete level_.launchplan_level_;
    clear_has_level();
  }
}
inline ::flyteidl::admin::LaunchplanLevel* SettingsGetResponse::release_launchplan_level() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsGetResponse.launchplan_level)
  if (has_launchplan_level()) {
    clear_has_level();
      ::flyteidl::admin::LaunchplanLevel* temp = level_.launchplan_level_;
    level_.launchplan_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::LaunchplanLevel& SettingsGetResponse::launchplan_level() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsGetResponse.launchplan_level)
  return has_launchplan_level()
      ? *level_.launchplan_level_
      : *reinterpret_cast< ::flyteidl::admin::LaunchplanLevel*>(&::flyteidl::admin::_LaunchplanLevel_default_instance_);
}
inline ::flyteidl::admin::LaunchplanLevel* SettingsGetResponse::mutable_launchplan_level() {
  if (!has_launchplan_level()) {
    clear_level();
    set_has_launchplan_level();
    level_.launchplan_level_ = CreateMaybeMessage< ::flyteidl::admin::LaunchplanLevel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsGetResponse.launchplan_level)
  return level_.launchplan_level_;
}

// .flyteidl.admin.SettingsCollection settings = 6;
inline bool SettingsGetResponse::has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline void SettingsGetResponse::clear_settings() {
  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::flyteidl::admin::SettingsCollection& SettingsGetResponse::settings() const {
  const ::flyteidl::admin::SettingsCollection* p = settings_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsGetResponse.settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::SettingsCollection*>(
      &::flyteidl::admin::_SettingsCollection_default_instance_);
}
inline ::flyteidl::admin::SettingsCollection* SettingsGetResponse::release_settings() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsGetResponse.settings)
  
  ::flyteidl::admin::SettingsCollection* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::SettingsCollection* SettingsGetResponse::mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::SettingsCollection>(GetArenaNoVirtual());
    settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsGetResponse.settings)
  return settings_;
}
inline void SettingsGetResponse::set_allocated_settings(::flyteidl::admin::SettingsCollection* settings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsGetResponse.settings)
}

inline bool SettingsGetResponse::has_level() const {
  return level_case() != LEVEL_NOT_SET;
}
inline void SettingsGetResponse::clear_has_level() {
  _oneof_case_[0] = LEVEL_NOT_SET;
}
inline SettingsGetResponse::LevelCase SettingsGetResponse::level_case() const {
  return SettingsGetResponse::LevelCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FullSettingsGetRequest

// -------------------------------------------------------------------

// FullSettingsGetResponse

// .flyteidl.admin.Settings settings = 1;
inline bool FullSettingsGetResponse::has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline void FullSettingsGetResponse::clear_settings() {
  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::flyteidl::admin::Settings& FullSettingsGetResponse::settings() const {
  const ::flyteidl::admin::Settings* p = settings_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.FullSettingsGetResponse.settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::Settings*>(
      &::flyteidl::admin::_Settings_default_instance_);
}
inline ::flyteidl::admin::Settings* FullSettingsGetResponse::release_settings() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.FullSettingsGetResponse.settings)
  
  ::flyteidl::admin::Settings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Settings* FullSettingsGetResponse::mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Settings>(GetArenaNoVirtual());
    settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.FullSettingsGetResponse.settings)
  return settings_;
}
inline void FullSettingsGetResponse::set_allocated_settings(::flyteidl::admin::Settings* settings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.FullSettingsGetResponse.settings)
}

// -------------------------------------------------------------------

// SettingsDeleteRequest

// .flyteidl.admin.GlobalLevel global_level = 1;
inline bool SettingsDeleteRequest::has_global_level() const {
  return level_case() == kGlobalLevel;
}
inline void SettingsDeleteRequest::set_has_global_level() {
  _oneof_case_[0] = kGlobalLevel;
}
inline void SettingsDeleteRequest::clear_global_level() {
  if (has_global_level()) {
    delete level_.global_level_;
    clear_has_level();
  }
}
inline ::flyteidl::admin::GlobalLevel* SettingsDeleteRequest::release_global_level() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsDeleteRequest.global_level)
  if (has_global_level()) {
    clear_has_level();
      ::flyteidl::admin::GlobalLevel* temp = level_.global_level_;
    level_.global_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::GlobalLevel& SettingsDeleteRequest::global_level() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsDeleteRequest.global_level)
  return has_global_level()
      ? *level_.global_level_
      : *reinterpret_cast< ::flyteidl::admin::GlobalLevel*>(&::flyteidl::admin::_GlobalLevel_default_instance_);
}
inline ::flyteidl::admin::GlobalLevel* SettingsDeleteRequest::mutable_global_level() {
  if (!has_global_level()) {
    clear_level();
    set_has_global_level();
    level_.global_level_ = CreateMaybeMessage< ::flyteidl::admin::GlobalLevel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsDeleteRequest.global_level)
  return level_.global_level_;
}

// .flyteidl.admin.ProjectLevel project_level = 2;
inline bool SettingsDeleteRequest::has_project_level() const {
  return level_case() == kProjectLevel;
}
inline void SettingsDeleteRequest::set_has_project_level() {
  _oneof_case_[0] = kProjectLevel;
}
inline void SettingsDeleteRequest::clear_project_level() {
  if (has_project_level()) {
    delete level_.project_level_;
    clear_has_level();
  }
}
inline ::flyteidl::admin::ProjectLevel* SettingsDeleteRequest::release_project_level() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsDeleteRequest.project_level)
  if (has_project_level()) {
    clear_has_level();
      ::flyteidl::admin::ProjectLevel* temp = level_.project_level_;
    level_.project_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::ProjectLevel& SettingsDeleteRequest::project_level() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsDeleteRequest.project_level)
  return has_project_level()
      ? *level_.project_level_
      : *reinterpret_cast< ::flyteidl::admin::ProjectLevel*>(&::flyteidl::admin::_ProjectLevel_default_instance_);
}
inline ::flyteidl::admin::ProjectLevel* SettingsDeleteRequest::mutable_project_level() {
  if (!has_project_level()) {
    clear_level();
    set_has_project_level();
    level_.project_level_ = CreateMaybeMessage< ::flyteidl::admin::ProjectLevel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsDeleteRequest.project_level)
  return level_.project_level_;
}

// .flyteidl.admin.DomainLevel domain_level = 3;
inline bool SettingsDeleteRequest::has_domain_level() const {
  return level_case() == kDomainLevel;
}
inline void SettingsDeleteRequest::set_has_domain_level() {
  _oneof_case_[0] = kDomainLevel;
}
inline void SettingsDeleteRequest::clear_domain_level() {
  if (has_domain_level()) {
    delete level_.domain_level_;
    clear_has_level();
  }
}
inline ::flyteidl::admin::DomainLevel* SettingsDeleteRequest::release_domain_level() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsDeleteRequest.domain_level)
  if (has_domain_level()) {
    clear_has_level();
      ::flyteidl::admin::DomainLevel* temp = level_.domain_level_;
    level_.domain_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::DomainLevel& SettingsDeleteRequest::domain_level() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsDeleteRequest.domain_level)
  return has_domain_level()
      ? *level_.domain_level_
      : *reinterpret_cast< ::flyteidl::admin::DomainLevel*>(&::flyteidl::admin::_DomainLevel_default_instance_);
}
inline ::flyteidl::admin::DomainLevel* SettingsDeleteRequest::mutable_domain_level() {
  if (!has_domain_level()) {
    clear_level();
    set_has_domain_level();
    level_.domain_level_ = CreateMaybeMessage< ::flyteidl::admin::DomainLevel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsDeleteRequest.domain_level)
  return level_.domain_level_;
}

// .flyteidl.admin.WorkflowLevel workflow_level = 4;
inline bool SettingsDeleteRequest::has_workflow_level() const {
  return level_case() == kWorkflowLevel;
}
inline void SettingsDeleteRequest::set_has_workflow_level() {
  _oneof_case_[0] = kWorkflowLevel;
}
inline void SettingsDeleteRequest::clear_workflow_level() {
  if (has_workflow_level()) {
    delete level_.workflow_level_;
    clear_has_level();
  }
}
inline ::flyteidl::admin::WorkflowLevel* SettingsDeleteRequest::release_workflow_level() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsDeleteRequest.workflow_level)
  if (has_workflow_level()) {
    clear_has_level();
      ::flyteidl::admin::WorkflowLevel* temp = level_.workflow_level_;
    level_.workflow_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::WorkflowLevel& SettingsDeleteRequest::workflow_level() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsDeleteRequest.workflow_level)
  return has_workflow_level()
      ? *level_.workflow_level_
      : *reinterpret_cast< ::flyteidl::admin::WorkflowLevel*>(&::flyteidl::admin::_WorkflowLevel_default_instance_);
}
inline ::flyteidl::admin::WorkflowLevel* SettingsDeleteRequest::mutable_workflow_level() {
  if (!has_workflow_level()) {
    clear_level();
    set_has_workflow_level();
    level_.workflow_level_ = CreateMaybeMessage< ::flyteidl::admin::WorkflowLevel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsDeleteRequest.workflow_level)
  return level_.workflow_level_;
}

// .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
inline bool SettingsDeleteRequest::has_launchplan_level() const {
  return level_case() == kLaunchplanLevel;
}
inline void SettingsDeleteRequest::set_has_launchplan_level() {
  _oneof_case_[0] = kLaunchplanLevel;
}
inline void SettingsDeleteRequest::clear_launchplan_level() {
  if (has_launchplan_level()) {
    delete level_.launchplan_level_;
    clear_has_level();
  }
}
inline ::flyteidl::admin::LaunchplanLevel* SettingsDeleteRequest::release_launchplan_level() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SettingsDeleteRequest.launchplan_level)
  if (has_launchplan_level()) {
    clear_has_level();
      ::flyteidl::admin::LaunchplanLevel* temp = level_.launchplan_level_;
    level_.launchplan_level_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::LaunchplanLevel& SettingsDeleteRequest::launchplan_level() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.SettingsDeleteRequest.launchplan_level)
  return has_launchplan_level()
      ? *level_.launchplan_level_
      : *reinterpret_cast< ::flyteidl::admin::LaunchplanLevel*>(&::flyteidl::admin::_LaunchplanLevel_default_instance_);
}
inline ::flyteidl::admin::LaunchplanLevel* SettingsDeleteRequest::mutable_launchplan_level() {
  if (!has_launchplan_level()) {
    clear_level();
    set_has_launchplan_level();
    level_.launchplan_level_ = CreateMaybeMessage< ::flyteidl::admin::LaunchplanLevel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SettingsDeleteRequest.launchplan_level)
  return level_.launchplan_level_;
}

inline bool SettingsDeleteRequest::has_level() const {
  return level_case() != LEVEL_NOT_SET;
}
inline void SettingsDeleteRequest::clear_has_level() {
  _oneof_case_[0] = LEVEL_NOT_SET;
}
inline SettingsDeleteRequest::LevelCase SettingsDeleteRequest::level_case() const {
  return SettingsDeleteRequest::LevelCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SettingsDeleteResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fadmin_2fsettings_2eproto
