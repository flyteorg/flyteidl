# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyteadmin.models.core_literal import CoreLiteral  # noqa: F401,E501
from flyteadmin.models.core_variable import CoreVariable  # noqa: F401,E501


class CoreParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'var': 'CoreVariable',
        'default': 'CoreLiteral',
        'required': 'bool'
    }

    attribute_map = {
        'var': 'var',
        'default': 'default',
        'required': 'required'
    }

    def __init__(self, var=None, default=None, required=None):  # noqa: E501
        """CoreParameter - a model defined in Swagger"""  # noqa: E501

        self._var = None
        self._default = None
        self._required = None
        self.discriminator = None

        if var is not None:
            self.var = var
        if default is not None:
            self.default = default
        if required is not None:
            self.required = required

    @property
    def var(self):
        """Gets the var of this CoreParameter.  # noqa: E501

        +required Variable. Defines the type of the variable backing this parameter.  # noqa: E501

        :return: The var of this CoreParameter.  # noqa: E501
        :rtype: CoreVariable
        """
        return self._var

    @var.setter
    def var(self, var):
        """Sets the var of this CoreParameter.

        +required Variable. Defines the type of the variable backing this parameter.  # noqa: E501

        :param var: The var of this CoreParameter.  # noqa: E501
        :type: CoreVariable
        """

        self._var = var

    @property
    def default(self):
        """Gets the default of this CoreParameter.  # noqa: E501

        Defines a default value that has to match the variable type defined.  # noqa: E501

        :return: The default of this CoreParameter.  # noqa: E501
        :rtype: CoreLiteral
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this CoreParameter.

        Defines a default value that has to match the variable type defined.  # noqa: E501

        :param default: The default of this CoreParameter.  # noqa: E501
        :type: CoreLiteral
        """

        self._default = default

    @property
    def required(self):
        """Gets the required of this CoreParameter.  # noqa: E501

        +optional, is this value required to be filled.  # noqa: E501

        :return: The required of this CoreParameter.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this CoreParameter.

        +optional, is this value required to be filled.  # noqa: E501

        :param required: The required of this CoreParameter.  # noqa: E501
        :type: bool
        """

        self._required = required

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoreParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
