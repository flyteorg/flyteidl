// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/matchable_resource.proto

#include "flyteidl/admin/matchable_resource.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace admin {
constexpr TaskResourceSpec::TaskResourceSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cpu_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gpu_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , memory_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , storage_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ephemeral_storage_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TaskResourceSpecDefaultTypeInternal {
  constexpr TaskResourceSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskResourceSpecDefaultTypeInternal() {}
  union {
    TaskResourceSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskResourceSpecDefaultTypeInternal _TaskResourceSpec_default_instance_;
constexpr TaskResourceAttributes::TaskResourceAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : defaults_(nullptr)
  , limits_(nullptr){}
struct TaskResourceAttributesDefaultTypeInternal {
  constexpr TaskResourceAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskResourceAttributesDefaultTypeInternal() {}
  union {
    TaskResourceAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskResourceAttributesDefaultTypeInternal _TaskResourceAttributes_default_instance_;
constexpr ClusterResourceAttributes_AttributesEntry_DoNotUse::ClusterResourceAttributes_AttributesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ClusterResourceAttributes_AttributesEntry_DoNotUseDefaultTypeInternal {
  constexpr ClusterResourceAttributes_AttributesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClusterResourceAttributes_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ClusterResourceAttributes_AttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClusterResourceAttributes_AttributesEntry_DoNotUseDefaultTypeInternal _ClusterResourceAttributes_AttributesEntry_DoNotUse_default_instance_;
constexpr ClusterResourceAttributes::ClusterResourceAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attributes_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct ClusterResourceAttributesDefaultTypeInternal {
  constexpr ClusterResourceAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClusterResourceAttributesDefaultTypeInternal() {}
  union {
    ClusterResourceAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClusterResourceAttributesDefaultTypeInternal _ClusterResourceAttributes_default_instance_;
constexpr ExecutionQueueAttributes::ExecutionQueueAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_(){}
struct ExecutionQueueAttributesDefaultTypeInternal {
  constexpr ExecutionQueueAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecutionQueueAttributesDefaultTypeInternal() {}
  union {
    ExecutionQueueAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecutionQueueAttributesDefaultTypeInternal _ExecutionQueueAttributes_default_instance_;
constexpr ExecutionClusterLabel::ExecutionClusterLabel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ExecutionClusterLabelDefaultTypeInternal {
  constexpr ExecutionClusterLabelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecutionClusterLabelDefaultTypeInternal() {}
  union {
    ExecutionClusterLabel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecutionClusterLabelDefaultTypeInternal _ExecutionClusterLabel_default_instance_;
constexpr PluginOverride::PluginOverride(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : plugin_id_()
  , task_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , missing_plugin_behavior_(0)
{}
struct PluginOverrideDefaultTypeInternal {
  constexpr PluginOverrideDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PluginOverrideDefaultTypeInternal() {}
  union {
    PluginOverride _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PluginOverrideDefaultTypeInternal _PluginOverride_default_instance_;
constexpr PluginOverrides::PluginOverrides(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : overrides_(){}
struct PluginOverridesDefaultTypeInternal {
  constexpr PluginOverridesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PluginOverridesDefaultTypeInternal() {}
  union {
    PluginOverrides _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PluginOverridesDefaultTypeInternal _PluginOverrides_default_instance_;
constexpr WorkflowExecutionConfig::WorkflowExecutionConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : security_context_(nullptr)
  , raw_output_data_config_(nullptr)
  , labels_(nullptr)
  , annotations_(nullptr)
  , max_parallelism_(0){}
struct WorkflowExecutionConfigDefaultTypeInternal {
  constexpr WorkflowExecutionConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowExecutionConfigDefaultTypeInternal() {}
  union {
    WorkflowExecutionConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowExecutionConfigDefaultTypeInternal _WorkflowExecutionConfig_default_instance_;
constexpr MatchingAttributes::MatchingAttributes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct MatchingAttributesDefaultTypeInternal {
  constexpr MatchingAttributesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MatchingAttributesDefaultTypeInternal() {}
  union {
    MatchingAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MatchingAttributesDefaultTypeInternal _MatchingAttributes_default_instance_;
constexpr MatchableAttributesConfiguration::MatchableAttributesConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : domain_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , project_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , workflow_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , launch_plan_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , attributes_(nullptr){}
struct MatchableAttributesConfigurationDefaultTypeInternal {
  constexpr MatchableAttributesConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MatchableAttributesConfigurationDefaultTypeInternal() {}
  union {
    MatchableAttributesConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MatchableAttributesConfigurationDefaultTypeInternal _MatchableAttributesConfiguration_default_instance_;
constexpr ListMatchableAttributesRequest::ListMatchableAttributesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resource_type_(0)
{}
struct ListMatchableAttributesRequestDefaultTypeInternal {
  constexpr ListMatchableAttributesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListMatchableAttributesRequestDefaultTypeInternal() {}
  union {
    ListMatchableAttributesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListMatchableAttributesRequestDefaultTypeInternal _ListMatchableAttributesRequest_default_instance_;
constexpr ListMatchableAttributesResponse::ListMatchableAttributesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : configurations_(){}
struct ListMatchableAttributesResponseDefaultTypeInternal {
  constexpr ListMatchableAttributesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListMatchableAttributesResponseDefaultTypeInternal() {}
  union {
    ListMatchableAttributesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListMatchableAttributesResponseDefaultTypeInternal _ListMatchableAttributesResponse_default_instance_;
}  // namespace admin
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fadmin_2fmatchable_5fresource_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fadmin_2fmatchable_5fresource_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fadmin_2fmatchable_5fresource_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskResourceSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskResourceSpec, cpu_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskResourceSpec, gpu_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskResourceSpec, memory_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskResourceSpec, storage_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskResourceSpec, ephemeral_storage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskResourceAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskResourceAttributes, defaults_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskResourceAttributes, limits_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ClusterResourceAttributes_AttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ClusterResourceAttributes_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ClusterResourceAttributes_AttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ClusterResourceAttributes_AttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ClusterResourceAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ClusterResourceAttributes, attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionQueueAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionQueueAttributes, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionClusterLabel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionClusterLabel, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::PluginOverride, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::PluginOverride, task_type_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::PluginOverride, plugin_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::PluginOverride, missing_plugin_behavior_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::PluginOverrides, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::PluginOverrides, overrides_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionConfig, max_parallelism_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionConfig, security_context_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionConfig, raw_output_data_config_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionConfig, labels_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionConfig, annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::MatchingAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::MatchingAttributes, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::MatchingAttributes, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::MatchableAttributesConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::MatchableAttributesConfiguration, attributes_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::MatchableAttributesConfiguration, domain_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::MatchableAttributesConfiguration, project_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::MatchableAttributesConfiguration, workflow_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::MatchableAttributesConfiguration, launch_plan_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ListMatchableAttributesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ListMatchableAttributesRequest, resource_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ListMatchableAttributesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ListMatchableAttributesResponse, configurations_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::admin::TaskResourceSpec)},
  { 11, -1, -1, sizeof(::flyteidl::admin::TaskResourceAttributes)},
  { 19, 27, -1, sizeof(::flyteidl::admin::ClusterResourceAttributes_AttributesEntry_DoNotUse)},
  { 29, -1, -1, sizeof(::flyteidl::admin::ClusterResourceAttributes)},
  { 36, -1, -1, sizeof(::flyteidl::admin::ExecutionQueueAttributes)},
  { 43, -1, -1, sizeof(::flyteidl::admin::ExecutionClusterLabel)},
  { 50, -1, -1, sizeof(::flyteidl::admin::PluginOverride)},
  { 59, -1, -1, sizeof(::flyteidl::admin::PluginOverrides)},
  { 66, -1, -1, sizeof(::flyteidl::admin::WorkflowExecutionConfig)},
  { 77, -1, -1, sizeof(::flyteidl::admin::MatchingAttributes)},
  { 92, -1, -1, sizeof(::flyteidl::admin::MatchableAttributesConfiguration)},
  { 103, -1, -1, sizeof(::flyteidl::admin::ListMatchableAttributesRequest)},
  { 110, -1, -1, sizeof(::flyteidl::admin::ListMatchableAttributesResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_TaskResourceSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_TaskResourceAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_ClusterResourceAttributes_AttributesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_ClusterResourceAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_ExecutionQueueAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_ExecutionClusterLabel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_PluginOverride_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_PluginOverrides_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_WorkflowExecutionConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_MatchingAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_MatchableAttributesConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_ListMatchableAttributesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_ListMatchableAttributesResponse_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fadmin_2fmatchable_5fresource_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'flyteidl/admin/matchable_resource.prot"
  "o\022\016flyteidl.admin\032\033flyteidl/admin/common"
  ".proto\032\'flyteidl/admin/cluster_assignmen"
  "t.proto\032\035flyteidl/core/execution.proto\032\034"
  "flyteidl/core/security.proto\"\225\001\n\020TaskRes"
  "ourceSpec\022\020\n\003cpu\030\001 \001(\tR\003cpu\022\020\n\003gpu\030\002 \001(\t"
  "R\003gpu\022\026\n\006memory\030\003 \001(\tR\006memory\022\030\n\007storage"
  "\030\004 \001(\tR\007storage\022+\n\021ephemeral_storage\030\005 \001"
  "(\tR\020ephemeralStorage\"\220\001\n\026TaskResourceAtt"
  "ributes\022<\n\010defaults\030\001 \001(\0132 .flyteidl.adm"
  "in.TaskResourceSpecR\010defaults\0228\n\006limits\030"
  "\002 \001(\0132 .flyteidl.admin.TaskResourceSpecR"
  "\006limits\"\265\001\n\031ClusterResourceAttributes\022Y\n"
  "\nattributes\030\001 \003(\01329.flyteidl.admin.Clust"
  "erResourceAttributes.AttributesEntryR\nat"
  "tributes\032=\n\017AttributesEntry\022\020\n\003key\030\001 \001(\t"
  "R\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028\001\".\n\030Execu"
  "tionQueueAttributes\022\022\n\004tags\030\001 \003(\tR\004tags\""
  "-\n\025ExecutionClusterLabel\022\024\n\005value\030\001 \001(\tR"
  "\005value\"\354\001\n\016PluginOverride\022\033\n\ttask_type\030\001"
  " \001(\tR\010taskType\022\033\n\tplugin_id\030\002 \003(\tR\010plugi"
  "nId\022l\n\027missing_plugin_behavior\030\004 \001(\01624.f"
  "lyteidl.admin.PluginOverride.MissingPlug"
  "inBehaviorR\025missingPluginBehavior\"2\n\025Mis"
  "singPluginBehavior\022\010\n\004FAIL\020\000\022\017\n\013USE_DEFA"
  "ULT\020\001\"O\n\017PluginOverrides\022<\n\toverrides\030\001 "
  "\003(\0132\036.flyteidl.admin.PluginOverrideR\tove"
  "rrides\"\326\002\n\027WorkflowExecutionConfig\022\'\n\017ma"
  "x_parallelism\030\001 \001(\005R\016maxParallelism\022I\n\020s"
  "ecurity_context\030\002 \001(\0132\036.flyteidl.core.Se"
  "curityContextR\017securityContext\022X\n\026raw_ou"
  "tput_data_config\030\003 \001(\0132#.flyteidl.admin."
  "RawOutputDataConfigR\023rawOutputDataConfig"
  "\022.\n\006labels\030\004 \001(\0132\026.flyteidl.admin.Labels"
  "R\006labels\022=\n\013annotations\030\005 \001(\0132\033.flyteidl"
  ".admin.AnnotationsR\013annotations\"\224\006\n\022Matc"
  "hingAttributes\022b\n\030task_resource_attribut"
  "es\030\001 \001(\0132&.flyteidl.admin.TaskResourceAt"
  "tributesH\000R\026taskResourceAttributes\022k\n\033cl"
  "uster_resource_attributes\030\002 \001(\0132).flytei"
  "dl.admin.ClusterResourceAttributesH\000R\031cl"
  "usterResourceAttributes\022h\n\032execution_que"
  "ue_attributes\030\003 \001(\0132(.flyteidl.admin.Exe"
  "cutionQueueAttributesH\000R\030executionQueueA"
  "ttributes\022_\n\027execution_cluster_label\030\004 \001"
  "(\0132%.flyteidl.admin.ExecutionClusterLabe"
  "lH\000R\025executionClusterLabel\022O\n\022quality_of"
  "_service\030\005 \001(\0132\037.flyteidl.core.QualityOf"
  "ServiceH\000R\020qualityOfService\022L\n\020plugin_ov"
  "errides\030\006 \001(\0132\037.flyteidl.admin.PluginOve"
  "rridesH\000R\017pluginOverrides\022e\n\031workflow_ex"
  "ecution_config\030\007 \001(\0132\'.flyteidl.admin.Wo"
  "rkflowExecutionConfigH\000R\027workflowExecuti"
  "onConfig\022R\n\022cluster_assignment\030\010 \001(\0132!.f"
  "lyteidl.admin.ClusterAssignmentH\000R\021clust"
  "erAssignmentB\010\n\006target\"\325\001\n MatchableAttr"
  "ibutesConfiguration\022B\n\nattributes\030\001 \001(\0132"
  "\".flyteidl.admin.MatchingAttributesR\natt"
  "ributes\022\026\n\006domain\030\002 \001(\tR\006domain\022\030\n\007proje"
  "ct\030\003 \001(\tR\007project\022\032\n\010workflow\030\004 \001(\tR\010wor"
  "kflow\022\037\n\013launch_plan\030\005 \001(\tR\nlaunchPlan\"h"
  "\n\036ListMatchableAttributesRequest\022F\n\rreso"
  "urce_type\030\001 \001(\0162!.flyteidl.admin.Matchab"
  "leResourceR\014resourceType\"{\n\037ListMatchabl"
  "eAttributesResponse\022X\n\016configurations\030\001 "
  "\003(\01320.flyteidl.admin.MatchableAttributes"
  "ConfigurationR\016configurations*\340\001\n\021Matcha"
  "bleResource\022\021\n\rTASK_RESOURCE\020\000\022\024\n\020CLUSTE"
  "R_RESOURCE\020\001\022\023\n\017EXECUTION_QUEUE\020\002\022\033\n\027EXE"
  "CUTION_CLUSTER_LABEL\020\003\022$\n QUALITY_OF_SER"
  "VICE_SPECIFICATION\020\004\022\023\n\017PLUGIN_OVERRIDE\020"
  "\005\022\035\n\031WORKFLOW_EXECUTION_CONFIG\020\006\022\026\n\022CLUS"
  "TER_ASSIGNMENT\020\007B\277\001\n\022com.flyteidl.adminB"
  "\026MatchableResourceProtoH\002Z5github.com/fl"
  "yteorg/flyteidl/gen/pb-go/flyteidl/admin"
  "\370\001\000\242\002\003FAX\252\002\016Flyteidl.Admin\312\002\016Flyteidl\\Ad"
  "min\342\002\032Flyteidl\\Admin\\GPBMetadata\352\002\017Flyte"
  "idl::Adminb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_deps[4] = {
  &::descriptor_table_flyteidl_2fadmin_2fcluster_5fassignment_2eproto,
  &::descriptor_table_flyteidl_2fadmin_2fcommon_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fexecution_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fsecurity_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto = {
  false, false, 3098, descriptor_table_protodef_flyteidl_2fadmin_2fmatchable_5fresource_2eproto, "flyteidl/admin/matchable_resource.proto", 
  &descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_once, descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_deps, 4, 13,
  schemas, file_default_instances, TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto::offsets,
  file_level_metadata_flyteidl_2fadmin_2fmatchable_5fresource_2eproto, file_level_enum_descriptors_flyteidl_2fadmin_2fmatchable_5fresource_2eproto, file_level_service_descriptors_flyteidl_2fadmin_2fmatchable_5fresource_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_getter() {
  return &descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fadmin_2fmatchable_5fresource_2eproto(&descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto);
namespace flyteidl {
namespace admin {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PluginOverride_MissingPluginBehavior_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto);
  return file_level_enum_descriptors_flyteidl_2fadmin_2fmatchable_5fresource_2eproto[0];
}
bool PluginOverride_MissingPluginBehavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PluginOverride_MissingPluginBehavior PluginOverride::FAIL;
constexpr PluginOverride_MissingPluginBehavior PluginOverride::USE_DEFAULT;
constexpr PluginOverride_MissingPluginBehavior PluginOverride::MissingPluginBehavior_MIN;
constexpr PluginOverride_MissingPluginBehavior PluginOverride::MissingPluginBehavior_MAX;
constexpr int PluginOverride::MissingPluginBehavior_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchableResource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto);
  return file_level_enum_descriptors_flyteidl_2fadmin_2fmatchable_5fresource_2eproto[1];
}
bool MatchableResource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TaskResourceSpec::_Internal {
 public:
};

TaskResourceSpec::TaskResourceSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.TaskResourceSpec)
}
TaskResourceSpec::TaskResourceSpec(const TaskResourceSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cpu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cpu_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cpu().empty()) {
    cpu_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cpu(), 
      GetArenaForAllocation());
  }
  gpu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gpu_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gpu().empty()) {
    gpu_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gpu(), 
      GetArenaForAllocation());
  }
  memory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    memory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memory().empty()) {
    memory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_memory(), 
      GetArenaForAllocation());
  }
  storage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    storage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_storage().empty()) {
    storage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_storage(), 
      GetArenaForAllocation());
  }
  ephemeral_storage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ephemeral_storage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ephemeral_storage().empty()) {
    ephemeral_storage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ephemeral_storage(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskResourceSpec)
}

inline void TaskResourceSpec::SharedCtor() {
cpu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cpu_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gpu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gpu_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
memory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  memory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
storage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  storage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ephemeral_storage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ephemeral_storage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TaskResourceSpec::~TaskResourceSpec() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskResourceSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskResourceSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cpu_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gpu_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  storage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ephemeral_storage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskResourceSpec::ArenaDtor(void* object) {
  TaskResourceSpec* _this = reinterpret_cast< TaskResourceSpec* >(object);
  (void)_this;
}
void TaskResourceSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskResourceSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskResourceSpec::InternalSwap(TaskResourceSpec* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata TaskResourceSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fmatchable_5fresource_2eproto[0]);
}

// ===================================================================

class TaskResourceAttributes::_Internal {
 public:
  static const ::flyteidl::admin::TaskResourceSpec& defaults(const TaskResourceAttributes* msg);
  static const ::flyteidl::admin::TaskResourceSpec& limits(const TaskResourceAttributes* msg);
};

const ::flyteidl::admin::TaskResourceSpec&
TaskResourceAttributes::_Internal::defaults(const TaskResourceAttributes* msg) {
  return *msg->defaults_;
}
const ::flyteidl::admin::TaskResourceSpec&
TaskResourceAttributes::_Internal::limits(const TaskResourceAttributes* msg) {
  return *msg->limits_;
}
TaskResourceAttributes::TaskResourceAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.TaskResourceAttributes)
}
TaskResourceAttributes::TaskResourceAttributes(const TaskResourceAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_defaults()) {
    defaults_ = new ::flyteidl::admin::TaskResourceSpec(*from.defaults_);
  } else {
    defaults_ = nullptr;
  }
  if (from._internal_has_limits()) {
    limits_ = new ::flyteidl::admin::TaskResourceSpec(*from.limits_);
  } else {
    limits_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskResourceAttributes)
}

inline void TaskResourceAttributes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&defaults_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&limits_) -
    reinterpret_cast<char*>(&defaults_)) + sizeof(limits_));
}

TaskResourceAttributes::~TaskResourceAttributes() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskResourceAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskResourceAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete defaults_;
  if (this != internal_default_instance()) delete limits_;
}

void TaskResourceAttributes::ArenaDtor(void* object) {
  TaskResourceAttributes* _this = reinterpret_cast< TaskResourceAttributes* >(object);
  (void)_this;
}
void TaskResourceAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskResourceAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskResourceAttributes::InternalSwap(TaskResourceAttributes* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata TaskResourceAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fmatchable_5fresource_2eproto[1]);
}

// ===================================================================

ClusterResourceAttributes_AttributesEntry_DoNotUse::ClusterResourceAttributes_AttributesEntry_DoNotUse() {}
ClusterResourceAttributes_AttributesEntry_DoNotUse::ClusterResourceAttributes_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ClusterResourceAttributes_AttributesEntry_DoNotUse::MergeFrom(const ClusterResourceAttributes_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ClusterResourceAttributes_AttributesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fmatchable_5fresource_2eproto[2]);
}

// ===================================================================

class ClusterResourceAttributes::_Internal {
 public:
};

ClusterResourceAttributes::ClusterResourceAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  attributes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.ClusterResourceAttributes)
}
ClusterResourceAttributes::ClusterResourceAttributes(const ClusterResourceAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attributes_.MergeFrom(from.attributes_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ClusterResourceAttributes)
}

inline void ClusterResourceAttributes::SharedCtor() {
}

ClusterResourceAttributes::~ClusterResourceAttributes() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ClusterResourceAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClusterResourceAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClusterResourceAttributes::ArenaDtor(void* object) {
  ClusterResourceAttributes* _this = reinterpret_cast< ClusterResourceAttributes* >(object);
  (void)_this;
  _this->attributes_. ~MapField();
}
inline void ClusterResourceAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &ClusterResourceAttributes::ArenaDtor);
  }
}
void ClusterResourceAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClusterResourceAttributes::InternalSwap(ClusterResourceAttributes* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ClusterResourceAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fmatchable_5fresource_2eproto[3]);
}

// ===================================================================

class ExecutionQueueAttributes::_Internal {
 public:
};

ExecutionQueueAttributes::ExecutionQueueAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tags_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.ExecutionQueueAttributes)
}
ExecutionQueueAttributes::ExecutionQueueAttributes(const ExecutionQueueAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ExecutionQueueAttributes)
}

inline void ExecutionQueueAttributes::SharedCtor() {
}

ExecutionQueueAttributes::~ExecutionQueueAttributes() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ExecutionQueueAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecutionQueueAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExecutionQueueAttributes::ArenaDtor(void* object) {
  ExecutionQueueAttributes* _this = reinterpret_cast< ExecutionQueueAttributes* >(object);
  (void)_this;
}
void ExecutionQueueAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecutionQueueAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecutionQueueAttributes::InternalSwap(ExecutionQueueAttributes* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionQueueAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fmatchable_5fresource_2eproto[4]);
}

// ===================================================================

class ExecutionClusterLabel::_Internal {
 public:
};

ExecutionClusterLabel::ExecutionClusterLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.ExecutionClusterLabel)
}
ExecutionClusterLabel::ExecutionClusterLabel(const ExecutionClusterLabel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ExecutionClusterLabel)
}

inline void ExecutionClusterLabel::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExecutionClusterLabel::~ExecutionClusterLabel() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ExecutionClusterLabel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecutionClusterLabel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExecutionClusterLabel::ArenaDtor(void* object) {
  ExecutionClusterLabel* _this = reinterpret_cast< ExecutionClusterLabel* >(object);
  (void)_this;
}
void ExecutionClusterLabel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecutionClusterLabel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecutionClusterLabel::InternalSwap(ExecutionClusterLabel* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionClusterLabel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fmatchable_5fresource_2eproto[5]);
}

// ===================================================================

class PluginOverride::_Internal {
 public:
};

PluginOverride::PluginOverride(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  plugin_id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.PluginOverride)
}
PluginOverride::PluginOverride(const PluginOverride& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      plugin_id_(from.plugin_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    task_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_type().empty()) {
    task_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_type(), 
      GetArenaForAllocation());
  }
  missing_plugin_behavior_ = from.missing_plugin_behavior_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.PluginOverride)
}

inline void PluginOverride::SharedCtor() {
task_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  task_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
missing_plugin_behavior_ = 0;
}

PluginOverride::~PluginOverride() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.PluginOverride)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PluginOverride::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  task_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PluginOverride::ArenaDtor(void* object) {
  PluginOverride* _this = reinterpret_cast< PluginOverride* >(object);
  (void)_this;
}
void PluginOverride::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PluginOverride::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PluginOverride::InternalSwap(PluginOverride* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata PluginOverride::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fmatchable_5fresource_2eproto[6]);
}

// ===================================================================

class PluginOverrides::_Internal {
 public:
};

PluginOverrides::PluginOverrides(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  overrides_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.PluginOverrides)
}
PluginOverrides::PluginOverrides(const PluginOverrides& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      overrides_(from.overrides_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.PluginOverrides)
}

inline void PluginOverrides::SharedCtor() {
}

PluginOverrides::~PluginOverrides() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.PluginOverrides)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PluginOverrides::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PluginOverrides::ArenaDtor(void* object) {
  PluginOverrides* _this = reinterpret_cast< PluginOverrides* >(object);
  (void)_this;
}
void PluginOverrides::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PluginOverrides::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PluginOverrides::InternalSwap(PluginOverrides* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata PluginOverrides::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fmatchable_5fresource_2eproto[7]);
}

// ===================================================================

class WorkflowExecutionConfig::_Internal {
 public:
  static const ::flyteidl::core::SecurityContext& security_context(const WorkflowExecutionConfig* msg);
  static const ::flyteidl::admin::RawOutputDataConfig& raw_output_data_config(const WorkflowExecutionConfig* msg);
  static const ::flyteidl::admin::Labels& labels(const WorkflowExecutionConfig* msg);
  static const ::flyteidl::admin::Annotations& annotations(const WorkflowExecutionConfig* msg);
};

const ::flyteidl::core::SecurityContext&
WorkflowExecutionConfig::_Internal::security_context(const WorkflowExecutionConfig* msg) {
  return *msg->security_context_;
}
const ::flyteidl::admin::RawOutputDataConfig&
WorkflowExecutionConfig::_Internal::raw_output_data_config(const WorkflowExecutionConfig* msg) {
  return *msg->raw_output_data_config_;
}
const ::flyteidl::admin::Labels&
WorkflowExecutionConfig::_Internal::labels(const WorkflowExecutionConfig* msg) {
  return *msg->labels_;
}
const ::flyteidl::admin::Annotations&
WorkflowExecutionConfig::_Internal::annotations(const WorkflowExecutionConfig* msg) {
  return *msg->annotations_;
}
void WorkflowExecutionConfig::clear_security_context() {
  if (GetArenaForAllocation() == nullptr && security_context_ != nullptr) {
    delete security_context_;
  }
  security_context_ = nullptr;
}
void WorkflowExecutionConfig::clear_raw_output_data_config() {
  if (GetArenaForAllocation() == nullptr && raw_output_data_config_ != nullptr) {
    delete raw_output_data_config_;
  }
  raw_output_data_config_ = nullptr;
}
void WorkflowExecutionConfig::clear_labels() {
  if (GetArenaForAllocation() == nullptr && labels_ != nullptr) {
    delete labels_;
  }
  labels_ = nullptr;
}
void WorkflowExecutionConfig::clear_annotations() {
  if (GetArenaForAllocation() == nullptr && annotations_ != nullptr) {
    delete annotations_;
  }
  annotations_ = nullptr;
}
WorkflowExecutionConfig::WorkflowExecutionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.WorkflowExecutionConfig)
}
WorkflowExecutionConfig::WorkflowExecutionConfig(const WorkflowExecutionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_security_context()) {
    security_context_ = new ::flyteidl::core::SecurityContext(*from.security_context_);
  } else {
    security_context_ = nullptr;
  }
  if (from._internal_has_raw_output_data_config()) {
    raw_output_data_config_ = new ::flyteidl::admin::RawOutputDataConfig(*from.raw_output_data_config_);
  } else {
    raw_output_data_config_ = nullptr;
  }
  if (from._internal_has_labels()) {
    labels_ = new ::flyteidl::admin::Labels(*from.labels_);
  } else {
    labels_ = nullptr;
  }
  if (from._internal_has_annotations()) {
    annotations_ = new ::flyteidl::admin::Annotations(*from.annotations_);
  } else {
    annotations_ = nullptr;
  }
  max_parallelism_ = from.max_parallelism_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowExecutionConfig)
}

inline void WorkflowExecutionConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&security_context_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_parallelism_) -
    reinterpret_cast<char*>(&security_context_)) + sizeof(max_parallelism_));
}

WorkflowExecutionConfig::~WorkflowExecutionConfig() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowExecutionConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkflowExecutionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete security_context_;
  if (this != internal_default_instance()) delete raw_output_data_config_;
  if (this != internal_default_instance()) delete labels_;
  if (this != internal_default_instance()) delete annotations_;
}

void WorkflowExecutionConfig::ArenaDtor(void* object) {
  WorkflowExecutionConfig* _this = reinterpret_cast< WorkflowExecutionConfig* >(object);
  (void)_this;
}
void WorkflowExecutionConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkflowExecutionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkflowExecutionConfig::InternalSwap(WorkflowExecutionConfig* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowExecutionConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fmatchable_5fresource_2eproto[8]);
}

// ===================================================================

class MatchingAttributes::_Internal {
 public:
  static const ::flyteidl::admin::TaskResourceAttributes& task_resource_attributes(const MatchingAttributes* msg);
  static const ::flyteidl::admin::ClusterResourceAttributes& cluster_resource_attributes(const MatchingAttributes* msg);
  static const ::flyteidl::admin::ExecutionQueueAttributes& execution_queue_attributes(const MatchingAttributes* msg);
  static const ::flyteidl::admin::ExecutionClusterLabel& execution_cluster_label(const MatchingAttributes* msg);
  static const ::flyteidl::core::QualityOfService& quality_of_service(const MatchingAttributes* msg);
  static const ::flyteidl::admin::PluginOverrides& plugin_overrides(const MatchingAttributes* msg);
  static const ::flyteidl::admin::WorkflowExecutionConfig& workflow_execution_config(const MatchingAttributes* msg);
  static const ::flyteidl::admin::ClusterAssignment& cluster_assignment(const MatchingAttributes* msg);
};

const ::flyteidl::admin::TaskResourceAttributes&
MatchingAttributes::_Internal::task_resource_attributes(const MatchingAttributes* msg) {
  return *msg->target_.task_resource_attributes_;
}
const ::flyteidl::admin::ClusterResourceAttributes&
MatchingAttributes::_Internal::cluster_resource_attributes(const MatchingAttributes* msg) {
  return *msg->target_.cluster_resource_attributes_;
}
const ::flyteidl::admin::ExecutionQueueAttributes&
MatchingAttributes::_Internal::execution_queue_attributes(const MatchingAttributes* msg) {
  return *msg->target_.execution_queue_attributes_;
}
const ::flyteidl::admin::ExecutionClusterLabel&
MatchingAttributes::_Internal::execution_cluster_label(const MatchingAttributes* msg) {
  return *msg->target_.execution_cluster_label_;
}
const ::flyteidl::core::QualityOfService&
MatchingAttributes::_Internal::quality_of_service(const MatchingAttributes* msg) {
  return *msg->target_.quality_of_service_;
}
const ::flyteidl::admin::PluginOverrides&
MatchingAttributes::_Internal::plugin_overrides(const MatchingAttributes* msg) {
  return *msg->target_.plugin_overrides_;
}
const ::flyteidl::admin::WorkflowExecutionConfig&
MatchingAttributes::_Internal::workflow_execution_config(const MatchingAttributes* msg) {
  return *msg->target_.workflow_execution_config_;
}
const ::flyteidl::admin::ClusterAssignment&
MatchingAttributes::_Internal::cluster_assignment(const MatchingAttributes* msg) {
  return *msg->target_.cluster_assignment_;
}
void MatchingAttributes::set_allocated_task_resource_attributes(::flyteidl::admin::TaskResourceAttributes* task_resource_attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target();
  if (task_resource_attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::TaskResourceAttributes>::GetOwningArena(task_resource_attributes);
    if (message_arena != submessage_arena) {
      task_resource_attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_resource_attributes, submessage_arena);
    }
    set_has_task_resource_attributes();
    target_.task_resource_attributes_ = task_resource_attributes;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.MatchingAttributes.task_resource_attributes)
}
void MatchingAttributes::set_allocated_cluster_resource_attributes(::flyteidl::admin::ClusterResourceAttributes* cluster_resource_attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target();
  if (cluster_resource_attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::ClusterResourceAttributes>::GetOwningArena(cluster_resource_attributes);
    if (message_arena != submessage_arena) {
      cluster_resource_attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cluster_resource_attributes, submessage_arena);
    }
    set_has_cluster_resource_attributes();
    target_.cluster_resource_attributes_ = cluster_resource_attributes;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.MatchingAttributes.cluster_resource_attributes)
}
void MatchingAttributes::set_allocated_execution_queue_attributes(::flyteidl::admin::ExecutionQueueAttributes* execution_queue_attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target();
  if (execution_queue_attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::ExecutionQueueAttributes>::GetOwningArena(execution_queue_attributes);
    if (message_arena != submessage_arena) {
      execution_queue_attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execution_queue_attributes, submessage_arena);
    }
    set_has_execution_queue_attributes();
    target_.execution_queue_attributes_ = execution_queue_attributes;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.MatchingAttributes.execution_queue_attributes)
}
void MatchingAttributes::set_allocated_execution_cluster_label(::flyteidl::admin::ExecutionClusterLabel* execution_cluster_label) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target();
  if (execution_cluster_label) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::ExecutionClusterLabel>::GetOwningArena(execution_cluster_label);
    if (message_arena != submessage_arena) {
      execution_cluster_label = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execution_cluster_label, submessage_arena);
    }
    set_has_execution_cluster_label();
    target_.execution_cluster_label_ = execution_cluster_label;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.MatchingAttributes.execution_cluster_label)
}
void MatchingAttributes::set_allocated_quality_of_service(::flyteidl::core::QualityOfService* quality_of_service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target();
  if (quality_of_service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quality_of_service));
    if (message_arena != submessage_arena) {
      quality_of_service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quality_of_service, submessage_arena);
    }
    set_has_quality_of_service();
    target_.quality_of_service_ = quality_of_service;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.MatchingAttributes.quality_of_service)
}
void MatchingAttributes::clear_quality_of_service() {
  if (_internal_has_quality_of_service()) {
    if (GetArenaForAllocation() == nullptr) {
      delete target_.quality_of_service_;
    }
    clear_has_target();
  }
}
void MatchingAttributes::set_allocated_plugin_overrides(::flyteidl::admin::PluginOverrides* plugin_overrides) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target();
  if (plugin_overrides) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::PluginOverrides>::GetOwningArena(plugin_overrides);
    if (message_arena != submessage_arena) {
      plugin_overrides = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plugin_overrides, submessage_arena);
    }
    set_has_plugin_overrides();
    target_.plugin_overrides_ = plugin_overrides;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.MatchingAttributes.plugin_overrides)
}
void MatchingAttributes::set_allocated_workflow_execution_config(::flyteidl::admin::WorkflowExecutionConfig* workflow_execution_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target();
  if (workflow_execution_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::WorkflowExecutionConfig>::GetOwningArena(workflow_execution_config);
    if (message_arena != submessage_arena) {
      workflow_execution_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workflow_execution_config, submessage_arena);
    }
    set_has_workflow_execution_config();
    target_.workflow_execution_config_ = workflow_execution_config;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.MatchingAttributes.workflow_execution_config)
}
void MatchingAttributes::set_allocated_cluster_assignment(::flyteidl::admin::ClusterAssignment* cluster_assignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target();
  if (cluster_assignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cluster_assignment));
    if (message_arena != submessage_arena) {
      cluster_assignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cluster_assignment, submessage_arena);
    }
    set_has_cluster_assignment();
    target_.cluster_assignment_ = cluster_assignment;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.MatchingAttributes.cluster_assignment)
}
void MatchingAttributes::clear_cluster_assignment() {
  if (_internal_has_cluster_assignment()) {
    if (GetArenaForAllocation() == nullptr) {
      delete target_.cluster_assignment_;
    }
    clear_has_target();
  }
}
MatchingAttributes::MatchingAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.MatchingAttributes)
}
MatchingAttributes::MatchingAttributes(const MatchingAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_target();
  switch (from.target_case()) {
    case kTaskResourceAttributes: {
      _internal_mutable_task_resource_attributes()->::flyteidl::admin::TaskResourceAttributes::MergeFrom(from._internal_task_resource_attributes());
      break;
    }
    case kClusterResourceAttributes: {
      _internal_mutable_cluster_resource_attributes()->::flyteidl::admin::ClusterResourceAttributes::MergeFrom(from._internal_cluster_resource_attributes());
      break;
    }
    case kExecutionQueueAttributes: {
      _internal_mutable_execution_queue_attributes()->::flyteidl::admin::ExecutionQueueAttributes::MergeFrom(from._internal_execution_queue_attributes());
      break;
    }
    case kExecutionClusterLabel: {
      _internal_mutable_execution_cluster_label()->::flyteidl::admin::ExecutionClusterLabel::MergeFrom(from._internal_execution_cluster_label());
      break;
    }
    case kQualityOfService: {
      _internal_mutable_quality_of_service()->::flyteidl::core::QualityOfService::MergeFrom(from._internal_quality_of_service());
      break;
    }
    case kPluginOverrides: {
      _internal_mutable_plugin_overrides()->::flyteidl::admin::PluginOverrides::MergeFrom(from._internal_plugin_overrides());
      break;
    }
    case kWorkflowExecutionConfig: {
      _internal_mutable_workflow_execution_config()->::flyteidl::admin::WorkflowExecutionConfig::MergeFrom(from._internal_workflow_execution_config());
      break;
    }
    case kClusterAssignment: {
      _internal_mutable_cluster_assignment()->::flyteidl::admin::ClusterAssignment::MergeFrom(from._internal_cluster_assignment());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.MatchingAttributes)
}

inline void MatchingAttributes::SharedCtor() {
clear_has_target();
}

MatchingAttributes::~MatchingAttributes() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.MatchingAttributes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MatchingAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_target()) {
    clear_target();
  }
}

void MatchingAttributes::ArenaDtor(void* object) {
  MatchingAttributes* _this = reinterpret_cast< MatchingAttributes* >(object);
  (void)_this;
}
void MatchingAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchingAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MatchingAttributes::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.admin.MatchingAttributes)
  switch (target_case()) {
    case kTaskResourceAttributes: {
      if (GetArenaForAllocation() == nullptr) {
        delete target_.task_resource_attributes_;
      }
      break;
    }
    case kClusterResourceAttributes: {
      if (GetArenaForAllocation() == nullptr) {
        delete target_.cluster_resource_attributes_;
      }
      break;
    }
    case kExecutionQueueAttributes: {
      if (GetArenaForAllocation() == nullptr) {
        delete target_.execution_queue_attributes_;
      }
      break;
    }
    case kExecutionClusterLabel: {
      if (GetArenaForAllocation() == nullptr) {
        delete target_.execution_cluster_label_;
      }
      break;
    }
    case kQualityOfService: {
      if (GetArenaForAllocation() == nullptr) {
        delete target_.quality_of_service_;
      }
      break;
    }
    case kPluginOverrides: {
      if (GetArenaForAllocation() == nullptr) {
        delete target_.plugin_overrides_;
      }
      break;
    }
    case kWorkflowExecutionConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete target_.workflow_execution_config_;
      }
      break;
    }
    case kClusterAssignment: {
      if (GetArenaForAllocation() == nullptr) {
        delete target_.cluster_assignment_;
      }
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void MatchingAttributes::InternalSwap(MatchingAttributes* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata MatchingAttributes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fmatchable_5fresource_2eproto[9]);
}

// ===================================================================

class MatchableAttributesConfiguration::_Internal {
 public:
  static const ::flyteidl::admin::MatchingAttributes& attributes(const MatchableAttributesConfiguration* msg);
};

const ::flyteidl::admin::MatchingAttributes&
MatchableAttributesConfiguration::_Internal::attributes(const MatchableAttributesConfiguration* msg) {
  return *msg->attributes_;
}
MatchableAttributesConfiguration::MatchableAttributesConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.MatchableAttributesConfiguration)
}
MatchableAttributesConfiguration::MatchableAttributesConfiguration(const MatchableAttributesConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_domain().empty()) {
    domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_domain(), 
      GetArenaForAllocation());
  }
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    project_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_project().empty()) {
    project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project(), 
      GetArenaForAllocation());
  }
  workflow_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    workflow_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workflow().empty()) {
    workflow_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_workflow(), 
      GetArenaForAllocation());
  }
  launch_plan_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    launch_plan_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_launch_plan().empty()) {
    launch_plan_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_launch_plan(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_attributes()) {
    attributes_ = new ::flyteidl::admin::MatchingAttributes(*from.attributes_);
  } else {
    attributes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.MatchableAttributesConfiguration)
}

inline void MatchableAttributesConfiguration::SharedCtor() {
domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  project_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
workflow_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  workflow_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
launch_plan_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  launch_plan_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
attributes_ = nullptr;
}

MatchableAttributesConfiguration::~MatchableAttributesConfiguration() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.MatchableAttributesConfiguration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MatchableAttributesConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  project_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  workflow_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  launch_plan_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete attributes_;
}

void MatchableAttributesConfiguration::ArenaDtor(void* object) {
  MatchableAttributesConfiguration* _this = reinterpret_cast< MatchableAttributesConfiguration* >(object);
  (void)_this;
}
void MatchableAttributesConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchableAttributesConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MatchableAttributesConfiguration::InternalSwap(MatchableAttributesConfiguration* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata MatchableAttributesConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fmatchable_5fresource_2eproto[10]);
}

// ===================================================================

class ListMatchableAttributesRequest::_Internal {
 public:
};

ListMatchableAttributesRequest::ListMatchableAttributesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.ListMatchableAttributesRequest)
}
ListMatchableAttributesRequest::ListMatchableAttributesRequest(const ListMatchableAttributesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  resource_type_ = from.resource_type_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ListMatchableAttributesRequest)
}

inline void ListMatchableAttributesRequest::SharedCtor() {
resource_type_ = 0;
}

ListMatchableAttributesRequest::~ListMatchableAttributesRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ListMatchableAttributesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListMatchableAttributesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListMatchableAttributesRequest::ArenaDtor(void* object) {
  ListMatchableAttributesRequest* _this = reinterpret_cast< ListMatchableAttributesRequest* >(object);
  (void)_this;
}
void ListMatchableAttributesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListMatchableAttributesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListMatchableAttributesRequest::InternalSwap(ListMatchableAttributesRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ListMatchableAttributesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fmatchable_5fresource_2eproto[11]);
}

// ===================================================================

class ListMatchableAttributesResponse::_Internal {
 public:
};

ListMatchableAttributesResponse::ListMatchableAttributesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  configurations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.ListMatchableAttributesResponse)
}
ListMatchableAttributesResponse::ListMatchableAttributesResponse(const ListMatchableAttributesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      configurations_(from.configurations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ListMatchableAttributesResponse)
}

inline void ListMatchableAttributesResponse::SharedCtor() {
}

ListMatchableAttributesResponse::~ListMatchableAttributesResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ListMatchableAttributesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListMatchableAttributesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListMatchableAttributesResponse::ArenaDtor(void* object) {
  ListMatchableAttributesResponse* _this = reinterpret_cast< ListMatchableAttributesResponse* >(object);
  (void)_this;
}
void ListMatchableAttributesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListMatchableAttributesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListMatchableAttributesResponse::InternalSwap(ListMatchableAttributesResponse* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ListMatchableAttributesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fmatchable_5fresource_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskResourceSpec* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskResourceSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::TaskResourceSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskResourceAttributes* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskResourceAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::TaskResourceAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ClusterResourceAttributes_AttributesEntry_DoNotUse* Arena::CreateMaybeMessage< ::flyteidl::admin::ClusterResourceAttributes_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::ClusterResourceAttributes_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ClusterResourceAttributes* Arena::CreateMaybeMessage< ::flyteidl::admin::ClusterResourceAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::ClusterResourceAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ExecutionQueueAttributes* Arena::CreateMaybeMessage< ::flyteidl::admin::ExecutionQueueAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::ExecutionQueueAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ExecutionClusterLabel* Arena::CreateMaybeMessage< ::flyteidl::admin::ExecutionClusterLabel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::ExecutionClusterLabel >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::PluginOverride* Arena::CreateMaybeMessage< ::flyteidl::admin::PluginOverride >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::PluginOverride >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::PluginOverrides* Arena::CreateMaybeMessage< ::flyteidl::admin::PluginOverrides >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::PluginOverrides >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::WorkflowExecutionConfig* Arena::CreateMaybeMessage< ::flyteidl::admin::WorkflowExecutionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::WorkflowExecutionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::MatchingAttributes* Arena::CreateMaybeMessage< ::flyteidl::admin::MatchingAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::MatchingAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::MatchableAttributesConfiguration* Arena::CreateMaybeMessage< ::flyteidl::admin::MatchableAttributesConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::MatchableAttributesConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ListMatchableAttributesRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::ListMatchableAttributesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::ListMatchableAttributesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ListMatchableAttributesResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::ListMatchableAttributesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::ListMatchableAttributesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
