// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/service/admin.proto

package flyteidl.service;

public final class Admin {
  private Admin() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\034flyteidl/service/admin.proto\022\020flyteidl" +
      ".service\032\034google/api/annotations.proto\032\034" +
      "flyteidl/admin/project.proto\032.flyteidl/a" +
      "dmin/project_domain_attributes.proto\032\031fl" +
      "yteidl/admin/task.proto\032\035flyteidl/admin/" +
      "workflow.proto\032(flyteidl/admin/workflow_" +
      "attributes.proto\032 flyteidl/admin/launch_" +
      "plan.proto\032\032flyteidl/admin/event.proto\032\036" +
      "flyteidl/admin/execution.proto\032\'flyteidl" +
      "/admin/matchable_resource.proto\032#flyteid" +
      "l/admin/node_execution.proto\032#flyteidl/a" +
      "dmin/task_execution.proto\032\034flyteidl/admi" +
      "n/version.proto\032\033flyteidl/admin/common.p" +
      "roto\032,protoc-gen-swagger/options/annotat" +
      "ions.proto2\305f\n\014AdminService\022\305\002\n\nCreateTa" +
      "sk\022!.flyteidl.admin.TaskCreateRequest\032\"." +
      "flyteidl.admin.TaskCreateResponse\"\357\001\202\323\344\223" +
      "\002\022\"\r/api/v1/tasks:\001*\222A\323\001\032&Create and reg" +
      "ister a task definition.JB\n\003400\022;\n9Retur" +
      "ned for bad request that may have failed" +
      " validation.Je\n\003409\022^\n\\Returned for a re" +
      "quest that references an identical entit" +
      "y that has already been registered.\022\262\001\n\007" +
      "GetTask\022 .flyteidl.admin.ObjectGetReques" +
      "t\032\024.flyteidl.admin.Task\"o\202\323\344\223\002?\022=/api/v1" +
      "/tasks/{id.project}/{id.domain}/{id.name" +
      "}/{id.version}\222A\'\032%Retrieve an existing " +
      "task definition.\022\336\001\n\013ListTaskIds\0220.flyte" +
      "idl.admin.NamedEntityIdentifierListReque" +
      "st\032).flyteidl.admin.NamedEntityIdentifie" +
      "rList\"r\202\323\344\223\002%\022#/api/v1/task_ids/{project" +
      "}/{domain}\222AD\032BFetch existing task defin" +
      "ition identifiers matching input filters" +
      ".\022\353\001\n\tListTasks\022#.flyteidl.admin.Resourc" +
      "eListRequest\032\030.flyteidl.admin.TaskList\"\236" +
      "\001\202\323\344\223\002\\\0220/api/v1/tasks/{id.project}/{id." +
      "domain}/{id.name}Z(\022&/api/v1/tasks/{id.p" +
      "roject}/{id.domain}\222A9\0327Fetch existing t" +
      "ask definitions matching input filters.\022" +
      "\331\002\n\016CreateWorkflow\022%.flyteidl.admin.Work" +
      "flowCreateRequest\032&.flyteidl.admin.Workf" +
      "lowCreateResponse\"\367\001\202\323\344\223\002\026\"\021/api/v1/work" +
      "flows:\001*\222A\327\001\032*Create and register a work" +
      "flow definition.JB\n\003400\022;\n9Returned for " +
      "bad request that may have failed validat" +
      "ion.Je\n\003409\022^\n\\Returned for a request th" +
      "at references an identical entity that h" +
      "as already been registered.\022\302\001\n\013GetWorkf" +
      "low\022 .flyteidl.admin.ObjectGetRequest\032\030." +
      "flyteidl.admin.Workflow\"w\202\323\344\223\002C\022A/api/v1" +
      "/workflows/{id.project}/{id.domain}/{id." +
      "name}/{id.version}\222A+\032)Retrieve an exist" +
      "ing workflow definition.\022\355\001\n\017ListWorkflo" +
      "wIds\0220.flyteidl.admin.NamedEntityIdentif" +
      "ierListRequest\032).flyteidl.admin.NamedEnt" +
      "ityIdentifierList\"}\202\323\344\223\002)\022\'/api/v1/workf" +
      "low_ids/{project}/{domain}\222AK\032IFetch an " +
      "existing workflow definition identifiers" +
      " matching input filters.\022\377\001\n\rListWorkflo" +
      "ws\022#.flyteidl.admin.ResourceListRequest\032" +
      "\034.flyteidl.admin.WorkflowList\"\252\001\202\323\344\223\002d\0224" +
      "/api/v1/workflows/{id.project}/{id.domai" +
      "n}/{id.name}Z,\022*/api/v1/workflows/{id.pr" +
      "oject}/{id.domain}\222A=\032;Fetch existing wo" +
      "rkflow definitions matching input filter" +
      "s.\022\345\002\n\020CreateLaunchPlan\022\'.flyteidl.admin" +
      ".LaunchPlanCreateRequest\032(.flyteidl.admi" +
      "n.LaunchPlanCreateResponse\"\375\001\202\323\344\223\002\031\"\024/ap" +
      "i/v1/launch_plans:\001*\222A\332\001\032-Create and reg" +
      "ister a launch plan definition.JB\n\003400\022;" +
      "\n9Returned for bad request that may have" +
      " failed validation.Je\n\003409\022^\n\\Returned f" +
      "or a request that references an identica" +
      "l entity that has already been registere" +
      "d.\022\314\001\n\rGetLaunchPlan\022 .flyteidl.admin.Ob" +
      "jectGetRequest\032\032.flyteidl.admin.LaunchPl" +
      "an\"}\202\323\344\223\002F\022D/api/v1/launch_plans/{id.pro" +
      "ject}/{id.domain}/{id.name}/{id.version}" +
      "\222A.\032,Retrieve an existing launch plan de" +
      "finition.\022\363\001\n\023GetActiveLaunchPlan\022\'.flyt" +
      "eidl.admin.ActiveLaunchPlanRequest\032\032.fly" +
      "teidl.admin.LaunchPlan\"\226\001\202\323\344\223\002@\022>/api/v1" +
      "/active_launch_plans/{id.project}/{id.do" +
      "main}/{id.name}\222AM\032KRetrieve the active " +
      "launch plan version specified by input r" +
      "equest filters.\022\353\001\n\025ListActiveLaunchPlan" +
      "s\022+.flyteidl.admin.ActiveLaunchPlanListR" +
      "equest\032\036.flyteidl.admin.LaunchPlanList\"\204" +
      "\001\202\323\344\223\0020\022./api/v1/active_launch_plans/{pr" +
      "oject}/{domain}\222AK\032IFetch the active lau" +
      "nch plan versions specified by input req" +
      "uest filters.\022\363\001\n\021ListLaunchPlanIds\0220.fl" +
      "yteidl.admin.NamedEntityIdentifierListRe" +
      "quest\032).flyteidl.admin.NamedEntityIdenti" +
      "fierList\"\200\001\202\323\344\223\002,\022*/api/v1/launch_plan_i" +
      "ds/{project}/{domain}\222AK\032IFetch existing" +
      " launch plan definition identifiers matc" +
      "hing input filters.\022\214\002\n\017ListLaunchPlans\022" +
      "#.flyteidl.admin.ResourceListRequest\032\036.f" +
      "lyteidl.admin.LaunchPlanList\"\263\001\202\323\344\223\002j\0227/" +
      "api/v1/launch_plans/{id.project}/{id.dom" +
      "ain}/{id.name}Z/\022-/api/v1/launch_plans/{" +
      "id.project}/{id.domain}\222A@\032>Fetch existi" +
      "ng launch plan definitions matching inpu" +
      "t filters.\022\300\006\n\020UpdateLaunchPlan\022\'.flytei" +
      "dl.admin.LaunchPlanUpdateRequest\032(.flyte" +
      "idl.admin.LaunchPlanUpdateResponse\"\330\005\202\323\344" +
      "\223\002I\032D/api/v1/launch_plans/{id.project}/{" +
      "id.domain}/{id.name}/{id.version}:\001*\222A\205\005" +
      "\032\202\005Update the status of an existing laun" +
      "ch plan definition. At most one launch p" +
      "lan version for a given {project, domain" +
      ", name} can be active at a time. If this" +
      " call sets a launch plan to active and e" +
      "xisting version is already active, the r" +
      "esult of this call will be that the form" +
      "erly active launch plan will be made ina" +
      "ctive and specified launch plan in this " +
      "request will be made active. In the even" +
      "t that the formerly active launch plan h" +
      "ad a schedule associated it with it, thi" +
      "s schedule will be disabled. If the refe" +
      "rence launch plan in this request is bei" +
      "ng set to active and has a schedule asso" +
      "ciated with it, the schedule will be ena" +
      "bled.\022\242\001\n\017CreateExecution\022&.flyteidl.adm" +
      "in.ExecutionCreateRequest\032\'.flyteidl.adm" +
      "in.ExecutionCreateResponse\">\202\323\344\223\002\027\"\022/api" +
      "/v1/executions:\001*\222A\036\032\034Create a workflow " +
      "execution.\022\261\001\n\021RelaunchExecution\022(.flyte" +
      "idl.admin.ExecutionRelaunchRequest\032\'.fly" +
      "teidl.admin.ExecutionCreateResponse\"I\202\323\344" +
      "\223\002 \"\033/api/v1/executions/relaunch:\001*\222A \032\036" +
      "Relaunch a workflow execution.\022\235\005\n\020Recov" +
      "erExecution\022\'.flyteidl.admin.ExecutionRe" +
      "coverRequest\032\'.flyteidl.admin.ExecutionC" +
      "reateResponse\"\266\004\202\323\344\223\002\037\"\032/api/v1/executio" +
      "ns/recover:\001*\222A\215\004\032\212\004Recreates a previous" +
      "ly-run workflow execution that will only" +
      " start executing from the last known fai" +
      "lure point. In Recover mode, users canno" +
      "t change any input parameters or update " +
      "the version of the execution. This is ex" +
      "tremely useful to recover from system er" +
      "rors and byzantine faults like - Loss of" +
      " K8s cluster, bugs in platform or instab" +
      "ility, machine failures, downstream syst" +
      "em failures (downstream services), or si" +
      "mply to recover executions that failed b" +
      "ecause of retry exhaustion and should co" +
      "mplete if tried again.\022\302\001\n\014GetExecution\022" +
      "+.flyteidl.admin.WorkflowExecutionGetReq" +
      "uest\032\031.flyteidl.admin.Execution\"j\202\323\344\223\0027\022" +
      "5/api/v1/executions/{id.project}/{id.dom" +
      "ain}/{id.name}\222A*\032(Retrieve an existing " +
      "workflow execution.\022\202\002\n\020GetExecutionData" +
      "\022/.flyteidl.admin.WorkflowExecutionGetDa" +
      "taRequest\0320.flyteidl.admin.WorkflowExecu" +
      "tionGetDataResponse\"\212\001\202\323\344\223\002<\022:/api/v1/da" +
      "ta/executions/{id.project}/{id.domain}/{" +
      "id.name}\222AE\032CRetrieve input and output d" +
      "ata from an existing workflow execution." +
      "\022\310\001\n\016ListExecutions\022#.flyteidl.admin.Res" +
      "ourceListRequest\032\035.flyteidl.admin.Execut" +
      "ionList\"r\202\323\344\223\002-\022+/api/v1/executions/{id." +
      "project}/{id.domain}\222A<\032:Fetch existing " +
      "workflow executions matching input filte" +
      "rs.\022\364\001\n\022TerminateExecution\022).flyteidl.ad" +
      "min.ExecutionTerminateRequest\032*.flyteidl" +
      ".admin.ExecutionTerminateResponse\"\206\001\202\323\344\223" +
      "\002:*5/api/v1/executions/{id.project}/{id." +
      "domain}/{id.name}:\001*\222AC\032ATerminate the a" +
      "ctive workflow execution specified in th" +
      "e request.\022\374\001\n\020GetNodeExecution\022\'.flytei" +
      "dl.admin.NodeExecutionGetRequest\032\035.flyte" +
      "idl.admin.NodeExecution\"\237\001\202\323\344\223\002p\022n/api/v" +
      "1/node_executions/{id.execution_id.proje" +
      "ct}/{id.execution_id.domain}/{id.executi" +
      "on_id.name}/{id.node_id}\222A&\032$Retrieve an" +
      " existing node execution.\022\232\002\n\022ListNodeEx" +
      "ecutions\022(.flyteidl.admin.NodeExecutionL" +
      "istRequest\032!.flyteidl.admin.NodeExecutio" +
      "nList\"\266\001\202\323\344\223\002u\022s/api/v1/node_executions/" +
      "{workflow_execution_id.project}/{workflo" +
      "w_execution_id.domain}/{workflow_executi" +
      "on_id.name}\222A8\0326Fetch existing node exec" +
      "utions matching input filters.\022\357\004\n\031ListN" +
      "odeExecutionsForTask\022/.flyteidl.admin.No" +
      "deExecutionForTaskListRequest\032!.flyteidl" +
      ".admin.NodeExecutionList\"\375\003\202\323\344\223\002\254\003\022\251\003/ap" +
      "i/v1/children/task_executions/{task_exec" +
      "ution_id.node_execution_id.execution_id." +
      "project}/{task_execution_id.node_executi" +
      "on_id.execution_id.domain}/{task_executi" +
      "on_id.node_execution_id.execution_id.nam" +
      "e}/{task_execution_id.node_execution_id." +
      "node_id}/{task_execution_id.task_id.proj" +
      "ect}/{task_execution_id.task_id.domain}/" +
      "{task_execution_id.task_id.name}/{task_e" +
      "xecution_id.task_id.version}/{task_execu" +
      "tion_id.retry_attempt}\222AG\032EFetch child n" +
      "ode executions launched by the specified" +
      " task execution.\022\263\002\n\024GetNodeExecutionDat" +
      "a\022+.flyteidl.admin.NodeExecutionGetDataR" +
      "equest\032,.flyteidl.admin.NodeExecutionGet" +
      "DataResponse\"\277\001\202\323\344\223\002u\022s/api/v1/data/node" +
      "_executions/{id.execution_id.project}/{i" +
      "d.execution_id.domain}/{id.execution_id." +
      "name}/{id.node_id}\222AA\032?Retrieve input an" +
      "d output data from an existing node exec" +
      "ution.\022\227\001\n\017RegisterProject\022&.flyteidl.ad" +
      "min.ProjectRegisterRequest\032\'.flyteidl.ad" +
      "min.ProjectRegisterResponse\"3\202\323\344\223\002\025\"\020/ap" +
      "i/v1/projects:\001*\222A\025\032\023Register a project." +
      "\022\207\001\n\rUpdateProject\022\027.flyteidl.admin.Proj" +
      "ect\032%.flyteidl.admin.ProjectUpdateRespon" +
      "se\"6\202\323\344\223\002\032\032\025/api/v1/projects/{id}:\001*\222A\023\032" +
      "\021Update a project.\022\205\001\n\014ListProjects\022\".fl" +
      "yteidl.admin.ProjectListRequest\032\030.flytei" +
      "dl.admin.Projects\"7\202\323\344\223\002\022\022\020/api/v1/proje" +
      "cts\222A\034\032\032Fetch registered projects.\022\335\001\n\023C" +
      "reateWorkflowEvent\022-.flyteidl.admin.Work" +
      "flowExecutionEventRequest\032..flyteidl.adm" +
      "in.WorkflowExecutionEventResponse\"g\202\323\344\223\002" +
      "\035\"\030/api/v1/events/workflows:\001*\222AA\032?Creat" +
      "e a workflow execution event recording a" +
      " phase transition.\022\311\001\n\017CreateNodeEvent\022)" +
      ".flyteidl.admin.NodeExecutionEventReques" +
      "t\032*.flyteidl.admin.NodeExecutionEventRes" +
      "ponse\"_\202\323\344\223\002\031\"\024/api/v1/events/nodes:\001*\222A" +
      "=\032;Create a node execution event recordi" +
      "ng a phase transition.\022\311\001\n\017CreateTaskEve" +
      "nt\022).flyteidl.admin.TaskExecutionEventRe" +
      "quest\032*.flyteidl.admin.TaskExecutionEven" +
      "tResponse\"_\202\323\344\223\002\031\"\024/api/v1/events/tasks:" +
      "\001*\222A=\032;Create a task execution event rec" +
      "ording a phase transition.\022\251\003\n\020GetTaskEx" +
      "ecution\022\'.flyteidl.admin.TaskExecutionGe" +
      "tRequest\032\035.flyteidl.admin.TaskExecution\"" +
      "\314\002\202\323\344\223\002\234\002\022\231\002/api/v1/task_executions/{id." +
      "node_execution_id.execution_id.project}/" +
      "{id.node_execution_id.execution_id.domai" +
      "n}/{id.node_execution_id.execution_id.na" +
      "me}/{id.node_execution_id.node_id}/{id.t" +
      "ask_id.project}/{id.task_id.domain}/{id." +
      "task_id.name}/{id.task_id.version}/{id.r" +
      "etry_attempt}\222A&\032$Retrieve an existing t" +
      "ask execution.\022\323\002\n\022ListTaskExecutions\022(." +
      "flyteidl.admin.TaskExecutionListRequest\032" +
      "!.flyteidl.admin.TaskExecutionList\"\357\001\202\323\344" +
      "\223\002\255\001\022\252\001/api/v1/task_executions/{node_exe" +
      "cution_id.execution_id.project}/{node_ex" +
      "ecution_id.execution_id.domain}/{node_ex" +
      "ecution_id.execution_id.name}/{node_exec" +
      "ution_id.node_id}\222A8\0326Fetch existing tas" +
      "k executions matching input filters.\022\340\003\n" +
      "\024GetTaskExecutionData\022+.flyteidl.admin.T" +
      "askExecutionGetDataRequest\032,.flyteidl.ad" +
      "min.TaskExecutionGetDataResponse\"\354\002\202\323\344\223\002" +
      "\241\002\022\236\002/api/v1/data/task_executions/{id.no" +
      "de_execution_id.execution_id.project}/{i" +
      "d.node_execution_id.execution_id.domain}" +
      "/{id.node_execution_id.execution_id.name" +
      "}/{id.node_execution_id.node_id}/{id.tas" +
      "k_id.project}/{id.task_id.domain}/{id.ta" +
      "sk_id.name}/{id.task_id.version}/{id.ret" +
      "ry_attempt}\222AA\032?Retrieve input and outpu" +
      "t data from an existing task execution.\022" +
      "\277\002\n\035UpdateProjectDomainAttributes\0224.flyt" +
      "eidl.admin.ProjectDomainAttributesUpdate" +
      "Request\0325.flyteidl.admin.ProjectDomainAt" +
      "tributesUpdateResponse\"\260\001\202\323\344\223\002O\032J/api/v1" +
      "/project_domain_attributes/{attributes.p" +
      "roject}/{attributes.domain}:\001*\222AX\032VUpdat" +
      "e the customized resource attributes ass" +
      "ociated with a project-domain combinatio" +
      "n\022\237\002\n\032GetProjectDomainAttributes\0221.flyte" +
      "idl.admin.ProjectDomainAttributesGetRequ" +
      "est\0322.flyteidl.admin.ProjectDomainAttrib" +
      "utesGetResponse\"\231\001\202\323\344\223\0026\0224/api/v1/projec" +
      "t_domain_attributes/{project}/{domain}\222A" +
      "Z\032XRetrieve the customized resource attr" +
      "ibutes associated with a project-domain " +
      "combination\022\251\002\n\035DeleteProjectDomainAttri" +
      "butes\0224.flyteidl.admin.ProjectDomainAttr" +
      "ibutesDeleteRequest\0325.flyteidl.admin.Pro" +
      "jectDomainAttributesDeleteResponse\"\232\001\202\323\344" +
      "\223\0029*4/api/v1/project_domain_attributes/{" +
      "project}/{domain}:\001*\222AX\032VDelete the cust" +
      "omized resource attributes associated wi" +
      "th a project-domain combination\022\316\002\n\030Upda" +
      "teWorkflowAttributes\022/.flyteidl.admin.Wo" +
      "rkflowAttributesUpdateRequest\0320.flyteidl" +
      ".admin.WorkflowAttributesUpdateResponse\"" +
      "\316\001\202\323\344\223\002_\032Z/api/v1/workflow_attributes/{a" +
      "ttributes.project}/{attributes.domain}/{" +
      "attributes.workflow}:\001*\222Af\032dUpdate the c" +
      "ustomized resource attributes associated" +
      " with a project, domain and workflow com" +
      "bination\022\243\002\n\025GetWorkflowAttributes\022,.fly" +
      "teidl.admin.WorkflowAttributesGetRequest" +
      "\032-.flyteidl.admin.WorkflowAttributesGetR" +
      "esponse\"\254\001\202\323\344\223\002;\0229/api/v1/workflow_attri" +
      "butes/{project}/{domain}/{workflow}\222Ah\032f" +
      "Retrieve the customized resource attribu" +
      "tes associated with a project, domain an" +
      "d workflow combination\022\255\002\n\030DeleteWorkflo" +
      "wAttributes\022/.flyteidl.admin.WorkflowAtt" +
      "ributesDeleteRequest\0320.flyteidl.admin.Wo" +
      "rkflowAttributesDeleteResponse\"\255\001\202\323\344\223\002>*" +
      "9/api/v1/workflow_attributes/{project}/{" +
      "domain}/{workflow}:\001*\222Af\032dDelete the cus" +
      "tomized resource attributes associated w" +
      "ith a project, domain and workflow combi" +
      "nation\022\341\001\n\027ListMatchableAttributes\022..fly" +
      "teidl.admin.ListMatchableAttributesReque" +
      "st\032/.flyteidl.admin.ListMatchableAttribu" +
      "tesResponse\"e\202\323\344\223\002\036\022\034/api/v1/matchable_a" +
      "ttributes\222A>\032<Retrieve a list of Matchab" +
      "leAttributesConfiguration objects.\022\200\002\n\021L" +
      "istNamedEntities\022&.flyteidl.admin.NamedE" +
      "ntityListRequest\032\037.flyteidl.admin.NamedE" +
      "ntityList\"\241\001\202\323\344\223\002;\0229/api/v1/named_entiti" +
      "es/{resource_type}/{project}/{domain}\222A]" +
      "\032[Retrieve a list of NamedEntity objects" +
      " sharing a common resource type, project" +
      ", and domain.\022\312\001\n\016GetNamedEntity\022%.flyte" +
      "idl.admin.NamedEntityGetRequest\032\033.flytei" +
      "dl.admin.NamedEntity\"t\202\323\344\223\002K\022I/api/v1/na" +
      "med_entities/{resource_type}/{id.project" +
      "}/{id.domain}/{id.name}\222A \032\036Retrieve a N" +
      "amedEntity object.\022\363\001\n\021UpdateNamedEntity" +
      "\022(.flyteidl.admin.NamedEntityUpdateReque" +
      "st\032).flyteidl.admin.NamedEntityUpdateRes" +
      "ponse\"\210\001\202\323\344\223\002N\032I/api/v1/named_entities/{" +
      "resource_type}/{id.project}/{id.domain}/" +
      "{id.name}:\001*\222A1\032/Update the fields assoc" +
      "iated with a NamedEntity\022\277\001\n\nGetVersion\022" +
      "!.flyteidl.admin.GetVersionRequest\032\".fly" +
      "teidl.admin.GetVersionResponse\"j\202\323\344\223\002\021\022\017" +
      "/api/v1/version\222AP\032NRetrieve the Version" +
      " (including the Build  information) for " +
      "FlyteAdmin serviceB9Z7github.com/flyteor" +
      "g/flyteidl/gen/pb-go/flyteidl/serviceb\006p" +
      "roto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.api.AnnotationsProto.getDescriptor(),
          flyteidl.admin.ProjectOuterClass.getDescriptor(),
          flyteidl.admin.ProjectDomainAttributesOuterClass.getDescriptor(),
          flyteidl.admin.TaskOuterClass.getDescriptor(),
          flyteidl.admin.WorkflowOuterClass.getDescriptor(),
          flyteidl.admin.WorkflowAttributesOuterClass.getDescriptor(),
          flyteidl.admin.LaunchPlanOuterClass.getDescriptor(),
          flyteidl.admin.Event.getDescriptor(),
          flyteidl.admin.ExecutionOuterClass.getDescriptor(),
          flyteidl.admin.MatchableResourceOuterClass.getDescriptor(),
          flyteidl.admin.NodeExecutionOuterClass.getDescriptor(),
          flyteidl.admin.TaskExecutionOuterClass.getDescriptor(),
          flyteidl.admin.VersionOuterClass.getDescriptor(),
          flyteidl.admin.Common.getDescriptor(),
          grpc.gateway.protoc_gen_swagger.options.Annotations.getDescriptor(),
        }, assigner);
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.google.api.AnnotationsProto.http);
    registry.add(grpc.gateway.protoc_gen_swagger.options.Annotations.openapiv2Operation);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.google.api.AnnotationsProto.getDescriptor();
    flyteidl.admin.ProjectOuterClass.getDescriptor();
    flyteidl.admin.ProjectDomainAttributesOuterClass.getDescriptor();
    flyteidl.admin.TaskOuterClass.getDescriptor();
    flyteidl.admin.WorkflowOuterClass.getDescriptor();
    flyteidl.admin.WorkflowAttributesOuterClass.getDescriptor();
    flyteidl.admin.LaunchPlanOuterClass.getDescriptor();
    flyteidl.admin.Event.getDescriptor();
    flyteidl.admin.ExecutionOuterClass.getDescriptor();
    flyteidl.admin.MatchableResourceOuterClass.getDescriptor();
    flyteidl.admin.NodeExecutionOuterClass.getDescriptor();
    flyteidl.admin.TaskExecutionOuterClass.getDescriptor();
    flyteidl.admin.VersionOuterClass.getDescriptor();
    flyteidl.admin.Common.getDescriptor();
    grpc.gateway.protoc_gen_swagger.options.Annotations.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
