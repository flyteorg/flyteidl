// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/matchable_resource.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2fmatchable_5fresource_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2fmatchable_5fresource_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/admin/common.pb.h"
#include "flyteidl/admin/cluster_assignment.pb.h"
#include "flyteidl/core/execution.pb.h"
#include "flyteidl/core/security.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fmatchable_5fresource_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
namespace flyteidl {
namespace admin {
class ClusterResourceAttributes;
struct ClusterResourceAttributesDefaultTypeInternal;
extern ClusterResourceAttributesDefaultTypeInternal _ClusterResourceAttributes_default_instance_;
class ClusterResourceAttributes_AttributesEntry_DoNotUse;
struct ClusterResourceAttributes_AttributesEntry_DoNotUseDefaultTypeInternal;
extern ClusterResourceAttributes_AttributesEntry_DoNotUseDefaultTypeInternal _ClusterResourceAttributes_AttributesEntry_DoNotUse_default_instance_;
class ExecutionClusterLabel;
struct ExecutionClusterLabelDefaultTypeInternal;
extern ExecutionClusterLabelDefaultTypeInternal _ExecutionClusterLabel_default_instance_;
class ExecutionQueueAttributes;
struct ExecutionQueueAttributesDefaultTypeInternal;
extern ExecutionQueueAttributesDefaultTypeInternal _ExecutionQueueAttributes_default_instance_;
class ListMatchableAttributesRequest;
struct ListMatchableAttributesRequestDefaultTypeInternal;
extern ListMatchableAttributesRequestDefaultTypeInternal _ListMatchableAttributesRequest_default_instance_;
class ListMatchableAttributesResponse;
struct ListMatchableAttributesResponseDefaultTypeInternal;
extern ListMatchableAttributesResponseDefaultTypeInternal _ListMatchableAttributesResponse_default_instance_;
class MatchableAttributesConfiguration;
struct MatchableAttributesConfigurationDefaultTypeInternal;
extern MatchableAttributesConfigurationDefaultTypeInternal _MatchableAttributesConfiguration_default_instance_;
class MatchingAttributes;
struct MatchingAttributesDefaultTypeInternal;
extern MatchingAttributesDefaultTypeInternal _MatchingAttributes_default_instance_;
class PluginOverride;
struct PluginOverrideDefaultTypeInternal;
extern PluginOverrideDefaultTypeInternal _PluginOverride_default_instance_;
class PluginOverrides;
struct PluginOverridesDefaultTypeInternal;
extern PluginOverridesDefaultTypeInternal _PluginOverrides_default_instance_;
class TaskResourceAttributes;
struct TaskResourceAttributesDefaultTypeInternal;
extern TaskResourceAttributesDefaultTypeInternal _TaskResourceAttributes_default_instance_;
class TaskResourceSpec;
struct TaskResourceSpecDefaultTypeInternal;
extern TaskResourceSpecDefaultTypeInternal _TaskResourceSpec_default_instance_;
class WorkflowExecutionConfig;
struct WorkflowExecutionConfigDefaultTypeInternal;
extern WorkflowExecutionConfigDefaultTypeInternal _WorkflowExecutionConfig_default_instance_;
}  // namespace admin
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::admin::ClusterResourceAttributes* Arena::CreateMaybeMessage<::flyteidl::admin::ClusterResourceAttributes>(Arena*);
template<> ::flyteidl::admin::ClusterResourceAttributes_AttributesEntry_DoNotUse* Arena::CreateMaybeMessage<::flyteidl::admin::ClusterResourceAttributes_AttributesEntry_DoNotUse>(Arena*);
template<> ::flyteidl::admin::ExecutionClusterLabel* Arena::CreateMaybeMessage<::flyteidl::admin::ExecutionClusterLabel>(Arena*);
template<> ::flyteidl::admin::ExecutionQueueAttributes* Arena::CreateMaybeMessage<::flyteidl::admin::ExecutionQueueAttributes>(Arena*);
template<> ::flyteidl::admin::ListMatchableAttributesRequest* Arena::CreateMaybeMessage<::flyteidl::admin::ListMatchableAttributesRequest>(Arena*);
template<> ::flyteidl::admin::ListMatchableAttributesResponse* Arena::CreateMaybeMessage<::flyteidl::admin::ListMatchableAttributesResponse>(Arena*);
template<> ::flyteidl::admin::MatchableAttributesConfiguration* Arena::CreateMaybeMessage<::flyteidl::admin::MatchableAttributesConfiguration>(Arena*);
template<> ::flyteidl::admin::MatchingAttributes* Arena::CreateMaybeMessage<::flyteidl::admin::MatchingAttributes>(Arena*);
template<> ::flyteidl::admin::PluginOverride* Arena::CreateMaybeMessage<::flyteidl::admin::PluginOverride>(Arena*);
template<> ::flyteidl::admin::PluginOverrides* Arena::CreateMaybeMessage<::flyteidl::admin::PluginOverrides>(Arena*);
template<> ::flyteidl::admin::TaskResourceAttributes* Arena::CreateMaybeMessage<::flyteidl::admin::TaskResourceAttributes>(Arena*);
template<> ::flyteidl::admin::TaskResourceSpec* Arena::CreateMaybeMessage<::flyteidl::admin::TaskResourceSpec>(Arena*);
template<> ::flyteidl::admin::WorkflowExecutionConfig* Arena::CreateMaybeMessage<::flyteidl::admin::WorkflowExecutionConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace admin {

enum PluginOverride_MissingPluginBehavior : int {
  PluginOverride_MissingPluginBehavior_FAIL = 0,
  PluginOverride_MissingPluginBehavior_USE_DEFAULT = 1,
  PluginOverride_MissingPluginBehavior_PluginOverride_MissingPluginBehavior_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PluginOverride_MissingPluginBehavior_PluginOverride_MissingPluginBehavior_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PluginOverride_MissingPluginBehavior_IsValid(int value);
constexpr PluginOverride_MissingPluginBehavior PluginOverride_MissingPluginBehavior_MissingPluginBehavior_MIN = PluginOverride_MissingPluginBehavior_FAIL;
constexpr PluginOverride_MissingPluginBehavior PluginOverride_MissingPluginBehavior_MissingPluginBehavior_MAX = PluginOverride_MissingPluginBehavior_USE_DEFAULT;
constexpr int PluginOverride_MissingPluginBehavior_MissingPluginBehavior_ARRAYSIZE = PluginOverride_MissingPluginBehavior_MissingPluginBehavior_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PluginOverride_MissingPluginBehavior_descriptor();
template<typename T>
inline const std::string& PluginOverride_MissingPluginBehavior_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PluginOverride_MissingPluginBehavior>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PluginOverride_MissingPluginBehavior_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PluginOverride_MissingPluginBehavior_descriptor(), enum_t_value);
}
inline bool PluginOverride_MissingPluginBehavior_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PluginOverride_MissingPluginBehavior* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PluginOverride_MissingPluginBehavior>(
    PluginOverride_MissingPluginBehavior_descriptor(), name, value);
}
enum MatchableResource : int {
  TASK_RESOURCE = 0,
  CLUSTER_RESOURCE = 1,
  EXECUTION_QUEUE = 2,
  EXECUTION_CLUSTER_LABEL = 3,
  QUALITY_OF_SERVICE_SPECIFICATION = 4,
  PLUGIN_OVERRIDE = 5,
  WORKFLOW_EXECUTION_CONFIG = 6,
  CLUSTER_ASSIGNMENT = 7,
  MatchableResource_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MatchableResource_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MatchableResource_IsValid(int value);
constexpr MatchableResource MatchableResource_MIN = TASK_RESOURCE;
constexpr MatchableResource MatchableResource_MAX = CLUSTER_ASSIGNMENT;
constexpr int MatchableResource_ARRAYSIZE = MatchableResource_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchableResource_descriptor();
template<typename T>
inline const std::string& MatchableResource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MatchableResource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MatchableResource_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MatchableResource_descriptor(), enum_t_value);
}
inline bool MatchableResource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MatchableResource* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MatchableResource>(
    MatchableResource_descriptor(), name, value);
}
// ===================================================================

class TaskResourceSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskResourceSpec) */ {
 public:
  inline TaskResourceSpec() : TaskResourceSpec(nullptr) {}
  ~TaskResourceSpec() override;
  explicit constexpr TaskResourceSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskResourceSpec(const TaskResourceSpec& from);
  TaskResourceSpec(TaskResourceSpec&& from) noexcept
    : TaskResourceSpec() {
    *this = ::std::move(from);
  }

  inline TaskResourceSpec& operator=(const TaskResourceSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskResourceSpec& operator=(TaskResourceSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskResourceSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskResourceSpec* internal_default_instance() {
    return reinterpret_cast<const TaskResourceSpec*>(
               &_TaskResourceSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TaskResourceSpec& a, TaskResourceSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskResourceSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskResourceSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskResourceSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskResourceSpec>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskResourceSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.TaskResourceSpec";
  }
  protected:
  explicit TaskResourceSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuFieldNumber = 1,
    kGpuFieldNumber = 2,
    kMemoryFieldNumber = 3,
    kStorageFieldNumber = 4,
    kEphemeralStorageFieldNumber = 5,
  };
  // string cpu = 1 [json_name = "cpu"];
  void clear_cpu();
  const std::string& cpu() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cpu(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cpu();
  PROTOBUF_NODISCARD std::string* release_cpu();
  void set_allocated_cpu(std::string* cpu);
  private:
  const std::string& _internal_cpu() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpu(const std::string& value);
  std::string* _internal_mutable_cpu();
  public:

  // string gpu = 2 [json_name = "gpu"];
  void clear_gpu();
  const std::string& gpu() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gpu(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gpu();
  PROTOBUF_NODISCARD std::string* release_gpu();
  void set_allocated_gpu(std::string* gpu);
  private:
  const std::string& _internal_gpu() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gpu(const std::string& value);
  std::string* _internal_mutable_gpu();
  public:

  // string memory = 3 [json_name = "memory"];
  void clear_memory();
  const std::string& memory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memory();
  PROTOBUF_NODISCARD std::string* release_memory();
  void set_allocated_memory(std::string* memory);
  private:
  const std::string& _internal_memory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memory(const std::string& value);
  std::string* _internal_mutable_memory();
  public:

  // string storage = 4 [json_name = "storage"];
  void clear_storage();
  const std::string& storage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_storage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_storage();
  PROTOBUF_NODISCARD std::string* release_storage();
  void set_allocated_storage(std::string* storage);
  private:
  const std::string& _internal_storage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_storage(const std::string& value);
  std::string* _internal_mutable_storage();
  public:

  // string ephemeral_storage = 5 [json_name = "ephemeralStorage"];
  void clear_ephemeral_storage();
  const std::string& ephemeral_storage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ephemeral_storage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ephemeral_storage();
  PROTOBUF_NODISCARD std::string* release_ephemeral_storage();
  void set_allocated_ephemeral_storage(std::string* ephemeral_storage);
  private:
  const std::string& _internal_ephemeral_storage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ephemeral_storage(const std::string& value);
  std::string* _internal_mutable_ephemeral_storage();
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskResourceSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpu_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gpu_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ephemeral_storage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// -------------------------------------------------------------------

class TaskResourceAttributes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskResourceAttributes) */ {
 public:
  inline TaskResourceAttributes() : TaskResourceAttributes(nullptr) {}
  ~TaskResourceAttributes() override;
  explicit constexpr TaskResourceAttributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskResourceAttributes(const TaskResourceAttributes& from);
  TaskResourceAttributes(TaskResourceAttributes&& from) noexcept
    : TaskResourceAttributes() {
    *this = ::std::move(from);
  }

  inline TaskResourceAttributes& operator=(const TaskResourceAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskResourceAttributes& operator=(TaskResourceAttributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskResourceAttributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskResourceAttributes* internal_default_instance() {
    return reinterpret_cast<const TaskResourceAttributes*>(
               &_TaskResourceAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TaskResourceAttributes& a, TaskResourceAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskResourceAttributes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskResourceAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskResourceAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskResourceAttributes>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskResourceAttributes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.TaskResourceAttributes";
  }
  protected:
  explicit TaskResourceAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultsFieldNumber = 1,
    kLimitsFieldNumber = 2,
  };
  // .flyteidl.admin.TaskResourceSpec defaults = 1 [json_name = "defaults"];
  bool has_defaults() const;
  private:
  bool _internal_has_defaults() const;
  public:
  void clear_defaults();
  const ::flyteidl::admin::TaskResourceSpec& defaults() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::TaskResourceSpec* release_defaults();
  ::flyteidl::admin::TaskResourceSpec* mutable_defaults();
  void set_allocated_defaults(::flyteidl::admin::TaskResourceSpec* defaults);
  private:
  const ::flyteidl::admin::TaskResourceSpec& _internal_defaults() const;
  ::flyteidl::admin::TaskResourceSpec* _internal_mutable_defaults();
  public:
  void unsafe_arena_set_allocated_defaults(
      ::flyteidl::admin::TaskResourceSpec* defaults);
  ::flyteidl::admin::TaskResourceSpec* unsafe_arena_release_defaults();

  // .flyteidl.admin.TaskResourceSpec limits = 2 [json_name = "limits"];
  bool has_limits() const;
  private:
  bool _internal_has_limits() const;
  public:
  void clear_limits();
  const ::flyteidl::admin::TaskResourceSpec& limits() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::TaskResourceSpec* release_limits();
  ::flyteidl::admin::TaskResourceSpec* mutable_limits();
  void set_allocated_limits(::flyteidl::admin::TaskResourceSpec* limits);
  private:
  const ::flyteidl::admin::TaskResourceSpec& _internal_limits() const;
  ::flyteidl::admin::TaskResourceSpec* _internal_mutable_limits();
  public:
  void unsafe_arena_set_allocated_limits(
      ::flyteidl::admin::TaskResourceSpec* limits);
  ::flyteidl::admin::TaskResourceSpec* unsafe_arena_release_limits();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskResourceAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::admin::TaskResourceSpec* defaults_;
  ::flyteidl::admin::TaskResourceSpec* limits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// -------------------------------------------------------------------

class ClusterResourceAttributes_AttributesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ClusterResourceAttributes_AttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ClusterResourceAttributes_AttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  ClusterResourceAttributes_AttributesEntry_DoNotUse();
  explicit constexpr ClusterResourceAttributes_AttributesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ClusterResourceAttributes_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ClusterResourceAttributes_AttributesEntry_DoNotUse& other);
  static const ClusterResourceAttributes_AttributesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ClusterResourceAttributes_AttributesEntry_DoNotUse*>(&_ClusterResourceAttributes_AttributesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flyteidl.admin.ClusterResourceAttributes.AttributesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flyteidl.admin.ClusterResourceAttributes.AttributesEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ClusterResourceAttributes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ClusterResourceAttributes) */ {
 public:
  inline ClusterResourceAttributes() : ClusterResourceAttributes(nullptr) {}
  ~ClusterResourceAttributes() override;
  explicit constexpr ClusterResourceAttributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClusterResourceAttributes(const ClusterResourceAttributes& from);
  ClusterResourceAttributes(ClusterResourceAttributes&& from) noexcept
    : ClusterResourceAttributes() {
    *this = ::std::move(from);
  }

  inline ClusterResourceAttributes& operator=(const ClusterResourceAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClusterResourceAttributes& operator=(ClusterResourceAttributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClusterResourceAttributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClusterResourceAttributes* internal_default_instance() {
    return reinterpret_cast<const ClusterResourceAttributes*>(
               &_ClusterResourceAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClusterResourceAttributes& a, ClusterResourceAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(ClusterResourceAttributes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClusterResourceAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClusterResourceAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClusterResourceAttributes>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterResourceAttributes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.ClusterResourceAttributes";
  }
  protected:
  explicit ClusterResourceAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 1,
  };
  // map<string, string> attributes = 1 [json_name = "attributes"];
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_attributes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_attributes();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ClusterResourceAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ClusterResourceAttributes_AttributesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> attributes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// -------------------------------------------------------------------

class ExecutionQueueAttributes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ExecutionQueueAttributes) */ {
 public:
  inline ExecutionQueueAttributes() : ExecutionQueueAttributes(nullptr) {}
  ~ExecutionQueueAttributes() override;
  explicit constexpr ExecutionQueueAttributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecutionQueueAttributes(const ExecutionQueueAttributes& from);
  ExecutionQueueAttributes(ExecutionQueueAttributes&& from) noexcept
    : ExecutionQueueAttributes() {
    *this = ::std::move(from);
  }

  inline ExecutionQueueAttributes& operator=(const ExecutionQueueAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecutionQueueAttributes& operator=(ExecutionQueueAttributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecutionQueueAttributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecutionQueueAttributes* internal_default_instance() {
    return reinterpret_cast<const ExecutionQueueAttributes*>(
               &_ExecutionQueueAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ExecutionQueueAttributes& a, ExecutionQueueAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecutionQueueAttributes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecutionQueueAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExecutionQueueAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExecutionQueueAttributes>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionQueueAttributes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.ExecutionQueueAttributes";
  }
  protected:
  explicit ExecutionQueueAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 1,
  };
  // repeated string tags = 1 [json_name = "tags"];
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ExecutionQueueAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// -------------------------------------------------------------------

class ExecutionClusterLabel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ExecutionClusterLabel) */ {
 public:
  inline ExecutionClusterLabel() : ExecutionClusterLabel(nullptr) {}
  ~ExecutionClusterLabel() override;
  explicit constexpr ExecutionClusterLabel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecutionClusterLabel(const ExecutionClusterLabel& from);
  ExecutionClusterLabel(ExecutionClusterLabel&& from) noexcept
    : ExecutionClusterLabel() {
    *this = ::std::move(from);
  }

  inline ExecutionClusterLabel& operator=(const ExecutionClusterLabel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecutionClusterLabel& operator=(ExecutionClusterLabel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecutionClusterLabel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecutionClusterLabel* internal_default_instance() {
    return reinterpret_cast<const ExecutionClusterLabel*>(
               &_ExecutionClusterLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ExecutionClusterLabel& a, ExecutionClusterLabel& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecutionClusterLabel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecutionClusterLabel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExecutionClusterLabel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExecutionClusterLabel>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionClusterLabel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.ExecutionClusterLabel";
  }
  protected:
  explicit ExecutionClusterLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1 [json_name = "value"];
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ExecutionClusterLabel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// -------------------------------------------------------------------

class PluginOverride final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.PluginOverride) */ {
 public:
  inline PluginOverride() : PluginOverride(nullptr) {}
  ~PluginOverride() override;
  explicit constexpr PluginOverride(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PluginOverride(const PluginOverride& from);
  PluginOverride(PluginOverride&& from) noexcept
    : PluginOverride() {
    *this = ::std::move(from);
  }

  inline PluginOverride& operator=(const PluginOverride& from) {
    CopyFrom(from);
    return *this;
  }
  inline PluginOverride& operator=(PluginOverride&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PluginOverride& default_instance() {
    return *internal_default_instance();
  }
  static inline const PluginOverride* internal_default_instance() {
    return reinterpret_cast<const PluginOverride*>(
               &_PluginOverride_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PluginOverride& a, PluginOverride& b) {
    a.Swap(&b);
  }
  inline void Swap(PluginOverride* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PluginOverride* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PluginOverride* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PluginOverride>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PluginOverride* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.PluginOverride";
  }
  protected:
  explicit PluginOverride(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PluginOverride_MissingPluginBehavior MissingPluginBehavior;
  static constexpr MissingPluginBehavior FAIL =
    PluginOverride_MissingPluginBehavior_FAIL;
  static constexpr MissingPluginBehavior USE_DEFAULT =
    PluginOverride_MissingPluginBehavior_USE_DEFAULT;
  static inline bool MissingPluginBehavior_IsValid(int value) {
    return PluginOverride_MissingPluginBehavior_IsValid(value);
  }
  static constexpr MissingPluginBehavior MissingPluginBehavior_MIN =
    PluginOverride_MissingPluginBehavior_MissingPluginBehavior_MIN;
  static constexpr MissingPluginBehavior MissingPluginBehavior_MAX =
    PluginOverride_MissingPluginBehavior_MissingPluginBehavior_MAX;
  static constexpr int MissingPluginBehavior_ARRAYSIZE =
    PluginOverride_MissingPluginBehavior_MissingPluginBehavior_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MissingPluginBehavior_descriptor() {
    return PluginOverride_MissingPluginBehavior_descriptor();
  }
  template<typename T>
  static inline const std::string& MissingPluginBehavior_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MissingPluginBehavior>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MissingPluginBehavior_Name.");
    return PluginOverride_MissingPluginBehavior_Name(enum_t_value);
  }
  static inline bool MissingPluginBehavior_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MissingPluginBehavior* value) {
    return PluginOverride_MissingPluginBehavior_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPluginIdFieldNumber = 2,
    kTaskTypeFieldNumber = 1,
    kMissingPluginBehaviorFieldNumber = 4,
  };
  // repeated string plugin_id = 2 [json_name = "pluginId"];
  int plugin_id_size() const;
  private:
  int _internal_plugin_id_size() const;
  public:
  void clear_plugin_id();
  const std::string& plugin_id(int index) const;
  std::string* mutable_plugin_id(int index);
  void set_plugin_id(int index, const std::string& value);
  void set_plugin_id(int index, std::string&& value);
  void set_plugin_id(int index, const char* value);
  void set_plugin_id(int index, const char* value, size_t size);
  std::string* add_plugin_id();
  void add_plugin_id(const std::string& value);
  void add_plugin_id(std::string&& value);
  void add_plugin_id(const char* value);
  void add_plugin_id(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& plugin_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_plugin_id();
  private:
  const std::string& _internal_plugin_id(int index) const;
  std::string* _internal_add_plugin_id();
  public:

  // string task_type = 1 [json_name = "taskType"];
  void clear_task_type();
  const std::string& task_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_type();
  PROTOBUF_NODISCARD std::string* release_task_type();
  void set_allocated_task_type(std::string* task_type);
  private:
  const std::string& _internal_task_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_type(const std::string& value);
  std::string* _internal_mutable_task_type();
  public:

  // .flyteidl.admin.PluginOverride.MissingPluginBehavior missing_plugin_behavior = 4 [json_name = "missingPluginBehavior"];
  void clear_missing_plugin_behavior();
  ::flyteidl::admin::PluginOverride_MissingPluginBehavior missing_plugin_behavior() const;
  void set_missing_plugin_behavior(::flyteidl::admin::PluginOverride_MissingPluginBehavior value);
  private:
  ::flyteidl::admin::PluginOverride_MissingPluginBehavior _internal_missing_plugin_behavior() const;
  void _internal_set_missing_plugin_behavior(::flyteidl::admin::PluginOverride_MissingPluginBehavior value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.PluginOverride)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> plugin_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_type_;
  int missing_plugin_behavior_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// -------------------------------------------------------------------

class PluginOverrides final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.PluginOverrides) */ {
 public:
  inline PluginOverrides() : PluginOverrides(nullptr) {}
  ~PluginOverrides() override;
  explicit constexpr PluginOverrides(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PluginOverrides(const PluginOverrides& from);
  PluginOverrides(PluginOverrides&& from) noexcept
    : PluginOverrides() {
    *this = ::std::move(from);
  }

  inline PluginOverrides& operator=(const PluginOverrides& from) {
    CopyFrom(from);
    return *this;
  }
  inline PluginOverrides& operator=(PluginOverrides&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PluginOverrides& default_instance() {
    return *internal_default_instance();
  }
  static inline const PluginOverrides* internal_default_instance() {
    return reinterpret_cast<const PluginOverrides*>(
               &_PluginOverrides_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PluginOverrides& a, PluginOverrides& b) {
    a.Swap(&b);
  }
  inline void Swap(PluginOverrides* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PluginOverrides* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PluginOverrides* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PluginOverrides>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PluginOverrides* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.PluginOverrides";
  }
  protected:
  explicit PluginOverrides(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverridesFieldNumber = 1,
  };
  // repeated .flyteidl.admin.PluginOverride overrides = 1 [json_name = "overrides"];
  int overrides_size() const;
  private:
  int _internal_overrides_size() const;
  public:
  void clear_overrides();
  ::flyteidl::admin::PluginOverride* mutable_overrides(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::PluginOverride >*
      mutable_overrides();
  private:
  const ::flyteidl::admin::PluginOverride& _internal_overrides(int index) const;
  ::flyteidl::admin::PluginOverride* _internal_add_overrides();
  public:
  const ::flyteidl::admin::PluginOverride& overrides(int index) const;
  ::flyteidl::admin::PluginOverride* add_overrides();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::PluginOverride >&
      overrides() const;

  // @@protoc_insertion_point(class_scope:flyteidl.admin.PluginOverrides)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::PluginOverride > overrides_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// -------------------------------------------------------------------

class WorkflowExecutionConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.WorkflowExecutionConfig) */ {
 public:
  inline WorkflowExecutionConfig() : WorkflowExecutionConfig(nullptr) {}
  ~WorkflowExecutionConfig() override;
  explicit constexpr WorkflowExecutionConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowExecutionConfig(const WorkflowExecutionConfig& from);
  WorkflowExecutionConfig(WorkflowExecutionConfig&& from) noexcept
    : WorkflowExecutionConfig() {
    *this = ::std::move(from);
  }

  inline WorkflowExecutionConfig& operator=(const WorkflowExecutionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowExecutionConfig& operator=(WorkflowExecutionConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowExecutionConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowExecutionConfig* internal_default_instance() {
    return reinterpret_cast<const WorkflowExecutionConfig*>(
               &_WorkflowExecutionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(WorkflowExecutionConfig& a, WorkflowExecutionConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowExecutionConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowExecutionConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkflowExecutionConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkflowExecutionConfig>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowExecutionConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.WorkflowExecutionConfig";
  }
  protected:
  explicit WorkflowExecutionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecurityContextFieldNumber = 2,
    kRawOutputDataConfigFieldNumber = 3,
    kLabelsFieldNumber = 4,
    kAnnotationsFieldNumber = 5,
    kMaxParallelismFieldNumber = 1,
  };
  // .flyteidl.core.SecurityContext security_context = 2 [json_name = "securityContext"];
  bool has_security_context() const;
  private:
  bool _internal_has_security_context() const;
  public:
  void clear_security_context();
  const ::flyteidl::core::SecurityContext& security_context() const;
  PROTOBUF_NODISCARD ::flyteidl::core::SecurityContext* release_security_context();
  ::flyteidl::core::SecurityContext* mutable_security_context();
  void set_allocated_security_context(::flyteidl::core::SecurityContext* security_context);
  private:
  const ::flyteidl::core::SecurityContext& _internal_security_context() const;
  ::flyteidl::core::SecurityContext* _internal_mutable_security_context();
  public:
  void unsafe_arena_set_allocated_security_context(
      ::flyteidl::core::SecurityContext* security_context);
  ::flyteidl::core::SecurityContext* unsafe_arena_release_security_context();

  // .flyteidl.admin.RawOutputDataConfig raw_output_data_config = 3 [json_name = "rawOutputDataConfig"];
  bool has_raw_output_data_config() const;
  private:
  bool _internal_has_raw_output_data_config() const;
  public:
  void clear_raw_output_data_config();
  const ::flyteidl::admin::RawOutputDataConfig& raw_output_data_config() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::RawOutputDataConfig* release_raw_output_data_config();
  ::flyteidl::admin::RawOutputDataConfig* mutable_raw_output_data_config();
  void set_allocated_raw_output_data_config(::flyteidl::admin::RawOutputDataConfig* raw_output_data_config);
  private:
  const ::flyteidl::admin::RawOutputDataConfig& _internal_raw_output_data_config() const;
  ::flyteidl::admin::RawOutputDataConfig* _internal_mutable_raw_output_data_config();
  public:
  void unsafe_arena_set_allocated_raw_output_data_config(
      ::flyteidl::admin::RawOutputDataConfig* raw_output_data_config);
  ::flyteidl::admin::RawOutputDataConfig* unsafe_arena_release_raw_output_data_config();

  // .flyteidl.admin.Labels labels = 4 [json_name = "labels"];
  bool has_labels() const;
  private:
  bool _internal_has_labels() const;
  public:
  void clear_labels();
  const ::flyteidl::admin::Labels& labels() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::Labels* release_labels();
  ::flyteidl::admin::Labels* mutable_labels();
  void set_allocated_labels(::flyteidl::admin::Labels* labels);
  private:
  const ::flyteidl::admin::Labels& _internal_labels() const;
  ::flyteidl::admin::Labels* _internal_mutable_labels();
  public:
  void unsafe_arena_set_allocated_labels(
      ::flyteidl::admin::Labels* labels);
  ::flyteidl::admin::Labels* unsafe_arena_release_labels();

  // .flyteidl.admin.Annotations annotations = 5 [json_name = "annotations"];
  bool has_annotations() const;
  private:
  bool _internal_has_annotations() const;
  public:
  void clear_annotations();
  const ::flyteidl::admin::Annotations& annotations() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::Annotations* release_annotations();
  ::flyteidl::admin::Annotations* mutable_annotations();
  void set_allocated_annotations(::flyteidl::admin::Annotations* annotations);
  private:
  const ::flyteidl::admin::Annotations& _internal_annotations() const;
  ::flyteidl::admin::Annotations* _internal_mutable_annotations();
  public:
  void unsafe_arena_set_allocated_annotations(
      ::flyteidl::admin::Annotations* annotations);
  ::flyteidl::admin::Annotations* unsafe_arena_release_annotations();

  // int32 max_parallelism = 1 [json_name = "maxParallelism"];
  void clear_max_parallelism();
  int32_t max_parallelism() const;
  void set_max_parallelism(int32_t value);
  private:
  int32_t _internal_max_parallelism() const;
  void _internal_set_max_parallelism(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.WorkflowExecutionConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::SecurityContext* security_context_;
  ::flyteidl::admin::RawOutputDataConfig* raw_output_data_config_;
  ::flyteidl::admin::Labels* labels_;
  ::flyteidl::admin::Annotations* annotations_;
  int32_t max_parallelism_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// -------------------------------------------------------------------

class MatchingAttributes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.MatchingAttributes) */ {
 public:
  inline MatchingAttributes() : MatchingAttributes(nullptr) {}
  ~MatchingAttributes() override;
  explicit constexpr MatchingAttributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatchingAttributes(const MatchingAttributes& from);
  MatchingAttributes(MatchingAttributes&& from) noexcept
    : MatchingAttributes() {
    *this = ::std::move(from);
  }

  inline MatchingAttributes& operator=(const MatchingAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchingAttributes& operator=(MatchingAttributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MatchingAttributes& default_instance() {
    return *internal_default_instance();
  }
  enum TargetCase {
    kTaskResourceAttributes = 1,
    kClusterResourceAttributes = 2,
    kExecutionQueueAttributes = 3,
    kExecutionClusterLabel = 4,
    kQualityOfService = 5,
    kPluginOverrides = 6,
    kWorkflowExecutionConfig = 7,
    kClusterAssignment = 8,
    TARGET_NOT_SET = 0,
  };

  static inline const MatchingAttributes* internal_default_instance() {
    return reinterpret_cast<const MatchingAttributes*>(
               &_MatchingAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MatchingAttributes& a, MatchingAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchingAttributes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchingAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MatchingAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MatchingAttributes>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchingAttributes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.MatchingAttributes";
  }
  protected:
  explicit MatchingAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskResourceAttributesFieldNumber = 1,
    kClusterResourceAttributesFieldNumber = 2,
    kExecutionQueueAttributesFieldNumber = 3,
    kExecutionClusterLabelFieldNumber = 4,
    kQualityOfServiceFieldNumber = 5,
    kPluginOverridesFieldNumber = 6,
    kWorkflowExecutionConfigFieldNumber = 7,
    kClusterAssignmentFieldNumber = 8,
  };
  // .flyteidl.admin.TaskResourceAttributes task_resource_attributes = 1 [json_name = "taskResourceAttributes"];
  bool has_task_resource_attributes() const;
  private:
  bool _internal_has_task_resource_attributes() const;
  public:
  void clear_task_resource_attributes();
  const ::flyteidl::admin::TaskResourceAttributes& task_resource_attributes() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::TaskResourceAttributes* release_task_resource_attributes();
  ::flyteidl::admin::TaskResourceAttributes* mutable_task_resource_attributes();
  void set_allocated_task_resource_attributes(::flyteidl::admin::TaskResourceAttributes* task_resource_attributes);
  private:
  const ::flyteidl::admin::TaskResourceAttributes& _internal_task_resource_attributes() const;
  ::flyteidl::admin::TaskResourceAttributes* _internal_mutable_task_resource_attributes();
  public:
  void unsafe_arena_set_allocated_task_resource_attributes(
      ::flyteidl::admin::TaskResourceAttributes* task_resource_attributes);
  ::flyteidl::admin::TaskResourceAttributes* unsafe_arena_release_task_resource_attributes();

  // .flyteidl.admin.ClusterResourceAttributes cluster_resource_attributes = 2 [json_name = "clusterResourceAttributes"];
  bool has_cluster_resource_attributes() const;
  private:
  bool _internal_has_cluster_resource_attributes() const;
  public:
  void clear_cluster_resource_attributes();
  const ::flyteidl::admin::ClusterResourceAttributes& cluster_resource_attributes() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::ClusterResourceAttributes* release_cluster_resource_attributes();
  ::flyteidl::admin::ClusterResourceAttributes* mutable_cluster_resource_attributes();
  void set_allocated_cluster_resource_attributes(::flyteidl::admin::ClusterResourceAttributes* cluster_resource_attributes);
  private:
  const ::flyteidl::admin::ClusterResourceAttributes& _internal_cluster_resource_attributes() const;
  ::flyteidl::admin::ClusterResourceAttributes* _internal_mutable_cluster_resource_attributes();
  public:
  void unsafe_arena_set_allocated_cluster_resource_attributes(
      ::flyteidl::admin::ClusterResourceAttributes* cluster_resource_attributes);
  ::flyteidl::admin::ClusterResourceAttributes* unsafe_arena_release_cluster_resource_attributes();

  // .flyteidl.admin.ExecutionQueueAttributes execution_queue_attributes = 3 [json_name = "executionQueueAttributes"];
  bool has_execution_queue_attributes() const;
  private:
  bool _internal_has_execution_queue_attributes() const;
  public:
  void clear_execution_queue_attributes();
  const ::flyteidl::admin::ExecutionQueueAttributes& execution_queue_attributes() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::ExecutionQueueAttributes* release_execution_queue_attributes();
  ::flyteidl::admin::ExecutionQueueAttributes* mutable_execution_queue_attributes();
  void set_allocated_execution_queue_attributes(::flyteidl::admin::ExecutionQueueAttributes* execution_queue_attributes);
  private:
  const ::flyteidl::admin::ExecutionQueueAttributes& _internal_execution_queue_attributes() const;
  ::flyteidl::admin::ExecutionQueueAttributes* _internal_mutable_execution_queue_attributes();
  public:
  void unsafe_arena_set_allocated_execution_queue_attributes(
      ::flyteidl::admin::ExecutionQueueAttributes* execution_queue_attributes);
  ::flyteidl::admin::ExecutionQueueAttributes* unsafe_arena_release_execution_queue_attributes();

  // .flyteidl.admin.ExecutionClusterLabel execution_cluster_label = 4 [json_name = "executionClusterLabel"];
  bool has_execution_cluster_label() const;
  private:
  bool _internal_has_execution_cluster_label() const;
  public:
  void clear_execution_cluster_label();
  const ::flyteidl::admin::ExecutionClusterLabel& execution_cluster_label() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::ExecutionClusterLabel* release_execution_cluster_label();
  ::flyteidl::admin::ExecutionClusterLabel* mutable_execution_cluster_label();
  void set_allocated_execution_cluster_label(::flyteidl::admin::ExecutionClusterLabel* execution_cluster_label);
  private:
  const ::flyteidl::admin::ExecutionClusterLabel& _internal_execution_cluster_label() const;
  ::flyteidl::admin::ExecutionClusterLabel* _internal_mutable_execution_cluster_label();
  public:
  void unsafe_arena_set_allocated_execution_cluster_label(
      ::flyteidl::admin::ExecutionClusterLabel* execution_cluster_label);
  ::flyteidl::admin::ExecutionClusterLabel* unsafe_arena_release_execution_cluster_label();

  // .flyteidl.core.QualityOfService quality_of_service = 5 [json_name = "qualityOfService"];
  bool has_quality_of_service() const;
  private:
  bool _internal_has_quality_of_service() const;
  public:
  void clear_quality_of_service();
  const ::flyteidl::core::QualityOfService& quality_of_service() const;
  PROTOBUF_NODISCARD ::flyteidl::core::QualityOfService* release_quality_of_service();
  ::flyteidl::core::QualityOfService* mutable_quality_of_service();
  void set_allocated_quality_of_service(::flyteidl::core::QualityOfService* quality_of_service);
  private:
  const ::flyteidl::core::QualityOfService& _internal_quality_of_service() const;
  ::flyteidl::core::QualityOfService* _internal_mutable_quality_of_service();
  public:
  void unsafe_arena_set_allocated_quality_of_service(
      ::flyteidl::core::QualityOfService* quality_of_service);
  ::flyteidl::core::QualityOfService* unsafe_arena_release_quality_of_service();

  // .flyteidl.admin.PluginOverrides plugin_overrides = 6 [json_name = "pluginOverrides"];
  bool has_plugin_overrides() const;
  private:
  bool _internal_has_plugin_overrides() const;
  public:
  void clear_plugin_overrides();
  const ::flyteidl::admin::PluginOverrides& plugin_overrides() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::PluginOverrides* release_plugin_overrides();
  ::flyteidl::admin::PluginOverrides* mutable_plugin_overrides();
  void set_allocated_plugin_overrides(::flyteidl::admin::PluginOverrides* plugin_overrides);
  private:
  const ::flyteidl::admin::PluginOverrides& _internal_plugin_overrides() const;
  ::flyteidl::admin::PluginOverrides* _internal_mutable_plugin_overrides();
  public:
  void unsafe_arena_set_allocated_plugin_overrides(
      ::flyteidl::admin::PluginOverrides* plugin_overrides);
  ::flyteidl::admin::PluginOverrides* unsafe_arena_release_plugin_overrides();

  // .flyteidl.admin.WorkflowExecutionConfig workflow_execution_config = 7 [json_name = "workflowExecutionConfig"];
  bool has_workflow_execution_config() const;
  private:
  bool _internal_has_workflow_execution_config() const;
  public:
  void clear_workflow_execution_config();
  const ::flyteidl::admin::WorkflowExecutionConfig& workflow_execution_config() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::WorkflowExecutionConfig* release_workflow_execution_config();
  ::flyteidl::admin::WorkflowExecutionConfig* mutable_workflow_execution_config();
  void set_allocated_workflow_execution_config(::flyteidl::admin::WorkflowExecutionConfig* workflow_execution_config);
  private:
  const ::flyteidl::admin::WorkflowExecutionConfig& _internal_workflow_execution_config() const;
  ::flyteidl::admin::WorkflowExecutionConfig* _internal_mutable_workflow_execution_config();
  public:
  void unsafe_arena_set_allocated_workflow_execution_config(
      ::flyteidl::admin::WorkflowExecutionConfig* workflow_execution_config);
  ::flyteidl::admin::WorkflowExecutionConfig* unsafe_arena_release_workflow_execution_config();

  // .flyteidl.admin.ClusterAssignment cluster_assignment = 8 [json_name = "clusterAssignment"];
  bool has_cluster_assignment() const;
  private:
  bool _internal_has_cluster_assignment() const;
  public:
  void clear_cluster_assignment();
  const ::flyteidl::admin::ClusterAssignment& cluster_assignment() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::ClusterAssignment* release_cluster_assignment();
  ::flyteidl::admin::ClusterAssignment* mutable_cluster_assignment();
  void set_allocated_cluster_assignment(::flyteidl::admin::ClusterAssignment* cluster_assignment);
  private:
  const ::flyteidl::admin::ClusterAssignment& _internal_cluster_assignment() const;
  ::flyteidl::admin::ClusterAssignment* _internal_mutable_cluster_assignment();
  public:
  void unsafe_arena_set_allocated_cluster_assignment(
      ::flyteidl::admin::ClusterAssignment* cluster_assignment);
  ::flyteidl::admin::ClusterAssignment* unsafe_arena_release_cluster_assignment();

  void clear_target();
  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.admin.MatchingAttributes)
 private:
  class _Internal;
  void set_has_task_resource_attributes();
  void set_has_cluster_resource_attributes();
  void set_has_execution_queue_attributes();
  void set_has_execution_cluster_label();
  void set_has_quality_of_service();
  void set_has_plugin_overrides();
  void set_has_workflow_execution_config();
  void set_has_cluster_assignment();

  inline bool has_target() const;
  inline void clear_has_target();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TargetUnion {
    constexpr TargetUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::flyteidl::admin::TaskResourceAttributes* task_resource_attributes_;
    ::flyteidl::admin::ClusterResourceAttributes* cluster_resource_attributes_;
    ::flyteidl::admin::ExecutionQueueAttributes* execution_queue_attributes_;
    ::flyteidl::admin::ExecutionClusterLabel* execution_cluster_label_;
    ::flyteidl::core::QualityOfService* quality_of_service_;
    ::flyteidl::admin::PluginOverrides* plugin_overrides_;
    ::flyteidl::admin::WorkflowExecutionConfig* workflow_execution_config_;
    ::flyteidl::admin::ClusterAssignment* cluster_assignment_;
  } target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// -------------------------------------------------------------------

class MatchableAttributesConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.MatchableAttributesConfiguration) */ {
 public:
  inline MatchableAttributesConfiguration() : MatchableAttributesConfiguration(nullptr) {}
  ~MatchableAttributesConfiguration() override;
  explicit constexpr MatchableAttributesConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatchableAttributesConfiguration(const MatchableAttributesConfiguration& from);
  MatchableAttributesConfiguration(MatchableAttributesConfiguration&& from) noexcept
    : MatchableAttributesConfiguration() {
    *this = ::std::move(from);
  }

  inline MatchableAttributesConfiguration& operator=(const MatchableAttributesConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchableAttributesConfiguration& operator=(MatchableAttributesConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MatchableAttributesConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const MatchableAttributesConfiguration* internal_default_instance() {
    return reinterpret_cast<const MatchableAttributesConfiguration*>(
               &_MatchableAttributesConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MatchableAttributesConfiguration& a, MatchableAttributesConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchableAttributesConfiguration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchableAttributesConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MatchableAttributesConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MatchableAttributesConfiguration>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchableAttributesConfiguration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.MatchableAttributesConfiguration";
  }
  protected:
  explicit MatchableAttributesConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomainFieldNumber = 2,
    kProjectFieldNumber = 3,
    kWorkflowFieldNumber = 4,
    kLaunchPlanFieldNumber = 5,
    kAttributesFieldNumber = 1,
  };
  // string domain = 2 [json_name = "domain"];
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // string project = 3 [json_name = "project"];
  void clear_project();
  const std::string& project() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project();
  PROTOBUF_NODISCARD std::string* release_project();
  void set_allocated_project(std::string* project);
  private:
  const std::string& _internal_project() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project(const std::string& value);
  std::string* _internal_mutable_project();
  public:

  // string workflow = 4 [json_name = "workflow"];
  void clear_workflow();
  const std::string& workflow() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workflow(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workflow();
  PROTOBUF_NODISCARD std::string* release_workflow();
  void set_allocated_workflow(std::string* workflow);
  private:
  const std::string& _internal_workflow() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workflow(const std::string& value);
  std::string* _internal_mutable_workflow();
  public:

  // string launch_plan = 5 [json_name = "launchPlan"];
  void clear_launch_plan();
  const std::string& launch_plan() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_launch_plan(ArgT0&& arg0, ArgT... args);
  std::string* mutable_launch_plan();
  PROTOBUF_NODISCARD std::string* release_launch_plan();
  void set_allocated_launch_plan(std::string* launch_plan);
  private:
  const std::string& _internal_launch_plan() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_launch_plan(const std::string& value);
  std::string* _internal_mutable_launch_plan();
  public:

  // .flyteidl.admin.MatchingAttributes attributes = 1 [json_name = "attributes"];
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::flyteidl::admin::MatchingAttributes& attributes() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::MatchingAttributes* release_attributes();
  ::flyteidl::admin::MatchingAttributes* mutable_attributes();
  void set_allocated_attributes(::flyteidl::admin::MatchingAttributes* attributes);
  private:
  const ::flyteidl::admin::MatchingAttributes& _internal_attributes() const;
  ::flyteidl::admin::MatchingAttributes* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::flyteidl::admin::MatchingAttributes* attributes);
  ::flyteidl::admin::MatchingAttributes* unsafe_arena_release_attributes();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.MatchableAttributesConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr launch_plan_;
  ::flyteidl::admin::MatchingAttributes* attributes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// -------------------------------------------------------------------

class ListMatchableAttributesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ListMatchableAttributesRequest) */ {
 public:
  inline ListMatchableAttributesRequest() : ListMatchableAttributesRequest(nullptr) {}
  ~ListMatchableAttributesRequest() override;
  explicit constexpr ListMatchableAttributesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListMatchableAttributesRequest(const ListMatchableAttributesRequest& from);
  ListMatchableAttributesRequest(ListMatchableAttributesRequest&& from) noexcept
    : ListMatchableAttributesRequest() {
    *this = ::std::move(from);
  }

  inline ListMatchableAttributesRequest& operator=(const ListMatchableAttributesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMatchableAttributesRequest& operator=(ListMatchableAttributesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListMatchableAttributesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListMatchableAttributesRequest* internal_default_instance() {
    return reinterpret_cast<const ListMatchableAttributesRequest*>(
               &_ListMatchableAttributesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ListMatchableAttributesRequest& a, ListMatchableAttributesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMatchableAttributesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMatchableAttributesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListMatchableAttributesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListMatchableAttributesRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMatchableAttributesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.ListMatchableAttributesRequest";
  }
  protected:
  explicit ListMatchableAttributesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceTypeFieldNumber = 1,
  };
  // .flyteidl.admin.MatchableResource resource_type = 1 [json_name = "resourceType"];
  void clear_resource_type();
  ::flyteidl::admin::MatchableResource resource_type() const;
  void set_resource_type(::flyteidl::admin::MatchableResource value);
  private:
  ::flyteidl::admin::MatchableResource _internal_resource_type() const;
  void _internal_set_resource_type(::flyteidl::admin::MatchableResource value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ListMatchableAttributesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int resource_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// -------------------------------------------------------------------

class ListMatchableAttributesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ListMatchableAttributesResponse) */ {
 public:
  inline ListMatchableAttributesResponse() : ListMatchableAttributesResponse(nullptr) {}
  ~ListMatchableAttributesResponse() override;
  explicit constexpr ListMatchableAttributesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListMatchableAttributesResponse(const ListMatchableAttributesResponse& from);
  ListMatchableAttributesResponse(ListMatchableAttributesResponse&& from) noexcept
    : ListMatchableAttributesResponse() {
    *this = ::std::move(from);
  }

  inline ListMatchableAttributesResponse& operator=(const ListMatchableAttributesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMatchableAttributesResponse& operator=(ListMatchableAttributesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListMatchableAttributesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListMatchableAttributesResponse* internal_default_instance() {
    return reinterpret_cast<const ListMatchableAttributesResponse*>(
               &_ListMatchableAttributesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ListMatchableAttributesResponse& a, ListMatchableAttributesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMatchableAttributesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMatchableAttributesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListMatchableAttributesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListMatchableAttributesResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMatchableAttributesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.ListMatchableAttributesResponse";
  }
  protected:
  explicit ListMatchableAttributesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigurationsFieldNumber = 1,
  };
  // repeated .flyteidl.admin.MatchableAttributesConfiguration configurations = 1 [json_name = "configurations"];
  int configurations_size() const;
  private:
  int _internal_configurations_size() const;
  public:
  void clear_configurations();
  ::flyteidl::admin::MatchableAttributesConfiguration* mutable_configurations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::MatchableAttributesConfiguration >*
      mutable_configurations();
  private:
  const ::flyteidl::admin::MatchableAttributesConfiguration& _internal_configurations(int index) const;
  ::flyteidl::admin::MatchableAttributesConfiguration* _internal_add_configurations();
  public:
  const ::flyteidl::admin::MatchableAttributesConfiguration& configurations(int index) const;
  ::flyteidl::admin::MatchableAttributesConfiguration* add_configurations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::MatchableAttributesConfiguration >&
      configurations() const;

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ListMatchableAttributesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::MatchableAttributesConfiguration > configurations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskResourceSpec

// string cpu = 1 [json_name = "cpu"];
inline void TaskResourceSpec::clear_cpu() {
  cpu_.ClearToEmpty();
}
inline const std::string& TaskResourceSpec::cpu() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskResourceSpec.cpu)
  return _internal_cpu();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskResourceSpec::set_cpu(ArgT0&& arg0, ArgT... args) {
 
 cpu_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskResourceSpec.cpu)
}
inline std::string* TaskResourceSpec::mutable_cpu() {
  std::string* _s = _internal_mutable_cpu();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskResourceSpec.cpu)
  return _s;
}
inline const std::string& TaskResourceSpec::_internal_cpu() const {
  return cpu_.Get();
}
inline void TaskResourceSpec::_internal_set_cpu(const std::string& value) {
  
  cpu_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskResourceSpec::_internal_mutable_cpu() {
  
  return cpu_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskResourceSpec::release_cpu() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskResourceSpec.cpu)
  return cpu_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskResourceSpec::set_allocated_cpu(std::string* cpu) {
  if (cpu != nullptr) {
    
  } else {
    
  }
  cpu_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cpu,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cpu_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cpu_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskResourceSpec.cpu)
}

// string gpu = 2 [json_name = "gpu"];
inline void TaskResourceSpec::clear_gpu() {
  gpu_.ClearToEmpty();
}
inline const std::string& TaskResourceSpec::gpu() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskResourceSpec.gpu)
  return _internal_gpu();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskResourceSpec::set_gpu(ArgT0&& arg0, ArgT... args) {
 
 gpu_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskResourceSpec.gpu)
}
inline std::string* TaskResourceSpec::mutable_gpu() {
  std::string* _s = _internal_mutable_gpu();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskResourceSpec.gpu)
  return _s;
}
inline const std::string& TaskResourceSpec::_internal_gpu() const {
  return gpu_.Get();
}
inline void TaskResourceSpec::_internal_set_gpu(const std::string& value) {
  
  gpu_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskResourceSpec::_internal_mutable_gpu() {
  
  return gpu_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskResourceSpec::release_gpu() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskResourceSpec.gpu)
  return gpu_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskResourceSpec::set_allocated_gpu(std::string* gpu) {
  if (gpu != nullptr) {
    
  } else {
    
  }
  gpu_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gpu,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gpu_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gpu_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskResourceSpec.gpu)
}

// string memory = 3 [json_name = "memory"];
inline void TaskResourceSpec::clear_memory() {
  memory_.ClearToEmpty();
}
inline const std::string& TaskResourceSpec::memory() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskResourceSpec.memory)
  return _internal_memory();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskResourceSpec::set_memory(ArgT0&& arg0, ArgT... args) {
 
 memory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskResourceSpec.memory)
}
inline std::string* TaskResourceSpec::mutable_memory() {
  std::string* _s = _internal_mutable_memory();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskResourceSpec.memory)
  return _s;
}
inline const std::string& TaskResourceSpec::_internal_memory() const {
  return memory_.Get();
}
inline void TaskResourceSpec::_internal_set_memory(const std::string& value) {
  
  memory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskResourceSpec::_internal_mutable_memory() {
  
  return memory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskResourceSpec::release_memory() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskResourceSpec.memory)
  return memory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskResourceSpec::set_allocated_memory(std::string* memory) {
  if (memory != nullptr) {
    
  } else {
    
  }
  memory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memory,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (memory_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    memory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskResourceSpec.memory)
}

// string storage = 4 [json_name = "storage"];
inline void TaskResourceSpec::clear_storage() {
  storage_.ClearToEmpty();
}
inline const std::string& TaskResourceSpec::storage() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskResourceSpec.storage)
  return _internal_storage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskResourceSpec::set_storage(ArgT0&& arg0, ArgT... args) {
 
 storage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskResourceSpec.storage)
}
inline std::string* TaskResourceSpec::mutable_storage() {
  std::string* _s = _internal_mutable_storage();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskResourceSpec.storage)
  return _s;
}
inline const std::string& TaskResourceSpec::_internal_storage() const {
  return storage_.Get();
}
inline void TaskResourceSpec::_internal_set_storage(const std::string& value) {
  
  storage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskResourceSpec::_internal_mutable_storage() {
  
  return storage_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskResourceSpec::release_storage() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskResourceSpec.storage)
  return storage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskResourceSpec::set_allocated_storage(std::string* storage) {
  if (storage != nullptr) {
    
  } else {
    
  }
  storage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), storage,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (storage_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    storage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskResourceSpec.storage)
}

// string ephemeral_storage = 5 [json_name = "ephemeralStorage"];
inline void TaskResourceSpec::clear_ephemeral_storage() {
  ephemeral_storage_.ClearToEmpty();
}
inline const std::string& TaskResourceSpec::ephemeral_storage() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskResourceSpec.ephemeral_storage)
  return _internal_ephemeral_storage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskResourceSpec::set_ephemeral_storage(ArgT0&& arg0, ArgT... args) {
 
 ephemeral_storage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskResourceSpec.ephemeral_storage)
}
inline std::string* TaskResourceSpec::mutable_ephemeral_storage() {
  std::string* _s = _internal_mutable_ephemeral_storage();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskResourceSpec.ephemeral_storage)
  return _s;
}
inline const std::string& TaskResourceSpec::_internal_ephemeral_storage() const {
  return ephemeral_storage_.Get();
}
inline void TaskResourceSpec::_internal_set_ephemeral_storage(const std::string& value) {
  
  ephemeral_storage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskResourceSpec::_internal_mutable_ephemeral_storage() {
  
  return ephemeral_storage_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskResourceSpec::release_ephemeral_storage() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskResourceSpec.ephemeral_storage)
  return ephemeral_storage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskResourceSpec::set_allocated_ephemeral_storage(std::string* ephemeral_storage) {
  if (ephemeral_storage != nullptr) {
    
  } else {
    
  }
  ephemeral_storage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ephemeral_storage,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ephemeral_storage_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ephemeral_storage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskResourceSpec.ephemeral_storage)
}

// -------------------------------------------------------------------

// TaskResourceAttributes

// .flyteidl.admin.TaskResourceSpec defaults = 1 [json_name = "defaults"];
inline bool TaskResourceAttributes::_internal_has_defaults() const {
  return this != internal_default_instance() && defaults_ != nullptr;
}
inline bool TaskResourceAttributes::has_defaults() const {
  return _internal_has_defaults();
}
inline void TaskResourceAttributes::clear_defaults() {
  if (GetArenaForAllocation() == nullptr && defaults_ != nullptr) {
    delete defaults_;
  }
  defaults_ = nullptr;
}
inline const ::flyteidl::admin::TaskResourceSpec& TaskResourceAttributes::_internal_defaults() const {
  const ::flyteidl::admin::TaskResourceSpec* p = defaults_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::TaskResourceSpec&>(
      ::flyteidl::admin::_TaskResourceSpec_default_instance_);
}
inline const ::flyteidl::admin::TaskResourceSpec& TaskResourceAttributes::defaults() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskResourceAttributes.defaults)
  return _internal_defaults();
}
inline void TaskResourceAttributes::unsafe_arena_set_allocated_defaults(
    ::flyteidl::admin::TaskResourceSpec* defaults) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaults_);
  }
  defaults_ = defaults;
  if (defaults) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.TaskResourceAttributes.defaults)
}
inline ::flyteidl::admin::TaskResourceSpec* TaskResourceAttributes::release_defaults() {
  
  ::flyteidl::admin::TaskResourceSpec* temp = defaults_;
  defaults_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::TaskResourceSpec* TaskResourceAttributes::unsafe_arena_release_defaults() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskResourceAttributes.defaults)
  
  ::flyteidl::admin::TaskResourceSpec* temp = defaults_;
  defaults_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::TaskResourceSpec* TaskResourceAttributes::_internal_mutable_defaults() {
  
  if (defaults_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::TaskResourceSpec>(GetArenaForAllocation());
    defaults_ = p;
  }
  return defaults_;
}
inline ::flyteidl::admin::TaskResourceSpec* TaskResourceAttributes::mutable_defaults() {
  ::flyteidl::admin::TaskResourceSpec* _msg = _internal_mutable_defaults();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskResourceAttributes.defaults)
  return _msg;
}
inline void TaskResourceAttributes::set_allocated_defaults(::flyteidl::admin::TaskResourceSpec* defaults) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete defaults_;
  }
  if (defaults) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::TaskResourceSpec>::GetOwningArena(defaults);
    if (message_arena != submessage_arena) {
      defaults = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defaults, submessage_arena);
    }
    
  } else {
    
  }
  defaults_ = defaults;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskResourceAttributes.defaults)
}

// .flyteidl.admin.TaskResourceSpec limits = 2 [json_name = "limits"];
inline bool TaskResourceAttributes::_internal_has_limits() const {
  return this != internal_default_instance() && limits_ != nullptr;
}
inline bool TaskResourceAttributes::has_limits() const {
  return _internal_has_limits();
}
inline void TaskResourceAttributes::clear_limits() {
  if (GetArenaForAllocation() == nullptr && limits_ != nullptr) {
    delete limits_;
  }
  limits_ = nullptr;
}
inline const ::flyteidl::admin::TaskResourceSpec& TaskResourceAttributes::_internal_limits() const {
  const ::flyteidl::admin::TaskResourceSpec* p = limits_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::TaskResourceSpec&>(
      ::flyteidl::admin::_TaskResourceSpec_default_instance_);
}
inline const ::flyteidl::admin::TaskResourceSpec& TaskResourceAttributes::limits() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskResourceAttributes.limits)
  return _internal_limits();
}
inline void TaskResourceAttributes::unsafe_arena_set_allocated_limits(
    ::flyteidl::admin::TaskResourceSpec* limits) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limits_);
  }
  limits_ = limits;
  if (limits) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.TaskResourceAttributes.limits)
}
inline ::flyteidl::admin::TaskResourceSpec* TaskResourceAttributes::release_limits() {
  
  ::flyteidl::admin::TaskResourceSpec* temp = limits_;
  limits_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::TaskResourceSpec* TaskResourceAttributes::unsafe_arena_release_limits() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskResourceAttributes.limits)
  
  ::flyteidl::admin::TaskResourceSpec* temp = limits_;
  limits_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::TaskResourceSpec* TaskResourceAttributes::_internal_mutable_limits() {
  
  if (limits_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::TaskResourceSpec>(GetArenaForAllocation());
    limits_ = p;
  }
  return limits_;
}
inline ::flyteidl::admin::TaskResourceSpec* TaskResourceAttributes::mutable_limits() {
  ::flyteidl::admin::TaskResourceSpec* _msg = _internal_mutable_limits();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskResourceAttributes.limits)
  return _msg;
}
inline void TaskResourceAttributes::set_allocated_limits(::flyteidl::admin::TaskResourceSpec* limits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete limits_;
  }
  if (limits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::TaskResourceSpec>::GetOwningArena(limits);
    if (message_arena != submessage_arena) {
      limits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limits, submessage_arena);
    }
    
  } else {
    
  }
  limits_ = limits;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskResourceAttributes.limits)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ClusterResourceAttributes

// map<string, string> attributes = 1 [json_name = "attributes"];
inline int ClusterResourceAttributes::_internal_attributes_size() const {
  return attributes_.size();
}
inline int ClusterResourceAttributes::attributes_size() const {
  return _internal_attributes_size();
}
inline void ClusterResourceAttributes::clear_attributes() {
  attributes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ClusterResourceAttributes::_internal_attributes() const {
  return attributes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ClusterResourceAttributes::attributes() const {
  // @@protoc_insertion_point(field_map:flyteidl.admin.ClusterResourceAttributes.attributes)
  return _internal_attributes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ClusterResourceAttributes::_internal_mutable_attributes() {
  return attributes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ClusterResourceAttributes::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_map:flyteidl.admin.ClusterResourceAttributes.attributes)
  return _internal_mutable_attributes();
}

// -------------------------------------------------------------------

// ExecutionQueueAttributes

// repeated string tags = 1 [json_name = "tags"];
inline int ExecutionQueueAttributes::_internal_tags_size() const {
  return tags_.size();
}
inline int ExecutionQueueAttributes::tags_size() const {
  return _internal_tags_size();
}
inline void ExecutionQueueAttributes::clear_tags() {
  tags_.Clear();
}
inline std::string* ExecutionQueueAttributes::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:flyteidl.admin.ExecutionQueueAttributes.tags)
  return _s;
}
inline const std::string& ExecutionQueueAttributes::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& ExecutionQueueAttributes::tags(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionQueueAttributes.tags)
  return _internal_tags(index);
}
inline std::string* ExecutionQueueAttributes::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionQueueAttributes.tags)
  return tags_.Mutable(index);
}
inline void ExecutionQueueAttributes::set_tags(int index, const std::string& value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.ExecutionQueueAttributes.tags)
}
inline void ExecutionQueueAttributes::set_tags(int index, std::string&& value) {
  tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flyteidl.admin.ExecutionQueueAttributes.tags)
}
inline void ExecutionQueueAttributes::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.ExecutionQueueAttributes.tags)
}
inline void ExecutionQueueAttributes::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.ExecutionQueueAttributes.tags)
}
inline std::string* ExecutionQueueAttributes::_internal_add_tags() {
  return tags_.Add();
}
inline void ExecutionQueueAttributes::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.admin.ExecutionQueueAttributes.tags)
}
inline void ExecutionQueueAttributes::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.admin.ExecutionQueueAttributes.tags)
}
inline void ExecutionQueueAttributes::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.admin.ExecutionQueueAttributes.tags)
}
inline void ExecutionQueueAttributes::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.admin.ExecutionQueueAttributes.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ExecutionQueueAttributes::tags() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.ExecutionQueueAttributes.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ExecutionQueueAttributes::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.ExecutionQueueAttributes.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// ExecutionClusterLabel

// string value = 1 [json_name = "value"];
inline void ExecutionClusterLabel::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& ExecutionClusterLabel::value() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionClusterLabel.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExecutionClusterLabel::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.ExecutionClusterLabel.value)
}
inline std::string* ExecutionClusterLabel::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionClusterLabel.value)
  return _s;
}
inline const std::string& ExecutionClusterLabel::_internal_value() const {
  return value_.Get();
}
inline void ExecutionClusterLabel::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExecutionClusterLabel::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExecutionClusterLabel::release_value() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionClusterLabel.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExecutionClusterLabel::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionClusterLabel.value)
}

// -------------------------------------------------------------------

// PluginOverride

// string task_type = 1 [json_name = "taskType"];
inline void PluginOverride::clear_task_type() {
  task_type_.ClearToEmpty();
}
inline const std::string& PluginOverride::task_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.PluginOverride.task_type)
  return _internal_task_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PluginOverride::set_task_type(ArgT0&& arg0, ArgT... args) {
 
 task_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.PluginOverride.task_type)
}
inline std::string* PluginOverride::mutable_task_type() {
  std::string* _s = _internal_mutable_task_type();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.PluginOverride.task_type)
  return _s;
}
inline const std::string& PluginOverride::_internal_task_type() const {
  return task_type_.Get();
}
inline void PluginOverride::_internal_set_task_type(const std::string& value) {
  
  task_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PluginOverride::_internal_mutable_task_type() {
  
  return task_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PluginOverride::release_task_type() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.PluginOverride.task_type)
  return task_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PluginOverride::set_allocated_task_type(std::string* task_type) {
  if (task_type != nullptr) {
    
  } else {
    
  }
  task_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (task_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    task_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.PluginOverride.task_type)
}

// repeated string plugin_id = 2 [json_name = "pluginId"];
inline int PluginOverride::_internal_plugin_id_size() const {
  return plugin_id_.size();
}
inline int PluginOverride::plugin_id_size() const {
  return _internal_plugin_id_size();
}
inline void PluginOverride::clear_plugin_id() {
  plugin_id_.Clear();
}
inline std::string* PluginOverride::add_plugin_id() {
  std::string* _s = _internal_add_plugin_id();
  // @@protoc_insertion_point(field_add_mutable:flyteidl.admin.PluginOverride.plugin_id)
  return _s;
}
inline const std::string& PluginOverride::_internal_plugin_id(int index) const {
  return plugin_id_.Get(index);
}
inline const std::string& PluginOverride::plugin_id(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.PluginOverride.plugin_id)
  return _internal_plugin_id(index);
}
inline std::string* PluginOverride::mutable_plugin_id(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.PluginOverride.plugin_id)
  return plugin_id_.Mutable(index);
}
inline void PluginOverride::set_plugin_id(int index, const std::string& value) {
  plugin_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.PluginOverride.plugin_id)
}
inline void PluginOverride::set_plugin_id(int index, std::string&& value) {
  plugin_id_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flyteidl.admin.PluginOverride.plugin_id)
}
inline void PluginOverride::set_plugin_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  plugin_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.PluginOverride.plugin_id)
}
inline void PluginOverride::set_plugin_id(int index, const char* value, size_t size) {
  plugin_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.PluginOverride.plugin_id)
}
inline std::string* PluginOverride::_internal_add_plugin_id() {
  return plugin_id_.Add();
}
inline void PluginOverride::add_plugin_id(const std::string& value) {
  plugin_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.admin.PluginOverride.plugin_id)
}
inline void PluginOverride::add_plugin_id(std::string&& value) {
  plugin_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.admin.PluginOverride.plugin_id)
}
inline void PluginOverride::add_plugin_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  plugin_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.admin.PluginOverride.plugin_id)
}
inline void PluginOverride::add_plugin_id(const char* value, size_t size) {
  plugin_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.admin.PluginOverride.plugin_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PluginOverride::plugin_id() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.PluginOverride.plugin_id)
  return plugin_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PluginOverride::mutable_plugin_id() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.PluginOverride.plugin_id)
  return &plugin_id_;
}

// .flyteidl.admin.PluginOverride.MissingPluginBehavior missing_plugin_behavior = 4 [json_name = "missingPluginBehavior"];
inline void PluginOverride::clear_missing_plugin_behavior() {
  missing_plugin_behavior_ = 0;
}
inline ::flyteidl::admin::PluginOverride_MissingPluginBehavior PluginOverride::_internal_missing_plugin_behavior() const {
  return static_cast< ::flyteidl::admin::PluginOverride_MissingPluginBehavior >(missing_plugin_behavior_);
}
inline ::flyteidl::admin::PluginOverride_MissingPluginBehavior PluginOverride::missing_plugin_behavior() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.PluginOverride.missing_plugin_behavior)
  return _internal_missing_plugin_behavior();
}
inline void PluginOverride::_internal_set_missing_plugin_behavior(::flyteidl::admin::PluginOverride_MissingPluginBehavior value) {
  
  missing_plugin_behavior_ = value;
}
inline void PluginOverride::set_missing_plugin_behavior(::flyteidl::admin::PluginOverride_MissingPluginBehavior value) {
  _internal_set_missing_plugin_behavior(value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.PluginOverride.missing_plugin_behavior)
}

// -------------------------------------------------------------------

// PluginOverrides

// repeated .flyteidl.admin.PluginOverride overrides = 1 [json_name = "overrides"];
inline int PluginOverrides::_internal_overrides_size() const {
  return overrides_.size();
}
inline int PluginOverrides::overrides_size() const {
  return _internal_overrides_size();
}
inline void PluginOverrides::clear_overrides() {
  overrides_.Clear();
}
inline ::flyteidl::admin::PluginOverride* PluginOverrides::mutable_overrides(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.PluginOverrides.overrides)
  return overrides_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::PluginOverride >*
PluginOverrides::mutable_overrides() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.PluginOverrides.overrides)
  return &overrides_;
}
inline const ::flyteidl::admin::PluginOverride& PluginOverrides::_internal_overrides(int index) const {
  return overrides_.Get(index);
}
inline const ::flyteidl::admin::PluginOverride& PluginOverrides::overrides(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.PluginOverrides.overrides)
  return _internal_overrides(index);
}
inline ::flyteidl::admin::PluginOverride* PluginOverrides::_internal_add_overrides() {
  return overrides_.Add();
}
inline ::flyteidl::admin::PluginOverride* PluginOverrides::add_overrides() {
  ::flyteidl::admin::PluginOverride* _add = _internal_add_overrides();
  // @@protoc_insertion_point(field_add:flyteidl.admin.PluginOverrides.overrides)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::PluginOverride >&
PluginOverrides::overrides() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.PluginOverrides.overrides)
  return overrides_;
}

// -------------------------------------------------------------------

// WorkflowExecutionConfig

// int32 max_parallelism = 1 [json_name = "maxParallelism"];
inline void WorkflowExecutionConfig::clear_max_parallelism() {
  max_parallelism_ = 0;
}
inline int32_t WorkflowExecutionConfig::_internal_max_parallelism() const {
  return max_parallelism_;
}
inline int32_t WorkflowExecutionConfig::max_parallelism() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowExecutionConfig.max_parallelism)
  return _internal_max_parallelism();
}
inline void WorkflowExecutionConfig::_internal_set_max_parallelism(int32_t value) {
  
  max_parallelism_ = value;
}
inline void WorkflowExecutionConfig::set_max_parallelism(int32_t value) {
  _internal_set_max_parallelism(value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.WorkflowExecutionConfig.max_parallelism)
}

// .flyteidl.core.SecurityContext security_context = 2 [json_name = "securityContext"];
inline bool WorkflowExecutionConfig::_internal_has_security_context() const {
  return this != internal_default_instance() && security_context_ != nullptr;
}
inline bool WorkflowExecutionConfig::has_security_context() const {
  return _internal_has_security_context();
}
inline const ::flyteidl::core::SecurityContext& WorkflowExecutionConfig::_internal_security_context() const {
  const ::flyteidl::core::SecurityContext* p = security_context_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::SecurityContext&>(
      ::flyteidl::core::_SecurityContext_default_instance_);
}
inline const ::flyteidl::core::SecurityContext& WorkflowExecutionConfig::security_context() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowExecutionConfig.security_context)
  return _internal_security_context();
}
inline void WorkflowExecutionConfig::unsafe_arena_set_allocated_security_context(
    ::flyteidl::core::SecurityContext* security_context) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_context_);
  }
  security_context_ = security_context;
  if (security_context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.WorkflowExecutionConfig.security_context)
}
inline ::flyteidl::core::SecurityContext* WorkflowExecutionConfig::release_security_context() {
  
  ::flyteidl::core::SecurityContext* temp = security_context_;
  security_context_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::SecurityContext* WorkflowExecutionConfig::unsafe_arena_release_security_context() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowExecutionConfig.security_context)
  
  ::flyteidl::core::SecurityContext* temp = security_context_;
  security_context_ = nullptr;
  return temp;
}
inline ::flyteidl::core::SecurityContext* WorkflowExecutionConfig::_internal_mutable_security_context() {
  
  if (security_context_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::SecurityContext>(GetArenaForAllocation());
    security_context_ = p;
  }
  return security_context_;
}
inline ::flyteidl::core::SecurityContext* WorkflowExecutionConfig::mutable_security_context() {
  ::flyteidl::core::SecurityContext* _msg = _internal_mutable_security_context();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowExecutionConfig.security_context)
  return _msg;
}
inline void WorkflowExecutionConfig::set_allocated_security_context(::flyteidl::core::SecurityContext* security_context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_context_);
  }
  if (security_context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(security_context));
    if (message_arena != submessage_arena) {
      security_context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, security_context, submessage_arena);
    }
    
  } else {
    
  }
  security_context_ = security_context;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowExecutionConfig.security_context)
}

// .flyteidl.admin.RawOutputDataConfig raw_output_data_config = 3 [json_name = "rawOutputDataConfig"];
inline bool WorkflowExecutionConfig::_internal_has_raw_output_data_config() const {
  return this != internal_default_instance() && raw_output_data_config_ != nullptr;
}
inline bool WorkflowExecutionConfig::has_raw_output_data_config() const {
  return _internal_has_raw_output_data_config();
}
inline const ::flyteidl::admin::RawOutputDataConfig& WorkflowExecutionConfig::_internal_raw_output_data_config() const {
  const ::flyteidl::admin::RawOutputDataConfig* p = raw_output_data_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::RawOutputDataConfig&>(
      ::flyteidl::admin::_RawOutputDataConfig_default_instance_);
}
inline const ::flyteidl::admin::RawOutputDataConfig& WorkflowExecutionConfig::raw_output_data_config() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowExecutionConfig.raw_output_data_config)
  return _internal_raw_output_data_config();
}
inline void WorkflowExecutionConfig::unsafe_arena_set_allocated_raw_output_data_config(
    ::flyteidl::admin::RawOutputDataConfig* raw_output_data_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(raw_output_data_config_);
  }
  raw_output_data_config_ = raw_output_data_config;
  if (raw_output_data_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.WorkflowExecutionConfig.raw_output_data_config)
}
inline ::flyteidl::admin::RawOutputDataConfig* WorkflowExecutionConfig::release_raw_output_data_config() {
  
  ::flyteidl::admin::RawOutputDataConfig* temp = raw_output_data_config_;
  raw_output_data_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::RawOutputDataConfig* WorkflowExecutionConfig::unsafe_arena_release_raw_output_data_config() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowExecutionConfig.raw_output_data_config)
  
  ::flyteidl::admin::RawOutputDataConfig* temp = raw_output_data_config_;
  raw_output_data_config_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::RawOutputDataConfig* WorkflowExecutionConfig::_internal_mutable_raw_output_data_config() {
  
  if (raw_output_data_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::RawOutputDataConfig>(GetArenaForAllocation());
    raw_output_data_config_ = p;
  }
  return raw_output_data_config_;
}
inline ::flyteidl::admin::RawOutputDataConfig* WorkflowExecutionConfig::mutable_raw_output_data_config() {
  ::flyteidl::admin::RawOutputDataConfig* _msg = _internal_mutable_raw_output_data_config();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowExecutionConfig.raw_output_data_config)
  return _msg;
}
inline void WorkflowExecutionConfig::set_allocated_raw_output_data_config(::flyteidl::admin::RawOutputDataConfig* raw_output_data_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(raw_output_data_config_);
  }
  if (raw_output_data_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(raw_output_data_config));
    if (message_arena != submessage_arena) {
      raw_output_data_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raw_output_data_config, submessage_arena);
    }
    
  } else {
    
  }
  raw_output_data_config_ = raw_output_data_config;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowExecutionConfig.raw_output_data_config)
}

// .flyteidl.admin.Labels labels = 4 [json_name = "labels"];
inline bool WorkflowExecutionConfig::_internal_has_labels() const {
  return this != internal_default_instance() && labels_ != nullptr;
}
inline bool WorkflowExecutionConfig::has_labels() const {
  return _internal_has_labels();
}
inline const ::flyteidl::admin::Labels& WorkflowExecutionConfig::_internal_labels() const {
  const ::flyteidl::admin::Labels* p = labels_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::Labels&>(
      ::flyteidl::admin::_Labels_default_instance_);
}
inline const ::flyteidl::admin::Labels& WorkflowExecutionConfig::labels() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowExecutionConfig.labels)
  return _internal_labels();
}
inline void WorkflowExecutionConfig::unsafe_arena_set_allocated_labels(
    ::flyteidl::admin::Labels* labels) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(labels_);
  }
  labels_ = labels;
  if (labels) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.WorkflowExecutionConfig.labels)
}
inline ::flyteidl::admin::Labels* WorkflowExecutionConfig::release_labels() {
  
  ::flyteidl::admin::Labels* temp = labels_;
  labels_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::Labels* WorkflowExecutionConfig::unsafe_arena_release_labels() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowExecutionConfig.labels)
  
  ::flyteidl::admin::Labels* temp = labels_;
  labels_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Labels* WorkflowExecutionConfig::_internal_mutable_labels() {
  
  if (labels_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Labels>(GetArenaForAllocation());
    labels_ = p;
  }
  return labels_;
}
inline ::flyteidl::admin::Labels* WorkflowExecutionConfig::mutable_labels() {
  ::flyteidl::admin::Labels* _msg = _internal_mutable_labels();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowExecutionConfig.labels)
  return _msg;
}
inline void WorkflowExecutionConfig::set_allocated_labels(::flyteidl::admin::Labels* labels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(labels_);
  }
  if (labels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(labels));
    if (message_arena != submessage_arena) {
      labels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, labels, submessage_arena);
    }
    
  } else {
    
  }
  labels_ = labels;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowExecutionConfig.labels)
}

// .flyteidl.admin.Annotations annotations = 5 [json_name = "annotations"];
inline bool WorkflowExecutionConfig::_internal_has_annotations() const {
  return this != internal_default_instance() && annotations_ != nullptr;
}
inline bool WorkflowExecutionConfig::has_annotations() const {
  return _internal_has_annotations();
}
inline const ::flyteidl::admin::Annotations& WorkflowExecutionConfig::_internal_annotations() const {
  const ::flyteidl::admin::Annotations* p = annotations_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::Annotations&>(
      ::flyteidl::admin::_Annotations_default_instance_);
}
inline const ::flyteidl::admin::Annotations& WorkflowExecutionConfig::annotations() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowExecutionConfig.annotations)
  return _internal_annotations();
}
inline void WorkflowExecutionConfig::unsafe_arena_set_allocated_annotations(
    ::flyteidl::admin::Annotations* annotations) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotations_);
  }
  annotations_ = annotations;
  if (annotations) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.WorkflowExecutionConfig.annotations)
}
inline ::flyteidl::admin::Annotations* WorkflowExecutionConfig::release_annotations() {
  
  ::flyteidl::admin::Annotations* temp = annotations_;
  annotations_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::Annotations* WorkflowExecutionConfig::unsafe_arena_release_annotations() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowExecutionConfig.annotations)
  
  ::flyteidl::admin::Annotations* temp = annotations_;
  annotations_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Annotations* WorkflowExecutionConfig::_internal_mutable_annotations() {
  
  if (annotations_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Annotations>(GetArenaForAllocation());
    annotations_ = p;
  }
  return annotations_;
}
inline ::flyteidl::admin::Annotations* WorkflowExecutionConfig::mutable_annotations() {
  ::flyteidl::admin::Annotations* _msg = _internal_mutable_annotations();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowExecutionConfig.annotations)
  return _msg;
}
inline void WorkflowExecutionConfig::set_allocated_annotations(::flyteidl::admin::Annotations* annotations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotations_);
  }
  if (annotations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotations));
    if (message_arena != submessage_arena) {
      annotations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotations, submessage_arena);
    }
    
  } else {
    
  }
  annotations_ = annotations;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowExecutionConfig.annotations)
}

// -------------------------------------------------------------------

// MatchingAttributes

// .flyteidl.admin.TaskResourceAttributes task_resource_attributes = 1 [json_name = "taskResourceAttributes"];
inline bool MatchingAttributes::_internal_has_task_resource_attributes() const {
  return target_case() == kTaskResourceAttributes;
}
inline bool MatchingAttributes::has_task_resource_attributes() const {
  return _internal_has_task_resource_attributes();
}
inline void MatchingAttributes::set_has_task_resource_attributes() {
  _oneof_case_[0] = kTaskResourceAttributes;
}
inline void MatchingAttributes::clear_task_resource_attributes() {
  if (_internal_has_task_resource_attributes()) {
    if (GetArenaForAllocation() == nullptr) {
      delete target_.task_resource_attributes_;
    }
    clear_has_target();
  }
}
inline ::flyteidl::admin::TaskResourceAttributes* MatchingAttributes::release_task_resource_attributes() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchingAttributes.task_resource_attributes)
  if (_internal_has_task_resource_attributes()) {
    clear_has_target();
      ::flyteidl::admin::TaskResourceAttributes* temp = target_.task_resource_attributes_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    target_.task_resource_attributes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::TaskResourceAttributes& MatchingAttributes::_internal_task_resource_attributes() const {
  return _internal_has_task_resource_attributes()
      ? *target_.task_resource_attributes_
      : reinterpret_cast< ::flyteidl::admin::TaskResourceAttributes&>(::flyteidl::admin::_TaskResourceAttributes_default_instance_);
}
inline const ::flyteidl::admin::TaskResourceAttributes& MatchingAttributes::task_resource_attributes() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchingAttributes.task_resource_attributes)
  return _internal_task_resource_attributes();
}
inline ::flyteidl::admin::TaskResourceAttributes* MatchingAttributes::unsafe_arena_release_task_resource_attributes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.admin.MatchingAttributes.task_resource_attributes)
  if (_internal_has_task_resource_attributes()) {
    clear_has_target();
    ::flyteidl::admin::TaskResourceAttributes* temp = target_.task_resource_attributes_;
    target_.task_resource_attributes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MatchingAttributes::unsafe_arena_set_allocated_task_resource_attributes(::flyteidl::admin::TaskResourceAttributes* task_resource_attributes) {
  clear_target();
  if (task_resource_attributes) {
    set_has_task_resource_attributes();
    target_.task_resource_attributes_ = task_resource_attributes;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.MatchingAttributes.task_resource_attributes)
}
inline ::flyteidl::admin::TaskResourceAttributes* MatchingAttributes::_internal_mutable_task_resource_attributes() {
  if (!_internal_has_task_resource_attributes()) {
    clear_target();
    set_has_task_resource_attributes();
    target_.task_resource_attributes_ = CreateMaybeMessage< ::flyteidl::admin::TaskResourceAttributes >(GetArenaForAllocation());
  }
  return target_.task_resource_attributes_;
}
inline ::flyteidl::admin::TaskResourceAttributes* MatchingAttributes::mutable_task_resource_attributes() {
  ::flyteidl::admin::TaskResourceAttributes* _msg = _internal_mutable_task_resource_attributes();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchingAttributes.task_resource_attributes)
  return _msg;
}

// .flyteidl.admin.ClusterResourceAttributes cluster_resource_attributes = 2 [json_name = "clusterResourceAttributes"];
inline bool MatchingAttributes::_internal_has_cluster_resource_attributes() const {
  return target_case() == kClusterResourceAttributes;
}
inline bool MatchingAttributes::has_cluster_resource_attributes() const {
  return _internal_has_cluster_resource_attributes();
}
inline void MatchingAttributes::set_has_cluster_resource_attributes() {
  _oneof_case_[0] = kClusterResourceAttributes;
}
inline void MatchingAttributes::clear_cluster_resource_attributes() {
  if (_internal_has_cluster_resource_attributes()) {
    if (GetArenaForAllocation() == nullptr) {
      delete target_.cluster_resource_attributes_;
    }
    clear_has_target();
  }
}
inline ::flyteidl::admin::ClusterResourceAttributes* MatchingAttributes::release_cluster_resource_attributes() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchingAttributes.cluster_resource_attributes)
  if (_internal_has_cluster_resource_attributes()) {
    clear_has_target();
      ::flyteidl::admin::ClusterResourceAttributes* temp = target_.cluster_resource_attributes_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    target_.cluster_resource_attributes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::ClusterResourceAttributes& MatchingAttributes::_internal_cluster_resource_attributes() const {
  return _internal_has_cluster_resource_attributes()
      ? *target_.cluster_resource_attributes_
      : reinterpret_cast< ::flyteidl::admin::ClusterResourceAttributes&>(::flyteidl::admin::_ClusterResourceAttributes_default_instance_);
}
inline const ::flyteidl::admin::ClusterResourceAttributes& MatchingAttributes::cluster_resource_attributes() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchingAttributes.cluster_resource_attributes)
  return _internal_cluster_resource_attributes();
}
inline ::flyteidl::admin::ClusterResourceAttributes* MatchingAttributes::unsafe_arena_release_cluster_resource_attributes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.admin.MatchingAttributes.cluster_resource_attributes)
  if (_internal_has_cluster_resource_attributes()) {
    clear_has_target();
    ::flyteidl::admin::ClusterResourceAttributes* temp = target_.cluster_resource_attributes_;
    target_.cluster_resource_attributes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MatchingAttributes::unsafe_arena_set_allocated_cluster_resource_attributes(::flyteidl::admin::ClusterResourceAttributes* cluster_resource_attributes) {
  clear_target();
  if (cluster_resource_attributes) {
    set_has_cluster_resource_attributes();
    target_.cluster_resource_attributes_ = cluster_resource_attributes;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.MatchingAttributes.cluster_resource_attributes)
}
inline ::flyteidl::admin::ClusterResourceAttributes* MatchingAttributes::_internal_mutable_cluster_resource_attributes() {
  if (!_internal_has_cluster_resource_attributes()) {
    clear_target();
    set_has_cluster_resource_attributes();
    target_.cluster_resource_attributes_ = CreateMaybeMessage< ::flyteidl::admin::ClusterResourceAttributes >(GetArenaForAllocation());
  }
  return target_.cluster_resource_attributes_;
}
inline ::flyteidl::admin::ClusterResourceAttributes* MatchingAttributes::mutable_cluster_resource_attributes() {
  ::flyteidl::admin::ClusterResourceAttributes* _msg = _internal_mutable_cluster_resource_attributes();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchingAttributes.cluster_resource_attributes)
  return _msg;
}

// .flyteidl.admin.ExecutionQueueAttributes execution_queue_attributes = 3 [json_name = "executionQueueAttributes"];
inline bool MatchingAttributes::_internal_has_execution_queue_attributes() const {
  return target_case() == kExecutionQueueAttributes;
}
inline bool MatchingAttributes::has_execution_queue_attributes() const {
  return _internal_has_execution_queue_attributes();
}
inline void MatchingAttributes::set_has_execution_queue_attributes() {
  _oneof_case_[0] = kExecutionQueueAttributes;
}
inline void MatchingAttributes::clear_execution_queue_attributes() {
  if (_internal_has_execution_queue_attributes()) {
    if (GetArenaForAllocation() == nullptr) {
      delete target_.execution_queue_attributes_;
    }
    clear_has_target();
  }
}
inline ::flyteidl::admin::ExecutionQueueAttributes* MatchingAttributes::release_execution_queue_attributes() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchingAttributes.execution_queue_attributes)
  if (_internal_has_execution_queue_attributes()) {
    clear_has_target();
      ::flyteidl::admin::ExecutionQueueAttributes* temp = target_.execution_queue_attributes_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    target_.execution_queue_attributes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::ExecutionQueueAttributes& MatchingAttributes::_internal_execution_queue_attributes() const {
  return _internal_has_execution_queue_attributes()
      ? *target_.execution_queue_attributes_
      : reinterpret_cast< ::flyteidl::admin::ExecutionQueueAttributes&>(::flyteidl::admin::_ExecutionQueueAttributes_default_instance_);
}
inline const ::flyteidl::admin::ExecutionQueueAttributes& MatchingAttributes::execution_queue_attributes() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchingAttributes.execution_queue_attributes)
  return _internal_execution_queue_attributes();
}
inline ::flyteidl::admin::ExecutionQueueAttributes* MatchingAttributes::unsafe_arena_release_execution_queue_attributes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.admin.MatchingAttributes.execution_queue_attributes)
  if (_internal_has_execution_queue_attributes()) {
    clear_has_target();
    ::flyteidl::admin::ExecutionQueueAttributes* temp = target_.execution_queue_attributes_;
    target_.execution_queue_attributes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MatchingAttributes::unsafe_arena_set_allocated_execution_queue_attributes(::flyteidl::admin::ExecutionQueueAttributes* execution_queue_attributes) {
  clear_target();
  if (execution_queue_attributes) {
    set_has_execution_queue_attributes();
    target_.execution_queue_attributes_ = execution_queue_attributes;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.MatchingAttributes.execution_queue_attributes)
}
inline ::flyteidl::admin::ExecutionQueueAttributes* MatchingAttributes::_internal_mutable_execution_queue_attributes() {
  if (!_internal_has_execution_queue_attributes()) {
    clear_target();
    set_has_execution_queue_attributes();
    target_.execution_queue_attributes_ = CreateMaybeMessage< ::flyteidl::admin::ExecutionQueueAttributes >(GetArenaForAllocation());
  }
  return target_.execution_queue_attributes_;
}
inline ::flyteidl::admin::ExecutionQueueAttributes* MatchingAttributes::mutable_execution_queue_attributes() {
  ::flyteidl::admin::ExecutionQueueAttributes* _msg = _internal_mutable_execution_queue_attributes();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchingAttributes.execution_queue_attributes)
  return _msg;
}

// .flyteidl.admin.ExecutionClusterLabel execution_cluster_label = 4 [json_name = "executionClusterLabel"];
inline bool MatchingAttributes::_internal_has_execution_cluster_label() const {
  return target_case() == kExecutionClusterLabel;
}
inline bool MatchingAttributes::has_execution_cluster_label() const {
  return _internal_has_execution_cluster_label();
}
inline void MatchingAttributes::set_has_execution_cluster_label() {
  _oneof_case_[0] = kExecutionClusterLabel;
}
inline void MatchingAttributes::clear_execution_cluster_label() {
  if (_internal_has_execution_cluster_label()) {
    if (GetArenaForAllocation() == nullptr) {
      delete target_.execution_cluster_label_;
    }
    clear_has_target();
  }
}
inline ::flyteidl::admin::ExecutionClusterLabel* MatchingAttributes::release_execution_cluster_label() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchingAttributes.execution_cluster_label)
  if (_internal_has_execution_cluster_label()) {
    clear_has_target();
      ::flyteidl::admin::ExecutionClusterLabel* temp = target_.execution_cluster_label_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    target_.execution_cluster_label_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::ExecutionClusterLabel& MatchingAttributes::_internal_execution_cluster_label() const {
  return _internal_has_execution_cluster_label()
      ? *target_.execution_cluster_label_
      : reinterpret_cast< ::flyteidl::admin::ExecutionClusterLabel&>(::flyteidl::admin::_ExecutionClusterLabel_default_instance_);
}
inline const ::flyteidl::admin::ExecutionClusterLabel& MatchingAttributes::execution_cluster_label() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchingAttributes.execution_cluster_label)
  return _internal_execution_cluster_label();
}
inline ::flyteidl::admin::ExecutionClusterLabel* MatchingAttributes::unsafe_arena_release_execution_cluster_label() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.admin.MatchingAttributes.execution_cluster_label)
  if (_internal_has_execution_cluster_label()) {
    clear_has_target();
    ::flyteidl::admin::ExecutionClusterLabel* temp = target_.execution_cluster_label_;
    target_.execution_cluster_label_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MatchingAttributes::unsafe_arena_set_allocated_execution_cluster_label(::flyteidl::admin::ExecutionClusterLabel* execution_cluster_label) {
  clear_target();
  if (execution_cluster_label) {
    set_has_execution_cluster_label();
    target_.execution_cluster_label_ = execution_cluster_label;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.MatchingAttributes.execution_cluster_label)
}
inline ::flyteidl::admin::ExecutionClusterLabel* MatchingAttributes::_internal_mutable_execution_cluster_label() {
  if (!_internal_has_execution_cluster_label()) {
    clear_target();
    set_has_execution_cluster_label();
    target_.execution_cluster_label_ = CreateMaybeMessage< ::flyteidl::admin::ExecutionClusterLabel >(GetArenaForAllocation());
  }
  return target_.execution_cluster_label_;
}
inline ::flyteidl::admin::ExecutionClusterLabel* MatchingAttributes::mutable_execution_cluster_label() {
  ::flyteidl::admin::ExecutionClusterLabel* _msg = _internal_mutable_execution_cluster_label();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchingAttributes.execution_cluster_label)
  return _msg;
}

// .flyteidl.core.QualityOfService quality_of_service = 5 [json_name = "qualityOfService"];
inline bool MatchingAttributes::_internal_has_quality_of_service() const {
  return target_case() == kQualityOfService;
}
inline bool MatchingAttributes::has_quality_of_service() const {
  return _internal_has_quality_of_service();
}
inline void MatchingAttributes::set_has_quality_of_service() {
  _oneof_case_[0] = kQualityOfService;
}
inline ::flyteidl::core::QualityOfService* MatchingAttributes::release_quality_of_service() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchingAttributes.quality_of_service)
  if (_internal_has_quality_of_service()) {
    clear_has_target();
      ::flyteidl::core::QualityOfService* temp = target_.quality_of_service_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    target_.quality_of_service_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::QualityOfService& MatchingAttributes::_internal_quality_of_service() const {
  return _internal_has_quality_of_service()
      ? *target_.quality_of_service_
      : reinterpret_cast< ::flyteidl::core::QualityOfService&>(::flyteidl::core::_QualityOfService_default_instance_);
}
inline const ::flyteidl::core::QualityOfService& MatchingAttributes::quality_of_service() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchingAttributes.quality_of_service)
  return _internal_quality_of_service();
}
inline ::flyteidl::core::QualityOfService* MatchingAttributes::unsafe_arena_release_quality_of_service() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.admin.MatchingAttributes.quality_of_service)
  if (_internal_has_quality_of_service()) {
    clear_has_target();
    ::flyteidl::core::QualityOfService* temp = target_.quality_of_service_;
    target_.quality_of_service_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MatchingAttributes::unsafe_arena_set_allocated_quality_of_service(::flyteidl::core::QualityOfService* quality_of_service) {
  clear_target();
  if (quality_of_service) {
    set_has_quality_of_service();
    target_.quality_of_service_ = quality_of_service;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.MatchingAttributes.quality_of_service)
}
inline ::flyteidl::core::QualityOfService* MatchingAttributes::_internal_mutable_quality_of_service() {
  if (!_internal_has_quality_of_service()) {
    clear_target();
    set_has_quality_of_service();
    target_.quality_of_service_ = CreateMaybeMessage< ::flyteidl::core::QualityOfService >(GetArenaForAllocation());
  }
  return target_.quality_of_service_;
}
inline ::flyteidl::core::QualityOfService* MatchingAttributes::mutable_quality_of_service() {
  ::flyteidl::core::QualityOfService* _msg = _internal_mutable_quality_of_service();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchingAttributes.quality_of_service)
  return _msg;
}

// .flyteidl.admin.PluginOverrides plugin_overrides = 6 [json_name = "pluginOverrides"];
inline bool MatchingAttributes::_internal_has_plugin_overrides() const {
  return target_case() == kPluginOverrides;
}
inline bool MatchingAttributes::has_plugin_overrides() const {
  return _internal_has_plugin_overrides();
}
inline void MatchingAttributes::set_has_plugin_overrides() {
  _oneof_case_[0] = kPluginOverrides;
}
inline void MatchingAttributes::clear_plugin_overrides() {
  if (_internal_has_plugin_overrides()) {
    if (GetArenaForAllocation() == nullptr) {
      delete target_.plugin_overrides_;
    }
    clear_has_target();
  }
}
inline ::flyteidl::admin::PluginOverrides* MatchingAttributes::release_plugin_overrides() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchingAttributes.plugin_overrides)
  if (_internal_has_plugin_overrides()) {
    clear_has_target();
      ::flyteidl::admin::PluginOverrides* temp = target_.plugin_overrides_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    target_.plugin_overrides_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::PluginOverrides& MatchingAttributes::_internal_plugin_overrides() const {
  return _internal_has_plugin_overrides()
      ? *target_.plugin_overrides_
      : reinterpret_cast< ::flyteidl::admin::PluginOverrides&>(::flyteidl::admin::_PluginOverrides_default_instance_);
}
inline const ::flyteidl::admin::PluginOverrides& MatchingAttributes::plugin_overrides() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchingAttributes.plugin_overrides)
  return _internal_plugin_overrides();
}
inline ::flyteidl::admin::PluginOverrides* MatchingAttributes::unsafe_arena_release_plugin_overrides() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.admin.MatchingAttributes.plugin_overrides)
  if (_internal_has_plugin_overrides()) {
    clear_has_target();
    ::flyteidl::admin::PluginOverrides* temp = target_.plugin_overrides_;
    target_.plugin_overrides_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MatchingAttributes::unsafe_arena_set_allocated_plugin_overrides(::flyteidl::admin::PluginOverrides* plugin_overrides) {
  clear_target();
  if (plugin_overrides) {
    set_has_plugin_overrides();
    target_.plugin_overrides_ = plugin_overrides;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.MatchingAttributes.plugin_overrides)
}
inline ::flyteidl::admin::PluginOverrides* MatchingAttributes::_internal_mutable_plugin_overrides() {
  if (!_internal_has_plugin_overrides()) {
    clear_target();
    set_has_plugin_overrides();
    target_.plugin_overrides_ = CreateMaybeMessage< ::flyteidl::admin::PluginOverrides >(GetArenaForAllocation());
  }
  return target_.plugin_overrides_;
}
inline ::flyteidl::admin::PluginOverrides* MatchingAttributes::mutable_plugin_overrides() {
  ::flyteidl::admin::PluginOverrides* _msg = _internal_mutable_plugin_overrides();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchingAttributes.plugin_overrides)
  return _msg;
}

// .flyteidl.admin.WorkflowExecutionConfig workflow_execution_config = 7 [json_name = "workflowExecutionConfig"];
inline bool MatchingAttributes::_internal_has_workflow_execution_config() const {
  return target_case() == kWorkflowExecutionConfig;
}
inline bool MatchingAttributes::has_workflow_execution_config() const {
  return _internal_has_workflow_execution_config();
}
inline void MatchingAttributes::set_has_workflow_execution_config() {
  _oneof_case_[0] = kWorkflowExecutionConfig;
}
inline void MatchingAttributes::clear_workflow_execution_config() {
  if (_internal_has_workflow_execution_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete target_.workflow_execution_config_;
    }
    clear_has_target();
  }
}
inline ::flyteidl::admin::WorkflowExecutionConfig* MatchingAttributes::release_workflow_execution_config() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchingAttributes.workflow_execution_config)
  if (_internal_has_workflow_execution_config()) {
    clear_has_target();
      ::flyteidl::admin::WorkflowExecutionConfig* temp = target_.workflow_execution_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    target_.workflow_execution_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::WorkflowExecutionConfig& MatchingAttributes::_internal_workflow_execution_config() const {
  return _internal_has_workflow_execution_config()
      ? *target_.workflow_execution_config_
      : reinterpret_cast< ::flyteidl::admin::WorkflowExecutionConfig&>(::flyteidl::admin::_WorkflowExecutionConfig_default_instance_);
}
inline const ::flyteidl::admin::WorkflowExecutionConfig& MatchingAttributes::workflow_execution_config() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchingAttributes.workflow_execution_config)
  return _internal_workflow_execution_config();
}
inline ::flyteidl::admin::WorkflowExecutionConfig* MatchingAttributes::unsafe_arena_release_workflow_execution_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.admin.MatchingAttributes.workflow_execution_config)
  if (_internal_has_workflow_execution_config()) {
    clear_has_target();
    ::flyteidl::admin::WorkflowExecutionConfig* temp = target_.workflow_execution_config_;
    target_.workflow_execution_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MatchingAttributes::unsafe_arena_set_allocated_workflow_execution_config(::flyteidl::admin::WorkflowExecutionConfig* workflow_execution_config) {
  clear_target();
  if (workflow_execution_config) {
    set_has_workflow_execution_config();
    target_.workflow_execution_config_ = workflow_execution_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.MatchingAttributes.workflow_execution_config)
}
inline ::flyteidl::admin::WorkflowExecutionConfig* MatchingAttributes::_internal_mutable_workflow_execution_config() {
  if (!_internal_has_workflow_execution_config()) {
    clear_target();
    set_has_workflow_execution_config();
    target_.workflow_execution_config_ = CreateMaybeMessage< ::flyteidl::admin::WorkflowExecutionConfig >(GetArenaForAllocation());
  }
  return target_.workflow_execution_config_;
}
inline ::flyteidl::admin::WorkflowExecutionConfig* MatchingAttributes::mutable_workflow_execution_config() {
  ::flyteidl::admin::WorkflowExecutionConfig* _msg = _internal_mutable_workflow_execution_config();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchingAttributes.workflow_execution_config)
  return _msg;
}

// .flyteidl.admin.ClusterAssignment cluster_assignment = 8 [json_name = "clusterAssignment"];
inline bool MatchingAttributes::_internal_has_cluster_assignment() const {
  return target_case() == kClusterAssignment;
}
inline bool MatchingAttributes::has_cluster_assignment() const {
  return _internal_has_cluster_assignment();
}
inline void MatchingAttributes::set_has_cluster_assignment() {
  _oneof_case_[0] = kClusterAssignment;
}
inline ::flyteidl::admin::ClusterAssignment* MatchingAttributes::release_cluster_assignment() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchingAttributes.cluster_assignment)
  if (_internal_has_cluster_assignment()) {
    clear_has_target();
      ::flyteidl::admin::ClusterAssignment* temp = target_.cluster_assignment_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    target_.cluster_assignment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::ClusterAssignment& MatchingAttributes::_internal_cluster_assignment() const {
  return _internal_has_cluster_assignment()
      ? *target_.cluster_assignment_
      : reinterpret_cast< ::flyteidl::admin::ClusterAssignment&>(::flyteidl::admin::_ClusterAssignment_default_instance_);
}
inline const ::flyteidl::admin::ClusterAssignment& MatchingAttributes::cluster_assignment() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchingAttributes.cluster_assignment)
  return _internal_cluster_assignment();
}
inline ::flyteidl::admin::ClusterAssignment* MatchingAttributes::unsafe_arena_release_cluster_assignment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.admin.MatchingAttributes.cluster_assignment)
  if (_internal_has_cluster_assignment()) {
    clear_has_target();
    ::flyteidl::admin::ClusterAssignment* temp = target_.cluster_assignment_;
    target_.cluster_assignment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MatchingAttributes::unsafe_arena_set_allocated_cluster_assignment(::flyteidl::admin::ClusterAssignment* cluster_assignment) {
  clear_target();
  if (cluster_assignment) {
    set_has_cluster_assignment();
    target_.cluster_assignment_ = cluster_assignment;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.MatchingAttributes.cluster_assignment)
}
inline ::flyteidl::admin::ClusterAssignment* MatchingAttributes::_internal_mutable_cluster_assignment() {
  if (!_internal_has_cluster_assignment()) {
    clear_target();
    set_has_cluster_assignment();
    target_.cluster_assignment_ = CreateMaybeMessage< ::flyteidl::admin::ClusterAssignment >(GetArenaForAllocation());
  }
  return target_.cluster_assignment_;
}
inline ::flyteidl::admin::ClusterAssignment* MatchingAttributes::mutable_cluster_assignment() {
  ::flyteidl::admin::ClusterAssignment* _msg = _internal_mutable_cluster_assignment();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchingAttributes.cluster_assignment)
  return _msg;
}

inline bool MatchingAttributes::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void MatchingAttributes::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
inline MatchingAttributes::TargetCase MatchingAttributes::target_case() const {
  return MatchingAttributes::TargetCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MatchableAttributesConfiguration

// .flyteidl.admin.MatchingAttributes attributes = 1 [json_name = "attributes"];
inline bool MatchableAttributesConfiguration::_internal_has_attributes() const {
  return this != internal_default_instance() && attributes_ != nullptr;
}
inline bool MatchableAttributesConfiguration::has_attributes() const {
  return _internal_has_attributes();
}
inline void MatchableAttributesConfiguration::clear_attributes() {
  if (GetArenaForAllocation() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
}
inline const ::flyteidl::admin::MatchingAttributes& MatchableAttributesConfiguration::_internal_attributes() const {
  const ::flyteidl::admin::MatchingAttributes* p = attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::MatchingAttributes&>(
      ::flyteidl::admin::_MatchingAttributes_default_instance_);
}
inline const ::flyteidl::admin::MatchingAttributes& MatchableAttributesConfiguration::attributes() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchableAttributesConfiguration.attributes)
  return _internal_attributes();
}
inline void MatchableAttributesConfiguration::unsafe_arena_set_allocated_attributes(
    ::flyteidl::admin::MatchingAttributes* attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes_);
  }
  attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.MatchableAttributesConfiguration.attributes)
}
inline ::flyteidl::admin::MatchingAttributes* MatchableAttributesConfiguration::release_attributes() {
  
  ::flyteidl::admin::MatchingAttributes* temp = attributes_;
  attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::MatchingAttributes* MatchableAttributesConfiguration::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchableAttributesConfiguration.attributes)
  
  ::flyteidl::admin::MatchingAttributes* temp = attributes_;
  attributes_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::MatchingAttributes* MatchableAttributesConfiguration::_internal_mutable_attributes() {
  
  if (attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::MatchingAttributes>(GetArenaForAllocation());
    attributes_ = p;
  }
  return attributes_;
}
inline ::flyteidl::admin::MatchingAttributes* MatchableAttributesConfiguration::mutable_attributes() {
  ::flyteidl::admin::MatchingAttributes* _msg = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchableAttributesConfiguration.attributes)
  return _msg;
}
inline void MatchableAttributesConfiguration::set_allocated_attributes(::flyteidl::admin::MatchingAttributes* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attributes_;
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::MatchingAttributes>::GetOwningArena(attributes);
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.MatchableAttributesConfiguration.attributes)
}

// string domain = 2 [json_name = "domain"];
inline void MatchableAttributesConfiguration::clear_domain() {
  domain_.ClearToEmpty();
}
inline const std::string& MatchableAttributesConfiguration::domain() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchableAttributesConfiguration.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MatchableAttributesConfiguration::set_domain(ArgT0&& arg0, ArgT... args) {
 
 domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.MatchableAttributesConfiguration.domain)
}
inline std::string* MatchableAttributesConfiguration::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchableAttributesConfiguration.domain)
  return _s;
}
inline const std::string& MatchableAttributesConfiguration::_internal_domain() const {
  return domain_.Get();
}
inline void MatchableAttributesConfiguration::_internal_set_domain(const std::string& value) {
  
  domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MatchableAttributesConfiguration::_internal_mutable_domain() {
  
  return domain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MatchableAttributesConfiguration::release_domain() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchableAttributesConfiguration.domain)
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MatchableAttributesConfiguration::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (domain_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.MatchableAttributesConfiguration.domain)
}

// string project = 3 [json_name = "project"];
inline void MatchableAttributesConfiguration::clear_project() {
  project_.ClearToEmpty();
}
inline const std::string& MatchableAttributesConfiguration::project() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchableAttributesConfiguration.project)
  return _internal_project();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MatchableAttributesConfiguration::set_project(ArgT0&& arg0, ArgT... args) {
 
 project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.MatchableAttributesConfiguration.project)
}
inline std::string* MatchableAttributesConfiguration::mutable_project() {
  std::string* _s = _internal_mutable_project();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchableAttributesConfiguration.project)
  return _s;
}
inline const std::string& MatchableAttributesConfiguration::_internal_project() const {
  return project_.Get();
}
inline void MatchableAttributesConfiguration::_internal_set_project(const std::string& value) {
  
  project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MatchableAttributesConfiguration::_internal_mutable_project() {
  
  return project_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MatchableAttributesConfiguration::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchableAttributesConfiguration.project)
  return project_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MatchableAttributesConfiguration::set_allocated_project(std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (project_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    project_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.MatchableAttributesConfiguration.project)
}

// string workflow = 4 [json_name = "workflow"];
inline void MatchableAttributesConfiguration::clear_workflow() {
  workflow_.ClearToEmpty();
}
inline const std::string& MatchableAttributesConfiguration::workflow() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchableAttributesConfiguration.workflow)
  return _internal_workflow();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MatchableAttributesConfiguration::set_workflow(ArgT0&& arg0, ArgT... args) {
 
 workflow_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.MatchableAttributesConfiguration.workflow)
}
inline std::string* MatchableAttributesConfiguration::mutable_workflow() {
  std::string* _s = _internal_mutable_workflow();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchableAttributesConfiguration.workflow)
  return _s;
}
inline const std::string& MatchableAttributesConfiguration::_internal_workflow() const {
  return workflow_.Get();
}
inline void MatchableAttributesConfiguration::_internal_set_workflow(const std::string& value) {
  
  workflow_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MatchableAttributesConfiguration::_internal_mutable_workflow() {
  
  return workflow_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MatchableAttributesConfiguration::release_workflow() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchableAttributesConfiguration.workflow)
  return workflow_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MatchableAttributesConfiguration::set_allocated_workflow(std::string* workflow) {
  if (workflow != nullptr) {
    
  } else {
    
  }
  workflow_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (workflow_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    workflow_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.MatchableAttributesConfiguration.workflow)
}

// string launch_plan = 5 [json_name = "launchPlan"];
inline void MatchableAttributesConfiguration::clear_launch_plan() {
  launch_plan_.ClearToEmpty();
}
inline const std::string& MatchableAttributesConfiguration::launch_plan() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchableAttributesConfiguration.launch_plan)
  return _internal_launch_plan();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MatchableAttributesConfiguration::set_launch_plan(ArgT0&& arg0, ArgT... args) {
 
 launch_plan_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.MatchableAttributesConfiguration.launch_plan)
}
inline std::string* MatchableAttributesConfiguration::mutable_launch_plan() {
  std::string* _s = _internal_mutable_launch_plan();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchableAttributesConfiguration.launch_plan)
  return _s;
}
inline const std::string& MatchableAttributesConfiguration::_internal_launch_plan() const {
  return launch_plan_.Get();
}
inline void MatchableAttributesConfiguration::_internal_set_launch_plan(const std::string& value) {
  
  launch_plan_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MatchableAttributesConfiguration::_internal_mutable_launch_plan() {
  
  return launch_plan_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MatchableAttributesConfiguration::release_launch_plan() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchableAttributesConfiguration.launch_plan)
  return launch_plan_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MatchableAttributesConfiguration::set_allocated_launch_plan(std::string* launch_plan) {
  if (launch_plan != nullptr) {
    
  } else {
    
  }
  launch_plan_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), launch_plan,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (launch_plan_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    launch_plan_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.MatchableAttributesConfiguration.launch_plan)
}

// -------------------------------------------------------------------

// ListMatchableAttributesRequest

// .flyteidl.admin.MatchableResource resource_type = 1 [json_name = "resourceType"];
inline void ListMatchableAttributesRequest::clear_resource_type() {
  resource_type_ = 0;
}
inline ::flyteidl::admin::MatchableResource ListMatchableAttributesRequest::_internal_resource_type() const {
  return static_cast< ::flyteidl::admin::MatchableResource >(resource_type_);
}
inline ::flyteidl::admin::MatchableResource ListMatchableAttributesRequest::resource_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ListMatchableAttributesRequest.resource_type)
  return _internal_resource_type();
}
inline void ListMatchableAttributesRequest::_internal_set_resource_type(::flyteidl::admin::MatchableResource value) {
  
  resource_type_ = value;
}
inline void ListMatchableAttributesRequest::set_resource_type(::flyteidl::admin::MatchableResource value) {
  _internal_set_resource_type(value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.ListMatchableAttributesRequest.resource_type)
}

// -------------------------------------------------------------------

// ListMatchableAttributesResponse

// repeated .flyteidl.admin.MatchableAttributesConfiguration configurations = 1 [json_name = "configurations"];
inline int ListMatchableAttributesResponse::_internal_configurations_size() const {
  return configurations_.size();
}
inline int ListMatchableAttributesResponse::configurations_size() const {
  return _internal_configurations_size();
}
inline void ListMatchableAttributesResponse::clear_configurations() {
  configurations_.Clear();
}
inline ::flyteidl::admin::MatchableAttributesConfiguration* ListMatchableAttributesResponse::mutable_configurations(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ListMatchableAttributesResponse.configurations)
  return configurations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::MatchableAttributesConfiguration >*
ListMatchableAttributesResponse::mutable_configurations() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.ListMatchableAttributesResponse.configurations)
  return &configurations_;
}
inline const ::flyteidl::admin::MatchableAttributesConfiguration& ListMatchableAttributesResponse::_internal_configurations(int index) const {
  return configurations_.Get(index);
}
inline const ::flyteidl::admin::MatchableAttributesConfiguration& ListMatchableAttributesResponse::configurations(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ListMatchableAttributesResponse.configurations)
  return _internal_configurations(index);
}
inline ::flyteidl::admin::MatchableAttributesConfiguration* ListMatchableAttributesResponse::_internal_add_configurations() {
  return configurations_.Add();
}
inline ::flyteidl::admin::MatchableAttributesConfiguration* ListMatchableAttributesResponse::add_configurations() {
  ::flyteidl::admin::MatchableAttributesConfiguration* _add = _internal_add_configurations();
  // @@protoc_insertion_point(field_add:flyteidl.admin.ListMatchableAttributesResponse.configurations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::MatchableAttributesConfiguration >&
ListMatchableAttributesResponse::configurations() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.ListMatchableAttributesResponse.configurations)
  return configurations_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::flyteidl::admin::PluginOverride_MissingPluginBehavior> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::admin::PluginOverride_MissingPluginBehavior>() {
  return ::flyteidl::admin::PluginOverride_MissingPluginBehavior_descriptor();
}
template <> struct is_proto_enum< ::flyteidl::admin::MatchableResource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::admin::MatchableResource>() {
  return ::flyteidl::admin::MatchableResource_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2fmatchable_5fresource_2eproto
