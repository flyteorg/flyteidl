// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/event/event.proto

package com.flyteidl.event;

public interface TaskExecutionEventOrBuilder extends
    // @@protoc_insertion_point(interface_extends:flyteidl.event.TaskExecutionEvent)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * ID of the task. In combination with the retryAttempt this will indicate
   * the task execution uniquely for a given parent node execution.
   * </pre>
   *
   * <code>.flyteidl.core.Identifier task_id = 1 [json_name = "taskId"];</code>
   * @return Whether the taskId field is set.
   */
  boolean hasTaskId();
  /**
   * <pre>
   * ID of the task. In combination with the retryAttempt this will indicate
   * the task execution uniquely for a given parent node execution.
   * </pre>
   *
   * <code>.flyteidl.core.Identifier task_id = 1 [json_name = "taskId"];</code>
   * @return The taskId.
   */
  com.flyteidl.core.Identifier getTaskId();
  /**
   * <pre>
   * ID of the task. In combination with the retryAttempt this will indicate
   * the task execution uniquely for a given parent node execution.
   * </pre>
   *
   * <code>.flyteidl.core.Identifier task_id = 1 [json_name = "taskId"];</code>
   */
  com.flyteidl.core.IdentifierOrBuilder getTaskIdOrBuilder();

  /**
   * <pre>
   * A task execution is always kicked off by a node execution, the event consumer
   * will use the parent_id to relate the task to it's parent node execution
   * </pre>
   *
   * <code>.flyteidl.core.NodeExecutionIdentifier parent_node_execution_id = 2 [json_name = "parentNodeExecutionId"];</code>
   * @return Whether the parentNodeExecutionId field is set.
   */
  boolean hasParentNodeExecutionId();
  /**
   * <pre>
   * A task execution is always kicked off by a node execution, the event consumer
   * will use the parent_id to relate the task to it's parent node execution
   * </pre>
   *
   * <code>.flyteidl.core.NodeExecutionIdentifier parent_node_execution_id = 2 [json_name = "parentNodeExecutionId"];</code>
   * @return The parentNodeExecutionId.
   */
  com.flyteidl.core.NodeExecutionIdentifier getParentNodeExecutionId();
  /**
   * <pre>
   * A task execution is always kicked off by a node execution, the event consumer
   * will use the parent_id to relate the task to it's parent node execution
   * </pre>
   *
   * <code>.flyteidl.core.NodeExecutionIdentifier parent_node_execution_id = 2 [json_name = "parentNodeExecutionId"];</code>
   */
  com.flyteidl.core.NodeExecutionIdentifierOrBuilder getParentNodeExecutionIdOrBuilder();

  /**
   * <pre>
   * retry attempt number for this task, ie., 2 for the second attempt
   * </pre>
   *
   * <code>uint32 retry_attempt = 3 [json_name = "retryAttempt"];</code>
   * @return The retryAttempt.
   */
  int getRetryAttempt();

  /**
   * <pre>
   * Phase associated with the event
   * </pre>
   *
   * <code>.flyteidl.core.TaskExecution.Phase phase = 4 [json_name = "phase"];</code>
   * @return The enum numeric value on the wire for phase.
   */
  int getPhaseValue();
  /**
   * <pre>
   * Phase associated with the event
   * </pre>
   *
   * <code>.flyteidl.core.TaskExecution.Phase phase = 4 [json_name = "phase"];</code>
   * @return The phase.
   */
  com.flyteidl.core.TaskExecution.Phase getPhase();

  /**
   * <pre>
   * id of the process that sent this event, mainly for trace debugging
   * </pre>
   *
   * <code>string producer_id = 5 [json_name = "producerId"];</code>
   * @return The producerId.
   */
  java.lang.String getProducerId();
  /**
   * <pre>
   * id of the process that sent this event, mainly for trace debugging
   * </pre>
   *
   * <code>string producer_id = 5 [json_name = "producerId"];</code>
   * @return The bytes for producerId.
   */
  com.google.protobuf.ByteString
      getProducerIdBytes();

  /**
   * <pre>
   * log information for the task execution
   * </pre>
   *
   * <code>repeated .flyteidl.core.TaskLog logs = 6 [json_name = "logs"];</code>
   */
  java.util.List<com.flyteidl.core.TaskLog> 
      getLogsList();
  /**
   * <pre>
   * log information for the task execution
   * </pre>
   *
   * <code>repeated .flyteidl.core.TaskLog logs = 6 [json_name = "logs"];</code>
   */
  com.flyteidl.core.TaskLog getLogs(int index);
  /**
   * <pre>
   * log information for the task execution
   * </pre>
   *
   * <code>repeated .flyteidl.core.TaskLog logs = 6 [json_name = "logs"];</code>
   */
  int getLogsCount();
  /**
   * <pre>
   * log information for the task execution
   * </pre>
   *
   * <code>repeated .flyteidl.core.TaskLog logs = 6 [json_name = "logs"];</code>
   */
  java.util.List<? extends com.flyteidl.core.TaskLogOrBuilder> 
      getLogsOrBuilderList();
  /**
   * <pre>
   * log information for the task execution
   * </pre>
   *
   * <code>repeated .flyteidl.core.TaskLog logs = 6 [json_name = "logs"];</code>
   */
  com.flyteidl.core.TaskLogOrBuilder getLogsOrBuilder(
      int index);

  /**
   * <pre>
   * This timestamp represents when the original event occurred, it is generated
   * by the executor of the task.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp occurred_at = 7 [json_name = "occurredAt"];</code>
   * @return Whether the occurredAt field is set.
   */
  boolean hasOccurredAt();
  /**
   * <pre>
   * This timestamp represents when the original event occurred, it is generated
   * by the executor of the task.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp occurred_at = 7 [json_name = "occurredAt"];</code>
   * @return The occurredAt.
   */
  com.google.protobuf.Timestamp getOccurredAt();
  /**
   * <pre>
   * This timestamp represents when the original event occurred, it is generated
   * by the executor of the task.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp occurred_at = 7 [json_name = "occurredAt"];</code>
   */
  com.google.protobuf.TimestampOrBuilder getOccurredAtOrBuilder();

  /**
   * <pre>
   * URI of the input file, it encodes all the information
   * including Cloud source provider. ie., s3://...
   * </pre>
   *
   * <code>string input_uri = 8 [json_name = "inputUri"];</code>
   * @return The inputUri.
   */
  java.lang.String getInputUri();
  /**
   * <pre>
   * URI of the input file, it encodes all the information
   * including Cloud source provider. ie., s3://...
   * </pre>
   *
   * <code>string input_uri = 8 [json_name = "inputUri"];</code>
   * @return The bytes for inputUri.
   */
  com.google.protobuf.ByteString
      getInputUriBytes();

  /**
   * <pre>
   * URI to the output of the execution, it will be in a format that encodes all the information
   * including Cloud source provider. ie., s3://...
   * </pre>
   *
   * <code>string output_uri = 9 [json_name = "outputUri"];</code>
   * @return Whether the outputUri field is set.
   */
  boolean hasOutputUri();
  /**
   * <pre>
   * URI to the output of the execution, it will be in a format that encodes all the information
   * including Cloud source provider. ie., s3://...
   * </pre>
   *
   * <code>string output_uri = 9 [json_name = "outputUri"];</code>
   * @return The outputUri.
   */
  java.lang.String getOutputUri();
  /**
   * <pre>
   * URI to the output of the execution, it will be in a format that encodes all the information
   * including Cloud source provider. ie., s3://...
   * </pre>
   *
   * <code>string output_uri = 9 [json_name = "outputUri"];</code>
   * @return The bytes for outputUri.
   */
  com.google.protobuf.ByteString
      getOutputUriBytes();

  /**
   * <pre>
   * Error information for the execution
   * </pre>
   *
   * <code>.flyteidl.core.ExecutionError error = 10 [json_name = "error"];</code>
   * @return Whether the error field is set.
   */
  boolean hasError();
  /**
   * <pre>
   * Error information for the execution
   * </pre>
   *
   * <code>.flyteidl.core.ExecutionError error = 10 [json_name = "error"];</code>
   * @return The error.
   */
  com.flyteidl.core.ExecutionError getError();
  /**
   * <pre>
   * Error information for the execution
   * </pre>
   *
   * <code>.flyteidl.core.ExecutionError error = 10 [json_name = "error"];</code>
   */
  com.flyteidl.core.ExecutionErrorOrBuilder getErrorOrBuilder();

  /**
   * <pre>
   * Raw output data produced by this task execution.
   * </pre>
   *
   * <code>.flyteidl.core.LiteralMap output_data = 17 [json_name = "outputData"];</code>
   * @return Whether the outputData field is set.
   */
  boolean hasOutputData();
  /**
   * <pre>
   * Raw output data produced by this task execution.
   * </pre>
   *
   * <code>.flyteidl.core.LiteralMap output_data = 17 [json_name = "outputData"];</code>
   * @return The outputData.
   */
  com.flyteidl.core.LiteralMap getOutputData();
  /**
   * <pre>
   * Raw output data produced by this task execution.
   * </pre>
   *
   * <code>.flyteidl.core.LiteralMap output_data = 17 [json_name = "outputData"];</code>
   */
  com.flyteidl.core.LiteralMapOrBuilder getOutputDataOrBuilder();

  /**
   * <pre>
   * Custom data that the task plugin sends back. This is extensible to allow various plugins in the system.
   * </pre>
   *
   * <code>.google.protobuf.Struct custom_info = 11 [json_name = "customInfo"];</code>
   * @return Whether the customInfo field is set.
   */
  boolean hasCustomInfo();
  /**
   * <pre>
   * Custom data that the task plugin sends back. This is extensible to allow various plugins in the system.
   * </pre>
   *
   * <code>.google.protobuf.Struct custom_info = 11 [json_name = "customInfo"];</code>
   * @return The customInfo.
   */
  com.google.protobuf.Struct getCustomInfo();
  /**
   * <pre>
   * Custom data that the task plugin sends back. This is extensible to allow various plugins in the system.
   * </pre>
   *
   * <code>.google.protobuf.Struct custom_info = 11 [json_name = "customInfo"];</code>
   */
  com.google.protobuf.StructOrBuilder getCustomInfoOrBuilder();

  /**
   * <pre>
   * Some phases, like RUNNING, can send multiple events with changed metadata (new logs, additional custom_info, etc)
   * that should be recorded regardless of the lack of phase change.
   * The version field should be incremented when metadata changes across the duration of an individual phase.
   * </pre>
   *
   * <code>uint32 phase_version = 12 [json_name = "phaseVersion"];</code>
   * @return The phaseVersion.
   */
  int getPhaseVersion();

  /**
   * <pre>
   * An optional explanation for the phase transition.
   * </pre>
   *
   * <code>string reason = 13 [json_name = "reason"];</code>
   * @return The reason.
   */
  java.lang.String getReason();
  /**
   * <pre>
   * An optional explanation for the phase transition.
   * </pre>
   *
   * <code>string reason = 13 [json_name = "reason"];</code>
   * @return The bytes for reason.
   */
  com.google.protobuf.ByteString
      getReasonBytes();

  /**
   * <pre>
   * A predefined yet extensible Task type identifier. If the task definition is already registered in flyte admin
   * this type will be identical, but not all task executions necessarily use pre-registered definitions and this
   * type is useful to render the task in the UI, filter task executions, etc.
   * </pre>
   *
   * <code>string task_type = 14 [json_name = "taskType"];</code>
   * @return The taskType.
   */
  java.lang.String getTaskType();
  /**
   * <pre>
   * A predefined yet extensible Task type identifier. If the task definition is already registered in flyte admin
   * this type will be identical, but not all task executions necessarily use pre-registered definitions and this
   * type is useful to render the task in the UI, filter task executions, etc.
   * </pre>
   *
   * <code>string task_type = 14 [json_name = "taskType"];</code>
   * @return The bytes for taskType.
   */
  com.google.protobuf.ByteString
      getTaskTypeBytes();

  /**
   * <pre>
   * Metadata around how a task was executed.
   * </pre>
   *
   * <code>.flyteidl.event.TaskExecutionMetadata metadata = 16 [json_name = "metadata"];</code>
   * @return Whether the metadata field is set.
   */
  boolean hasMetadata();
  /**
   * <pre>
   * Metadata around how a task was executed.
   * </pre>
   *
   * <code>.flyteidl.event.TaskExecutionMetadata metadata = 16 [json_name = "metadata"];</code>
   * @return The metadata.
   */
  com.flyteidl.event.TaskExecutionMetadata getMetadata();
  /**
   * <pre>
   * Metadata around how a task was executed.
   * </pre>
   *
   * <code>.flyteidl.event.TaskExecutionMetadata metadata = 16 [json_name = "metadata"];</code>
   */
  com.flyteidl.event.TaskExecutionMetadataOrBuilder getMetadataOrBuilder();

  /**
   * <pre>
   * The event version is used to indicate versioned changes in how data is reported using this
   * proto message. For example, event_verison &gt; 0 means that maps tasks report logs using the
   * TaskExecutionMetadata ExternalResourceInfo fields for each subtask rather than the TaskLog
   * in this message.
   * </pre>
   *
   * <code>int32 event_version = 18 [json_name = "eventVersion"];</code>
   * @return The eventVersion.
   */
  int getEventVersion();

  public com.flyteidl.event.TaskExecutionEvent.OutputResultCase getOutputResultCase();
}
