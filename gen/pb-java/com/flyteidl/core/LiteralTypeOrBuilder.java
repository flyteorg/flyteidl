// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/types.proto

package com.flyteidl.core;

public interface LiteralTypeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:flyteidl.core.LiteralType)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * A simple type that can be compared one-to-one with another.
   * </pre>
   *
   * <code>.flyteidl.core.SimpleType simple = 1 [json_name = "simple"];</code>
   * @return Whether the simple field is set.
   */
  boolean hasSimple();
  /**
   * <pre>
   * A simple type that can be compared one-to-one with another.
   * </pre>
   *
   * <code>.flyteidl.core.SimpleType simple = 1 [json_name = "simple"];</code>
   * @return The enum numeric value on the wire for simple.
   */
  int getSimpleValue();
  /**
   * <pre>
   * A simple type that can be compared one-to-one with another.
   * </pre>
   *
   * <code>.flyteidl.core.SimpleType simple = 1 [json_name = "simple"];</code>
   * @return The simple.
   */
  com.flyteidl.core.SimpleType getSimple();

  /**
   * <pre>
   * A complex type that requires matching of inner fields.
   * </pre>
   *
   * <code>.flyteidl.core.SchemaType schema = 2 [json_name = "schema"];</code>
   * @return Whether the schema field is set.
   */
  boolean hasSchema();
  /**
   * <pre>
   * A complex type that requires matching of inner fields.
   * </pre>
   *
   * <code>.flyteidl.core.SchemaType schema = 2 [json_name = "schema"];</code>
   * @return The schema.
   */
  com.flyteidl.core.SchemaType getSchema();
  /**
   * <pre>
   * A complex type that requires matching of inner fields.
   * </pre>
   *
   * <code>.flyteidl.core.SchemaType schema = 2 [json_name = "schema"];</code>
   */
  com.flyteidl.core.SchemaTypeOrBuilder getSchemaOrBuilder();

  /**
   * <pre>
   * Defines the type of the value of a collection. Only homogeneous collections are allowed.
   * </pre>
   *
   * <code>.flyteidl.core.LiteralType collection_type = 3 [json_name = "collectionType"];</code>
   * @return Whether the collectionType field is set.
   */
  boolean hasCollectionType();
  /**
   * <pre>
   * Defines the type of the value of a collection. Only homogeneous collections are allowed.
   * </pre>
   *
   * <code>.flyteidl.core.LiteralType collection_type = 3 [json_name = "collectionType"];</code>
   * @return The collectionType.
   */
  com.flyteidl.core.LiteralType getCollectionType();
  /**
   * <pre>
   * Defines the type of the value of a collection. Only homogeneous collections are allowed.
   * </pre>
   *
   * <code>.flyteidl.core.LiteralType collection_type = 3 [json_name = "collectionType"];</code>
   */
  com.flyteidl.core.LiteralTypeOrBuilder getCollectionTypeOrBuilder();

  /**
   * <pre>
   * Defines the type of the value of a map type. The type of the key is always a string.
   * </pre>
   *
   * <code>.flyteidl.core.LiteralType map_value_type = 4 [json_name = "mapValueType"];</code>
   * @return Whether the mapValueType field is set.
   */
  boolean hasMapValueType();
  /**
   * <pre>
   * Defines the type of the value of a map type. The type of the key is always a string.
   * </pre>
   *
   * <code>.flyteidl.core.LiteralType map_value_type = 4 [json_name = "mapValueType"];</code>
   * @return The mapValueType.
   */
  com.flyteidl.core.LiteralType getMapValueType();
  /**
   * <pre>
   * Defines the type of the value of a map type. The type of the key is always a string.
   * </pre>
   *
   * <code>.flyteidl.core.LiteralType map_value_type = 4 [json_name = "mapValueType"];</code>
   */
  com.flyteidl.core.LiteralTypeOrBuilder getMapValueTypeOrBuilder();

  /**
   * <pre>
   * A blob might have specialized implementation details depending on associated metadata.
   * </pre>
   *
   * <code>.flyteidl.core.BlobType blob = 5 [json_name = "blob"];</code>
   * @return Whether the blob field is set.
   */
  boolean hasBlob();
  /**
   * <pre>
   * A blob might have specialized implementation details depending on associated metadata.
   * </pre>
   *
   * <code>.flyteidl.core.BlobType blob = 5 [json_name = "blob"];</code>
   * @return The blob.
   */
  com.flyteidl.core.BlobType getBlob();
  /**
   * <pre>
   * A blob might have specialized implementation details depending on associated metadata.
   * </pre>
   *
   * <code>.flyteidl.core.BlobType blob = 5 [json_name = "blob"];</code>
   */
  com.flyteidl.core.BlobTypeOrBuilder getBlobOrBuilder();

  /**
   * <pre>
   * Defines an enum with pre-defined string values.
   * </pre>
   *
   * <code>.flyteidl.core.EnumType enum_type = 7 [json_name = "enumType"];</code>
   * @return Whether the enumType field is set.
   */
  boolean hasEnumType();
  /**
   * <pre>
   * Defines an enum with pre-defined string values.
   * </pre>
   *
   * <code>.flyteidl.core.EnumType enum_type = 7 [json_name = "enumType"];</code>
   * @return The enumType.
   */
  com.flyteidl.core.EnumType getEnumType();
  /**
   * <pre>
   * Defines an enum with pre-defined string values.
   * </pre>
   *
   * <code>.flyteidl.core.EnumType enum_type = 7 [json_name = "enumType"];</code>
   */
  com.flyteidl.core.EnumTypeOrBuilder getEnumTypeOrBuilder();

  /**
   * <pre>
   * Generalized schema support
   * </pre>
   *
   * <code>.flyteidl.core.StructuredDatasetType structured_dataset_type = 8 [json_name = "structuredDatasetType"];</code>
   * @return Whether the structuredDatasetType field is set.
   */
  boolean hasStructuredDatasetType();
  /**
   * <pre>
   * Generalized schema support
   * </pre>
   *
   * <code>.flyteidl.core.StructuredDatasetType structured_dataset_type = 8 [json_name = "structuredDatasetType"];</code>
   * @return The structuredDatasetType.
   */
  com.flyteidl.core.StructuredDatasetType getStructuredDatasetType();
  /**
   * <pre>
   * Generalized schema support
   * </pre>
   *
   * <code>.flyteidl.core.StructuredDatasetType structured_dataset_type = 8 [json_name = "structuredDatasetType"];</code>
   */
  com.flyteidl.core.StructuredDatasetTypeOrBuilder getStructuredDatasetTypeOrBuilder();

  /**
   * <pre>
   * Defines an union type with pre-defined LiteralTypes.
   * </pre>
   *
   * <code>.flyteidl.core.UnionType union_type = 10 [json_name = "unionType"];</code>
   * @return Whether the unionType field is set.
   */
  boolean hasUnionType();
  /**
   * <pre>
   * Defines an union type with pre-defined LiteralTypes.
   * </pre>
   *
   * <code>.flyteidl.core.UnionType union_type = 10 [json_name = "unionType"];</code>
   * @return The unionType.
   */
  com.flyteidl.core.UnionType getUnionType();
  /**
   * <pre>
   * Defines an union type with pre-defined LiteralTypes.
   * </pre>
   *
   * <code>.flyteidl.core.UnionType union_type = 10 [json_name = "unionType"];</code>
   */
  com.flyteidl.core.UnionTypeOrBuilder getUnionTypeOrBuilder();

  /**
   * <pre>
   * This field contains type metadata that is descriptive of the type, but is NOT considered in type-checking.  This might be used by
   * consumers to identify special behavior or display extended information for the type.
   * </pre>
   *
   * <code>.google.protobuf.Struct metadata = 6 [json_name = "metadata"];</code>
   * @return Whether the metadata field is set.
   */
  boolean hasMetadata();
  /**
   * <pre>
   * This field contains type metadata that is descriptive of the type, but is NOT considered in type-checking.  This might be used by
   * consumers to identify special behavior or display extended information for the type.
   * </pre>
   *
   * <code>.google.protobuf.Struct metadata = 6 [json_name = "metadata"];</code>
   * @return The metadata.
   */
  com.google.protobuf.Struct getMetadata();
  /**
   * <pre>
   * This field contains type metadata that is descriptive of the type, but is NOT considered in type-checking.  This might be used by
   * consumers to identify special behavior or display extended information for the type.
   * </pre>
   *
   * <code>.google.protobuf.Struct metadata = 6 [json_name = "metadata"];</code>
   */
  com.google.protobuf.StructOrBuilder getMetadataOrBuilder();

  /**
   * <pre>
   * This field contains arbitrary data that might have special semantic
   * meaning for the client but does not effect internal flyte behavior.
   * </pre>
   *
   * <code>.flyteidl.core.TypeAnnotation annotation = 9 [json_name = "annotation"];</code>
   * @return Whether the annotation field is set.
   */
  boolean hasAnnotation();
  /**
   * <pre>
   * This field contains arbitrary data that might have special semantic
   * meaning for the client but does not effect internal flyte behavior.
   * </pre>
   *
   * <code>.flyteidl.core.TypeAnnotation annotation = 9 [json_name = "annotation"];</code>
   * @return The annotation.
   */
  com.flyteidl.core.TypeAnnotation getAnnotation();
  /**
   * <pre>
   * This field contains arbitrary data that might have special semantic
   * meaning for the client but does not effect internal flyte behavior.
   * </pre>
   *
   * <code>.flyteidl.core.TypeAnnotation annotation = 9 [json_name = "annotation"];</code>
   */
  com.flyteidl.core.TypeAnnotationOrBuilder getAnnotationOrBuilder();

  /**
   * <pre>
   * Hints to improve type matching.
   * </pre>
   *
   * <code>.flyteidl.core.TypeStructure structure = 11 [json_name = "structure"];</code>
   * @return Whether the structure field is set.
   */
  boolean hasStructure();
  /**
   * <pre>
   * Hints to improve type matching.
   * </pre>
   *
   * <code>.flyteidl.core.TypeStructure structure = 11 [json_name = "structure"];</code>
   * @return The structure.
   */
  com.flyteidl.core.TypeStructure getStructure();
  /**
   * <pre>
   * Hints to improve type matching.
   * </pre>
   *
   * <code>.flyteidl.core.TypeStructure structure = 11 [json_name = "structure"];</code>
   */
  com.flyteidl.core.TypeStructureOrBuilder getStructureOrBuilder();

  public com.flyteidl.core.LiteralType.TypeCase getTypeCase();
}
