// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/qubole.proto

#include "flyteidl/plugins/qubole.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace plugins {
constexpr HiveQuery::HiveQuery(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : query_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timeout_sec_(0u)
  , retrycount_(0u){}
struct HiveQueryDefaultTypeInternal {
  constexpr HiveQueryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HiveQueryDefaultTypeInternal() {}
  union {
    HiveQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HiveQueryDefaultTypeInternal _HiveQuery_default_instance_;
constexpr HiveQueryCollection::HiveQueryCollection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : queries_(){}
struct HiveQueryCollectionDefaultTypeInternal {
  constexpr HiveQueryCollectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HiveQueryCollectionDefaultTypeInternal() {}
  union {
    HiveQueryCollection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HiveQueryCollectionDefaultTypeInternal _HiveQueryCollection_default_instance_;
constexpr QuboleHiveJob::QuboleHiveJob(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_()
  , cluster_label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , query_collection_(nullptr)
  , query_(nullptr){}
struct QuboleHiveJobDefaultTypeInternal {
  constexpr QuboleHiveJobDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QuboleHiveJobDefaultTypeInternal() {}
  union {
    QuboleHiveJob _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QuboleHiveJobDefaultTypeInternal _QuboleHiveJob_default_instance_;
}  // namespace plugins
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fplugins_2fqubole_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fplugins_2fqubole_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fplugins_2fqubole_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fplugins_2fqubole_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::HiveQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::HiveQuery, query_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::HiveQuery, timeout_sec_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::HiveQuery, retrycount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::HiveQueryCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::HiveQueryCollection, queries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::QuboleHiveJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::QuboleHiveJob, cluster_label_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::QuboleHiveJob, query_collection_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::QuboleHiveJob, tags_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::QuboleHiveJob, query_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::plugins::HiveQuery)},
  { 9, -1, -1, sizeof(::flyteidl::plugins::HiveQueryCollection)},
  { 16, -1, -1, sizeof(::flyteidl::plugins::QuboleHiveJob)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::plugins::_HiveQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::plugins::_HiveQueryCollection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::plugins::_QuboleHiveJob_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fplugins_2fqubole_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035flyteidl/plugins/qubole.proto\022\020flyteid"
  "l.plugins\"b\n\tHiveQuery\022\024\n\005query\030\001 \001(\tR\005q"
  "uery\022\037\n\013timeout_sec\030\002 \001(\rR\ntimeoutSec\022\036\n"
  "\nretryCount\030\003 \001(\rR\nretryCount\"L\n\023HiveQue"
  "ryCollection\0225\n\007queries\030\002 \003(\0132\033.flyteidl"
  ".plugins.HiveQueryR\007queries\"\321\001\n\rQuboleHi"
  "veJob\022#\n\rcluster_label\030\001 \001(\tR\014clusterLab"
  "el\022T\n\020query_collection\030\002 \001(\0132%.flyteidl."
  "plugins.HiveQueryCollectionB\002\030\001R\017queryCo"
  "llection\022\022\n\004tags\030\003 \003(\tR\004tags\0221\n\005query\030\004 "
  "\001(\0132\033.flyteidl.plugins.HiveQueryR\005queryB"
  "\300\001\n\024com.flyteidl.pluginsB\013QuboleProtoH\002Z"
  "7github.com/flyteorg/flyteidl/gen/pb-go/"
  "flyteidl/plugins\370\001\000\242\002\003FPX\252\002\020Flyteidl.Plu"
  "gins\312\002\020Flyteidl\\Plugins\342\002\034Flyteidl\\Plugi"
  "ns\\GPBMetadata\352\002\021Flyteidl::Pluginsb\006prot"
  "o3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fplugins_2fqubole_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fplugins_2fqubole_2eproto = {
  false, false, 642, descriptor_table_protodef_flyteidl_2fplugins_2fqubole_2eproto, "flyteidl/plugins/qubole.proto", 
  &descriptor_table_flyteidl_2fplugins_2fqubole_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_flyteidl_2fplugins_2fqubole_2eproto::offsets,
  file_level_metadata_flyteidl_2fplugins_2fqubole_2eproto, file_level_enum_descriptors_flyteidl_2fplugins_2fqubole_2eproto, file_level_service_descriptors_flyteidl_2fplugins_2fqubole_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fplugins_2fqubole_2eproto_getter() {
  return &descriptor_table_flyteidl_2fplugins_2fqubole_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fplugins_2fqubole_2eproto(&descriptor_table_flyteidl_2fplugins_2fqubole_2eproto);
namespace flyteidl {
namespace plugins {

// ===================================================================

class HiveQuery::_Internal {
 public:
};

HiveQuery::HiveQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.plugins.HiveQuery)
}
HiveQuery::HiveQuery(const HiveQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_query().empty()) {
    query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_query(), 
      GetArenaForAllocation());
  }
  ::memcpy(&timeout_sec_, &from.timeout_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&retrycount_) -
    reinterpret_cast<char*>(&timeout_sec_)) + sizeof(retrycount_));
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.HiveQuery)
}

inline void HiveQuery::SharedCtor() {
query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timeout_sec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&retrycount_) -
    reinterpret_cast<char*>(&timeout_sec_)) + sizeof(retrycount_));
}

HiveQuery::~HiveQuery() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.HiveQuery)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HiveQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HiveQuery::ArenaDtor(void* object) {
  HiveQuery* _this = reinterpret_cast< HiveQuery* >(object);
  (void)_this;
}
void HiveQuery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HiveQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HiveQuery::InternalSwap(HiveQuery* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata HiveQuery::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fplugins_2fqubole_2eproto_getter, &descriptor_table_flyteidl_2fplugins_2fqubole_2eproto_once,
      file_level_metadata_flyteidl_2fplugins_2fqubole_2eproto[0]);
}

// ===================================================================

class HiveQueryCollection::_Internal {
 public:
};

HiveQueryCollection::HiveQueryCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  queries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.plugins.HiveQueryCollection)
}
HiveQueryCollection::HiveQueryCollection(const HiveQueryCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      queries_(from.queries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.HiveQueryCollection)
}

inline void HiveQueryCollection::SharedCtor() {
}

HiveQueryCollection::~HiveQueryCollection() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.HiveQueryCollection)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HiveQueryCollection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HiveQueryCollection::ArenaDtor(void* object) {
  HiveQueryCollection* _this = reinterpret_cast< HiveQueryCollection* >(object);
  (void)_this;
}
void HiveQueryCollection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HiveQueryCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HiveQueryCollection::InternalSwap(HiveQueryCollection* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata HiveQueryCollection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fplugins_2fqubole_2eproto_getter, &descriptor_table_flyteidl_2fplugins_2fqubole_2eproto_once,
      file_level_metadata_flyteidl_2fplugins_2fqubole_2eproto[1]);
}

// ===================================================================

class QuboleHiveJob::_Internal {
 public:
  static const ::flyteidl::plugins::HiveQueryCollection& query_collection(const QuboleHiveJob* msg);
  static const ::flyteidl::plugins::HiveQuery& query(const QuboleHiveJob* msg);
};

const ::flyteidl::plugins::HiveQueryCollection&
QuboleHiveJob::_Internal::query_collection(const QuboleHiveJob* msg) {
  return *msg->query_collection_;
}
const ::flyteidl::plugins::HiveQuery&
QuboleHiveJob::_Internal::query(const QuboleHiveJob* msg) {
  return *msg->query_;
}
QuboleHiveJob::QuboleHiveJob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tags_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.plugins.QuboleHiveJob)
}
QuboleHiveJob::QuboleHiveJob(const QuboleHiveJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cluster_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cluster_label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cluster_label().empty()) {
    cluster_label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cluster_label(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_query_collection()) {
    query_collection_ = new ::flyteidl::plugins::HiveQueryCollection(*from.query_collection_);
  } else {
    query_collection_ = nullptr;
  }
  if (from._internal_has_query()) {
    query_ = new ::flyteidl::plugins::HiveQuery(*from.query_);
  } else {
    query_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.QuboleHiveJob)
}

inline void QuboleHiveJob::SharedCtor() {
cluster_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cluster_label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&query_collection_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&query_) -
    reinterpret_cast<char*>(&query_collection_)) + sizeof(query_));
}

QuboleHiveJob::~QuboleHiveJob() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.QuboleHiveJob)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QuboleHiveJob::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cluster_label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete query_collection_;
  if (this != internal_default_instance()) delete query_;
}

void QuboleHiveJob::ArenaDtor(void* object) {
  QuboleHiveJob* _this = reinterpret_cast< QuboleHiveJob* >(object);
  (void)_this;
}
void QuboleHiveJob::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QuboleHiveJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QuboleHiveJob::InternalSwap(QuboleHiveJob* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata QuboleHiveJob::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fplugins_2fqubole_2eproto_getter, &descriptor_table_flyteidl_2fplugins_2fqubole_2eproto_once,
      file_level_metadata_flyteidl_2fplugins_2fqubole_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace plugins
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::HiveQuery* Arena::CreateMaybeMessage< ::flyteidl::plugins::HiveQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::plugins::HiveQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::HiveQueryCollection* Arena::CreateMaybeMessage< ::flyteidl::plugins::HiveQueryCollection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::plugins::HiveQueryCollection >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::QuboleHiveJob* Arena::CreateMaybeMessage< ::flyteidl::plugins::QuboleHiveJob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::plugins::QuboleHiveJob >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
