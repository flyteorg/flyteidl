// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/compiler.proto

package com.flyteidl.core;

public interface CompiledWorkflowClosureOrBuilder extends
    // @@protoc_insertion_point(interface_extends:flyteidl.core.CompiledWorkflowClosure)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   *+required
   * </pre>
   *
   * <code>.flyteidl.core.CompiledWorkflow primary = 1 [json_name = "primary"];</code>
   * @return Whether the primary field is set.
   */
  boolean hasPrimary();
  /**
   * <pre>
   *+required
   * </pre>
   *
   * <code>.flyteidl.core.CompiledWorkflow primary = 1 [json_name = "primary"];</code>
   * @return The primary.
   */
  com.flyteidl.core.CompiledWorkflow getPrimary();
  /**
   * <pre>
   *+required
   * </pre>
   *
   * <code>.flyteidl.core.CompiledWorkflow primary = 1 [json_name = "primary"];</code>
   */
  com.flyteidl.core.CompiledWorkflowOrBuilder getPrimaryOrBuilder();

  /**
   * <pre>
   * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
   * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
   * as an inlined workflow
   *+optional
   * </pre>
   *
   * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2 [json_name = "subWorkflows"];</code>
   */
  java.util.List<com.flyteidl.core.CompiledWorkflow> 
      getSubWorkflowsList();
  /**
   * <pre>
   * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
   * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
   * as an inlined workflow
   *+optional
   * </pre>
   *
   * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2 [json_name = "subWorkflows"];</code>
   */
  com.flyteidl.core.CompiledWorkflow getSubWorkflows(int index);
  /**
   * <pre>
   * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
   * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
   * as an inlined workflow
   *+optional
   * </pre>
   *
   * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2 [json_name = "subWorkflows"];</code>
   */
  int getSubWorkflowsCount();
  /**
   * <pre>
   * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
   * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
   * as an inlined workflow
   *+optional
   * </pre>
   *
   * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2 [json_name = "subWorkflows"];</code>
   */
  java.util.List<? extends com.flyteidl.core.CompiledWorkflowOrBuilder> 
      getSubWorkflowsOrBuilderList();
  /**
   * <pre>
   * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
   * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
   * as an inlined workflow
   *+optional
   * </pre>
   *
   * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2 [json_name = "subWorkflows"];</code>
   */
  com.flyteidl.core.CompiledWorkflowOrBuilder getSubWorkflowsOrBuilder(
      int index);

  /**
   * <pre>
   * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
   *+required (at least 1)
   * </pre>
   *
   * <code>repeated .flyteidl.core.CompiledTask tasks = 3 [json_name = "tasks"];</code>
   */
  java.util.List<com.flyteidl.core.CompiledTask> 
      getTasksList();
  /**
   * <pre>
   * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
   *+required (at least 1)
   * </pre>
   *
   * <code>repeated .flyteidl.core.CompiledTask tasks = 3 [json_name = "tasks"];</code>
   */
  com.flyteidl.core.CompiledTask getTasks(int index);
  /**
   * <pre>
   * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
   *+required (at least 1)
   * </pre>
   *
   * <code>repeated .flyteidl.core.CompiledTask tasks = 3 [json_name = "tasks"];</code>
   */
  int getTasksCount();
  /**
   * <pre>
   * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
   *+required (at least 1)
   * </pre>
   *
   * <code>repeated .flyteidl.core.CompiledTask tasks = 3 [json_name = "tasks"];</code>
   */
  java.util.List<? extends com.flyteidl.core.CompiledTaskOrBuilder> 
      getTasksOrBuilderList();
  /**
   * <pre>
   * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
   *+required (at least 1)
   * </pre>
   *
   * <code>repeated .flyteidl.core.CompiledTask tasks = 3 [json_name = "tasks"];</code>
   */
  com.flyteidl.core.CompiledTaskOrBuilder getTasksOrBuilder(
      int index);
}
