// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl/artifact/artifacts.proto

package artifact

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _artifacts_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Artifact with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Artifact) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetArtifactId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArtifactValidationError{
				field:  "ArtifactId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Uri

	if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArtifactValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ArtifactValidationError is the validation error returned by
// Artifact.Validate if the designated constraints aren't met.
type ArtifactValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArtifactValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArtifactValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArtifactValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArtifactValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArtifactValidationError) ErrorName() string { return "ArtifactValidationError" }

// Error satisfies the builtin error interface
func (e ArtifactValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArtifact.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArtifactValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArtifactValidationError{}

// Validate checks the field values on CreateArtifactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateArtifactRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetArtifactKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateArtifactRequestValidationError{
				field:  "ArtifactKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateArtifactRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateArtifactRequestValidationError is the validation error returned by
// CreateArtifactRequest.Validate if the designated constraints aren't met.
type CreateArtifactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArtifactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArtifactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArtifactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArtifactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArtifactRequestValidationError) ErrorName() string {
	return "CreateArtifactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateArtifactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArtifactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArtifactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArtifactRequestValidationError{}

// Validate checks the field values on ArtifactSpec with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ArtifactSpec) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArtifactSpecValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArtifactSpecValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ArtifactSpecValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAliases() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ArtifactSpecValidationError{
					field:  fmt.Sprintf("Aliases[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ShortDescription

	// no validation rules for LongDescription

	switch m.Source.(type) {

	case *ArtifactSpec_TaskExecution:

		if v, ok := interface{}(m.GetTaskExecution()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ArtifactSpecValidationError{
					field:  "TaskExecution",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ArtifactSpec_Execution:

		if v, ok := interface{}(m.GetExecution()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ArtifactSpecValidationError{
					field:  "Execution",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ArtifactSpec_Principal:
		// no validation rules for Principal

	}

	return nil
}

// ArtifactSpecValidationError is the validation error returned by
// ArtifactSpec.Validate if the designated constraints aren't met.
type ArtifactSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArtifactSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArtifactSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArtifactSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArtifactSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArtifactSpecValidationError) ErrorName() string { return "ArtifactSpecValidationError" }

// Error satisfies the builtin error interface
func (e ArtifactSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArtifactSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArtifactSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArtifactSpecValidationError{}

// Validate checks the field values on CreateArtifactResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateArtifactResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetArtifact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateArtifactResponseValidationError{
				field:  "Artifact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateArtifactResponseValidationError is the validation error returned by
// CreateArtifactResponse.Validate if the designated constraints aren't met.
type CreateArtifactResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArtifactResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArtifactResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArtifactResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArtifactResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArtifactResponseValidationError) ErrorName() string {
	return "CreateArtifactResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateArtifactResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArtifactResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArtifactResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArtifactResponseValidationError{}

// Validate checks the field values on GetArtifactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetArtifactRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Details

	switch m.Identifier.(type) {

	case *GetArtifactRequest_ArtifactKey:

		if v, ok := interface{}(m.GetArtifactKey()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetArtifactRequestValidationError{
					field:  "ArtifactKey",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetArtifactRequest_ArtifactId:

		if v, ok := interface{}(m.GetArtifactId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetArtifactRequestValidationError{
					field:  "ArtifactId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetArtifactRequest_Uri:
		// no validation rules for Uri

	case *GetArtifactRequest_Query:

		if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetArtifactRequestValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetArtifactRequestValidationError is the validation error returned by
// GetArtifactRequest.Validate if the designated constraints aren't met.
type GetArtifactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArtifactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArtifactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArtifactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArtifactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArtifactRequestValidationError) ErrorName() string {
	return "GetArtifactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetArtifactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArtifactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArtifactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArtifactRequestValidationError{}

// Validate checks the field values on GetArtifactResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetArtifactResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetArtifact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetArtifactResponseValidationError{
				field:  "Artifact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetArtifactResponseValidationError is the validation error returned by
// GetArtifactResponse.Validate if the designated constraints aren't met.
type GetArtifactResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArtifactResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArtifactResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArtifactResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArtifactResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArtifactResponseValidationError) ErrorName() string {
	return "GetArtifactResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetArtifactResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArtifactResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArtifactResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArtifactResponseValidationError{}

// Validate checks the field values on Tag with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Tag) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	// no validation rules for Value

	return nil
}

// TagValidationError is the validation error returned by Tag.Validate if the
// designated constraints aren't met.
type TagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagValidationError) ErrorName() string { return "TagValidationError" }

// Error satisfies the builtin error interface
func (e TagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagValidationError{}

// Validate checks the field values on AddTagsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AddTagsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetArtifactId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddTagsRequestValidationError{
				field:  "ArtifactId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddTagsRequestValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AddTagsRequestValidationError is the validation error returned by
// AddTagsRequest.Validate if the designated constraints aren't met.
type AddTagsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddTagsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddTagsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddTagsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddTagsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddTagsRequestValidationError) ErrorName() string { return "AddTagsRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddTagsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddTagsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddTagsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddTagsRequestValidationError{}

// Validate checks the field values on AddTagsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddTagsResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// AddTagsResponseValidationError is the validation error returned by
// AddTagsResponse.Validate if the designated constraints aren't met.
type AddTagsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddTagsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddTagsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddTagsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddTagsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddTagsResponseValidationError) ErrorName() string { return "AddTagsResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddTagsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddTagsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddTagsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddTagsResponseValidationError{}

// Validate checks the field values on RemoveTagsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RemoveTagsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetArtifactId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveTagsRequestValidationError{
				field:  "ArtifactId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RemoveTagsRequestValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RemoveTagsRequestValidationError is the validation error returned by
// RemoveTagsRequest.Validate if the designated constraints aren't met.
type RemoveTagsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveTagsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveTagsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveTagsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveTagsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveTagsRequestValidationError) ErrorName() string {
	return "RemoveTagsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveTagsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveTagsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveTagsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveTagsRequestValidationError{}

// Validate checks the field values on RemoveTagsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveTagsResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveTagsResponseValidationError is the validation error returned by
// RemoveTagsResponse.Validate if the designated constraints aren't met.
type RemoveTagsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveTagsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveTagsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveTagsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveTagsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveTagsResponseValidationError) ErrorName() string {
	return "RemoveTagsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveTagsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveTagsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveTagsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveTagsResponseValidationError{}

// Validate checks the field values on ListArtifactNamesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListArtifactNamesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Project

	// no validation rules for Domain

	return nil
}

// ListArtifactNamesRequestValidationError is the validation error returned by
// ListArtifactNamesRequest.Validate if the designated constraints aren't met.
type ListArtifactNamesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListArtifactNamesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListArtifactNamesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListArtifactNamesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListArtifactNamesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListArtifactNamesRequestValidationError) ErrorName() string {
	return "ListArtifactNamesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListArtifactNamesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListArtifactNamesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListArtifactNamesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListArtifactNamesRequestValidationError{}

// Validate checks the field values on ListArtifactNamesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListArtifactNamesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetArtifactKeys() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListArtifactNamesResponseValidationError{
					field:  fmt.Sprintf("ArtifactKeys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListArtifactNamesResponseValidationError is the validation error returned by
// ListArtifactNamesResponse.Validate if the designated constraints aren't met.
type ListArtifactNamesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListArtifactNamesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListArtifactNamesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListArtifactNamesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListArtifactNamesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListArtifactNamesResponseValidationError) ErrorName() string {
	return "ListArtifactNamesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListArtifactNamesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListArtifactNamesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListArtifactNamesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListArtifactNamesResponseValidationError{}

// Validate checks the field values on ListArtifactsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListArtifactsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetArtifactKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListArtifactsRequestValidationError{
				field:  "ArtifactKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListArtifactsRequestValidationError is the validation error returned by
// ListArtifactsRequest.Validate if the designated constraints aren't met.
type ListArtifactsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListArtifactsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListArtifactsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListArtifactsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListArtifactsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListArtifactsRequestValidationError) ErrorName() string {
	return "ListArtifactsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListArtifactsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListArtifactsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListArtifactsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListArtifactsRequestValidationError{}

// Validate checks the field values on ListArtifactsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListArtifactsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetArtifacts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListArtifactsResponseValidationError{
					field:  fmt.Sprintf("Artifacts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListArtifactsResponseValidationError is the validation error returned by
// ListArtifactsResponse.Validate if the designated constraints aren't met.
type ListArtifactsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListArtifactsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListArtifactsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListArtifactsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListArtifactsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListArtifactsResponseValidationError) ErrorName() string {
	return "ListArtifactsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListArtifactsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListArtifactsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListArtifactsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListArtifactsResponseValidationError{}

// Validate checks the field values on CreateAliasRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAliasRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetArtifactKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAliasRequestValidationError{
				field:  "ArtifactKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAlias()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAliasRequestValidationError{
				field:  "Alias",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Overwrite

	return nil
}

// CreateAliasRequestValidationError is the validation error returned by
// CreateAliasRequest.Validate if the designated constraints aren't met.
type CreateAliasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAliasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAliasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAliasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAliasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAliasRequestValidationError) ErrorName() string {
	return "CreateAliasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAliasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAliasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAliasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAliasRequestValidationError{}

// Validate checks the field values on CreateAliasResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAliasResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateAliasResponseValidationError is the validation error returned by
// CreateAliasResponse.Validate if the designated constraints aren't met.
type CreateAliasResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAliasResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAliasResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAliasResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAliasResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAliasResponseValidationError) ErrorName() string {
	return "CreateAliasResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAliasResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAliasResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAliasResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAliasResponseValidationError{}

// Validate checks the field values on RemoveAliasRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveAliasRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetArtifactKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveAliasRequestValidationError{
				field:  "ArtifactKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAlias()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveAliasRequestValidationError{
				field:  "Alias",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveAliasRequestValidationError is the validation error returned by
// RemoveAliasRequest.Validate if the designated constraints aren't met.
type RemoveAliasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveAliasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveAliasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveAliasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveAliasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveAliasRequestValidationError) ErrorName() string {
	return "RemoveAliasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveAliasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveAliasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveAliasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveAliasRequestValidationError{}

// Validate checks the field values on RemoveAliasResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveAliasResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveAliasResponseValidationError is the validation error returned by
// RemoveAliasResponse.Validate if the designated constraints aren't met.
type RemoveAliasResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveAliasResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveAliasResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveAliasResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveAliasResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveAliasResponseValidationError) ErrorName() string {
	return "RemoveAliasResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveAliasResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveAliasResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveAliasResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveAliasResponseValidationError{}
