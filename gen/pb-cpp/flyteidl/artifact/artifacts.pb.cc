// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/artifact/artifacts.proto

#include "flyteidl/artifact/artifacts.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fartifact_2fartifacts_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Tag_flyteidl_2fartifact_2fartifacts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fartifact_2fartifacts_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Artifact_flyteidl_2fartifact_2fartifacts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fartifact_2fartifacts_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_ArtifactSpec_flyteidl_2fartifact_2fartifacts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ArtifactKey_flyteidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WorkflowExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ArtifactAlias_flyteidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ArtifactID_flyteidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ArtifactQuery_flyteidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TaskExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fliterals_2eproto ::google::protobuf::internal::SCCInfo<11> scc_info_Literal_flyteidl_2fcore_2fliterals_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2ftypes_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_LiteralType_flyteidl_2fcore_2ftypes_2eproto;
namespace flyteidl {
namespace artifact {
class ArtifactDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Artifact> _instance;
} _Artifact_default_instance_;
class CreateArtifactRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateArtifactRequest> _instance;
} _CreateArtifactRequest_default_instance_;
class ArtifactSpecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ArtifactSpec> _instance;
  const ::flyteidl::core::TaskExecutionIdentifier* task_execution_;
  const ::flyteidl::core::WorkflowExecutionIdentifier* execution_;
  ::google::protobuf::internal::ArenaStringPtr principal_;
} _ArtifactSpec_default_instance_;
class CreateArtifactResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateArtifactResponse> _instance;
} _CreateArtifactResponse_default_instance_;
class GetArtifactRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetArtifactRequest> _instance;
  const ::flyteidl::core::ArtifactKey* artifact_key_;
  const ::flyteidl::core::ArtifactID* artifact_id_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  const ::flyteidl::core::ArtifactQuery* query_;
} _GetArtifactRequest_default_instance_;
class GetArtifactResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetArtifactResponse> _instance;
} _GetArtifactResponse_default_instance_;
class TagDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tag> _instance;
} _Tag_default_instance_;
class AddTagsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddTagsRequest> _instance;
} _AddTagsRequest_default_instance_;
class AddTagsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddTagsResponse> _instance;
} _AddTagsResponse_default_instance_;
class RemoveTagsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RemoveTagsRequest> _instance;
} _RemoveTagsRequest_default_instance_;
class RemoveTagsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RemoveTagsResponse> _instance;
} _RemoveTagsResponse_default_instance_;
class ListArtifactNamesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListArtifactNamesRequest> _instance;
} _ListArtifactNamesRequest_default_instance_;
class ListArtifactNamesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListArtifactNamesResponse> _instance;
} _ListArtifactNamesResponse_default_instance_;
class ListArtifactsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListArtifactsRequest> _instance;
} _ListArtifactsRequest_default_instance_;
class ListArtifactsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListArtifactsResponse> _instance;
} _ListArtifactsResponse_default_instance_;
class CreateAliasRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateAliasRequest> _instance;
} _CreateAliasRequest_default_instance_;
class CreateAliasResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateAliasResponse> _instance;
} _CreateAliasResponse_default_instance_;
class RemoveAliasRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RemoveAliasRequest> _instance;
} _RemoveAliasRequest_default_instance_;
class RemoveAliasResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RemoveAliasResponse> _instance;
} _RemoveAliasResponse_default_instance_;
}  // namespace artifact
}  // namespace flyteidl
static void InitDefaultsArtifact_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_Artifact_default_instance_;
    new (ptr) ::flyteidl::artifact::Artifact();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::Artifact::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Artifact_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsArtifact_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_ArtifactID_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_ArtifactSpec_flyteidl_2fartifact_2fartifacts_2eproto.base,}};

static void InitDefaultsCreateArtifactRequest_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_CreateArtifactRequest_default_instance_;
    new (ptr) ::flyteidl::artifact::CreateArtifactRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::CreateArtifactRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CreateArtifactRequest_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCreateArtifactRequest_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_ArtifactKey_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_ArtifactSpec_flyteidl_2fartifact_2fartifacts_2eproto.base,}};

static void InitDefaultsArtifactSpec_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_ArtifactSpec_default_instance_;
    new (ptr) ::flyteidl::artifact::ArtifactSpec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::ArtifactSpec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_ArtifactSpec_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsArtifactSpec_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_Literal_flyteidl_2fcore_2fliterals_2eproto.base,
      &scc_info_LiteralType_flyteidl_2fcore_2ftypes_2eproto.base,
      &scc_info_Tag_flyteidl_2fartifact_2fartifacts_2eproto.base,
      &scc_info_ArtifactAlias_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_TaskExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_WorkflowExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsCreateArtifactResponse_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_CreateArtifactResponse_default_instance_;
    new (ptr) ::flyteidl::artifact::CreateArtifactResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::CreateArtifactResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CreateArtifactResponse_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCreateArtifactResponse_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_Artifact_flyteidl_2fartifact_2fartifacts_2eproto.base,}};

static void InitDefaultsGetArtifactRequest_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_GetArtifactRequest_default_instance_;
    new (ptr) ::flyteidl::artifact::GetArtifactRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::GetArtifactRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_GetArtifactRequest_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsGetArtifactRequest_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_ArtifactKey_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_ArtifactID_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_ArtifactQuery_flyteidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsGetArtifactResponse_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_GetArtifactResponse_default_instance_;
    new (ptr) ::flyteidl::artifact::GetArtifactResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::GetArtifactResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetArtifactResponse_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetArtifactResponse_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_Artifact_flyteidl_2fartifact_2fartifacts_2eproto.base,}};

static void InitDefaultsTag_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_Tag_default_instance_;
    new (ptr) ::flyteidl::artifact::Tag();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::Tag::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Tag_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTag_flyteidl_2fartifact_2fartifacts_2eproto}, {}};

static void InitDefaultsAddTagsRequest_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_AddTagsRequest_default_instance_;
    new (ptr) ::flyteidl::artifact::AddTagsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::AddTagsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AddTagsRequest_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAddTagsRequest_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_ArtifactID_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_Tag_flyteidl_2fartifact_2fartifacts_2eproto.base,}};

static void InitDefaultsAddTagsResponse_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_AddTagsResponse_default_instance_;
    new (ptr) ::flyteidl::artifact::AddTagsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::AddTagsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AddTagsResponse_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAddTagsResponse_flyteidl_2fartifact_2fartifacts_2eproto}, {}};

static void InitDefaultsRemoveTagsRequest_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_RemoveTagsRequest_default_instance_;
    new (ptr) ::flyteidl::artifact::RemoveTagsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::RemoveTagsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RemoveTagsRequest_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRemoveTagsRequest_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_ArtifactID_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_Tag_flyteidl_2fartifact_2fartifacts_2eproto.base,}};

static void InitDefaultsRemoveTagsResponse_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_RemoveTagsResponse_default_instance_;
    new (ptr) ::flyteidl::artifact::RemoveTagsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::RemoveTagsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RemoveTagsResponse_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRemoveTagsResponse_flyteidl_2fartifact_2fartifacts_2eproto}, {}};

static void InitDefaultsListArtifactNamesRequest_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_ListArtifactNamesRequest_default_instance_;
    new (ptr) ::flyteidl::artifact::ListArtifactNamesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::ListArtifactNamesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListArtifactNamesRequest_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListArtifactNamesRequest_flyteidl_2fartifact_2fartifacts_2eproto}, {}};

static void InitDefaultsListArtifactNamesResponse_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_ListArtifactNamesResponse_default_instance_;
    new (ptr) ::flyteidl::artifact::ListArtifactNamesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::ListArtifactNamesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListArtifactNamesResponse_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListArtifactNamesResponse_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_ArtifactKey_flyteidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsListArtifactsRequest_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_ListArtifactsRequest_default_instance_;
    new (ptr) ::flyteidl::artifact::ListArtifactsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::ListArtifactsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListArtifactsRequest_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListArtifactsRequest_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_ArtifactKey_flyteidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsListArtifactsResponse_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_ListArtifactsResponse_default_instance_;
    new (ptr) ::flyteidl::artifact::ListArtifactsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::ListArtifactsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListArtifactsResponse_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListArtifactsResponse_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_Artifact_flyteidl_2fartifact_2fartifacts_2eproto.base,}};

static void InitDefaultsCreateAliasRequest_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_CreateAliasRequest_default_instance_;
    new (ptr) ::flyteidl::artifact::CreateAliasRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::CreateAliasRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CreateAliasRequest_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCreateAliasRequest_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_ArtifactKey_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_ArtifactAlias_flyteidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsCreateAliasResponse_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_CreateAliasResponse_default_instance_;
    new (ptr) ::flyteidl::artifact::CreateAliasResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::CreateAliasResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CreateAliasResponse_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCreateAliasResponse_flyteidl_2fartifact_2fartifacts_2eproto}, {}};

static void InitDefaultsRemoveAliasRequest_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_RemoveAliasRequest_default_instance_;
    new (ptr) ::flyteidl::artifact::RemoveAliasRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::RemoveAliasRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RemoveAliasRequest_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRemoveAliasRequest_flyteidl_2fartifact_2fartifacts_2eproto}, {
      &scc_info_ArtifactKey_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_ArtifactAlias_flyteidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsRemoveAliasResponse_flyteidl_2fartifact_2fartifacts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::artifact::_RemoveAliasResponse_default_instance_;
    new (ptr) ::flyteidl::artifact::RemoveAliasResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::artifact::RemoveAliasResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RemoveAliasResponse_flyteidl_2fartifact_2fartifacts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRemoveAliasResponse_flyteidl_2fartifact_2fartifacts_2eproto}, {}};

void InitDefaults_flyteidl_2fartifact_2fartifacts_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Artifact_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateArtifactRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ArtifactSpec_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateArtifactResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetArtifactRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetArtifactResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Tag_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddTagsRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddTagsResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RemoveTagsRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RemoveTagsResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListArtifactNamesRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListArtifactNamesResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListArtifactsRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListArtifactsResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateAliasRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateAliasResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RemoveAliasRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RemoveAliasResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[19];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fartifact_2fartifacts_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fartifact_2fartifacts_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fartifact_2fartifacts_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::Artifact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::Artifact, artifact_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::Artifact, uri_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::Artifact, spec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::CreateArtifactRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::CreateArtifactRequest, artifact_key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::CreateArtifactRequest, spec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ArtifactSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ArtifactSpec, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ArtifactSpec, value_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ArtifactSpec, type_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ArtifactSpec, tags_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ArtifactSpec, aliases_),
  offsetof(::flyteidl::artifact::ArtifactSpecDefaultTypeInternal, task_execution_),
  offsetof(::flyteidl::artifact::ArtifactSpecDefaultTypeInternal, execution_),
  offsetof(::flyteidl::artifact::ArtifactSpecDefaultTypeInternal, principal_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ArtifactSpec, short_description_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ArtifactSpec, long_description_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ArtifactSpec, source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::CreateArtifactResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::CreateArtifactResponse, artifact_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::GetArtifactRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::GetArtifactRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::artifact::GetArtifactRequestDefaultTypeInternal, artifact_key_),
  offsetof(::flyteidl::artifact::GetArtifactRequestDefaultTypeInternal, artifact_id_),
  offsetof(::flyteidl::artifact::GetArtifactRequestDefaultTypeInternal, uri_),
  offsetof(::flyteidl::artifact::GetArtifactRequestDefaultTypeInternal, query_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::GetArtifactRequest, details_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::GetArtifactRequest, identifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::GetArtifactResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::GetArtifactResponse, artifact_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::Tag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::Tag, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::Tag, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::AddTagsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::AddTagsRequest, artifact_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::AddTagsRequest, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::AddTagsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::RemoveTagsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::RemoveTagsRequest, artifact_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::RemoveTagsRequest, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::RemoveTagsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ListArtifactNamesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ListArtifactNamesRequest, project_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ListArtifactNamesRequest, domain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ListArtifactNamesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ListArtifactNamesResponse, artifact_keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ListArtifactsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ListArtifactsRequest, artifact_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ListArtifactsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::ListArtifactsResponse, artifacts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::CreateAliasRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::CreateAliasRequest, artifact_key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::CreateAliasRequest, alias_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::CreateAliasRequest, overwrite_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::CreateAliasResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::RemoveAliasRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::RemoveAliasRequest, artifact_key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::RemoveAliasRequest, alias_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::artifact::RemoveAliasResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::artifact::Artifact)},
  { 8, -1, sizeof(::flyteidl::artifact::CreateArtifactRequest)},
  { 15, -1, sizeof(::flyteidl::artifact::ArtifactSpec)},
  { 30, -1, sizeof(::flyteidl::artifact::CreateArtifactResponse)},
  { 36, -1, sizeof(::flyteidl::artifact::GetArtifactRequest)},
  { 47, -1, sizeof(::flyteidl::artifact::GetArtifactResponse)},
  { 53, -1, sizeof(::flyteidl::artifact::Tag)},
  { 60, -1, sizeof(::flyteidl::artifact::AddTagsRequest)},
  { 67, -1, sizeof(::flyteidl::artifact::AddTagsResponse)},
  { 72, -1, sizeof(::flyteidl::artifact::RemoveTagsRequest)},
  { 79, -1, sizeof(::flyteidl::artifact::RemoveTagsResponse)},
  { 84, -1, sizeof(::flyteidl::artifact::ListArtifactNamesRequest)},
  { 91, -1, sizeof(::flyteidl::artifact::ListArtifactNamesResponse)},
  { 97, -1, sizeof(::flyteidl::artifact::ListArtifactsRequest)},
  { 103, -1, sizeof(::flyteidl::artifact::ListArtifactsResponse)},
  { 109, -1, sizeof(::flyteidl::artifact::CreateAliasRequest)},
  { 117, -1, sizeof(::flyteidl::artifact::CreateAliasResponse)},
  { 122, -1, sizeof(::flyteidl::artifact::RemoveAliasRequest)},
  { 129, -1, sizeof(::flyteidl::artifact::RemoveAliasResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_Artifact_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_CreateArtifactRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_ArtifactSpec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_CreateArtifactResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_GetArtifactRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_GetArtifactResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_Tag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_AddTagsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_AddTagsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_RemoveTagsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_RemoveTagsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_ListArtifactNamesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_ListArtifactNamesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_ListArtifactsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_ListArtifactsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_CreateAliasRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_CreateAliasResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_RemoveAliasRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::artifact::_RemoveAliasResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto = {
  {}, AddDescriptors_flyteidl_2fartifact_2fartifacts_2eproto, "flyteidl/artifact/artifacts.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fartifact_2fartifacts_2eproto::offsets,
  file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto, 19, file_level_enum_descriptors_flyteidl_2fartifact_2fartifacts_2eproto, file_level_service_descriptors_flyteidl_2fartifact_2fartifacts_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fartifact_2fartifacts_2eproto[] =
  "\n!flyteidl/artifact/artifacts.proto\022\021fly"
  "teidl.artifact\032\034flyteidl/core/literals.p"
  "roto\032\031flyteidl/core/types.proto\032\036flyteid"
  "l/core/identifier.proto\"v\n\010Artifact\022.\n\013a"
  "rtifact_id\030\001 \001(\0132\031.flyteidl.core.Artifac"
  "tID\022\013\n\003uri\030\002 \001(\t\022-\n\004spec\030\003 \001(\0132\037.flyteid"
  "l.artifact.ArtifactSpec\"x\n\025CreateArtifac"
  "tRequest\0220\n\014artifact_key\030\001 \001(\0132\032.flyteid"
  "l.core.ArtifactKey\022-\n\004spec\030\002 \001(\0132\037.flyte"
  "idl.artifact.ArtifactSpec\"\213\003\n\014ArtifactSp"
  "ec\022%\n\005value\030\001 \001(\0132\026.flyteidl.core.Litera"
  "l\022(\n\004type\030\002 \001(\0132\032.flyteidl.core.LiteralT"
  "ype\022$\n\004tags\030\003 \003(\0132\026.flyteidl.artifact.Ta"
  "g\022-\n\007aliases\030\004 \003(\0132\034.flyteidl.core.Artif"
  "actAlias\022@\n\016task_execution\030\005 \001(\0132&.flyte"
  "idl.core.TaskExecutionIdentifierH\000\022\?\n\tex"
  "ecution\030\006 \001(\0132*.flyteidl.core.WorkflowEx"
  "ecutionIdentifierH\000\022\023\n\tprincipal\030\007 \001(\tH\000"
  "\022\031\n\021short_description\030\010 \001(\t\022\030\n\020long_desc"
  "ription\030\t \001(\tB\010\n\006source\"G\n\026CreateArtifac"
  "tResponse\022-\n\010artifact\030\001 \001(\0132\033.flyteidl.a"
  "rtifact.Artifact\"\327\001\n\022GetArtifactRequest\022"
  "2\n\014artifact_key\030\001 \001(\0132\032.flyteidl.core.Ar"
  "tifactKeyH\000\0220\n\013artifact_id\030\002 \001(\0132\031.flyte"
  "idl.core.ArtifactIDH\000\022\r\n\003uri\030\003 \001(\tH\000\022-\n\005"
  "query\030\004 \001(\0132\034.flyteidl.core.ArtifactQuer"
  "yH\000\022\017\n\007details\030\005 \001(\010B\014\n\nidentifier\"D\n\023Ge"
  "tArtifactResponse\022-\n\010artifact\030\001 \001(\0132\033.fl"
  "yteidl.artifact.Artifact\"!\n\003Tag\022\013\n\003key\030\001"
  " \001(\t\022\r\n\005value\030\002 \001(\t\"f\n\016AddTagsRequest\022.\n"
  "\013artifact_id\030\001 \001(\0132\031.flyteidl.core.Artif"
  "actID\022$\n\004tags\030\002 \003(\0132\026.flyteidl.artifact."
  "Tag\"\021\n\017AddTagsResponse\"i\n\021RemoveTagsRequ"
  "est\022.\n\013artifact_id\030\001 \001(\0132\031.flyteidl.core"
  ".ArtifactID\022$\n\004tags\030\002 \003(\0132\026.flyteidl.art"
  "ifact.Tag\"\024\n\022RemoveTagsResponse\";\n\030ListA"
  "rtifactNamesRequest\022\017\n\007project\030\001 \001(\t\022\016\n\006"
  "domain\030\002 \001(\t\"N\n\031ListArtifactNamesRespons"
  "e\0221\n\rartifact_keys\030\001 \003(\0132\032.flyteidl.core"
  ".ArtifactKey\"H\n\024ListArtifactsRequest\0220\n\014"
  "artifact_key\030\001 \001(\0132\032.flyteidl.core.Artif"
  "actKey\"G\n\025ListArtifactsResponse\022.\n\tartif"
  "acts\030\001 \003(\0132\033.flyteidl.artifact.Artifact\""
  "\206\001\n\022CreateAliasRequest\0220\n\014artifact_key\030\001"
  " \001(\0132\032.flyteidl.core.ArtifactKey\022+\n\005alia"
  "s\030\002 \001(\0132\034.flyteidl.core.ArtifactAlias\022\021\n"
  "\toverwrite\030\003 \001(\010\"\025\n\023CreateAliasResponse\""
  "s\n\022RemoveAliasRequest\0220\n\014artifact_key\030\001 "
  "\001(\0132\032.flyteidl.core.ArtifactKey\022+\n\005alias"
  "\030\002 \001(\0132\034.flyteidl.core.ArtifactAlias\"\025\n\023"
  "RemoveAliasResponse2\250\006\n\020ArtifactRegistry"
  "\022g\n\016CreateArtifact\022(.flyteidl.artifact.C"
  "reateArtifactRequest\032).flyteidl.artifact"
  ".CreateArtifactResponse\"\000\022^\n\013GetArtifact"
  "\022%.flyteidl.artifact.GetArtifactRequest\032"
  "&.flyteidl.artifact.GetArtifactResponse\""
  "\000\022p\n\021ListArtifactNames\022+.flyteidl.artifa"
  "ct.ListArtifactNamesRequest\032,.flyteidl.a"
  "rtifact.ListArtifactNamesResponse\"\000\022d\n\rL"
  "istArtifacts\022\'.flyteidl.artifact.ListArt"
  "ifactsRequest\032(.flyteidl.artifact.ListAr"
  "tifactsResponse\"\000\022V\n\013TagArtifact\022!.flyte"
  "idl.artifact.AddTagsRequest\032\".flyteidl.a"
  "rtifact.AddTagsResponse\"\000\022[\n\nRemoveTags\022"
  "$.flyteidl.artifact.RemoveTagsRequest\032%."
  "flyteidl.artifact.RemoveTagsResponse\"\000\022^"
  "\n\013CreateAlias\022%.flyteidl.artifact.Create"
  "AliasRequest\032&.flyteidl.artifact.CreateA"
  "liasResponse\"\000\022^\n\013RemoveAlias\022%.flyteidl"
  ".artifact.RemoveAliasRequest\032&.flyteidl."
  "artifact.RemoveAliasResponse\"\000B:Z8github"
  ".com/flyteorg/flyteidl/gen/pb-go/flyteid"
  "l/artifactb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fartifact_2fartifacts_2eproto = {
  false, InitDefaults_flyteidl_2fartifact_2fartifacts_2eproto, 
  descriptor_table_protodef_flyteidl_2fartifact_2fartifacts_2eproto,
  "flyteidl/artifact/artifacts.proto", &assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto, 2898,
};

void AddDescriptors_flyteidl_2fartifact_2fartifacts_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[3] =
  {
    ::AddDescriptors_flyteidl_2fcore_2fliterals_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2ftypes_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fidentifier_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fartifact_2fartifacts_2eproto, deps, 3);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fartifact_2fartifacts_2eproto = []() { AddDescriptors_flyteidl_2fartifact_2fartifacts_2eproto(); return true; }();
namespace flyteidl {
namespace artifact {

// ===================================================================

void Artifact::InitAsDefaultInstance() {
  ::flyteidl::artifact::_Artifact_default_instance_._instance.get_mutable()->artifact_id_ = const_cast< ::flyteidl::core::ArtifactID*>(
      ::flyteidl::core::ArtifactID::internal_default_instance());
  ::flyteidl::artifact::_Artifact_default_instance_._instance.get_mutable()->spec_ = const_cast< ::flyteidl::artifact::ArtifactSpec*>(
      ::flyteidl::artifact::ArtifactSpec::internal_default_instance());
}
class Artifact::HasBitSetters {
 public:
  static const ::flyteidl::core::ArtifactID& artifact_id(const Artifact* msg);
  static const ::flyteidl::artifact::ArtifactSpec& spec(const Artifact* msg);
};

const ::flyteidl::core::ArtifactID&
Artifact::HasBitSetters::artifact_id(const Artifact* msg) {
  return *msg->artifact_id_;
}
const ::flyteidl::artifact::ArtifactSpec&
Artifact::HasBitSetters::spec(const Artifact* msg) {
  return *msg->spec_;
}
void Artifact::clear_artifact_id() {
  if (GetArenaNoVirtual() == nullptr && artifact_id_ != nullptr) {
    delete artifact_id_;
  }
  artifact_id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Artifact::kArtifactIdFieldNumber;
const int Artifact::kUriFieldNumber;
const int Artifact::kSpecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Artifact::Artifact()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.Artifact)
}
Artifact::Artifact(const Artifact& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uri().size() > 0) {
    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  if (from.has_artifact_id()) {
    artifact_id_ = new ::flyteidl::core::ArtifactID(*from.artifact_id_);
  } else {
    artifact_id_ = nullptr;
  }
  if (from.has_spec()) {
    spec_ = new ::flyteidl::artifact::ArtifactSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.Artifact)
}

void Artifact::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Artifact_flyteidl_2fartifact_2fartifacts_2eproto.base);
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&artifact_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spec_) -
      reinterpret_cast<char*>(&artifact_id_)) + sizeof(spec_));
}

Artifact::~Artifact() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.Artifact)
  SharedDtor();
}

void Artifact::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete artifact_id_;
  if (this != internal_default_instance()) delete spec_;
}

void Artifact::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Artifact& Artifact::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Artifact_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void Artifact::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.Artifact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && artifact_id_ != nullptr) {
    delete artifact_id_;
  }
  artifact_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Artifact::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Artifact*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.ArtifactID artifact_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ArtifactID::_InternalParse;
        object = msg->mutable_artifact_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string uri = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.artifact.Artifact.uri");
        object = msg->mutable_uri();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.artifact.ArtifactSpec spec = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::artifact::ArtifactSpec::_InternalParse;
        object = msg->mutable_spec();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Artifact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.Artifact)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.ArtifactID artifact_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_artifact_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uri = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.artifact.Artifact.uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.artifact.ArtifactSpec spec = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.Artifact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.Artifact)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Artifact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.Artifact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactID artifact_id = 1;
  if (this->has_artifact_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::artifact_id(this), output);
  }

  // string uri = 2;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.Artifact.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uri(), output);
  }

  // .flyteidl.artifact.ArtifactSpec spec = 3;
  if (this->has_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::spec(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.Artifact)
}

::google::protobuf::uint8* Artifact::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.Artifact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactID artifact_id = 1;
  if (this->has_artifact_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::artifact_id(this), target);
  }

  // string uri = 2;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.Artifact.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uri(), target);
  }

  // .flyteidl.artifact.ArtifactSpec spec = 3;
  if (this->has_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::spec(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.Artifact)
  return target;
}

size_t Artifact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.Artifact)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 2;
  if (this->uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }

  // .flyteidl.core.ArtifactID artifact_id = 1;
  if (this->has_artifact_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *artifact_id_);
  }

  // .flyteidl.artifact.ArtifactSpec spec = 3;
  if (this->has_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Artifact::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.Artifact)
  GOOGLE_DCHECK_NE(&from, this);
  const Artifact* source =
      ::google::protobuf::DynamicCastToGenerated<Artifact>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.Artifact)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.Artifact)
    MergeFrom(*source);
  }
}

void Artifact::MergeFrom(const Artifact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.Artifact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uri().size() > 0) {

    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  if (from.has_artifact_id()) {
    mutable_artifact_id()->::flyteidl::core::ArtifactID::MergeFrom(from.artifact_id());
  }
  if (from.has_spec()) {
    mutable_spec()->::flyteidl::artifact::ArtifactSpec::MergeFrom(from.spec());
  }
}

void Artifact::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.Artifact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Artifact::CopyFrom(const Artifact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.Artifact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Artifact::IsInitialized() const {
  return true;
}

void Artifact::Swap(Artifact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Artifact::InternalSwap(Artifact* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uri_.Swap(&other->uri_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(artifact_id_, other->artifact_id_);
  swap(spec_, other->spec_);
}

::google::protobuf::Metadata Artifact::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateArtifactRequest::InitAsDefaultInstance() {
  ::flyteidl::artifact::_CreateArtifactRequest_default_instance_._instance.get_mutable()->artifact_key_ = const_cast< ::flyteidl::core::ArtifactKey*>(
      ::flyteidl::core::ArtifactKey::internal_default_instance());
  ::flyteidl::artifact::_CreateArtifactRequest_default_instance_._instance.get_mutable()->spec_ = const_cast< ::flyteidl::artifact::ArtifactSpec*>(
      ::flyteidl::artifact::ArtifactSpec::internal_default_instance());
}
class CreateArtifactRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::ArtifactKey& artifact_key(const CreateArtifactRequest* msg);
  static const ::flyteidl::artifact::ArtifactSpec& spec(const CreateArtifactRequest* msg);
};

const ::flyteidl::core::ArtifactKey&
CreateArtifactRequest::HasBitSetters::artifact_key(const CreateArtifactRequest* msg) {
  return *msg->artifact_key_;
}
const ::flyteidl::artifact::ArtifactSpec&
CreateArtifactRequest::HasBitSetters::spec(const CreateArtifactRequest* msg) {
  return *msg->spec_;
}
void CreateArtifactRequest::clear_artifact_key() {
  if (GetArenaNoVirtual() == nullptr && artifact_key_ != nullptr) {
    delete artifact_key_;
  }
  artifact_key_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateArtifactRequest::kArtifactKeyFieldNumber;
const int CreateArtifactRequest::kSpecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateArtifactRequest::CreateArtifactRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.CreateArtifactRequest)
}
CreateArtifactRequest::CreateArtifactRequest(const CreateArtifactRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_artifact_key()) {
    artifact_key_ = new ::flyteidl::core::ArtifactKey(*from.artifact_key_);
  } else {
    artifact_key_ = nullptr;
  }
  if (from.has_spec()) {
    spec_ = new ::flyteidl::artifact::ArtifactSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.CreateArtifactRequest)
}

void CreateArtifactRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateArtifactRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::memset(&artifact_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spec_) -
      reinterpret_cast<char*>(&artifact_key_)) + sizeof(spec_));
}

CreateArtifactRequest::~CreateArtifactRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.CreateArtifactRequest)
  SharedDtor();
}

void CreateArtifactRequest::SharedDtor() {
  if (this != internal_default_instance()) delete artifact_key_;
  if (this != internal_default_instance()) delete spec_;
}

void CreateArtifactRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateArtifactRequest& CreateArtifactRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateArtifactRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void CreateArtifactRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.CreateArtifactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && artifact_key_ != nullptr) {
    delete artifact_key_;
  }
  artifact_key_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateArtifactRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateArtifactRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.ArtifactKey artifact_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ArtifactKey::_InternalParse;
        object = msg->mutable_artifact_key();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.artifact.ArtifactSpec spec = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::artifact::ArtifactSpec::_InternalParse;
        object = msg->mutable_spec();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateArtifactRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.CreateArtifactRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.ArtifactKey artifact_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_artifact_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.artifact.ArtifactSpec spec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.CreateArtifactRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.CreateArtifactRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateArtifactRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.CreateArtifactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  if (this->has_artifact_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::artifact_key(this), output);
  }

  // .flyteidl.artifact.ArtifactSpec spec = 2;
  if (this->has_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::spec(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.CreateArtifactRequest)
}

::google::protobuf::uint8* CreateArtifactRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.CreateArtifactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  if (this->has_artifact_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::artifact_key(this), target);
  }

  // .flyteidl.artifact.ArtifactSpec spec = 2;
  if (this->has_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::spec(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.CreateArtifactRequest)
  return target;
}

size_t CreateArtifactRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.CreateArtifactRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  if (this->has_artifact_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *artifact_key_);
  }

  // .flyteidl.artifact.ArtifactSpec spec = 2;
  if (this->has_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateArtifactRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.CreateArtifactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateArtifactRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CreateArtifactRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.CreateArtifactRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.CreateArtifactRequest)
    MergeFrom(*source);
  }
}

void CreateArtifactRequest::MergeFrom(const CreateArtifactRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.CreateArtifactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_artifact_key()) {
    mutable_artifact_key()->::flyteidl::core::ArtifactKey::MergeFrom(from.artifact_key());
  }
  if (from.has_spec()) {
    mutable_spec()->::flyteidl::artifact::ArtifactSpec::MergeFrom(from.spec());
  }
}

void CreateArtifactRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.CreateArtifactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateArtifactRequest::CopyFrom(const CreateArtifactRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.CreateArtifactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateArtifactRequest::IsInitialized() const {
  return true;
}

void CreateArtifactRequest::Swap(CreateArtifactRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateArtifactRequest::InternalSwap(CreateArtifactRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(artifact_key_, other->artifact_key_);
  swap(spec_, other->spec_);
}

::google::protobuf::Metadata CreateArtifactRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ArtifactSpec::InitAsDefaultInstance() {
  ::flyteidl::artifact::_ArtifactSpec_default_instance_._instance.get_mutable()->value_ = const_cast< ::flyteidl::core::Literal*>(
      ::flyteidl::core::Literal::internal_default_instance());
  ::flyteidl::artifact::_ArtifactSpec_default_instance_._instance.get_mutable()->type_ = const_cast< ::flyteidl::core::LiteralType*>(
      ::flyteidl::core::LiteralType::internal_default_instance());
  ::flyteidl::artifact::_ArtifactSpec_default_instance_.task_execution_ = const_cast< ::flyteidl::core::TaskExecutionIdentifier*>(
      ::flyteidl::core::TaskExecutionIdentifier::internal_default_instance());
  ::flyteidl::artifact::_ArtifactSpec_default_instance_.execution_ = const_cast< ::flyteidl::core::WorkflowExecutionIdentifier*>(
      ::flyteidl::core::WorkflowExecutionIdentifier::internal_default_instance());
  ::flyteidl::artifact::_ArtifactSpec_default_instance_.principal_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
class ArtifactSpec::HasBitSetters {
 public:
  static const ::flyteidl::core::Literal& value(const ArtifactSpec* msg);
  static const ::flyteidl::core::LiteralType& type(const ArtifactSpec* msg);
  static const ::flyteidl::core::TaskExecutionIdentifier& task_execution(const ArtifactSpec* msg);
  static const ::flyteidl::core::WorkflowExecutionIdentifier& execution(const ArtifactSpec* msg);
};

const ::flyteidl::core::Literal&
ArtifactSpec::HasBitSetters::value(const ArtifactSpec* msg) {
  return *msg->value_;
}
const ::flyteidl::core::LiteralType&
ArtifactSpec::HasBitSetters::type(const ArtifactSpec* msg) {
  return *msg->type_;
}
const ::flyteidl::core::TaskExecutionIdentifier&
ArtifactSpec::HasBitSetters::task_execution(const ArtifactSpec* msg) {
  return *msg->source_.task_execution_;
}
const ::flyteidl::core::WorkflowExecutionIdentifier&
ArtifactSpec::HasBitSetters::execution(const ArtifactSpec* msg) {
  return *msg->source_.execution_;
}
void ArtifactSpec::clear_value() {
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
void ArtifactSpec::clear_type() {
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
void ArtifactSpec::clear_aliases() {
  aliases_.Clear();
}
void ArtifactSpec::set_allocated_task_execution(::flyteidl::core::TaskExecutionIdentifier* task_execution) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_source();
  if (task_execution) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task_execution = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task_execution, submessage_arena);
    }
    set_has_task_execution();
    source_.task_execution_ = task_execution;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.ArtifactSpec.task_execution)
}
void ArtifactSpec::clear_task_execution() {
  if (has_task_execution()) {
    delete source_.task_execution_;
    clear_has_source();
  }
}
void ArtifactSpec::set_allocated_execution(::flyteidl::core::WorkflowExecutionIdentifier* execution) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_source();
  if (execution) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      execution = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, execution, submessage_arena);
    }
    set_has_execution();
    source_.execution_ = execution;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.ArtifactSpec.execution)
}
void ArtifactSpec::clear_execution() {
  if (has_execution()) {
    delete source_.execution_;
    clear_has_source();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArtifactSpec::kValueFieldNumber;
const int ArtifactSpec::kTypeFieldNumber;
const int ArtifactSpec::kTagsFieldNumber;
const int ArtifactSpec::kAliasesFieldNumber;
const int ArtifactSpec::kTaskExecutionFieldNumber;
const int ArtifactSpec::kExecutionFieldNumber;
const int ArtifactSpec::kPrincipalFieldNumber;
const int ArtifactSpec::kShortDescriptionFieldNumber;
const int ArtifactSpec::kLongDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArtifactSpec::ArtifactSpec()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.ArtifactSpec)
}
ArtifactSpec::ArtifactSpec(const ArtifactSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      tags_(from.tags_),
      aliases_(from.aliases_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  short_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.short_description().size() > 0) {
    short_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.short_description_);
  }
  long_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.long_description().size() > 0) {
    long_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.long_description_);
  }
  if (from.has_value()) {
    value_ = new ::flyteidl::core::Literal(*from.value_);
  } else {
    value_ = nullptr;
  }
  if (from.has_type()) {
    type_ = new ::flyteidl::core::LiteralType(*from.type_);
  } else {
    type_ = nullptr;
  }
  clear_has_source();
  switch (from.source_case()) {
    case kTaskExecution: {
      mutable_task_execution()->::flyteidl::core::TaskExecutionIdentifier::MergeFrom(from.task_execution());
      break;
    }
    case kExecution: {
      mutable_execution()->::flyteidl::core::WorkflowExecutionIdentifier::MergeFrom(from.execution());
      break;
    }
    case kPrincipal: {
      set_principal(from.principal());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.ArtifactSpec)
}

void ArtifactSpec::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ArtifactSpec_flyteidl_2fartifact_2fartifacts_2eproto.base);
  short_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  long_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&value_)) + sizeof(type_));
  clear_has_source();
}

ArtifactSpec::~ArtifactSpec() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.ArtifactSpec)
  SharedDtor();
}

void ArtifactSpec::SharedDtor() {
  short_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  long_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete type_;
  if (has_source()) {
    clear_source();
  }
}

void ArtifactSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtifactSpec& ArtifactSpec::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ArtifactSpec_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void ArtifactSpec::clear_source() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.artifact.ArtifactSpec)
  switch (source_case()) {
    case kTaskExecution: {
      delete source_.task_execution_;
      break;
    }
    case kExecution: {
      delete source_.execution_;
      break;
    }
    case kPrincipal: {
      source_.principal_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SOURCE_NOT_SET;
}


void ArtifactSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.ArtifactSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  aliases_.Clear();
  short_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  long_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  clear_source();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ArtifactSpec::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ArtifactSpec*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.Literal value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Literal::_InternalParse;
        object = msg->mutable_value();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.LiteralType type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::LiteralType::_InternalParse;
        object = msg->mutable_type();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .flyteidl.artifact.Tag tags = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::artifact::Tag::_InternalParse;
          object = msg->add_tags();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .flyteidl.core.ArtifactAlias aliases = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::core::ArtifactAlias::_InternalParse;
          object = msg->add_aliases();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // .flyteidl.core.TaskExecutionIdentifier task_execution = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::TaskExecutionIdentifier::_InternalParse;
        object = msg->mutable_task_execution();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.WorkflowExecutionIdentifier execution = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::WorkflowExecutionIdentifier::_InternalParse;
        object = msg->mutable_execution();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string principal = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.artifact.ArtifactSpec.principal");
        object = msg->mutable_principal();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string short_description = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.artifact.ArtifactSpec.short_description");
        object = msg->mutable_short_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string long_description = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.artifact.ArtifactSpec.long_description");
        object = msg->mutable_long_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ArtifactSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.ArtifactSpec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Literal value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.LiteralType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.artifact.Tag tags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.core.ArtifactAlias aliases = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_aliases()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.TaskExecutionIdentifier task_execution = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_task_execution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.WorkflowExecutionIdentifier execution = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_execution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string principal = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_principal()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->principal().data(), static_cast<int>(this->principal().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.artifact.ArtifactSpec.principal"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string short_description = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_short_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->short_description().data(), static_cast<int>(this->short_description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.artifact.ArtifactSpec.short_description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string long_description = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_long_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->long_description().data(), static_cast<int>(this->long_description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.artifact.ArtifactSpec.long_description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.ArtifactSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.ArtifactSpec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ArtifactSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.ArtifactSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Literal value = 1;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::value(this), output);
  }

  // .flyteidl.core.LiteralType type = 2;
  if (this->has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::type(this), output);
  }

  // repeated .flyteidl.artifact.Tag tags = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->tags(static_cast<int>(i)),
      output);
  }

  // repeated .flyteidl.core.ArtifactAlias aliases = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->aliases_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->aliases(static_cast<int>(i)),
      output);
  }

  // .flyteidl.core.TaskExecutionIdentifier task_execution = 5;
  if (has_task_execution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::task_execution(this), output);
  }

  // .flyteidl.core.WorkflowExecutionIdentifier execution = 6;
  if (has_execution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::execution(this), output);
  }

  // string principal = 7;
  if (has_principal()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->principal().data(), static_cast<int>(this->principal().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.ArtifactSpec.principal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->principal(), output);
  }

  // string short_description = 8;
  if (this->short_description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->short_description().data(), static_cast<int>(this->short_description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.ArtifactSpec.short_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->short_description(), output);
  }

  // string long_description = 9;
  if (this->long_description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->long_description().data(), static_cast<int>(this->long_description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.ArtifactSpec.long_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->long_description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.ArtifactSpec)
}

::google::protobuf::uint8* ArtifactSpec::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.ArtifactSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Literal value = 1;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::value(this), target);
  }

  // .flyteidl.core.LiteralType type = 2;
  if (this->has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::type(this), target);
  }

  // repeated .flyteidl.artifact.Tag tags = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->tags(static_cast<int>(i)), target);
  }

  // repeated .flyteidl.core.ArtifactAlias aliases = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->aliases_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->aliases(static_cast<int>(i)), target);
  }

  // .flyteidl.core.TaskExecutionIdentifier task_execution = 5;
  if (has_task_execution()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::task_execution(this), target);
  }

  // .flyteidl.core.WorkflowExecutionIdentifier execution = 6;
  if (has_execution()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::execution(this), target);
  }

  // string principal = 7;
  if (has_principal()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->principal().data(), static_cast<int>(this->principal().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.ArtifactSpec.principal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->principal(), target);
  }

  // string short_description = 8;
  if (this->short_description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->short_description().data(), static_cast<int>(this->short_description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.ArtifactSpec.short_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->short_description(), target);
  }

  // string long_description = 9;
  if (this->long_description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->long_description().data(), static_cast<int>(this->long_description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.ArtifactSpec.long_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->long_description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.ArtifactSpec)
  return target;
}

size_t ArtifactSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.ArtifactSpec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.artifact.Tag tags = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->tags_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tags(static_cast<int>(i)));
    }
  }

  // repeated .flyteidl.core.ArtifactAlias aliases = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->aliases_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->aliases(static_cast<int>(i)));
    }
  }

  // string short_description = 8;
  if (this->short_description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->short_description());
  }

  // string long_description = 9;
  if (this->long_description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->long_description());
  }

  // .flyteidl.core.Literal value = 1;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .flyteidl.core.LiteralType type = 2;
  if (this->has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *type_);
  }

  switch (source_case()) {
    // .flyteidl.core.TaskExecutionIdentifier task_execution = 5;
    case kTaskExecution: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *source_.task_execution_);
      break;
    }
    // .flyteidl.core.WorkflowExecutionIdentifier execution = 6;
    case kExecution: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *source_.execution_);
      break;
    }
    // string principal = 7;
    case kPrincipal: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->principal());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtifactSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.ArtifactSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtifactSpec* source =
      ::google::protobuf::DynamicCastToGenerated<ArtifactSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.ArtifactSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.ArtifactSpec)
    MergeFrom(*source);
  }
}

void ArtifactSpec::MergeFrom(const ArtifactSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.ArtifactSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  aliases_.MergeFrom(from.aliases_);
  if (from.short_description().size() > 0) {

    short_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.short_description_);
  }
  if (from.long_description().size() > 0) {

    long_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.long_description_);
  }
  if (from.has_value()) {
    mutable_value()->::flyteidl::core::Literal::MergeFrom(from.value());
  }
  if (from.has_type()) {
    mutable_type()->::flyteidl::core::LiteralType::MergeFrom(from.type());
  }
  switch (from.source_case()) {
    case kTaskExecution: {
      mutable_task_execution()->::flyteidl::core::TaskExecutionIdentifier::MergeFrom(from.task_execution());
      break;
    }
    case kExecution: {
      mutable_execution()->::flyteidl::core::WorkflowExecutionIdentifier::MergeFrom(from.execution());
      break;
    }
    case kPrincipal: {
      set_principal(from.principal());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
}

void ArtifactSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.ArtifactSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactSpec::CopyFrom(const ArtifactSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.ArtifactSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactSpec::IsInitialized() const {
  return true;
}

void ArtifactSpec::Swap(ArtifactSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArtifactSpec::InternalSwap(ArtifactSpec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&tags_)->InternalSwap(CastToBase(&other->tags_));
  CastToBase(&aliases_)->InternalSwap(CastToBase(&other->aliases_));
  short_description_.Swap(&other->short_description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  long_description_.Swap(&other->long_description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(type_, other->type_);
  swap(source_, other->source_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata ArtifactSpec::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateArtifactResponse::InitAsDefaultInstance() {
  ::flyteidl::artifact::_CreateArtifactResponse_default_instance_._instance.get_mutable()->artifact_ = const_cast< ::flyteidl::artifact::Artifact*>(
      ::flyteidl::artifact::Artifact::internal_default_instance());
}
class CreateArtifactResponse::HasBitSetters {
 public:
  static const ::flyteidl::artifact::Artifact& artifact(const CreateArtifactResponse* msg);
};

const ::flyteidl::artifact::Artifact&
CreateArtifactResponse::HasBitSetters::artifact(const CreateArtifactResponse* msg) {
  return *msg->artifact_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateArtifactResponse::kArtifactFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateArtifactResponse::CreateArtifactResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.CreateArtifactResponse)
}
CreateArtifactResponse::CreateArtifactResponse(const CreateArtifactResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_artifact()) {
    artifact_ = new ::flyteidl::artifact::Artifact(*from.artifact_);
  } else {
    artifact_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.CreateArtifactResponse)
}

void CreateArtifactResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateArtifactResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  artifact_ = nullptr;
}

CreateArtifactResponse::~CreateArtifactResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.CreateArtifactResponse)
  SharedDtor();
}

void CreateArtifactResponse::SharedDtor() {
  if (this != internal_default_instance()) delete artifact_;
}

void CreateArtifactResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateArtifactResponse& CreateArtifactResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateArtifactResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void CreateArtifactResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.CreateArtifactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && artifact_ != nullptr) {
    delete artifact_;
  }
  artifact_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateArtifactResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateArtifactResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.artifact.Artifact artifact = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::artifact::Artifact::_InternalParse;
        object = msg->mutable_artifact();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateArtifactResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.CreateArtifactResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.artifact.Artifact artifact = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_artifact()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.CreateArtifactResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.CreateArtifactResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateArtifactResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.CreateArtifactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.artifact.Artifact artifact = 1;
  if (this->has_artifact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::artifact(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.CreateArtifactResponse)
}

::google::protobuf::uint8* CreateArtifactResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.CreateArtifactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.artifact.Artifact artifact = 1;
  if (this->has_artifact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::artifact(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.CreateArtifactResponse)
  return target;
}

size_t CreateArtifactResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.CreateArtifactResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.artifact.Artifact artifact = 1;
  if (this->has_artifact()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *artifact_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateArtifactResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.CreateArtifactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateArtifactResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CreateArtifactResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.CreateArtifactResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.CreateArtifactResponse)
    MergeFrom(*source);
  }
}

void CreateArtifactResponse::MergeFrom(const CreateArtifactResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.CreateArtifactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_artifact()) {
    mutable_artifact()->::flyteidl::artifact::Artifact::MergeFrom(from.artifact());
  }
}

void CreateArtifactResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.CreateArtifactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateArtifactResponse::CopyFrom(const CreateArtifactResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.CreateArtifactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateArtifactResponse::IsInitialized() const {
  return true;
}

void CreateArtifactResponse::Swap(CreateArtifactResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateArtifactResponse::InternalSwap(CreateArtifactResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(artifact_, other->artifact_);
}

::google::protobuf::Metadata CreateArtifactResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetArtifactRequest::InitAsDefaultInstance() {
  ::flyteidl::artifact::_GetArtifactRequest_default_instance_.artifact_key_ = const_cast< ::flyteidl::core::ArtifactKey*>(
      ::flyteidl::core::ArtifactKey::internal_default_instance());
  ::flyteidl::artifact::_GetArtifactRequest_default_instance_.artifact_id_ = const_cast< ::flyteidl::core::ArtifactID*>(
      ::flyteidl::core::ArtifactID::internal_default_instance());
  ::flyteidl::artifact::_GetArtifactRequest_default_instance_.uri_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::flyteidl::artifact::_GetArtifactRequest_default_instance_.query_ = const_cast< ::flyteidl::core::ArtifactQuery*>(
      ::flyteidl::core::ArtifactQuery::internal_default_instance());
}
class GetArtifactRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::ArtifactKey& artifact_key(const GetArtifactRequest* msg);
  static const ::flyteidl::core::ArtifactID& artifact_id(const GetArtifactRequest* msg);
  static const ::flyteidl::core::ArtifactQuery& query(const GetArtifactRequest* msg);
};

const ::flyteidl::core::ArtifactKey&
GetArtifactRequest::HasBitSetters::artifact_key(const GetArtifactRequest* msg) {
  return *msg->identifier_.artifact_key_;
}
const ::flyteidl::core::ArtifactID&
GetArtifactRequest::HasBitSetters::artifact_id(const GetArtifactRequest* msg) {
  return *msg->identifier_.artifact_id_;
}
const ::flyteidl::core::ArtifactQuery&
GetArtifactRequest::HasBitSetters::query(const GetArtifactRequest* msg) {
  return *msg->identifier_.query_;
}
void GetArtifactRequest::set_allocated_artifact_key(::flyteidl::core::ArtifactKey* artifact_key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_identifier();
  if (artifact_key) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      artifact_key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, artifact_key, submessage_arena);
    }
    set_has_artifact_key();
    identifier_.artifact_key_ = artifact_key;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.GetArtifactRequest.artifact_key)
}
void GetArtifactRequest::clear_artifact_key() {
  if (has_artifact_key()) {
    delete identifier_.artifact_key_;
    clear_has_identifier();
  }
}
void GetArtifactRequest::set_allocated_artifact_id(::flyteidl::core::ArtifactID* artifact_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_identifier();
  if (artifact_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      artifact_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, artifact_id, submessage_arena);
    }
    set_has_artifact_id();
    identifier_.artifact_id_ = artifact_id;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.GetArtifactRequest.artifact_id)
}
void GetArtifactRequest::clear_artifact_id() {
  if (has_artifact_id()) {
    delete identifier_.artifact_id_;
    clear_has_identifier();
  }
}
void GetArtifactRequest::set_allocated_query(::flyteidl::core::ArtifactQuery* query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_identifier();
  if (query) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      query = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    set_has_query();
    identifier_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.artifact.GetArtifactRequest.query)
}
void GetArtifactRequest::clear_query() {
  if (has_query()) {
    delete identifier_.query_;
    clear_has_identifier();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetArtifactRequest::kArtifactKeyFieldNumber;
const int GetArtifactRequest::kArtifactIdFieldNumber;
const int GetArtifactRequest::kUriFieldNumber;
const int GetArtifactRequest::kQueryFieldNumber;
const int GetArtifactRequest::kDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetArtifactRequest::GetArtifactRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.GetArtifactRequest)
}
GetArtifactRequest::GetArtifactRequest(const GetArtifactRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  details_ = from.details_;
  clear_has_identifier();
  switch (from.identifier_case()) {
    case kArtifactKey: {
      mutable_artifact_key()->::flyteidl::core::ArtifactKey::MergeFrom(from.artifact_key());
      break;
    }
    case kArtifactId: {
      mutable_artifact_id()->::flyteidl::core::ArtifactID::MergeFrom(from.artifact_id());
      break;
    }
    case kUri: {
      set_uri(from.uri());
      break;
    }
    case kQuery: {
      mutable_query()->::flyteidl::core::ArtifactQuery::MergeFrom(from.query());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.GetArtifactRequest)
}

void GetArtifactRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetArtifactRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  details_ = false;
  clear_has_identifier();
}

GetArtifactRequest::~GetArtifactRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.GetArtifactRequest)
  SharedDtor();
}

void GetArtifactRequest::SharedDtor() {
  if (has_identifier()) {
    clear_identifier();
  }
}

void GetArtifactRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetArtifactRequest& GetArtifactRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetArtifactRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void GetArtifactRequest::clear_identifier() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.artifact.GetArtifactRequest)
  switch (identifier_case()) {
    case kArtifactKey: {
      delete identifier_.artifact_key_;
      break;
    }
    case kArtifactId: {
      delete identifier_.artifact_id_;
      break;
    }
    case kUri: {
      identifier_.uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kQuery: {
      delete identifier_.query_;
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IDENTIFIER_NOT_SET;
}


void GetArtifactRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.GetArtifactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  details_ = false;
  clear_identifier();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetArtifactRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetArtifactRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.ArtifactKey artifact_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ArtifactKey::_InternalParse;
        object = msg->mutable_artifact_key();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.ArtifactID artifact_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ArtifactID::_InternalParse;
        object = msg->mutable_artifact_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string uri = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.artifact.GetArtifactRequest.uri");
        object = msg->mutable_uri();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.core.ArtifactQuery query = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ArtifactQuery::_InternalParse;
        object = msg->mutable_query();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool details = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_details(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetArtifactRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.GetArtifactRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.ArtifactKey artifact_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_artifact_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.ArtifactID artifact_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_artifact_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uri = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.artifact.GetArtifactRequest.uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.ArtifactQuery query = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool details = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &details_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.GetArtifactRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.GetArtifactRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetArtifactRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.GetArtifactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  if (has_artifact_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::artifact_key(this), output);
  }

  // .flyteidl.core.ArtifactID artifact_id = 2;
  if (has_artifact_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::artifact_id(this), output);
  }

  // string uri = 3;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.GetArtifactRequest.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uri(), output);
  }

  // .flyteidl.core.ArtifactQuery query = 4;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::query(this), output);
  }

  // bool details = 5;
  if (this->details() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->details(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.GetArtifactRequest)
}

::google::protobuf::uint8* GetArtifactRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.GetArtifactRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  if (has_artifact_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::artifact_key(this), target);
  }

  // .flyteidl.core.ArtifactID artifact_id = 2;
  if (has_artifact_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::artifact_id(this), target);
  }

  // string uri = 3;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.GetArtifactRequest.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uri(), target);
  }

  // .flyteidl.core.ArtifactQuery query = 4;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::query(this), target);
  }

  // bool details = 5;
  if (this->details() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->details(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.GetArtifactRequest)
  return target;
}

size_t GetArtifactRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.GetArtifactRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool details = 5;
  if (this->details() != 0) {
    total_size += 1 + 1;
  }

  switch (identifier_case()) {
    // .flyteidl.core.ArtifactKey artifact_key = 1;
    case kArtifactKey: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *identifier_.artifact_key_);
      break;
    }
    // .flyteidl.core.ArtifactID artifact_id = 2;
    case kArtifactId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *identifier_.artifact_id_);
      break;
    }
    // string uri = 3;
    case kUri: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
      break;
    }
    // .flyteidl.core.ArtifactQuery query = 4;
    case kQuery: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *identifier_.query_);
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetArtifactRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.GetArtifactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetArtifactRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetArtifactRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.GetArtifactRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.GetArtifactRequest)
    MergeFrom(*source);
  }
}

void GetArtifactRequest::MergeFrom(const GetArtifactRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.GetArtifactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.details() != 0) {
    set_details(from.details());
  }
  switch (from.identifier_case()) {
    case kArtifactKey: {
      mutable_artifact_key()->::flyteidl::core::ArtifactKey::MergeFrom(from.artifact_key());
      break;
    }
    case kArtifactId: {
      mutable_artifact_id()->::flyteidl::core::ArtifactID::MergeFrom(from.artifact_id());
      break;
    }
    case kUri: {
      set_uri(from.uri());
      break;
    }
    case kQuery: {
      mutable_query()->::flyteidl::core::ArtifactQuery::MergeFrom(from.query());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
}

void GetArtifactRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.GetArtifactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetArtifactRequest::CopyFrom(const GetArtifactRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.GetArtifactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetArtifactRequest::IsInitialized() const {
  return true;
}

void GetArtifactRequest::Swap(GetArtifactRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetArtifactRequest::InternalSwap(GetArtifactRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(details_, other->details_);
  swap(identifier_, other->identifier_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata GetArtifactRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetArtifactResponse::InitAsDefaultInstance() {
  ::flyteidl::artifact::_GetArtifactResponse_default_instance_._instance.get_mutable()->artifact_ = const_cast< ::flyteidl::artifact::Artifact*>(
      ::flyteidl::artifact::Artifact::internal_default_instance());
}
class GetArtifactResponse::HasBitSetters {
 public:
  static const ::flyteidl::artifact::Artifact& artifact(const GetArtifactResponse* msg);
};

const ::flyteidl::artifact::Artifact&
GetArtifactResponse::HasBitSetters::artifact(const GetArtifactResponse* msg) {
  return *msg->artifact_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetArtifactResponse::kArtifactFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetArtifactResponse::GetArtifactResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.GetArtifactResponse)
}
GetArtifactResponse::GetArtifactResponse(const GetArtifactResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_artifact()) {
    artifact_ = new ::flyteidl::artifact::Artifact(*from.artifact_);
  } else {
    artifact_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.GetArtifactResponse)
}

void GetArtifactResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetArtifactResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  artifact_ = nullptr;
}

GetArtifactResponse::~GetArtifactResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.GetArtifactResponse)
  SharedDtor();
}

void GetArtifactResponse::SharedDtor() {
  if (this != internal_default_instance()) delete artifact_;
}

void GetArtifactResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetArtifactResponse& GetArtifactResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetArtifactResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void GetArtifactResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.GetArtifactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && artifact_ != nullptr) {
    delete artifact_;
  }
  artifact_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetArtifactResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetArtifactResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.artifact.Artifact artifact = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::artifact::Artifact::_InternalParse;
        object = msg->mutable_artifact();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetArtifactResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.GetArtifactResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.artifact.Artifact artifact = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_artifact()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.GetArtifactResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.GetArtifactResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetArtifactResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.GetArtifactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.artifact.Artifact artifact = 1;
  if (this->has_artifact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::artifact(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.GetArtifactResponse)
}

::google::protobuf::uint8* GetArtifactResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.GetArtifactResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.artifact.Artifact artifact = 1;
  if (this->has_artifact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::artifact(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.GetArtifactResponse)
  return target;
}

size_t GetArtifactResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.GetArtifactResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.artifact.Artifact artifact = 1;
  if (this->has_artifact()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *artifact_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetArtifactResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.GetArtifactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetArtifactResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetArtifactResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.GetArtifactResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.GetArtifactResponse)
    MergeFrom(*source);
  }
}

void GetArtifactResponse::MergeFrom(const GetArtifactResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.GetArtifactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_artifact()) {
    mutable_artifact()->::flyteidl::artifact::Artifact::MergeFrom(from.artifact());
  }
}

void GetArtifactResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.GetArtifactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetArtifactResponse::CopyFrom(const GetArtifactResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.GetArtifactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetArtifactResponse::IsInitialized() const {
  return true;
}

void GetArtifactResponse::Swap(GetArtifactResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetArtifactResponse::InternalSwap(GetArtifactResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(artifact_, other->artifact_);
}

::google::protobuf::Metadata GetArtifactResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Tag::InitAsDefaultInstance() {
}
class Tag::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tag::kKeyFieldNumber;
const int Tag::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tag::Tag()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.Tag)
}
Tag::Tag(const Tag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.Tag)
}

void Tag::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Tag_flyteidl_2fartifact_2fartifacts_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Tag::~Tag() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.Tag)
  SharedDtor();
}

void Tag::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Tag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tag& Tag::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Tag_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void Tag::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.Tag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Tag::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Tag*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.artifact.Tag.key");
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.artifact.Tag.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Tag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.Tag)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.artifact.Tag.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.artifact.Tag.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.Tag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.Tag)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Tag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.Tag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.Tag.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.Tag.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.Tag)
}

::google::protobuf::uint8* Tag::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.Tag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.Tag.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.Tag.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.Tag)
  return target;
}

size_t Tag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.Tag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  const Tag* source =
      ::google::protobuf::DynamicCastToGenerated<Tag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.Tag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.Tag)
    MergeFrom(*source);
  }
}

void Tag::MergeFrom(const Tag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void Tag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tag::CopyFrom(const Tag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tag::IsInitialized() const {
  return true;
}

void Tag::Swap(Tag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tag::InternalSwap(Tag* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Tag::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AddTagsRequest::InitAsDefaultInstance() {
  ::flyteidl::artifact::_AddTagsRequest_default_instance_._instance.get_mutable()->artifact_id_ = const_cast< ::flyteidl::core::ArtifactID*>(
      ::flyteidl::core::ArtifactID::internal_default_instance());
}
class AddTagsRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::ArtifactID& artifact_id(const AddTagsRequest* msg);
};

const ::flyteidl::core::ArtifactID&
AddTagsRequest::HasBitSetters::artifact_id(const AddTagsRequest* msg) {
  return *msg->artifact_id_;
}
void AddTagsRequest::clear_artifact_id() {
  if (GetArenaNoVirtual() == nullptr && artifact_id_ != nullptr) {
    delete artifact_id_;
  }
  artifact_id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddTagsRequest::kArtifactIdFieldNumber;
const int AddTagsRequest::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddTagsRequest::AddTagsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.AddTagsRequest)
}
AddTagsRequest::AddTagsRequest(const AddTagsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_artifact_id()) {
    artifact_id_ = new ::flyteidl::core::ArtifactID(*from.artifact_id_);
  } else {
    artifact_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.AddTagsRequest)
}

void AddTagsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AddTagsRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  artifact_id_ = nullptr;
}

AddTagsRequest::~AddTagsRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.AddTagsRequest)
  SharedDtor();
}

void AddTagsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete artifact_id_;
}

void AddTagsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddTagsRequest& AddTagsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AddTagsRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void AddTagsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.AddTagsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  if (GetArenaNoVirtual() == nullptr && artifact_id_ != nullptr) {
    delete artifact_id_;
  }
  artifact_id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AddTagsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AddTagsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.ArtifactID artifact_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ArtifactID::_InternalParse;
        object = msg->mutable_artifact_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .flyteidl.artifact.Tag tags = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::artifact::Tag::_InternalParse;
          object = msg->add_tags();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AddTagsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.AddTagsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.ArtifactID artifact_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_artifact_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.artifact.Tag tags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.AddTagsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.AddTagsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AddTagsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.AddTagsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactID artifact_id = 1;
  if (this->has_artifact_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::artifact_id(this), output);
  }

  // repeated .flyteidl.artifact.Tag tags = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->tags(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.AddTagsRequest)
}

::google::protobuf::uint8* AddTagsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.AddTagsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactID artifact_id = 1;
  if (this->has_artifact_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::artifact_id(this), target);
  }

  // repeated .flyteidl.artifact.Tag tags = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->tags(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.AddTagsRequest)
  return target;
}

size_t AddTagsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.AddTagsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.artifact.Tag tags = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tags_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tags(static_cast<int>(i)));
    }
  }

  // .flyteidl.core.ArtifactID artifact_id = 1;
  if (this->has_artifact_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *artifact_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddTagsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.AddTagsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddTagsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<AddTagsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.AddTagsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.AddTagsRequest)
    MergeFrom(*source);
  }
}

void AddTagsRequest::MergeFrom(const AddTagsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.AddTagsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.has_artifact_id()) {
    mutable_artifact_id()->::flyteidl::core::ArtifactID::MergeFrom(from.artifact_id());
  }
}

void AddTagsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.AddTagsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTagsRequest::CopyFrom(const AddTagsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.AddTagsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTagsRequest::IsInitialized() const {
  return true;
}

void AddTagsRequest::Swap(AddTagsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddTagsRequest::InternalSwap(AddTagsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&tags_)->InternalSwap(CastToBase(&other->tags_));
  swap(artifact_id_, other->artifact_id_);
}

::google::protobuf::Metadata AddTagsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AddTagsResponse::InitAsDefaultInstance() {
}
class AddTagsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddTagsResponse::AddTagsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.AddTagsResponse)
}
AddTagsResponse::AddTagsResponse(const AddTagsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.AddTagsResponse)
}

void AddTagsResponse::SharedCtor() {
}

AddTagsResponse::~AddTagsResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.AddTagsResponse)
  SharedDtor();
}

void AddTagsResponse::SharedDtor() {
}

void AddTagsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddTagsResponse& AddTagsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AddTagsResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void AddTagsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.AddTagsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AddTagsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AddTagsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AddTagsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.AddTagsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.AddTagsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.AddTagsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AddTagsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.AddTagsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.AddTagsResponse)
}

::google::protobuf::uint8* AddTagsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.AddTagsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.AddTagsResponse)
  return target;
}

size_t AddTagsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.AddTagsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddTagsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.AddTagsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddTagsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<AddTagsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.AddTagsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.AddTagsResponse)
    MergeFrom(*source);
  }
}

void AddTagsResponse::MergeFrom(const AddTagsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.AddTagsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AddTagsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.AddTagsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTagsResponse::CopyFrom(const AddTagsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.AddTagsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTagsResponse::IsInitialized() const {
  return true;
}

void AddTagsResponse::Swap(AddTagsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddTagsResponse::InternalSwap(AddTagsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddTagsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RemoveTagsRequest::InitAsDefaultInstance() {
  ::flyteidl::artifact::_RemoveTagsRequest_default_instance_._instance.get_mutable()->artifact_id_ = const_cast< ::flyteidl::core::ArtifactID*>(
      ::flyteidl::core::ArtifactID::internal_default_instance());
}
class RemoveTagsRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::ArtifactID& artifact_id(const RemoveTagsRequest* msg);
};

const ::flyteidl::core::ArtifactID&
RemoveTagsRequest::HasBitSetters::artifact_id(const RemoveTagsRequest* msg) {
  return *msg->artifact_id_;
}
void RemoveTagsRequest::clear_artifact_id() {
  if (GetArenaNoVirtual() == nullptr && artifact_id_ != nullptr) {
    delete artifact_id_;
  }
  artifact_id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoveTagsRequest::kArtifactIdFieldNumber;
const int RemoveTagsRequest::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoveTagsRequest::RemoveTagsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.RemoveTagsRequest)
}
RemoveTagsRequest::RemoveTagsRequest(const RemoveTagsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_artifact_id()) {
    artifact_id_ = new ::flyteidl::core::ArtifactID(*from.artifact_id_);
  } else {
    artifact_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.RemoveTagsRequest)
}

void RemoveTagsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RemoveTagsRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  artifact_id_ = nullptr;
}

RemoveTagsRequest::~RemoveTagsRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.RemoveTagsRequest)
  SharedDtor();
}

void RemoveTagsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete artifact_id_;
}

void RemoveTagsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveTagsRequest& RemoveTagsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RemoveTagsRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void RemoveTagsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.RemoveTagsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  if (GetArenaNoVirtual() == nullptr && artifact_id_ != nullptr) {
    delete artifact_id_;
  }
  artifact_id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RemoveTagsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RemoveTagsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.ArtifactID artifact_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ArtifactID::_InternalParse;
        object = msg->mutable_artifact_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .flyteidl.artifact.Tag tags = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::artifact::Tag::_InternalParse;
          object = msg->add_tags();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RemoveTagsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.RemoveTagsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.ArtifactID artifact_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_artifact_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.artifact.Tag tags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.RemoveTagsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.RemoveTagsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RemoveTagsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.RemoveTagsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactID artifact_id = 1;
  if (this->has_artifact_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::artifact_id(this), output);
  }

  // repeated .flyteidl.artifact.Tag tags = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->tags(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.RemoveTagsRequest)
}

::google::protobuf::uint8* RemoveTagsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.RemoveTagsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactID artifact_id = 1;
  if (this->has_artifact_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::artifact_id(this), target);
  }

  // repeated .flyteidl.artifact.Tag tags = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->tags(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.RemoveTagsRequest)
  return target;
}

size_t RemoveTagsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.RemoveTagsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.artifact.Tag tags = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tags_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tags(static_cast<int>(i)));
    }
  }

  // .flyteidl.core.ArtifactID artifact_id = 1;
  if (this->has_artifact_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *artifact_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveTagsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.RemoveTagsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveTagsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<RemoveTagsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.RemoveTagsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.RemoveTagsRequest)
    MergeFrom(*source);
  }
}

void RemoveTagsRequest::MergeFrom(const RemoveTagsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.RemoveTagsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.has_artifact_id()) {
    mutable_artifact_id()->::flyteidl::core::ArtifactID::MergeFrom(from.artifact_id());
  }
}

void RemoveTagsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.RemoveTagsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveTagsRequest::CopyFrom(const RemoveTagsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.RemoveTagsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveTagsRequest::IsInitialized() const {
  return true;
}

void RemoveTagsRequest::Swap(RemoveTagsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoveTagsRequest::InternalSwap(RemoveTagsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&tags_)->InternalSwap(CastToBase(&other->tags_));
  swap(artifact_id_, other->artifact_id_);
}

::google::protobuf::Metadata RemoveTagsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RemoveTagsResponse::InitAsDefaultInstance() {
}
class RemoveTagsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoveTagsResponse::RemoveTagsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.RemoveTagsResponse)
}
RemoveTagsResponse::RemoveTagsResponse(const RemoveTagsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.RemoveTagsResponse)
}

void RemoveTagsResponse::SharedCtor() {
}

RemoveTagsResponse::~RemoveTagsResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.RemoveTagsResponse)
  SharedDtor();
}

void RemoveTagsResponse::SharedDtor() {
}

void RemoveTagsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveTagsResponse& RemoveTagsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RemoveTagsResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void RemoveTagsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.RemoveTagsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RemoveTagsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RemoveTagsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RemoveTagsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.RemoveTagsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.RemoveTagsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.RemoveTagsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RemoveTagsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.RemoveTagsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.RemoveTagsResponse)
}

::google::protobuf::uint8* RemoveTagsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.RemoveTagsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.RemoveTagsResponse)
  return target;
}

size_t RemoveTagsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.RemoveTagsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveTagsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.RemoveTagsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveTagsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<RemoveTagsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.RemoveTagsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.RemoveTagsResponse)
    MergeFrom(*source);
  }
}

void RemoveTagsResponse::MergeFrom(const RemoveTagsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.RemoveTagsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RemoveTagsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.RemoveTagsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveTagsResponse::CopyFrom(const RemoveTagsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.RemoveTagsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveTagsResponse::IsInitialized() const {
  return true;
}

void RemoveTagsResponse::Swap(RemoveTagsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoveTagsResponse::InternalSwap(RemoveTagsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RemoveTagsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListArtifactNamesRequest::InitAsDefaultInstance() {
}
class ListArtifactNamesRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListArtifactNamesRequest::kProjectFieldNumber;
const int ListArtifactNamesRequest::kDomainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListArtifactNamesRequest::ListArtifactNamesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.ListArtifactNamesRequest)
}
ListArtifactNamesRequest::ListArtifactNamesRequest(const ListArtifactNamesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project().size() > 0) {
    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain().size() > 0) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.ListArtifactNamesRequest)
}

void ListArtifactNamesRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListArtifactNamesRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ListArtifactNamesRequest::~ListArtifactNamesRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.ListArtifactNamesRequest)
  SharedDtor();
}

void ListArtifactNamesRequest::SharedDtor() {
  project_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListArtifactNamesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListArtifactNamesRequest& ListArtifactNamesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListArtifactNamesRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void ListArtifactNamesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.ListArtifactNamesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListArtifactNamesRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListArtifactNamesRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string project = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.artifact.ListArtifactNamesRequest.project");
        object = msg->mutable_project();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string domain = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.artifact.ListArtifactNamesRequest.domain");
        object = msg->mutable_domain();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListArtifactNamesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.ListArtifactNamesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project().data(), static_cast<int>(this->project().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.artifact.ListArtifactNamesRequest.project"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), static_cast<int>(this->domain().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.artifact.ListArtifactNamesRequest.domain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.ListArtifactNamesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.ListArtifactNamesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListArtifactNamesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.ListArtifactNamesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.ListArtifactNamesRequest.project");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project(), output);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.ListArtifactNamesRequest.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.ListArtifactNamesRequest)
}

::google::protobuf::uint8* ListArtifactNamesRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.ListArtifactNamesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.ListArtifactNamesRequest.project");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project(), target);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.artifact.ListArtifactNamesRequest.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->domain(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.ListArtifactNamesRequest)
  return target;
}

size_t ListArtifactNamesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.ListArtifactNamesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project());
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListArtifactNamesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.ListArtifactNamesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListArtifactNamesRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ListArtifactNamesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.ListArtifactNamesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.ListArtifactNamesRequest)
    MergeFrom(*source);
  }
}

void ListArtifactNamesRequest::MergeFrom(const ListArtifactNamesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.ListArtifactNamesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {

    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
}

void ListArtifactNamesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.ListArtifactNamesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListArtifactNamesRequest::CopyFrom(const ListArtifactNamesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.ListArtifactNamesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListArtifactNamesRequest::IsInitialized() const {
  return true;
}

void ListArtifactNamesRequest::Swap(ListArtifactNamesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListArtifactNamesRequest::InternalSwap(ListArtifactNamesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_.Swap(&other->project_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  domain_.Swap(&other->domain_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ListArtifactNamesRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListArtifactNamesResponse::InitAsDefaultInstance() {
}
class ListArtifactNamesResponse::HasBitSetters {
 public:
};

void ListArtifactNamesResponse::clear_artifact_keys() {
  artifact_keys_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListArtifactNamesResponse::kArtifactKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListArtifactNamesResponse::ListArtifactNamesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.ListArtifactNamesResponse)
}
ListArtifactNamesResponse::ListArtifactNamesResponse(const ListArtifactNamesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      artifact_keys_(from.artifact_keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.ListArtifactNamesResponse)
}

void ListArtifactNamesResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListArtifactNamesResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
}

ListArtifactNamesResponse::~ListArtifactNamesResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.ListArtifactNamesResponse)
  SharedDtor();
}

void ListArtifactNamesResponse::SharedDtor() {
}

void ListArtifactNamesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListArtifactNamesResponse& ListArtifactNamesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListArtifactNamesResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void ListArtifactNamesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.ListArtifactNamesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  artifact_keys_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListArtifactNamesResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListArtifactNamesResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .flyteidl.core.ArtifactKey artifact_keys = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::core::ArtifactKey::_InternalParse;
          object = msg->add_artifact_keys();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListArtifactNamesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.ListArtifactNamesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .flyteidl.core.ArtifactKey artifact_keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_artifact_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.ListArtifactNamesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.ListArtifactNamesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListArtifactNamesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.ListArtifactNamesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.core.ArtifactKey artifact_keys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->artifact_keys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->artifact_keys(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.ListArtifactNamesResponse)
}

::google::protobuf::uint8* ListArtifactNamesResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.ListArtifactNamesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.core.ArtifactKey artifact_keys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->artifact_keys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->artifact_keys(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.ListArtifactNamesResponse)
  return target;
}

size_t ListArtifactNamesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.ListArtifactNamesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.core.ArtifactKey artifact_keys = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->artifact_keys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->artifact_keys(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListArtifactNamesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.ListArtifactNamesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListArtifactNamesResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ListArtifactNamesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.ListArtifactNamesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.ListArtifactNamesResponse)
    MergeFrom(*source);
  }
}

void ListArtifactNamesResponse::MergeFrom(const ListArtifactNamesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.ListArtifactNamesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  artifact_keys_.MergeFrom(from.artifact_keys_);
}

void ListArtifactNamesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.ListArtifactNamesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListArtifactNamesResponse::CopyFrom(const ListArtifactNamesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.ListArtifactNamesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListArtifactNamesResponse::IsInitialized() const {
  return true;
}

void ListArtifactNamesResponse::Swap(ListArtifactNamesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListArtifactNamesResponse::InternalSwap(ListArtifactNamesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&artifact_keys_)->InternalSwap(CastToBase(&other->artifact_keys_));
}

::google::protobuf::Metadata ListArtifactNamesResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListArtifactsRequest::InitAsDefaultInstance() {
  ::flyteidl::artifact::_ListArtifactsRequest_default_instance_._instance.get_mutable()->artifact_key_ = const_cast< ::flyteidl::core::ArtifactKey*>(
      ::flyteidl::core::ArtifactKey::internal_default_instance());
}
class ListArtifactsRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::ArtifactKey& artifact_key(const ListArtifactsRequest* msg);
};

const ::flyteidl::core::ArtifactKey&
ListArtifactsRequest::HasBitSetters::artifact_key(const ListArtifactsRequest* msg) {
  return *msg->artifact_key_;
}
void ListArtifactsRequest::clear_artifact_key() {
  if (GetArenaNoVirtual() == nullptr && artifact_key_ != nullptr) {
    delete artifact_key_;
  }
  artifact_key_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListArtifactsRequest::kArtifactKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListArtifactsRequest::ListArtifactsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.ListArtifactsRequest)
}
ListArtifactsRequest::ListArtifactsRequest(const ListArtifactsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_artifact_key()) {
    artifact_key_ = new ::flyteidl::core::ArtifactKey(*from.artifact_key_);
  } else {
    artifact_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.ListArtifactsRequest)
}

void ListArtifactsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListArtifactsRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  artifact_key_ = nullptr;
}

ListArtifactsRequest::~ListArtifactsRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.ListArtifactsRequest)
  SharedDtor();
}

void ListArtifactsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete artifact_key_;
}

void ListArtifactsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListArtifactsRequest& ListArtifactsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListArtifactsRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void ListArtifactsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.ListArtifactsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && artifact_key_ != nullptr) {
    delete artifact_key_;
  }
  artifact_key_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListArtifactsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListArtifactsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.ArtifactKey artifact_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ArtifactKey::_InternalParse;
        object = msg->mutable_artifact_key();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListArtifactsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.ListArtifactsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.ArtifactKey artifact_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_artifact_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.ListArtifactsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.ListArtifactsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListArtifactsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.ListArtifactsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  if (this->has_artifact_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::artifact_key(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.ListArtifactsRequest)
}

::google::protobuf::uint8* ListArtifactsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.ListArtifactsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  if (this->has_artifact_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::artifact_key(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.ListArtifactsRequest)
  return target;
}

size_t ListArtifactsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.ListArtifactsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  if (this->has_artifact_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *artifact_key_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListArtifactsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.ListArtifactsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListArtifactsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ListArtifactsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.ListArtifactsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.ListArtifactsRequest)
    MergeFrom(*source);
  }
}

void ListArtifactsRequest::MergeFrom(const ListArtifactsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.ListArtifactsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_artifact_key()) {
    mutable_artifact_key()->::flyteidl::core::ArtifactKey::MergeFrom(from.artifact_key());
  }
}

void ListArtifactsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.ListArtifactsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListArtifactsRequest::CopyFrom(const ListArtifactsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.ListArtifactsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListArtifactsRequest::IsInitialized() const {
  return true;
}

void ListArtifactsRequest::Swap(ListArtifactsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListArtifactsRequest::InternalSwap(ListArtifactsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(artifact_key_, other->artifact_key_);
}

::google::protobuf::Metadata ListArtifactsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListArtifactsResponse::InitAsDefaultInstance() {
}
class ListArtifactsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListArtifactsResponse::kArtifactsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListArtifactsResponse::ListArtifactsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.ListArtifactsResponse)
}
ListArtifactsResponse::ListArtifactsResponse(const ListArtifactsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      artifacts_(from.artifacts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.ListArtifactsResponse)
}

void ListArtifactsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListArtifactsResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
}

ListArtifactsResponse::~ListArtifactsResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.ListArtifactsResponse)
  SharedDtor();
}

void ListArtifactsResponse::SharedDtor() {
}

void ListArtifactsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListArtifactsResponse& ListArtifactsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListArtifactsResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void ListArtifactsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.ListArtifactsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  artifacts_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListArtifactsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListArtifactsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .flyteidl.artifact.Artifact artifacts = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::artifact::Artifact::_InternalParse;
          object = msg->add_artifacts();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListArtifactsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.ListArtifactsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .flyteidl.artifact.Artifact artifacts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_artifacts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.ListArtifactsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.ListArtifactsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListArtifactsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.ListArtifactsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.artifact.Artifact artifacts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->artifacts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->artifacts(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.ListArtifactsResponse)
}

::google::protobuf::uint8* ListArtifactsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.ListArtifactsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.artifact.Artifact artifacts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->artifacts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->artifacts(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.ListArtifactsResponse)
  return target;
}

size_t ListArtifactsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.ListArtifactsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.artifact.Artifact artifacts = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->artifacts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->artifacts(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListArtifactsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.ListArtifactsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListArtifactsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ListArtifactsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.ListArtifactsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.ListArtifactsResponse)
    MergeFrom(*source);
  }
}

void ListArtifactsResponse::MergeFrom(const ListArtifactsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.ListArtifactsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  artifacts_.MergeFrom(from.artifacts_);
}

void ListArtifactsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.ListArtifactsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListArtifactsResponse::CopyFrom(const ListArtifactsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.ListArtifactsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListArtifactsResponse::IsInitialized() const {
  return true;
}

void ListArtifactsResponse::Swap(ListArtifactsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListArtifactsResponse::InternalSwap(ListArtifactsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&artifacts_)->InternalSwap(CastToBase(&other->artifacts_));
}

::google::protobuf::Metadata ListArtifactsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateAliasRequest::InitAsDefaultInstance() {
  ::flyteidl::artifact::_CreateAliasRequest_default_instance_._instance.get_mutable()->artifact_key_ = const_cast< ::flyteidl::core::ArtifactKey*>(
      ::flyteidl::core::ArtifactKey::internal_default_instance());
  ::flyteidl::artifact::_CreateAliasRequest_default_instance_._instance.get_mutable()->alias_ = const_cast< ::flyteidl::core::ArtifactAlias*>(
      ::flyteidl::core::ArtifactAlias::internal_default_instance());
}
class CreateAliasRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::ArtifactKey& artifact_key(const CreateAliasRequest* msg);
  static const ::flyteidl::core::ArtifactAlias& alias(const CreateAliasRequest* msg);
};

const ::flyteidl::core::ArtifactKey&
CreateAliasRequest::HasBitSetters::artifact_key(const CreateAliasRequest* msg) {
  return *msg->artifact_key_;
}
const ::flyteidl::core::ArtifactAlias&
CreateAliasRequest::HasBitSetters::alias(const CreateAliasRequest* msg) {
  return *msg->alias_;
}
void CreateAliasRequest::clear_artifact_key() {
  if (GetArenaNoVirtual() == nullptr && artifact_key_ != nullptr) {
    delete artifact_key_;
  }
  artifact_key_ = nullptr;
}
void CreateAliasRequest::clear_alias() {
  if (GetArenaNoVirtual() == nullptr && alias_ != nullptr) {
    delete alias_;
  }
  alias_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateAliasRequest::kArtifactKeyFieldNumber;
const int CreateAliasRequest::kAliasFieldNumber;
const int CreateAliasRequest::kOverwriteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateAliasRequest::CreateAliasRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.CreateAliasRequest)
}
CreateAliasRequest::CreateAliasRequest(const CreateAliasRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_artifact_key()) {
    artifact_key_ = new ::flyteidl::core::ArtifactKey(*from.artifact_key_);
  } else {
    artifact_key_ = nullptr;
  }
  if (from.has_alias()) {
    alias_ = new ::flyteidl::core::ArtifactAlias(*from.alias_);
  } else {
    alias_ = nullptr;
  }
  overwrite_ = from.overwrite_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.CreateAliasRequest)
}

void CreateAliasRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateAliasRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::memset(&artifact_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overwrite_) -
      reinterpret_cast<char*>(&artifact_key_)) + sizeof(overwrite_));
}

CreateAliasRequest::~CreateAliasRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.CreateAliasRequest)
  SharedDtor();
}

void CreateAliasRequest::SharedDtor() {
  if (this != internal_default_instance()) delete artifact_key_;
  if (this != internal_default_instance()) delete alias_;
}

void CreateAliasRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateAliasRequest& CreateAliasRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateAliasRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void CreateAliasRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.CreateAliasRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && artifact_key_ != nullptr) {
    delete artifact_key_;
  }
  artifact_key_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && alias_ != nullptr) {
    delete alias_;
  }
  alias_ = nullptr;
  overwrite_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateAliasRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateAliasRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.ArtifactKey artifact_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ArtifactKey::_InternalParse;
        object = msg->mutable_artifact_key();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.ArtifactAlias alias = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ArtifactAlias::_InternalParse;
        object = msg->mutable_alias();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool overwrite = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_overwrite(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateAliasRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.CreateAliasRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.ArtifactKey artifact_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_artifact_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.ArtifactAlias alias = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_alias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool overwrite = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &overwrite_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.CreateAliasRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.CreateAliasRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateAliasRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.CreateAliasRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  if (this->has_artifact_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::artifact_key(this), output);
  }

  // .flyteidl.core.ArtifactAlias alias = 2;
  if (this->has_alias()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::alias(this), output);
  }

  // bool overwrite = 3;
  if (this->overwrite() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->overwrite(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.CreateAliasRequest)
}

::google::protobuf::uint8* CreateAliasRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.CreateAliasRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  if (this->has_artifact_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::artifact_key(this), target);
  }

  // .flyteidl.core.ArtifactAlias alias = 2;
  if (this->has_alias()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::alias(this), target);
  }

  // bool overwrite = 3;
  if (this->overwrite() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->overwrite(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.CreateAliasRequest)
  return target;
}

size_t CreateAliasRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.CreateAliasRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  if (this->has_artifact_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *artifact_key_);
  }

  // .flyteidl.core.ArtifactAlias alias = 2;
  if (this->has_alias()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *alias_);
  }

  // bool overwrite = 3;
  if (this->overwrite() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateAliasRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.CreateAliasRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAliasRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CreateAliasRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.CreateAliasRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.CreateAliasRequest)
    MergeFrom(*source);
  }
}

void CreateAliasRequest::MergeFrom(const CreateAliasRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.CreateAliasRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_artifact_key()) {
    mutable_artifact_key()->::flyteidl::core::ArtifactKey::MergeFrom(from.artifact_key());
  }
  if (from.has_alias()) {
    mutable_alias()->::flyteidl::core::ArtifactAlias::MergeFrom(from.alias());
  }
  if (from.overwrite() != 0) {
    set_overwrite(from.overwrite());
  }
}

void CreateAliasRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.CreateAliasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAliasRequest::CopyFrom(const CreateAliasRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.CreateAliasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAliasRequest::IsInitialized() const {
  return true;
}

void CreateAliasRequest::Swap(CreateAliasRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateAliasRequest::InternalSwap(CreateAliasRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(artifact_key_, other->artifact_key_);
  swap(alias_, other->alias_);
  swap(overwrite_, other->overwrite_);
}

::google::protobuf::Metadata CreateAliasRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateAliasResponse::InitAsDefaultInstance() {
}
class CreateAliasResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateAliasResponse::CreateAliasResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.CreateAliasResponse)
}
CreateAliasResponse::CreateAliasResponse(const CreateAliasResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.CreateAliasResponse)
}

void CreateAliasResponse::SharedCtor() {
}

CreateAliasResponse::~CreateAliasResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.CreateAliasResponse)
  SharedDtor();
}

void CreateAliasResponse::SharedDtor() {
}

void CreateAliasResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateAliasResponse& CreateAliasResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateAliasResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void CreateAliasResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.CreateAliasResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateAliasResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateAliasResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateAliasResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.CreateAliasResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.CreateAliasResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.CreateAliasResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateAliasResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.CreateAliasResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.CreateAliasResponse)
}

::google::protobuf::uint8* CreateAliasResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.CreateAliasResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.CreateAliasResponse)
  return target;
}

size_t CreateAliasResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.CreateAliasResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateAliasResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.CreateAliasResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAliasResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CreateAliasResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.CreateAliasResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.CreateAliasResponse)
    MergeFrom(*source);
  }
}

void CreateAliasResponse::MergeFrom(const CreateAliasResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.CreateAliasResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CreateAliasResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.CreateAliasResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAliasResponse::CopyFrom(const CreateAliasResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.CreateAliasResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAliasResponse::IsInitialized() const {
  return true;
}

void CreateAliasResponse::Swap(CreateAliasResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateAliasResponse::InternalSwap(CreateAliasResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CreateAliasResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RemoveAliasRequest::InitAsDefaultInstance() {
  ::flyteidl::artifact::_RemoveAliasRequest_default_instance_._instance.get_mutable()->artifact_key_ = const_cast< ::flyteidl::core::ArtifactKey*>(
      ::flyteidl::core::ArtifactKey::internal_default_instance());
  ::flyteidl::artifact::_RemoveAliasRequest_default_instance_._instance.get_mutable()->alias_ = const_cast< ::flyteidl::core::ArtifactAlias*>(
      ::flyteidl::core::ArtifactAlias::internal_default_instance());
}
class RemoveAliasRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::ArtifactKey& artifact_key(const RemoveAliasRequest* msg);
  static const ::flyteidl::core::ArtifactAlias& alias(const RemoveAliasRequest* msg);
};

const ::flyteidl::core::ArtifactKey&
RemoveAliasRequest::HasBitSetters::artifact_key(const RemoveAliasRequest* msg) {
  return *msg->artifact_key_;
}
const ::flyteidl::core::ArtifactAlias&
RemoveAliasRequest::HasBitSetters::alias(const RemoveAliasRequest* msg) {
  return *msg->alias_;
}
void RemoveAliasRequest::clear_artifact_key() {
  if (GetArenaNoVirtual() == nullptr && artifact_key_ != nullptr) {
    delete artifact_key_;
  }
  artifact_key_ = nullptr;
}
void RemoveAliasRequest::clear_alias() {
  if (GetArenaNoVirtual() == nullptr && alias_ != nullptr) {
    delete alias_;
  }
  alias_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoveAliasRequest::kArtifactKeyFieldNumber;
const int RemoveAliasRequest::kAliasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoveAliasRequest::RemoveAliasRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.RemoveAliasRequest)
}
RemoveAliasRequest::RemoveAliasRequest(const RemoveAliasRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_artifact_key()) {
    artifact_key_ = new ::flyteidl::core::ArtifactKey(*from.artifact_key_);
  } else {
    artifact_key_ = nullptr;
  }
  if (from.has_alias()) {
    alias_ = new ::flyteidl::core::ArtifactAlias(*from.alias_);
  } else {
    alias_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.RemoveAliasRequest)
}

void RemoveAliasRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RemoveAliasRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  ::memset(&artifact_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alias_) -
      reinterpret_cast<char*>(&artifact_key_)) + sizeof(alias_));
}

RemoveAliasRequest::~RemoveAliasRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.RemoveAliasRequest)
  SharedDtor();
}

void RemoveAliasRequest::SharedDtor() {
  if (this != internal_default_instance()) delete artifact_key_;
  if (this != internal_default_instance()) delete alias_;
}

void RemoveAliasRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveAliasRequest& RemoveAliasRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RemoveAliasRequest_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void RemoveAliasRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.RemoveAliasRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && artifact_key_ != nullptr) {
    delete artifact_key_;
  }
  artifact_key_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && alias_ != nullptr) {
    delete alias_;
  }
  alias_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RemoveAliasRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RemoveAliasRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.ArtifactKey artifact_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ArtifactKey::_InternalParse;
        object = msg->mutable_artifact_key();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.ArtifactAlias alias = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ArtifactAlias::_InternalParse;
        object = msg->mutable_alias();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RemoveAliasRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.RemoveAliasRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.ArtifactKey artifact_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_artifact_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.ArtifactAlias alias = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_alias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.RemoveAliasRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.RemoveAliasRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RemoveAliasRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.RemoveAliasRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  if (this->has_artifact_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::artifact_key(this), output);
  }

  // .flyteidl.core.ArtifactAlias alias = 2;
  if (this->has_alias()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::alias(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.RemoveAliasRequest)
}

::google::protobuf::uint8* RemoveAliasRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.RemoveAliasRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  if (this->has_artifact_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::artifact_key(this), target);
  }

  // .flyteidl.core.ArtifactAlias alias = 2;
  if (this->has_alias()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::alias(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.RemoveAliasRequest)
  return target;
}

size_t RemoveAliasRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.RemoveAliasRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.ArtifactKey artifact_key = 1;
  if (this->has_artifact_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *artifact_key_);
  }

  // .flyteidl.core.ArtifactAlias alias = 2;
  if (this->has_alias()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *alias_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveAliasRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.RemoveAliasRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveAliasRequest* source =
      ::google::protobuf::DynamicCastToGenerated<RemoveAliasRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.RemoveAliasRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.RemoveAliasRequest)
    MergeFrom(*source);
  }
}

void RemoveAliasRequest::MergeFrom(const RemoveAliasRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.RemoveAliasRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_artifact_key()) {
    mutable_artifact_key()->::flyteidl::core::ArtifactKey::MergeFrom(from.artifact_key());
  }
  if (from.has_alias()) {
    mutable_alias()->::flyteidl::core::ArtifactAlias::MergeFrom(from.alias());
  }
}

void RemoveAliasRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.RemoveAliasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveAliasRequest::CopyFrom(const RemoveAliasRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.RemoveAliasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveAliasRequest::IsInitialized() const {
  return true;
}

void RemoveAliasRequest::Swap(RemoveAliasRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoveAliasRequest::InternalSwap(RemoveAliasRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(artifact_key_, other->artifact_key_);
  swap(alias_, other->alias_);
}

::google::protobuf::Metadata RemoveAliasRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RemoveAliasResponse::InitAsDefaultInstance() {
}
class RemoveAliasResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoveAliasResponse::RemoveAliasResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.artifact.RemoveAliasResponse)
}
RemoveAliasResponse::RemoveAliasResponse(const RemoveAliasResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.artifact.RemoveAliasResponse)
}

void RemoveAliasResponse::SharedCtor() {
}

RemoveAliasResponse::~RemoveAliasResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.artifact.RemoveAliasResponse)
  SharedDtor();
}

void RemoveAliasResponse::SharedDtor() {
}

void RemoveAliasResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveAliasResponse& RemoveAliasResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RemoveAliasResponse_flyteidl_2fartifact_2fartifacts_2eproto.base);
  return *internal_default_instance();
}


void RemoveAliasResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.artifact.RemoveAliasResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RemoveAliasResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RemoveAliasResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RemoveAliasResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.artifact.RemoveAliasResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.artifact.RemoveAliasResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.artifact.RemoveAliasResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RemoveAliasResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.artifact.RemoveAliasResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.artifact.RemoveAliasResponse)
}

::google::protobuf::uint8* RemoveAliasResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.artifact.RemoveAliasResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.artifact.RemoveAliasResponse)
  return target;
}

size_t RemoveAliasResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.artifact.RemoveAliasResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveAliasResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.artifact.RemoveAliasResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveAliasResponse* source =
      ::google::protobuf::DynamicCastToGenerated<RemoveAliasResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.artifact.RemoveAliasResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.artifact.RemoveAliasResponse)
    MergeFrom(*source);
  }
}

void RemoveAliasResponse::MergeFrom(const RemoveAliasResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.artifact.RemoveAliasResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RemoveAliasResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.artifact.RemoveAliasResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveAliasResponse::CopyFrom(const RemoveAliasResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.artifact.RemoveAliasResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveAliasResponse::IsInitialized() const {
  return true;
}

void RemoveAliasResponse::Swap(RemoveAliasResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoveAliasResponse::InternalSwap(RemoveAliasResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RemoveAliasResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fartifact_2fartifacts_2eproto);
  return ::file_level_metadata_flyteidl_2fartifact_2fartifacts_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace artifact
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::Artifact* Arena::CreateMaybeMessage< ::flyteidl::artifact::Artifact >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::Artifact >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::CreateArtifactRequest* Arena::CreateMaybeMessage< ::flyteidl::artifact::CreateArtifactRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::CreateArtifactRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::ArtifactSpec* Arena::CreateMaybeMessage< ::flyteidl::artifact::ArtifactSpec >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::ArtifactSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::CreateArtifactResponse* Arena::CreateMaybeMessage< ::flyteidl::artifact::CreateArtifactResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::CreateArtifactResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::GetArtifactRequest* Arena::CreateMaybeMessage< ::flyteidl::artifact::GetArtifactRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::GetArtifactRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::GetArtifactResponse* Arena::CreateMaybeMessage< ::flyteidl::artifact::GetArtifactResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::GetArtifactResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::Tag* Arena::CreateMaybeMessage< ::flyteidl::artifact::Tag >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::Tag >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::AddTagsRequest* Arena::CreateMaybeMessage< ::flyteidl::artifact::AddTagsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::AddTagsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::AddTagsResponse* Arena::CreateMaybeMessage< ::flyteidl::artifact::AddTagsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::AddTagsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::RemoveTagsRequest* Arena::CreateMaybeMessage< ::flyteidl::artifact::RemoveTagsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::RemoveTagsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::RemoveTagsResponse* Arena::CreateMaybeMessage< ::flyteidl::artifact::RemoveTagsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::RemoveTagsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::ListArtifactNamesRequest* Arena::CreateMaybeMessage< ::flyteidl::artifact::ListArtifactNamesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::ListArtifactNamesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::ListArtifactNamesResponse* Arena::CreateMaybeMessage< ::flyteidl::artifact::ListArtifactNamesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::ListArtifactNamesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::ListArtifactsRequest* Arena::CreateMaybeMessage< ::flyteidl::artifact::ListArtifactsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::ListArtifactsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::ListArtifactsResponse* Arena::CreateMaybeMessage< ::flyteidl::artifact::ListArtifactsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::ListArtifactsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::CreateAliasRequest* Arena::CreateMaybeMessage< ::flyteidl::artifact::CreateAliasRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::CreateAliasRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::CreateAliasResponse* Arena::CreateMaybeMessage< ::flyteidl::artifact::CreateAliasResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::CreateAliasResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::RemoveAliasRequest* Arena::CreateMaybeMessage< ::flyteidl::artifact::RemoveAliasRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::RemoveAliasRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::artifact::RemoveAliasResponse* Arena::CreateMaybeMessage< ::flyteidl::artifact::RemoveAliasResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::artifact::RemoveAliasResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
