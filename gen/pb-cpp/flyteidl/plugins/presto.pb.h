// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/presto.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fplugins_2fpresto_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fplugins_2fpresto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fpresto_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fplugins_2fpresto_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fplugins_2fpresto_2eproto();
namespace flyteidl {
namespace plugins {
class PrestoQuery;
class PrestoQueryDefaultTypeInternal;
extern PrestoQueryDefaultTypeInternal _PrestoQuery_default_instance_;
}  // namespace plugins
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::plugins::PrestoQuery* Arena::CreateMaybeMessage<::flyteidl::plugins::PrestoQuery>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace plugins {

// ===================================================================

class PrestoQuery final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.PrestoQuery) */ {
 public:
  PrestoQuery();
  virtual ~PrestoQuery();

  PrestoQuery(const PrestoQuery& from);

  inline PrestoQuery& operator=(const PrestoQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrestoQuery(PrestoQuery&& from) noexcept
    : PrestoQuery() {
    *this = ::std::move(from);
  }

  inline PrestoQuery& operator=(PrestoQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PrestoQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrestoQuery* internal_default_instance() {
    return reinterpret_cast<const PrestoQuery*>(
               &_PrestoQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PrestoQuery* other);
  friend void swap(PrestoQuery& a, PrestoQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrestoQuery* New() const final {
    return CreateMaybeMessage<PrestoQuery>(nullptr);
  }

  PrestoQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrestoQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrestoQuery& from);
  void MergeFrom(const PrestoQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrestoQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string routing_group = 1;
  void clear_routing_group();
  static const int kRoutingGroupFieldNumber = 1;
  const ::std::string& routing_group() const;
  void set_routing_group(const ::std::string& value);
  #if LANG_CXX11
  void set_routing_group(::std::string&& value);
  #endif
  void set_routing_group(const char* value);
  void set_routing_group(const char* value, size_t size);
  ::std::string* mutable_routing_group();
  ::std::string* release_routing_group();
  void set_allocated_routing_group(::std::string* routing_group);

  // string catalog = 2;
  void clear_catalog();
  static const int kCatalogFieldNumber = 2;
  const ::std::string& catalog() const;
  void set_catalog(const ::std::string& value);
  #if LANG_CXX11
  void set_catalog(::std::string&& value);
  #endif
  void set_catalog(const char* value);
  void set_catalog(const char* value, size_t size);
  ::std::string* mutable_catalog();
  ::std::string* release_catalog();
  void set_allocated_catalog(::std::string* catalog);

  // string schema = 3;
  void clear_schema();
  static const int kSchemaFieldNumber = 3;
  const ::std::string& schema() const;
  void set_schema(const ::std::string& value);
  #if LANG_CXX11
  void set_schema(::std::string&& value);
  #endif
  void set_schema(const char* value);
  void set_schema(const char* value, size_t size);
  ::std::string* mutable_schema();
  ::std::string* release_schema();
  void set_allocated_schema(::std::string* schema);

  // string statement = 4;
  void clear_statement();
  static const int kStatementFieldNumber = 4;
  const ::std::string& statement() const;
  void set_statement(const ::std::string& value);
  #if LANG_CXX11
  void set_statement(::std::string&& value);
  #endif
  void set_statement(const char* value);
  void set_statement(const char* value, size_t size);
  ::std::string* mutable_statement();
  ::std::string* release_statement();
  void set_allocated_statement(::std::string* statement);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.PrestoQuery)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr routing_group_;
  ::google::protobuf::internal::ArenaStringPtr catalog_;
  ::google::protobuf::internal::ArenaStringPtr schema_;
  ::google::protobuf::internal::ArenaStringPtr statement_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fpresto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PrestoQuery

// string routing_group = 1;
inline void PrestoQuery::clear_routing_group() {
  routing_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrestoQuery::routing_group() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.PrestoQuery.routing_group)
  return routing_group_.GetNoArena();
}
inline void PrestoQuery::set_routing_group(const ::std::string& value) {
  
  routing_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.PrestoQuery.routing_group)
}
#if LANG_CXX11
inline void PrestoQuery::set_routing_group(::std::string&& value) {
  
  routing_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.PrestoQuery.routing_group)
}
#endif
inline void PrestoQuery::set_routing_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  routing_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.PrestoQuery.routing_group)
}
inline void PrestoQuery::set_routing_group(const char* value, size_t size) {
  
  routing_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.PrestoQuery.routing_group)
}
inline ::std::string* PrestoQuery::mutable_routing_group() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.PrestoQuery.routing_group)
  return routing_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrestoQuery::release_routing_group() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.PrestoQuery.routing_group)
  
  return routing_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrestoQuery::set_allocated_routing_group(::std::string* routing_group) {
  if (routing_group != nullptr) {
    
  } else {
    
  }
  routing_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), routing_group);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.PrestoQuery.routing_group)
}

// string catalog = 2;
inline void PrestoQuery::clear_catalog() {
  catalog_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrestoQuery::catalog() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.PrestoQuery.catalog)
  return catalog_.GetNoArena();
}
inline void PrestoQuery::set_catalog(const ::std::string& value) {
  
  catalog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.PrestoQuery.catalog)
}
#if LANG_CXX11
inline void PrestoQuery::set_catalog(::std::string&& value) {
  
  catalog_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.PrestoQuery.catalog)
}
#endif
inline void PrestoQuery::set_catalog(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  catalog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.PrestoQuery.catalog)
}
inline void PrestoQuery::set_catalog(const char* value, size_t size) {
  
  catalog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.PrestoQuery.catalog)
}
inline ::std::string* PrestoQuery::mutable_catalog() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.PrestoQuery.catalog)
  return catalog_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrestoQuery::release_catalog() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.PrestoQuery.catalog)
  
  return catalog_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrestoQuery::set_allocated_catalog(::std::string* catalog) {
  if (catalog != nullptr) {
    
  } else {
    
  }
  catalog_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), catalog);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.PrestoQuery.catalog)
}

// string schema = 3;
inline void PrestoQuery::clear_schema() {
  schema_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrestoQuery::schema() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.PrestoQuery.schema)
  return schema_.GetNoArena();
}
inline void PrestoQuery::set_schema(const ::std::string& value) {
  
  schema_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.PrestoQuery.schema)
}
#if LANG_CXX11
inline void PrestoQuery::set_schema(::std::string&& value) {
  
  schema_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.PrestoQuery.schema)
}
#endif
inline void PrestoQuery::set_schema(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  schema_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.PrestoQuery.schema)
}
inline void PrestoQuery::set_schema(const char* value, size_t size) {
  
  schema_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.PrestoQuery.schema)
}
inline ::std::string* PrestoQuery::mutable_schema() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.PrestoQuery.schema)
  return schema_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrestoQuery::release_schema() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.PrestoQuery.schema)
  
  return schema_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrestoQuery::set_allocated_schema(::std::string* schema) {
  if (schema != nullptr) {
    
  } else {
    
  }
  schema_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), schema);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.PrestoQuery.schema)
}

// string statement = 4;
inline void PrestoQuery::clear_statement() {
  statement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrestoQuery::statement() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.PrestoQuery.statement)
  return statement_.GetNoArena();
}
inline void PrestoQuery::set_statement(const ::std::string& value) {
  
  statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.PrestoQuery.statement)
}
#if LANG_CXX11
inline void PrestoQuery::set_statement(::std::string&& value) {
  
  statement_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.PrestoQuery.statement)
}
#endif
inline void PrestoQuery::set_statement(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.PrestoQuery.statement)
}
inline void PrestoQuery::set_statement(const char* value, size_t size) {
  
  statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.PrestoQuery.statement)
}
inline ::std::string* PrestoQuery::mutable_statement() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.PrestoQuery.statement)
  return statement_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrestoQuery::release_statement() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.PrestoQuery.statement)
  
  return statement_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrestoQuery::set_allocated_statement(::std::string* statement) {
  if (statement != nullptr) {
    
  } else {
    
  }
  statement_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), statement);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.PrestoQuery.statement)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace plugins
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fplugins_2fpresto_2eproto
