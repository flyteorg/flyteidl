// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/service/signal.proto

package service

import (
	context "context"
	fmt "fmt"
	admin "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("flyteidl/service/signal.proto", fileDescriptor_ca211d25a1023377) }

var fileDescriptor_ca211d25a1023377 = []byte{
	// 545 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xc1, 0x8a, 0x13, 0x4b,
	0x14, 0x25, 0x79, 0x30, 0xf0, 0x5a, 0x44, 0x6d, 0xc5, 0x45, 0xab, 0x70, 0xcd, 0x4a, 0x64, 0xa6,
	0x7b, 0xd4, 0x41, 0x89, 0xae, 0x32, 0x82, 0x83, 0x83, 0x20, 0x24, 0x2b, 0x47, 0x71, 0xa8, 0x74,
	0xdd, 0xae, 0xbe, 0xd2, 0x5d, 0xd5, 0x56, 0xdd, 0x8e, 0x13, 0x64, 0x36, 0x7e, 0x81, 0xc4, 0x9d,
	0x7f, 0xe1, 0x1f, 0xb8, 0x13, 0xd7, 0xee, 0x5d, 0xf9, 0x01, 0x7e, 0x82, 0x74, 0x57, 0x12, 0xcc,
	0x4c, 0x60, 0x56, 0x6e, 0x52, 0x50, 0xe7, 0xdc, 0x73, 0x0e, 0xe7, 0xa6, 0x3a, 0xb8, 0x91, 0x15,
	0x53, 0x46, 0x92, 0x45, 0xe2, 0xd0, 0x4e, 0x28, 0xc5, 0xc4, 0x91, 0xd2, 0xa2, 0x88, 0x2b, 0x6b,
	0xd8, 0x84, 0x17, 0x17, 0x70, 0x3c, 0x87, 0xa3, 0xeb, 0xca, 0x18, 0x55, 0x60, 0x22, 0x2a, 0x4a,
	0x84, 0xd6, 0x86, 0x05, 0x93, 0xd1, 0xce, 0xf3, 0xa3, 0x6b, 0x4b, 0x39, 0x21, 0x4b, 0xd2, 0x2b,
	0x62, 0xd1, 0x66, 0x7b, 0xa4, 0x5b, 0x0a, 0xf5, 0x96, 0x7b, 0x27, 0x94, 0x42, 0x9b, 0x98, 0xaa,
	0x1d, 0x3f, 0x2d, 0x75, 0xf7, 0xfb, 0x46, 0x70, 0x7e, 0xd4, 0x8e, 0x8f, 0xbc, 0x75, 0xf8, 0xb1,
	0x13, 0x5c, 0xda, 0x43, 0x7e, 0x6e, 0x1f, 0x5b, 0x14, 0x8c, 0x1e, 0x0c, 0x6f, 0xc5, 0xcb, 0x8c,
	0xad, 0x67, 0xec, 0xef, 0xff, 0x22, 0x0e, 0xf1, 0x6d, 0x8d, 0x8e, 0xa3, 0xab, 0xeb, 0x99, 0xbd,
	0xfe, 0x6c, 0x70, 0x3f, 0xda, 0x19, 0x22, 0x5b, 0xc2, 0x09, 0x82, 0x00, 0x9f, 0x7a, 0x13, 0xd2,
	0x66, 0x9c, 0xb4, 0x02, 0x62, 0xa0, 0xac, 0xf9, 0x95, 0x06, 0x1d, 0x68, 0xc3, 0x80, 0x47, 0xe4,
	0x38, 0x0e, 0x7f, 0x77, 0x83, 0x73, 0xcf, 0xc8, 0xb1, 0x57, 0x72, 0xe1, 0xcd, 0xf5, 0x16, 0x0d,
	0x65, 0x91, 0xe2, 0x6c, 0x4a, 0xef, 0x73, 0x77, 0x36, 0x78, 0x1a, 0xed, 0x3d, 0x41, 0x4e, 0x73,
	0xef, 0xd4, 0x84, 0xf0, 0xa9, 0x40, 0x62, 0x46, 0x9a, 0xda, 0xa6, 0xa0, 0x14, 0x9c, 0xe6, 0x0d,
	0xc6, 0x39, 0x02, 0xe9, 0xaa, 0xe6, 0x05, 0x8b, 0x24, 0x64, 0x54, 0x30, 0x5a, 0x17, 0x7f, 0xf8,
	0xf1, 0xeb, 0x53, 0xf7, 0x5b, 0x27, 0xcc, 0xdb, 0x9d, 0x4d, 0xee, 0xcc, 0x97, 0xe2, 0x92, 0xf7,
	0x24, 0x63, 0x3c, 0xc2, 0xb4, 0x6e, 0xc4, 0x0e, 0x49, 0x36, 0xc5, 0xbf, 0xc1, 0x94, 0x8f, 0x4f,
	0x23, 0xd2, 0x94, 0x82, 0xf4, 0x1a, 0x40, 0x8b, 0x12, 0xfd, 0xb5, 0x57, 0x3d, 0x24, 0x79, 0x7c,
	0xf0, 0x32, 0x7c, 0xf1, 0xcf, 0xbc, 0xc2, 0x2f, 0xdd, 0xe0, 0xff, 0x11, 0xce, 0x1b, 0x0f, 0x61,
	0x7d, 0x9b, 0x23, 0x3c, 0xab, 0xef, 0x96, 0xe1, 0x2a, 0xa3, 0x1d, 0xf6, 0x7e, 0x76, 0x66, 0x83,
	0xaf, 0x9d, 0xe8, 0xf2, 0x08, 0x79, 0xb9, 0x7d, 0x98, 0x88, 0xa2, 0xc6, 0x78, 0x7f, 0x37, 0xf8,
	0x6f, 0x67, 0x7b, 0x3b, 0x7c, 0x14, 0xf4, 0x87, 0xc8, 0xb5, 0xd5, 0x28, 0x21, 0x33, 0x16, 0xc6,
	0x42, 0x82, 0xf5, 0x0e, 0xc0, 0xb9, 0x60, 0x28, 0xc5, 0x14, 0x72, 0x31, 0x41, 0xc8, 0x04, 0x15,
	0x28, 0x9b, 0x71, 0x92, 0xed, 0x1f, 0x3a, 0xde, 0xc7, 0x46, 0xa3, 0x1f, 0xbe, 0x0e, 0x5e, 0xad,
	0x68, 0x88, 0x55, 0x05, 0x8b, 0x19, 0x5a, 0xd4, 0x29, 0x3a, 0x10, 0x1a, 0x48, 0xa2, 0x66, 0x4a,
	0x45, 0x01, 0xcd, 0xc9, 0x53, 0xcf, 0xc9, 0x85, 0x03, 0x51, 0x58, 0x14, 0x72, 0x0a, 0x63, 0x44,
	0x0d, 0x16, 0x15, 0x39, 0x46, 0x8b, 0xd2, 0xef, 0xf9, 0x4a, 0xef, 0xc2, 0x89, 0xea, 0x1f, 0x76,
	0x6e, 0xef, 0xf6, 0x0f, 0x1e, 0x28, 0xe2, 0xbc, 0x1e, 0xc7, 0xa9, 0x29, 0x93, 0xb6, 0x0f, 0x63,
	0x55, 0xb2, 0x7c, 0xac, 0x0a, 0x75, 0x52, 0x8d, 0xb7, 0x94, 0x49, 0x4e, 0x7e, 0x0e, 0xc6, 0x1b,
	0xed, 0x6b, 0xbc, 0xf7, 0x27, 0x00, 0x00, 0xff, 0xff, 0x68, 0x1b, 0xb3, 0x0e, 0x29, 0x04, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SignalServiceClient is the client API for SignalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SignalServiceClient interface {
	// Fetches or creates a :ref:`ref_flyteidl.admin.Signal`.
	GetOrCreateSignal(ctx context.Context, in *admin.SignalGetOrCreateRequest, opts ...grpc.CallOption) (*admin.Signal, error)
	// Fetch a list of :ref:`ref_flyteidl.admin.Signal` definitions.
	ListSignals(ctx context.Context, in *admin.SignalListRequest, opts ...grpc.CallOption) (*admin.SignalListRequest, error)
	// Sets the value on a :ref:`ref_flyteidl.admin.Signal` definition
	SetSignal(ctx context.Context, in *admin.SignalSetRequest, opts ...grpc.CallOption) (*admin.SignalSetResponse, error)
}

type signalServiceClient struct {
	cc *grpc.ClientConn
}

func NewSignalServiceClient(cc *grpc.ClientConn) SignalServiceClient {
	return &signalServiceClient{cc}
}

func (c *signalServiceClient) GetOrCreateSignal(ctx context.Context, in *admin.SignalGetOrCreateRequest, opts ...grpc.CallOption) (*admin.Signal, error) {
	out := new(admin.Signal)
	err := c.cc.Invoke(ctx, "/flyteidl.service.SignalService/GetOrCreateSignal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalServiceClient) ListSignals(ctx context.Context, in *admin.SignalListRequest, opts ...grpc.CallOption) (*admin.SignalListRequest, error) {
	out := new(admin.SignalListRequest)
	err := c.cc.Invoke(ctx, "/flyteidl.service.SignalService/ListSignals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalServiceClient) SetSignal(ctx context.Context, in *admin.SignalSetRequest, opts ...grpc.CallOption) (*admin.SignalSetResponse, error) {
	out := new(admin.SignalSetResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.SignalService/SetSignal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignalServiceServer is the server API for SignalService service.
type SignalServiceServer interface {
	// Fetches or creates a :ref:`ref_flyteidl.admin.Signal`.
	GetOrCreateSignal(context.Context, *admin.SignalGetOrCreateRequest) (*admin.Signal, error)
	// Fetch a list of :ref:`ref_flyteidl.admin.Signal` definitions.
	ListSignals(context.Context, *admin.SignalListRequest) (*admin.SignalListRequest, error)
	// Sets the value on a :ref:`ref_flyteidl.admin.Signal` definition
	SetSignal(context.Context, *admin.SignalSetRequest) (*admin.SignalSetResponse, error)
}

// UnimplementedSignalServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSignalServiceServer struct {
}

func (*UnimplementedSignalServiceServer) GetOrCreateSignal(ctx context.Context, req *admin.SignalGetOrCreateRequest) (*admin.Signal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrCreateSignal not implemented")
}
func (*UnimplementedSignalServiceServer) ListSignals(ctx context.Context, req *admin.SignalListRequest) (*admin.SignalListRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSignals not implemented")
}
func (*UnimplementedSignalServiceServer) SetSignal(ctx context.Context, req *admin.SignalSetRequest) (*admin.SignalSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSignal not implemented")
}

func RegisterSignalServiceServer(s *grpc.Server, srv SignalServiceServer) {
	s.RegisterService(&_SignalService_serviceDesc, srv)
}

func _SignalService_GetOrCreateSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.SignalGetOrCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalServiceServer).GetOrCreateSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.SignalService/GetOrCreateSignal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalServiceServer).GetOrCreateSignal(ctx, req.(*admin.SignalGetOrCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignalService_ListSignals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.SignalListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalServiceServer).ListSignals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.SignalService/ListSignals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalServiceServer).ListSignals(ctx, req.(*admin.SignalListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignalService_SetSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.SignalSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalServiceServer).SetSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.SignalService/SetSignal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalServiceServer).SetSignal(ctx, req.(*admin.SignalSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SignalService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flyteidl.service.SignalService",
	HandlerType: (*SignalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrCreateSignal",
			Handler:    _SignalService_GetOrCreateSignal_Handler,
		},
		{
			MethodName: "ListSignals",
			Handler:    _SignalService_ListSignals_Handler,
		},
		{
			MethodName: "SetSignal",
			Handler:    _SignalService_SetSignal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flyteidl/service/signal.proto",
}
