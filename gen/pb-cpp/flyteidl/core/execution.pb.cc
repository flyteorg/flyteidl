// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/execution.proto

#include "flyteidl/core/execution.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace core {
constexpr WorkflowExecution::WorkflowExecution(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct WorkflowExecutionDefaultTypeInternal {
  constexpr WorkflowExecutionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowExecutionDefaultTypeInternal() {}
  union {
    WorkflowExecution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowExecutionDefaultTypeInternal _WorkflowExecution_default_instance_;
constexpr NodeExecution::NodeExecution(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NodeExecutionDefaultTypeInternal {
  constexpr NodeExecutionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeExecutionDefaultTypeInternal() {}
  union {
    NodeExecution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeExecutionDefaultTypeInternal _NodeExecution_default_instance_;
constexpr TaskExecution::TaskExecution(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TaskExecutionDefaultTypeInternal {
  constexpr TaskExecutionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskExecutionDefaultTypeInternal() {}
  union {
    TaskExecution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskExecutionDefaultTypeInternal _TaskExecution_default_instance_;
constexpr ExecutionError::ExecutionError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_uri_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , kind_(0)
{}
struct ExecutionErrorDefaultTypeInternal {
  constexpr ExecutionErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecutionErrorDefaultTypeInternal() {}
  union {
    ExecutionError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecutionErrorDefaultTypeInternal _ExecutionError_default_instance_;
constexpr TaskLog::TaskLog(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uri_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ttl_(nullptr)
  , message_format_(0)
{}
struct TaskLogDefaultTypeInternal {
  constexpr TaskLogDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskLogDefaultTypeInternal() {}
  union {
    TaskLog _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskLogDefaultTypeInternal _TaskLog_default_instance_;
constexpr QualityOfServiceSpec::QualityOfServiceSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : queueing_budget_(nullptr){}
struct QualityOfServiceSpecDefaultTypeInternal {
  constexpr QualityOfServiceSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QualityOfServiceSpecDefaultTypeInternal() {}
  union {
    QualityOfServiceSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QualityOfServiceSpecDefaultTypeInternal _QualityOfServiceSpec_default_instance_;
constexpr QualityOfService::QualityOfService(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct QualityOfServiceDefaultTypeInternal {
  constexpr QualityOfServiceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QualityOfServiceDefaultTypeInternal() {}
  union {
    QualityOfService _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QualityOfServiceDefaultTypeInternal _QualityOfService_default_instance_;
}  // namespace core
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fcore_2fexecution_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fcore_2fexecution_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fcore_2fexecution_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fcore_2fexecution_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowExecution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::NodeExecution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskExecution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ExecutionError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ExecutionError, code_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ExecutionError, message_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ExecutionError, error_uri_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ExecutionError, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskLog, uri_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskLog, name_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskLog, message_format_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskLog, ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::QualityOfServiceSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::QualityOfServiceSpec, queueing_budget_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::QualityOfService, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::QualityOfService, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::QualityOfService, designation_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::core::WorkflowExecution)},
  { 6, -1, -1, sizeof(::flyteidl::core::NodeExecution)},
  { 12, -1, -1, sizeof(::flyteidl::core::TaskExecution)},
  { 18, -1, -1, sizeof(::flyteidl::core::ExecutionError)},
  { 28, -1, -1, sizeof(::flyteidl::core::TaskLog)},
  { 38, -1, -1, sizeof(::flyteidl::core::QualityOfServiceSpec)},
  { 45, -1, -1, sizeof(::flyteidl::core::QualityOfService)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_WorkflowExecution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_NodeExecution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_TaskExecution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_ExecutionError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_TaskLog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_QualityOfServiceSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_QualityOfService_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fcore_2fexecution_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035flyteidl/core/execution.proto\022\rflyteid"
  "l.core\032\036google/protobuf/duration.proto\"\247"
  "\001\n\021WorkflowExecution\"\221\001\n\005Phase\022\r\n\tUNDEFI"
  "NED\020\000\022\n\n\006QUEUED\020\001\022\013\n\007RUNNING\020\002\022\016\n\nSUCCEE"
  "DING\020\003\022\r\n\tSUCCEEDED\020\004\022\013\n\007FAILING\020\005\022\n\n\006FA"
  "ILED\020\006\022\013\n\007ABORTED\020\007\022\r\n\tTIMED_OUT\020\010\022\014\n\010AB"
  "ORTING\020\t\"\266\001\n\rNodeExecution\"\244\001\n\005Phase\022\r\n\t"
  "UNDEFINED\020\000\022\n\n\006QUEUED\020\001\022\013\n\007RUNNING\020\002\022\r\n\t"
  "SUCCEEDED\020\003\022\013\n\007FAILING\020\004\022\n\n\006FAILED\020\005\022\013\n\007"
  "ABORTED\020\006\022\013\n\007SKIPPED\020\007\022\r\n\tTIMED_OUT\020\010\022\023\n"
  "\017DYNAMIC_RUNNING\020\t\022\r\n\tRECOVERED\020\n\"\226\001\n\rTa"
  "skExecution\"\204\001\n\005Phase\022\r\n\tUNDEFINED\020\000\022\n\n\006"
  "QUEUED\020\001\022\013\n\007RUNNING\020\002\022\r\n\tSUCCEEDED\020\003\022\013\n\007"
  "ABORTED\020\004\022\n\n\006FAILED\020\005\022\020\n\014INITIALIZING\020\006\022"
  "\031\n\025WAITING_FOR_RESOURCES\020\007\"\310\001\n\016Execution"
  "Error\022\022\n\004code\030\001 \001(\tR\004code\022\030\n\007message\030\002 \001"
  "(\tR\007message\022\033\n\terror_uri\030\003 \001(\tR\010errorUri"
  "\022;\n\004kind\030\004 \001(\0162\'.flyteidl.core.Execution"
  "Error.ErrorKindR\004kind\".\n\tErrorKind\022\013\n\007UN"
  "KNOWN\020\000\022\010\n\004USER\020\001\022\n\n\006SYSTEM\020\002\"\332\001\n\007TaskLo"
  "g\022\020\n\003uri\030\001 \001(\tR\003uri\022\022\n\004name\030\002 \001(\tR\004name\022"
  "K\n\016message_format\030\003 \001(\0162$.flyteidl.core."
  "TaskLog.MessageFormatR\rmessageFormat\022+\n\003"
  "ttl\030\004 \001(\0132\031.google.protobuf.DurationR\003tt"
  "l\"/\n\rMessageFormat\022\013\n\007UNKNOWN\020\000\022\007\n\003CSV\020\001"
  "\022\010\n\004JSON\020\002\"Z\n\024QualityOfServiceSpec\022B\n\017qu"
  "eueing_budget\030\001 \001(\0132\031.google.protobuf.Du"
  "rationR\016queueingBudget\"\316\001\n\020QualityOfServ"
  "ice\022:\n\004tier\030\001 \001(\0162$.flyteidl.core.Qualit"
  "yOfService.TierH\000R\004tier\0229\n\004spec\030\002 \001(\0132#."
  "flyteidl.core.QualityOfServiceSpecH\000R\004sp"
  "ec\"4\n\004Tier\022\r\n\tUNDEFINED\020\000\022\010\n\004HIGH\020\001\022\n\n\006M"
  "EDIUM\020\002\022\007\n\003LOW\020\003B\r\n\013designationB\261\001\n\021com."
  "flyteidl.coreB\016ExecutionProtoH\002Z4github."
  "com/flyteorg/flyteidl/gen/pb-go/flyteidl"
  "/core\370\001\000\242\002\003FCX\252\002\rFlyteidl.Core\312\002\rFlyteid"
  "l\\Core\342\002\031Flyteidl\\Core\\GPBMetadata\352\002\016Fly"
  "teidl::Coreb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flyteidl_2fcore_2fexecution_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fcore_2fexecution_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fcore_2fexecution_2eproto = {
  false, false, 1499, descriptor_table_protodef_flyteidl_2fcore_2fexecution_2eproto, "flyteidl/core/execution.proto", 
  &descriptor_table_flyteidl_2fcore_2fexecution_2eproto_once, descriptor_table_flyteidl_2fcore_2fexecution_2eproto_deps, 1, 7,
  schemas, file_default_instances, TableStruct_flyteidl_2fcore_2fexecution_2eproto::offsets,
  file_level_metadata_flyteidl_2fcore_2fexecution_2eproto, file_level_enum_descriptors_flyteidl_2fcore_2fexecution_2eproto, file_level_service_descriptors_flyteidl_2fcore_2fexecution_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fcore_2fexecution_2eproto_getter() {
  return &descriptor_table_flyteidl_2fcore_2fexecution_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fcore_2fexecution_2eproto(&descriptor_table_flyteidl_2fcore_2fexecution_2eproto);
namespace flyteidl {
namespace core {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkflowExecution_Phase_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fcore_2fexecution_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2fexecution_2eproto[0];
}
bool WorkflowExecution_Phase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WorkflowExecution_Phase WorkflowExecution::UNDEFINED;
constexpr WorkflowExecution_Phase WorkflowExecution::QUEUED;
constexpr WorkflowExecution_Phase WorkflowExecution::RUNNING;
constexpr WorkflowExecution_Phase WorkflowExecution::SUCCEEDING;
constexpr WorkflowExecution_Phase WorkflowExecution::SUCCEEDED;
constexpr WorkflowExecution_Phase WorkflowExecution::FAILING;
constexpr WorkflowExecution_Phase WorkflowExecution::FAILED;
constexpr WorkflowExecution_Phase WorkflowExecution::ABORTED;
constexpr WorkflowExecution_Phase WorkflowExecution::TIMED_OUT;
constexpr WorkflowExecution_Phase WorkflowExecution::ABORTING;
constexpr WorkflowExecution_Phase WorkflowExecution::Phase_MIN;
constexpr WorkflowExecution_Phase WorkflowExecution::Phase_MAX;
constexpr int WorkflowExecution::Phase_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeExecution_Phase_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fcore_2fexecution_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2fexecution_2eproto[1];
}
bool NodeExecution_Phase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr NodeExecution_Phase NodeExecution::UNDEFINED;
constexpr NodeExecution_Phase NodeExecution::QUEUED;
constexpr NodeExecution_Phase NodeExecution::RUNNING;
constexpr NodeExecution_Phase NodeExecution::SUCCEEDED;
constexpr NodeExecution_Phase NodeExecution::FAILING;
constexpr NodeExecution_Phase NodeExecution::FAILED;
constexpr NodeExecution_Phase NodeExecution::ABORTED;
constexpr NodeExecution_Phase NodeExecution::SKIPPED;
constexpr NodeExecution_Phase NodeExecution::TIMED_OUT;
constexpr NodeExecution_Phase NodeExecution::DYNAMIC_RUNNING;
constexpr NodeExecution_Phase NodeExecution::RECOVERED;
constexpr NodeExecution_Phase NodeExecution::Phase_MIN;
constexpr NodeExecution_Phase NodeExecution::Phase_MAX;
constexpr int NodeExecution::Phase_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskExecution_Phase_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fcore_2fexecution_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2fexecution_2eproto[2];
}
bool TaskExecution_Phase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TaskExecution_Phase TaskExecution::UNDEFINED;
constexpr TaskExecution_Phase TaskExecution::QUEUED;
constexpr TaskExecution_Phase TaskExecution::RUNNING;
constexpr TaskExecution_Phase TaskExecution::SUCCEEDED;
constexpr TaskExecution_Phase TaskExecution::ABORTED;
constexpr TaskExecution_Phase TaskExecution::FAILED;
constexpr TaskExecution_Phase TaskExecution::INITIALIZING;
constexpr TaskExecution_Phase TaskExecution::WAITING_FOR_RESOURCES;
constexpr TaskExecution_Phase TaskExecution::Phase_MIN;
constexpr TaskExecution_Phase TaskExecution::Phase_MAX;
constexpr int TaskExecution::Phase_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExecutionError_ErrorKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fcore_2fexecution_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2fexecution_2eproto[3];
}
bool ExecutionError_ErrorKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ExecutionError_ErrorKind ExecutionError::UNKNOWN;
constexpr ExecutionError_ErrorKind ExecutionError::USER;
constexpr ExecutionError_ErrorKind ExecutionError::SYSTEM;
constexpr ExecutionError_ErrorKind ExecutionError::ErrorKind_MIN;
constexpr ExecutionError_ErrorKind ExecutionError::ErrorKind_MAX;
constexpr int ExecutionError::ErrorKind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskLog_MessageFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fcore_2fexecution_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2fexecution_2eproto[4];
}
bool TaskLog_MessageFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TaskLog_MessageFormat TaskLog::UNKNOWN;
constexpr TaskLog_MessageFormat TaskLog::CSV;
constexpr TaskLog_MessageFormat TaskLog::JSON;
constexpr TaskLog_MessageFormat TaskLog::MessageFormat_MIN;
constexpr TaskLog_MessageFormat TaskLog::MessageFormat_MAX;
constexpr int TaskLog::MessageFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QualityOfService_Tier_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fcore_2fexecution_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2fexecution_2eproto[5];
}
bool QualityOfService_Tier_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr QualityOfService_Tier QualityOfService::UNDEFINED;
constexpr QualityOfService_Tier QualityOfService::HIGH;
constexpr QualityOfService_Tier QualityOfService::MEDIUM;
constexpr QualityOfService_Tier QualityOfService::LOW;
constexpr QualityOfService_Tier QualityOfService::Tier_MIN;
constexpr QualityOfService_Tier QualityOfService::Tier_MAX;
constexpr int QualityOfService::Tier_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class WorkflowExecution::_Internal {
 public:
};

WorkflowExecution::WorkflowExecution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.WorkflowExecution)
}
WorkflowExecution::WorkflowExecution(const WorkflowExecution& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.WorkflowExecution)
}



::PROTOBUF_NAMESPACE_ID::Metadata WorkflowExecution::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fexecution_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fexecution_2eproto[0]);
}

// ===================================================================

class NodeExecution::_Internal {
 public:
};

NodeExecution::NodeExecution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.NodeExecution)
}
NodeExecution::NodeExecution(const NodeExecution& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.NodeExecution)
}



::PROTOBUF_NAMESPACE_ID::Metadata NodeExecution::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fexecution_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fexecution_2eproto[1]);
}

// ===================================================================

class TaskExecution::_Internal {
 public:
};

TaskExecution::TaskExecution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.TaskExecution)
}
TaskExecution::TaskExecution(const TaskExecution& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.TaskExecution)
}



::PROTOBUF_NAMESPACE_ID::Metadata TaskExecution::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fexecution_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fexecution_2eproto[2]);
}

// ===================================================================

class ExecutionError::_Internal {
 public:
};

ExecutionError::ExecutionError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.ExecutionError)
}
ExecutionError::ExecutionError(const ExecutionError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  error_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_uri().empty()) {
    error_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_uri(), 
      GetArenaForAllocation());
  }
  kind_ = from.kind_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.ExecutionError)
}

inline void ExecutionError::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
kind_ = 0;
}

ExecutionError::~ExecutionError() {
  // @@protoc_insertion_point(destructor:flyteidl.core.ExecutionError)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecutionError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExecutionError::ArenaDtor(void* object) {
  ExecutionError* _this = reinterpret_cast< ExecutionError* >(object);
  (void)_this;
}
void ExecutionError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecutionError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecutionError::InternalSwap(ExecutionError* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionError::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fexecution_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fexecution_2eproto[3]);
}

// ===================================================================

class TaskLog::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& ttl(const TaskLog* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
TaskLog::_Internal::ttl(const TaskLog* msg) {
  return *msg->ttl_;
}
void TaskLog::clear_ttl() {
  if (GetArenaForAllocation() == nullptr && ttl_ != nullptr) {
    delete ttl_;
  }
  ttl_ = nullptr;
}
TaskLog::TaskLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.TaskLog)
}
TaskLog::TaskLog(const TaskLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uri(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_ttl()) {
    ttl_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.ttl_);
  } else {
    ttl_ = nullptr;
  }
  message_format_ = from.message_format_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.TaskLog)
}

inline void TaskLog::SharedCtor() {
uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ttl_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&message_format_) -
    reinterpret_cast<char*>(&ttl_)) + sizeof(message_format_));
}

TaskLog::~TaskLog() {
  // @@protoc_insertion_point(destructor:flyteidl.core.TaskLog)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskLog::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ttl_;
}

void TaskLog::ArenaDtor(void* object) {
  TaskLog* _this = reinterpret_cast< TaskLog* >(object);
  (void)_this;
}
void TaskLog::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskLog::InternalSwap(TaskLog* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata TaskLog::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fexecution_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fexecution_2eproto[4]);
}

// ===================================================================

class QualityOfServiceSpec::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& queueing_budget(const QualityOfServiceSpec* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
QualityOfServiceSpec::_Internal::queueing_budget(const QualityOfServiceSpec* msg) {
  return *msg->queueing_budget_;
}
void QualityOfServiceSpec::clear_queueing_budget() {
  if (GetArenaForAllocation() == nullptr && queueing_budget_ != nullptr) {
    delete queueing_budget_;
  }
  queueing_budget_ = nullptr;
}
QualityOfServiceSpec::QualityOfServiceSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.QualityOfServiceSpec)
}
QualityOfServiceSpec::QualityOfServiceSpec(const QualityOfServiceSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_queueing_budget()) {
    queueing_budget_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.queueing_budget_);
  } else {
    queueing_budget_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.QualityOfServiceSpec)
}

inline void QualityOfServiceSpec::SharedCtor() {
queueing_budget_ = nullptr;
}

QualityOfServiceSpec::~QualityOfServiceSpec() {
  // @@protoc_insertion_point(destructor:flyteidl.core.QualityOfServiceSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QualityOfServiceSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete queueing_budget_;
}

void QualityOfServiceSpec::ArenaDtor(void* object) {
  QualityOfServiceSpec* _this = reinterpret_cast< QualityOfServiceSpec* >(object);
  (void)_this;
}
void QualityOfServiceSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QualityOfServiceSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QualityOfServiceSpec::InternalSwap(QualityOfServiceSpec* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata QualityOfServiceSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fexecution_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fexecution_2eproto[5]);
}

// ===================================================================

class QualityOfService::_Internal {
 public:
  static const ::flyteidl::core::QualityOfServiceSpec& spec(const QualityOfService* msg);
};

const ::flyteidl::core::QualityOfServiceSpec&
QualityOfService::_Internal::spec(const QualityOfService* msg) {
  return *msg->designation_.spec_;
}
void QualityOfService::set_allocated_spec(::flyteidl::core::QualityOfServiceSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_designation();
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::QualityOfServiceSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    set_has_spec();
    designation_.spec_ = spec;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.QualityOfService.spec)
}
QualityOfService::QualityOfService(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.QualityOfService)
}
QualityOfService::QualityOfService(const QualityOfService& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_designation();
  switch (from.designation_case()) {
    case kTier: {
      _internal_set_tier(from._internal_tier());
      break;
    }
    case kSpec: {
      _internal_mutable_spec()->::flyteidl::core::QualityOfServiceSpec::MergeFrom(from._internal_spec());
      break;
    }
    case DESIGNATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.QualityOfService)
}

inline void QualityOfService::SharedCtor() {
clear_has_designation();
}

QualityOfService::~QualityOfService() {
  // @@protoc_insertion_point(destructor:flyteidl.core.QualityOfService)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QualityOfService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_designation()) {
    clear_designation();
  }
}

void QualityOfService::ArenaDtor(void* object) {
  QualityOfService* _this = reinterpret_cast< QualityOfService* >(object);
  (void)_this;
}
void QualityOfService::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QualityOfService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QualityOfService::clear_designation() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.QualityOfService)
  switch (designation_case()) {
    case kTier: {
      // No need to clear
      break;
    }
    case kSpec: {
      if (GetArenaForAllocation() == nullptr) {
        delete designation_.spec_;
      }
      break;
    }
    case DESIGNATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DESIGNATION_NOT_SET;
}


void QualityOfService::InternalSwap(QualityOfService* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata QualityOfService::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fexecution_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fexecution_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::core::WorkflowExecution* Arena::CreateMaybeMessage< ::flyteidl::core::WorkflowExecution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::WorkflowExecution >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::NodeExecution* Arena::CreateMaybeMessage< ::flyteidl::core::NodeExecution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::NodeExecution >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::TaskExecution* Arena::CreateMaybeMessage< ::flyteidl::core::TaskExecution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::TaskExecution >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::ExecutionError* Arena::CreateMaybeMessage< ::flyteidl::core::ExecutionError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::ExecutionError >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::TaskLog* Arena::CreateMaybeMessage< ::flyteidl::core::TaskLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::TaskLog >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::QualityOfServiceSpec* Arena::CreateMaybeMessage< ::flyteidl::core::QualityOfServiceSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::QualityOfServiceSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::QualityOfService* Arena::CreateMaybeMessage< ::flyteidl::core::QualityOfService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::QualityOfService >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
