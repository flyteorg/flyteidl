// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/workflow.proto

#include "flyteidl/admin/workflow.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fdescription_5fentity_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_DescriptionEntity_flyteidl_2fadmin_2fdescription_5fentity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fworkflow_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_WorkflowErrorExistsDifferentStructure_flyteidl_2fadmin_2fworkflow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fworkflow_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_WorkflowErrorExistsIdenticalStructure_flyteidl_2fadmin_2fworkflow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fworkflow_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_WorkflowClosure_flyteidl_2fadmin_2fworkflow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fworkflow_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_WorkflowSpec_flyteidl_2fadmin_2fworkflow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fworkflow_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Workflow_flyteidl_2fadmin_2fworkflow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fcompiler_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CompiledWorkflowClosure_flyteidl_2fcore_2fcompiler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fworkflow_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_WorkflowTemplate_flyteidl_2fcore_2fworkflow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace flyteidl {
namespace admin {
class WorkflowCreateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowCreateRequest> _instance;
} _WorkflowCreateRequest_default_instance_;
class WorkflowCreateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowCreateResponse> _instance;
} _WorkflowCreateResponse_default_instance_;
class WorkflowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Workflow> _instance;
} _Workflow_default_instance_;
class WorkflowListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowList> _instance;
} _WorkflowList_default_instance_;
class WorkflowSpecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowSpec> _instance;
} _WorkflowSpec_default_instance_;
class WorkflowClosureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowClosure> _instance;
} _WorkflowClosure_default_instance_;
class WorkflowErrorExistsDifferentStructureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowErrorExistsDifferentStructure> _instance;
} _WorkflowErrorExistsDifferentStructure_default_instance_;
class WorkflowErrorExistsIdenticalStructureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowErrorExistsIdenticalStructure> _instance;
} _WorkflowErrorExistsIdenticalStructure_default_instance_;
class CreateWorkflowFailureReasonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateWorkflowFailureReason> _instance;
  const ::flyteidl::admin::WorkflowErrorExistsDifferentStructure* exists_different_structure_;
  const ::flyteidl::admin::WorkflowErrorExistsIdenticalStructure* exists_identical_structure_;
} _CreateWorkflowFailureReason_default_instance_;
}  // namespace admin
}  // namespace flyteidl
static void InitDefaultsWorkflowCreateRequest_flyteidl_2fadmin_2fworkflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_WorkflowCreateRequest_default_instance_;
    new (ptr) ::flyteidl::admin::WorkflowCreateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::WorkflowCreateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_WorkflowCreateRequest_flyteidl_2fadmin_2fworkflow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsWorkflowCreateRequest_flyteidl_2fadmin_2fworkflow_2eproto}, {
      &scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_WorkflowSpec_flyteidl_2fadmin_2fworkflow_2eproto.base,}};

static void InitDefaultsWorkflowCreateResponse_flyteidl_2fadmin_2fworkflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_WorkflowCreateResponse_default_instance_;
    new (ptr) ::flyteidl::admin::WorkflowCreateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::WorkflowCreateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WorkflowCreateResponse_flyteidl_2fadmin_2fworkflow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWorkflowCreateResponse_flyteidl_2fadmin_2fworkflow_2eproto}, {}};

static void InitDefaultsWorkflow_flyteidl_2fadmin_2fworkflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_Workflow_default_instance_;
    new (ptr) ::flyteidl::admin::Workflow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::Workflow::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Workflow_flyteidl_2fadmin_2fworkflow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsWorkflow_flyteidl_2fadmin_2fworkflow_2eproto}, {
      &scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_WorkflowClosure_flyteidl_2fadmin_2fworkflow_2eproto.base,}};

static void InitDefaultsWorkflowList_flyteidl_2fadmin_2fworkflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_WorkflowList_default_instance_;
    new (ptr) ::flyteidl::admin::WorkflowList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::WorkflowList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WorkflowList_flyteidl_2fadmin_2fworkflow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWorkflowList_flyteidl_2fadmin_2fworkflow_2eproto}, {
      &scc_info_Workflow_flyteidl_2fadmin_2fworkflow_2eproto.base,}};

static void InitDefaultsWorkflowSpec_flyteidl_2fadmin_2fworkflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_WorkflowSpec_default_instance_;
    new (ptr) ::flyteidl::admin::WorkflowSpec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::WorkflowSpec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_WorkflowSpec_flyteidl_2fadmin_2fworkflow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsWorkflowSpec_flyteidl_2fadmin_2fworkflow_2eproto}, {
      &scc_info_WorkflowTemplate_flyteidl_2fcore_2fworkflow_2eproto.base,
      &scc_info_DescriptionEntity_flyteidl_2fadmin_2fdescription_5fentity_2eproto.base,}};

static void InitDefaultsWorkflowClosure_flyteidl_2fadmin_2fworkflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_WorkflowClosure_default_instance_;
    new (ptr) ::flyteidl::admin::WorkflowClosure();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::WorkflowClosure::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_WorkflowClosure_flyteidl_2fadmin_2fworkflow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsWorkflowClosure_flyteidl_2fadmin_2fworkflow_2eproto}, {
      &scc_info_CompiledWorkflowClosure_flyteidl_2fcore_2fcompiler_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsWorkflowErrorExistsDifferentStructure_flyteidl_2fadmin_2fworkflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_WorkflowErrorExistsDifferentStructure_default_instance_;
    new (ptr) ::flyteidl::admin::WorkflowErrorExistsDifferentStructure();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::WorkflowErrorExistsDifferentStructure::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WorkflowErrorExistsDifferentStructure_flyteidl_2fadmin_2fworkflow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWorkflowErrorExistsDifferentStructure_flyteidl_2fadmin_2fworkflow_2eproto}, {
      &scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsWorkflowErrorExistsIdenticalStructure_flyteidl_2fadmin_2fworkflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_WorkflowErrorExistsIdenticalStructure_default_instance_;
    new (ptr) ::flyteidl::admin::WorkflowErrorExistsIdenticalStructure();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::WorkflowErrorExistsIdenticalStructure::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WorkflowErrorExistsIdenticalStructure_flyteidl_2fadmin_2fworkflow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWorkflowErrorExistsIdenticalStructure_flyteidl_2fadmin_2fworkflow_2eproto}, {
      &scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsCreateWorkflowFailureReason_flyteidl_2fadmin_2fworkflow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_CreateWorkflowFailureReason_default_instance_;
    new (ptr) ::flyteidl::admin::CreateWorkflowFailureReason();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::CreateWorkflowFailureReason::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CreateWorkflowFailureReason_flyteidl_2fadmin_2fworkflow_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCreateWorkflowFailureReason_flyteidl_2fadmin_2fworkflow_2eproto}, {
      &scc_info_WorkflowErrorExistsDifferentStructure_flyteidl_2fadmin_2fworkflow_2eproto.base,
      &scc_info_WorkflowErrorExistsIdenticalStructure_flyteidl_2fadmin_2fworkflow_2eproto.base,}};

void InitDefaults_flyteidl_2fadmin_2fworkflow_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_WorkflowCreateRequest_flyteidl_2fadmin_2fworkflow_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorkflowCreateResponse_flyteidl_2fadmin_2fworkflow_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Workflow_flyteidl_2fadmin_2fworkflow_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorkflowList_flyteidl_2fadmin_2fworkflow_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorkflowSpec_flyteidl_2fadmin_2fworkflow_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorkflowClosure_flyteidl_2fadmin_2fworkflow_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorkflowErrorExistsDifferentStructure_flyteidl_2fadmin_2fworkflow_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorkflowErrorExistsIdenticalStructure_flyteidl_2fadmin_2fworkflow_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateWorkflowFailureReason_flyteidl_2fadmin_2fworkflow_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fadmin_2fworkflow_2eproto[9];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fadmin_2fworkflow_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fadmin_2fworkflow_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fadmin_2fworkflow_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowCreateRequest, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowCreateRequest, spec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowCreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Workflow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Workflow, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Workflow, closure_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Workflow, short_description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowList, workflows_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowList, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowSpec, template__),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowSpec, sub_workflows_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowSpec, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowClosure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowClosure, compiled_workflow_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowClosure, created_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowErrorExistsDifferentStructure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowErrorExistsDifferentStructure, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowErrorExistsIdenticalStructure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowErrorExistsIdenticalStructure, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::CreateWorkflowFailureReason, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::CreateWorkflowFailureReason, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::admin::CreateWorkflowFailureReasonDefaultTypeInternal, exists_different_structure_),
  offsetof(::flyteidl::admin::CreateWorkflowFailureReasonDefaultTypeInternal, exists_identical_structure_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::CreateWorkflowFailureReason, reason_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::admin::WorkflowCreateRequest)},
  { 7, -1, sizeof(::flyteidl::admin::WorkflowCreateResponse)},
  { 12, -1, sizeof(::flyteidl::admin::Workflow)},
  { 20, -1, sizeof(::flyteidl::admin::WorkflowList)},
  { 27, -1, sizeof(::flyteidl::admin::WorkflowSpec)},
  { 35, -1, sizeof(::flyteidl::admin::WorkflowClosure)},
  { 42, -1, sizeof(::flyteidl::admin::WorkflowErrorExistsDifferentStructure)},
  { 48, -1, sizeof(::flyteidl::admin::WorkflowErrorExistsIdenticalStructure)},
  { 54, -1, sizeof(::flyteidl::admin::CreateWorkflowFailureReason)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_WorkflowCreateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_WorkflowCreateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_Workflow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_WorkflowList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_WorkflowSpec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_WorkflowClosure_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_WorkflowErrorExistsDifferentStructure_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_WorkflowErrorExistsIdenticalStructure_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_CreateWorkflowFailureReason_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fadmin_2fworkflow_2eproto = {
  {}, AddDescriptors_flyteidl_2fadmin_2fworkflow_2eproto, "flyteidl/admin/workflow.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fadmin_2fworkflow_2eproto::offsets,
  file_level_metadata_flyteidl_2fadmin_2fworkflow_2eproto, 9, file_level_enum_descriptors_flyteidl_2fadmin_2fworkflow_2eproto, file_level_service_descriptors_flyteidl_2fadmin_2fworkflow_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fadmin_2fworkflow_2eproto[] =
  "\n\035flyteidl/admin/workflow.proto\022\016flyteid"
  "l.admin\032\034flyteidl/core/compiler.proto\032\036f"
  "lyteidl/core/identifier.proto\032\034flyteidl/"
  "core/workflow.proto\032\'flyteidl/admin/desc"
  "ription_entity.proto\032\037google/protobuf/ti"
  "mestamp.proto\"j\n\025WorkflowCreateRequest\022%"
  "\n\002id\030\001 \001(\0132\031.flyteidl.core.Identifier\022*\n"
  "\004spec\030\002 \001(\0132\034.flyteidl.admin.WorkflowSpe"
  "c\"\030\n\026WorkflowCreateResponse\"~\n\010Workflow\022"
  "%\n\002id\030\001 \001(\0132\031.flyteidl.core.Identifier\0220"
  "\n\007closure\030\002 \001(\0132\037.flyteidl.admin.Workflo"
  "wClosure\022\031\n\021short_description\030\003 \001(\t\"J\n\014W"
  "orkflowList\022+\n\tworkflows\030\001 \003(\0132\030.flyteid"
  "l.admin.Workflow\022\r\n\005token\030\002 \001(\t\"\261\001\n\014Work"
  "flowSpec\0221\n\010template\030\001 \001(\0132\037.flyteidl.co"
  "re.WorkflowTemplate\0226\n\rsub_workflows\030\002 \003"
  "(\0132\037.flyteidl.core.WorkflowTemplate\0226\n\013d"
  "escription\030\003 \001(\0132!.flyteidl.admin.Descri"
  "ptionEntity\"\204\001\n\017WorkflowClosure\022A\n\021compi"
  "led_workflow\030\001 \001(\0132&.flyteidl.core.Compi"
  "ledWorkflowClosure\022.\n\ncreated_at\030\002 \001(\0132\032"
  ".google.protobuf.Timestamp\"N\n%WorkflowEr"
  "rorExistsDifferentStructure\022%\n\002id\030\001 \001(\0132"
  "\031.flyteidl.core.Identifier\"N\n%WorkflowEr"
  "rorExistsIdenticalStructure\022%\n\002id\030\001 \001(\0132"
  "\031.flyteidl.core.Identifier\"\341\001\n\033CreateWor"
  "kflowFailureReason\022[\n\032exists_different_s"
  "tructure\030\001 \001(\01325.flyteidl.admin.Workflow"
  "ErrorExistsDifferentStructureH\000\022[\n\032exist"
  "s_identical_structure\030\002 \001(\01325.flyteidl.a"
  "dmin.WorkflowErrorExistsIdenticalStructu"
  "reH\000B\010\n\006reasonB7Z5github.com/flyteorg/fl"
  "yteidl/gen/pb-go/flyteidl/adminb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2fworkflow_2eproto = {
  false, InitDefaults_flyteidl_2fadmin_2fworkflow_2eproto, 
  descriptor_table_protodef_flyteidl_2fadmin_2fworkflow_2eproto,
  "flyteidl/admin/workflow.proto", &assign_descriptors_table_flyteidl_2fadmin_2fworkflow_2eproto, 1319,
};

void AddDescriptors_flyteidl_2fadmin_2fworkflow_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[5] =
  {
    ::AddDescriptors_flyteidl_2fcore_2fcompiler_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fidentifier_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fworkflow_2eproto,
    ::AddDescriptors_flyteidl_2fadmin_2fdescription_5fentity_2eproto,
    ::AddDescriptors_google_2fprotobuf_2ftimestamp_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fadmin_2fworkflow_2eproto, deps, 5);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fadmin_2fworkflow_2eproto = []() { AddDescriptors_flyteidl_2fadmin_2fworkflow_2eproto(); return true; }();
namespace flyteidl {
namespace admin {

// ===================================================================

void WorkflowCreateRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_WorkflowCreateRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
  ::flyteidl::admin::_WorkflowCreateRequest_default_instance_._instance.get_mutable()->spec_ = const_cast< ::flyteidl::admin::WorkflowSpec*>(
      ::flyteidl::admin::WorkflowSpec::internal_default_instance());
}
class WorkflowCreateRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::Identifier& id(const WorkflowCreateRequest* msg);
  static const ::flyteidl::admin::WorkflowSpec& spec(const WorkflowCreateRequest* msg);
};

const ::flyteidl::core::Identifier&
WorkflowCreateRequest::HasBitSetters::id(const WorkflowCreateRequest* msg) {
  return *msg->id_;
}
const ::flyteidl::admin::WorkflowSpec&
WorkflowCreateRequest::HasBitSetters::spec(const WorkflowCreateRequest* msg) {
  return *msg->spec_;
}
void WorkflowCreateRequest::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowCreateRequest::kIdFieldNumber;
const int WorkflowCreateRequest::kSpecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowCreateRequest::WorkflowCreateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.WorkflowCreateRequest)
}
WorkflowCreateRequest::WorkflowCreateRequest(const WorkflowCreateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_spec()) {
    spec_ = new ::flyteidl::admin::WorkflowSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowCreateRequest)
}

void WorkflowCreateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WorkflowCreateRequest_flyteidl_2fadmin_2fworkflow_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spec_) -
      reinterpret_cast<char*>(&id_)) + sizeof(spec_));
}

WorkflowCreateRequest::~WorkflowCreateRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowCreateRequest)
  SharedDtor();
}

void WorkflowCreateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete spec_;
}

void WorkflowCreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkflowCreateRequest& WorkflowCreateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WorkflowCreateRequest_flyteidl_2fadmin_2fworkflow_2eproto.base);
  return *internal_default_instance();
}


void WorkflowCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.WorkflowCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorkflowCreateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WorkflowCreateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Identifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.WorkflowSpec spec = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::WorkflowSpec::_InternalParse;
        object = msg->mutable_spec();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkflowCreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.WorkflowCreateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.WorkflowSpec spec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.WorkflowCreateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.WorkflowCreateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorkflowCreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.WorkflowCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  // .flyteidl.admin.WorkflowSpec spec = 2;
  if (this->has_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::spec(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.WorkflowCreateRequest)
}

::google::protobuf::uint8* WorkflowCreateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.WorkflowCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  // .flyteidl.admin.WorkflowSpec spec = 2;
  if (this->has_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::spec(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.WorkflowCreateRequest)
  return target;
}

size_t WorkflowCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.WorkflowCreateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .flyteidl.admin.WorkflowSpec spec = 2;
  if (this->has_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkflowCreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.WorkflowCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowCreateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<WorkflowCreateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.WorkflowCreateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.WorkflowCreateRequest)
    MergeFrom(*source);
  }
}

void WorkflowCreateRequest::MergeFrom(const WorkflowCreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.WorkflowCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::Identifier::MergeFrom(from.id());
  }
  if (from.has_spec()) {
    mutable_spec()->::flyteidl::admin::WorkflowSpec::MergeFrom(from.spec());
  }
}

void WorkflowCreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.WorkflowCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowCreateRequest::CopyFrom(const WorkflowCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.WorkflowCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowCreateRequest::IsInitialized() const {
  return true;
}

void WorkflowCreateRequest::Swap(WorkflowCreateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowCreateRequest::InternalSwap(WorkflowCreateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(spec_, other->spec_);
}

::google::protobuf::Metadata WorkflowCreateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fworkflow_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fworkflow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WorkflowCreateResponse::InitAsDefaultInstance() {
}
class WorkflowCreateResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowCreateResponse::WorkflowCreateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.WorkflowCreateResponse)
}
WorkflowCreateResponse::WorkflowCreateResponse(const WorkflowCreateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowCreateResponse)
}

void WorkflowCreateResponse::SharedCtor() {
}

WorkflowCreateResponse::~WorkflowCreateResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowCreateResponse)
  SharedDtor();
}

void WorkflowCreateResponse::SharedDtor() {
}

void WorkflowCreateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkflowCreateResponse& WorkflowCreateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WorkflowCreateResponse_flyteidl_2fadmin_2fworkflow_2eproto.base);
  return *internal_default_instance();
}


void WorkflowCreateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.WorkflowCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorkflowCreateResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WorkflowCreateResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkflowCreateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.WorkflowCreateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.WorkflowCreateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.WorkflowCreateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorkflowCreateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.WorkflowCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.WorkflowCreateResponse)
}

::google::protobuf::uint8* WorkflowCreateResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.WorkflowCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.WorkflowCreateResponse)
  return target;
}

size_t WorkflowCreateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.WorkflowCreateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkflowCreateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.WorkflowCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowCreateResponse* source =
      ::google::protobuf::DynamicCastToGenerated<WorkflowCreateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.WorkflowCreateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.WorkflowCreateResponse)
    MergeFrom(*source);
  }
}

void WorkflowCreateResponse::MergeFrom(const WorkflowCreateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.WorkflowCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WorkflowCreateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.WorkflowCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowCreateResponse::CopyFrom(const WorkflowCreateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.WorkflowCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowCreateResponse::IsInitialized() const {
  return true;
}

void WorkflowCreateResponse::Swap(WorkflowCreateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowCreateResponse::InternalSwap(WorkflowCreateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WorkflowCreateResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fworkflow_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fworkflow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Workflow::InitAsDefaultInstance() {
  ::flyteidl::admin::_Workflow_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
  ::flyteidl::admin::_Workflow_default_instance_._instance.get_mutable()->closure_ = const_cast< ::flyteidl::admin::WorkflowClosure*>(
      ::flyteidl::admin::WorkflowClosure::internal_default_instance());
}
class Workflow::HasBitSetters {
 public:
  static const ::flyteidl::core::Identifier& id(const Workflow* msg);
  static const ::flyteidl::admin::WorkflowClosure& closure(const Workflow* msg);
};

const ::flyteidl::core::Identifier&
Workflow::HasBitSetters::id(const Workflow* msg) {
  return *msg->id_;
}
const ::flyteidl::admin::WorkflowClosure&
Workflow::HasBitSetters::closure(const Workflow* msg) {
  return *msg->closure_;
}
void Workflow::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Workflow::kIdFieldNumber;
const int Workflow::kClosureFieldNumber;
const int Workflow::kShortDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Workflow::Workflow()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.Workflow)
}
Workflow::Workflow(const Workflow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  short_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.short_description().size() > 0) {
    short_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.short_description_);
  }
  if (from.has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_closure()) {
    closure_ = new ::flyteidl::admin::WorkflowClosure(*from.closure_);
  } else {
    closure_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Workflow)
}

void Workflow::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Workflow_flyteidl_2fadmin_2fworkflow_2eproto.base);
  short_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&closure_) -
      reinterpret_cast<char*>(&id_)) + sizeof(closure_));
}

Workflow::~Workflow() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Workflow)
  SharedDtor();
}

void Workflow::SharedDtor() {
  short_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete closure_;
}

void Workflow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Workflow& Workflow::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Workflow_flyteidl_2fadmin_2fworkflow_2eproto.base);
  return *internal_default_instance();
}


void Workflow::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.Workflow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  short_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && closure_ != nullptr) {
    delete closure_;
  }
  closure_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Workflow::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Workflow*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Identifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.WorkflowClosure closure = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::WorkflowClosure::_InternalParse;
        object = msg->mutable_closure();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string short_description = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.Workflow.short_description");
        object = msg->mutable_short_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Workflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.Workflow)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.WorkflowClosure closure = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_closure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string short_description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_short_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->short_description().data(), static_cast<int>(this->short_description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.Workflow.short_description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.Workflow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.Workflow)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Workflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.Workflow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  // .flyteidl.admin.WorkflowClosure closure = 2;
  if (this->has_closure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::closure(this), output);
  }

  // string short_description = 3;
  if (this->short_description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->short_description().data(), static_cast<int>(this->short_description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Workflow.short_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->short_description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.Workflow)
}

::google::protobuf::uint8* Workflow::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.Workflow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  // .flyteidl.admin.WorkflowClosure closure = 2;
  if (this->has_closure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::closure(this), target);
  }

  // string short_description = 3;
  if (this->short_description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->short_description().data(), static_cast<int>(this->short_description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Workflow.short_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->short_description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.Workflow)
  return target;
}

size_t Workflow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.Workflow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string short_description = 3;
  if (this->short_description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->short_description());
  }

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .flyteidl.admin.WorkflowClosure closure = 2;
  if (this->has_closure()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *closure_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Workflow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.Workflow)
  GOOGLE_DCHECK_NE(&from, this);
  const Workflow* source =
      ::google::protobuf::DynamicCastToGenerated<Workflow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.Workflow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.Workflow)
    MergeFrom(*source);
  }
}

void Workflow::MergeFrom(const Workflow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.Workflow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.short_description().size() > 0) {

    short_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.short_description_);
  }
  if (from.has_id()) {
    mutable_id()->::flyteidl::core::Identifier::MergeFrom(from.id());
  }
  if (from.has_closure()) {
    mutable_closure()->::flyteidl::admin::WorkflowClosure::MergeFrom(from.closure());
  }
}

void Workflow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.Workflow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Workflow::CopyFrom(const Workflow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.Workflow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Workflow::IsInitialized() const {
  return true;
}

void Workflow::Swap(Workflow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Workflow::InternalSwap(Workflow* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  short_description_.Swap(&other->short_description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(closure_, other->closure_);
}

::google::protobuf::Metadata Workflow::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fworkflow_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fworkflow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WorkflowList::InitAsDefaultInstance() {
}
class WorkflowList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowList::kWorkflowsFieldNumber;
const int WorkflowList::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowList::WorkflowList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.WorkflowList)
}
WorkflowList::WorkflowList(const WorkflowList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      workflows_(from.workflows_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowList)
}

void WorkflowList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WorkflowList_flyteidl_2fadmin_2fworkflow_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

WorkflowList::~WorkflowList() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowList)
  SharedDtor();
}

void WorkflowList::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WorkflowList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkflowList& WorkflowList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WorkflowList_flyteidl_2fadmin_2fworkflow_2eproto.base);
  return *internal_default_instance();
}


void WorkflowList::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.WorkflowList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workflows_.Clear();
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorkflowList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WorkflowList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .flyteidl.admin.Workflow workflows = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::admin::Workflow::_InternalParse;
          object = msg->add_workflows();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.WorkflowList.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkflowList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.WorkflowList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .flyteidl.admin.Workflow workflows = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_workflows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.WorkflowList.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.WorkflowList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.WorkflowList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorkflowList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.WorkflowList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.admin.Workflow workflows = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->workflows_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->workflows(static_cast<int>(i)),
      output);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.WorkflowList.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.WorkflowList)
}

::google::protobuf::uint8* WorkflowList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.WorkflowList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.admin.Workflow workflows = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->workflows_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->workflows(static_cast<int>(i)), target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.WorkflowList.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.WorkflowList)
  return target;
}

size_t WorkflowList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.WorkflowList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.admin.Workflow workflows = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->workflows_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->workflows(static_cast<int>(i)));
    }
  }

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkflowList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.WorkflowList)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowList* source =
      ::google::protobuf::DynamicCastToGenerated<WorkflowList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.WorkflowList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.WorkflowList)
    MergeFrom(*source);
  }
}

void WorkflowList::MergeFrom(const WorkflowList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.WorkflowList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  workflows_.MergeFrom(from.workflows_);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void WorkflowList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.WorkflowList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowList::CopyFrom(const WorkflowList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.WorkflowList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowList::IsInitialized() const {
  return true;
}

void WorkflowList::Swap(WorkflowList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowList::InternalSwap(WorkflowList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&workflows_)->InternalSwap(CastToBase(&other->workflows_));
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata WorkflowList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fworkflow_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fworkflow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WorkflowSpec::InitAsDefaultInstance() {
  ::flyteidl::admin::_WorkflowSpec_default_instance_._instance.get_mutable()->template__ = const_cast< ::flyteidl::core::WorkflowTemplate*>(
      ::flyteidl::core::WorkflowTemplate::internal_default_instance());
  ::flyteidl::admin::_WorkflowSpec_default_instance_._instance.get_mutable()->description_ = const_cast< ::flyteidl::admin::DescriptionEntity*>(
      ::flyteidl::admin::DescriptionEntity::internal_default_instance());
}
class WorkflowSpec::HasBitSetters {
 public:
  static const ::flyteidl::core::WorkflowTemplate& template_(const WorkflowSpec* msg);
  static const ::flyteidl::admin::DescriptionEntity& description(const WorkflowSpec* msg);
};

const ::flyteidl::core::WorkflowTemplate&
WorkflowSpec::HasBitSetters::template_(const WorkflowSpec* msg) {
  return *msg->template__;
}
const ::flyteidl::admin::DescriptionEntity&
WorkflowSpec::HasBitSetters::description(const WorkflowSpec* msg) {
  return *msg->description_;
}
void WorkflowSpec::clear_template_() {
  if (GetArenaNoVirtual() == nullptr && template__ != nullptr) {
    delete template__;
  }
  template__ = nullptr;
}
void WorkflowSpec::clear_sub_workflows() {
  sub_workflows_.Clear();
}
void WorkflowSpec::clear_description() {
  if (GetArenaNoVirtual() == nullptr && description_ != nullptr) {
    delete description_;
  }
  description_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowSpec::kTemplateFieldNumber;
const int WorkflowSpec::kSubWorkflowsFieldNumber;
const int WorkflowSpec::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowSpec::WorkflowSpec()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.WorkflowSpec)
}
WorkflowSpec::WorkflowSpec(const WorkflowSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      sub_workflows_(from.sub_workflows_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_template_()) {
    template__ = new ::flyteidl::core::WorkflowTemplate(*from.template__);
  } else {
    template__ = nullptr;
  }
  if (from.has_description()) {
    description_ = new ::flyteidl::admin::DescriptionEntity(*from.description_);
  } else {
    description_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowSpec)
}

void WorkflowSpec::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WorkflowSpec_flyteidl_2fadmin_2fworkflow_2eproto.base);
  ::memset(&template__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&description_) -
      reinterpret_cast<char*>(&template__)) + sizeof(description_));
}

WorkflowSpec::~WorkflowSpec() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowSpec)
  SharedDtor();
}

void WorkflowSpec::SharedDtor() {
  if (this != internal_default_instance()) delete template__;
  if (this != internal_default_instance()) delete description_;
}

void WorkflowSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkflowSpec& WorkflowSpec::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WorkflowSpec_flyteidl_2fadmin_2fworkflow_2eproto.base);
  return *internal_default_instance();
}


void WorkflowSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.WorkflowSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sub_workflows_.Clear();
  if (GetArenaNoVirtual() == nullptr && template__ != nullptr) {
    delete template__;
  }
  template__ = nullptr;
  if (GetArenaNoVirtual() == nullptr && description_ != nullptr) {
    delete description_;
  }
  description_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorkflowSpec::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WorkflowSpec*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.WorkflowTemplate template = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::WorkflowTemplate::_InternalParse;
        object = msg->mutable_template_();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .flyteidl.core.WorkflowTemplate sub_workflows = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::core::WorkflowTemplate::_InternalParse;
          object = msg->add_sub_workflows();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // .flyteidl.admin.DescriptionEntity description = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::DescriptionEntity::_InternalParse;
        object = msg->mutable_description();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkflowSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.WorkflowSpec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.WorkflowTemplate template = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_template_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.core.WorkflowTemplate sub_workflows = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sub_workflows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.DescriptionEntity description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.WorkflowSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.WorkflowSpec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorkflowSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.WorkflowSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowTemplate template = 1;
  if (this->has_template_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::template_(this), output);
  }

  // repeated .flyteidl.core.WorkflowTemplate sub_workflows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sub_workflows_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->sub_workflows(static_cast<int>(i)),
      output);
  }

  // .flyteidl.admin.DescriptionEntity description = 3;
  if (this->has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::description(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.WorkflowSpec)
}

::google::protobuf::uint8* WorkflowSpec::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.WorkflowSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.WorkflowTemplate template = 1;
  if (this->has_template_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::template_(this), target);
  }

  // repeated .flyteidl.core.WorkflowTemplate sub_workflows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sub_workflows_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->sub_workflows(static_cast<int>(i)), target);
  }

  // .flyteidl.admin.DescriptionEntity description = 3;
  if (this->has_description()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::description(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.WorkflowSpec)
  return target;
}

size_t WorkflowSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.WorkflowSpec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.core.WorkflowTemplate sub_workflows = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->sub_workflows_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sub_workflows(static_cast<int>(i)));
    }
  }

  // .flyteidl.core.WorkflowTemplate template = 1;
  if (this->has_template_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *template__);
  }

  // .flyteidl.admin.DescriptionEntity description = 3;
  if (this->has_description()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *description_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkflowSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.WorkflowSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowSpec* source =
      ::google::protobuf::DynamicCastToGenerated<WorkflowSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.WorkflowSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.WorkflowSpec)
    MergeFrom(*source);
  }
}

void WorkflowSpec::MergeFrom(const WorkflowSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.WorkflowSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sub_workflows_.MergeFrom(from.sub_workflows_);
  if (from.has_template_()) {
    mutable_template_()->::flyteidl::core::WorkflowTemplate::MergeFrom(from.template_());
  }
  if (from.has_description()) {
    mutable_description()->::flyteidl::admin::DescriptionEntity::MergeFrom(from.description());
  }
}

void WorkflowSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.WorkflowSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowSpec::CopyFrom(const WorkflowSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.WorkflowSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowSpec::IsInitialized() const {
  return true;
}

void WorkflowSpec::Swap(WorkflowSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowSpec::InternalSwap(WorkflowSpec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&sub_workflows_)->InternalSwap(CastToBase(&other->sub_workflows_));
  swap(template__, other->template__);
  swap(description_, other->description_);
}

::google::protobuf::Metadata WorkflowSpec::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fworkflow_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fworkflow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WorkflowClosure::InitAsDefaultInstance() {
  ::flyteidl::admin::_WorkflowClosure_default_instance_._instance.get_mutable()->compiled_workflow_ = const_cast< ::flyteidl::core::CompiledWorkflowClosure*>(
      ::flyteidl::core::CompiledWorkflowClosure::internal_default_instance());
  ::flyteidl::admin::_WorkflowClosure_default_instance_._instance.get_mutable()->created_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class WorkflowClosure::HasBitSetters {
 public:
  static const ::flyteidl::core::CompiledWorkflowClosure& compiled_workflow(const WorkflowClosure* msg);
  static const ::google::protobuf::Timestamp& created_at(const WorkflowClosure* msg);
};

const ::flyteidl::core::CompiledWorkflowClosure&
WorkflowClosure::HasBitSetters::compiled_workflow(const WorkflowClosure* msg) {
  return *msg->compiled_workflow_;
}
const ::google::protobuf::Timestamp&
WorkflowClosure::HasBitSetters::created_at(const WorkflowClosure* msg) {
  return *msg->created_at_;
}
void WorkflowClosure::clear_compiled_workflow() {
  if (GetArenaNoVirtual() == nullptr && compiled_workflow_ != nullptr) {
    delete compiled_workflow_;
  }
  compiled_workflow_ = nullptr;
}
void WorkflowClosure::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowClosure::kCompiledWorkflowFieldNumber;
const int WorkflowClosure::kCreatedAtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowClosure::WorkflowClosure()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.WorkflowClosure)
}
WorkflowClosure::WorkflowClosure(const WorkflowClosure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_compiled_workflow()) {
    compiled_workflow_ = new ::flyteidl::core::CompiledWorkflowClosure(*from.compiled_workflow_);
  } else {
    compiled_workflow_ = nullptr;
  }
  if (from.has_created_at()) {
    created_at_ = new ::google::protobuf::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowClosure)
}

void WorkflowClosure::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WorkflowClosure_flyteidl_2fadmin_2fworkflow_2eproto.base);
  ::memset(&compiled_workflow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&created_at_) -
      reinterpret_cast<char*>(&compiled_workflow_)) + sizeof(created_at_));
}

WorkflowClosure::~WorkflowClosure() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowClosure)
  SharedDtor();
}

void WorkflowClosure::SharedDtor() {
  if (this != internal_default_instance()) delete compiled_workflow_;
  if (this != internal_default_instance()) delete created_at_;
}

void WorkflowClosure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkflowClosure& WorkflowClosure::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WorkflowClosure_flyteidl_2fadmin_2fworkflow_2eproto.base);
  return *internal_default_instance();
}


void WorkflowClosure::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.WorkflowClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && compiled_workflow_ != nullptr) {
    delete compiled_workflow_;
  }
  compiled_workflow_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorkflowClosure::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WorkflowClosure*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.CompiledWorkflowClosure compiled_workflow = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::CompiledWorkflowClosure::_InternalParse;
        object = msg->mutable_compiled_workflow();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp created_at = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_created_at();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkflowClosure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.WorkflowClosure)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.CompiledWorkflowClosure compiled_workflow = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_compiled_workflow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp created_at = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_created_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.WorkflowClosure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.WorkflowClosure)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorkflowClosure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.WorkflowClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.CompiledWorkflowClosure compiled_workflow = 1;
  if (this->has_compiled_workflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::compiled_workflow(this), output);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::created_at(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.WorkflowClosure)
}

::google::protobuf::uint8* WorkflowClosure::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.WorkflowClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.CompiledWorkflowClosure compiled_workflow = 1;
  if (this->has_compiled_workflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::compiled_workflow(this), target);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::created_at(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.WorkflowClosure)
  return target;
}

size_t WorkflowClosure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.WorkflowClosure)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.CompiledWorkflowClosure compiled_workflow = 1;
  if (this->has_compiled_workflow()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *compiled_workflow_);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkflowClosure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.WorkflowClosure)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowClosure* source =
      ::google::protobuf::DynamicCastToGenerated<WorkflowClosure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.WorkflowClosure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.WorkflowClosure)
    MergeFrom(*source);
  }
}

void WorkflowClosure::MergeFrom(const WorkflowClosure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.WorkflowClosure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_compiled_workflow()) {
    mutable_compiled_workflow()->::flyteidl::core::CompiledWorkflowClosure::MergeFrom(from.compiled_workflow());
  }
  if (from.has_created_at()) {
    mutable_created_at()->::google::protobuf::Timestamp::MergeFrom(from.created_at());
  }
}

void WorkflowClosure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.WorkflowClosure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowClosure::CopyFrom(const WorkflowClosure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.WorkflowClosure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowClosure::IsInitialized() const {
  return true;
}

void WorkflowClosure::Swap(WorkflowClosure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowClosure::InternalSwap(WorkflowClosure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(compiled_workflow_, other->compiled_workflow_);
  swap(created_at_, other->created_at_);
}

::google::protobuf::Metadata WorkflowClosure::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fworkflow_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fworkflow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WorkflowErrorExistsDifferentStructure::InitAsDefaultInstance() {
  ::flyteidl::admin::_WorkflowErrorExistsDifferentStructure_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
}
class WorkflowErrorExistsDifferentStructure::HasBitSetters {
 public:
  static const ::flyteidl::core::Identifier& id(const WorkflowErrorExistsDifferentStructure* msg);
};

const ::flyteidl::core::Identifier&
WorkflowErrorExistsDifferentStructure::HasBitSetters::id(const WorkflowErrorExistsDifferentStructure* msg) {
  return *msg->id_;
}
void WorkflowErrorExistsDifferentStructure::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowErrorExistsDifferentStructure::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowErrorExistsDifferentStructure::WorkflowErrorExistsDifferentStructure()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.WorkflowErrorExistsDifferentStructure)
}
WorkflowErrorExistsDifferentStructure::WorkflowErrorExistsDifferentStructure(const WorkflowErrorExistsDifferentStructure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowErrorExistsDifferentStructure)
}

void WorkflowErrorExistsDifferentStructure::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WorkflowErrorExistsDifferentStructure_flyteidl_2fadmin_2fworkflow_2eproto.base);
  id_ = nullptr;
}

WorkflowErrorExistsDifferentStructure::~WorkflowErrorExistsDifferentStructure() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowErrorExistsDifferentStructure)
  SharedDtor();
}

void WorkflowErrorExistsDifferentStructure::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void WorkflowErrorExistsDifferentStructure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkflowErrorExistsDifferentStructure& WorkflowErrorExistsDifferentStructure::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WorkflowErrorExistsDifferentStructure_flyteidl_2fadmin_2fworkflow_2eproto.base);
  return *internal_default_instance();
}


void WorkflowErrorExistsDifferentStructure::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.WorkflowErrorExistsDifferentStructure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorkflowErrorExistsDifferentStructure::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WorkflowErrorExistsDifferentStructure*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Identifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkflowErrorExistsDifferentStructure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.WorkflowErrorExistsDifferentStructure)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.WorkflowErrorExistsDifferentStructure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.WorkflowErrorExistsDifferentStructure)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorkflowErrorExistsDifferentStructure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.WorkflowErrorExistsDifferentStructure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.WorkflowErrorExistsDifferentStructure)
}

::google::protobuf::uint8* WorkflowErrorExistsDifferentStructure::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.WorkflowErrorExistsDifferentStructure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.WorkflowErrorExistsDifferentStructure)
  return target;
}

size_t WorkflowErrorExistsDifferentStructure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.WorkflowErrorExistsDifferentStructure)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkflowErrorExistsDifferentStructure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.WorkflowErrorExistsDifferentStructure)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowErrorExistsDifferentStructure* source =
      ::google::protobuf::DynamicCastToGenerated<WorkflowErrorExistsDifferentStructure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.WorkflowErrorExistsDifferentStructure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.WorkflowErrorExistsDifferentStructure)
    MergeFrom(*source);
  }
}

void WorkflowErrorExistsDifferentStructure::MergeFrom(const WorkflowErrorExistsDifferentStructure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.WorkflowErrorExistsDifferentStructure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::Identifier::MergeFrom(from.id());
  }
}

void WorkflowErrorExistsDifferentStructure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.WorkflowErrorExistsDifferentStructure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowErrorExistsDifferentStructure::CopyFrom(const WorkflowErrorExistsDifferentStructure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.WorkflowErrorExistsDifferentStructure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowErrorExistsDifferentStructure::IsInitialized() const {
  return true;
}

void WorkflowErrorExistsDifferentStructure::Swap(WorkflowErrorExistsDifferentStructure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowErrorExistsDifferentStructure::InternalSwap(WorkflowErrorExistsDifferentStructure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata WorkflowErrorExistsDifferentStructure::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fworkflow_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fworkflow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WorkflowErrorExistsIdenticalStructure::InitAsDefaultInstance() {
  ::flyteidl::admin::_WorkflowErrorExistsIdenticalStructure_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
}
class WorkflowErrorExistsIdenticalStructure::HasBitSetters {
 public:
  static const ::flyteidl::core::Identifier& id(const WorkflowErrorExistsIdenticalStructure* msg);
};

const ::flyteidl::core::Identifier&
WorkflowErrorExistsIdenticalStructure::HasBitSetters::id(const WorkflowErrorExistsIdenticalStructure* msg) {
  return *msg->id_;
}
void WorkflowErrorExistsIdenticalStructure::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowErrorExistsIdenticalStructure::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowErrorExistsIdenticalStructure::WorkflowErrorExistsIdenticalStructure()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.WorkflowErrorExistsIdenticalStructure)
}
WorkflowErrorExistsIdenticalStructure::WorkflowErrorExistsIdenticalStructure(const WorkflowErrorExistsIdenticalStructure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowErrorExistsIdenticalStructure)
}

void WorkflowErrorExistsIdenticalStructure::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WorkflowErrorExistsIdenticalStructure_flyteidl_2fadmin_2fworkflow_2eproto.base);
  id_ = nullptr;
}

WorkflowErrorExistsIdenticalStructure::~WorkflowErrorExistsIdenticalStructure() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowErrorExistsIdenticalStructure)
  SharedDtor();
}

void WorkflowErrorExistsIdenticalStructure::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void WorkflowErrorExistsIdenticalStructure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkflowErrorExistsIdenticalStructure& WorkflowErrorExistsIdenticalStructure::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WorkflowErrorExistsIdenticalStructure_flyteidl_2fadmin_2fworkflow_2eproto.base);
  return *internal_default_instance();
}


void WorkflowErrorExistsIdenticalStructure::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.WorkflowErrorExistsIdenticalStructure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorkflowErrorExistsIdenticalStructure::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WorkflowErrorExistsIdenticalStructure*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Identifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkflowErrorExistsIdenticalStructure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.WorkflowErrorExistsIdenticalStructure)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.WorkflowErrorExistsIdenticalStructure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.WorkflowErrorExistsIdenticalStructure)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorkflowErrorExistsIdenticalStructure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.WorkflowErrorExistsIdenticalStructure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.WorkflowErrorExistsIdenticalStructure)
}

::google::protobuf::uint8* WorkflowErrorExistsIdenticalStructure::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.WorkflowErrorExistsIdenticalStructure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.WorkflowErrorExistsIdenticalStructure)
  return target;
}

size_t WorkflowErrorExistsIdenticalStructure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.WorkflowErrorExistsIdenticalStructure)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkflowErrorExistsIdenticalStructure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.WorkflowErrorExistsIdenticalStructure)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowErrorExistsIdenticalStructure* source =
      ::google::protobuf::DynamicCastToGenerated<WorkflowErrorExistsIdenticalStructure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.WorkflowErrorExistsIdenticalStructure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.WorkflowErrorExistsIdenticalStructure)
    MergeFrom(*source);
  }
}

void WorkflowErrorExistsIdenticalStructure::MergeFrom(const WorkflowErrorExistsIdenticalStructure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.WorkflowErrorExistsIdenticalStructure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::Identifier::MergeFrom(from.id());
  }
}

void WorkflowErrorExistsIdenticalStructure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.WorkflowErrorExistsIdenticalStructure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowErrorExistsIdenticalStructure::CopyFrom(const WorkflowErrorExistsIdenticalStructure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.WorkflowErrorExistsIdenticalStructure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowErrorExistsIdenticalStructure::IsInitialized() const {
  return true;
}

void WorkflowErrorExistsIdenticalStructure::Swap(WorkflowErrorExistsIdenticalStructure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowErrorExistsIdenticalStructure::InternalSwap(WorkflowErrorExistsIdenticalStructure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata WorkflowErrorExistsIdenticalStructure::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fworkflow_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fworkflow_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateWorkflowFailureReason::InitAsDefaultInstance() {
  ::flyteidl::admin::_CreateWorkflowFailureReason_default_instance_.exists_different_structure_ = const_cast< ::flyteidl::admin::WorkflowErrorExistsDifferentStructure*>(
      ::flyteidl::admin::WorkflowErrorExistsDifferentStructure::internal_default_instance());
  ::flyteidl::admin::_CreateWorkflowFailureReason_default_instance_.exists_identical_structure_ = const_cast< ::flyteidl::admin::WorkflowErrorExistsIdenticalStructure*>(
      ::flyteidl::admin::WorkflowErrorExistsIdenticalStructure::internal_default_instance());
}
class CreateWorkflowFailureReason::HasBitSetters {
 public:
  static const ::flyteidl::admin::WorkflowErrorExistsDifferentStructure& exists_different_structure(const CreateWorkflowFailureReason* msg);
  static const ::flyteidl::admin::WorkflowErrorExistsIdenticalStructure& exists_identical_structure(const CreateWorkflowFailureReason* msg);
};

const ::flyteidl::admin::WorkflowErrorExistsDifferentStructure&
CreateWorkflowFailureReason::HasBitSetters::exists_different_structure(const CreateWorkflowFailureReason* msg) {
  return *msg->reason_.exists_different_structure_;
}
const ::flyteidl::admin::WorkflowErrorExistsIdenticalStructure&
CreateWorkflowFailureReason::HasBitSetters::exists_identical_structure(const CreateWorkflowFailureReason* msg) {
  return *msg->reason_.exists_identical_structure_;
}
void CreateWorkflowFailureReason::set_allocated_exists_different_structure(::flyteidl::admin::WorkflowErrorExistsDifferentStructure* exists_different_structure) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_reason();
  if (exists_different_structure) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exists_different_structure = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exists_different_structure, submessage_arena);
    }
    set_has_exists_different_structure();
    reason_.exists_different_structure_ = exists_different_structure;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.CreateWorkflowFailureReason.exists_different_structure)
}
void CreateWorkflowFailureReason::set_allocated_exists_identical_structure(::flyteidl::admin::WorkflowErrorExistsIdenticalStructure* exists_identical_structure) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_reason();
  if (exists_identical_structure) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exists_identical_structure = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exists_identical_structure, submessage_arena);
    }
    set_has_exists_identical_structure();
    reason_.exists_identical_structure_ = exists_identical_structure;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.CreateWorkflowFailureReason.exists_identical_structure)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateWorkflowFailureReason::kExistsDifferentStructureFieldNumber;
const int CreateWorkflowFailureReason::kExistsIdenticalStructureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateWorkflowFailureReason::CreateWorkflowFailureReason()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.CreateWorkflowFailureReason)
}
CreateWorkflowFailureReason::CreateWorkflowFailureReason(const CreateWorkflowFailureReason& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_reason();
  switch (from.reason_case()) {
    case kExistsDifferentStructure: {
      mutable_exists_different_structure()->::flyteidl::admin::WorkflowErrorExistsDifferentStructure::MergeFrom(from.exists_different_structure());
      break;
    }
    case kExistsIdenticalStructure: {
      mutable_exists_identical_structure()->::flyteidl::admin::WorkflowErrorExistsIdenticalStructure::MergeFrom(from.exists_identical_structure());
      break;
    }
    case REASON_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.CreateWorkflowFailureReason)
}

void CreateWorkflowFailureReason::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateWorkflowFailureReason_flyteidl_2fadmin_2fworkflow_2eproto.base);
  clear_has_reason();
}

CreateWorkflowFailureReason::~CreateWorkflowFailureReason() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.CreateWorkflowFailureReason)
  SharedDtor();
}

void CreateWorkflowFailureReason::SharedDtor() {
  if (has_reason()) {
    clear_reason();
  }
}

void CreateWorkflowFailureReason::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateWorkflowFailureReason& CreateWorkflowFailureReason::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateWorkflowFailureReason_flyteidl_2fadmin_2fworkflow_2eproto.base);
  return *internal_default_instance();
}


void CreateWorkflowFailureReason::clear_reason() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.admin.CreateWorkflowFailureReason)
  switch (reason_case()) {
    case kExistsDifferentStructure: {
      delete reason_.exists_different_structure_;
      break;
    }
    case kExistsIdenticalStructure: {
      delete reason_.exists_identical_structure_;
      break;
    }
    case REASON_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REASON_NOT_SET;
}


void CreateWorkflowFailureReason::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.CreateWorkflowFailureReason)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_reason();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateWorkflowFailureReason::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateWorkflowFailureReason*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.admin.WorkflowErrorExistsDifferentStructure exists_different_structure = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::WorkflowErrorExistsDifferentStructure::_InternalParse;
        object = msg->mutable_exists_different_structure();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.WorkflowErrorExistsIdenticalStructure exists_identical_structure = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::WorkflowErrorExistsIdenticalStructure::_InternalParse;
        object = msg->mutable_exists_identical_structure();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateWorkflowFailureReason::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.CreateWorkflowFailureReason)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.admin.WorkflowErrorExistsDifferentStructure exists_different_structure = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exists_different_structure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.WorkflowErrorExistsIdenticalStructure exists_identical_structure = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exists_identical_structure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.CreateWorkflowFailureReason)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.CreateWorkflowFailureReason)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateWorkflowFailureReason::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.CreateWorkflowFailureReason)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.WorkflowErrorExistsDifferentStructure exists_different_structure = 1;
  if (has_exists_different_structure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::exists_different_structure(this), output);
  }

  // .flyteidl.admin.WorkflowErrorExistsIdenticalStructure exists_identical_structure = 2;
  if (has_exists_identical_structure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::exists_identical_structure(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.CreateWorkflowFailureReason)
}

::google::protobuf::uint8* CreateWorkflowFailureReason::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.CreateWorkflowFailureReason)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.WorkflowErrorExistsDifferentStructure exists_different_structure = 1;
  if (has_exists_different_structure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::exists_different_structure(this), target);
  }

  // .flyteidl.admin.WorkflowErrorExistsIdenticalStructure exists_identical_structure = 2;
  if (has_exists_identical_structure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::exists_identical_structure(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.CreateWorkflowFailureReason)
  return target;
}

size_t CreateWorkflowFailureReason::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.CreateWorkflowFailureReason)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (reason_case()) {
    // .flyteidl.admin.WorkflowErrorExistsDifferentStructure exists_different_structure = 1;
    case kExistsDifferentStructure: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reason_.exists_different_structure_);
      break;
    }
    // .flyteidl.admin.WorkflowErrorExistsIdenticalStructure exists_identical_structure = 2;
    case kExistsIdenticalStructure: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reason_.exists_identical_structure_);
      break;
    }
    case REASON_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateWorkflowFailureReason::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.CreateWorkflowFailureReason)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateWorkflowFailureReason* source =
      ::google::protobuf::DynamicCastToGenerated<CreateWorkflowFailureReason>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.CreateWorkflowFailureReason)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.CreateWorkflowFailureReason)
    MergeFrom(*source);
  }
}

void CreateWorkflowFailureReason::MergeFrom(const CreateWorkflowFailureReason& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.CreateWorkflowFailureReason)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.reason_case()) {
    case kExistsDifferentStructure: {
      mutable_exists_different_structure()->::flyteidl::admin::WorkflowErrorExistsDifferentStructure::MergeFrom(from.exists_different_structure());
      break;
    }
    case kExistsIdenticalStructure: {
      mutable_exists_identical_structure()->::flyteidl::admin::WorkflowErrorExistsIdenticalStructure::MergeFrom(from.exists_identical_structure());
      break;
    }
    case REASON_NOT_SET: {
      break;
    }
  }
}

void CreateWorkflowFailureReason::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.CreateWorkflowFailureReason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateWorkflowFailureReason::CopyFrom(const CreateWorkflowFailureReason& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.CreateWorkflowFailureReason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateWorkflowFailureReason::IsInitialized() const {
  return true;
}

void CreateWorkflowFailureReason::Swap(CreateWorkflowFailureReason* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateWorkflowFailureReason::InternalSwap(CreateWorkflowFailureReason* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(reason_, other->reason_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata CreateWorkflowFailureReason::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fworkflow_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fworkflow_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::admin::WorkflowCreateRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::WorkflowCreateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::WorkflowCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::WorkflowCreateResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::WorkflowCreateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::WorkflowCreateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Workflow* Arena::CreateMaybeMessage< ::flyteidl::admin::Workflow >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::Workflow >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::WorkflowList* Arena::CreateMaybeMessage< ::flyteidl::admin::WorkflowList >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::WorkflowList >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::WorkflowSpec* Arena::CreateMaybeMessage< ::flyteidl::admin::WorkflowSpec >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::WorkflowSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::WorkflowClosure* Arena::CreateMaybeMessage< ::flyteidl::admin::WorkflowClosure >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::WorkflowClosure >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::WorkflowErrorExistsDifferentStructure* Arena::CreateMaybeMessage< ::flyteidl::admin::WorkflowErrorExistsDifferentStructure >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::WorkflowErrorExistsDifferentStructure >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::WorkflowErrorExistsIdenticalStructure* Arena::CreateMaybeMessage< ::flyteidl::admin::WorkflowErrorExistsIdenticalStructure >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::WorkflowErrorExistsIdenticalStructure >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::CreateWorkflowFailureReason* Arena::CreateMaybeMessage< ::flyteidl::admin::CreateWorkflowFailureReason >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::CreateWorkflowFailureReason >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
