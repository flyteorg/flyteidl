// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/event/cloudevents.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fevent_2fcloudevents_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fevent_2fcloudevents_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/event/event.pb.h"
#include "flyteidl/core/literals.pb.h"
#include "flyteidl/core/interface.pb.h"
#include "flyteidl/core/identifier.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fevent_2fcloudevents_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fevent_2fcloudevents_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fevent_2fcloudevents_2eproto();
namespace flyteidl {
namespace event {
class CloudEventNodeExecution;
class CloudEventNodeExecutionDefaultTypeInternal;
extern CloudEventNodeExecutionDefaultTypeInternal _CloudEventNodeExecution_default_instance_;
class CloudEventTaskExecution;
class CloudEventTaskExecutionDefaultTypeInternal;
extern CloudEventTaskExecutionDefaultTypeInternal _CloudEventTaskExecution_default_instance_;
class CloudEventWorkflowExecution;
class CloudEventWorkflowExecutionDefaultTypeInternal;
extern CloudEventWorkflowExecutionDefaultTypeInternal _CloudEventWorkflowExecution_default_instance_;
}  // namespace event
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::event::CloudEventNodeExecution* Arena::CreateMaybeMessage<::flyteidl::event::CloudEventNodeExecution>(Arena*);
template<> ::flyteidl::event::CloudEventTaskExecution* Arena::CreateMaybeMessage<::flyteidl::event::CloudEventTaskExecution>(Arena*);
template<> ::flyteidl::event::CloudEventWorkflowExecution* Arena::CreateMaybeMessage<::flyteidl::event::CloudEventWorkflowExecution>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace event {

// ===================================================================

class CloudEventWorkflowExecution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.CloudEventWorkflowExecution) */ {
 public:
  CloudEventWorkflowExecution();
  virtual ~CloudEventWorkflowExecution();

  CloudEventWorkflowExecution(const CloudEventWorkflowExecution& from);

  inline CloudEventWorkflowExecution& operator=(const CloudEventWorkflowExecution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CloudEventWorkflowExecution(CloudEventWorkflowExecution&& from) noexcept
    : CloudEventWorkflowExecution() {
    *this = ::std::move(from);
  }

  inline CloudEventWorkflowExecution& operator=(CloudEventWorkflowExecution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CloudEventWorkflowExecution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloudEventWorkflowExecution* internal_default_instance() {
    return reinterpret_cast<const CloudEventWorkflowExecution*>(
               &_CloudEventWorkflowExecution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CloudEventWorkflowExecution* other);
  friend void swap(CloudEventWorkflowExecution& a, CloudEventWorkflowExecution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CloudEventWorkflowExecution* New() const final {
    return CreateMaybeMessage<CloudEventWorkflowExecution>(nullptr);
  }

  CloudEventWorkflowExecution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CloudEventWorkflowExecution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CloudEventWorkflowExecution& from);
  void MergeFrom(const CloudEventWorkflowExecution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloudEventWorkflowExecution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.core.ArtifactID artifact_ids = 6;
  int artifact_ids_size() const;
  void clear_artifact_ids();
  static const int kArtifactIdsFieldNumber = 6;
  ::flyteidl::core::ArtifactID* mutable_artifact_ids(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactID >*
      mutable_artifact_ids();
  const ::flyteidl::core::ArtifactID& artifact_ids(int index) const;
  ::flyteidl::core::ArtifactID* add_artifact_ids();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactID >&
      artifact_ids() const;

  // .flyteidl.event.WorkflowExecutionEvent raw_event = 1;
  bool has_raw_event() const;
  void clear_raw_event();
  static const int kRawEventFieldNumber = 1;
  const ::flyteidl::event::WorkflowExecutionEvent& raw_event() const;
  ::flyteidl::event::WorkflowExecutionEvent* release_raw_event();
  ::flyteidl::event::WorkflowExecutionEvent* mutable_raw_event();
  void set_allocated_raw_event(::flyteidl::event::WorkflowExecutionEvent* raw_event);

  // .flyteidl.core.LiteralMap output_data = 2;
  bool has_output_data() const;
  void clear_output_data();
  static const int kOutputDataFieldNumber = 2;
  const ::flyteidl::core::LiteralMap& output_data() const;
  ::flyteidl::core::LiteralMap* release_output_data();
  ::flyteidl::core::LiteralMap* mutable_output_data();
  void set_allocated_output_data(::flyteidl::core::LiteralMap* output_data);

  // .flyteidl.core.TypedInterface output_interface = 3;
  bool has_output_interface() const;
  void clear_output_interface();
  static const int kOutputInterfaceFieldNumber = 3;
  const ::flyteidl::core::TypedInterface& output_interface() const;
  ::flyteidl::core::TypedInterface* release_output_interface();
  ::flyteidl::core::TypedInterface* mutable_output_interface();
  void set_allocated_output_interface(::flyteidl::core::TypedInterface* output_interface);

  // .flyteidl.core.LiteralMap input_data = 4;
  bool has_input_data() const;
  void clear_input_data();
  static const int kInputDataFieldNumber = 4;
  const ::flyteidl::core::LiteralMap& input_data() const;
  ::flyteidl::core::LiteralMap* release_input_data();
  ::flyteidl::core::LiteralMap* mutable_input_data();
  void set_allocated_input_data(::flyteidl::core::LiteralMap* input_data);

  // .google.protobuf.Timestamp scheduled_at = 5;
  bool has_scheduled_at() const;
  void clear_scheduled_at();
  static const int kScheduledAtFieldNumber = 5;
  const ::google::protobuf::Timestamp& scheduled_at() const;
  ::google::protobuf::Timestamp* release_scheduled_at();
  ::google::protobuf::Timestamp* mutable_scheduled_at();
  void set_allocated_scheduled_at(::google::protobuf::Timestamp* scheduled_at);

  // .flyteidl.core.NodeExecutionIdentifier parent_node_execution = 7;
  bool has_parent_node_execution() const;
  void clear_parent_node_execution();
  static const int kParentNodeExecutionFieldNumber = 7;
  const ::flyteidl::core::NodeExecutionIdentifier& parent_node_execution() const;
  ::flyteidl::core::NodeExecutionIdentifier* release_parent_node_execution();
  ::flyteidl::core::NodeExecutionIdentifier* mutable_parent_node_execution();
  void set_allocated_parent_node_execution(::flyteidl::core::NodeExecutionIdentifier* parent_node_execution);

  // .flyteidl.core.WorkflowExecutionIdentifier reference_execution = 8;
  bool has_reference_execution() const;
  void clear_reference_execution();
  static const int kReferenceExecutionFieldNumber = 8;
  const ::flyteidl::core::WorkflowExecutionIdentifier& reference_execution() const;
  ::flyteidl::core::WorkflowExecutionIdentifier* release_reference_execution();
  ::flyteidl::core::WorkflowExecutionIdentifier* mutable_reference_execution();
  void set_allocated_reference_execution(::flyteidl::core::WorkflowExecutionIdentifier* reference_execution);

  // @@protoc_insertion_point(class_scope:flyteidl.event.CloudEventWorkflowExecution)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactID > artifact_ids_;
  ::flyteidl::event::WorkflowExecutionEvent* raw_event_;
  ::flyteidl::core::LiteralMap* output_data_;
  ::flyteidl::core::TypedInterface* output_interface_;
  ::flyteidl::core::LiteralMap* input_data_;
  ::google::protobuf::Timestamp* scheduled_at_;
  ::flyteidl::core::NodeExecutionIdentifier* parent_node_execution_;
  ::flyteidl::core::WorkflowExecutionIdentifier* reference_execution_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fcloudevents_2eproto;
};
// -------------------------------------------------------------------

class CloudEventNodeExecution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.CloudEventNodeExecution) */ {
 public:
  CloudEventNodeExecution();
  virtual ~CloudEventNodeExecution();

  CloudEventNodeExecution(const CloudEventNodeExecution& from);

  inline CloudEventNodeExecution& operator=(const CloudEventNodeExecution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CloudEventNodeExecution(CloudEventNodeExecution&& from) noexcept
    : CloudEventNodeExecution() {
    *this = ::std::move(from);
  }

  inline CloudEventNodeExecution& operator=(CloudEventNodeExecution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CloudEventNodeExecution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloudEventNodeExecution* internal_default_instance() {
    return reinterpret_cast<const CloudEventNodeExecution*>(
               &_CloudEventNodeExecution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CloudEventNodeExecution* other);
  friend void swap(CloudEventNodeExecution& a, CloudEventNodeExecution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CloudEventNodeExecution* New() const final {
    return CreateMaybeMessage<CloudEventNodeExecution>(nullptr);
  }

  CloudEventNodeExecution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CloudEventNodeExecution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CloudEventNodeExecution& from);
  void MergeFrom(const CloudEventNodeExecution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloudEventNodeExecution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.event.NodeExecutionEvent raw_event = 1;
  bool has_raw_event() const;
  void clear_raw_event();
  static const int kRawEventFieldNumber = 1;
  const ::flyteidl::event::NodeExecutionEvent& raw_event() const;
  ::flyteidl::event::NodeExecutionEvent* release_raw_event();
  ::flyteidl::event::NodeExecutionEvent* mutable_raw_event();
  void set_allocated_raw_event(::flyteidl::event::NodeExecutionEvent* raw_event);

  // @@protoc_insertion_point(class_scope:flyteidl.event.CloudEventNodeExecution)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::event::NodeExecutionEvent* raw_event_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fcloudevents_2eproto;
};
// -------------------------------------------------------------------

class CloudEventTaskExecution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.event.CloudEventTaskExecution) */ {
 public:
  CloudEventTaskExecution();
  virtual ~CloudEventTaskExecution();

  CloudEventTaskExecution(const CloudEventTaskExecution& from);

  inline CloudEventTaskExecution& operator=(const CloudEventTaskExecution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CloudEventTaskExecution(CloudEventTaskExecution&& from) noexcept
    : CloudEventTaskExecution() {
    *this = ::std::move(from);
  }

  inline CloudEventTaskExecution& operator=(CloudEventTaskExecution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CloudEventTaskExecution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloudEventTaskExecution* internal_default_instance() {
    return reinterpret_cast<const CloudEventTaskExecution*>(
               &_CloudEventTaskExecution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CloudEventTaskExecution* other);
  friend void swap(CloudEventTaskExecution& a, CloudEventTaskExecution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CloudEventTaskExecution* New() const final {
    return CreateMaybeMessage<CloudEventTaskExecution>(nullptr);
  }

  CloudEventTaskExecution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CloudEventTaskExecution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CloudEventTaskExecution& from);
  void MergeFrom(const CloudEventTaskExecution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloudEventTaskExecution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.core.ArtifactID artifact_ids = 6;
  int artifact_ids_size() const;
  void clear_artifact_ids();
  static const int kArtifactIdsFieldNumber = 6;
  ::flyteidl::core::ArtifactID* mutable_artifact_ids(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactID >*
      mutable_artifact_ids();
  const ::flyteidl::core::ArtifactID& artifact_ids(int index) const;
  ::flyteidl::core::ArtifactID* add_artifact_ids();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactID >&
      artifact_ids() const;

  // .flyteidl.event.TaskExecutionEvent raw_event = 1;
  bool has_raw_event() const;
  void clear_raw_event();
  static const int kRawEventFieldNumber = 1;
  const ::flyteidl::event::TaskExecutionEvent& raw_event() const;
  ::flyteidl::event::TaskExecutionEvent* release_raw_event();
  ::flyteidl::event::TaskExecutionEvent* mutable_raw_event();
  void set_allocated_raw_event(::flyteidl::event::TaskExecutionEvent* raw_event);

  // .flyteidl.core.LiteralMap output_data = 2;
  bool has_output_data() const;
  void clear_output_data();
  static const int kOutputDataFieldNumber = 2;
  const ::flyteidl::core::LiteralMap& output_data() const;
  ::flyteidl::core::LiteralMap* release_output_data();
  ::flyteidl::core::LiteralMap* mutable_output_data();
  void set_allocated_output_data(::flyteidl::core::LiteralMap* output_data);

  // .flyteidl.core.TypedInterface output_interface = 3;
  bool has_output_interface() const;
  void clear_output_interface();
  static const int kOutputInterfaceFieldNumber = 3;
  const ::flyteidl::core::TypedInterface& output_interface() const;
  ::flyteidl::core::TypedInterface* release_output_interface();
  ::flyteidl::core::TypedInterface* mutable_output_interface();
  void set_allocated_output_interface(::flyteidl::core::TypedInterface* output_interface);

  // .flyteidl.core.LiteralMap input_data = 4;
  bool has_input_data() const;
  void clear_input_data();
  static const int kInputDataFieldNumber = 4;
  const ::flyteidl::core::LiteralMap& input_data() const;
  ::flyteidl::core::LiteralMap* release_input_data();
  ::flyteidl::core::LiteralMap* mutable_input_data();
  void set_allocated_input_data(::flyteidl::core::LiteralMap* input_data);

  // .google.protobuf.Timestamp scheduled_at = 5;
  bool has_scheduled_at() const;
  void clear_scheduled_at();
  static const int kScheduledAtFieldNumber = 5;
  const ::google::protobuf::Timestamp& scheduled_at() const;
  ::google::protobuf::Timestamp* release_scheduled_at();
  ::google::protobuf::Timestamp* mutable_scheduled_at();
  void set_allocated_scheduled_at(::google::protobuf::Timestamp* scheduled_at);

  // .flyteidl.core.NodeExecutionIdentifier parent_node_execution = 7;
  bool has_parent_node_execution() const;
  void clear_parent_node_execution();
  static const int kParentNodeExecutionFieldNumber = 7;
  const ::flyteidl::core::NodeExecutionIdentifier& parent_node_execution() const;
  ::flyteidl::core::NodeExecutionIdentifier* release_parent_node_execution();
  ::flyteidl::core::NodeExecutionIdentifier* mutable_parent_node_execution();
  void set_allocated_parent_node_execution(::flyteidl::core::NodeExecutionIdentifier* parent_node_execution);

  // .flyteidl.core.WorkflowExecutionIdentifier reference_execution = 8;
  bool has_reference_execution() const;
  void clear_reference_execution();
  static const int kReferenceExecutionFieldNumber = 8;
  const ::flyteidl::core::WorkflowExecutionIdentifier& reference_execution() const;
  ::flyteidl::core::WorkflowExecutionIdentifier* release_reference_execution();
  ::flyteidl::core::WorkflowExecutionIdentifier* mutable_reference_execution();
  void set_allocated_reference_execution(::flyteidl::core::WorkflowExecutionIdentifier* reference_execution);

  // @@protoc_insertion_point(class_scope:flyteidl.event.CloudEventTaskExecution)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactID > artifact_ids_;
  ::flyteidl::event::TaskExecutionEvent* raw_event_;
  ::flyteidl::core::LiteralMap* output_data_;
  ::flyteidl::core::TypedInterface* output_interface_;
  ::flyteidl::core::LiteralMap* input_data_;
  ::google::protobuf::Timestamp* scheduled_at_;
  ::flyteidl::core::NodeExecutionIdentifier* parent_node_execution_;
  ::flyteidl::core::WorkflowExecutionIdentifier* reference_execution_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fevent_2fcloudevents_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CloudEventWorkflowExecution

// .flyteidl.event.WorkflowExecutionEvent raw_event = 1;
inline bool CloudEventWorkflowExecution::has_raw_event() const {
  return this != internal_default_instance() && raw_event_ != nullptr;
}
inline const ::flyteidl::event::WorkflowExecutionEvent& CloudEventWorkflowExecution::raw_event() const {
  const ::flyteidl::event::WorkflowExecutionEvent* p = raw_event_;
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventWorkflowExecution.raw_event)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::event::WorkflowExecutionEvent*>(
      &::flyteidl::event::_WorkflowExecutionEvent_default_instance_);
}
inline ::flyteidl::event::WorkflowExecutionEvent* CloudEventWorkflowExecution::release_raw_event() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventWorkflowExecution.raw_event)
  
  ::flyteidl::event::WorkflowExecutionEvent* temp = raw_event_;
  raw_event_ = nullptr;
  return temp;
}
inline ::flyteidl::event::WorkflowExecutionEvent* CloudEventWorkflowExecution::mutable_raw_event() {
  
  if (raw_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::event::WorkflowExecutionEvent>(GetArenaNoVirtual());
    raw_event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventWorkflowExecution.raw_event)
  return raw_event_;
}
inline void CloudEventWorkflowExecution::set_allocated_raw_event(::flyteidl::event::WorkflowExecutionEvent* raw_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(raw_event_);
  }
  if (raw_event) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      raw_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, raw_event, submessage_arena);
    }
    
  } else {
    
  }
  raw_event_ = raw_event;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventWorkflowExecution.raw_event)
}

// .flyteidl.core.LiteralMap output_data = 2;
inline bool CloudEventWorkflowExecution::has_output_data() const {
  return this != internal_default_instance() && output_data_ != nullptr;
}
inline const ::flyteidl::core::LiteralMap& CloudEventWorkflowExecution::output_data() const {
  const ::flyteidl::core::LiteralMap* p = output_data_;
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventWorkflowExecution.output_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::LiteralMap*>(
      &::flyteidl::core::_LiteralMap_default_instance_);
}
inline ::flyteidl::core::LiteralMap* CloudEventWorkflowExecution::release_output_data() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventWorkflowExecution.output_data)
  
  ::flyteidl::core::LiteralMap* temp = output_data_;
  output_data_ = nullptr;
  return temp;
}
inline ::flyteidl::core::LiteralMap* CloudEventWorkflowExecution::mutable_output_data() {
  
  if (output_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::LiteralMap>(GetArenaNoVirtual());
    output_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventWorkflowExecution.output_data)
  return output_data_;
}
inline void CloudEventWorkflowExecution::set_allocated_output_data(::flyteidl::core::LiteralMap* output_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(output_data_);
  }
  if (output_data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      output_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, output_data, submessage_arena);
    }
    
  } else {
    
  }
  output_data_ = output_data;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventWorkflowExecution.output_data)
}

// .flyteidl.core.TypedInterface output_interface = 3;
inline bool CloudEventWorkflowExecution::has_output_interface() const {
  return this != internal_default_instance() && output_interface_ != nullptr;
}
inline const ::flyteidl::core::TypedInterface& CloudEventWorkflowExecution::output_interface() const {
  const ::flyteidl::core::TypedInterface* p = output_interface_;
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventWorkflowExecution.output_interface)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::TypedInterface*>(
      &::flyteidl::core::_TypedInterface_default_instance_);
}
inline ::flyteidl::core::TypedInterface* CloudEventWorkflowExecution::release_output_interface() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventWorkflowExecution.output_interface)
  
  ::flyteidl::core::TypedInterface* temp = output_interface_;
  output_interface_ = nullptr;
  return temp;
}
inline ::flyteidl::core::TypedInterface* CloudEventWorkflowExecution::mutable_output_interface() {
  
  if (output_interface_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::TypedInterface>(GetArenaNoVirtual());
    output_interface_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventWorkflowExecution.output_interface)
  return output_interface_;
}
inline void CloudEventWorkflowExecution::set_allocated_output_interface(::flyteidl::core::TypedInterface* output_interface) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(output_interface_);
  }
  if (output_interface) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      output_interface = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, output_interface, submessage_arena);
    }
    
  } else {
    
  }
  output_interface_ = output_interface;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventWorkflowExecution.output_interface)
}

// .flyteidl.core.LiteralMap input_data = 4;
inline bool CloudEventWorkflowExecution::has_input_data() const {
  return this != internal_default_instance() && input_data_ != nullptr;
}
inline const ::flyteidl::core::LiteralMap& CloudEventWorkflowExecution::input_data() const {
  const ::flyteidl::core::LiteralMap* p = input_data_;
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventWorkflowExecution.input_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::LiteralMap*>(
      &::flyteidl::core::_LiteralMap_default_instance_);
}
inline ::flyteidl::core::LiteralMap* CloudEventWorkflowExecution::release_input_data() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventWorkflowExecution.input_data)
  
  ::flyteidl::core::LiteralMap* temp = input_data_;
  input_data_ = nullptr;
  return temp;
}
inline ::flyteidl::core::LiteralMap* CloudEventWorkflowExecution::mutable_input_data() {
  
  if (input_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::LiteralMap>(GetArenaNoVirtual());
    input_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventWorkflowExecution.input_data)
  return input_data_;
}
inline void CloudEventWorkflowExecution::set_allocated_input_data(::flyteidl::core::LiteralMap* input_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(input_data_);
  }
  if (input_data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input_data, submessage_arena);
    }
    
  } else {
    
  }
  input_data_ = input_data;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventWorkflowExecution.input_data)
}

// .google.protobuf.Timestamp scheduled_at = 5;
inline bool CloudEventWorkflowExecution::has_scheduled_at() const {
  return this != internal_default_instance() && scheduled_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& CloudEventWorkflowExecution::scheduled_at() const {
  const ::google::protobuf::Timestamp* p = scheduled_at_;
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventWorkflowExecution.scheduled_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* CloudEventWorkflowExecution::release_scheduled_at() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventWorkflowExecution.scheduled_at)
  
  ::google::protobuf::Timestamp* temp = scheduled_at_;
  scheduled_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* CloudEventWorkflowExecution::mutable_scheduled_at() {
  
  if (scheduled_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    scheduled_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventWorkflowExecution.scheduled_at)
  return scheduled_at_;
}
inline void CloudEventWorkflowExecution::set_allocated_scheduled_at(::google::protobuf::Timestamp* scheduled_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scheduled_at_);
  }
  if (scheduled_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(scheduled_at)->GetArena();
    if (message_arena != submessage_arena) {
      scheduled_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scheduled_at, submessage_arena);
    }
    
  } else {
    
  }
  scheduled_at_ = scheduled_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventWorkflowExecution.scheduled_at)
}

// repeated .flyteidl.core.ArtifactID artifact_ids = 6;
inline int CloudEventWorkflowExecution::artifact_ids_size() const {
  return artifact_ids_.size();
}
inline ::flyteidl::core::ArtifactID* CloudEventWorkflowExecution::mutable_artifact_ids(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventWorkflowExecution.artifact_ids)
  return artifact_ids_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactID >*
CloudEventWorkflowExecution::mutable_artifact_ids() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.event.CloudEventWorkflowExecution.artifact_ids)
  return &artifact_ids_;
}
inline const ::flyteidl::core::ArtifactID& CloudEventWorkflowExecution::artifact_ids(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventWorkflowExecution.artifact_ids)
  return artifact_ids_.Get(index);
}
inline ::flyteidl::core::ArtifactID* CloudEventWorkflowExecution::add_artifact_ids() {
  // @@protoc_insertion_point(field_add:flyteidl.event.CloudEventWorkflowExecution.artifact_ids)
  return artifact_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactID >&
CloudEventWorkflowExecution::artifact_ids() const {
  // @@protoc_insertion_point(field_list:flyteidl.event.CloudEventWorkflowExecution.artifact_ids)
  return artifact_ids_;
}

// .flyteidl.core.NodeExecutionIdentifier parent_node_execution = 7;
inline bool CloudEventWorkflowExecution::has_parent_node_execution() const {
  return this != internal_default_instance() && parent_node_execution_ != nullptr;
}
inline const ::flyteidl::core::NodeExecutionIdentifier& CloudEventWorkflowExecution::parent_node_execution() const {
  const ::flyteidl::core::NodeExecutionIdentifier* p = parent_node_execution_;
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventWorkflowExecution.parent_node_execution)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::NodeExecutionIdentifier*>(
      &::flyteidl::core::_NodeExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::NodeExecutionIdentifier* CloudEventWorkflowExecution::release_parent_node_execution() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventWorkflowExecution.parent_node_execution)
  
  ::flyteidl::core::NodeExecutionIdentifier* temp = parent_node_execution_;
  parent_node_execution_ = nullptr;
  return temp;
}
inline ::flyteidl::core::NodeExecutionIdentifier* CloudEventWorkflowExecution::mutable_parent_node_execution() {
  
  if (parent_node_execution_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::NodeExecutionIdentifier>(GetArenaNoVirtual());
    parent_node_execution_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventWorkflowExecution.parent_node_execution)
  return parent_node_execution_;
}
inline void CloudEventWorkflowExecution::set_allocated_parent_node_execution(::flyteidl::core::NodeExecutionIdentifier* parent_node_execution) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(parent_node_execution_);
  }
  if (parent_node_execution) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parent_node_execution = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent_node_execution, submessage_arena);
    }
    
  } else {
    
  }
  parent_node_execution_ = parent_node_execution;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventWorkflowExecution.parent_node_execution)
}

// .flyteidl.core.WorkflowExecutionIdentifier reference_execution = 8;
inline bool CloudEventWorkflowExecution::has_reference_execution() const {
  return this != internal_default_instance() && reference_execution_ != nullptr;
}
inline const ::flyteidl::core::WorkflowExecutionIdentifier& CloudEventWorkflowExecution::reference_execution() const {
  const ::flyteidl::core::WorkflowExecutionIdentifier* p = reference_execution_;
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventWorkflowExecution.reference_execution)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::WorkflowExecutionIdentifier*>(
      &::flyteidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* CloudEventWorkflowExecution::release_reference_execution() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventWorkflowExecution.reference_execution)
  
  ::flyteidl::core::WorkflowExecutionIdentifier* temp = reference_execution_;
  reference_execution_ = nullptr;
  return temp;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* CloudEventWorkflowExecution::mutable_reference_execution() {
  
  if (reference_execution_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::WorkflowExecutionIdentifier>(GetArenaNoVirtual());
    reference_execution_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventWorkflowExecution.reference_execution)
  return reference_execution_;
}
inline void CloudEventWorkflowExecution::set_allocated_reference_execution(::flyteidl::core::WorkflowExecutionIdentifier* reference_execution) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reference_execution_);
  }
  if (reference_execution) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reference_execution = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reference_execution, submessage_arena);
    }
    
  } else {
    
  }
  reference_execution_ = reference_execution;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventWorkflowExecution.reference_execution)
}

// -------------------------------------------------------------------

// CloudEventNodeExecution

// .flyteidl.event.NodeExecutionEvent raw_event = 1;
inline bool CloudEventNodeExecution::has_raw_event() const {
  return this != internal_default_instance() && raw_event_ != nullptr;
}
inline const ::flyteidl::event::NodeExecutionEvent& CloudEventNodeExecution::raw_event() const {
  const ::flyteidl::event::NodeExecutionEvent* p = raw_event_;
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventNodeExecution.raw_event)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::event::NodeExecutionEvent*>(
      &::flyteidl::event::_NodeExecutionEvent_default_instance_);
}
inline ::flyteidl::event::NodeExecutionEvent* CloudEventNodeExecution::release_raw_event() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventNodeExecution.raw_event)
  
  ::flyteidl::event::NodeExecutionEvent* temp = raw_event_;
  raw_event_ = nullptr;
  return temp;
}
inline ::flyteidl::event::NodeExecutionEvent* CloudEventNodeExecution::mutable_raw_event() {
  
  if (raw_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::event::NodeExecutionEvent>(GetArenaNoVirtual());
    raw_event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventNodeExecution.raw_event)
  return raw_event_;
}
inline void CloudEventNodeExecution::set_allocated_raw_event(::flyteidl::event::NodeExecutionEvent* raw_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(raw_event_);
  }
  if (raw_event) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      raw_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, raw_event, submessage_arena);
    }
    
  } else {
    
  }
  raw_event_ = raw_event;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventNodeExecution.raw_event)
}

// -------------------------------------------------------------------

// CloudEventTaskExecution

// .flyteidl.event.TaskExecutionEvent raw_event = 1;
inline bool CloudEventTaskExecution::has_raw_event() const {
  return this != internal_default_instance() && raw_event_ != nullptr;
}
inline const ::flyteidl::event::TaskExecutionEvent& CloudEventTaskExecution::raw_event() const {
  const ::flyteidl::event::TaskExecutionEvent* p = raw_event_;
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventTaskExecution.raw_event)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::event::TaskExecutionEvent*>(
      &::flyteidl::event::_TaskExecutionEvent_default_instance_);
}
inline ::flyteidl::event::TaskExecutionEvent* CloudEventTaskExecution::release_raw_event() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventTaskExecution.raw_event)
  
  ::flyteidl::event::TaskExecutionEvent* temp = raw_event_;
  raw_event_ = nullptr;
  return temp;
}
inline ::flyteidl::event::TaskExecutionEvent* CloudEventTaskExecution::mutable_raw_event() {
  
  if (raw_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::event::TaskExecutionEvent>(GetArenaNoVirtual());
    raw_event_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventTaskExecution.raw_event)
  return raw_event_;
}
inline void CloudEventTaskExecution::set_allocated_raw_event(::flyteidl::event::TaskExecutionEvent* raw_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(raw_event_);
  }
  if (raw_event) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      raw_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, raw_event, submessage_arena);
    }
    
  } else {
    
  }
  raw_event_ = raw_event;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventTaskExecution.raw_event)
}

// .flyteidl.core.LiteralMap output_data = 2;
inline bool CloudEventTaskExecution::has_output_data() const {
  return this != internal_default_instance() && output_data_ != nullptr;
}
inline const ::flyteidl::core::LiteralMap& CloudEventTaskExecution::output_data() const {
  const ::flyteidl::core::LiteralMap* p = output_data_;
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventTaskExecution.output_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::LiteralMap*>(
      &::flyteidl::core::_LiteralMap_default_instance_);
}
inline ::flyteidl::core::LiteralMap* CloudEventTaskExecution::release_output_data() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventTaskExecution.output_data)
  
  ::flyteidl::core::LiteralMap* temp = output_data_;
  output_data_ = nullptr;
  return temp;
}
inline ::flyteidl::core::LiteralMap* CloudEventTaskExecution::mutable_output_data() {
  
  if (output_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::LiteralMap>(GetArenaNoVirtual());
    output_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventTaskExecution.output_data)
  return output_data_;
}
inline void CloudEventTaskExecution::set_allocated_output_data(::flyteidl::core::LiteralMap* output_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(output_data_);
  }
  if (output_data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      output_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, output_data, submessage_arena);
    }
    
  } else {
    
  }
  output_data_ = output_data;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventTaskExecution.output_data)
}

// .flyteidl.core.TypedInterface output_interface = 3;
inline bool CloudEventTaskExecution::has_output_interface() const {
  return this != internal_default_instance() && output_interface_ != nullptr;
}
inline const ::flyteidl::core::TypedInterface& CloudEventTaskExecution::output_interface() const {
  const ::flyteidl::core::TypedInterface* p = output_interface_;
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventTaskExecution.output_interface)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::TypedInterface*>(
      &::flyteidl::core::_TypedInterface_default_instance_);
}
inline ::flyteidl::core::TypedInterface* CloudEventTaskExecution::release_output_interface() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventTaskExecution.output_interface)
  
  ::flyteidl::core::TypedInterface* temp = output_interface_;
  output_interface_ = nullptr;
  return temp;
}
inline ::flyteidl::core::TypedInterface* CloudEventTaskExecution::mutable_output_interface() {
  
  if (output_interface_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::TypedInterface>(GetArenaNoVirtual());
    output_interface_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventTaskExecution.output_interface)
  return output_interface_;
}
inline void CloudEventTaskExecution::set_allocated_output_interface(::flyteidl::core::TypedInterface* output_interface) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(output_interface_);
  }
  if (output_interface) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      output_interface = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, output_interface, submessage_arena);
    }
    
  } else {
    
  }
  output_interface_ = output_interface;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventTaskExecution.output_interface)
}

// .flyteidl.core.LiteralMap input_data = 4;
inline bool CloudEventTaskExecution::has_input_data() const {
  return this != internal_default_instance() && input_data_ != nullptr;
}
inline const ::flyteidl::core::LiteralMap& CloudEventTaskExecution::input_data() const {
  const ::flyteidl::core::LiteralMap* p = input_data_;
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventTaskExecution.input_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::LiteralMap*>(
      &::flyteidl::core::_LiteralMap_default_instance_);
}
inline ::flyteidl::core::LiteralMap* CloudEventTaskExecution::release_input_data() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventTaskExecution.input_data)
  
  ::flyteidl::core::LiteralMap* temp = input_data_;
  input_data_ = nullptr;
  return temp;
}
inline ::flyteidl::core::LiteralMap* CloudEventTaskExecution::mutable_input_data() {
  
  if (input_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::LiteralMap>(GetArenaNoVirtual());
    input_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventTaskExecution.input_data)
  return input_data_;
}
inline void CloudEventTaskExecution::set_allocated_input_data(::flyteidl::core::LiteralMap* input_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(input_data_);
  }
  if (input_data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input_data, submessage_arena);
    }
    
  } else {
    
  }
  input_data_ = input_data;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventTaskExecution.input_data)
}

// .google.protobuf.Timestamp scheduled_at = 5;
inline bool CloudEventTaskExecution::has_scheduled_at() const {
  return this != internal_default_instance() && scheduled_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& CloudEventTaskExecution::scheduled_at() const {
  const ::google::protobuf::Timestamp* p = scheduled_at_;
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventTaskExecution.scheduled_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* CloudEventTaskExecution::release_scheduled_at() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventTaskExecution.scheduled_at)
  
  ::google::protobuf::Timestamp* temp = scheduled_at_;
  scheduled_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* CloudEventTaskExecution::mutable_scheduled_at() {
  
  if (scheduled_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    scheduled_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventTaskExecution.scheduled_at)
  return scheduled_at_;
}
inline void CloudEventTaskExecution::set_allocated_scheduled_at(::google::protobuf::Timestamp* scheduled_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scheduled_at_);
  }
  if (scheduled_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(scheduled_at)->GetArena();
    if (message_arena != submessage_arena) {
      scheduled_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scheduled_at, submessage_arena);
    }
    
  } else {
    
  }
  scheduled_at_ = scheduled_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventTaskExecution.scheduled_at)
}

// repeated .flyteidl.core.ArtifactID artifact_ids = 6;
inline int CloudEventTaskExecution::artifact_ids_size() const {
  return artifact_ids_.size();
}
inline ::flyteidl::core::ArtifactID* CloudEventTaskExecution::mutable_artifact_ids(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventTaskExecution.artifact_ids)
  return artifact_ids_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactID >*
CloudEventTaskExecution::mutable_artifact_ids() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.event.CloudEventTaskExecution.artifact_ids)
  return &artifact_ids_;
}
inline const ::flyteidl::core::ArtifactID& CloudEventTaskExecution::artifact_ids(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventTaskExecution.artifact_ids)
  return artifact_ids_.Get(index);
}
inline ::flyteidl::core::ArtifactID* CloudEventTaskExecution::add_artifact_ids() {
  // @@protoc_insertion_point(field_add:flyteidl.event.CloudEventTaskExecution.artifact_ids)
  return artifact_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::ArtifactID >&
CloudEventTaskExecution::artifact_ids() const {
  // @@protoc_insertion_point(field_list:flyteidl.event.CloudEventTaskExecution.artifact_ids)
  return artifact_ids_;
}

// .flyteidl.core.NodeExecutionIdentifier parent_node_execution = 7;
inline bool CloudEventTaskExecution::has_parent_node_execution() const {
  return this != internal_default_instance() && parent_node_execution_ != nullptr;
}
inline const ::flyteidl::core::NodeExecutionIdentifier& CloudEventTaskExecution::parent_node_execution() const {
  const ::flyteidl::core::NodeExecutionIdentifier* p = parent_node_execution_;
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventTaskExecution.parent_node_execution)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::NodeExecutionIdentifier*>(
      &::flyteidl::core::_NodeExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::NodeExecutionIdentifier* CloudEventTaskExecution::release_parent_node_execution() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventTaskExecution.parent_node_execution)
  
  ::flyteidl::core::NodeExecutionIdentifier* temp = parent_node_execution_;
  parent_node_execution_ = nullptr;
  return temp;
}
inline ::flyteidl::core::NodeExecutionIdentifier* CloudEventTaskExecution::mutable_parent_node_execution() {
  
  if (parent_node_execution_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::NodeExecutionIdentifier>(GetArenaNoVirtual());
    parent_node_execution_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventTaskExecution.parent_node_execution)
  return parent_node_execution_;
}
inline void CloudEventTaskExecution::set_allocated_parent_node_execution(::flyteidl::core::NodeExecutionIdentifier* parent_node_execution) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(parent_node_execution_);
  }
  if (parent_node_execution) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parent_node_execution = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent_node_execution, submessage_arena);
    }
    
  } else {
    
  }
  parent_node_execution_ = parent_node_execution;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventTaskExecution.parent_node_execution)
}

// .flyteidl.core.WorkflowExecutionIdentifier reference_execution = 8;
inline bool CloudEventTaskExecution::has_reference_execution() const {
  return this != internal_default_instance() && reference_execution_ != nullptr;
}
inline const ::flyteidl::core::WorkflowExecutionIdentifier& CloudEventTaskExecution::reference_execution() const {
  const ::flyteidl::core::WorkflowExecutionIdentifier* p = reference_execution_;
  // @@protoc_insertion_point(field_get:flyteidl.event.CloudEventTaskExecution.reference_execution)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::WorkflowExecutionIdentifier*>(
      &::flyteidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* CloudEventTaskExecution::release_reference_execution() {
  // @@protoc_insertion_point(field_release:flyteidl.event.CloudEventTaskExecution.reference_execution)
  
  ::flyteidl::core::WorkflowExecutionIdentifier* temp = reference_execution_;
  reference_execution_ = nullptr;
  return temp;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* CloudEventTaskExecution::mutable_reference_execution() {
  
  if (reference_execution_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::WorkflowExecutionIdentifier>(GetArenaNoVirtual());
    reference_execution_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.event.CloudEventTaskExecution.reference_execution)
  return reference_execution_;
}
inline void CloudEventTaskExecution::set_allocated_reference_execution(::flyteidl::core::WorkflowExecutionIdentifier* reference_execution) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reference_execution_);
  }
  if (reference_execution) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reference_execution = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reference_execution, submessage_arena);
    }
    
  } else {
    
  }
  reference_execution_ = reference_execution;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.event.CloudEventTaskExecution.reference_execution)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace event
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fevent_2fcloudevents_2eproto
