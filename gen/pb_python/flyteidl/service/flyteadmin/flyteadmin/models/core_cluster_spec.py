# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyteadmin.models.core_head_group_spec import CoreHeadGroupSpec  # noqa: F401,E501
from flyteadmin.models.core_worker_group_spec import CoreWorkerGroupSpec  # noqa: F401,E501


class CoreClusterSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'head_group_spec': 'CoreHeadGroupSpec',
        'worker_group_sepc': 'list[CoreWorkerGroupSpec]'
    }

    attribute_map = {
        'head_group_spec': 'head_group_spec',
        'worker_group_sepc': 'worker_group_sepc'
    }

    def __init__(self, head_group_spec=None, worker_group_sepc=None):  # noqa: E501
        """CoreClusterSpec - a model defined in Swagger"""  # noqa: E501

        self._head_group_spec = None
        self._worker_group_sepc = None
        self.discriminator = None

        if head_group_spec is not None:
            self.head_group_spec = head_group_spec
        if worker_group_sepc is not None:
            self.worker_group_sepc = worker_group_sepc

    @property
    def head_group_spec(self):
        """Gets the head_group_spec of this CoreClusterSpec.  # noqa: E501


        :return: The head_group_spec of this CoreClusterSpec.  # noqa: E501
        :rtype: CoreHeadGroupSpec
        """
        return self._head_group_spec

    @head_group_spec.setter
    def head_group_spec(self, head_group_spec):
        """Sets the head_group_spec of this CoreClusterSpec.


        :param head_group_spec: The head_group_spec of this CoreClusterSpec.  # noqa: E501
        :type: CoreHeadGroupSpec
        """

        self._head_group_spec = head_group_spec

    @property
    def worker_group_sepc(self):
        """Gets the worker_group_sepc of this CoreClusterSpec.  # noqa: E501


        :return: The worker_group_sepc of this CoreClusterSpec.  # noqa: E501
        :rtype: list[CoreWorkerGroupSpec]
        """
        return self._worker_group_sepc

    @worker_group_sepc.setter
    def worker_group_sepc(self, worker_group_sepc):
        """Sets the worker_group_sepc of this CoreClusterSpec.


        :param worker_group_sepc: The worker_group_sepc of this CoreClusterSpec.  # noqa: E501
        :type: list[CoreWorkerGroupSpec]
        """

        self._worker_group_sepc = worker_group_sepc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoreClusterSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreClusterSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
