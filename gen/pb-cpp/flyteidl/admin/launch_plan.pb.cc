// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/launch_plan.proto

#include "flyteidl/admin/launch_plan.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace admin {
constexpr LaunchPlanCreateRequest::LaunchPlanCreateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , spec_(nullptr){}
struct LaunchPlanCreateRequestDefaultTypeInternal {
  constexpr LaunchPlanCreateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaunchPlanCreateRequestDefaultTypeInternal() {}
  union {
    LaunchPlanCreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaunchPlanCreateRequestDefaultTypeInternal _LaunchPlanCreateRequest_default_instance_;
constexpr LaunchPlanCreateResponse::LaunchPlanCreateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct LaunchPlanCreateResponseDefaultTypeInternal {
  constexpr LaunchPlanCreateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaunchPlanCreateResponseDefaultTypeInternal() {}
  union {
    LaunchPlanCreateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaunchPlanCreateResponseDefaultTypeInternal _LaunchPlanCreateResponse_default_instance_;
constexpr LaunchPlan::LaunchPlan(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , spec_(nullptr)
  , closure_(nullptr){}
struct LaunchPlanDefaultTypeInternal {
  constexpr LaunchPlanDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaunchPlanDefaultTypeInternal() {}
  union {
    LaunchPlan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaunchPlanDefaultTypeInternal _LaunchPlan_default_instance_;
constexpr LaunchPlanList::LaunchPlanList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : launch_plans_()
  , token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LaunchPlanListDefaultTypeInternal {
  constexpr LaunchPlanListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaunchPlanListDefaultTypeInternal() {}
  union {
    LaunchPlanList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaunchPlanListDefaultTypeInternal _LaunchPlanList_default_instance_;
constexpr Auth::Auth(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : assumable_iam_role_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , kubernetes_service_account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AuthDefaultTypeInternal {
  constexpr AuthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthDefaultTypeInternal() {}
  union {
    Auth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthDefaultTypeInternal _Auth_default_instance_;
constexpr LaunchPlanSpec::LaunchPlanSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , workflow_id_(nullptr)
  , entity_metadata_(nullptr)
  , default_inputs_(nullptr)
  , fixed_inputs_(nullptr)
  , labels_(nullptr)
  , annotations_(nullptr)
  , auth_(nullptr)
  , auth_role_(nullptr)
  , security_context_(nullptr)
  , quality_of_service_(nullptr)
  , raw_output_data_config_(nullptr)
  , max_parallelism_(0){}
struct LaunchPlanSpecDefaultTypeInternal {
  constexpr LaunchPlanSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaunchPlanSpecDefaultTypeInternal() {}
  union {
    LaunchPlanSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaunchPlanSpecDefaultTypeInternal _LaunchPlanSpec_default_instance_;
constexpr LaunchPlanClosure::LaunchPlanClosure(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : expected_inputs_(nullptr)
  , expected_outputs_(nullptr)
  , created_at_(nullptr)
  , updated_at_(nullptr)
  , state_(0)
{}
struct LaunchPlanClosureDefaultTypeInternal {
  constexpr LaunchPlanClosureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaunchPlanClosureDefaultTypeInternal() {}
  union {
    LaunchPlanClosure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaunchPlanClosureDefaultTypeInternal _LaunchPlanClosure_default_instance_;
constexpr LaunchPlanMetadata::LaunchPlanMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : notifications_()
  , schedule_(nullptr){}
struct LaunchPlanMetadataDefaultTypeInternal {
  constexpr LaunchPlanMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaunchPlanMetadataDefaultTypeInternal() {}
  union {
    LaunchPlanMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaunchPlanMetadataDefaultTypeInternal _LaunchPlanMetadata_default_instance_;
constexpr LaunchPlanUpdateRequest::LaunchPlanUpdateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , state_(0)
{}
struct LaunchPlanUpdateRequestDefaultTypeInternal {
  constexpr LaunchPlanUpdateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaunchPlanUpdateRequestDefaultTypeInternal() {}
  union {
    LaunchPlanUpdateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaunchPlanUpdateRequestDefaultTypeInternal _LaunchPlanUpdateRequest_default_instance_;
constexpr LaunchPlanUpdateResponse::LaunchPlanUpdateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct LaunchPlanUpdateResponseDefaultTypeInternal {
  constexpr LaunchPlanUpdateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaunchPlanUpdateResponseDefaultTypeInternal() {}
  union {
    LaunchPlanUpdateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaunchPlanUpdateResponseDefaultTypeInternal _LaunchPlanUpdateResponse_default_instance_;
constexpr ActiveLaunchPlanRequest::ActiveLaunchPlanRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr){}
struct ActiveLaunchPlanRequestDefaultTypeInternal {
  constexpr ActiveLaunchPlanRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActiveLaunchPlanRequestDefaultTypeInternal() {}
  union {
    ActiveLaunchPlanRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActiveLaunchPlanRequestDefaultTypeInternal _ActiveLaunchPlanRequest_default_instance_;
constexpr ActiveLaunchPlanListRequest::ActiveLaunchPlanListRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : project_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , domain_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sort_by_(nullptr)
  , limit_(0u){}
struct ActiveLaunchPlanListRequestDefaultTypeInternal {
  constexpr ActiveLaunchPlanListRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActiveLaunchPlanListRequestDefaultTypeInternal() {}
  union {
    ActiveLaunchPlanListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActiveLaunchPlanListRequestDefaultTypeInternal _ActiveLaunchPlanListRequest_default_instance_;
}  // namespace admin
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fadmin_2flaunch_5fplan_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fadmin_2flaunch_5fplan_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanCreateRequest, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanCreateRequest, spec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanCreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlan, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlan, spec_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlan, closure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanList, launch_plans_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanList, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Auth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Auth, assumable_iam_role_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Auth, kubernetes_service_account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, workflow_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, entity_metadata_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, default_inputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, fixed_inputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, role_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, labels_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, annotations_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, auth_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, auth_role_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, security_context_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, quality_of_service_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, raw_output_data_config_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, max_parallelism_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanClosure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanClosure, state_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanClosure, expected_inputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanClosure, expected_outputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanClosure, created_at_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanClosure, updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanMetadata, schedule_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanMetadata, notifications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanUpdateRequest, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanUpdateRequest, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanUpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ActiveLaunchPlanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ActiveLaunchPlanRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ActiveLaunchPlanListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ActiveLaunchPlanListRequest, project_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ActiveLaunchPlanListRequest, domain_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ActiveLaunchPlanListRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ActiveLaunchPlanListRequest, token_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ActiveLaunchPlanListRequest, sort_by_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::admin::LaunchPlanCreateRequest)},
  { 8, -1, -1, sizeof(::flyteidl::admin::LaunchPlanCreateResponse)},
  { 14, -1, -1, sizeof(::flyteidl::admin::LaunchPlan)},
  { 23, -1, -1, sizeof(::flyteidl::admin::LaunchPlanList)},
  { 31, -1, -1, sizeof(::flyteidl::admin::Auth)},
  { 39, -1, -1, sizeof(::flyteidl::admin::LaunchPlanSpec)},
  { 58, -1, -1, sizeof(::flyteidl::admin::LaunchPlanClosure)},
  { 69, -1, -1, sizeof(::flyteidl::admin::LaunchPlanMetadata)},
  { 77, -1, -1, sizeof(::flyteidl::admin::LaunchPlanUpdateRequest)},
  { 85, -1, -1, sizeof(::flyteidl::admin::LaunchPlanUpdateResponse)},
  { 91, -1, -1, sizeof(::flyteidl::admin::ActiveLaunchPlanRequest)},
  { 98, -1, -1, sizeof(::flyteidl::admin::ActiveLaunchPlanListRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_LaunchPlanCreateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_LaunchPlanCreateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_LaunchPlan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_LaunchPlanList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_Auth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_LaunchPlanSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_LaunchPlanClosure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_LaunchPlanMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_LaunchPlanUpdateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_LaunchPlanUpdateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_ActiveLaunchPlanRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_ActiveLaunchPlanListRequest_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fadmin_2flaunch_5fplan_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n flyteidl/admin/launch_plan.proto\022\016flyt"
  "eidl.admin\032\035flyteidl/core/execution.prot"
  "o\032\034flyteidl/core/literals.proto\032\036flyteid"
  "l/core/identifier.proto\032\035flyteidl/core/i"
  "nterface.proto\032\034flyteidl/core/security.p"
  "roto\032\035flyteidl/admin/schedule.proto\032\033fly"
  "teidl/admin/common.proto\032\037google/protobu"
  "f/timestamp.proto\"x\n\027LaunchPlanCreateReq"
  "uest\022)\n\002id\030\001 \001(\0132\031.flyteidl.core.Identif"
  "ierR\002id\0222\n\004spec\030\002 \001(\0132\036.flyteidl.admin.L"
  "aunchPlanSpecR\004spec\"\032\n\030LaunchPlanCreateR"
  "esponse\"\250\001\n\nLaunchPlan\022)\n\002id\030\001 \001(\0132\031.fly"
  "teidl.core.IdentifierR\002id\0222\n\004spec\030\002 \001(\0132"
  "\036.flyteidl.admin.LaunchPlanSpecR\004spec\022;\n"
  "\007closure\030\003 \001(\0132!.flyteidl.admin.LaunchPl"
  "anClosureR\007closure\"e\n\016LaunchPlanList\022=\n\014"
  "launch_plans\030\001 \003(\0132\032.flyteidl.admin.Laun"
  "chPlanR\013launchPlans\022\024\n\005token\030\002 \001(\tR\005toke"
  "n\"v\n\004Auth\022,\n\022assumable_iam_role\030\001 \001(\tR\020a"
  "ssumableIamRole\022<\n\032kubernetes_service_ac"
  "count\030\002 \001(\tR\030kubernetesServiceAccount:\002\030"
  "\001\"\250\006\n\016LaunchPlanSpec\022:\n\013workflow_id\030\001 \001("
  "\0132\031.flyteidl.core.IdentifierR\nworkflowId"
  "\022K\n\017entity_metadata\030\002 \001(\0132\".flyteidl.adm"
  "in.LaunchPlanMetadataR\016entityMetadata\022B\n"
  "\016default_inputs\030\003 \001(\0132\033.flyteidl.core.Pa"
  "rameterMapR\rdefaultInputs\022<\n\014fixed_input"
  "s\030\004 \001(\0132\031.flyteidl.core.LiteralMapR\013fixe"
  "dInputs\022\026\n\004role\030\005 \001(\tB\002\030\001R\004role\022.\n\006label"
  "s\030\006 \001(\0132\026.flyteidl.admin.LabelsR\006labels\022"
  "=\n\013annotations\030\007 \001(\0132\033.flyteidl.admin.An"
  "notationsR\013annotations\022,\n\004auth\030\010 \001(\0132\024.f"
  "lyteidl.admin.AuthB\002\030\001R\004auth\0229\n\tauth_rol"
  "e\030\t \001(\0132\030.flyteidl.admin.AuthRoleB\002\030\001R\010a"
  "uthRole\022I\n\020security_context\030\n \001(\0132\036.flyt"
  "eidl.core.SecurityContextR\017securityConte"
  "xt\022M\n\022quality_of_service\030\020 \001(\0132\037.flyteid"
  "l.core.QualityOfServiceR\020qualityOfServic"
  "e\022X\n\026raw_output_data_config\030\021 \001(\0132#.flyt"
  "eidl.admin.RawOutputDataConfigR\023rawOutpu"
  "tDataConfig\022\'\n\017max_parallelism\030\022 \001(\005R\016ma"
  "xParallelism\"\315\002\n\021LaunchPlanClosure\0225\n\005st"
  "ate\030\001 \001(\0162\037.flyteidl.admin.LaunchPlanSta"
  "teR\005state\022D\n\017expected_inputs\030\002 \001(\0132\033.fly"
  "teidl.core.ParameterMapR\016expectedInputs\022"
  "E\n\020expected_outputs\030\003 \001(\0132\032.flyteidl.cor"
  "e.VariableMapR\017expectedOutputs\0229\n\ncreate"
  "d_at\030\004 \001(\0132\032.google.protobuf.TimestampR\t"
  "createdAt\0229\n\nupdated_at\030\005 \001(\0132\032.google.p"
  "rotobuf.TimestampR\tupdatedAt\"\216\001\n\022LaunchP"
  "lanMetadata\0224\n\010schedule\030\001 \001(\0132\030.flyteidl"
  ".admin.ScheduleR\010schedule\022B\n\rnotificatio"
  "ns\030\002 \003(\0132\034.flyteidl.admin.NotificationR\r"
  "notifications\"{\n\027LaunchPlanUpdateRequest"
  "\022)\n\002id\030\001 \001(\0132\031.flyteidl.core.IdentifierR"
  "\002id\0225\n\005state\030\002 \001(\0162\037.flyteidl.admin.Laun"
  "chPlanStateR\005state\"\032\n\030LaunchPlanUpdateRe"
  "sponse\"P\n\027ActiveLaunchPlanRequest\0225\n\002id\030"
  "\001 \001(\0132%.flyteidl.admin.NamedEntityIdenti"
  "fierR\002id\"\252\001\n\033ActiveLaunchPlanListRequest"
  "\022\030\n\007project\030\001 \001(\tR\007project\022\026\n\006domain\030\002 \001"
  "(\tR\006domain\022\024\n\005limit\030\003 \001(\rR\005limit\022\024\n\005toke"
  "n\030\004 \001(\tR\005token\022-\n\007sort_by\030\005 \001(\0132\024.flytei"
  "dl.admin.SortR\006sortBy*+\n\017LaunchPlanState"
  "\022\014\n\010INACTIVE\020\000\022\n\n\006ACTIVE\020\001B\270\001\n\022com.flyte"
  "idl.adminB\017LaunchPlanProtoH\002Z5github.com"
  "/flyteorg/flyteidl/gen/pb-go/flyteidl/ad"
  "min\370\001\000\242\002\003FAX\252\002\016Flyteidl.Admin\312\002\016Flyteidl"
  "\\Admin\342\002\032Flyteidl\\Admin\\GPBMetadata\352\002\017Fl"
  "yteidl::Adminb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_deps[8] = {
  &::descriptor_table_flyteidl_2fadmin_2fcommon_2eproto,
  &::descriptor_table_flyteidl_2fadmin_2fschedule_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fexecution_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fidentifier_2eproto,
  &::descriptor_table_flyteidl_2fcore_2finterface_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fliterals_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fsecurity_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto = {
  false, false, 2781, descriptor_table_protodef_flyteidl_2fadmin_2flaunch_5fplan_2eproto, "flyteidl/admin/launch_plan.proto", 
  &descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_once, descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_deps, 8, 12,
  schemas, file_default_instances, TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto::offsets,
  file_level_metadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto, file_level_enum_descriptors_flyteidl_2fadmin_2flaunch_5fplan_2eproto, file_level_service_descriptors_flyteidl_2fadmin_2flaunch_5fplan_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_getter() {
  return &descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fadmin_2flaunch_5fplan_2eproto(&descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto);
namespace flyteidl {
namespace admin {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaunchPlanState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto);
  return file_level_enum_descriptors_flyteidl_2fadmin_2flaunch_5fplan_2eproto[0];
}
bool LaunchPlanState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class LaunchPlanCreateRequest::_Internal {
 public:
  static const ::flyteidl::core::Identifier& id(const LaunchPlanCreateRequest* msg);
  static const ::flyteidl::admin::LaunchPlanSpec& spec(const LaunchPlanCreateRequest* msg);
};

const ::flyteidl::core::Identifier&
LaunchPlanCreateRequest::_Internal::id(const LaunchPlanCreateRequest* msg) {
  return *msg->id_;
}
const ::flyteidl::admin::LaunchPlanSpec&
LaunchPlanCreateRequest::_Internal::spec(const LaunchPlanCreateRequest* msg) {
  return *msg->spec_;
}
void LaunchPlanCreateRequest::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
LaunchPlanCreateRequest::LaunchPlanCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.LaunchPlanCreateRequest)
}
LaunchPlanCreateRequest::LaunchPlanCreateRequest(const LaunchPlanCreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::flyteidl::admin::LaunchPlanSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchPlanCreateRequest)
}

inline void LaunchPlanCreateRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&spec_) -
    reinterpret_cast<char*>(&id_)) + sizeof(spec_));
}

LaunchPlanCreateRequest::~LaunchPlanCreateRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LaunchPlanCreateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LaunchPlanCreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete spec_;
}

void LaunchPlanCreateRequest::ArenaDtor(void* object) {
  LaunchPlanCreateRequest* _this = reinterpret_cast< LaunchPlanCreateRequest* >(object);
  (void)_this;
}
void LaunchPlanCreateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaunchPlanCreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LaunchPlanCreateRequest::InternalSwap(LaunchPlanCreateRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata LaunchPlanCreateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto[0]);
}

// ===================================================================

class LaunchPlanCreateResponse::_Internal {
 public:
};

LaunchPlanCreateResponse::LaunchPlanCreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.LaunchPlanCreateResponse)
}
LaunchPlanCreateResponse::LaunchPlanCreateResponse(const LaunchPlanCreateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchPlanCreateResponse)
}



::PROTOBUF_NAMESPACE_ID::Metadata LaunchPlanCreateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto[1]);
}

// ===================================================================

class LaunchPlan::_Internal {
 public:
  static const ::flyteidl::core::Identifier& id(const LaunchPlan* msg);
  static const ::flyteidl::admin::LaunchPlanSpec& spec(const LaunchPlan* msg);
  static const ::flyteidl::admin::LaunchPlanClosure& closure(const LaunchPlan* msg);
};

const ::flyteidl::core::Identifier&
LaunchPlan::_Internal::id(const LaunchPlan* msg) {
  return *msg->id_;
}
const ::flyteidl::admin::LaunchPlanSpec&
LaunchPlan::_Internal::spec(const LaunchPlan* msg) {
  return *msg->spec_;
}
const ::flyteidl::admin::LaunchPlanClosure&
LaunchPlan::_Internal::closure(const LaunchPlan* msg) {
  return *msg->closure_;
}
void LaunchPlan::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
LaunchPlan::LaunchPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.LaunchPlan)
}
LaunchPlan::LaunchPlan(const LaunchPlan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::flyteidl::admin::LaunchPlanSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_closure()) {
    closure_ = new ::flyteidl::admin::LaunchPlanClosure(*from.closure_);
  } else {
    closure_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchPlan)
}

inline void LaunchPlan::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&closure_) -
    reinterpret_cast<char*>(&id_)) + sizeof(closure_));
}

LaunchPlan::~LaunchPlan() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LaunchPlan)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LaunchPlan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete closure_;
}

void LaunchPlan::ArenaDtor(void* object) {
  LaunchPlan* _this = reinterpret_cast< LaunchPlan* >(object);
  (void)_this;
}
void LaunchPlan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaunchPlan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LaunchPlan::InternalSwap(LaunchPlan* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata LaunchPlan::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto[2]);
}

// ===================================================================

class LaunchPlanList::_Internal {
 public:
};

LaunchPlanList::LaunchPlanList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  launch_plans_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.LaunchPlanList)
}
LaunchPlanList::LaunchPlanList(const LaunchPlanList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      launch_plans_(from.launch_plans_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchPlanList)
}

inline void LaunchPlanList::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LaunchPlanList::~LaunchPlanList() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LaunchPlanList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LaunchPlanList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LaunchPlanList::ArenaDtor(void* object) {
  LaunchPlanList* _this = reinterpret_cast< LaunchPlanList* >(object);
  (void)_this;
}
void LaunchPlanList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaunchPlanList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LaunchPlanList::InternalSwap(LaunchPlanList* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata LaunchPlanList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto[3]);
}

// ===================================================================

class Auth::_Internal {
 public:
};

Auth::Auth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.Auth)
}
Auth::Auth(const Auth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  assumable_iam_role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    assumable_iam_role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_assumable_iam_role().empty()) {
    assumable_iam_role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_assumable_iam_role(), 
      GetArenaForAllocation());
  }
  kubernetes_service_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    kubernetes_service_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_kubernetes_service_account().empty()) {
    kubernetes_service_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kubernetes_service_account(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Auth)
}

inline void Auth::SharedCtor() {
assumable_iam_role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  assumable_iam_role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
kubernetes_service_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  kubernetes_service_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Auth::~Auth() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Auth)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Auth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  assumable_iam_role_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kubernetes_service_account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Auth::ArenaDtor(void* object) {
  Auth* _this = reinterpret_cast< Auth* >(object);
  (void)_this;
}
void Auth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Auth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Auth::InternalSwap(Auth* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Auth::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto[4]);
}

// ===================================================================

class LaunchPlanSpec::_Internal {
 public:
  static const ::flyteidl::core::Identifier& workflow_id(const LaunchPlanSpec* msg);
  static const ::flyteidl::admin::LaunchPlanMetadata& entity_metadata(const LaunchPlanSpec* msg);
  static const ::flyteidl::core::ParameterMap& default_inputs(const LaunchPlanSpec* msg);
  static const ::flyteidl::core::LiteralMap& fixed_inputs(const LaunchPlanSpec* msg);
  static const ::flyteidl::admin::Labels& labels(const LaunchPlanSpec* msg);
  static const ::flyteidl::admin::Annotations& annotations(const LaunchPlanSpec* msg);
  static const ::flyteidl::admin::Auth& auth(const LaunchPlanSpec* msg);
  static const ::flyteidl::admin::AuthRole& auth_role(const LaunchPlanSpec* msg);
  static const ::flyteidl::core::SecurityContext& security_context(const LaunchPlanSpec* msg);
  static const ::flyteidl::core::QualityOfService& quality_of_service(const LaunchPlanSpec* msg);
  static const ::flyteidl::admin::RawOutputDataConfig& raw_output_data_config(const LaunchPlanSpec* msg);
};

const ::flyteidl::core::Identifier&
LaunchPlanSpec::_Internal::workflow_id(const LaunchPlanSpec* msg) {
  return *msg->workflow_id_;
}
const ::flyteidl::admin::LaunchPlanMetadata&
LaunchPlanSpec::_Internal::entity_metadata(const LaunchPlanSpec* msg) {
  return *msg->entity_metadata_;
}
const ::flyteidl::core::ParameterMap&
LaunchPlanSpec::_Internal::default_inputs(const LaunchPlanSpec* msg) {
  return *msg->default_inputs_;
}
const ::flyteidl::core::LiteralMap&
LaunchPlanSpec::_Internal::fixed_inputs(const LaunchPlanSpec* msg) {
  return *msg->fixed_inputs_;
}
const ::flyteidl::admin::Labels&
LaunchPlanSpec::_Internal::labels(const LaunchPlanSpec* msg) {
  return *msg->labels_;
}
const ::flyteidl::admin::Annotations&
LaunchPlanSpec::_Internal::annotations(const LaunchPlanSpec* msg) {
  return *msg->annotations_;
}
const ::flyteidl::admin::Auth&
LaunchPlanSpec::_Internal::auth(const LaunchPlanSpec* msg) {
  return *msg->auth_;
}
const ::flyteidl::admin::AuthRole&
LaunchPlanSpec::_Internal::auth_role(const LaunchPlanSpec* msg) {
  return *msg->auth_role_;
}
const ::flyteidl::core::SecurityContext&
LaunchPlanSpec::_Internal::security_context(const LaunchPlanSpec* msg) {
  return *msg->security_context_;
}
const ::flyteidl::core::QualityOfService&
LaunchPlanSpec::_Internal::quality_of_service(const LaunchPlanSpec* msg) {
  return *msg->quality_of_service_;
}
const ::flyteidl::admin::RawOutputDataConfig&
LaunchPlanSpec::_Internal::raw_output_data_config(const LaunchPlanSpec* msg) {
  return *msg->raw_output_data_config_;
}
void LaunchPlanSpec::clear_workflow_id() {
  if (GetArenaForAllocation() == nullptr && workflow_id_ != nullptr) {
    delete workflow_id_;
  }
  workflow_id_ = nullptr;
}
void LaunchPlanSpec::clear_default_inputs() {
  if (GetArenaForAllocation() == nullptr && default_inputs_ != nullptr) {
    delete default_inputs_;
  }
  default_inputs_ = nullptr;
}
void LaunchPlanSpec::clear_fixed_inputs() {
  if (GetArenaForAllocation() == nullptr && fixed_inputs_ != nullptr) {
    delete fixed_inputs_;
  }
  fixed_inputs_ = nullptr;
}
void LaunchPlanSpec::clear_labels() {
  if (GetArenaForAllocation() == nullptr && labels_ != nullptr) {
    delete labels_;
  }
  labels_ = nullptr;
}
void LaunchPlanSpec::clear_annotations() {
  if (GetArenaForAllocation() == nullptr && annotations_ != nullptr) {
    delete annotations_;
  }
  annotations_ = nullptr;
}
void LaunchPlanSpec::clear_auth_role() {
  if (GetArenaForAllocation() == nullptr && auth_role_ != nullptr) {
    delete auth_role_;
  }
  auth_role_ = nullptr;
}
void LaunchPlanSpec::clear_security_context() {
  if (GetArenaForAllocation() == nullptr && security_context_ != nullptr) {
    delete security_context_;
  }
  security_context_ = nullptr;
}
void LaunchPlanSpec::clear_quality_of_service() {
  if (GetArenaForAllocation() == nullptr && quality_of_service_ != nullptr) {
    delete quality_of_service_;
  }
  quality_of_service_ = nullptr;
}
void LaunchPlanSpec::clear_raw_output_data_config() {
  if (GetArenaForAllocation() == nullptr && raw_output_data_config_ != nullptr) {
    delete raw_output_data_config_;
  }
  raw_output_data_config_ = nullptr;
}
LaunchPlanSpec::LaunchPlanSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.LaunchPlanSpec)
}
LaunchPlanSpec::LaunchPlanSpec(const LaunchPlanSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role().empty()) {
    role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_role(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_workflow_id()) {
    workflow_id_ = new ::flyteidl::core::Identifier(*from.workflow_id_);
  } else {
    workflow_id_ = nullptr;
  }
  if (from._internal_has_entity_metadata()) {
    entity_metadata_ = new ::flyteidl::admin::LaunchPlanMetadata(*from.entity_metadata_);
  } else {
    entity_metadata_ = nullptr;
  }
  if (from._internal_has_default_inputs()) {
    default_inputs_ = new ::flyteidl::core::ParameterMap(*from.default_inputs_);
  } else {
    default_inputs_ = nullptr;
  }
  if (from._internal_has_fixed_inputs()) {
    fixed_inputs_ = new ::flyteidl::core::LiteralMap(*from.fixed_inputs_);
  } else {
    fixed_inputs_ = nullptr;
  }
  if (from._internal_has_labels()) {
    labels_ = new ::flyteidl::admin::Labels(*from.labels_);
  } else {
    labels_ = nullptr;
  }
  if (from._internal_has_annotations()) {
    annotations_ = new ::flyteidl::admin::Annotations(*from.annotations_);
  } else {
    annotations_ = nullptr;
  }
  if (from._internal_has_auth()) {
    auth_ = new ::flyteidl::admin::Auth(*from.auth_);
  } else {
    auth_ = nullptr;
  }
  if (from._internal_has_auth_role()) {
    auth_role_ = new ::flyteidl::admin::AuthRole(*from.auth_role_);
  } else {
    auth_role_ = nullptr;
  }
  if (from._internal_has_security_context()) {
    security_context_ = new ::flyteidl::core::SecurityContext(*from.security_context_);
  } else {
    security_context_ = nullptr;
  }
  if (from._internal_has_quality_of_service()) {
    quality_of_service_ = new ::flyteidl::core::QualityOfService(*from.quality_of_service_);
  } else {
    quality_of_service_ = nullptr;
  }
  if (from._internal_has_raw_output_data_config()) {
    raw_output_data_config_ = new ::flyteidl::admin::RawOutputDataConfig(*from.raw_output_data_config_);
  } else {
    raw_output_data_config_ = nullptr;
  }
  max_parallelism_ = from.max_parallelism_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchPlanSpec)
}

inline void LaunchPlanSpec::SharedCtor() {
role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&workflow_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_parallelism_) -
    reinterpret_cast<char*>(&workflow_id_)) + sizeof(max_parallelism_));
}

LaunchPlanSpec::~LaunchPlanSpec() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LaunchPlanSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LaunchPlanSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  role_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete workflow_id_;
  if (this != internal_default_instance()) delete entity_metadata_;
  if (this != internal_default_instance()) delete default_inputs_;
  if (this != internal_default_instance()) delete fixed_inputs_;
  if (this != internal_default_instance()) delete labels_;
  if (this != internal_default_instance()) delete annotations_;
  if (this != internal_default_instance()) delete auth_;
  if (this != internal_default_instance()) delete auth_role_;
  if (this != internal_default_instance()) delete security_context_;
  if (this != internal_default_instance()) delete quality_of_service_;
  if (this != internal_default_instance()) delete raw_output_data_config_;
}

void LaunchPlanSpec::ArenaDtor(void* object) {
  LaunchPlanSpec* _this = reinterpret_cast< LaunchPlanSpec* >(object);
  (void)_this;
}
void LaunchPlanSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaunchPlanSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LaunchPlanSpec::InternalSwap(LaunchPlanSpec* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata LaunchPlanSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto[5]);
}

// ===================================================================

class LaunchPlanClosure::_Internal {
 public:
  static const ::flyteidl::core::ParameterMap& expected_inputs(const LaunchPlanClosure* msg);
  static const ::flyteidl::core::VariableMap& expected_outputs(const LaunchPlanClosure* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const LaunchPlanClosure* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const LaunchPlanClosure* msg);
};

const ::flyteidl::core::ParameterMap&
LaunchPlanClosure::_Internal::expected_inputs(const LaunchPlanClosure* msg) {
  return *msg->expected_inputs_;
}
const ::flyteidl::core::VariableMap&
LaunchPlanClosure::_Internal::expected_outputs(const LaunchPlanClosure* msg) {
  return *msg->expected_outputs_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LaunchPlanClosure::_Internal::created_at(const LaunchPlanClosure* msg) {
  return *msg->created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LaunchPlanClosure::_Internal::updated_at(const LaunchPlanClosure* msg) {
  return *msg->updated_at_;
}
void LaunchPlanClosure::clear_expected_inputs() {
  if (GetArenaForAllocation() == nullptr && expected_inputs_ != nullptr) {
    delete expected_inputs_;
  }
  expected_inputs_ = nullptr;
}
void LaunchPlanClosure::clear_expected_outputs() {
  if (GetArenaForAllocation() == nullptr && expected_outputs_ != nullptr) {
    delete expected_outputs_;
  }
  expected_outputs_ = nullptr;
}
void LaunchPlanClosure::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void LaunchPlanClosure::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
}
LaunchPlanClosure::LaunchPlanClosure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.LaunchPlanClosure)
}
LaunchPlanClosure::LaunchPlanClosure(const LaunchPlanClosure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_expected_inputs()) {
    expected_inputs_ = new ::flyteidl::core::ParameterMap(*from.expected_inputs_);
  } else {
    expected_inputs_ = nullptr;
  }
  if (from._internal_has_expected_outputs()) {
    expected_outputs_ = new ::flyteidl::core::VariableMap(*from.expected_outputs_);
  } else {
    expected_outputs_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_updated_at()) {
    updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.updated_at_);
  } else {
    updated_at_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchPlanClosure)
}

inline void LaunchPlanClosure::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&expected_inputs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&expected_inputs_)) + sizeof(state_));
}

LaunchPlanClosure::~LaunchPlanClosure() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LaunchPlanClosure)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LaunchPlanClosure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete expected_inputs_;
  if (this != internal_default_instance()) delete expected_outputs_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete updated_at_;
}

void LaunchPlanClosure::ArenaDtor(void* object) {
  LaunchPlanClosure* _this = reinterpret_cast< LaunchPlanClosure* >(object);
  (void)_this;
}
void LaunchPlanClosure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaunchPlanClosure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LaunchPlanClosure::InternalSwap(LaunchPlanClosure* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata LaunchPlanClosure::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto[6]);
}

// ===================================================================

class LaunchPlanMetadata::_Internal {
 public:
  static const ::flyteidl::admin::Schedule& schedule(const LaunchPlanMetadata* msg);
};

const ::flyteidl::admin::Schedule&
LaunchPlanMetadata::_Internal::schedule(const LaunchPlanMetadata* msg) {
  return *msg->schedule_;
}
void LaunchPlanMetadata::clear_schedule() {
  if (GetArenaForAllocation() == nullptr && schedule_ != nullptr) {
    delete schedule_;
  }
  schedule_ = nullptr;
}
void LaunchPlanMetadata::clear_notifications() {
  notifications_.Clear();
}
LaunchPlanMetadata::LaunchPlanMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  notifications_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.LaunchPlanMetadata)
}
LaunchPlanMetadata::LaunchPlanMetadata(const LaunchPlanMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_schedule()) {
    schedule_ = new ::flyteidl::admin::Schedule(*from.schedule_);
  } else {
    schedule_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchPlanMetadata)
}

inline void LaunchPlanMetadata::SharedCtor() {
schedule_ = nullptr;
}

LaunchPlanMetadata::~LaunchPlanMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LaunchPlanMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LaunchPlanMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete schedule_;
}

void LaunchPlanMetadata::ArenaDtor(void* object) {
  LaunchPlanMetadata* _this = reinterpret_cast< LaunchPlanMetadata* >(object);
  (void)_this;
}
void LaunchPlanMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaunchPlanMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LaunchPlanMetadata::InternalSwap(LaunchPlanMetadata* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata LaunchPlanMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto[7]);
}

// ===================================================================

class LaunchPlanUpdateRequest::_Internal {
 public:
  static const ::flyteidl::core::Identifier& id(const LaunchPlanUpdateRequest* msg);
};

const ::flyteidl::core::Identifier&
LaunchPlanUpdateRequest::_Internal::id(const LaunchPlanUpdateRequest* msg) {
  return *msg->id_;
}
void LaunchPlanUpdateRequest::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
LaunchPlanUpdateRequest::LaunchPlanUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.LaunchPlanUpdateRequest)
}
LaunchPlanUpdateRequest::LaunchPlanUpdateRequest(const LaunchPlanUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchPlanUpdateRequest)
}

inline void LaunchPlanUpdateRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&id_)) + sizeof(state_));
}

LaunchPlanUpdateRequest::~LaunchPlanUpdateRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LaunchPlanUpdateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LaunchPlanUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void LaunchPlanUpdateRequest::ArenaDtor(void* object) {
  LaunchPlanUpdateRequest* _this = reinterpret_cast< LaunchPlanUpdateRequest* >(object);
  (void)_this;
}
void LaunchPlanUpdateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaunchPlanUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LaunchPlanUpdateRequest::InternalSwap(LaunchPlanUpdateRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata LaunchPlanUpdateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto[8]);
}

// ===================================================================

class LaunchPlanUpdateResponse::_Internal {
 public:
};

LaunchPlanUpdateResponse::LaunchPlanUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.LaunchPlanUpdateResponse)
}
LaunchPlanUpdateResponse::LaunchPlanUpdateResponse(const LaunchPlanUpdateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchPlanUpdateResponse)
}



::PROTOBUF_NAMESPACE_ID::Metadata LaunchPlanUpdateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto[9]);
}

// ===================================================================

class ActiveLaunchPlanRequest::_Internal {
 public:
  static const ::flyteidl::admin::NamedEntityIdentifier& id(const ActiveLaunchPlanRequest* msg);
};

const ::flyteidl::admin::NamedEntityIdentifier&
ActiveLaunchPlanRequest::_Internal::id(const ActiveLaunchPlanRequest* msg) {
  return *msg->id_;
}
void ActiveLaunchPlanRequest::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
ActiveLaunchPlanRequest::ActiveLaunchPlanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.ActiveLaunchPlanRequest)
}
ActiveLaunchPlanRequest::ActiveLaunchPlanRequest(const ActiveLaunchPlanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::flyteidl::admin::NamedEntityIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ActiveLaunchPlanRequest)
}

inline void ActiveLaunchPlanRequest::SharedCtor() {
id_ = nullptr;
}

ActiveLaunchPlanRequest::~ActiveLaunchPlanRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ActiveLaunchPlanRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActiveLaunchPlanRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void ActiveLaunchPlanRequest::ArenaDtor(void* object) {
  ActiveLaunchPlanRequest* _this = reinterpret_cast< ActiveLaunchPlanRequest* >(object);
  (void)_this;
}
void ActiveLaunchPlanRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActiveLaunchPlanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActiveLaunchPlanRequest::InternalSwap(ActiveLaunchPlanRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ActiveLaunchPlanRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto[10]);
}

// ===================================================================

class ActiveLaunchPlanListRequest::_Internal {
 public:
  static const ::flyteidl::admin::Sort& sort_by(const ActiveLaunchPlanListRequest* msg);
};

const ::flyteidl::admin::Sort&
ActiveLaunchPlanListRequest::_Internal::sort_by(const ActiveLaunchPlanListRequest* msg) {
  return *msg->sort_by_;
}
void ActiveLaunchPlanListRequest::clear_sort_by() {
  if (GetArenaForAllocation() == nullptr && sort_by_ != nullptr) {
    delete sort_by_;
  }
  sort_by_ = nullptr;
}
ActiveLaunchPlanListRequest::ActiveLaunchPlanListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.ActiveLaunchPlanListRequest)
}
ActiveLaunchPlanListRequest::ActiveLaunchPlanListRequest(const ActiveLaunchPlanListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    project_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_project().empty()) {
    project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project(), 
      GetArenaForAllocation());
  }
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_domain().empty()) {
    domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_domain(), 
      GetArenaForAllocation());
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_sort_by()) {
    sort_by_ = new ::flyteidl::admin::Sort(*from.sort_by_);
  } else {
    sort_by_ = nullptr;
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ActiveLaunchPlanListRequest)
}

inline void ActiveLaunchPlanListRequest::SharedCtor() {
project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  project_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sort_by_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&sort_by_)) + sizeof(limit_));
}

ActiveLaunchPlanListRequest::~ActiveLaunchPlanListRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ActiveLaunchPlanListRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActiveLaunchPlanListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  project_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sort_by_;
}

void ActiveLaunchPlanListRequest::ArenaDtor(void* object) {
  ActiveLaunchPlanListRequest* _this = reinterpret_cast< ActiveLaunchPlanListRequest* >(object);
  (void)_this;
}
void ActiveLaunchPlanListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActiveLaunchPlanListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActiveLaunchPlanListRequest::InternalSwap(ActiveLaunchPlanListRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ActiveLaunchPlanListRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::admin::LaunchPlanCreateRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::LaunchPlanCreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::LaunchPlanCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::LaunchPlanCreateResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::LaunchPlanCreateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::LaunchPlanCreateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::LaunchPlan* Arena::CreateMaybeMessage< ::flyteidl::admin::LaunchPlan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::LaunchPlan >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::LaunchPlanList* Arena::CreateMaybeMessage< ::flyteidl::admin::LaunchPlanList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::LaunchPlanList >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Auth* Arena::CreateMaybeMessage< ::flyteidl::admin::Auth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::Auth >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::LaunchPlanSpec* Arena::CreateMaybeMessage< ::flyteidl::admin::LaunchPlanSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::LaunchPlanSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::LaunchPlanClosure* Arena::CreateMaybeMessage< ::flyteidl::admin::LaunchPlanClosure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::LaunchPlanClosure >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::LaunchPlanMetadata* Arena::CreateMaybeMessage< ::flyteidl::admin::LaunchPlanMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::LaunchPlanMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::LaunchPlanUpdateRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::LaunchPlanUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::LaunchPlanUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::LaunchPlanUpdateResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::LaunchPlanUpdateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::LaunchPlanUpdateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ActiveLaunchPlanRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::ActiveLaunchPlanRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::ActiveLaunchPlanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ActiveLaunchPlanListRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::ActiveLaunchPlanListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::ActiveLaunchPlanListRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
