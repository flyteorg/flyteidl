// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/core/tasks.proto

package core

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	_struct "github.com/golang/protobuf/ptypes/struct"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Known resource names.
type Resources_ResourceName int32

const (
	Resources_UNKNOWN Resources_ResourceName = 0
	Resources_CPU     Resources_ResourceName = 1
	Resources_GPU     Resources_ResourceName = 2
	Resources_MEMORY  Resources_ResourceName = 3
	Resources_STORAGE Resources_ResourceName = 4
	// For Kubernetes-based deployments, pods use ephemeral local storage for scratch space, caching, and for logs.
	Resources_EPHEMERAL_STORAGE Resources_ResourceName = 5
)

var Resources_ResourceName_name = map[int32]string{
	0: "UNKNOWN",
	1: "CPU",
	2: "GPU",
	3: "MEMORY",
	4: "STORAGE",
	5: "EPHEMERAL_STORAGE",
}

var Resources_ResourceName_value = map[string]int32{
	"UNKNOWN":           0,
	"CPU":               1,
	"GPU":               2,
	"MEMORY":            3,
	"STORAGE":           4,
	"EPHEMERAL_STORAGE": 5,
}

func (x Resources_ResourceName) String() string {
	return proto.EnumName(Resources_ResourceName_name, int32(x))
}

func (Resources_ResourceName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bd8423ba58d6ed80, []int{0, 0}
}

type RuntimeMetadata_RuntimeType int32

const (
	RuntimeMetadata_OTHER     RuntimeMetadata_RuntimeType = 0
	RuntimeMetadata_FLYTE_SDK RuntimeMetadata_RuntimeType = 1
)

var RuntimeMetadata_RuntimeType_name = map[int32]string{
	0: "OTHER",
	1: "FLYTE_SDK",
}

var RuntimeMetadata_RuntimeType_value = map[string]int32{
	"OTHER":     0,
	"FLYTE_SDK": 1,
}

func (x RuntimeMetadata_RuntimeType) String() string {
	return proto.EnumName(RuntimeMetadata_RuntimeType_name, int32(x))
}

func (RuntimeMetadata_RuntimeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bd8423ba58d6ed80, []int{1, 0}
}

// Architecture-type the container image supports.
type Container_Architecture int32

const (
	Container_UNKNOWN Container_Architecture = 0
	Container_AMD64   Container_Architecture = 1
	Container_ARM64   Container_Architecture = 2
	Container_ARM_V6  Container_Architecture = 3
	Container_ARM_V7  Container_Architecture = 4
)

var Container_Architecture_name = map[int32]string{
	0: "UNKNOWN",
	1: "AMD64",
	2: "ARM64",
	3: "ARM_V6",
	4: "ARM_V7",
}

var Container_Architecture_value = map[string]int32{
	"UNKNOWN": 0,
	"AMD64":   1,
	"ARM64":   2,
	"ARM_V6":  3,
	"ARM_V7":  4,
}

func (x Container_Architecture) String() string {
	return proto.EnumName(Container_Architecture_name, int32(x))
}

func (Container_Architecture) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bd8423ba58d6ed80, []int{7, 0}
}

// Mode to use for downloading
type IOStrategy_DownloadMode int32

const (
	// All data will be downloaded before the main container is executed
	IOStrategy_DOWNLOAD_EAGER IOStrategy_DownloadMode = 0
	// Data will be downloaded as a stream and an End-Of-Stream marker will be written to indicate all data has been downloaded. Refer to protocol for details
	IOStrategy_DOWNLOAD_STREAM IOStrategy_DownloadMode = 1
	// Large objects (offloaded) will not be downloaded
	IOStrategy_DO_NOT_DOWNLOAD IOStrategy_DownloadMode = 2
)

var IOStrategy_DownloadMode_name = map[int32]string{
	0: "DOWNLOAD_EAGER",
	1: "DOWNLOAD_STREAM",
	2: "DO_NOT_DOWNLOAD",
}

var IOStrategy_DownloadMode_value = map[string]int32{
	"DOWNLOAD_EAGER":  0,
	"DOWNLOAD_STREAM": 1,
	"DO_NOT_DOWNLOAD": 2,
}

func (x IOStrategy_DownloadMode) String() string {
	return proto.EnumName(IOStrategy_DownloadMode_name, int32(x))
}

func (IOStrategy_DownloadMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bd8423ba58d6ed80, []int{8, 0}
}

// Mode to use for uploading
type IOStrategy_UploadMode int32

const (
	// All data will be uploaded after the main container exits
	IOStrategy_UPLOAD_ON_EXIT IOStrategy_UploadMode = 0
	// Data will be uploaded as it appears. Refer to protocol specification for details
	IOStrategy_UPLOAD_EAGER IOStrategy_UploadMode = 1
	// Data will not be uploaded, only references will be written
	IOStrategy_DO_NOT_UPLOAD IOStrategy_UploadMode = 2
)

var IOStrategy_UploadMode_name = map[int32]string{
	0: "UPLOAD_ON_EXIT",
	1: "UPLOAD_EAGER",
	2: "DO_NOT_UPLOAD",
}

var IOStrategy_UploadMode_value = map[string]int32{
	"UPLOAD_ON_EXIT": 0,
	"UPLOAD_EAGER":   1,
	"DO_NOT_UPLOAD":  2,
}

func (x IOStrategy_UploadMode) String() string {
	return proto.EnumName(IOStrategy_UploadMode_name, int32(x))
}

func (IOStrategy_UploadMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bd8423ba58d6ed80, []int{8, 1}
}

// LiteralMapFormat decides the encoding format in which the input metadata should be made available to the containers.
// If the user has access to the protocol buffer definitions, it is recommended to use the PROTO format.
// JSON and YAML do not need any protobuf definitions to read it
// All remote references in core.LiteralMap are replaced with local filesystem references (the data is downloaded to local filesystem)
type DataLoadingConfig_LiteralMapFormat int32

const (
	// JSON / YAML for the metadata (which contains inlined primitive values). The representation is inline with the standard json specification as specified - https://www.json.org/json-en.html
	DataLoadingConfig_JSON DataLoadingConfig_LiteralMapFormat = 0
	DataLoadingConfig_YAML DataLoadingConfig_LiteralMapFormat = 1
	// Proto is a serialized binary of `core.LiteralMap` defined in flyteidl/core
	DataLoadingConfig_PROTO DataLoadingConfig_LiteralMapFormat = 2
)

var DataLoadingConfig_LiteralMapFormat_name = map[int32]string{
	0: "JSON",
	1: "YAML",
	2: "PROTO",
}

var DataLoadingConfig_LiteralMapFormat_value = map[string]int32{
	"JSON":  0,
	"YAML":  1,
	"PROTO": 2,
}

func (x DataLoadingConfig_LiteralMapFormat) String() string {
	return proto.EnumName(DataLoadingConfig_LiteralMapFormat_name, int32(x))
}

func (DataLoadingConfig_LiteralMapFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bd8423ba58d6ed80, []int{9, 0}
}

// The dialect of the SQL statement. This is used to validate and parse SQL statements at compilation time to avoid
// expensive runtime operations. If set to an unsupported dialect, no validation will be done on the statement.
// We support the following dialect: ansi, hive.
type Sql_Dialect int32

const (
	Sql_UNDEFINED Sql_Dialect = 0
	Sql_ANSI      Sql_Dialect = 1
	Sql_HIVE      Sql_Dialect = 2
	Sql_OTHER     Sql_Dialect = 3
)

var Sql_Dialect_name = map[int32]string{
	0: "UNDEFINED",
	1: "ANSI",
	2: "HIVE",
	3: "OTHER",
}

var Sql_Dialect_value = map[string]int32{
	"UNDEFINED": 0,
	"ANSI":      1,
	"HIVE":      2,
	"OTHER":     3,
}

func (x Sql_Dialect) String() string {
	return proto.EnumName(Sql_Dialect_name, int32(x))
}

func (Sql_Dialect) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bd8423ba58d6ed80, []int{12, 0}
}

// A customizable interface to convey resources requested for a container. This can be interpreted differently for different
// container engines.
type Resources struct {
	// The desired set of resources requested. ResourceNames must be unique within the list.
	Requests []*Resources_ResourceEntry `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	// Defines a set of bounds (e.g. min/max) within which the task can reliably run. ResourceNames must be unique
	// within the list.
	Limits               []*Resources_ResourceEntry `protobuf:"bytes,2,rep,name=limits,proto3" json:"limits,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Resources) Reset()         { *m = Resources{} }
func (m *Resources) String() string { return proto.CompactTextString(m) }
func (*Resources) ProtoMessage()    {}
func (*Resources) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd8423ba58d6ed80, []int{0}
}

func (m *Resources) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resources.Unmarshal(m, b)
}
func (m *Resources) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resources.Marshal(b, m, deterministic)
}
func (m *Resources) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resources.Merge(m, src)
}
func (m *Resources) XXX_Size() int {
	return xxx_messageInfo_Resources.Size(m)
}
func (m *Resources) XXX_DiscardUnknown() {
	xxx_messageInfo_Resources.DiscardUnknown(m)
}

var xxx_messageInfo_Resources proto.InternalMessageInfo

func (m *Resources) GetRequests() []*Resources_ResourceEntry {
	if m != nil {
		return m.Requests
	}
	return nil
}

func (m *Resources) GetLimits() []*Resources_ResourceEntry {
	if m != nil {
		return m.Limits
	}
	return nil
}

// Encapsulates a resource name and value.
type Resources_ResourceEntry struct {
	// Resource name.
	Name Resources_ResourceName `protobuf:"varint,1,opt,name=name,proto3,enum=flyteidl.core.Resources_ResourceName" json:"name,omitempty"`
	// Value must be a valid k8s quantity. See
	// https://github.com/kubernetes/apimachinery/blob/master/pkg/api/resource/quantity.go#L30-L80
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Resources_ResourceEntry) Reset()         { *m = Resources_ResourceEntry{} }
func (m *Resources_ResourceEntry) String() string { return proto.CompactTextString(m) }
func (*Resources_ResourceEntry) ProtoMessage()    {}
func (*Resources_ResourceEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd8423ba58d6ed80, []int{0, 0}
}

func (m *Resources_ResourceEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resources_ResourceEntry.Unmarshal(m, b)
}
func (m *Resources_ResourceEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resources_ResourceEntry.Marshal(b, m, deterministic)
}
func (m *Resources_ResourceEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resources_ResourceEntry.Merge(m, src)
}
func (m *Resources_ResourceEntry) XXX_Size() int {
	return xxx_messageInfo_Resources_ResourceEntry.Size(m)
}
func (m *Resources_ResourceEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_Resources_ResourceEntry.DiscardUnknown(m)
}

var xxx_messageInfo_Resources_ResourceEntry proto.InternalMessageInfo

func (m *Resources_ResourceEntry) GetName() Resources_ResourceName {
	if m != nil {
		return m.Name
	}
	return Resources_UNKNOWN
}

func (m *Resources_ResourceEntry) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Runtime information. This is loosely defined to allow for extensibility.
type RuntimeMetadata struct {
	// Type of runtime.
	Type RuntimeMetadata_RuntimeType `protobuf:"varint,1,opt,name=type,proto3,enum=flyteidl.core.RuntimeMetadata_RuntimeType" json:"type,omitempty"`
	// Version of the runtime. All versions should be backward compatible. However, certain cases call for version
	// checks to ensure tighter validation or setting expectations.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	//+optional It can be used to provide extra information about the runtime (e.g. python, golang... etc.).
	Flavor               string   `protobuf:"bytes,3,opt,name=flavor,proto3" json:"flavor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RuntimeMetadata) Reset()         { *m = RuntimeMetadata{} }
func (m *RuntimeMetadata) String() string { return proto.CompactTextString(m) }
func (*RuntimeMetadata) ProtoMessage()    {}
func (*RuntimeMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd8423ba58d6ed80, []int{1}
}

func (m *RuntimeMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RuntimeMetadata.Unmarshal(m, b)
}
func (m *RuntimeMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RuntimeMetadata.Marshal(b, m, deterministic)
}
func (m *RuntimeMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuntimeMetadata.Merge(m, src)
}
func (m *RuntimeMetadata) XXX_Size() int {
	return xxx_messageInfo_RuntimeMetadata.Size(m)
}
func (m *RuntimeMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_RuntimeMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_RuntimeMetadata proto.InternalMessageInfo

func (m *RuntimeMetadata) GetType() RuntimeMetadata_RuntimeType {
	if m != nil {
		return m.Type
	}
	return RuntimeMetadata_OTHER
}

func (m *RuntimeMetadata) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *RuntimeMetadata) GetFlavor() string {
	if m != nil {
		return m.Flavor
	}
	return ""
}

// Metadata associated with the GPU accelerator to allocate to a task
type GPUAccelerator struct {
	Device string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	// Types that are valid to be assigned to PartitionSizeValue:
	//	*GPUAccelerator_Unpartitioned
	//	*GPUAccelerator_PartitionSize
	PartitionSizeValue   isGPUAccelerator_PartitionSizeValue `protobuf_oneof:"partition_size_value"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *GPUAccelerator) Reset()         { *m = GPUAccelerator{} }
func (m *GPUAccelerator) String() string { return proto.CompactTextString(m) }
func (*GPUAccelerator) ProtoMessage()    {}
func (*GPUAccelerator) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd8423ba58d6ed80, []int{2}
}

func (m *GPUAccelerator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GPUAccelerator.Unmarshal(m, b)
}
func (m *GPUAccelerator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GPUAccelerator.Marshal(b, m, deterministic)
}
func (m *GPUAccelerator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GPUAccelerator.Merge(m, src)
}
func (m *GPUAccelerator) XXX_Size() int {
	return xxx_messageInfo_GPUAccelerator.Size(m)
}
func (m *GPUAccelerator) XXX_DiscardUnknown() {
	xxx_messageInfo_GPUAccelerator.DiscardUnknown(m)
}

var xxx_messageInfo_GPUAccelerator proto.InternalMessageInfo

func (m *GPUAccelerator) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

type isGPUAccelerator_PartitionSizeValue interface {
	isGPUAccelerator_PartitionSizeValue()
}

type GPUAccelerator_Unpartitioned struct {
	Unpartitioned bool `protobuf:"varint,2,opt,name=unpartitioned,proto3,oneof"`
}

type GPUAccelerator_PartitionSize struct {
	PartitionSize string `protobuf:"bytes,3,opt,name=partition_size,json=partitionSize,proto3,oneof"`
}

func (*GPUAccelerator_Unpartitioned) isGPUAccelerator_PartitionSizeValue() {}

func (*GPUAccelerator_PartitionSize) isGPUAccelerator_PartitionSizeValue() {}

func (m *GPUAccelerator) GetPartitionSizeValue() isGPUAccelerator_PartitionSizeValue {
	if m != nil {
		return m.PartitionSizeValue
	}
	return nil
}

func (m *GPUAccelerator) GetUnpartitioned() bool {
	if x, ok := m.GetPartitionSizeValue().(*GPUAccelerator_Unpartitioned); ok {
		return x.Unpartitioned
	}
	return false
}

func (m *GPUAccelerator) GetPartitionSize() string {
	if x, ok := m.GetPartitionSizeValue().(*GPUAccelerator_PartitionSize); ok {
		return x.PartitionSize
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GPUAccelerator) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GPUAccelerator_Unpartitioned)(nil),
		(*GPUAccelerator_PartitionSize)(nil),
	}
}

// Additional metadata associated with resources to allocate to a task
type ResourceMetadata struct {
	// Types that are valid to be assigned to AcceleratorValue:
	//	*ResourceMetadata_GpuAccelerator
	AcceleratorValue     isResourceMetadata_AcceleratorValue `protobuf_oneof:"accelerator_value"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *ResourceMetadata) Reset()         { *m = ResourceMetadata{} }
func (m *ResourceMetadata) String() string { return proto.CompactTextString(m) }
func (*ResourceMetadata) ProtoMessage()    {}
func (*ResourceMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd8423ba58d6ed80, []int{3}
}

func (m *ResourceMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceMetadata.Unmarshal(m, b)
}
func (m *ResourceMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceMetadata.Marshal(b, m, deterministic)
}
func (m *ResourceMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceMetadata.Merge(m, src)
}
func (m *ResourceMetadata) XXX_Size() int {
	return xxx_messageInfo_ResourceMetadata.Size(m)
}
func (m *ResourceMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceMetadata proto.InternalMessageInfo

type isResourceMetadata_AcceleratorValue interface {
	isResourceMetadata_AcceleratorValue()
}

type ResourceMetadata_GpuAccelerator struct {
	GpuAccelerator *GPUAccelerator `protobuf:"bytes,1,opt,name=gpu_accelerator,json=gpuAccelerator,proto3,oneof"`
}

func (*ResourceMetadata_GpuAccelerator) isResourceMetadata_AcceleratorValue() {}

func (m *ResourceMetadata) GetAcceleratorValue() isResourceMetadata_AcceleratorValue {
	if m != nil {
		return m.AcceleratorValue
	}
	return nil
}

func (m *ResourceMetadata) GetGpuAccelerator() *GPUAccelerator {
	if x, ok := m.GetAcceleratorValue().(*ResourceMetadata_GpuAccelerator); ok {
		return x.GpuAccelerator
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ResourceMetadata) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ResourceMetadata_GpuAccelerator)(nil),
	}
}

// Task Metadata
type TaskMetadata struct {
	// Indicates whether the system should attempt to lookup this task's output to avoid duplication of work.
	Discoverable bool `protobuf:"varint,1,opt,name=discoverable,proto3" json:"discoverable,omitempty"`
	// Runtime information about the task.
	Runtime *RuntimeMetadata `protobuf:"bytes,2,opt,name=runtime,proto3" json:"runtime,omitempty"`
	// The overall timeout of a task including user-triggered retries.
	Timeout *duration.Duration `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Number of retries per task.
	Retries *RetryStrategy `protobuf:"bytes,5,opt,name=retries,proto3" json:"retries,omitempty"`
	// Indicates a logical version to apply to this task for the purpose of discovery.
	DiscoveryVersion string `protobuf:"bytes,6,opt,name=discovery_version,json=discoveryVersion,proto3" json:"discovery_version,omitempty"`
	// If set, this indicates that this task is deprecated.  This will enable owners of tasks to notify consumers
	// of the ending of support for a given task.
	DeprecatedErrorMessage string `protobuf:"bytes,7,opt,name=deprecated_error_message,json=deprecatedErrorMessage,proto3" json:"deprecated_error_message,omitempty"`
	// Identify whether task is interruptible
	//
	// Types that are valid to be assigned to InterruptibleValue:
	//	*TaskMetadata_Interruptible
	InterruptibleValue isTaskMetadata_InterruptibleValue `protobuf_oneof:"interruptible_value"`
	// Indicates whether the system should attempt to execute discoverable instances in serial to avoid duplicate work
	CacheSerializable bool `protobuf:"varint,9,opt,name=cache_serializable,json=cacheSerializable,proto3" json:"cache_serializable,omitempty"`
	// Indicates whether the task will generate a Deck URI when it finishes executing.
	GeneratesDeck bool `protobuf:"varint,10,opt,name=generates_deck,json=generatesDeck,proto3" json:"generates_deck,omitempty"`
	// Arbitrary tags that allow users and the platform to store small but arbitrary labels
	Tags map[string]string `protobuf:"bytes,11,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// pod_template_name is the unique name of a PodTemplate k8s resource to be used as the base configuration if this
	// task creates a k8s Pod. If this value is set, the specified PodTemplate will be used instead of, but applied
	// identically as, the default PodTemplate configured in FlytePropeller.
	PodTemplateName string `protobuf:"bytes,12,opt,name=pod_template_name,json=podTemplateName,proto3" json:"pod_template_name,omitempty"`
	// Additional metadata associated with resources to allocate to this task
	ResourceMetadata     *ResourceMetadata `protobuf:"bytes,13,opt,name=resource_metadata,json=resourceMetadata,proto3" json:"resource_metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TaskMetadata) Reset()         { *m = TaskMetadata{} }
func (m *TaskMetadata) String() string { return proto.CompactTextString(m) }
func (*TaskMetadata) ProtoMessage()    {}
func (*TaskMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd8423ba58d6ed80, []int{4}
}

func (m *TaskMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskMetadata.Unmarshal(m, b)
}
func (m *TaskMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskMetadata.Marshal(b, m, deterministic)
}
func (m *TaskMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskMetadata.Merge(m, src)
}
func (m *TaskMetadata) XXX_Size() int {
	return xxx_messageInfo_TaskMetadata.Size(m)
}
func (m *TaskMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_TaskMetadata proto.InternalMessageInfo

func (m *TaskMetadata) GetDiscoverable() bool {
	if m != nil {
		return m.Discoverable
	}
	return false
}

func (m *TaskMetadata) GetRuntime() *RuntimeMetadata {
	if m != nil {
		return m.Runtime
	}
	return nil
}

func (m *TaskMetadata) GetTimeout() *duration.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *TaskMetadata) GetRetries() *RetryStrategy {
	if m != nil {
		return m.Retries
	}
	return nil
}

func (m *TaskMetadata) GetDiscoveryVersion() string {
	if m != nil {
		return m.DiscoveryVersion
	}
	return ""
}

func (m *TaskMetadata) GetDeprecatedErrorMessage() string {
	if m != nil {
		return m.DeprecatedErrorMessage
	}
	return ""
}

type isTaskMetadata_InterruptibleValue interface {
	isTaskMetadata_InterruptibleValue()
}

type TaskMetadata_Interruptible struct {
	Interruptible bool `protobuf:"varint,8,opt,name=interruptible,proto3,oneof"`
}

func (*TaskMetadata_Interruptible) isTaskMetadata_InterruptibleValue() {}

func (m *TaskMetadata) GetInterruptibleValue() isTaskMetadata_InterruptibleValue {
	if m != nil {
		return m.InterruptibleValue
	}
	return nil
}

func (m *TaskMetadata) GetInterruptible() bool {
	if x, ok := m.GetInterruptibleValue().(*TaskMetadata_Interruptible); ok {
		return x.Interruptible
	}
	return false
}

func (m *TaskMetadata) GetCacheSerializable() bool {
	if m != nil {
		return m.CacheSerializable
	}
	return false
}

func (m *TaskMetadata) GetGeneratesDeck() bool {
	if m != nil {
		return m.GeneratesDeck
	}
	return false
}

func (m *TaskMetadata) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *TaskMetadata) GetPodTemplateName() string {
	if m != nil {
		return m.PodTemplateName
	}
	return ""
}

func (m *TaskMetadata) GetResourceMetadata() *ResourceMetadata {
	if m != nil {
		return m.ResourceMetadata
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TaskMetadata) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TaskMetadata_Interruptible)(nil),
	}
}

// A Task structure that uniquely identifies a task in the system
// Tasks are registered as a first step in the system.
type TaskTemplate struct {
	// Auto generated taskId by the system. Task Id uniquely identifies this task globally.
	Id *Identifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A predefined yet extensible Task type identifier. This can be used to customize any of the components. If no
	// extensions are provided in the system, Flyte will resolve the this task to its TaskCategory and default the
	// implementation registered for the TaskCategory.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Extra metadata about the task.
	Metadata *TaskMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// A strongly typed interface for the task. This enables others to use this task within a workflow and guarantees
	// compile-time validation of the workflow to avoid costly runtime failures.
	Interface *TypedInterface `protobuf:"bytes,4,opt,name=interface,proto3" json:"interface,omitempty"`
	// Custom data about the task. This is extensible to allow various plugins in the system.
	Custom *_struct.Struct `protobuf:"bytes,5,opt,name=custom,proto3" json:"custom,omitempty"`
	// Known target types that the system will guarantee plugins for. Custom SDK plugins are allowed to set these if needed.
	// If no corresponding execution-layer plugins are found, the system will default to handling these using built-in
	// handlers.
	//
	// Types that are valid to be assigned to Target:
	//	*TaskTemplate_Container
	//	*TaskTemplate_K8SPod
	//	*TaskTemplate_Sql
	Target isTaskTemplate_Target `protobuf_oneof:"target"`
	// This can be used to customize task handling at execution time for the same task type.
	TaskTypeVersion int32 `protobuf:"varint,7,opt,name=task_type_version,json=taskTypeVersion,proto3" json:"task_type_version,omitempty"`
	// security_context encapsulates security attributes requested to run this task.
	SecurityContext *SecurityContext `protobuf:"bytes,8,opt,name=security_context,json=securityContext,proto3" json:"security_context,omitempty"`
	// Metadata about the custom defined for this task. This is extensible to allow various plugins in the system
	// to use as required.
	// reserve the field numbers 1 through 15 for very frequently occurring message elements
	Config               map[string]string `protobuf:"bytes,16,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TaskTemplate) Reset()         { *m = TaskTemplate{} }
func (m *TaskTemplate) String() string { return proto.CompactTextString(m) }
func (*TaskTemplate) ProtoMessage()    {}
func (*TaskTemplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd8423ba58d6ed80, []int{5}
}

func (m *TaskTemplate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskTemplate.Unmarshal(m, b)
}
func (m *TaskTemplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskTemplate.Marshal(b, m, deterministic)
}
func (m *TaskTemplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskTemplate.Merge(m, src)
}
func (m *TaskTemplate) XXX_Size() int {
	return xxx_messageInfo_TaskTemplate.Size(m)
}
func (m *TaskTemplate) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskTemplate.DiscardUnknown(m)
}

var xxx_messageInfo_TaskTemplate proto.InternalMessageInfo

func (m *TaskTemplate) GetId() *Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TaskTemplate) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *TaskTemplate) GetMetadata() *TaskMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *TaskTemplate) GetInterface() *TypedInterface {
	if m != nil {
		return m.Interface
	}
	return nil
}

func (m *TaskTemplate) GetCustom() *_struct.Struct {
	if m != nil {
		return m.Custom
	}
	return nil
}

type isTaskTemplate_Target interface {
	isTaskTemplate_Target()
}

type TaskTemplate_Container struct {
	Container *Container `protobuf:"bytes,6,opt,name=container,proto3,oneof"`
}

type TaskTemplate_K8SPod struct {
	K8SPod *K8SPod `protobuf:"bytes,17,opt,name=k8s_pod,json=k8sPod,proto3,oneof"`
}

type TaskTemplate_Sql struct {
	Sql *Sql `protobuf:"bytes,18,opt,name=sql,proto3,oneof"`
}

func (*TaskTemplate_Container) isTaskTemplate_Target() {}

func (*TaskTemplate_K8SPod) isTaskTemplate_Target() {}

func (*TaskTemplate_Sql) isTaskTemplate_Target() {}

func (m *TaskTemplate) GetTarget() isTaskTemplate_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *TaskTemplate) GetContainer() *Container {
	if x, ok := m.GetTarget().(*TaskTemplate_Container); ok {
		return x.Container
	}
	return nil
}

func (m *TaskTemplate) GetK8SPod() *K8SPod {
	if x, ok := m.GetTarget().(*TaskTemplate_K8SPod); ok {
		return x.K8SPod
	}
	return nil
}

func (m *TaskTemplate) GetSql() *Sql {
	if x, ok := m.GetTarget().(*TaskTemplate_Sql); ok {
		return x.Sql
	}
	return nil
}

func (m *TaskTemplate) GetTaskTypeVersion() int32 {
	if m != nil {
		return m.TaskTypeVersion
	}
	return 0
}

func (m *TaskTemplate) GetSecurityContext() *SecurityContext {
	if m != nil {
		return m.SecurityContext
	}
	return nil
}

func (m *TaskTemplate) GetConfig() map[string]string {
	if m != nil {
		return m.Config
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TaskTemplate) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TaskTemplate_Container)(nil),
		(*TaskTemplate_K8SPod)(nil),
		(*TaskTemplate_Sql)(nil),
	}
}

// Defines port properties for a container.
type ContainerPort struct {
	// Number of port to expose on the pod's IP address.
	// This must be a valid port number, 0 < x < 65536.
	ContainerPort        uint32   `protobuf:"varint,1,opt,name=container_port,json=containerPort,proto3" json:"container_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerPort) Reset()         { *m = ContainerPort{} }
func (m *ContainerPort) String() string { return proto.CompactTextString(m) }
func (*ContainerPort) ProtoMessage()    {}
func (*ContainerPort) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd8423ba58d6ed80, []int{6}
}

func (m *ContainerPort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContainerPort.Unmarshal(m, b)
}
func (m *ContainerPort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContainerPort.Marshal(b, m, deterministic)
}
func (m *ContainerPort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerPort.Merge(m, src)
}
func (m *ContainerPort) XXX_Size() int {
	return xxx_messageInfo_ContainerPort.Size(m)
}
func (m *ContainerPort) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerPort.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerPort proto.InternalMessageInfo

func (m *ContainerPort) GetContainerPort() uint32 {
	if m != nil {
		return m.ContainerPort
	}
	return 0
}

type Container struct {
	// Container image url. Eg: docker/redis:latest
	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// Command to be executed, if not provided, the default entrypoint in the container image will be used.
	Command []string `protobuf:"bytes,2,rep,name=command,proto3" json:"command,omitempty"`
	// These will default to Flyte given paths. If provided, the system will not append known paths. If the task still
	// needs flyte's inputs and outputs path, add $(FLYTE_INPUT_FILE), $(FLYTE_OUTPUT_FILE) wherever makes sense and the
	// system will populate these before executing the container.
	Args []string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	// Container resources requirement as specified by the container engine.
	Resources *Resources `protobuf:"bytes,4,opt,name=resources,proto3" json:"resources,omitempty"`
	// Environment variables will be set as the container is starting up.
	Env []*KeyValuePair `protobuf:"bytes,5,rep,name=env,proto3" json:"env,omitempty"`
	// Allows extra configs to be available for the container.
	// TODO: elaborate on how configs will become available.
	// Deprecated, please use TaskTemplate.config instead.
	Config []*KeyValuePair `protobuf:"bytes,6,rep,name=config,proto3" json:"config,omitempty"` // Deprecated: Do not use.
	// Ports to open in the container. This feature is not supported by all execution engines. (e.g. supported on K8s but
	// not supported on AWS Batch)
	// Only K8s
	Ports []*ContainerPort `protobuf:"bytes,7,rep,name=ports,proto3" json:"ports,omitempty"`
	// BETA: Optional configuration for DataLoading. If not specified, then default values are used.
	// This makes it possible to to run a completely portable container, that uses inputs and outputs
	// only from the local file-system and without having any reference to flyteidl. This is supported only on K8s at the moment.
	// If data loading is enabled, then data will be mounted in accompanying directories specified in the DataLoadingConfig. If the directories
	// are not specified, inputs will be mounted onto and outputs will be uploaded from a pre-determined file-system path. Refer to the documentation
	// to understand the default paths.
	// Only K8s
	DataConfig           *DataLoadingConfig     `protobuf:"bytes,9,opt,name=data_config,json=dataConfig,proto3" json:"data_config,omitempty"`
	Architecture         Container_Architecture `protobuf:"varint,10,opt,name=architecture,proto3,enum=flyteidl.core.Container_Architecture" json:"architecture,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Container) Reset()         { *m = Container{} }
func (m *Container) String() string { return proto.CompactTextString(m) }
func (*Container) ProtoMessage()    {}
func (*Container) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd8423ba58d6ed80, []int{7}
}

func (m *Container) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Container.Unmarshal(m, b)
}
func (m *Container) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Container.Marshal(b, m, deterministic)
}
func (m *Container) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Container.Merge(m, src)
}
func (m *Container) XXX_Size() int {
	return xxx_messageInfo_Container.Size(m)
}
func (m *Container) XXX_DiscardUnknown() {
	xxx_messageInfo_Container.DiscardUnknown(m)
}

var xxx_messageInfo_Container proto.InternalMessageInfo

func (m *Container) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Container) GetCommand() []string {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *Container) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Container) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Container) GetEnv() []*KeyValuePair {
	if m != nil {
		return m.Env
	}
	return nil
}

// Deprecated: Do not use.
func (m *Container) GetConfig() []*KeyValuePair {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Container) GetPorts() []*ContainerPort {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *Container) GetDataConfig() *DataLoadingConfig {
	if m != nil {
		return m.DataConfig
	}
	return nil
}

func (m *Container) GetArchitecture() Container_Architecture {
	if m != nil {
		return m.Architecture
	}
	return Container_UNKNOWN
}

// Strategy to use when dealing with Blob, Schema, or multipart blob data (large datasets)
type IOStrategy struct {
	// Mode to use to manage downloads
	DownloadMode IOStrategy_DownloadMode `protobuf:"varint,1,opt,name=download_mode,json=downloadMode,proto3,enum=flyteidl.core.IOStrategy_DownloadMode" json:"download_mode,omitempty"`
	// Mode to use to manage uploads
	UploadMode           IOStrategy_UploadMode `protobuf:"varint,2,opt,name=upload_mode,json=uploadMode,proto3,enum=flyteidl.core.IOStrategy_UploadMode" json:"upload_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *IOStrategy) Reset()         { *m = IOStrategy{} }
func (m *IOStrategy) String() string { return proto.CompactTextString(m) }
func (*IOStrategy) ProtoMessage()    {}
func (*IOStrategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd8423ba58d6ed80, []int{8}
}

func (m *IOStrategy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IOStrategy.Unmarshal(m, b)
}
func (m *IOStrategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IOStrategy.Marshal(b, m, deterministic)
}
func (m *IOStrategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IOStrategy.Merge(m, src)
}
func (m *IOStrategy) XXX_Size() int {
	return xxx_messageInfo_IOStrategy.Size(m)
}
func (m *IOStrategy) XXX_DiscardUnknown() {
	xxx_messageInfo_IOStrategy.DiscardUnknown(m)
}

var xxx_messageInfo_IOStrategy proto.InternalMessageInfo

func (m *IOStrategy) GetDownloadMode() IOStrategy_DownloadMode {
	if m != nil {
		return m.DownloadMode
	}
	return IOStrategy_DOWNLOAD_EAGER
}

func (m *IOStrategy) GetUploadMode() IOStrategy_UploadMode {
	if m != nil {
		return m.UploadMode
	}
	return IOStrategy_UPLOAD_ON_EXIT
}

// This configuration allows executing raw containers in Flyte using the Flyte CoPilot system.
// Flyte CoPilot, eliminates the needs of flytekit or sdk inside the container. Any inputs required by the users container are side-loaded in the input_path
// Any outputs generated by the user container - within output_path are automatically uploaded.
type DataLoadingConfig struct {
	// Flag enables DataLoading Config. If this is not set, data loading will not be used!
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// File system path (start at root). This folder will contain all the inputs exploded to a separate file.
	// Example, if the input interface needs (x: int, y: blob, z: multipart_blob) and the input path is '/var/flyte/inputs', then the file system will look like
	// /var/flyte/inputs/inputs.<metadata format dependent -> .pb .json .yaml> -> Format as defined previously. The Blob and Multipart blob will reference local filesystem instead of remote locations
	// /var/flyte/inputs/x -> X is a file that contains the value of x (integer) in string format
	// /var/flyte/inputs/y -> Y is a file in Binary format
	// /var/flyte/inputs/z/... -> Note Z itself is a directory
	// More information about the protocol - refer to docs #TODO reference docs here
	InputPath string `protobuf:"bytes,2,opt,name=input_path,json=inputPath,proto3" json:"input_path,omitempty"`
	// File system path (start at root). This folder should contain all the outputs for the task as individual files and/or an error text file
	OutputPath string `protobuf:"bytes,3,opt,name=output_path,json=outputPath,proto3" json:"output_path,omitempty"`
	// In the inputs folder, there will be an additional summary/metadata file that contains references to all files or inlined primitive values.
	// This format decides the actual encoding for the data. Refer to the encoding to understand the specifics of the contents and the encoding
	Format               DataLoadingConfig_LiteralMapFormat `protobuf:"varint,4,opt,name=format,proto3,enum=flyteidl.core.DataLoadingConfig_LiteralMapFormat" json:"format,omitempty"`
	IoStrategy           *IOStrategy                        `protobuf:"bytes,5,opt,name=io_strategy,json=ioStrategy,proto3" json:"io_strategy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *DataLoadingConfig) Reset()         { *m = DataLoadingConfig{} }
func (m *DataLoadingConfig) String() string { return proto.CompactTextString(m) }
func (*DataLoadingConfig) ProtoMessage()    {}
func (*DataLoadingConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd8423ba58d6ed80, []int{9}
}

func (m *DataLoadingConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataLoadingConfig.Unmarshal(m, b)
}
func (m *DataLoadingConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataLoadingConfig.Marshal(b, m, deterministic)
}
func (m *DataLoadingConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataLoadingConfig.Merge(m, src)
}
func (m *DataLoadingConfig) XXX_Size() int {
	return xxx_messageInfo_DataLoadingConfig.Size(m)
}
func (m *DataLoadingConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DataLoadingConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DataLoadingConfig proto.InternalMessageInfo

func (m *DataLoadingConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *DataLoadingConfig) GetInputPath() string {
	if m != nil {
		return m.InputPath
	}
	return ""
}

func (m *DataLoadingConfig) GetOutputPath() string {
	if m != nil {
		return m.OutputPath
	}
	return ""
}

func (m *DataLoadingConfig) GetFormat() DataLoadingConfig_LiteralMapFormat {
	if m != nil {
		return m.Format
	}
	return DataLoadingConfig_JSON
}

func (m *DataLoadingConfig) GetIoStrategy() *IOStrategy {
	if m != nil {
		return m.IoStrategy
	}
	return nil
}

// Defines a pod spec and additional pod metadata that is created when a task is executed.
type K8SPod struct {
	// Contains additional metadata for building a kubernetes pod.
	Metadata *K8SObjectMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Defines the primary pod spec created when a task is executed.
	// This should be a JSON-marshalled pod spec, which can be defined in
	// - go, using: https://github.com/kubernetes/api/blob/release-1.21/core/v1/types.go#L2936
	// - python: using https://github.com/kubernetes-client/python/blob/release-19.0/kubernetes/client/models/v1_pod_spec.py
	PodSpec *_struct.Struct `protobuf:"bytes,2,opt,name=pod_spec,json=podSpec,proto3" json:"pod_spec,omitempty"`
	// BETA: Optional configuration for DataLoading. If not specified, then default values are used.
	// This makes it possible to to run a completely portable container, that uses inputs and outputs
	// only from the local file-system and without having any reference to flytekit. This is supported only on K8s at the moment.
	// If data loading is enabled, then data will be mounted in accompanying directories specified in the DataLoadingConfig. If the directories
	// are not specified, inputs will be mounted onto and outputs will be uploaded from a pre-determined file-system path. Refer to the documentation
	// to understand the default paths.
	// Only K8s
	DataConfig           *DataLoadingConfig `protobuf:"bytes,3,opt,name=data_config,json=dataConfig,proto3" json:"data_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *K8SPod) Reset()         { *m = K8SPod{} }
func (m *K8SPod) String() string { return proto.CompactTextString(m) }
func (*K8SPod) ProtoMessage()    {}
func (*K8SPod) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd8423ba58d6ed80, []int{10}
}

func (m *K8SPod) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_K8SPod.Unmarshal(m, b)
}
func (m *K8SPod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_K8SPod.Marshal(b, m, deterministic)
}
func (m *K8SPod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_K8SPod.Merge(m, src)
}
func (m *K8SPod) XXX_Size() int {
	return xxx_messageInfo_K8SPod.Size(m)
}
func (m *K8SPod) XXX_DiscardUnknown() {
	xxx_messageInfo_K8SPod.DiscardUnknown(m)
}

var xxx_messageInfo_K8SPod proto.InternalMessageInfo

func (m *K8SPod) GetMetadata() *K8SObjectMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *K8SPod) GetPodSpec() *_struct.Struct {
	if m != nil {
		return m.PodSpec
	}
	return nil
}

func (m *K8SPod) GetDataConfig() *DataLoadingConfig {
	if m != nil {
		return m.DataConfig
	}
	return nil
}

// Metadata for building a kubernetes object when a task is executed.
type K8SObjectMetadata struct {
	// Optional labels to add to the pod definition.
	Labels map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional annotations to add to the pod definition.
	Annotations          map[string]string `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *K8SObjectMetadata) Reset()         { *m = K8SObjectMetadata{} }
func (m *K8SObjectMetadata) String() string { return proto.CompactTextString(m) }
func (*K8SObjectMetadata) ProtoMessage()    {}
func (*K8SObjectMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd8423ba58d6ed80, []int{11}
}

func (m *K8SObjectMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_K8SObjectMetadata.Unmarshal(m, b)
}
func (m *K8SObjectMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_K8SObjectMetadata.Marshal(b, m, deterministic)
}
func (m *K8SObjectMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_K8SObjectMetadata.Merge(m, src)
}
func (m *K8SObjectMetadata) XXX_Size() int {
	return xxx_messageInfo_K8SObjectMetadata.Size(m)
}
func (m *K8SObjectMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_K8SObjectMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_K8SObjectMetadata proto.InternalMessageInfo

func (m *K8SObjectMetadata) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *K8SObjectMetadata) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

// Sql represents a generic sql workload with a statement and dialect.
type Sql struct {
	// The actual query to run, the query can have templated parameters.
	// We use Flyte's Golang templating format for Query templating.
	// Refer to the templating documentation.
	// https://docs.flyte.org/projects/cookbook/en/latest/auto/integrations/external_services/hive/hive.html#sphx-glr-auto-integrations-external-services-hive-hive-py
	// For example,
	// insert overwrite directory '{{ .rawOutputDataPrefix }}' stored as parquet
	// select *
	// from my_table
	// where ds = '{{ .Inputs.ds }}'
	Statement            string      `protobuf:"bytes,1,opt,name=statement,proto3" json:"statement,omitempty"`
	Dialect              Sql_Dialect `protobuf:"varint,2,opt,name=dialect,proto3,enum=flyteidl.core.Sql_Dialect" json:"dialect,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Sql) Reset()         { *m = Sql{} }
func (m *Sql) String() string { return proto.CompactTextString(m) }
func (*Sql) ProtoMessage()    {}
func (*Sql) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd8423ba58d6ed80, []int{12}
}

func (m *Sql) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sql.Unmarshal(m, b)
}
func (m *Sql) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sql.Marshal(b, m, deterministic)
}
func (m *Sql) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sql.Merge(m, src)
}
func (m *Sql) XXX_Size() int {
	return xxx_messageInfo_Sql.Size(m)
}
func (m *Sql) XXX_DiscardUnknown() {
	xxx_messageInfo_Sql.DiscardUnknown(m)
}

var xxx_messageInfo_Sql proto.InternalMessageInfo

func (m *Sql) GetStatement() string {
	if m != nil {
		return m.Statement
	}
	return ""
}

func (m *Sql) GetDialect() Sql_Dialect {
	if m != nil {
		return m.Dialect
	}
	return Sql_UNDEFINED
}

func init() {
	proto.RegisterEnum("flyteidl.core.Resources_ResourceName", Resources_ResourceName_name, Resources_ResourceName_value)
	proto.RegisterEnum("flyteidl.core.RuntimeMetadata_RuntimeType", RuntimeMetadata_RuntimeType_name, RuntimeMetadata_RuntimeType_value)
	proto.RegisterEnum("flyteidl.core.Container_Architecture", Container_Architecture_name, Container_Architecture_value)
	proto.RegisterEnum("flyteidl.core.IOStrategy_DownloadMode", IOStrategy_DownloadMode_name, IOStrategy_DownloadMode_value)
	proto.RegisterEnum("flyteidl.core.IOStrategy_UploadMode", IOStrategy_UploadMode_name, IOStrategy_UploadMode_value)
	proto.RegisterEnum("flyteidl.core.DataLoadingConfig_LiteralMapFormat", DataLoadingConfig_LiteralMapFormat_name, DataLoadingConfig_LiteralMapFormat_value)
	proto.RegisterEnum("flyteidl.core.Sql_Dialect", Sql_Dialect_name, Sql_Dialect_value)
	proto.RegisterType((*Resources)(nil), "flyteidl.core.Resources")
	proto.RegisterType((*Resources_ResourceEntry)(nil), "flyteidl.core.Resources.ResourceEntry")
	proto.RegisterType((*RuntimeMetadata)(nil), "flyteidl.core.RuntimeMetadata")
	proto.RegisterType((*GPUAccelerator)(nil), "flyteidl.core.GPUAccelerator")
	proto.RegisterType((*ResourceMetadata)(nil), "flyteidl.core.ResourceMetadata")
	proto.RegisterType((*TaskMetadata)(nil), "flyteidl.core.TaskMetadata")
	proto.RegisterMapType((map[string]string)(nil), "flyteidl.core.TaskMetadata.TagsEntry")
	proto.RegisterType((*TaskTemplate)(nil), "flyteidl.core.TaskTemplate")
	proto.RegisterMapType((map[string]string)(nil), "flyteidl.core.TaskTemplate.ConfigEntry")
	proto.RegisterType((*ContainerPort)(nil), "flyteidl.core.ContainerPort")
	proto.RegisterType((*Container)(nil), "flyteidl.core.Container")
	proto.RegisterType((*IOStrategy)(nil), "flyteidl.core.IOStrategy")
	proto.RegisterType((*DataLoadingConfig)(nil), "flyteidl.core.DataLoadingConfig")
	proto.RegisterType((*K8SPod)(nil), "flyteidl.core.K8sPod")
	proto.RegisterType((*K8SObjectMetadata)(nil), "flyteidl.core.K8sObjectMetadata")
	proto.RegisterMapType((map[string]string)(nil), "flyteidl.core.K8sObjectMetadata.AnnotationsEntry")
	proto.RegisterMapType((map[string]string)(nil), "flyteidl.core.K8sObjectMetadata.LabelsEntry")
	proto.RegisterType((*Sql)(nil), "flyteidl.core.Sql")
}

func init() { proto.RegisterFile("flyteidl/core/tasks.proto", fileDescriptor_bd8423ba58d6ed80) }

var fileDescriptor_bd8423ba58d6ed80 = []byte{
	// 1787 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xdd, 0x72, 0xdb, 0xb8,
	0x15, 0xb6, 0x24, 0x5b, 0xb2, 0x8e, 0x2c, 0x9b, 0x42, 0x36, 0x29, 0xe3, 0x26, 0xd9, 0x8c, 0xa6,
	0x9b, 0xa4, 0xdb, 0x46, 0x6e, 0xbc, 0x19, 0xc7, 0xbb, 0xed, 0xa4, 0x23, 0x47, 0x4a, 0xac, 0x5a,
	0x7f, 0x03, 0xc9, 0xd9, 0xa6, 0x33, 0x1d, 0x16, 0x26, 0x61, 0x9a, 0x35, 0x45, 0xd0, 0x20, 0xe8,
	0x56, 0xb9, 0xef, 0x03, 0xb4, 0x2f, 0xd1, 0xe9, 0x4c, 0x6f, 0x7b, 0xd9, 0xab, 0xbe, 0x40, 0x1f,
	0xa8, 0x17, 0x1d, 0x80, 0x20, 0xf5, 0x63, 0x7b, 0x3d, 0xbe, 0x22, 0x70, 0xce, 0x77, 0x0e, 0x80,
	0xf3, 0x4f, 0x78, 0x78, 0xea, 0x4f, 0x05, 0xf5, 0x1c, 0x7f, 0xc7, 0x66, 0x9c, 0xee, 0x08, 0x12,
	0x9d, 0x47, 0x8d, 0x90, 0x33, 0xc1, 0x50, 0x35, 0x65, 0x35, 0x24, 0x6b, 0xfb, 0xc9, 0x22, 0xd2,
	0x73, 0x68, 0x20, 0xbc, 0x53, 0x8f, 0xf2, 0x04, 0xbe, 0xfd, 0x78, 0x89, 0x1f, 0x08, 0xca, 0x4f,
	0x89, 0x4d, 0x35, 0xfb, 0xd1, 0x22, 0xdb, 0xf7, 0x04, 0xe5, 0xc4, 0x8f, 0xae, 0xe7, 0x46, 0xd4,
	0x8e, 0xb9, 0x27, 0xa6, 0x9a, 0xfb, 0xc4, 0x65, 0xcc, 0xf5, 0xe9, 0x8e, 0xda, 0x9d, 0xc4, 0xa7,
	0x3b, 0x4e, 0xcc, 0x89, 0xf0, 0x58, 0x90, 0x4a, 0x2f, 0xf3, 0x23, 0xc1, 0x63, 0x5b, 0x24, 0xdc,
	0xfa, 0x7f, 0xf3, 0x50, 0xc6, 0x34, 0x62, 0x31, 0xb7, 0x69, 0x84, 0x0e, 0x60, 0x9d, 0xd3, 0x8b,
	0x98, 0x46, 0x22, 0x32, 0x73, 0x4f, 0x0b, 0x2f, 0x2a, 0xbb, 0xcf, 0x1a, 0x0b, 0x0f, 0x6d, 0x64,
	0xd8, 0x6c, 0xd5, 0x0e, 0x04, 0x9f, 0xe2, 0x4c, 0x0e, 0xbd, 0x85, 0xa2, 0xef, 0x4d, 0x3c, 0x11,
	0x99, 0xf9, 0x3b, 0x69, 0xd0, 0x52, 0xdb, 0x7f, 0x80, 0xea, 0x02, 0x03, 0x7d, 0x0b, 0xab, 0x01,
	0x99, 0x50, 0x33, 0xf7, 0x34, 0xf7, 0x62, 0x73, 0xf7, 0xab, 0x5b, 0xd5, 0xf5, 0xc9, 0x84, 0x62,
	0x25, 0x82, 0xbe, 0x80, 0xb5, 0x4b, 0xe2, 0xc7, 0xd4, 0xcc, 0x3f, 0xcd, 0xbd, 0x28, 0xe3, 0x64,
	0x53, 0xff, 0x3d, 0x6c, 0xcc, 0x63, 0x51, 0x05, 0x4a, 0xc7, 0xfd, 0xa3, 0xfe, 0xe0, 0xfb, 0xbe,
	0xb1, 0x82, 0x4a, 0x50, 0x78, 0x37, 0x3c, 0x36, 0x72, 0x72, 0xf1, 0x61, 0x78, 0x6c, 0xe4, 0x11,
	0x40, 0xb1, 0xd7, 0xee, 0x0d, 0xf0, 0x27, 0xa3, 0x20, 0xa1, 0xa3, 0xf1, 0x00, 0x37, 0x3f, 0xb4,
	0x8d, 0x55, 0x74, 0x1f, 0x6a, 0xed, 0xe1, 0x61, 0xbb, 0xd7, 0xc6, 0xcd, 0xae, 0x95, 0x92, 0xd7,
	0xea, 0xff, 0xcc, 0xc1, 0x16, 0x8e, 0x03, 0xe1, 0x4d, 0x68, 0x8f, 0x0a, 0xe2, 0x10, 0x41, 0xd0,
	0x5b, 0x58, 0x15, 0xd3, 0x30, 0x7d, 0xc3, 0xd7, 0xcb, 0x6f, 0x58, 0x44, 0xa7, 0xfb, 0xf1, 0x34,
	0xa4, 0x58, 0xc9, 0x21, 0x13, 0x4a, 0x97, 0x94, 0x47, 0x1e, 0x0b, 0xf4, 0x53, 0xd2, 0x2d, 0x7a,
	0x00, 0xc5, 0x53, 0x9f, 0x5c, 0x32, 0x6e, 0x16, 0x14, 0x43, 0xef, 0xea, 0xcf, 0xa1, 0x32, 0xa7,
	0x06, 0x95, 0x61, 0x6d, 0x30, 0x3e, 0x6c, 0x63, 0x63, 0x05, 0x55, 0xa1, 0xfc, 0xbe, 0xfb, 0x69,
	0xdc, 0xb6, 0x46, 0xad, 0x23, 0x23, 0x57, 0xff, 0x6b, 0x0e, 0x36, 0x3f, 0x0c, 0x8f, 0x9b, 0xb6,
	0x4d, 0x7d, 0xca, 0x89, 0x60, 0x5c, 0xea, 0x74, 0xe8, 0xa5, 0x67, 0x27, 0xf7, 0x2d, 0x63, 0xbd,
	0x43, 0xcf, 0xa0, 0x1a, 0x07, 0x21, 0xe1, 0xc2, 0x93, 0xf1, 0x45, 0x1d, 0x75, 0x97, 0xf5, 0xc3,
	0x15, 0xbc, 0x48, 0x46, 0xcf, 0x61, 0x33, 0xdb, 0x5a, 0x91, 0xf7, 0x99, 0x26, 0x77, 0x93, 0xc0,
	0x8c, 0x3e, 0xf2, 0x3e, 0xd3, 0x83, 0x07, 0xf0, 0xc5, 0x22, 0xd0, 0x4a, 0x3c, 0x74, 0x01, 0x46,
	0xea, 0xa1, 0xcc, 0x84, 0x87, 0xb0, 0xe5, 0x86, 0xb1, 0x45, 0x66, 0xf7, 0x54, 0xb7, 0xab, 0xec,
	0x3e, 0x5e, 0xb2, 0xe6, 0xe2, 0x63, 0x0e, 0x57, 0xf0, 0xa6, 0x1b, 0xc6, 0x73, 0x94, 0x83, 0x7b,
	0x50, 0x9b, 0xd3, 0xa2, 0x8f, 0xfc, 0xcf, 0x1a, 0x6c, 0x8c, 0x49, 0x74, 0x9e, 0x9d, 0x57, 0x87,
	0x0d, 0xc7, 0x8b, 0x6c, 0x76, 0x49, 0x39, 0x39, 0xf1, 0x13, 0x53, 0xac, 0xe3, 0x05, 0x1a, 0xda,
	0x87, 0x12, 0x4f, 0x8c, 0xac, 0x4c, 0x51, 0xd9, 0x7d, 0xf2, 0xc3, 0x9e, 0xc5, 0x29, 0x1c, 0x7d,
	0x03, 0x25, 0xf9, 0x65, 0xb1, 0x30, 0x57, 0x95, 0xe4, 0xc3, 0x46, 0x92, 0xa7, 0x8d, 0x34, 0x4f,
	0x1b, 0x2d, 0x9d, 0xc7, 0x38, 0x45, 0xa2, 0x3d, 0x28, 0x71, 0x2a, 0xb8, 0x47, 0x23, 0x73, 0x4d,
	0x09, 0x3d, 0xba, 0x92, 0x0c, 0x82, 0x4f, 0x47, 0x82, 0x13, 0x41, 0xdd, 0x29, 0x4e, 0xc1, 0xe8,
	0x67, 0x50, 0x4b, 0xaf, 0x3d, 0xb5, 0xd2, 0x38, 0x2a, 0x2a, 0xd7, 0x1a, 0x19, 0xe3, 0xa3, 0x0e,
	0xa8, 0x7d, 0x30, 0x1d, 0x1a, 0x72, 0x6a, 0x13, 0x41, 0x1d, 0x8b, 0x72, 0xce, 0xb8, 0x35, 0xa1,
	0x51, 0x44, 0x5c, 0x6a, 0x96, 0x94, 0xcc, 0x83, 0x19, 0xbf, 0x2d, 0xd9, 0xbd, 0x84, 0x2b, 0xc3,
	0x43, 0x15, 0x36, 0x1e, 0x87, 0xc2, 0x93, 0x26, 0x5b, 0x4f, 0xc3, 0x63, 0x81, 0x8c, 0x5e, 0x02,
	0xb2, 0x89, 0x7d, 0x46, 0xad, 0x88, 0x72, 0x8f, 0xf8, 0xde, 0x67, 0x65, 0xdf, 0xb2, 0xb2, 0x6f,
	0x4d, 0x71, 0x46, 0x73, 0x0c, 0xf4, 0x15, 0x6c, 0xba, 0x34, 0x90, 0xce, 0xa2, 0x91, 0xe5, 0x50,
	0xfb, 0xdc, 0x04, 0x05, 0xad, 0x66, 0xd4, 0x16, 0xb5, 0xcf, 0x65, 0x99, 0x10, 0xc4, 0x8d, 0xcc,
	0x8a, 0xaa, 0x3a, 0xcb, 0x65, 0x62, 0xde, 0xb5, 0x8d, 0x31, 0x71, 0xa3, 0xa4, 0xe8, 0x28, 0x11,
	0xf4, 0x35, 0xd4, 0x42, 0xe6, 0x58, 0x82, 0x4e, 0x42, 0x9f, 0x08, 0x6a, 0xa9, 0x72, 0xb3, 0xa1,
	0xde, 0xba, 0x15, 0x32, 0x67, 0xac, 0xe9, 0xaa, 0x58, 0x74, 0xa1, 0xc6, 0x75, 0x68, 0x5a, 0x13,
	0xad, 0xd0, 0xac, 0x2a, 0x6f, 0x7c, 0x79, 0x43, 0x69, 0xca, 0xbc, 0x6f, 0xf0, 0x25, 0xca, 0xf6,
	0x1b, 0x28, 0x67, 0x97, 0x41, 0x06, 0x14, 0xce, 0xe9, 0x54, 0xe7, 0x9c, 0x5c, 0x5e, 0x5f, 0xbf,
	0xbe, 0xcb, 0xef, 0xe7, 0x0e, 0xee, 0xc3, 0xbd, 0x05, 0xa3, 0xea, 0x28, 0xfe, 0x8b, 0x8e, 0xe2,
	0xf4, 0xca, 0xe8, 0xa7, 0x90, 0xf7, 0x1c, 0x9d, 0x28, 0x0f, 0x97, 0xee, 0xd7, 0xc9, 0xba, 0x14,
	0xce, 0x7b, 0x0e, 0x42, 0xba, 0x46, 0x25, 0x67, 0x25, 0x75, 0xe7, 0x0d, 0xac, 0x67, 0x8f, 0x2c,
	0x28, 0x25, 0x3f, 0xfe, 0x01, 0xc3, 0xe2, 0x0c, 0x8c, 0x7e, 0x09, 0xe5, 0xac, 0xc9, 0xe9, 0x08,
	0x5f, 0xce, 0x53, 0x59, 0x97, 0x9c, 0x4e, 0x0a, 0xc2, 0x33, 0x3c, 0xda, 0x81, 0xa2, 0x1d, 0x47,
	0x82, 0x4d, 0x74, 0x98, 0xff, 0xe8, 0x4a, 0x6e, 0x8c, 0x54, 0x0f, 0xc3, 0x1a, 0x86, 0xf6, 0xa1,
	0x6c, 0xb3, 0x40, 0x10, 0x2f, 0xa0, 0x5c, 0x05, 0x76, 0x65, 0xd7, 0x5c, 0x3a, 0xed, 0x5d, 0xca,
	0x3f, 0x5c, 0xc1, 0x33, 0x30, 0xfa, 0x05, 0x94, 0xce, 0xf7, 0x23, 0x2b, 0x64, 0x8e, 0x59, 0x53,
	0x72, 0xf7, 0x97, 0xe4, 0x8e, 0xf6, 0xa3, 0x21, 0x73, 0x0e, 0x57, 0x70, 0xf1, 0x5c, 0xad, 0xd0,
	0x33, 0x28, 0x44, 0x17, 0xbe, 0x89, 0x14, 0x1a, 0x2d, 0xa1, 0x47, 0x17, 0xfe, 0xe1, 0x0a, 0x96,
	0x00, 0x19, 0x54, 0x72, 0x60, 0xb0, 0xa4, 0x1d, 0xb3, 0xa4, 0x93, 0x09, 0xb4, 0x86, 0xb7, 0x24,
	0x43, 0x3e, 0x3f, 0xcd, 0xb9, 0x0e, 0x18, 0x69, 0x57, 0xb7, 0xe4, 0xdd, 0xe8, 0x9f, 0x85, 0x4a,
	0x9e, 0xab, 0x05, 0x65, 0xa4, 0x61, 0xef, 0x12, 0x14, 0xde, 0x8a, 0x16, 0x09, 0xe8, 0xd7, 0x50,
	0xb4, 0x59, 0x70, 0xea, 0xb9, 0xa6, 0xa1, 0x12, 0xe1, 0xf9, 0x35, 0xfe, 0x4a, 0xa3, 0x43, 0x1a,
	0xe5, 0xd4, 0x73, 0x75, 0xff, 0x4d, 0xc4, 0xb6, 0xbf, 0x85, 0xca, 0x1c, 0xf9, 0x4e, 0x41, 0xb9,
	0x0e, 0x45, 0x41, 0xb8, 0x4b, 0x45, 0x7d, 0x0f, 0xaa, 0x99, 0xc1, 0x87, 0x8c, 0x0b, 0x99, 0xc4,
	0x99, 0xd1, 0xad, 0x90, 0x71, 0xa1, 0x34, 0x56, 0x71, 0xd5, 0x9e, 0x87, 0xd5, 0xff, 0x57, 0x80,
	0x72, 0x26, 0x28, 0x4f, 0xf2, 0x26, 0xb2, 0xee, 0x24, 0xa7, 0x27, 0x1b, 0xd9, 0x0b, 0x6d, 0x36,
	0x99, 0x90, 0xc0, 0x51, 0x13, 0x46, 0x19, 0xa7, 0x5b, 0x19, 0xc1, 0x84, 0xbb, 0x91, 0x59, 0x50,
	0x64, 0xb5, 0x46, 0x7b, 0x50, 0x4e, 0xb3, 0x2e, 0xd2, 0x81, 0x68, 0xde, 0x34, 0x42, 0xe0, 0x19,
	0x14, 0xbd, 0x84, 0x02, 0x0d, 0x2e, 0xcd, 0x35, 0x65, 0xc4, 0xe5, 0xa0, 0x3f, 0xa2, 0xd3, 0x8f,
	0xf2, 0xd5, 0x43, 0xe2, 0x71, 0x2c, 0x71, 0xe8, 0x4d, 0x66, 0xf6, 0xe2, 0xad, 0x12, 0x07, 0x79,
	0x33, 0x97, 0x9a, 0x1b, 0xed, 0xc2, 0x9a, 0x34, 0x47, 0x64, 0x96, 0x94, 0xdc, 0xa3, 0x9b, 0xc2,
	0x56, 0x9a, 0x07, 0x27, 0x50, 0xd4, 0x84, 0x8a, 0x4c, 0x32, 0x4b, 0x9f, 0x58, 0x56, 0xaf, 0x7a,
	0xba, 0x24, 0xd9, 0x22, 0x82, 0x74, 0x19, 0x71, 0xbc, 0xc0, 0x4d, 0xfc, 0x89, 0x41, 0x0a, 0x25,
	0x6b, 0xd4, 0x81, 0x0d, 0xc2, 0xed, 0x33, 0x4f, 0x50, 0x5b, 0xc4, 0x9c, 0xaa, 0x92, 0x7a, 0x75,
	0xb8, 0xca, 0x4e, 0x6f, 0x34, 0xe7, 0xc0, 0x78, 0x41, 0xb4, 0xde, 0x81, 0x8d, 0x79, 0xee, 0xe2,
	0x38, 0x55, 0x86, 0xb5, 0x66, 0xaf, 0xb5, 0xf7, 0xda, 0xc8, 0xa9, 0x25, 0xee, 0xed, 0xbd, 0x4e,
	0x46, 0xaa, 0x26, 0xee, 0x59, 0x1f, 0xf7, 0x8c, 0x42, 0xb6, 0x7e, 0x63, 0xac, 0xd6, 0xff, 0x95,
	0x07, 0xe8, 0x0c, 0xd2, 0x06, 0x86, 0x8e, 0xa0, 0xea, 0xb0, 0x3f, 0x05, 0x3e, 0x23, 0x8e, 0x35,
	0x61, 0x4e, 0x3a, 0x3e, 0x2d, 0x4f, 0x94, 0x33, 0x89, 0x46, 0x4b, 0xc3, 0x7b, 0xcc, 0xa1, 0x78,
	0xc3, 0x99, 0xdb, 0xa1, 0x36, 0x54, 0xe2, 0x70, 0xa6, 0x2a, 0xaf, 0x54, 0xfd, 0xe4, 0x66, 0x55,
	0xc7, 0x61, 0xa6, 0x08, 0xe2, 0x6c, 0x5d, 0xef, 0xc2, 0xc6, 0xfc, 0x21, 0x08, 0xc1, 0x66, 0x6b,
	0xf0, 0x7d, 0xbf, 0x3b, 0x68, 0xb6, 0xac, 0x76, 0xf3, 0x83, 0x9a, 0xb0, 0xee, 0xc1, 0x56, 0x46,
	0x1b, 0x8d, 0x71, 0xbb, 0xd9, 0x33, 0x72, 0x09, 0xd1, 0xea, 0x0f, 0xc6, 0x56, 0xca, 0x33, 0xf2,
	0xf5, 0x36, 0xc0, 0xec, 0x1c, 0xa9, 0xeb, 0x78, 0xa8, 0xa4, 0x06, 0x7d, 0xab, 0xfd, 0xdb, 0xce,
	0xd8, 0x58, 0x41, 0x06, 0x6c, 0x68, 0x5a, 0xa2, 0x3d, 0x87, 0x6a, 0x50, 0xd5, 0x8a, 0x12, 0x86,
	0x91, 0xaf, 0xff, 0x3d, 0x0f, 0xb5, 0x2b, 0xfe, 0x96, 0x89, 0x42, 0x03, 0xd9, 0x42, 0x1d, 0x3d,
	0xbc, 0xa4, 0x5b, 0xf4, 0x18, 0xc0, 0x0b, 0xc2, 0x58, 0x58, 0x21, 0x11, 0x67, 0x3a, 0x8f, 0xcb,
	0x8a, 0x32, 0x24, 0xe2, 0x0c, 0x7d, 0x09, 0x15, 0x16, 0x8b, 0x8c, 0x9f, 0x0c, 0x96, 0x90, 0x90,
	0x14, 0xa0, 0x03, 0xc5, 0x53, 0xc6, 0x27, 0x24, 0x19, 0x5e, 0x36, 0x77, 0x5f, 0xdd, 0x16, 0x7b,
	0x8d, 0x6e, 0xf2, 0x4b, 0xd3, 0x23, 0xe1, 0x7b, 0x25, 0x88, 0xb5, 0x02, 0xf4, 0x1d, 0x54, 0x3c,
	0x66, 0x45, 0xda, 0xea, 0xba, 0xe0, 0x3f, 0xbc, 0xd1, 0x2d, 0x18, 0x3c, 0x96, 0xae, 0xeb, 0xaf,
	0xc0, 0x58, 0xd6, 0x8b, 0xd6, 0x61, 0xf5, 0x37, 0xa3, 0x81, 0x0c, 0xbd, 0x75, 0x58, 0xfd, 0xd4,
	0xec, 0x75, 0x93, 0xc8, 0x1b, 0xe2, 0xc1, 0x78, 0x60, 0xe4, 0xeb, 0xff, 0xce, 0x41, 0x31, 0x29,
	0xe9, 0xe8, 0x57, 0x73, 0xbd, 0x2d, 0x77, 0x6d, 0x0a, 0x1d, 0xed, 0x47, 0x83, 0x93, 0x3f, 0x52,
	0x5b, 0x5c, 0xd3, 0xe0, 0x76, 0x61, 0x5d, 0xce, 0x0c, 0x51, 0x48, 0x6d, 0x3d, 0xfb, 0xdd, 0xd8,
	0xa5, 0x4a, 0x21, 0x73, 0x46, 0x21, 0xb5, 0x97, 0xf3, 0xb6, 0x70, 0xf7, 0xbc, 0xad, 0xff, 0x23,
	0x0f, 0xb5, 0x2b, 0xd7, 0x42, 0x2d, 0x28, 0xfa, 0xe4, 0x84, 0xfa, 0xe9, 0x5f, 0xdb, 0xcf, 0x6f,
	0x7b, 0x48, 0xa3, 0xab, 0xe0, 0xe9, 0x9f, 0x97, 0xda, 0xa0, 0x11, 0x54, 0x48, 0x10, 0x30, 0xa1,
	0xa6, 0xce, 0xf4, 0xf7, 0xed, 0xd5, 0xad, 0xaa, 0x9a, 0x33, 0x99, 0x44, 0xdf, 0xbc, 0x16, 0xd9,
	0x4e, 0xe6, 0xce, 0xba, 0x4b, 0x3b, 0xd9, 0x7e, 0x0b, 0xc6, 0xb2, 0xee, 0xbb, 0xc8, 0xd7, 0xff,
	0x96, 0x83, 0xc2, 0xe8, 0xc2, 0x47, 0x8f, 0xa0, 0x1c, 0x09, 0x22, 0xe8, 0x84, 0x06, 0x42, 0x4b,
	0xce, 0x08, 0xe8, 0x35, 0x94, 0x1c, 0x8f, 0xf8, 0xd4, 0x16, 0xba, 0x26, 0x6c, 0x5f, 0xed, 0xe9,
	0x8d, 0x56, 0x82, 0xc0, 0x29, 0xb4, 0xfe, 0x06, 0x4a, 0x9a, 0x26, 0xff, 0xa7, 0x8e, 0xfb, 0xad,
	0xf6, 0xfb, 0x4e, 0xbf, 0xdd, 0x4a, 0xc2, 0xae, 0xd9, 0x1f, 0x75, 0x8c, 0x9c, 0x5c, 0x1d, 0x76,
	0x3e, 0xb6, 0x8d, 0xfc, 0xec, 0xef, 0xab, 0x70, 0xb0, 0xf7, 0xbb, 0xd7, 0xae, 0x27, 0xce, 0xe2,
	0x93, 0x86, 0xcd, 0x26, 0x3b, 0xea, 0x24, 0xc6, 0xdd, 0x9d, 0xec, 0x17, 0xdf, 0xa5, 0xc1, 0x4e,
	0x78, 0xf2, 0xd2, 0x65, 0x3b, 0x0b, 0x7f, 0xfd, 0x27, 0x45, 0x15, 0x55, 0xdf, 0xfc, 0x3f, 0x00,
	0x00, 0xff, 0xff, 0x10, 0x90, 0xc9, 0x89, 0x94, 0x10, 0x00, 0x00,
}
