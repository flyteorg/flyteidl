# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyteadmin.models.core_binary import CoreBinary  # noqa: F401,E501
from flyteadmin.models.core_blob import CoreBlob  # noqa: F401,E501
from flyteadmin.models.core_error import CoreError  # noqa: F401,E501
from flyteadmin.models.core_primitive import CorePrimitive  # noqa: F401,E501
from flyteadmin.models.core_schema import CoreSchema  # noqa: F401,E501
from flyteadmin.models.core_structured_dataset import CoreStructuredDataset  # noqa: F401,E501
from flyteadmin.models.core_union import CoreUnion  # noqa: F401,E501
from flyteadmin.models.core_void import CoreVoid  # noqa: F401,E501
from flyteadmin.models.protobuf_struct import ProtobufStruct  # noqa: F401,E501


class CoreScalar(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'primitive': 'CorePrimitive',
        'blob': 'CoreBlob',
        'binary': 'CoreBinary',
        'schema': 'CoreSchema',
        'none_type': 'CoreVoid',
        'error': 'CoreError',
        'generic': 'ProtobufStruct',
        'structured_dataset': 'CoreStructuredDataset',
        'union': 'CoreUnion'
    }

    attribute_map = {
        'primitive': 'primitive',
        'blob': 'blob',
        'binary': 'binary',
        'schema': 'schema',
        'none_type': 'none_type',
        'error': 'error',
        'generic': 'generic',
        'structured_dataset': 'structured_dataset',
        'union': 'union'
    }

    def __init__(self, primitive=None, blob=None, binary=None, schema=None, none_type=None, error=None, generic=None, structured_dataset=None, union=None):  # noqa: E501
        """CoreScalar - a model defined in Swagger"""  # noqa: E501

        self._primitive = None
        self._blob = None
        self._binary = None
        self._schema = None
        self._none_type = None
        self._error = None
        self._generic = None
        self._structured_dataset = None
        self._union = None
        self.discriminator = None

        if primitive is not None:
            self.primitive = primitive
        if blob is not None:
            self.blob = blob
        if binary is not None:
            self.binary = binary
        if schema is not None:
            self.schema = schema
        if none_type is not None:
            self.none_type = none_type
        if error is not None:
            self.error = error
        if generic is not None:
            self.generic = generic
        if structured_dataset is not None:
            self.structured_dataset = structured_dataset
        if union is not None:
            self.union = union

    @property
    def primitive(self):
        """Gets the primitive of this CoreScalar.  # noqa: E501


        :return: The primitive of this CoreScalar.  # noqa: E501
        :rtype: CorePrimitive
        """
        return self._primitive

    @primitive.setter
    def primitive(self, primitive):
        """Sets the primitive of this CoreScalar.


        :param primitive: The primitive of this CoreScalar.  # noqa: E501
        :type: CorePrimitive
        """

        self._primitive = primitive

    @property
    def blob(self):
        """Gets the blob of this CoreScalar.  # noqa: E501


        :return: The blob of this CoreScalar.  # noqa: E501
        :rtype: CoreBlob
        """
        return self._blob

    @blob.setter
    def blob(self, blob):
        """Sets the blob of this CoreScalar.


        :param blob: The blob of this CoreScalar.  # noqa: E501
        :type: CoreBlob
        """

        self._blob = blob

    @property
    def binary(self):
        """Gets the binary of this CoreScalar.  # noqa: E501


        :return: The binary of this CoreScalar.  # noqa: E501
        :rtype: CoreBinary
        """
        return self._binary

    @binary.setter
    def binary(self, binary):
        """Sets the binary of this CoreScalar.


        :param binary: The binary of this CoreScalar.  # noqa: E501
        :type: CoreBinary
        """

        self._binary = binary

    @property
    def schema(self):
        """Gets the schema of this CoreScalar.  # noqa: E501


        :return: The schema of this CoreScalar.  # noqa: E501
        :rtype: CoreSchema
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this CoreScalar.


        :param schema: The schema of this CoreScalar.  # noqa: E501
        :type: CoreSchema
        """

        self._schema = schema

    @property
    def none_type(self):
        """Gets the none_type of this CoreScalar.  # noqa: E501


        :return: The none_type of this CoreScalar.  # noqa: E501
        :rtype: CoreVoid
        """
        return self._none_type

    @none_type.setter
    def none_type(self, none_type):
        """Sets the none_type of this CoreScalar.


        :param none_type: The none_type of this CoreScalar.  # noqa: E501
        :type: CoreVoid
        """

        self._none_type = none_type

    @property
    def error(self):
        """Gets the error of this CoreScalar.  # noqa: E501


        :return: The error of this CoreScalar.  # noqa: E501
        :rtype: CoreError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this CoreScalar.


        :param error: The error of this CoreScalar.  # noqa: E501
        :type: CoreError
        """

        self._error = error

    @property
    def generic(self):
        """Gets the generic of this CoreScalar.  # noqa: E501


        :return: The generic of this CoreScalar.  # noqa: E501
        :rtype: ProtobufStruct
        """
        return self._generic

    @generic.setter
    def generic(self, generic):
        """Sets the generic of this CoreScalar.


        :param generic: The generic of this CoreScalar.  # noqa: E501
        :type: ProtobufStruct
        """

        self._generic = generic

    @property
    def structured_dataset(self):
        """Gets the structured_dataset of this CoreScalar.  # noqa: E501


        :return: The structured_dataset of this CoreScalar.  # noqa: E501
        :rtype: CoreStructuredDataset
        """
        return self._structured_dataset

    @structured_dataset.setter
    def structured_dataset(self, structured_dataset):
        """Sets the structured_dataset of this CoreScalar.


        :param structured_dataset: The structured_dataset of this CoreScalar.  # noqa: E501
        :type: CoreStructuredDataset
        """

        self._structured_dataset = structured_dataset

    @property
    def union(self):
        """Gets the union of this CoreScalar.  # noqa: E501


        :return: The union of this CoreScalar.  # noqa: E501
        :rtype: CoreUnion
        """
        return self._union

    @union.setter
    def union(self, union):
        """Sets the union of this CoreScalar.


        :param union: The union of this CoreScalar.  # noqa: E501
        :type: CoreUnion
        """

        self._union = union

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoreScalar, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreScalar):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
