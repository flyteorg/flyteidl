// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/workflow.proto

package com.flyteidl.core;

/**
 * <pre>
 * A Workflow graph Node. One unit of execution in the graph. Each node can be linked to a Task, a Workflow or a branch
 * node.
 * </pre>
 *
 * Protobuf type {@code flyteidl.core.Node}
 */
public final class Node extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:flyteidl.core.Node)
    NodeOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Node.newBuilder() to construct.
  private Node(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Node() {
    id_ = "";
    inputs_ = java.util.Collections.emptyList();
    upstreamNodeIds_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    outputAliases_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Node();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Node(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            id_ = s;
            break;
          }
          case 18: {
            com.flyteidl.core.NodeMetadata.Builder subBuilder = null;
            if (metadata_ != null) {
              subBuilder = metadata_.toBuilder();
            }
            metadata_ = input.readMessage(com.flyteidl.core.NodeMetadata.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(metadata_);
              metadata_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              inputs_ = new java.util.ArrayList<com.flyteidl.core.Binding>();
              mutable_bitField0_ |= 0x00000001;
            }
            inputs_.add(
                input.readMessage(com.flyteidl.core.Binding.parser(), extensionRegistry));
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              upstreamNodeIds_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000002;
            }
            upstreamNodeIds_.add(s);
            break;
          }
          case 42: {
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              outputAliases_ = new java.util.ArrayList<com.flyteidl.core.Alias>();
              mutable_bitField0_ |= 0x00000004;
            }
            outputAliases_.add(
                input.readMessage(com.flyteidl.core.Alias.parser(), extensionRegistry));
            break;
          }
          case 50: {
            com.flyteidl.core.TaskNode.Builder subBuilder = null;
            if (targetCase_ == 6) {
              subBuilder = ((com.flyteidl.core.TaskNode) target_).toBuilder();
            }
            target_ =
                input.readMessage(com.flyteidl.core.TaskNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.flyteidl.core.TaskNode) target_);
              target_ = subBuilder.buildPartial();
            }
            targetCase_ = 6;
            break;
          }
          case 58: {
            com.flyteidl.core.WorkflowNode.Builder subBuilder = null;
            if (targetCase_ == 7) {
              subBuilder = ((com.flyteidl.core.WorkflowNode) target_).toBuilder();
            }
            target_ =
                input.readMessage(com.flyteidl.core.WorkflowNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.flyteidl.core.WorkflowNode) target_);
              target_ = subBuilder.buildPartial();
            }
            targetCase_ = 7;
            break;
          }
          case 66: {
            com.flyteidl.core.BranchNode.Builder subBuilder = null;
            if (targetCase_ == 8) {
              subBuilder = ((com.flyteidl.core.BranchNode) target_).toBuilder();
            }
            target_ =
                input.readMessage(com.flyteidl.core.BranchNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.flyteidl.core.BranchNode) target_);
              target_ = subBuilder.buildPartial();
            }
            targetCase_ = 8;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        inputs_ = java.util.Collections.unmodifiableList(inputs_);
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        upstreamNodeIds_ = upstreamNodeIds_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000004) != 0)) {
        outputAliases_ = java.util.Collections.unmodifiableList(outputAliases_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.flyteidl.core.WorkflowProto.internal_static_flyteidl_core_Node_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.flyteidl.core.WorkflowProto.internal_static_flyteidl_core_Node_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.flyteidl.core.Node.class, com.flyteidl.core.Node.Builder.class);
  }

  private int targetCase_ = 0;
  private java.lang.Object target_;
  public enum TargetCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    TASK_NODE(6),
    WORKFLOW_NODE(7),
    BRANCH_NODE(8),
    TARGET_NOT_SET(0);
    private final int value;
    private TargetCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TargetCase valueOf(int value) {
      return forNumber(value);
    }

    public static TargetCase forNumber(int value) {
      switch (value) {
        case 6: return TASK_NODE;
        case 7: return WORKFLOW_NODE;
        case 8: return BRANCH_NODE;
        case 0: return TARGET_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public TargetCase
  getTargetCase() {
    return TargetCase.forNumber(
        targetCase_);
  }

  public static final int ID_FIELD_NUMBER = 1;
  private volatile java.lang.Object id_;
  /**
   * <pre>
   * A workflow-level unique identifier that identifies this node in the workflow. "inputs" and "outputs" are reserved
   * node ids that cannot be used by other nodes.
   * </pre>
   *
   * <code>string id = 1 [json_name = "id"];</code>
   * @return The id.
   */
  @java.lang.Override
  public java.lang.String getId() {
    java.lang.Object ref = id_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      id_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * A workflow-level unique identifier that identifies this node in the workflow. "inputs" and "outputs" are reserved
   * node ids that cannot be used by other nodes.
   * </pre>
   *
   * <code>string id = 1 [json_name = "id"];</code>
   * @return The bytes for id.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getIdBytes() {
    java.lang.Object ref = id_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      id_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int METADATA_FIELD_NUMBER = 2;
  private com.flyteidl.core.NodeMetadata metadata_;
  /**
   * <pre>
   * Extra metadata about the node.
   * </pre>
   *
   * <code>.flyteidl.core.NodeMetadata metadata = 2 [json_name = "metadata"];</code>
   * @return Whether the metadata field is set.
   */
  @java.lang.Override
  public boolean hasMetadata() {
    return metadata_ != null;
  }
  /**
   * <pre>
   * Extra metadata about the node.
   * </pre>
   *
   * <code>.flyteidl.core.NodeMetadata metadata = 2 [json_name = "metadata"];</code>
   * @return The metadata.
   */
  @java.lang.Override
  public com.flyteidl.core.NodeMetadata getMetadata() {
    return metadata_ == null ? com.flyteidl.core.NodeMetadata.getDefaultInstance() : metadata_;
  }
  /**
   * <pre>
   * Extra metadata about the node.
   * </pre>
   *
   * <code>.flyteidl.core.NodeMetadata metadata = 2 [json_name = "metadata"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.NodeMetadataOrBuilder getMetadataOrBuilder() {
    return getMetadata();
  }

  public static final int INPUTS_FIELD_NUMBER = 3;
  private java.util.List<com.flyteidl.core.Binding> inputs_;
  /**
   * <pre>
   * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
   * must be fulfilled.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];</code>
   */
  @java.lang.Override
  public java.util.List<com.flyteidl.core.Binding> getInputsList() {
    return inputs_;
  }
  /**
   * <pre>
   * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
   * must be fulfilled.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.flyteidl.core.BindingOrBuilder> 
      getInputsOrBuilderList() {
    return inputs_;
  }
  /**
   * <pre>
   * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
   * must be fulfilled.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];</code>
   */
  @java.lang.Override
  public int getInputsCount() {
    return inputs_.size();
  }
  /**
   * <pre>
   * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
   * must be fulfilled.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.Binding getInputs(int index) {
    return inputs_.get(index);
  }
  /**
   * <pre>
   * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
   * must be fulfilled.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.BindingOrBuilder getInputsOrBuilder(
      int index) {
    return inputs_.get(index);
  }

  public static final int UPSTREAM_NODE_IDS_FIELD_NUMBER = 4;
  private com.google.protobuf.LazyStringList upstreamNodeIds_;
  /**
   * <pre>
   *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
   * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
   * field.
   * </pre>
   *
   * <code>repeated string upstream_node_ids = 4 [json_name = "upstreamNodeIds"];</code>
   * @return A list containing the upstreamNodeIds.
   */
  public com.google.protobuf.ProtocolStringList
      getUpstreamNodeIdsList() {
    return upstreamNodeIds_;
  }
  /**
   * <pre>
   *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
   * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
   * field.
   * </pre>
   *
   * <code>repeated string upstream_node_ids = 4 [json_name = "upstreamNodeIds"];</code>
   * @return The count of upstreamNodeIds.
   */
  public int getUpstreamNodeIdsCount() {
    return upstreamNodeIds_.size();
  }
  /**
   * <pre>
   *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
   * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
   * field.
   * </pre>
   *
   * <code>repeated string upstream_node_ids = 4 [json_name = "upstreamNodeIds"];</code>
   * @param index The index of the element to return.
   * @return The upstreamNodeIds at the given index.
   */
  public java.lang.String getUpstreamNodeIds(int index) {
    return upstreamNodeIds_.get(index);
  }
  /**
   * <pre>
   *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
   * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
   * field.
   * </pre>
   *
   * <code>repeated string upstream_node_ids = 4 [json_name = "upstreamNodeIds"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the upstreamNodeIds at the given index.
   */
  public com.google.protobuf.ByteString
      getUpstreamNodeIdsBytes(int index) {
    return upstreamNodeIds_.getByteString(index);
  }

  public static final int OUTPUT_ALIASES_FIELD_NUMBER = 5;
  private java.util.List<com.flyteidl.core.Alias> outputAliases_;
  /**
   * <pre>
   *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
   * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
   * nodes outputs using the alias if one's specified.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];</code>
   */
  @java.lang.Override
  public java.util.List<com.flyteidl.core.Alias> getOutputAliasesList() {
    return outputAliases_;
  }
  /**
   * <pre>
   *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
   * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
   * nodes outputs using the alias if one's specified.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.flyteidl.core.AliasOrBuilder> 
      getOutputAliasesOrBuilderList() {
    return outputAliases_;
  }
  /**
   * <pre>
   *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
   * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
   * nodes outputs using the alias if one's specified.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];</code>
   */
  @java.lang.Override
  public int getOutputAliasesCount() {
    return outputAliases_.size();
  }
  /**
   * <pre>
   *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
   * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
   * nodes outputs using the alias if one's specified.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.Alias getOutputAliases(int index) {
    return outputAliases_.get(index);
  }
  /**
   * <pre>
   *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
   * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
   * nodes outputs using the alias if one's specified.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.AliasOrBuilder getOutputAliasesOrBuilder(
      int index) {
    return outputAliases_.get(index);
  }

  public static final int TASK_NODE_FIELD_NUMBER = 6;
  /**
   * <pre>
   * Information about the Task to execute in this node.
   * </pre>
   *
   * <code>.flyteidl.core.TaskNode task_node = 6 [json_name = "taskNode"];</code>
   * @return Whether the taskNode field is set.
   */
  @java.lang.Override
  public boolean hasTaskNode() {
    return targetCase_ == 6;
  }
  /**
   * <pre>
   * Information about the Task to execute in this node.
   * </pre>
   *
   * <code>.flyteidl.core.TaskNode task_node = 6 [json_name = "taskNode"];</code>
   * @return The taskNode.
   */
  @java.lang.Override
  public com.flyteidl.core.TaskNode getTaskNode() {
    if (targetCase_ == 6) {
       return (com.flyteidl.core.TaskNode) target_;
    }
    return com.flyteidl.core.TaskNode.getDefaultInstance();
  }
  /**
   * <pre>
   * Information about the Task to execute in this node.
   * </pre>
   *
   * <code>.flyteidl.core.TaskNode task_node = 6 [json_name = "taskNode"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.TaskNodeOrBuilder getTaskNodeOrBuilder() {
    if (targetCase_ == 6) {
       return (com.flyteidl.core.TaskNode) target_;
    }
    return com.flyteidl.core.TaskNode.getDefaultInstance();
  }

  public static final int WORKFLOW_NODE_FIELD_NUMBER = 7;
  /**
   * <pre>
   * Information about the Workflow to execute in this mode.
   * </pre>
   *
   * <code>.flyteidl.core.WorkflowNode workflow_node = 7 [json_name = "workflowNode"];</code>
   * @return Whether the workflowNode field is set.
   */
  @java.lang.Override
  public boolean hasWorkflowNode() {
    return targetCase_ == 7;
  }
  /**
   * <pre>
   * Information about the Workflow to execute in this mode.
   * </pre>
   *
   * <code>.flyteidl.core.WorkflowNode workflow_node = 7 [json_name = "workflowNode"];</code>
   * @return The workflowNode.
   */
  @java.lang.Override
  public com.flyteidl.core.WorkflowNode getWorkflowNode() {
    if (targetCase_ == 7) {
       return (com.flyteidl.core.WorkflowNode) target_;
    }
    return com.flyteidl.core.WorkflowNode.getDefaultInstance();
  }
  /**
   * <pre>
   * Information about the Workflow to execute in this mode.
   * </pre>
   *
   * <code>.flyteidl.core.WorkflowNode workflow_node = 7 [json_name = "workflowNode"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.WorkflowNodeOrBuilder getWorkflowNodeOrBuilder() {
    if (targetCase_ == 7) {
       return (com.flyteidl.core.WorkflowNode) target_;
    }
    return com.flyteidl.core.WorkflowNode.getDefaultInstance();
  }

  public static final int BRANCH_NODE_FIELD_NUMBER = 8;
  /**
   * <pre>
   * Information about the branch node to evaluate in this node.
   * </pre>
   *
   * <code>.flyteidl.core.BranchNode branch_node = 8 [json_name = "branchNode"];</code>
   * @return Whether the branchNode field is set.
   */
  @java.lang.Override
  public boolean hasBranchNode() {
    return targetCase_ == 8;
  }
  /**
   * <pre>
   * Information about the branch node to evaluate in this node.
   * </pre>
   *
   * <code>.flyteidl.core.BranchNode branch_node = 8 [json_name = "branchNode"];</code>
   * @return The branchNode.
   */
  @java.lang.Override
  public com.flyteidl.core.BranchNode getBranchNode() {
    if (targetCase_ == 8) {
       return (com.flyteidl.core.BranchNode) target_;
    }
    return com.flyteidl.core.BranchNode.getDefaultInstance();
  }
  /**
   * <pre>
   * Information about the branch node to evaluate in this node.
   * </pre>
   *
   * <code>.flyteidl.core.BranchNode branch_node = 8 [json_name = "branchNode"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.BranchNodeOrBuilder getBranchNodeOrBuilder() {
    if (targetCase_ == 8) {
       return (com.flyteidl.core.BranchNode) target_;
    }
    return com.flyteidl.core.BranchNode.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(id_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, id_);
    }
    if (metadata_ != null) {
      output.writeMessage(2, getMetadata());
    }
    for (int i = 0; i < inputs_.size(); i++) {
      output.writeMessage(3, inputs_.get(i));
    }
    for (int i = 0; i < upstreamNodeIds_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, upstreamNodeIds_.getRaw(i));
    }
    for (int i = 0; i < outputAliases_.size(); i++) {
      output.writeMessage(5, outputAliases_.get(i));
    }
    if (targetCase_ == 6) {
      output.writeMessage(6, (com.flyteidl.core.TaskNode) target_);
    }
    if (targetCase_ == 7) {
      output.writeMessage(7, (com.flyteidl.core.WorkflowNode) target_);
    }
    if (targetCase_ == 8) {
      output.writeMessage(8, (com.flyteidl.core.BranchNode) target_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(id_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, id_);
    }
    if (metadata_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getMetadata());
    }
    for (int i = 0; i < inputs_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, inputs_.get(i));
    }
    {
      int dataSize = 0;
      for (int i = 0; i < upstreamNodeIds_.size(); i++) {
        dataSize += computeStringSizeNoTag(upstreamNodeIds_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getUpstreamNodeIdsList().size();
    }
    for (int i = 0; i < outputAliases_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, outputAliases_.get(i));
    }
    if (targetCase_ == 6) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, (com.flyteidl.core.TaskNode) target_);
    }
    if (targetCase_ == 7) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, (com.flyteidl.core.WorkflowNode) target_);
    }
    if (targetCase_ == 8) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, (com.flyteidl.core.BranchNode) target_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.flyteidl.core.Node)) {
      return super.equals(obj);
    }
    com.flyteidl.core.Node other = (com.flyteidl.core.Node) obj;

    if (!getId()
        .equals(other.getId())) return false;
    if (hasMetadata() != other.hasMetadata()) return false;
    if (hasMetadata()) {
      if (!getMetadata()
          .equals(other.getMetadata())) return false;
    }
    if (!getInputsList()
        .equals(other.getInputsList())) return false;
    if (!getUpstreamNodeIdsList()
        .equals(other.getUpstreamNodeIdsList())) return false;
    if (!getOutputAliasesList()
        .equals(other.getOutputAliasesList())) return false;
    if (!getTargetCase().equals(other.getTargetCase())) return false;
    switch (targetCase_) {
      case 6:
        if (!getTaskNode()
            .equals(other.getTaskNode())) return false;
        break;
      case 7:
        if (!getWorkflowNode()
            .equals(other.getWorkflowNode())) return false;
        break;
      case 8:
        if (!getBranchNode()
            .equals(other.getBranchNode())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + ID_FIELD_NUMBER;
    hash = (53 * hash) + getId().hashCode();
    if (hasMetadata()) {
      hash = (37 * hash) + METADATA_FIELD_NUMBER;
      hash = (53 * hash) + getMetadata().hashCode();
    }
    if (getInputsCount() > 0) {
      hash = (37 * hash) + INPUTS_FIELD_NUMBER;
      hash = (53 * hash) + getInputsList().hashCode();
    }
    if (getUpstreamNodeIdsCount() > 0) {
      hash = (37 * hash) + UPSTREAM_NODE_IDS_FIELD_NUMBER;
      hash = (53 * hash) + getUpstreamNodeIdsList().hashCode();
    }
    if (getOutputAliasesCount() > 0) {
      hash = (37 * hash) + OUTPUT_ALIASES_FIELD_NUMBER;
      hash = (53 * hash) + getOutputAliasesList().hashCode();
    }
    switch (targetCase_) {
      case 6:
        hash = (37 * hash) + TASK_NODE_FIELD_NUMBER;
        hash = (53 * hash) + getTaskNode().hashCode();
        break;
      case 7:
        hash = (37 * hash) + WORKFLOW_NODE_FIELD_NUMBER;
        hash = (53 * hash) + getWorkflowNode().hashCode();
        break;
      case 8:
        hash = (37 * hash) + BRANCH_NODE_FIELD_NUMBER;
        hash = (53 * hash) + getBranchNode().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.flyteidl.core.Node parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.core.Node parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.core.Node parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.core.Node parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.core.Node parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.core.Node parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.core.Node parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.flyteidl.core.Node parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.flyteidl.core.Node parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.flyteidl.core.Node parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.flyteidl.core.Node parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.flyteidl.core.Node parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.flyteidl.core.Node prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A Workflow graph Node. One unit of execution in the graph. Each node can be linked to a Task, a Workflow or a branch
   * node.
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.Node}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:flyteidl.core.Node)
      com.flyteidl.core.NodeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.flyteidl.core.WorkflowProto.internal_static_flyteidl_core_Node_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.flyteidl.core.WorkflowProto.internal_static_flyteidl_core_Node_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.flyteidl.core.Node.class, com.flyteidl.core.Node.Builder.class);
    }

    // Construct using com.flyteidl.core.Node.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getInputsFieldBuilder();
        getOutputAliasesFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      id_ = "";

      if (metadataBuilder_ == null) {
        metadata_ = null;
      } else {
        metadata_ = null;
        metadataBuilder_ = null;
      }
      if (inputsBuilder_ == null) {
        inputs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        inputsBuilder_.clear();
      }
      upstreamNodeIds_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      if (outputAliasesBuilder_ == null) {
        outputAliases_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
      } else {
        outputAliasesBuilder_.clear();
      }
      targetCase_ = 0;
      target_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.flyteidl.core.WorkflowProto.internal_static_flyteidl_core_Node_descriptor;
    }

    @java.lang.Override
    public com.flyteidl.core.Node getDefaultInstanceForType() {
      return com.flyteidl.core.Node.getDefaultInstance();
    }

    @java.lang.Override
    public com.flyteidl.core.Node build() {
      com.flyteidl.core.Node result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.flyteidl.core.Node buildPartial() {
      com.flyteidl.core.Node result = new com.flyteidl.core.Node(this);
      int from_bitField0_ = bitField0_;
      result.id_ = id_;
      if (metadataBuilder_ == null) {
        result.metadata_ = metadata_;
      } else {
        result.metadata_ = metadataBuilder_.build();
      }
      if (inputsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          inputs_ = java.util.Collections.unmodifiableList(inputs_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.inputs_ = inputs_;
      } else {
        result.inputs_ = inputsBuilder_.build();
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        upstreamNodeIds_ = upstreamNodeIds_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.upstreamNodeIds_ = upstreamNodeIds_;
      if (outputAliasesBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          outputAliases_ = java.util.Collections.unmodifiableList(outputAliases_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.outputAliases_ = outputAliases_;
      } else {
        result.outputAliases_ = outputAliasesBuilder_.build();
      }
      if (targetCase_ == 6) {
        if (taskNodeBuilder_ == null) {
          result.target_ = target_;
        } else {
          result.target_ = taskNodeBuilder_.build();
        }
      }
      if (targetCase_ == 7) {
        if (workflowNodeBuilder_ == null) {
          result.target_ = target_;
        } else {
          result.target_ = workflowNodeBuilder_.build();
        }
      }
      if (targetCase_ == 8) {
        if (branchNodeBuilder_ == null) {
          result.target_ = target_;
        } else {
          result.target_ = branchNodeBuilder_.build();
        }
      }
      result.targetCase_ = targetCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.flyteidl.core.Node) {
        return mergeFrom((com.flyteidl.core.Node)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.flyteidl.core.Node other) {
      if (other == com.flyteidl.core.Node.getDefaultInstance()) return this;
      if (!other.getId().isEmpty()) {
        id_ = other.id_;
        onChanged();
      }
      if (other.hasMetadata()) {
        mergeMetadata(other.getMetadata());
      }
      if (inputsBuilder_ == null) {
        if (!other.inputs_.isEmpty()) {
          if (inputs_.isEmpty()) {
            inputs_ = other.inputs_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureInputsIsMutable();
            inputs_.addAll(other.inputs_);
          }
          onChanged();
        }
      } else {
        if (!other.inputs_.isEmpty()) {
          if (inputsBuilder_.isEmpty()) {
            inputsBuilder_.dispose();
            inputsBuilder_ = null;
            inputs_ = other.inputs_;
            bitField0_ = (bitField0_ & ~0x00000001);
            inputsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getInputsFieldBuilder() : null;
          } else {
            inputsBuilder_.addAllMessages(other.inputs_);
          }
        }
      }
      if (!other.upstreamNodeIds_.isEmpty()) {
        if (upstreamNodeIds_.isEmpty()) {
          upstreamNodeIds_ = other.upstreamNodeIds_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureUpstreamNodeIdsIsMutable();
          upstreamNodeIds_.addAll(other.upstreamNodeIds_);
        }
        onChanged();
      }
      if (outputAliasesBuilder_ == null) {
        if (!other.outputAliases_.isEmpty()) {
          if (outputAliases_.isEmpty()) {
            outputAliases_ = other.outputAliases_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureOutputAliasesIsMutable();
            outputAliases_.addAll(other.outputAliases_);
          }
          onChanged();
        }
      } else {
        if (!other.outputAliases_.isEmpty()) {
          if (outputAliasesBuilder_.isEmpty()) {
            outputAliasesBuilder_.dispose();
            outputAliasesBuilder_ = null;
            outputAliases_ = other.outputAliases_;
            bitField0_ = (bitField0_ & ~0x00000004);
            outputAliasesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getOutputAliasesFieldBuilder() : null;
          } else {
            outputAliasesBuilder_.addAllMessages(other.outputAliases_);
          }
        }
      }
      switch (other.getTargetCase()) {
        case TASK_NODE: {
          mergeTaskNode(other.getTaskNode());
          break;
        }
        case WORKFLOW_NODE: {
          mergeWorkflowNode(other.getWorkflowNode());
          break;
        }
        case BRANCH_NODE: {
          mergeBranchNode(other.getBranchNode());
          break;
        }
        case TARGET_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.flyteidl.core.Node parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.flyteidl.core.Node) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int targetCase_ = 0;
    private java.lang.Object target_;
    public TargetCase
        getTargetCase() {
      return TargetCase.forNumber(
          targetCase_);
    }

    public Builder clearTarget() {
      targetCase_ = 0;
      target_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private java.lang.Object id_ = "";
    /**
     * <pre>
     * A workflow-level unique identifier that identifies this node in the workflow. "inputs" and "outputs" are reserved
     * node ids that cannot be used by other nodes.
     * </pre>
     *
     * <code>string id = 1 [json_name = "id"];</code>
     * @return The id.
     */
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        id_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * A workflow-level unique identifier that identifies this node in the workflow. "inputs" and "outputs" are reserved
     * node ids that cannot be used by other nodes.
     * </pre>
     *
     * <code>string id = 1 [json_name = "id"];</code>
     * @return The bytes for id.
     */
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * A workflow-level unique identifier that identifies this node in the workflow. "inputs" and "outputs" are reserved
     * node ids that cannot be used by other nodes.
     * </pre>
     *
     * <code>string id = 1 [json_name = "id"];</code>
     * @param value The id to set.
     * @return This builder for chaining.
     */
    public Builder setId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      id_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A workflow-level unique identifier that identifies this node in the workflow. "inputs" and "outputs" are reserved
     * node ids that cannot be used by other nodes.
     * </pre>
     *
     * <code>string id = 1 [json_name = "id"];</code>
     * @return This builder for chaining.
     */
    public Builder clearId() {
      
      id_ = getDefaultInstance().getId();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A workflow-level unique identifier that identifies this node in the workflow. "inputs" and "outputs" are reserved
     * node ids that cannot be used by other nodes.
     * </pre>
     *
     * <code>string id = 1 [json_name = "id"];</code>
     * @param value The bytes for id to set.
     * @return This builder for chaining.
     */
    public Builder setIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      id_ = value;
      onChanged();
      return this;
    }

    private com.flyteidl.core.NodeMetadata metadata_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.NodeMetadata, com.flyteidl.core.NodeMetadata.Builder, com.flyteidl.core.NodeMetadataOrBuilder> metadataBuilder_;
    /**
     * <pre>
     * Extra metadata about the node.
     * </pre>
     *
     * <code>.flyteidl.core.NodeMetadata metadata = 2 [json_name = "metadata"];</code>
     * @return Whether the metadata field is set.
     */
    public boolean hasMetadata() {
      return metadataBuilder_ != null || metadata_ != null;
    }
    /**
     * <pre>
     * Extra metadata about the node.
     * </pre>
     *
     * <code>.flyteidl.core.NodeMetadata metadata = 2 [json_name = "metadata"];</code>
     * @return The metadata.
     */
    public com.flyteidl.core.NodeMetadata getMetadata() {
      if (metadataBuilder_ == null) {
        return metadata_ == null ? com.flyteidl.core.NodeMetadata.getDefaultInstance() : metadata_;
      } else {
        return metadataBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Extra metadata about the node.
     * </pre>
     *
     * <code>.flyteidl.core.NodeMetadata metadata = 2 [json_name = "metadata"];</code>
     */
    public Builder setMetadata(com.flyteidl.core.NodeMetadata value) {
      if (metadataBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        metadata_ = value;
        onChanged();
      } else {
        metadataBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Extra metadata about the node.
     * </pre>
     *
     * <code>.flyteidl.core.NodeMetadata metadata = 2 [json_name = "metadata"];</code>
     */
    public Builder setMetadata(
        com.flyteidl.core.NodeMetadata.Builder builderForValue) {
      if (metadataBuilder_ == null) {
        metadata_ = builderForValue.build();
        onChanged();
      } else {
        metadataBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Extra metadata about the node.
     * </pre>
     *
     * <code>.flyteidl.core.NodeMetadata metadata = 2 [json_name = "metadata"];</code>
     */
    public Builder mergeMetadata(com.flyteidl.core.NodeMetadata value) {
      if (metadataBuilder_ == null) {
        if (metadata_ != null) {
          metadata_ =
            com.flyteidl.core.NodeMetadata.newBuilder(metadata_).mergeFrom(value).buildPartial();
        } else {
          metadata_ = value;
        }
        onChanged();
      } else {
        metadataBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Extra metadata about the node.
     * </pre>
     *
     * <code>.flyteidl.core.NodeMetadata metadata = 2 [json_name = "metadata"];</code>
     */
    public Builder clearMetadata() {
      if (metadataBuilder_ == null) {
        metadata_ = null;
        onChanged();
      } else {
        metadata_ = null;
        metadataBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Extra metadata about the node.
     * </pre>
     *
     * <code>.flyteidl.core.NodeMetadata metadata = 2 [json_name = "metadata"];</code>
     */
    public com.flyteidl.core.NodeMetadata.Builder getMetadataBuilder() {
      
      onChanged();
      return getMetadataFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Extra metadata about the node.
     * </pre>
     *
     * <code>.flyteidl.core.NodeMetadata metadata = 2 [json_name = "metadata"];</code>
     */
    public com.flyteidl.core.NodeMetadataOrBuilder getMetadataOrBuilder() {
      if (metadataBuilder_ != null) {
        return metadataBuilder_.getMessageOrBuilder();
      } else {
        return metadata_ == null ?
            com.flyteidl.core.NodeMetadata.getDefaultInstance() : metadata_;
      }
    }
    /**
     * <pre>
     * Extra metadata about the node.
     * </pre>
     *
     * <code>.flyteidl.core.NodeMetadata metadata = 2 [json_name = "metadata"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.NodeMetadata, com.flyteidl.core.NodeMetadata.Builder, com.flyteidl.core.NodeMetadataOrBuilder> 
        getMetadataFieldBuilder() {
      if (metadataBuilder_ == null) {
        metadataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.NodeMetadata, com.flyteidl.core.NodeMetadata.Builder, com.flyteidl.core.NodeMetadataOrBuilder>(
                getMetadata(),
                getParentForChildren(),
                isClean());
        metadata_ = null;
      }
      return metadataBuilder_;
    }

    private java.util.List<com.flyteidl.core.Binding> inputs_ =
      java.util.Collections.emptyList();
    private void ensureInputsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        inputs_ = new java.util.ArrayList<com.flyteidl.core.Binding>(inputs_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.flyteidl.core.Binding, com.flyteidl.core.Binding.Builder, com.flyteidl.core.BindingOrBuilder> inputsBuilder_;

    /**
     * <pre>
     * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
     * must be fulfilled.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];</code>
     */
    public java.util.List<com.flyteidl.core.Binding> getInputsList() {
      if (inputsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(inputs_);
      } else {
        return inputsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
     * must be fulfilled.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];</code>
     */
    public int getInputsCount() {
      if (inputsBuilder_ == null) {
        return inputs_.size();
      } else {
        return inputsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
     * must be fulfilled.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];</code>
     */
    public com.flyteidl.core.Binding getInputs(int index) {
      if (inputsBuilder_ == null) {
        return inputs_.get(index);
      } else {
        return inputsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
     * must be fulfilled.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];</code>
     */
    public Builder setInputs(
        int index, com.flyteidl.core.Binding value) {
      if (inputsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInputsIsMutable();
        inputs_.set(index, value);
        onChanged();
      } else {
        inputsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
     * must be fulfilled.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];</code>
     */
    public Builder setInputs(
        int index, com.flyteidl.core.Binding.Builder builderForValue) {
      if (inputsBuilder_ == null) {
        ensureInputsIsMutable();
        inputs_.set(index, builderForValue.build());
        onChanged();
      } else {
        inputsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
     * must be fulfilled.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];</code>
     */
    public Builder addInputs(com.flyteidl.core.Binding value) {
      if (inputsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInputsIsMutable();
        inputs_.add(value);
        onChanged();
      } else {
        inputsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
     * must be fulfilled.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];</code>
     */
    public Builder addInputs(
        int index, com.flyteidl.core.Binding value) {
      if (inputsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInputsIsMutable();
        inputs_.add(index, value);
        onChanged();
      } else {
        inputsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
     * must be fulfilled.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];</code>
     */
    public Builder addInputs(
        com.flyteidl.core.Binding.Builder builderForValue) {
      if (inputsBuilder_ == null) {
        ensureInputsIsMutable();
        inputs_.add(builderForValue.build());
        onChanged();
      } else {
        inputsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
     * must be fulfilled.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];</code>
     */
    public Builder addInputs(
        int index, com.flyteidl.core.Binding.Builder builderForValue) {
      if (inputsBuilder_ == null) {
        ensureInputsIsMutable();
        inputs_.add(index, builderForValue.build());
        onChanged();
      } else {
        inputsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
     * must be fulfilled.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];</code>
     */
    public Builder addAllInputs(
        java.lang.Iterable<? extends com.flyteidl.core.Binding> values) {
      if (inputsBuilder_ == null) {
        ensureInputsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, inputs_);
        onChanged();
      } else {
        inputsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
     * must be fulfilled.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];</code>
     */
    public Builder clearInputs() {
      if (inputsBuilder_ == null) {
        inputs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        inputsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
     * must be fulfilled.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];</code>
     */
    public Builder removeInputs(int index) {
      if (inputsBuilder_ == null) {
        ensureInputsIsMutable();
        inputs_.remove(index);
        onChanged();
      } else {
        inputsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
     * must be fulfilled.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];</code>
     */
    public com.flyteidl.core.Binding.Builder getInputsBuilder(
        int index) {
      return getInputsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
     * must be fulfilled.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];</code>
     */
    public com.flyteidl.core.BindingOrBuilder getInputsOrBuilder(
        int index) {
      if (inputsBuilder_ == null) {
        return inputs_.get(index);  } else {
        return inputsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
     * must be fulfilled.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];</code>
     */
    public java.util.List<? extends com.flyteidl.core.BindingOrBuilder> 
         getInputsOrBuilderList() {
      if (inputsBuilder_ != null) {
        return inputsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(inputs_);
      }
    }
    /**
     * <pre>
     * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
     * must be fulfilled.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];</code>
     */
    public com.flyteidl.core.Binding.Builder addInputsBuilder() {
      return getInputsFieldBuilder().addBuilder(
          com.flyteidl.core.Binding.getDefaultInstance());
    }
    /**
     * <pre>
     * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
     * must be fulfilled.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];</code>
     */
    public com.flyteidl.core.Binding.Builder addInputsBuilder(
        int index) {
      return getInputsFieldBuilder().addBuilder(
          index, com.flyteidl.core.Binding.getDefaultInstance());
    }
    /**
     * <pre>
     * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
     * must be fulfilled.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding inputs = 3 [json_name = "inputs"];</code>
     */
    public java.util.List<com.flyteidl.core.Binding.Builder> 
         getInputsBuilderList() {
      return getInputsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.flyteidl.core.Binding, com.flyteidl.core.Binding.Builder, com.flyteidl.core.BindingOrBuilder> 
        getInputsFieldBuilder() {
      if (inputsBuilder_ == null) {
        inputsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.flyteidl.core.Binding, com.flyteidl.core.Binding.Builder, com.flyteidl.core.BindingOrBuilder>(
                inputs_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        inputs_ = null;
      }
      return inputsBuilder_;
    }

    private com.google.protobuf.LazyStringList upstreamNodeIds_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureUpstreamNodeIdsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        upstreamNodeIds_ = new com.google.protobuf.LazyStringArrayList(upstreamNodeIds_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <pre>
     *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
     * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
     * field.
     * </pre>
     *
     * <code>repeated string upstream_node_ids = 4 [json_name = "upstreamNodeIds"];</code>
     * @return A list containing the upstreamNodeIds.
     */
    public com.google.protobuf.ProtocolStringList
        getUpstreamNodeIdsList() {
      return upstreamNodeIds_.getUnmodifiableView();
    }
    /**
     * <pre>
     *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
     * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
     * field.
     * </pre>
     *
     * <code>repeated string upstream_node_ids = 4 [json_name = "upstreamNodeIds"];</code>
     * @return The count of upstreamNodeIds.
     */
    public int getUpstreamNodeIdsCount() {
      return upstreamNodeIds_.size();
    }
    /**
     * <pre>
     *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
     * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
     * field.
     * </pre>
     *
     * <code>repeated string upstream_node_ids = 4 [json_name = "upstreamNodeIds"];</code>
     * @param index The index of the element to return.
     * @return The upstreamNodeIds at the given index.
     */
    public java.lang.String getUpstreamNodeIds(int index) {
      return upstreamNodeIds_.get(index);
    }
    /**
     * <pre>
     *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
     * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
     * field.
     * </pre>
     *
     * <code>repeated string upstream_node_ids = 4 [json_name = "upstreamNodeIds"];</code>
     * @param index The index of the value to return.
     * @return The bytes of the upstreamNodeIds at the given index.
     */
    public com.google.protobuf.ByteString
        getUpstreamNodeIdsBytes(int index) {
      return upstreamNodeIds_.getByteString(index);
    }
    /**
     * <pre>
     *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
     * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
     * field.
     * </pre>
     *
     * <code>repeated string upstream_node_ids = 4 [json_name = "upstreamNodeIds"];</code>
     * @param index The index to set the value at.
     * @param value The upstreamNodeIds to set.
     * @return This builder for chaining.
     */
    public Builder setUpstreamNodeIds(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureUpstreamNodeIdsIsMutable();
      upstreamNodeIds_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
     * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
     * field.
     * </pre>
     *
     * <code>repeated string upstream_node_ids = 4 [json_name = "upstreamNodeIds"];</code>
     * @param value The upstreamNodeIds to add.
     * @return This builder for chaining.
     */
    public Builder addUpstreamNodeIds(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureUpstreamNodeIdsIsMutable();
      upstreamNodeIds_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
     * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
     * field.
     * </pre>
     *
     * <code>repeated string upstream_node_ids = 4 [json_name = "upstreamNodeIds"];</code>
     * @param values The upstreamNodeIds to add.
     * @return This builder for chaining.
     */
    public Builder addAllUpstreamNodeIds(
        java.lang.Iterable<java.lang.String> values) {
      ensureUpstreamNodeIdsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, upstreamNodeIds_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
     * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
     * field.
     * </pre>
     *
     * <code>repeated string upstream_node_ids = 4 [json_name = "upstreamNodeIds"];</code>
     * @return This builder for chaining.
     */
    public Builder clearUpstreamNodeIds() {
      upstreamNodeIds_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
     * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
     * field.
     * </pre>
     *
     * <code>repeated string upstream_node_ids = 4 [json_name = "upstreamNodeIds"];</code>
     * @param value The bytes of the upstreamNodeIds to add.
     * @return This builder for chaining.
     */
    public Builder addUpstreamNodeIdsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureUpstreamNodeIdsIsMutable();
      upstreamNodeIds_.add(value);
      onChanged();
      return this;
    }

    private java.util.List<com.flyteidl.core.Alias> outputAliases_ =
      java.util.Collections.emptyList();
    private void ensureOutputAliasesIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        outputAliases_ = new java.util.ArrayList<com.flyteidl.core.Alias>(outputAliases_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.flyteidl.core.Alias, com.flyteidl.core.Alias.Builder, com.flyteidl.core.AliasOrBuilder> outputAliasesBuilder_;

    /**
     * <pre>
     *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
     * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
     * nodes outputs using the alias if one's specified.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];</code>
     */
    public java.util.List<com.flyteidl.core.Alias> getOutputAliasesList() {
      if (outputAliasesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(outputAliases_);
      } else {
        return outputAliasesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
     * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
     * nodes outputs using the alias if one's specified.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];</code>
     */
    public int getOutputAliasesCount() {
      if (outputAliasesBuilder_ == null) {
        return outputAliases_.size();
      } else {
        return outputAliasesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
     * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
     * nodes outputs using the alias if one's specified.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];</code>
     */
    public com.flyteidl.core.Alias getOutputAliases(int index) {
      if (outputAliasesBuilder_ == null) {
        return outputAliases_.get(index);
      } else {
        return outputAliasesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
     * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
     * nodes outputs using the alias if one's specified.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];</code>
     */
    public Builder setOutputAliases(
        int index, com.flyteidl.core.Alias value) {
      if (outputAliasesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureOutputAliasesIsMutable();
        outputAliases_.set(index, value);
        onChanged();
      } else {
        outputAliasesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
     * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
     * nodes outputs using the alias if one's specified.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];</code>
     */
    public Builder setOutputAliases(
        int index, com.flyteidl.core.Alias.Builder builderForValue) {
      if (outputAliasesBuilder_ == null) {
        ensureOutputAliasesIsMutable();
        outputAliases_.set(index, builderForValue.build());
        onChanged();
      } else {
        outputAliasesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
     * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
     * nodes outputs using the alias if one's specified.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];</code>
     */
    public Builder addOutputAliases(com.flyteidl.core.Alias value) {
      if (outputAliasesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureOutputAliasesIsMutable();
        outputAliases_.add(value);
        onChanged();
      } else {
        outputAliasesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
     * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
     * nodes outputs using the alias if one's specified.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];</code>
     */
    public Builder addOutputAliases(
        int index, com.flyteidl.core.Alias value) {
      if (outputAliasesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureOutputAliasesIsMutable();
        outputAliases_.add(index, value);
        onChanged();
      } else {
        outputAliasesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
     * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
     * nodes outputs using the alias if one's specified.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];</code>
     */
    public Builder addOutputAliases(
        com.flyteidl.core.Alias.Builder builderForValue) {
      if (outputAliasesBuilder_ == null) {
        ensureOutputAliasesIsMutable();
        outputAliases_.add(builderForValue.build());
        onChanged();
      } else {
        outputAliasesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
     * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
     * nodes outputs using the alias if one's specified.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];</code>
     */
    public Builder addOutputAliases(
        int index, com.flyteidl.core.Alias.Builder builderForValue) {
      if (outputAliasesBuilder_ == null) {
        ensureOutputAliasesIsMutable();
        outputAliases_.add(index, builderForValue.build());
        onChanged();
      } else {
        outputAliasesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
     * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
     * nodes outputs using the alias if one's specified.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];</code>
     */
    public Builder addAllOutputAliases(
        java.lang.Iterable<? extends com.flyteidl.core.Alias> values) {
      if (outputAliasesBuilder_ == null) {
        ensureOutputAliasesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, outputAliases_);
        onChanged();
      } else {
        outputAliasesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
     * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
     * nodes outputs using the alias if one's specified.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];</code>
     */
    public Builder clearOutputAliases() {
      if (outputAliasesBuilder_ == null) {
        outputAliases_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        outputAliasesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
     * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
     * nodes outputs using the alias if one's specified.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];</code>
     */
    public Builder removeOutputAliases(int index) {
      if (outputAliasesBuilder_ == null) {
        ensureOutputAliasesIsMutable();
        outputAliases_.remove(index);
        onChanged();
      } else {
        outputAliasesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
     * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
     * nodes outputs using the alias if one's specified.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];</code>
     */
    public com.flyteidl.core.Alias.Builder getOutputAliasesBuilder(
        int index) {
      return getOutputAliasesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
     * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
     * nodes outputs using the alias if one's specified.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];</code>
     */
    public com.flyteidl.core.AliasOrBuilder getOutputAliasesOrBuilder(
        int index) {
      if (outputAliasesBuilder_ == null) {
        return outputAliases_.get(index);  } else {
        return outputAliasesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
     * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
     * nodes outputs using the alias if one's specified.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];</code>
     */
    public java.util.List<? extends com.flyteidl.core.AliasOrBuilder> 
         getOutputAliasesOrBuilderList() {
      if (outputAliasesBuilder_ != null) {
        return outputAliasesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(outputAliases_);
      }
    }
    /**
     * <pre>
     *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
     * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
     * nodes outputs using the alias if one's specified.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];</code>
     */
    public com.flyteidl.core.Alias.Builder addOutputAliasesBuilder() {
      return getOutputAliasesFieldBuilder().addBuilder(
          com.flyteidl.core.Alias.getDefaultInstance());
    }
    /**
     * <pre>
     *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
     * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
     * nodes outputs using the alias if one's specified.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];</code>
     */
    public com.flyteidl.core.Alias.Builder addOutputAliasesBuilder(
        int index) {
      return getOutputAliasesFieldBuilder().addBuilder(
          index, com.flyteidl.core.Alias.getDefaultInstance());
    }
    /**
     * <pre>
     *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
     * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
     * nodes outputs using the alias if one's specified.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Alias output_aliases = 5 [json_name = "outputAliases"];</code>
     */
    public java.util.List<com.flyteidl.core.Alias.Builder> 
         getOutputAliasesBuilderList() {
      return getOutputAliasesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.flyteidl.core.Alias, com.flyteidl.core.Alias.Builder, com.flyteidl.core.AliasOrBuilder> 
        getOutputAliasesFieldBuilder() {
      if (outputAliasesBuilder_ == null) {
        outputAliasesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.flyteidl.core.Alias, com.flyteidl.core.Alias.Builder, com.flyteidl.core.AliasOrBuilder>(
                outputAliases_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        outputAliases_ = null;
      }
      return outputAliasesBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.TaskNode, com.flyteidl.core.TaskNode.Builder, com.flyteidl.core.TaskNodeOrBuilder> taskNodeBuilder_;
    /**
     * <pre>
     * Information about the Task to execute in this node.
     * </pre>
     *
     * <code>.flyteidl.core.TaskNode task_node = 6 [json_name = "taskNode"];</code>
     * @return Whether the taskNode field is set.
     */
    @java.lang.Override
    public boolean hasTaskNode() {
      return targetCase_ == 6;
    }
    /**
     * <pre>
     * Information about the Task to execute in this node.
     * </pre>
     *
     * <code>.flyteidl.core.TaskNode task_node = 6 [json_name = "taskNode"];</code>
     * @return The taskNode.
     */
    @java.lang.Override
    public com.flyteidl.core.TaskNode getTaskNode() {
      if (taskNodeBuilder_ == null) {
        if (targetCase_ == 6) {
          return (com.flyteidl.core.TaskNode) target_;
        }
        return com.flyteidl.core.TaskNode.getDefaultInstance();
      } else {
        if (targetCase_ == 6) {
          return taskNodeBuilder_.getMessage();
        }
        return com.flyteidl.core.TaskNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Information about the Task to execute in this node.
     * </pre>
     *
     * <code>.flyteidl.core.TaskNode task_node = 6 [json_name = "taskNode"];</code>
     */
    public Builder setTaskNode(com.flyteidl.core.TaskNode value) {
      if (taskNodeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        target_ = value;
        onChanged();
      } else {
        taskNodeBuilder_.setMessage(value);
      }
      targetCase_ = 6;
      return this;
    }
    /**
     * <pre>
     * Information about the Task to execute in this node.
     * </pre>
     *
     * <code>.flyteidl.core.TaskNode task_node = 6 [json_name = "taskNode"];</code>
     */
    public Builder setTaskNode(
        com.flyteidl.core.TaskNode.Builder builderForValue) {
      if (taskNodeBuilder_ == null) {
        target_ = builderForValue.build();
        onChanged();
      } else {
        taskNodeBuilder_.setMessage(builderForValue.build());
      }
      targetCase_ = 6;
      return this;
    }
    /**
     * <pre>
     * Information about the Task to execute in this node.
     * </pre>
     *
     * <code>.flyteidl.core.TaskNode task_node = 6 [json_name = "taskNode"];</code>
     */
    public Builder mergeTaskNode(com.flyteidl.core.TaskNode value) {
      if (taskNodeBuilder_ == null) {
        if (targetCase_ == 6 &&
            target_ != com.flyteidl.core.TaskNode.getDefaultInstance()) {
          target_ = com.flyteidl.core.TaskNode.newBuilder((com.flyteidl.core.TaskNode) target_)
              .mergeFrom(value).buildPartial();
        } else {
          target_ = value;
        }
        onChanged();
      } else {
        if (targetCase_ == 6) {
          taskNodeBuilder_.mergeFrom(value);
        }
        taskNodeBuilder_.setMessage(value);
      }
      targetCase_ = 6;
      return this;
    }
    /**
     * <pre>
     * Information about the Task to execute in this node.
     * </pre>
     *
     * <code>.flyteidl.core.TaskNode task_node = 6 [json_name = "taskNode"];</code>
     */
    public Builder clearTaskNode() {
      if (taskNodeBuilder_ == null) {
        if (targetCase_ == 6) {
          targetCase_ = 0;
          target_ = null;
          onChanged();
        }
      } else {
        if (targetCase_ == 6) {
          targetCase_ = 0;
          target_ = null;
        }
        taskNodeBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Information about the Task to execute in this node.
     * </pre>
     *
     * <code>.flyteidl.core.TaskNode task_node = 6 [json_name = "taskNode"];</code>
     */
    public com.flyteidl.core.TaskNode.Builder getTaskNodeBuilder() {
      return getTaskNodeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Information about the Task to execute in this node.
     * </pre>
     *
     * <code>.flyteidl.core.TaskNode task_node = 6 [json_name = "taskNode"];</code>
     */
    @java.lang.Override
    public com.flyteidl.core.TaskNodeOrBuilder getTaskNodeOrBuilder() {
      if ((targetCase_ == 6) && (taskNodeBuilder_ != null)) {
        return taskNodeBuilder_.getMessageOrBuilder();
      } else {
        if (targetCase_ == 6) {
          return (com.flyteidl.core.TaskNode) target_;
        }
        return com.flyteidl.core.TaskNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Information about the Task to execute in this node.
     * </pre>
     *
     * <code>.flyteidl.core.TaskNode task_node = 6 [json_name = "taskNode"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.TaskNode, com.flyteidl.core.TaskNode.Builder, com.flyteidl.core.TaskNodeOrBuilder> 
        getTaskNodeFieldBuilder() {
      if (taskNodeBuilder_ == null) {
        if (!(targetCase_ == 6)) {
          target_ = com.flyteidl.core.TaskNode.getDefaultInstance();
        }
        taskNodeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.TaskNode, com.flyteidl.core.TaskNode.Builder, com.flyteidl.core.TaskNodeOrBuilder>(
                (com.flyteidl.core.TaskNode) target_,
                getParentForChildren(),
                isClean());
        target_ = null;
      }
      targetCase_ = 6;
      onChanged();;
      return taskNodeBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.WorkflowNode, com.flyteidl.core.WorkflowNode.Builder, com.flyteidl.core.WorkflowNodeOrBuilder> workflowNodeBuilder_;
    /**
     * <pre>
     * Information about the Workflow to execute in this mode.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowNode workflow_node = 7 [json_name = "workflowNode"];</code>
     * @return Whether the workflowNode field is set.
     */
    @java.lang.Override
    public boolean hasWorkflowNode() {
      return targetCase_ == 7;
    }
    /**
     * <pre>
     * Information about the Workflow to execute in this mode.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowNode workflow_node = 7 [json_name = "workflowNode"];</code>
     * @return The workflowNode.
     */
    @java.lang.Override
    public com.flyteidl.core.WorkflowNode getWorkflowNode() {
      if (workflowNodeBuilder_ == null) {
        if (targetCase_ == 7) {
          return (com.flyteidl.core.WorkflowNode) target_;
        }
        return com.flyteidl.core.WorkflowNode.getDefaultInstance();
      } else {
        if (targetCase_ == 7) {
          return workflowNodeBuilder_.getMessage();
        }
        return com.flyteidl.core.WorkflowNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Information about the Workflow to execute in this mode.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowNode workflow_node = 7 [json_name = "workflowNode"];</code>
     */
    public Builder setWorkflowNode(com.flyteidl.core.WorkflowNode value) {
      if (workflowNodeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        target_ = value;
        onChanged();
      } else {
        workflowNodeBuilder_.setMessage(value);
      }
      targetCase_ = 7;
      return this;
    }
    /**
     * <pre>
     * Information about the Workflow to execute in this mode.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowNode workflow_node = 7 [json_name = "workflowNode"];</code>
     */
    public Builder setWorkflowNode(
        com.flyteidl.core.WorkflowNode.Builder builderForValue) {
      if (workflowNodeBuilder_ == null) {
        target_ = builderForValue.build();
        onChanged();
      } else {
        workflowNodeBuilder_.setMessage(builderForValue.build());
      }
      targetCase_ = 7;
      return this;
    }
    /**
     * <pre>
     * Information about the Workflow to execute in this mode.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowNode workflow_node = 7 [json_name = "workflowNode"];</code>
     */
    public Builder mergeWorkflowNode(com.flyteidl.core.WorkflowNode value) {
      if (workflowNodeBuilder_ == null) {
        if (targetCase_ == 7 &&
            target_ != com.flyteidl.core.WorkflowNode.getDefaultInstance()) {
          target_ = com.flyteidl.core.WorkflowNode.newBuilder((com.flyteidl.core.WorkflowNode) target_)
              .mergeFrom(value).buildPartial();
        } else {
          target_ = value;
        }
        onChanged();
      } else {
        if (targetCase_ == 7) {
          workflowNodeBuilder_.mergeFrom(value);
        }
        workflowNodeBuilder_.setMessage(value);
      }
      targetCase_ = 7;
      return this;
    }
    /**
     * <pre>
     * Information about the Workflow to execute in this mode.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowNode workflow_node = 7 [json_name = "workflowNode"];</code>
     */
    public Builder clearWorkflowNode() {
      if (workflowNodeBuilder_ == null) {
        if (targetCase_ == 7) {
          targetCase_ = 0;
          target_ = null;
          onChanged();
        }
      } else {
        if (targetCase_ == 7) {
          targetCase_ = 0;
          target_ = null;
        }
        workflowNodeBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Information about the Workflow to execute in this mode.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowNode workflow_node = 7 [json_name = "workflowNode"];</code>
     */
    public com.flyteidl.core.WorkflowNode.Builder getWorkflowNodeBuilder() {
      return getWorkflowNodeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Information about the Workflow to execute in this mode.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowNode workflow_node = 7 [json_name = "workflowNode"];</code>
     */
    @java.lang.Override
    public com.flyteidl.core.WorkflowNodeOrBuilder getWorkflowNodeOrBuilder() {
      if ((targetCase_ == 7) && (workflowNodeBuilder_ != null)) {
        return workflowNodeBuilder_.getMessageOrBuilder();
      } else {
        if (targetCase_ == 7) {
          return (com.flyteidl.core.WorkflowNode) target_;
        }
        return com.flyteidl.core.WorkflowNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Information about the Workflow to execute in this mode.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowNode workflow_node = 7 [json_name = "workflowNode"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.WorkflowNode, com.flyteidl.core.WorkflowNode.Builder, com.flyteidl.core.WorkflowNodeOrBuilder> 
        getWorkflowNodeFieldBuilder() {
      if (workflowNodeBuilder_ == null) {
        if (!(targetCase_ == 7)) {
          target_ = com.flyteidl.core.WorkflowNode.getDefaultInstance();
        }
        workflowNodeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.WorkflowNode, com.flyteidl.core.WorkflowNode.Builder, com.flyteidl.core.WorkflowNodeOrBuilder>(
                (com.flyteidl.core.WorkflowNode) target_,
                getParentForChildren(),
                isClean());
        target_ = null;
      }
      targetCase_ = 7;
      onChanged();;
      return workflowNodeBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.BranchNode, com.flyteidl.core.BranchNode.Builder, com.flyteidl.core.BranchNodeOrBuilder> branchNodeBuilder_;
    /**
     * <pre>
     * Information about the branch node to evaluate in this node.
     * </pre>
     *
     * <code>.flyteidl.core.BranchNode branch_node = 8 [json_name = "branchNode"];</code>
     * @return Whether the branchNode field is set.
     */
    @java.lang.Override
    public boolean hasBranchNode() {
      return targetCase_ == 8;
    }
    /**
     * <pre>
     * Information about the branch node to evaluate in this node.
     * </pre>
     *
     * <code>.flyteidl.core.BranchNode branch_node = 8 [json_name = "branchNode"];</code>
     * @return The branchNode.
     */
    @java.lang.Override
    public com.flyteidl.core.BranchNode getBranchNode() {
      if (branchNodeBuilder_ == null) {
        if (targetCase_ == 8) {
          return (com.flyteidl.core.BranchNode) target_;
        }
        return com.flyteidl.core.BranchNode.getDefaultInstance();
      } else {
        if (targetCase_ == 8) {
          return branchNodeBuilder_.getMessage();
        }
        return com.flyteidl.core.BranchNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Information about the branch node to evaluate in this node.
     * </pre>
     *
     * <code>.flyteidl.core.BranchNode branch_node = 8 [json_name = "branchNode"];</code>
     */
    public Builder setBranchNode(com.flyteidl.core.BranchNode value) {
      if (branchNodeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        target_ = value;
        onChanged();
      } else {
        branchNodeBuilder_.setMessage(value);
      }
      targetCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * Information about the branch node to evaluate in this node.
     * </pre>
     *
     * <code>.flyteidl.core.BranchNode branch_node = 8 [json_name = "branchNode"];</code>
     */
    public Builder setBranchNode(
        com.flyteidl.core.BranchNode.Builder builderForValue) {
      if (branchNodeBuilder_ == null) {
        target_ = builderForValue.build();
        onChanged();
      } else {
        branchNodeBuilder_.setMessage(builderForValue.build());
      }
      targetCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * Information about the branch node to evaluate in this node.
     * </pre>
     *
     * <code>.flyteidl.core.BranchNode branch_node = 8 [json_name = "branchNode"];</code>
     */
    public Builder mergeBranchNode(com.flyteidl.core.BranchNode value) {
      if (branchNodeBuilder_ == null) {
        if (targetCase_ == 8 &&
            target_ != com.flyteidl.core.BranchNode.getDefaultInstance()) {
          target_ = com.flyteidl.core.BranchNode.newBuilder((com.flyteidl.core.BranchNode) target_)
              .mergeFrom(value).buildPartial();
        } else {
          target_ = value;
        }
        onChanged();
      } else {
        if (targetCase_ == 8) {
          branchNodeBuilder_.mergeFrom(value);
        }
        branchNodeBuilder_.setMessage(value);
      }
      targetCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * Information about the branch node to evaluate in this node.
     * </pre>
     *
     * <code>.flyteidl.core.BranchNode branch_node = 8 [json_name = "branchNode"];</code>
     */
    public Builder clearBranchNode() {
      if (branchNodeBuilder_ == null) {
        if (targetCase_ == 8) {
          targetCase_ = 0;
          target_ = null;
          onChanged();
        }
      } else {
        if (targetCase_ == 8) {
          targetCase_ = 0;
          target_ = null;
        }
        branchNodeBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Information about the branch node to evaluate in this node.
     * </pre>
     *
     * <code>.flyteidl.core.BranchNode branch_node = 8 [json_name = "branchNode"];</code>
     */
    public com.flyteidl.core.BranchNode.Builder getBranchNodeBuilder() {
      return getBranchNodeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Information about the branch node to evaluate in this node.
     * </pre>
     *
     * <code>.flyteidl.core.BranchNode branch_node = 8 [json_name = "branchNode"];</code>
     */
    @java.lang.Override
    public com.flyteidl.core.BranchNodeOrBuilder getBranchNodeOrBuilder() {
      if ((targetCase_ == 8) && (branchNodeBuilder_ != null)) {
        return branchNodeBuilder_.getMessageOrBuilder();
      } else {
        if (targetCase_ == 8) {
          return (com.flyteidl.core.BranchNode) target_;
        }
        return com.flyteidl.core.BranchNode.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Information about the branch node to evaluate in this node.
     * </pre>
     *
     * <code>.flyteidl.core.BranchNode branch_node = 8 [json_name = "branchNode"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.BranchNode, com.flyteidl.core.BranchNode.Builder, com.flyteidl.core.BranchNodeOrBuilder> 
        getBranchNodeFieldBuilder() {
      if (branchNodeBuilder_ == null) {
        if (!(targetCase_ == 8)) {
          target_ = com.flyteidl.core.BranchNode.getDefaultInstance();
        }
        branchNodeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.BranchNode, com.flyteidl.core.BranchNode.Builder, com.flyteidl.core.BranchNodeOrBuilder>(
                (com.flyteidl.core.BranchNode) target_,
                getParentForChildren(),
                isClean());
        target_ = null;
      }
      targetCase_ = 8;
      onChanged();;
      return branchNodeBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:flyteidl.core.Node)
  }

  // @@protoc_insertion_point(class_scope:flyteidl.core.Node)
  private static final com.flyteidl.core.Node DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.flyteidl.core.Node();
  }

  public static com.flyteidl.core.Node getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Node>
      PARSER = new com.google.protobuf.AbstractParser<Node>() {
    @java.lang.Override
    public Node parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Node(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Node> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Node> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.flyteidl.core.Node getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

