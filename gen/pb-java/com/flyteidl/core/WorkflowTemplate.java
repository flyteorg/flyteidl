// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/workflow.proto

package com.flyteidl.core;

/**
 * <pre>
 * Flyte Workflow Structure that encapsulates task, branch and subworkflow nodes to form a statically analyzable,
 * directed acyclic graph.
 * </pre>
 *
 * Protobuf type {@code flyteidl.core.WorkflowTemplate}
 */
public final class WorkflowTemplate extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:flyteidl.core.WorkflowTemplate)
    WorkflowTemplateOrBuilder {
private static final long serialVersionUID = 0L;
  // Use WorkflowTemplate.newBuilder() to construct.
  private WorkflowTemplate(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private WorkflowTemplate() {
    nodes_ = java.util.Collections.emptyList();
    outputs_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new WorkflowTemplate();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private WorkflowTemplate(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.flyteidl.core.Identifier.Builder subBuilder = null;
            if (id_ != null) {
              subBuilder = id_.toBuilder();
            }
            id_ = input.readMessage(com.flyteidl.core.Identifier.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(id_);
              id_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            com.flyteidl.core.WorkflowMetadata.Builder subBuilder = null;
            if (metadata_ != null) {
              subBuilder = metadata_.toBuilder();
            }
            metadata_ = input.readMessage(com.flyteidl.core.WorkflowMetadata.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(metadata_);
              metadata_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            com.flyteidl.core.TypedInterface.Builder subBuilder = null;
            if (interface_ != null) {
              subBuilder = interface_.toBuilder();
            }
            interface_ = input.readMessage(com.flyteidl.core.TypedInterface.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(interface_);
              interface_ = subBuilder.buildPartial();
            }

            break;
          }
          case 34: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              nodes_ = new java.util.ArrayList<com.flyteidl.core.Node>();
              mutable_bitField0_ |= 0x00000001;
            }
            nodes_.add(
                input.readMessage(com.flyteidl.core.Node.parser(), extensionRegistry));
            break;
          }
          case 42: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              outputs_ = new java.util.ArrayList<com.flyteidl.core.Binding>();
              mutable_bitField0_ |= 0x00000002;
            }
            outputs_.add(
                input.readMessage(com.flyteidl.core.Binding.parser(), extensionRegistry));
            break;
          }
          case 50: {
            com.flyteidl.core.Node.Builder subBuilder = null;
            if (failureNode_ != null) {
              subBuilder = failureNode_.toBuilder();
            }
            failureNode_ = input.readMessage(com.flyteidl.core.Node.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(failureNode_);
              failureNode_ = subBuilder.buildPartial();
            }

            break;
          }
          case 58: {
            com.flyteidl.core.WorkflowMetadataDefaults.Builder subBuilder = null;
            if (metadataDefaults_ != null) {
              subBuilder = metadataDefaults_.toBuilder();
            }
            metadataDefaults_ = input.readMessage(com.flyteidl.core.WorkflowMetadataDefaults.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(metadataDefaults_);
              metadataDefaults_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        nodes_ = java.util.Collections.unmodifiableList(nodes_);
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        outputs_ = java.util.Collections.unmodifiableList(outputs_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.flyteidl.core.WorkflowProto.internal_static_flyteidl_core_WorkflowTemplate_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.flyteidl.core.WorkflowProto.internal_static_flyteidl_core_WorkflowTemplate_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.flyteidl.core.WorkflowTemplate.class, com.flyteidl.core.WorkflowTemplate.Builder.class);
  }

  public static final int ID_FIELD_NUMBER = 1;
  private com.flyteidl.core.Identifier id_;
  /**
   * <pre>
   * A globally unique identifier for the workflow.
   * </pre>
   *
   * <code>.flyteidl.core.Identifier id = 1 [json_name = "id"];</code>
   * @return Whether the id field is set.
   */
  @java.lang.Override
  public boolean hasId() {
    return id_ != null;
  }
  /**
   * <pre>
   * A globally unique identifier for the workflow.
   * </pre>
   *
   * <code>.flyteidl.core.Identifier id = 1 [json_name = "id"];</code>
   * @return The id.
   */
  @java.lang.Override
  public com.flyteidl.core.Identifier getId() {
    return id_ == null ? com.flyteidl.core.Identifier.getDefaultInstance() : id_;
  }
  /**
   * <pre>
   * A globally unique identifier for the workflow.
   * </pre>
   *
   * <code>.flyteidl.core.Identifier id = 1 [json_name = "id"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.IdentifierOrBuilder getIdOrBuilder() {
    return getId();
  }

  public static final int METADATA_FIELD_NUMBER = 2;
  private com.flyteidl.core.WorkflowMetadata metadata_;
  /**
   * <pre>
   * Extra metadata about the workflow.
   * </pre>
   *
   * <code>.flyteidl.core.WorkflowMetadata metadata = 2 [json_name = "metadata"];</code>
   * @return Whether the metadata field is set.
   */
  @java.lang.Override
  public boolean hasMetadata() {
    return metadata_ != null;
  }
  /**
   * <pre>
   * Extra metadata about the workflow.
   * </pre>
   *
   * <code>.flyteidl.core.WorkflowMetadata metadata = 2 [json_name = "metadata"];</code>
   * @return The metadata.
   */
  @java.lang.Override
  public com.flyteidl.core.WorkflowMetadata getMetadata() {
    return metadata_ == null ? com.flyteidl.core.WorkflowMetadata.getDefaultInstance() : metadata_;
  }
  /**
   * <pre>
   * Extra metadata about the workflow.
   * </pre>
   *
   * <code>.flyteidl.core.WorkflowMetadata metadata = 2 [json_name = "metadata"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.WorkflowMetadataOrBuilder getMetadataOrBuilder() {
    return getMetadata();
  }

  public static final int INTERFACE_FIELD_NUMBER = 3;
  private com.flyteidl.core.TypedInterface interface_;
  /**
   * <pre>
   * Defines a strongly typed interface for the Workflow. This can include some optional parameters.
   * </pre>
   *
   * <code>.flyteidl.core.TypedInterface interface = 3 [json_name = "interface"];</code>
   * @return Whether the interface field is set.
   */
  @java.lang.Override
  public boolean hasInterface() {
    return interface_ != null;
  }
  /**
   * <pre>
   * Defines a strongly typed interface for the Workflow. This can include some optional parameters.
   * </pre>
   *
   * <code>.flyteidl.core.TypedInterface interface = 3 [json_name = "interface"];</code>
   * @return The interface.
   */
  @java.lang.Override
  public com.flyteidl.core.TypedInterface getInterface() {
    return interface_ == null ? com.flyteidl.core.TypedInterface.getDefaultInstance() : interface_;
  }
  /**
   * <pre>
   * Defines a strongly typed interface for the Workflow. This can include some optional parameters.
   * </pre>
   *
   * <code>.flyteidl.core.TypedInterface interface = 3 [json_name = "interface"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.TypedInterfaceOrBuilder getInterfaceOrBuilder() {
    return getInterface();
  }

  public static final int NODES_FIELD_NUMBER = 4;
  private java.util.List<com.flyteidl.core.Node> nodes_;
  /**
   * <pre>
   * A list of nodes. In addition, "globals" is a special reserved node id that can be used to consume workflow inputs.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Node nodes = 4 [json_name = "nodes"];</code>
   */
  @java.lang.Override
  public java.util.List<com.flyteidl.core.Node> getNodesList() {
    return nodes_;
  }
  /**
   * <pre>
   * A list of nodes. In addition, "globals" is a special reserved node id that can be used to consume workflow inputs.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Node nodes = 4 [json_name = "nodes"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.flyteidl.core.NodeOrBuilder> 
      getNodesOrBuilderList() {
    return nodes_;
  }
  /**
   * <pre>
   * A list of nodes. In addition, "globals" is a special reserved node id that can be used to consume workflow inputs.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Node nodes = 4 [json_name = "nodes"];</code>
   */
  @java.lang.Override
  public int getNodesCount() {
    return nodes_.size();
  }
  /**
   * <pre>
   * A list of nodes. In addition, "globals" is a special reserved node id that can be used to consume workflow inputs.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Node nodes = 4 [json_name = "nodes"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.Node getNodes(int index) {
    return nodes_.get(index);
  }
  /**
   * <pre>
   * A list of nodes. In addition, "globals" is a special reserved node id that can be used to consume workflow inputs.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Node nodes = 4 [json_name = "nodes"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.NodeOrBuilder getNodesOrBuilder(
      int index) {
    return nodes_.get(index);
  }

  public static final int OUTPUTS_FIELD_NUMBER = 5;
  private java.util.List<com.flyteidl.core.Binding> outputs_;
  /**
   * <pre>
   * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
   * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
   * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
   * bind final outputs.
   * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
   * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
   * outputs from the output of a task.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Binding outputs = 5 [json_name = "outputs"];</code>
   */
  @java.lang.Override
  public java.util.List<com.flyteidl.core.Binding> getOutputsList() {
    return outputs_;
  }
  /**
   * <pre>
   * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
   * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
   * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
   * bind final outputs.
   * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
   * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
   * outputs from the output of a task.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Binding outputs = 5 [json_name = "outputs"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.flyteidl.core.BindingOrBuilder> 
      getOutputsOrBuilderList() {
    return outputs_;
  }
  /**
   * <pre>
   * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
   * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
   * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
   * bind final outputs.
   * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
   * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
   * outputs from the output of a task.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Binding outputs = 5 [json_name = "outputs"];</code>
   */
  @java.lang.Override
  public int getOutputsCount() {
    return outputs_.size();
  }
  /**
   * <pre>
   * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
   * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
   * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
   * bind final outputs.
   * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
   * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
   * outputs from the output of a task.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Binding outputs = 5 [json_name = "outputs"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.Binding getOutputs(int index) {
    return outputs_.get(index);
  }
  /**
   * <pre>
   * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
   * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
   * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
   * bind final outputs.
   * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
   * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
   * outputs from the output of a task.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Binding outputs = 5 [json_name = "outputs"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.BindingOrBuilder getOutputsOrBuilder(
      int index) {
    return outputs_.get(index);
  }

  public static final int FAILURE_NODE_FIELD_NUMBER = 6;
  private com.flyteidl.core.Node failureNode_;
  /**
   * <pre>
   *+optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.
   * The interface of this node must match the Workflow interface with an additional input named "error" of type
   * pb.lyft.flyte.core.Error.
   * </pre>
   *
   * <code>.flyteidl.core.Node failure_node = 6 [json_name = "failureNode"];</code>
   * @return Whether the failureNode field is set.
   */
  @java.lang.Override
  public boolean hasFailureNode() {
    return failureNode_ != null;
  }
  /**
   * <pre>
   *+optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.
   * The interface of this node must match the Workflow interface with an additional input named "error" of type
   * pb.lyft.flyte.core.Error.
   * </pre>
   *
   * <code>.flyteidl.core.Node failure_node = 6 [json_name = "failureNode"];</code>
   * @return The failureNode.
   */
  @java.lang.Override
  public com.flyteidl.core.Node getFailureNode() {
    return failureNode_ == null ? com.flyteidl.core.Node.getDefaultInstance() : failureNode_;
  }
  /**
   * <pre>
   *+optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.
   * The interface of this node must match the Workflow interface with an additional input named "error" of type
   * pb.lyft.flyte.core.Error.
   * </pre>
   *
   * <code>.flyteidl.core.Node failure_node = 6 [json_name = "failureNode"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.NodeOrBuilder getFailureNodeOrBuilder() {
    return getFailureNode();
  }

  public static final int METADATA_DEFAULTS_FIELD_NUMBER = 7;
  private com.flyteidl.core.WorkflowMetadataDefaults metadataDefaults_;
  /**
   * <pre>
   * workflow defaults
   * </pre>
   *
   * <code>.flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7 [json_name = "metadataDefaults"];</code>
   * @return Whether the metadataDefaults field is set.
   */
  @java.lang.Override
  public boolean hasMetadataDefaults() {
    return metadataDefaults_ != null;
  }
  /**
   * <pre>
   * workflow defaults
   * </pre>
   *
   * <code>.flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7 [json_name = "metadataDefaults"];</code>
   * @return The metadataDefaults.
   */
  @java.lang.Override
  public com.flyteidl.core.WorkflowMetadataDefaults getMetadataDefaults() {
    return metadataDefaults_ == null ? com.flyteidl.core.WorkflowMetadataDefaults.getDefaultInstance() : metadataDefaults_;
  }
  /**
   * <pre>
   * workflow defaults
   * </pre>
   *
   * <code>.flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7 [json_name = "metadataDefaults"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.WorkflowMetadataDefaultsOrBuilder getMetadataDefaultsOrBuilder() {
    return getMetadataDefaults();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (id_ != null) {
      output.writeMessage(1, getId());
    }
    if (metadata_ != null) {
      output.writeMessage(2, getMetadata());
    }
    if (interface_ != null) {
      output.writeMessage(3, getInterface());
    }
    for (int i = 0; i < nodes_.size(); i++) {
      output.writeMessage(4, nodes_.get(i));
    }
    for (int i = 0; i < outputs_.size(); i++) {
      output.writeMessage(5, outputs_.get(i));
    }
    if (failureNode_ != null) {
      output.writeMessage(6, getFailureNode());
    }
    if (metadataDefaults_ != null) {
      output.writeMessage(7, getMetadataDefaults());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (id_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getId());
    }
    if (metadata_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getMetadata());
    }
    if (interface_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getInterface());
    }
    for (int i = 0; i < nodes_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, nodes_.get(i));
    }
    for (int i = 0; i < outputs_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, outputs_.get(i));
    }
    if (failureNode_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getFailureNode());
    }
    if (metadataDefaults_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getMetadataDefaults());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.flyteidl.core.WorkflowTemplate)) {
      return super.equals(obj);
    }
    com.flyteidl.core.WorkflowTemplate other = (com.flyteidl.core.WorkflowTemplate) obj;

    if (hasId() != other.hasId()) return false;
    if (hasId()) {
      if (!getId()
          .equals(other.getId())) return false;
    }
    if (hasMetadata() != other.hasMetadata()) return false;
    if (hasMetadata()) {
      if (!getMetadata()
          .equals(other.getMetadata())) return false;
    }
    if (hasInterface() != other.hasInterface()) return false;
    if (hasInterface()) {
      if (!getInterface()
          .equals(other.getInterface())) return false;
    }
    if (!getNodesList()
        .equals(other.getNodesList())) return false;
    if (!getOutputsList()
        .equals(other.getOutputsList())) return false;
    if (hasFailureNode() != other.hasFailureNode()) return false;
    if (hasFailureNode()) {
      if (!getFailureNode()
          .equals(other.getFailureNode())) return false;
    }
    if (hasMetadataDefaults() != other.hasMetadataDefaults()) return false;
    if (hasMetadataDefaults()) {
      if (!getMetadataDefaults()
          .equals(other.getMetadataDefaults())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasId()) {
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId().hashCode();
    }
    if (hasMetadata()) {
      hash = (37 * hash) + METADATA_FIELD_NUMBER;
      hash = (53 * hash) + getMetadata().hashCode();
    }
    if (hasInterface()) {
      hash = (37 * hash) + INTERFACE_FIELD_NUMBER;
      hash = (53 * hash) + getInterface().hashCode();
    }
    if (getNodesCount() > 0) {
      hash = (37 * hash) + NODES_FIELD_NUMBER;
      hash = (53 * hash) + getNodesList().hashCode();
    }
    if (getOutputsCount() > 0) {
      hash = (37 * hash) + OUTPUTS_FIELD_NUMBER;
      hash = (53 * hash) + getOutputsList().hashCode();
    }
    if (hasFailureNode()) {
      hash = (37 * hash) + FAILURE_NODE_FIELD_NUMBER;
      hash = (53 * hash) + getFailureNode().hashCode();
    }
    if (hasMetadataDefaults()) {
      hash = (37 * hash) + METADATA_DEFAULTS_FIELD_NUMBER;
      hash = (53 * hash) + getMetadataDefaults().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.flyteidl.core.WorkflowTemplate parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.core.WorkflowTemplate parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.core.WorkflowTemplate parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.core.WorkflowTemplate parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.core.WorkflowTemplate parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.core.WorkflowTemplate parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.core.WorkflowTemplate parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.flyteidl.core.WorkflowTemplate parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.flyteidl.core.WorkflowTemplate parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.flyteidl.core.WorkflowTemplate parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.flyteidl.core.WorkflowTemplate parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.flyteidl.core.WorkflowTemplate parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.flyteidl.core.WorkflowTemplate prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Flyte Workflow Structure that encapsulates task, branch and subworkflow nodes to form a statically analyzable,
   * directed acyclic graph.
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.WorkflowTemplate}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:flyteidl.core.WorkflowTemplate)
      com.flyteidl.core.WorkflowTemplateOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.flyteidl.core.WorkflowProto.internal_static_flyteidl_core_WorkflowTemplate_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.flyteidl.core.WorkflowProto.internal_static_flyteidl_core_WorkflowTemplate_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.flyteidl.core.WorkflowTemplate.class, com.flyteidl.core.WorkflowTemplate.Builder.class);
    }

    // Construct using com.flyteidl.core.WorkflowTemplate.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getNodesFieldBuilder();
        getOutputsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (idBuilder_ == null) {
        id_ = null;
      } else {
        id_ = null;
        idBuilder_ = null;
      }
      if (metadataBuilder_ == null) {
        metadata_ = null;
      } else {
        metadata_ = null;
        metadataBuilder_ = null;
      }
      if (interfaceBuilder_ == null) {
        interface_ = null;
      } else {
        interface_ = null;
        interfaceBuilder_ = null;
      }
      if (nodesBuilder_ == null) {
        nodes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        nodesBuilder_.clear();
      }
      if (outputsBuilder_ == null) {
        outputs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        outputsBuilder_.clear();
      }
      if (failureNodeBuilder_ == null) {
        failureNode_ = null;
      } else {
        failureNode_ = null;
        failureNodeBuilder_ = null;
      }
      if (metadataDefaultsBuilder_ == null) {
        metadataDefaults_ = null;
      } else {
        metadataDefaults_ = null;
        metadataDefaultsBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.flyteidl.core.WorkflowProto.internal_static_flyteidl_core_WorkflowTemplate_descriptor;
    }

    @java.lang.Override
    public com.flyteidl.core.WorkflowTemplate getDefaultInstanceForType() {
      return com.flyteidl.core.WorkflowTemplate.getDefaultInstance();
    }

    @java.lang.Override
    public com.flyteidl.core.WorkflowTemplate build() {
      com.flyteidl.core.WorkflowTemplate result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.flyteidl.core.WorkflowTemplate buildPartial() {
      com.flyteidl.core.WorkflowTemplate result = new com.flyteidl.core.WorkflowTemplate(this);
      int from_bitField0_ = bitField0_;
      if (idBuilder_ == null) {
        result.id_ = id_;
      } else {
        result.id_ = idBuilder_.build();
      }
      if (metadataBuilder_ == null) {
        result.metadata_ = metadata_;
      } else {
        result.metadata_ = metadataBuilder_.build();
      }
      if (interfaceBuilder_ == null) {
        result.interface_ = interface_;
      } else {
        result.interface_ = interfaceBuilder_.build();
      }
      if (nodesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          nodes_ = java.util.Collections.unmodifiableList(nodes_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.nodes_ = nodes_;
      } else {
        result.nodes_ = nodesBuilder_.build();
      }
      if (outputsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          outputs_ = java.util.Collections.unmodifiableList(outputs_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.outputs_ = outputs_;
      } else {
        result.outputs_ = outputsBuilder_.build();
      }
      if (failureNodeBuilder_ == null) {
        result.failureNode_ = failureNode_;
      } else {
        result.failureNode_ = failureNodeBuilder_.build();
      }
      if (metadataDefaultsBuilder_ == null) {
        result.metadataDefaults_ = metadataDefaults_;
      } else {
        result.metadataDefaults_ = metadataDefaultsBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.flyteidl.core.WorkflowTemplate) {
        return mergeFrom((com.flyteidl.core.WorkflowTemplate)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.flyteidl.core.WorkflowTemplate other) {
      if (other == com.flyteidl.core.WorkflowTemplate.getDefaultInstance()) return this;
      if (other.hasId()) {
        mergeId(other.getId());
      }
      if (other.hasMetadata()) {
        mergeMetadata(other.getMetadata());
      }
      if (other.hasInterface()) {
        mergeInterface(other.getInterface());
      }
      if (nodesBuilder_ == null) {
        if (!other.nodes_.isEmpty()) {
          if (nodes_.isEmpty()) {
            nodes_ = other.nodes_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureNodesIsMutable();
            nodes_.addAll(other.nodes_);
          }
          onChanged();
        }
      } else {
        if (!other.nodes_.isEmpty()) {
          if (nodesBuilder_.isEmpty()) {
            nodesBuilder_.dispose();
            nodesBuilder_ = null;
            nodes_ = other.nodes_;
            bitField0_ = (bitField0_ & ~0x00000001);
            nodesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getNodesFieldBuilder() : null;
          } else {
            nodesBuilder_.addAllMessages(other.nodes_);
          }
        }
      }
      if (outputsBuilder_ == null) {
        if (!other.outputs_.isEmpty()) {
          if (outputs_.isEmpty()) {
            outputs_ = other.outputs_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureOutputsIsMutable();
            outputs_.addAll(other.outputs_);
          }
          onChanged();
        }
      } else {
        if (!other.outputs_.isEmpty()) {
          if (outputsBuilder_.isEmpty()) {
            outputsBuilder_.dispose();
            outputsBuilder_ = null;
            outputs_ = other.outputs_;
            bitField0_ = (bitField0_ & ~0x00000002);
            outputsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getOutputsFieldBuilder() : null;
          } else {
            outputsBuilder_.addAllMessages(other.outputs_);
          }
        }
      }
      if (other.hasFailureNode()) {
        mergeFailureNode(other.getFailureNode());
      }
      if (other.hasMetadataDefaults()) {
        mergeMetadataDefaults(other.getMetadataDefaults());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.flyteidl.core.WorkflowTemplate parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.flyteidl.core.WorkflowTemplate) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.flyteidl.core.Identifier id_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.Identifier, com.flyteidl.core.Identifier.Builder, com.flyteidl.core.IdentifierOrBuilder> idBuilder_;
    /**
     * <pre>
     * A globally unique identifier for the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.Identifier id = 1 [json_name = "id"];</code>
     * @return Whether the id field is set.
     */
    public boolean hasId() {
      return idBuilder_ != null || id_ != null;
    }
    /**
     * <pre>
     * A globally unique identifier for the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.Identifier id = 1 [json_name = "id"];</code>
     * @return The id.
     */
    public com.flyteidl.core.Identifier getId() {
      if (idBuilder_ == null) {
        return id_ == null ? com.flyteidl.core.Identifier.getDefaultInstance() : id_;
      } else {
        return idBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * A globally unique identifier for the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.Identifier id = 1 [json_name = "id"];</code>
     */
    public Builder setId(com.flyteidl.core.Identifier value) {
      if (idBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        id_ = value;
        onChanged();
      } else {
        idBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * A globally unique identifier for the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.Identifier id = 1 [json_name = "id"];</code>
     */
    public Builder setId(
        com.flyteidl.core.Identifier.Builder builderForValue) {
      if (idBuilder_ == null) {
        id_ = builderForValue.build();
        onChanged();
      } else {
        idBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * A globally unique identifier for the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.Identifier id = 1 [json_name = "id"];</code>
     */
    public Builder mergeId(com.flyteidl.core.Identifier value) {
      if (idBuilder_ == null) {
        if (id_ != null) {
          id_ =
            com.flyteidl.core.Identifier.newBuilder(id_).mergeFrom(value).buildPartial();
        } else {
          id_ = value;
        }
        onChanged();
      } else {
        idBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * A globally unique identifier for the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.Identifier id = 1 [json_name = "id"];</code>
     */
    public Builder clearId() {
      if (idBuilder_ == null) {
        id_ = null;
        onChanged();
      } else {
        id_ = null;
        idBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * A globally unique identifier for the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.Identifier id = 1 [json_name = "id"];</code>
     */
    public com.flyteidl.core.Identifier.Builder getIdBuilder() {
      
      onChanged();
      return getIdFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A globally unique identifier for the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.Identifier id = 1 [json_name = "id"];</code>
     */
    public com.flyteidl.core.IdentifierOrBuilder getIdOrBuilder() {
      if (idBuilder_ != null) {
        return idBuilder_.getMessageOrBuilder();
      } else {
        return id_ == null ?
            com.flyteidl.core.Identifier.getDefaultInstance() : id_;
      }
    }
    /**
     * <pre>
     * A globally unique identifier for the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.Identifier id = 1 [json_name = "id"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.Identifier, com.flyteidl.core.Identifier.Builder, com.flyteidl.core.IdentifierOrBuilder> 
        getIdFieldBuilder() {
      if (idBuilder_ == null) {
        idBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.Identifier, com.flyteidl.core.Identifier.Builder, com.flyteidl.core.IdentifierOrBuilder>(
                getId(),
                getParentForChildren(),
                isClean());
        id_ = null;
      }
      return idBuilder_;
    }

    private com.flyteidl.core.WorkflowMetadata metadata_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.WorkflowMetadata, com.flyteidl.core.WorkflowMetadata.Builder, com.flyteidl.core.WorkflowMetadataOrBuilder> metadataBuilder_;
    /**
     * <pre>
     * Extra metadata about the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadata metadata = 2 [json_name = "metadata"];</code>
     * @return Whether the metadata field is set.
     */
    public boolean hasMetadata() {
      return metadataBuilder_ != null || metadata_ != null;
    }
    /**
     * <pre>
     * Extra metadata about the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadata metadata = 2 [json_name = "metadata"];</code>
     * @return The metadata.
     */
    public com.flyteidl.core.WorkflowMetadata getMetadata() {
      if (metadataBuilder_ == null) {
        return metadata_ == null ? com.flyteidl.core.WorkflowMetadata.getDefaultInstance() : metadata_;
      } else {
        return metadataBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Extra metadata about the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadata metadata = 2 [json_name = "metadata"];</code>
     */
    public Builder setMetadata(com.flyteidl.core.WorkflowMetadata value) {
      if (metadataBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        metadata_ = value;
        onChanged();
      } else {
        metadataBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Extra metadata about the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadata metadata = 2 [json_name = "metadata"];</code>
     */
    public Builder setMetadata(
        com.flyteidl.core.WorkflowMetadata.Builder builderForValue) {
      if (metadataBuilder_ == null) {
        metadata_ = builderForValue.build();
        onChanged();
      } else {
        metadataBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Extra metadata about the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadata metadata = 2 [json_name = "metadata"];</code>
     */
    public Builder mergeMetadata(com.flyteidl.core.WorkflowMetadata value) {
      if (metadataBuilder_ == null) {
        if (metadata_ != null) {
          metadata_ =
            com.flyteidl.core.WorkflowMetadata.newBuilder(metadata_).mergeFrom(value).buildPartial();
        } else {
          metadata_ = value;
        }
        onChanged();
      } else {
        metadataBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Extra metadata about the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadata metadata = 2 [json_name = "metadata"];</code>
     */
    public Builder clearMetadata() {
      if (metadataBuilder_ == null) {
        metadata_ = null;
        onChanged();
      } else {
        metadata_ = null;
        metadataBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Extra metadata about the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadata metadata = 2 [json_name = "metadata"];</code>
     */
    public com.flyteidl.core.WorkflowMetadata.Builder getMetadataBuilder() {
      
      onChanged();
      return getMetadataFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Extra metadata about the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadata metadata = 2 [json_name = "metadata"];</code>
     */
    public com.flyteidl.core.WorkflowMetadataOrBuilder getMetadataOrBuilder() {
      if (metadataBuilder_ != null) {
        return metadataBuilder_.getMessageOrBuilder();
      } else {
        return metadata_ == null ?
            com.flyteidl.core.WorkflowMetadata.getDefaultInstance() : metadata_;
      }
    }
    /**
     * <pre>
     * Extra metadata about the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadata metadata = 2 [json_name = "metadata"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.WorkflowMetadata, com.flyteidl.core.WorkflowMetadata.Builder, com.flyteidl.core.WorkflowMetadataOrBuilder> 
        getMetadataFieldBuilder() {
      if (metadataBuilder_ == null) {
        metadataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.WorkflowMetadata, com.flyteidl.core.WorkflowMetadata.Builder, com.flyteidl.core.WorkflowMetadataOrBuilder>(
                getMetadata(),
                getParentForChildren(),
                isClean());
        metadata_ = null;
      }
      return metadataBuilder_;
    }

    private com.flyteidl.core.TypedInterface interface_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.TypedInterface, com.flyteidl.core.TypedInterface.Builder, com.flyteidl.core.TypedInterfaceOrBuilder> interfaceBuilder_;
    /**
     * <pre>
     * Defines a strongly typed interface for the Workflow. This can include some optional parameters.
     * </pre>
     *
     * <code>.flyteidl.core.TypedInterface interface = 3 [json_name = "interface"];</code>
     * @return Whether the interface field is set.
     */
    public boolean hasInterface() {
      return interfaceBuilder_ != null || interface_ != null;
    }
    /**
     * <pre>
     * Defines a strongly typed interface for the Workflow. This can include some optional parameters.
     * </pre>
     *
     * <code>.flyteidl.core.TypedInterface interface = 3 [json_name = "interface"];</code>
     * @return The interface.
     */
    public com.flyteidl.core.TypedInterface getInterface() {
      if (interfaceBuilder_ == null) {
        return interface_ == null ? com.flyteidl.core.TypedInterface.getDefaultInstance() : interface_;
      } else {
        return interfaceBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Defines a strongly typed interface for the Workflow. This can include some optional parameters.
     * </pre>
     *
     * <code>.flyteidl.core.TypedInterface interface = 3 [json_name = "interface"];</code>
     */
    public Builder setInterface(com.flyteidl.core.TypedInterface value) {
      if (interfaceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        interface_ = value;
        onChanged();
      } else {
        interfaceBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Defines a strongly typed interface for the Workflow. This can include some optional parameters.
     * </pre>
     *
     * <code>.flyteidl.core.TypedInterface interface = 3 [json_name = "interface"];</code>
     */
    public Builder setInterface(
        com.flyteidl.core.TypedInterface.Builder builderForValue) {
      if (interfaceBuilder_ == null) {
        interface_ = builderForValue.build();
        onChanged();
      } else {
        interfaceBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Defines a strongly typed interface for the Workflow. This can include some optional parameters.
     * </pre>
     *
     * <code>.flyteidl.core.TypedInterface interface = 3 [json_name = "interface"];</code>
     */
    public Builder mergeInterface(com.flyteidl.core.TypedInterface value) {
      if (interfaceBuilder_ == null) {
        if (interface_ != null) {
          interface_ =
            com.flyteidl.core.TypedInterface.newBuilder(interface_).mergeFrom(value).buildPartial();
        } else {
          interface_ = value;
        }
        onChanged();
      } else {
        interfaceBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Defines a strongly typed interface for the Workflow. This can include some optional parameters.
     * </pre>
     *
     * <code>.flyteidl.core.TypedInterface interface = 3 [json_name = "interface"];</code>
     */
    public Builder clearInterface() {
      if (interfaceBuilder_ == null) {
        interface_ = null;
        onChanged();
      } else {
        interface_ = null;
        interfaceBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Defines a strongly typed interface for the Workflow. This can include some optional parameters.
     * </pre>
     *
     * <code>.flyteidl.core.TypedInterface interface = 3 [json_name = "interface"];</code>
     */
    public com.flyteidl.core.TypedInterface.Builder getInterfaceBuilder() {
      
      onChanged();
      return getInterfaceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Defines a strongly typed interface for the Workflow. This can include some optional parameters.
     * </pre>
     *
     * <code>.flyteidl.core.TypedInterface interface = 3 [json_name = "interface"];</code>
     */
    public com.flyteidl.core.TypedInterfaceOrBuilder getInterfaceOrBuilder() {
      if (interfaceBuilder_ != null) {
        return interfaceBuilder_.getMessageOrBuilder();
      } else {
        return interface_ == null ?
            com.flyteidl.core.TypedInterface.getDefaultInstance() : interface_;
      }
    }
    /**
     * <pre>
     * Defines a strongly typed interface for the Workflow. This can include some optional parameters.
     * </pre>
     *
     * <code>.flyteidl.core.TypedInterface interface = 3 [json_name = "interface"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.TypedInterface, com.flyteidl.core.TypedInterface.Builder, com.flyteidl.core.TypedInterfaceOrBuilder> 
        getInterfaceFieldBuilder() {
      if (interfaceBuilder_ == null) {
        interfaceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.TypedInterface, com.flyteidl.core.TypedInterface.Builder, com.flyteidl.core.TypedInterfaceOrBuilder>(
                getInterface(),
                getParentForChildren(),
                isClean());
        interface_ = null;
      }
      return interfaceBuilder_;
    }

    private java.util.List<com.flyteidl.core.Node> nodes_ =
      java.util.Collections.emptyList();
    private void ensureNodesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        nodes_ = new java.util.ArrayList<com.flyteidl.core.Node>(nodes_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.flyteidl.core.Node, com.flyteidl.core.Node.Builder, com.flyteidl.core.NodeOrBuilder> nodesBuilder_;

    /**
     * <pre>
     * A list of nodes. In addition, "globals" is a special reserved node id that can be used to consume workflow inputs.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Node nodes = 4 [json_name = "nodes"];</code>
     */
    public java.util.List<com.flyteidl.core.Node> getNodesList() {
      if (nodesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(nodes_);
      } else {
        return nodesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * A list of nodes. In addition, "globals" is a special reserved node id that can be used to consume workflow inputs.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Node nodes = 4 [json_name = "nodes"];</code>
     */
    public int getNodesCount() {
      if (nodesBuilder_ == null) {
        return nodes_.size();
      } else {
        return nodesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * A list of nodes. In addition, "globals" is a special reserved node id that can be used to consume workflow inputs.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Node nodes = 4 [json_name = "nodes"];</code>
     */
    public com.flyteidl.core.Node getNodes(int index) {
      if (nodesBuilder_ == null) {
        return nodes_.get(index);
      } else {
        return nodesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * A list of nodes. In addition, "globals" is a special reserved node id that can be used to consume workflow inputs.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Node nodes = 4 [json_name = "nodes"];</code>
     */
    public Builder setNodes(
        int index, com.flyteidl.core.Node value) {
      if (nodesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNodesIsMutable();
        nodes_.set(index, value);
        onChanged();
      } else {
        nodesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of nodes. In addition, "globals" is a special reserved node id that can be used to consume workflow inputs.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Node nodes = 4 [json_name = "nodes"];</code>
     */
    public Builder setNodes(
        int index, com.flyteidl.core.Node.Builder builderForValue) {
      if (nodesBuilder_ == null) {
        ensureNodesIsMutable();
        nodes_.set(index, builderForValue.build());
        onChanged();
      } else {
        nodesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of nodes. In addition, "globals" is a special reserved node id that can be used to consume workflow inputs.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Node nodes = 4 [json_name = "nodes"];</code>
     */
    public Builder addNodes(com.flyteidl.core.Node value) {
      if (nodesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNodesIsMutable();
        nodes_.add(value);
        onChanged();
      } else {
        nodesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of nodes. In addition, "globals" is a special reserved node id that can be used to consume workflow inputs.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Node nodes = 4 [json_name = "nodes"];</code>
     */
    public Builder addNodes(
        int index, com.flyteidl.core.Node value) {
      if (nodesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNodesIsMutable();
        nodes_.add(index, value);
        onChanged();
      } else {
        nodesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of nodes. In addition, "globals" is a special reserved node id that can be used to consume workflow inputs.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Node nodes = 4 [json_name = "nodes"];</code>
     */
    public Builder addNodes(
        com.flyteidl.core.Node.Builder builderForValue) {
      if (nodesBuilder_ == null) {
        ensureNodesIsMutable();
        nodes_.add(builderForValue.build());
        onChanged();
      } else {
        nodesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of nodes. In addition, "globals" is a special reserved node id that can be used to consume workflow inputs.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Node nodes = 4 [json_name = "nodes"];</code>
     */
    public Builder addNodes(
        int index, com.flyteidl.core.Node.Builder builderForValue) {
      if (nodesBuilder_ == null) {
        ensureNodesIsMutable();
        nodes_.add(index, builderForValue.build());
        onChanged();
      } else {
        nodesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of nodes. In addition, "globals" is a special reserved node id that can be used to consume workflow inputs.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Node nodes = 4 [json_name = "nodes"];</code>
     */
    public Builder addAllNodes(
        java.lang.Iterable<? extends com.flyteidl.core.Node> values) {
      if (nodesBuilder_ == null) {
        ensureNodesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, nodes_);
        onChanged();
      } else {
        nodesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * A list of nodes. In addition, "globals" is a special reserved node id that can be used to consume workflow inputs.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Node nodes = 4 [json_name = "nodes"];</code>
     */
    public Builder clearNodes() {
      if (nodesBuilder_ == null) {
        nodes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        nodesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A list of nodes. In addition, "globals" is a special reserved node id that can be used to consume workflow inputs.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Node nodes = 4 [json_name = "nodes"];</code>
     */
    public Builder removeNodes(int index) {
      if (nodesBuilder_ == null) {
        ensureNodesIsMutable();
        nodes_.remove(index);
        onChanged();
      } else {
        nodesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * A list of nodes. In addition, "globals" is a special reserved node id that can be used to consume workflow inputs.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Node nodes = 4 [json_name = "nodes"];</code>
     */
    public com.flyteidl.core.Node.Builder getNodesBuilder(
        int index) {
      return getNodesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * A list of nodes. In addition, "globals" is a special reserved node id that can be used to consume workflow inputs.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Node nodes = 4 [json_name = "nodes"];</code>
     */
    public com.flyteidl.core.NodeOrBuilder getNodesOrBuilder(
        int index) {
      if (nodesBuilder_ == null) {
        return nodes_.get(index);  } else {
        return nodesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * A list of nodes. In addition, "globals" is a special reserved node id that can be used to consume workflow inputs.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Node nodes = 4 [json_name = "nodes"];</code>
     */
    public java.util.List<? extends com.flyteidl.core.NodeOrBuilder> 
         getNodesOrBuilderList() {
      if (nodesBuilder_ != null) {
        return nodesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(nodes_);
      }
    }
    /**
     * <pre>
     * A list of nodes. In addition, "globals" is a special reserved node id that can be used to consume workflow inputs.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Node nodes = 4 [json_name = "nodes"];</code>
     */
    public com.flyteidl.core.Node.Builder addNodesBuilder() {
      return getNodesFieldBuilder().addBuilder(
          com.flyteidl.core.Node.getDefaultInstance());
    }
    /**
     * <pre>
     * A list of nodes. In addition, "globals" is a special reserved node id that can be used to consume workflow inputs.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Node nodes = 4 [json_name = "nodes"];</code>
     */
    public com.flyteidl.core.Node.Builder addNodesBuilder(
        int index) {
      return getNodesFieldBuilder().addBuilder(
          index, com.flyteidl.core.Node.getDefaultInstance());
    }
    /**
     * <pre>
     * A list of nodes. In addition, "globals" is a special reserved node id that can be used to consume workflow inputs.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Node nodes = 4 [json_name = "nodes"];</code>
     */
    public java.util.List<com.flyteidl.core.Node.Builder> 
         getNodesBuilderList() {
      return getNodesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.flyteidl.core.Node, com.flyteidl.core.Node.Builder, com.flyteidl.core.NodeOrBuilder> 
        getNodesFieldBuilder() {
      if (nodesBuilder_ == null) {
        nodesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.flyteidl.core.Node, com.flyteidl.core.Node.Builder, com.flyteidl.core.NodeOrBuilder>(
                nodes_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        nodes_ = null;
      }
      return nodesBuilder_;
    }

    private java.util.List<com.flyteidl.core.Binding> outputs_ =
      java.util.Collections.emptyList();
    private void ensureOutputsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        outputs_ = new java.util.ArrayList<com.flyteidl.core.Binding>(outputs_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.flyteidl.core.Binding, com.flyteidl.core.Binding.Builder, com.flyteidl.core.BindingOrBuilder> outputsBuilder_;

    /**
     * <pre>
     * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
     * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
     * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
     * bind final outputs.
     * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
     * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
     * outputs from the output of a task.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding outputs = 5 [json_name = "outputs"];</code>
     */
    public java.util.List<com.flyteidl.core.Binding> getOutputsList() {
      if (outputsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(outputs_);
      } else {
        return outputsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
     * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
     * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
     * bind final outputs.
     * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
     * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
     * outputs from the output of a task.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding outputs = 5 [json_name = "outputs"];</code>
     */
    public int getOutputsCount() {
      if (outputsBuilder_ == null) {
        return outputs_.size();
      } else {
        return outputsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
     * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
     * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
     * bind final outputs.
     * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
     * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
     * outputs from the output of a task.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding outputs = 5 [json_name = "outputs"];</code>
     */
    public com.flyteidl.core.Binding getOutputs(int index) {
      if (outputsBuilder_ == null) {
        return outputs_.get(index);
      } else {
        return outputsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
     * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
     * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
     * bind final outputs.
     * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
     * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
     * outputs from the output of a task.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding outputs = 5 [json_name = "outputs"];</code>
     */
    public Builder setOutputs(
        int index, com.flyteidl.core.Binding value) {
      if (outputsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureOutputsIsMutable();
        outputs_.set(index, value);
        onChanged();
      } else {
        outputsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
     * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
     * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
     * bind final outputs.
     * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
     * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
     * outputs from the output of a task.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding outputs = 5 [json_name = "outputs"];</code>
     */
    public Builder setOutputs(
        int index, com.flyteidl.core.Binding.Builder builderForValue) {
      if (outputsBuilder_ == null) {
        ensureOutputsIsMutable();
        outputs_.set(index, builderForValue.build());
        onChanged();
      } else {
        outputsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
     * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
     * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
     * bind final outputs.
     * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
     * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
     * outputs from the output of a task.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding outputs = 5 [json_name = "outputs"];</code>
     */
    public Builder addOutputs(com.flyteidl.core.Binding value) {
      if (outputsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureOutputsIsMutable();
        outputs_.add(value);
        onChanged();
      } else {
        outputsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
     * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
     * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
     * bind final outputs.
     * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
     * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
     * outputs from the output of a task.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding outputs = 5 [json_name = "outputs"];</code>
     */
    public Builder addOutputs(
        int index, com.flyteidl.core.Binding value) {
      if (outputsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureOutputsIsMutable();
        outputs_.add(index, value);
        onChanged();
      } else {
        outputsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
     * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
     * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
     * bind final outputs.
     * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
     * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
     * outputs from the output of a task.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding outputs = 5 [json_name = "outputs"];</code>
     */
    public Builder addOutputs(
        com.flyteidl.core.Binding.Builder builderForValue) {
      if (outputsBuilder_ == null) {
        ensureOutputsIsMutable();
        outputs_.add(builderForValue.build());
        onChanged();
      } else {
        outputsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
     * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
     * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
     * bind final outputs.
     * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
     * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
     * outputs from the output of a task.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding outputs = 5 [json_name = "outputs"];</code>
     */
    public Builder addOutputs(
        int index, com.flyteidl.core.Binding.Builder builderForValue) {
      if (outputsBuilder_ == null) {
        ensureOutputsIsMutable();
        outputs_.add(index, builderForValue.build());
        onChanged();
      } else {
        outputsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
     * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
     * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
     * bind final outputs.
     * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
     * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
     * outputs from the output of a task.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding outputs = 5 [json_name = "outputs"];</code>
     */
    public Builder addAllOutputs(
        java.lang.Iterable<? extends com.flyteidl.core.Binding> values) {
      if (outputsBuilder_ == null) {
        ensureOutputsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, outputs_);
        onChanged();
      } else {
        outputsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
     * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
     * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
     * bind final outputs.
     * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
     * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
     * outputs from the output of a task.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding outputs = 5 [json_name = "outputs"];</code>
     */
    public Builder clearOutputs() {
      if (outputsBuilder_ == null) {
        outputs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        outputsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
     * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
     * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
     * bind final outputs.
     * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
     * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
     * outputs from the output of a task.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding outputs = 5 [json_name = "outputs"];</code>
     */
    public Builder removeOutputs(int index) {
      if (outputsBuilder_ == null) {
        ensureOutputsIsMutable();
        outputs_.remove(index);
        onChanged();
      } else {
        outputsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
     * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
     * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
     * bind final outputs.
     * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
     * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
     * outputs from the output of a task.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding outputs = 5 [json_name = "outputs"];</code>
     */
    public com.flyteidl.core.Binding.Builder getOutputsBuilder(
        int index) {
      return getOutputsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
     * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
     * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
     * bind final outputs.
     * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
     * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
     * outputs from the output of a task.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding outputs = 5 [json_name = "outputs"];</code>
     */
    public com.flyteidl.core.BindingOrBuilder getOutputsOrBuilder(
        int index) {
      if (outputsBuilder_ == null) {
        return outputs_.get(index);  } else {
        return outputsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
     * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
     * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
     * bind final outputs.
     * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
     * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
     * outputs from the output of a task.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding outputs = 5 [json_name = "outputs"];</code>
     */
    public java.util.List<? extends com.flyteidl.core.BindingOrBuilder> 
         getOutputsOrBuilderList() {
      if (outputsBuilder_ != null) {
        return outputsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(outputs_);
      }
    }
    /**
     * <pre>
     * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
     * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
     * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
     * bind final outputs.
     * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
     * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
     * outputs from the output of a task.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding outputs = 5 [json_name = "outputs"];</code>
     */
    public com.flyteidl.core.Binding.Builder addOutputsBuilder() {
      return getOutputsFieldBuilder().addBuilder(
          com.flyteidl.core.Binding.getDefaultInstance());
    }
    /**
     * <pre>
     * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
     * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
     * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
     * bind final outputs.
     * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
     * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
     * outputs from the output of a task.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding outputs = 5 [json_name = "outputs"];</code>
     */
    public com.flyteidl.core.Binding.Builder addOutputsBuilder(
        int index) {
      return getOutputsFieldBuilder().addBuilder(
          index, com.flyteidl.core.Binding.getDefaultInstance());
    }
    /**
     * <pre>
     * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
     * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
     * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
     * bind final outputs.
     * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
     * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
     * outputs from the output of a task.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding outputs = 5 [json_name = "outputs"];</code>
     */
    public java.util.List<com.flyteidl.core.Binding.Builder> 
         getOutputsBuilderList() {
      return getOutputsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.flyteidl.core.Binding, com.flyteidl.core.Binding.Builder, com.flyteidl.core.BindingOrBuilder> 
        getOutputsFieldBuilder() {
      if (outputsBuilder_ == null) {
        outputsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.flyteidl.core.Binding, com.flyteidl.core.Binding.Builder, com.flyteidl.core.BindingOrBuilder>(
                outputs_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        outputs_ = null;
      }
      return outputsBuilder_;
    }

    private com.flyteidl.core.Node failureNode_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.Node, com.flyteidl.core.Node.Builder, com.flyteidl.core.NodeOrBuilder> failureNodeBuilder_;
    /**
     * <pre>
     *+optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.
     * The interface of this node must match the Workflow interface with an additional input named "error" of type
     * pb.lyft.flyte.core.Error.
     * </pre>
     *
     * <code>.flyteidl.core.Node failure_node = 6 [json_name = "failureNode"];</code>
     * @return Whether the failureNode field is set.
     */
    public boolean hasFailureNode() {
      return failureNodeBuilder_ != null || failureNode_ != null;
    }
    /**
     * <pre>
     *+optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.
     * The interface of this node must match the Workflow interface with an additional input named "error" of type
     * pb.lyft.flyte.core.Error.
     * </pre>
     *
     * <code>.flyteidl.core.Node failure_node = 6 [json_name = "failureNode"];</code>
     * @return The failureNode.
     */
    public com.flyteidl.core.Node getFailureNode() {
      if (failureNodeBuilder_ == null) {
        return failureNode_ == null ? com.flyteidl.core.Node.getDefaultInstance() : failureNode_;
      } else {
        return failureNodeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     *+optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.
     * The interface of this node must match the Workflow interface with an additional input named "error" of type
     * pb.lyft.flyte.core.Error.
     * </pre>
     *
     * <code>.flyteidl.core.Node failure_node = 6 [json_name = "failureNode"];</code>
     */
    public Builder setFailureNode(com.flyteidl.core.Node value) {
      if (failureNodeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        failureNode_ = value;
        onChanged();
      } else {
        failureNodeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     *+optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.
     * The interface of this node must match the Workflow interface with an additional input named "error" of type
     * pb.lyft.flyte.core.Error.
     * </pre>
     *
     * <code>.flyteidl.core.Node failure_node = 6 [json_name = "failureNode"];</code>
     */
    public Builder setFailureNode(
        com.flyteidl.core.Node.Builder builderForValue) {
      if (failureNodeBuilder_ == null) {
        failureNode_ = builderForValue.build();
        onChanged();
      } else {
        failureNodeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     *+optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.
     * The interface of this node must match the Workflow interface with an additional input named "error" of type
     * pb.lyft.flyte.core.Error.
     * </pre>
     *
     * <code>.flyteidl.core.Node failure_node = 6 [json_name = "failureNode"];</code>
     */
    public Builder mergeFailureNode(com.flyteidl.core.Node value) {
      if (failureNodeBuilder_ == null) {
        if (failureNode_ != null) {
          failureNode_ =
            com.flyteidl.core.Node.newBuilder(failureNode_).mergeFrom(value).buildPartial();
        } else {
          failureNode_ = value;
        }
        onChanged();
      } else {
        failureNodeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     *+optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.
     * The interface of this node must match the Workflow interface with an additional input named "error" of type
     * pb.lyft.flyte.core.Error.
     * </pre>
     *
     * <code>.flyteidl.core.Node failure_node = 6 [json_name = "failureNode"];</code>
     */
    public Builder clearFailureNode() {
      if (failureNodeBuilder_ == null) {
        failureNode_ = null;
        onChanged();
      } else {
        failureNode_ = null;
        failureNodeBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     *+optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.
     * The interface of this node must match the Workflow interface with an additional input named "error" of type
     * pb.lyft.flyte.core.Error.
     * </pre>
     *
     * <code>.flyteidl.core.Node failure_node = 6 [json_name = "failureNode"];</code>
     */
    public com.flyteidl.core.Node.Builder getFailureNodeBuilder() {
      
      onChanged();
      return getFailureNodeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     *+optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.
     * The interface of this node must match the Workflow interface with an additional input named "error" of type
     * pb.lyft.flyte.core.Error.
     * </pre>
     *
     * <code>.flyteidl.core.Node failure_node = 6 [json_name = "failureNode"];</code>
     */
    public com.flyteidl.core.NodeOrBuilder getFailureNodeOrBuilder() {
      if (failureNodeBuilder_ != null) {
        return failureNodeBuilder_.getMessageOrBuilder();
      } else {
        return failureNode_ == null ?
            com.flyteidl.core.Node.getDefaultInstance() : failureNode_;
      }
    }
    /**
     * <pre>
     *+optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.
     * The interface of this node must match the Workflow interface with an additional input named "error" of type
     * pb.lyft.flyte.core.Error.
     * </pre>
     *
     * <code>.flyteidl.core.Node failure_node = 6 [json_name = "failureNode"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.Node, com.flyteidl.core.Node.Builder, com.flyteidl.core.NodeOrBuilder> 
        getFailureNodeFieldBuilder() {
      if (failureNodeBuilder_ == null) {
        failureNodeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.Node, com.flyteidl.core.Node.Builder, com.flyteidl.core.NodeOrBuilder>(
                getFailureNode(),
                getParentForChildren(),
                isClean());
        failureNode_ = null;
      }
      return failureNodeBuilder_;
    }

    private com.flyteidl.core.WorkflowMetadataDefaults metadataDefaults_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.WorkflowMetadataDefaults, com.flyteidl.core.WorkflowMetadataDefaults.Builder, com.flyteidl.core.WorkflowMetadataDefaultsOrBuilder> metadataDefaultsBuilder_;
    /**
     * <pre>
     * workflow defaults
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7 [json_name = "metadataDefaults"];</code>
     * @return Whether the metadataDefaults field is set.
     */
    public boolean hasMetadataDefaults() {
      return metadataDefaultsBuilder_ != null || metadataDefaults_ != null;
    }
    /**
     * <pre>
     * workflow defaults
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7 [json_name = "metadataDefaults"];</code>
     * @return The metadataDefaults.
     */
    public com.flyteidl.core.WorkflowMetadataDefaults getMetadataDefaults() {
      if (metadataDefaultsBuilder_ == null) {
        return metadataDefaults_ == null ? com.flyteidl.core.WorkflowMetadataDefaults.getDefaultInstance() : metadataDefaults_;
      } else {
        return metadataDefaultsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * workflow defaults
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7 [json_name = "metadataDefaults"];</code>
     */
    public Builder setMetadataDefaults(com.flyteidl.core.WorkflowMetadataDefaults value) {
      if (metadataDefaultsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        metadataDefaults_ = value;
        onChanged();
      } else {
        metadataDefaultsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * workflow defaults
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7 [json_name = "metadataDefaults"];</code>
     */
    public Builder setMetadataDefaults(
        com.flyteidl.core.WorkflowMetadataDefaults.Builder builderForValue) {
      if (metadataDefaultsBuilder_ == null) {
        metadataDefaults_ = builderForValue.build();
        onChanged();
      } else {
        metadataDefaultsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * workflow defaults
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7 [json_name = "metadataDefaults"];</code>
     */
    public Builder mergeMetadataDefaults(com.flyteidl.core.WorkflowMetadataDefaults value) {
      if (metadataDefaultsBuilder_ == null) {
        if (metadataDefaults_ != null) {
          metadataDefaults_ =
            com.flyteidl.core.WorkflowMetadataDefaults.newBuilder(metadataDefaults_).mergeFrom(value).buildPartial();
        } else {
          metadataDefaults_ = value;
        }
        onChanged();
      } else {
        metadataDefaultsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * workflow defaults
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7 [json_name = "metadataDefaults"];</code>
     */
    public Builder clearMetadataDefaults() {
      if (metadataDefaultsBuilder_ == null) {
        metadataDefaults_ = null;
        onChanged();
      } else {
        metadataDefaults_ = null;
        metadataDefaultsBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * workflow defaults
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7 [json_name = "metadataDefaults"];</code>
     */
    public com.flyteidl.core.WorkflowMetadataDefaults.Builder getMetadataDefaultsBuilder() {
      
      onChanged();
      return getMetadataDefaultsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * workflow defaults
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7 [json_name = "metadataDefaults"];</code>
     */
    public com.flyteidl.core.WorkflowMetadataDefaultsOrBuilder getMetadataDefaultsOrBuilder() {
      if (metadataDefaultsBuilder_ != null) {
        return metadataDefaultsBuilder_.getMessageOrBuilder();
      } else {
        return metadataDefaults_ == null ?
            com.flyteidl.core.WorkflowMetadataDefaults.getDefaultInstance() : metadataDefaults_;
      }
    }
    /**
     * <pre>
     * workflow defaults
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7 [json_name = "metadataDefaults"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.WorkflowMetadataDefaults, com.flyteidl.core.WorkflowMetadataDefaults.Builder, com.flyteidl.core.WorkflowMetadataDefaultsOrBuilder> 
        getMetadataDefaultsFieldBuilder() {
      if (metadataDefaultsBuilder_ == null) {
        metadataDefaultsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.WorkflowMetadataDefaults, com.flyteidl.core.WorkflowMetadataDefaults.Builder, com.flyteidl.core.WorkflowMetadataDefaultsOrBuilder>(
                getMetadataDefaults(),
                getParentForChildren(),
                isClean());
        metadataDefaults_ = null;
      }
      return metadataDefaultsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:flyteidl.core.WorkflowTemplate)
  }

  // @@protoc_insertion_point(class_scope:flyteidl.core.WorkflowTemplate)
  private static final com.flyteidl.core.WorkflowTemplate DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.flyteidl.core.WorkflowTemplate();
  }

  public static com.flyteidl.core.WorkflowTemplate getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<WorkflowTemplate>
      PARSER = new com.google.protobuf.AbstractParser<WorkflowTemplate>() {
    @java.lang.Override
    public WorkflowTemplate parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new WorkflowTemplate(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<WorkflowTemplate> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<WorkflowTemplate> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.flyteidl.core.WorkflowTemplate getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

