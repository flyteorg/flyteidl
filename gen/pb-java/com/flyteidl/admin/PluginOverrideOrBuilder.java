// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/matchable_resource.proto

package com.flyteidl.admin;

public interface PluginOverrideOrBuilder extends
    // @@protoc_insertion_point(interface_extends:flyteidl.admin.PluginOverride)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * A predefined yet extensible Task type identifier.
   * </pre>
   *
   * <code>string task_type = 1 [json_name = "taskType"];</code>
   * @return The taskType.
   */
  java.lang.String getTaskType();
  /**
   * <pre>
   * A predefined yet extensible Task type identifier.
   * </pre>
   *
   * <code>string task_type = 1 [json_name = "taskType"];</code>
   * @return The bytes for taskType.
   */
  com.google.protobuf.ByteString
      getTaskTypeBytes();

  /**
   * <pre>
   * A set of plugin ids which should handle tasks of this type instead of the default registered plugin. The list will be tried in order until a plugin is found with that id.
   * </pre>
   *
   * <code>repeated string plugin_id = 2 [json_name = "pluginId"];</code>
   * @return A list containing the pluginId.
   */
  java.util.List<java.lang.String>
      getPluginIdList();
  /**
   * <pre>
   * A set of plugin ids which should handle tasks of this type instead of the default registered plugin. The list will be tried in order until a plugin is found with that id.
   * </pre>
   *
   * <code>repeated string plugin_id = 2 [json_name = "pluginId"];</code>
   * @return The count of pluginId.
   */
  int getPluginIdCount();
  /**
   * <pre>
   * A set of plugin ids which should handle tasks of this type instead of the default registered plugin. The list will be tried in order until a plugin is found with that id.
   * </pre>
   *
   * <code>repeated string plugin_id = 2 [json_name = "pluginId"];</code>
   * @param index The index of the element to return.
   * @return The pluginId at the given index.
   */
  java.lang.String getPluginId(int index);
  /**
   * <pre>
   * A set of plugin ids which should handle tasks of this type instead of the default registered plugin. The list will be tried in order until a plugin is found with that id.
   * </pre>
   *
   * <code>repeated string plugin_id = 2 [json_name = "pluginId"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the pluginId at the given index.
   */
  com.google.protobuf.ByteString
      getPluginIdBytes(int index);

  /**
   * <pre>
   * Defines the behavior when no plugin from the plugin_id list is not found.
   * </pre>
   *
   * <code>.flyteidl.admin.PluginOverride.MissingPluginBehavior missing_plugin_behavior = 4 [json_name = "missingPluginBehavior"];</code>
   * @return The enum numeric value on the wire for missingPluginBehavior.
   */
  int getMissingPluginBehaviorValue();
  /**
   * <pre>
   * Defines the behavior when no plugin from the plugin_id list is not found.
   * </pre>
   *
   * <code>.flyteidl.admin.PluginOverride.MissingPluginBehavior missing_plugin_behavior = 4 [json_name = "missingPluginBehavior"];</code>
   * @return The missingPluginBehavior.
   */
  com.flyteidl.admin.PluginOverride.MissingPluginBehavior getMissingPluginBehavior();
}
