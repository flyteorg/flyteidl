// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/tasks.proto

#include "flyteidl/core/tasks.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace core {
constexpr Resources_ResourceEntry::Resources_ResourceEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(0)
{}
struct Resources_ResourceEntryDefaultTypeInternal {
  constexpr Resources_ResourceEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Resources_ResourceEntryDefaultTypeInternal() {}
  union {
    Resources_ResourceEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Resources_ResourceEntryDefaultTypeInternal _Resources_ResourceEntry_default_instance_;
constexpr Resources::Resources(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requests_()
  , limits_(){}
struct ResourcesDefaultTypeInternal {
  constexpr ResourcesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResourcesDefaultTypeInternal() {}
  union {
    Resources _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResourcesDefaultTypeInternal _Resources_default_instance_;
constexpr RuntimeMetadata::RuntimeMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , flavor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct RuntimeMetadataDefaultTypeInternal {
  constexpr RuntimeMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RuntimeMetadataDefaultTypeInternal() {}
  union {
    RuntimeMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RuntimeMetadataDefaultTypeInternal _RuntimeMetadata_default_instance_;
constexpr TaskMetadata::TaskMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : discovery_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , deprecated_error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , runtime_(nullptr)
  , timeout_(nullptr)
  , retries_(nullptr)
  , discoverable_(false)
  , cache_serializable_(false)
  , _oneof_case_{}{}
struct TaskMetadataDefaultTypeInternal {
  constexpr TaskMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskMetadataDefaultTypeInternal() {}
  union {
    TaskMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskMetadataDefaultTypeInternal _TaskMetadata_default_instance_;
constexpr TaskTemplate_ConfigEntry_DoNotUse::TaskTemplate_ConfigEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TaskTemplate_ConfigEntry_DoNotUseDefaultTypeInternal {
  constexpr TaskTemplate_ConfigEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskTemplate_ConfigEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TaskTemplate_ConfigEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskTemplate_ConfigEntry_DoNotUseDefaultTypeInternal _TaskTemplate_ConfigEntry_DoNotUse_default_instance_;
constexpr TaskTemplate::TaskTemplate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : config_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr)
  , metadata_(nullptr)
  , interface_(nullptr)
  , custom_(nullptr)
  , security_context_(nullptr)
  , task_type_version_(0)
  , _oneof_case_{}{}
struct TaskTemplateDefaultTypeInternal {
  constexpr TaskTemplateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskTemplateDefaultTypeInternal() {}
  union {
    TaskTemplate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskTemplateDefaultTypeInternal _TaskTemplate_default_instance_;
constexpr ContainerPort::ContainerPort(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : container_port_(0u){}
struct ContainerPortDefaultTypeInternal {
  constexpr ContainerPortDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContainerPortDefaultTypeInternal() {}
  union {
    ContainerPort _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContainerPortDefaultTypeInternal _ContainerPort_default_instance_;
constexpr Container::Container(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : command_()
  , args_()
  , env_()
  , config_()
  , ports_()
  , image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , resources_(nullptr)
  , data_config_(nullptr)
  , architecture_(0)
{}
struct ContainerDefaultTypeInternal {
  constexpr ContainerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContainerDefaultTypeInternal() {}
  union {
    Container _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContainerDefaultTypeInternal _Container_default_instance_;
constexpr IOStrategy::IOStrategy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : download_mode_(0)

  , upload_mode_(0)
{}
struct IOStrategyDefaultTypeInternal {
  constexpr IOStrategyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IOStrategyDefaultTypeInternal() {}
  union {
    IOStrategy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IOStrategyDefaultTypeInternal _IOStrategy_default_instance_;
constexpr DataLoadingConfig::DataLoadingConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : input_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , output_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , io_strategy_(nullptr)
  , enabled_(false)
  , format_(0)
{}
struct DataLoadingConfigDefaultTypeInternal {
  constexpr DataLoadingConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataLoadingConfigDefaultTypeInternal() {}
  union {
    DataLoadingConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataLoadingConfigDefaultTypeInternal _DataLoadingConfig_default_instance_;
constexpr K8sPod::K8sPod(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr)
  , pod_spec_(nullptr){}
struct K8sPodDefaultTypeInternal {
  constexpr K8sPodDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~K8sPodDefaultTypeInternal() {}
  union {
    K8sPod _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT K8sPodDefaultTypeInternal _K8sPod_default_instance_;
constexpr K8sObjectMetadata_LabelsEntry_DoNotUse::K8sObjectMetadata_LabelsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct K8sObjectMetadata_LabelsEntry_DoNotUseDefaultTypeInternal {
  constexpr K8sObjectMetadata_LabelsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~K8sObjectMetadata_LabelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    K8sObjectMetadata_LabelsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT K8sObjectMetadata_LabelsEntry_DoNotUseDefaultTypeInternal _K8sObjectMetadata_LabelsEntry_DoNotUse_default_instance_;
constexpr K8sObjectMetadata_AnnotationsEntry_DoNotUse::K8sObjectMetadata_AnnotationsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct K8sObjectMetadata_AnnotationsEntry_DoNotUseDefaultTypeInternal {
  constexpr K8sObjectMetadata_AnnotationsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~K8sObjectMetadata_AnnotationsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    K8sObjectMetadata_AnnotationsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT K8sObjectMetadata_AnnotationsEntry_DoNotUseDefaultTypeInternal _K8sObjectMetadata_AnnotationsEntry_DoNotUse_default_instance_;
constexpr K8sObjectMetadata::K8sObjectMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : labels_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , annotations_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct K8sObjectMetadataDefaultTypeInternal {
  constexpr K8sObjectMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~K8sObjectMetadataDefaultTypeInternal() {}
  union {
    K8sObjectMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT K8sObjectMetadataDefaultTypeInternal _K8sObjectMetadata_default_instance_;
constexpr Sql::Sql(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : statement_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dialect_(0)
{}
struct SqlDefaultTypeInternal {
  constexpr SqlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SqlDefaultTypeInternal() {}
  union {
    Sql _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SqlDefaultTypeInternal _Sql_default_instance_;
}  // namespace core
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fcore_2ftasks_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fcore_2ftasks_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fcore_2ftasks_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Resources_ResourceEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Resources_ResourceEntry, name_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Resources_ResourceEntry, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Resources, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Resources, requests_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Resources, limits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::RuntimeMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::RuntimeMetadata, type_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::RuntimeMetadata, version_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::RuntimeMetadata, flavor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskMetadata, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskMetadata, discoverable_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskMetadata, runtime_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskMetadata, timeout_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskMetadata, retries_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskMetadata, discovery_version_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskMetadata, deprecated_error_message_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskMetadata, cache_serializable_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskMetadata, interruptible_value_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate_ConfigEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate_ConfigEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate_ConfigEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate_ConfigEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate, type_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate, metadata_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate, interface_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate, custom_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate, task_type_version_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate, security_context_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate, config_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskTemplate, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ContainerPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ContainerPort, container_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Container, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Container, image_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Container, command_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Container, args_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Container, resources_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Container, env_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Container, config_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Container, ports_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Container, data_config_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Container, architecture_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::IOStrategy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::IOStrategy, download_mode_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::IOStrategy, upload_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::DataLoadingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::DataLoadingConfig, enabled_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::DataLoadingConfig, input_path_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::DataLoadingConfig, output_path_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::DataLoadingConfig, format_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::DataLoadingConfig, io_strategy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sPod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sPod, metadata_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sPod, pod_spec_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sObjectMetadata_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sObjectMetadata_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sObjectMetadata_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sObjectMetadata_LabelsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sObjectMetadata_AnnotationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sObjectMetadata_AnnotationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sObjectMetadata_AnnotationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sObjectMetadata_AnnotationsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sObjectMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sObjectMetadata, labels_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::K8sObjectMetadata, annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Sql, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Sql, statement_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Sql, dialect_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::core::Resources_ResourceEntry)},
  { 8, -1, -1, sizeof(::flyteidl::core::Resources)},
  { 16, -1, -1, sizeof(::flyteidl::core::RuntimeMetadata)},
  { 25, -1, -1, sizeof(::flyteidl::core::TaskMetadata)},
  { 40, 48, -1, sizeof(::flyteidl::core::TaskTemplate_ConfigEntry_DoNotUse)},
  { 50, -1, -1, sizeof(::flyteidl::core::TaskTemplate)},
  { 68, -1, -1, sizeof(::flyteidl::core::ContainerPort)},
  { 75, -1, -1, sizeof(::flyteidl::core::Container)},
  { 90, -1, -1, sizeof(::flyteidl::core::IOStrategy)},
  { 98, -1, -1, sizeof(::flyteidl::core::DataLoadingConfig)},
  { 109, -1, -1, sizeof(::flyteidl::core::K8sPod)},
  { 117, 125, -1, sizeof(::flyteidl::core::K8sObjectMetadata_LabelsEntry_DoNotUse)},
  { 127, 135, -1, sizeof(::flyteidl::core::K8sObjectMetadata_AnnotationsEntry_DoNotUse)},
  { 137, -1, -1, sizeof(::flyteidl::core::K8sObjectMetadata)},
  { 145, -1, -1, sizeof(::flyteidl::core::Sql)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_Resources_ResourceEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_Resources_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_RuntimeMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_TaskMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_TaskTemplate_ConfigEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_TaskTemplate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_ContainerPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_Container_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_IOStrategy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_DataLoadingConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_K8sPod_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_K8sObjectMetadata_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_K8sObjectMetadata_AnnotationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_K8sObjectMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_Sql_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fcore_2ftasks_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031flyteidl/core/tasks.proto\022\rflyteidl.co"
  "re\032\036flyteidl/core/identifier.proto\032\035flyt"
  "eidl/core/interface.proto\032\034flyteidl/core"
  "/literals.proto\032\034flyteidl/core/security."
  "proto\032\036google/protobuf/duration.proto\032\034g"
  "oogle/protobuf/struct.proto\"\320\002\n\tResource"
  "s\022B\n\010requests\030\001 \003(\0132&.flyteidl.core.Reso"
  "urces.ResourceEntryR\010requests\022>\n\006limits\030"
  "\002 \003(\0132&.flyteidl.core.Resources.Resource"
  "EntryR\006limits\032`\n\rResourceEntry\0229\n\004name\030\001"
  " \001(\0162%.flyteidl.core.Resources.ResourceN"
  "ameR\004name\022\024\n\005value\030\002 \001(\tR\005value\"]\n\014Resou"
  "rceName\022\013\n\007UNKNOWN\020\000\022\007\n\003CPU\020\001\022\007\n\003GPU\020\002\022\n"
  "\n\006MEMORY\020\003\022\013\n\007STORAGE\020\004\022\025\n\021EPHEMERAL_STO"
  "RAGE\020\005\"\254\001\n\017RuntimeMetadata\022>\n\004type\030\001 \001(\016"
  "2*.flyteidl.core.RuntimeMetadata.Runtime"
  "TypeR\004type\022\030\n\007version\030\002 \001(\tR\007version\022\026\n\006"
  "flavor\030\003 \001(\tR\006flavor\"\'\n\013RuntimeType\022\t\n\005O"
  "THER\020\000\022\r\n\tFLYTE_SDK\020\001\"\256\003\n\014TaskMetadata\022\""
  "\n\014discoverable\030\001 \001(\010R\014discoverable\0228\n\007ru"
  "ntime\030\002 \001(\0132\036.flyteidl.core.RuntimeMetad"
  "ataR\007runtime\0223\n\007timeout\030\004 \001(\0132\031.google.p"
  "rotobuf.DurationR\007timeout\0226\n\007retries\030\005 \001"
  "(\0132\034.flyteidl.core.RetryStrategyR\007retrie"
  "s\022+\n\021discovery_version\030\006 \001(\tR\020discoveryV"
  "ersion\0228\n\030deprecated_error_message\030\007 \001(\t"
  "R\026deprecatedErrorMessage\022&\n\rinterruptibl"
  "e\030\010 \001(\010H\000R\rinterruptible\022-\n\022cache_serial"
  "izable\030\t \001(\010R\021cacheSerializableB\025\n\023inter"
  "ruptible_value\"\205\005\n\014TaskTemplate\022)\n\002id\030\001 "
  "\001(\0132\031.flyteidl.core.IdentifierR\002id\022\022\n\004ty"
  "pe\030\002 \001(\tR\004type\0227\n\010metadata\030\003 \001(\0132\033.flyte"
  "idl.core.TaskMetadataR\010metadata\022;\n\tinter"
  "face\030\004 \001(\0132\035.flyteidl.core.TypedInterfac"
  "eR\tinterface\022/\n\006custom\030\005 \001(\0132\027.google.pr"
  "otobuf.StructR\006custom\0228\n\tcontainer\030\006 \001(\013"
  "2\030.flyteidl.core.ContainerH\000R\tcontainer\022"
  "0\n\007k8s_pod\030\021 \001(\0132\025.flyteidl.core.K8sPodH"
  "\000R\006k8sPod\022&\n\003sql\030\022 \001(\0132\022.flyteidl.core.S"
  "qlH\000R\003sql\022*\n\021task_type_version\030\007 \001(\005R\017ta"
  "skTypeVersion\022I\n\020security_context\030\010 \001(\0132"
  "\036.flyteidl.core.SecurityContextR\017securit"
  "yContext\022\?\n\006config\030\020 \003(\0132\'.flyteidl.core"
  ".TaskTemplate.ConfigEntryR\006config\0329\n\013Con"
  "figEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001("
  "\tR\005value:\0028\001B\010\n\006target\"6\n\rContainerPort\022"
  "%\n\016container_port\030\001 \001(\rR\rcontainerPort\"\374"
  "\003\n\tContainer\022\024\n\005image\030\001 \001(\tR\005image\022\030\n\007co"
  "mmand\030\002 \003(\tR\007command\022\022\n\004args\030\003 \003(\tR\004args"
  "\0226\n\tresources\030\004 \001(\0132\030.flyteidl.core.Reso"
  "urcesR\tresources\022-\n\003env\030\005 \003(\0132\033.flyteidl"
  ".core.KeyValuePairR\003env\0227\n\006config\030\006 \003(\0132"
  "\033.flyteidl.core.KeyValuePairB\002\030\001R\006config"
  "\0222\n\005ports\030\007 \003(\0132\034.flyteidl.core.Containe"
  "rPortR\005ports\022A\n\013data_config\030\t \001(\0132 .flyt"
  "eidl.core.DataLoadingConfigR\ndataConfig\022"
  "I\n\014architecture\030\n \001(\0162%.flyteidl.core.Co"
  "ntainer.ArchitectureR\014architecture\"I\n\014Ar"
  "chitecture\022\013\n\007UNKNOWN\020\000\022\t\n\005AMD64\020\001\022\t\n\005AR"
  "M64\020\002\022\n\n\006ARM_V6\020\003\022\n\n\006ARM_V7\020\004\"\265\002\n\nIOStra"
  "tegy\022K\n\rdownload_mode\030\001 \001(\0162&.flyteidl.c"
  "ore.IOStrategy.DownloadModeR\014downloadMod"
  "e\022E\n\013upload_mode\030\002 \001(\0162$.flyteidl.core.I"
  "OStrategy.UploadModeR\nuploadMode\"L\n\014Down"
  "loadMode\022\022\n\016DOWNLOAD_EAGER\020\000\022\023\n\017DOWNLOAD"
  "_STREAM\020\001\022\023\n\017DO_NOT_DOWNLOAD\020\002\"E\n\nUpload"
  "Mode\022\022\n\016UPLOAD_ON_EXIT\020\000\022\020\n\014UPLOAD_EAGER"
  "\020\001\022\021\n\rDO_NOT_UPLOAD\020\002\"\247\002\n\021DataLoadingCon"
  "fig\022\030\n\007enabled\030\001 \001(\010R\007enabled\022\035\n\ninput_p"
  "ath\030\002 \001(\tR\tinputPath\022\037\n\013output_path\030\003 \001("
  "\tR\noutputPath\022I\n\006format\030\004 \001(\01621.flyteidl"
  ".core.DataLoadingConfig.LiteralMapFormat"
  "R\006format\022:\n\013io_strategy\030\005 \001(\0132\031.flyteidl"
  ".core.IOStrategyR\nioStrategy\"1\n\020LiteralM"
  "apFormat\022\010\n\004JSON\020\000\022\010\n\004YAML\020\001\022\t\n\005PROTO\020\002\""
  "z\n\006K8sPod\022<\n\010metadata\030\001 \001(\0132 .flyteidl.c"
  "ore.K8sObjectMetadataR\010metadata\0222\n\010pod_s"
  "pec\030\002 \001(\0132\027.google.protobuf.StructR\007podS"
  "pec\"\251\002\n\021K8sObjectMetadata\022D\n\006labels\030\001 \003("
  "\0132,.flyteidl.core.K8sObjectMetadata.Labe"
  "lsEntryR\006labels\022S\n\013annotations\030\002 \003(\01321.f"
  "lyteidl.core.K8sObjectMetadata.Annotatio"
  "nsEntryR\013annotations\0329\n\013LabelsEntry\022\020\n\003k"
  "ey\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028\001\032"
  ">\n\020AnnotationsEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n"
  "\005value\030\002 \001(\tR\005value:\0028\001\"\222\001\n\003Sql\022\034\n\tstate"
  "ment\030\001 \001(\tR\tstatement\0224\n\007dialect\030\002 \001(\0162\032"
  ".flyteidl.core.Sql.DialectR\007dialect\"7\n\007D"
  "ialect\022\r\n\tUNDEFINED\020\000\022\010\n\004ANSI\020\001\022\010\n\004HIVE\020"
  "\002\022\t\n\005OTHER\020\003B\255\001\n\021com.flyteidl.coreB\nTask"
  "sProtoH\002Z4github.com/flyteorg/flyteidl/g"
  "en/pb-go/flyteidl/core\370\001\000\242\002\003FCX\252\002\rFlytei"
  "dl.Core\312\002\rFlyteidl\\Core\342\002\031Flyteidl\\Core\\"
  "GPBMetadata\352\002\016Flyteidl::Coreb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flyteidl_2fcore_2ftasks_2eproto_deps[6] = {
  &::descriptor_table_flyteidl_2fcore_2fidentifier_2eproto,
  &::descriptor_table_flyteidl_2fcore_2finterface_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fliterals_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fsecurity_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fcore_2ftasks_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fcore_2ftasks_2eproto = {
  false, false, 3756, descriptor_table_protodef_flyteidl_2fcore_2ftasks_2eproto, "flyteidl/core/tasks.proto", 
  &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_once, descriptor_table_flyteidl_2fcore_2ftasks_2eproto_deps, 6, 15,
  schemas, file_default_instances, TableStruct_flyteidl_2fcore_2ftasks_2eproto::offsets,
  file_level_metadata_flyteidl_2fcore_2ftasks_2eproto, file_level_enum_descriptors_flyteidl_2fcore_2ftasks_2eproto, file_level_service_descriptors_flyteidl_2fcore_2ftasks_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fcore_2ftasks_2eproto_getter() {
  return &descriptor_table_flyteidl_2fcore_2ftasks_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fcore_2ftasks_2eproto(&descriptor_table_flyteidl_2fcore_2ftasks_2eproto);
namespace flyteidl {
namespace core {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Resources_ResourceName_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fcore_2ftasks_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2ftasks_2eproto[0];
}
bool Resources_ResourceName_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Resources_ResourceName Resources::UNKNOWN;
constexpr Resources_ResourceName Resources::CPU;
constexpr Resources_ResourceName Resources::GPU;
constexpr Resources_ResourceName Resources::MEMORY;
constexpr Resources_ResourceName Resources::STORAGE;
constexpr Resources_ResourceName Resources::EPHEMERAL_STORAGE;
constexpr Resources_ResourceName Resources::ResourceName_MIN;
constexpr Resources_ResourceName Resources::ResourceName_MAX;
constexpr int Resources::ResourceName_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RuntimeMetadata_RuntimeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fcore_2ftasks_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2ftasks_2eproto[1];
}
bool RuntimeMetadata_RuntimeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RuntimeMetadata_RuntimeType RuntimeMetadata::OTHER;
constexpr RuntimeMetadata_RuntimeType RuntimeMetadata::FLYTE_SDK;
constexpr RuntimeMetadata_RuntimeType RuntimeMetadata::RuntimeType_MIN;
constexpr RuntimeMetadata_RuntimeType RuntimeMetadata::RuntimeType_MAX;
constexpr int RuntimeMetadata::RuntimeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Container_Architecture_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fcore_2ftasks_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2ftasks_2eproto[2];
}
bool Container_Architecture_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Container_Architecture Container::UNKNOWN;
constexpr Container_Architecture Container::AMD64;
constexpr Container_Architecture Container::ARM64;
constexpr Container_Architecture Container::ARM_V6;
constexpr Container_Architecture Container::ARM_V7;
constexpr Container_Architecture Container::Architecture_MIN;
constexpr Container_Architecture Container::Architecture_MAX;
constexpr int Container::Architecture_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IOStrategy_DownloadMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fcore_2ftasks_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2ftasks_2eproto[3];
}
bool IOStrategy_DownloadMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr IOStrategy_DownloadMode IOStrategy::DOWNLOAD_EAGER;
constexpr IOStrategy_DownloadMode IOStrategy::DOWNLOAD_STREAM;
constexpr IOStrategy_DownloadMode IOStrategy::DO_NOT_DOWNLOAD;
constexpr IOStrategy_DownloadMode IOStrategy::DownloadMode_MIN;
constexpr IOStrategy_DownloadMode IOStrategy::DownloadMode_MAX;
constexpr int IOStrategy::DownloadMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IOStrategy_UploadMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fcore_2ftasks_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2ftasks_2eproto[4];
}
bool IOStrategy_UploadMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr IOStrategy_UploadMode IOStrategy::UPLOAD_ON_EXIT;
constexpr IOStrategy_UploadMode IOStrategy::UPLOAD_EAGER;
constexpr IOStrategy_UploadMode IOStrategy::DO_NOT_UPLOAD;
constexpr IOStrategy_UploadMode IOStrategy::UploadMode_MIN;
constexpr IOStrategy_UploadMode IOStrategy::UploadMode_MAX;
constexpr int IOStrategy::UploadMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataLoadingConfig_LiteralMapFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fcore_2ftasks_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2ftasks_2eproto[5];
}
bool DataLoadingConfig_LiteralMapFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DataLoadingConfig_LiteralMapFormat DataLoadingConfig::JSON;
constexpr DataLoadingConfig_LiteralMapFormat DataLoadingConfig::YAML;
constexpr DataLoadingConfig_LiteralMapFormat DataLoadingConfig::PROTO;
constexpr DataLoadingConfig_LiteralMapFormat DataLoadingConfig::LiteralMapFormat_MIN;
constexpr DataLoadingConfig_LiteralMapFormat DataLoadingConfig::LiteralMapFormat_MAX;
constexpr int DataLoadingConfig::LiteralMapFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Sql_Dialect_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fcore_2ftasks_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2ftasks_2eproto[6];
}
bool Sql_Dialect_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Sql_Dialect Sql::UNDEFINED;
constexpr Sql_Dialect Sql::ANSI;
constexpr Sql_Dialect Sql::HIVE;
constexpr Sql_Dialect Sql::OTHER;
constexpr Sql_Dialect Sql::Dialect_MIN;
constexpr Sql_Dialect Sql::Dialect_MAX;
constexpr int Sql::Dialect_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Resources_ResourceEntry::_Internal {
 public:
};

Resources_ResourceEntry::Resources_ResourceEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.Resources.ResourceEntry)
}
Resources_ResourceEntry::Resources_ResourceEntry(const Resources_ResourceEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  name_ = from.name_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Resources.ResourceEntry)
}

inline void Resources_ResourceEntry::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_ = 0;
}

Resources_ResourceEntry::~Resources_ResourceEntry() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Resources.ResourceEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Resources_ResourceEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Resources_ResourceEntry::ArenaDtor(void* object) {
  Resources_ResourceEntry* _this = reinterpret_cast< Resources_ResourceEntry* >(object);
  (void)_this;
}
void Resources_ResourceEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Resources_ResourceEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Resources_ResourceEntry::InternalSwap(Resources_ResourceEntry* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Resources_ResourceEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[0]);
}

// ===================================================================

class Resources::_Internal {
 public:
};

Resources::Resources(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  requests_(arena),
  limits_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.Resources)
}
Resources::Resources(const Resources& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_),
      limits_(from.limits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Resources)
}

inline void Resources::SharedCtor() {
}

Resources::~Resources() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Resources)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Resources::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Resources::ArenaDtor(void* object) {
  Resources* _this = reinterpret_cast< Resources* >(object);
  (void)_this;
}
void Resources::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Resources::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Resources::InternalSwap(Resources* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Resources::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[1]);
}

// ===================================================================

class RuntimeMetadata::_Internal {
 public:
};

RuntimeMetadata::RuntimeMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.RuntimeMetadata)
}
RuntimeMetadata::RuntimeMetadata(const RuntimeMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  flavor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    flavor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flavor().empty()) {
    flavor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flavor(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.RuntimeMetadata)
}

inline void RuntimeMetadata::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
flavor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  flavor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

RuntimeMetadata::~RuntimeMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.core.RuntimeMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RuntimeMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flavor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RuntimeMetadata::ArenaDtor(void* object) {
  RuntimeMetadata* _this = reinterpret_cast< RuntimeMetadata* >(object);
  (void)_this;
}
void RuntimeMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuntimeMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RuntimeMetadata::InternalSwap(RuntimeMetadata* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata RuntimeMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[2]);
}

// ===================================================================

class TaskMetadata::_Internal {
 public:
  static const ::flyteidl::core::RuntimeMetadata& runtime(const TaskMetadata* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& timeout(const TaskMetadata* msg);
  static const ::flyteidl::core::RetryStrategy& retries(const TaskMetadata* msg);
};

const ::flyteidl::core::RuntimeMetadata&
TaskMetadata::_Internal::runtime(const TaskMetadata* msg) {
  return *msg->runtime_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
TaskMetadata::_Internal::timeout(const TaskMetadata* msg) {
  return *msg->timeout_;
}
const ::flyteidl::core::RetryStrategy&
TaskMetadata::_Internal::retries(const TaskMetadata* msg) {
  return *msg->retries_;
}
void TaskMetadata::clear_timeout() {
  if (GetArenaForAllocation() == nullptr && timeout_ != nullptr) {
    delete timeout_;
  }
  timeout_ = nullptr;
}
void TaskMetadata::clear_retries() {
  if (GetArenaForAllocation() == nullptr && retries_ != nullptr) {
    delete retries_;
  }
  retries_ = nullptr;
}
TaskMetadata::TaskMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.TaskMetadata)
}
TaskMetadata::TaskMetadata(const TaskMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  discovery_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    discovery_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_discovery_version().empty()) {
    discovery_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_discovery_version(), 
      GetArenaForAllocation());
  }
  deprecated_error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    deprecated_error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deprecated_error_message().empty()) {
    deprecated_error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deprecated_error_message(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_runtime()) {
    runtime_ = new ::flyteidl::core::RuntimeMetadata(*from.runtime_);
  } else {
    runtime_ = nullptr;
  }
  if (from._internal_has_timeout()) {
    timeout_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.timeout_);
  } else {
    timeout_ = nullptr;
  }
  if (from._internal_has_retries()) {
    retries_ = new ::flyteidl::core::RetryStrategy(*from.retries_);
  } else {
    retries_ = nullptr;
  }
  ::memcpy(&discoverable_, &from.discoverable_,
    static_cast<size_t>(reinterpret_cast<char*>(&cache_serializable_) -
    reinterpret_cast<char*>(&discoverable_)) + sizeof(cache_serializable_));
  clear_has_interruptible_value();
  switch (from.interruptible_value_case()) {
    case kInterruptible: {
      _internal_set_interruptible(from._internal_interruptible());
      break;
    }
    case INTERRUPTIBLE_VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.TaskMetadata)
}

inline void TaskMetadata::SharedCtor() {
discovery_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  discovery_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
deprecated_error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  deprecated_error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&runtime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cache_serializable_) -
    reinterpret_cast<char*>(&runtime_)) + sizeof(cache_serializable_));
clear_has_interruptible_value();
}

TaskMetadata::~TaskMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.core.TaskMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  discovery_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deprecated_error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete runtime_;
  if (this != internal_default_instance()) delete timeout_;
  if (this != internal_default_instance()) delete retries_;
  if (has_interruptible_value()) {
    clear_interruptible_value();
  }
}

void TaskMetadata::ArenaDtor(void* object) {
  TaskMetadata* _this = reinterpret_cast< TaskMetadata* >(object);
  (void)_this;
}
void TaskMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskMetadata::clear_interruptible_value() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.TaskMetadata)
  switch (interruptible_value_case()) {
    case kInterruptible: {
      // No need to clear
      break;
    }
    case INTERRUPTIBLE_VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INTERRUPTIBLE_VALUE_NOT_SET;
}


void TaskMetadata::InternalSwap(TaskMetadata* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata TaskMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[3]);
}

// ===================================================================

TaskTemplate_ConfigEntry_DoNotUse::TaskTemplate_ConfigEntry_DoNotUse() {}
TaskTemplate_ConfigEntry_DoNotUse::TaskTemplate_ConfigEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TaskTemplate_ConfigEntry_DoNotUse::MergeFrom(const TaskTemplate_ConfigEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TaskTemplate_ConfigEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[4]);
}

// ===================================================================

class TaskTemplate::_Internal {
 public:
  static const ::flyteidl::core::Identifier& id(const TaskTemplate* msg);
  static const ::flyteidl::core::TaskMetadata& metadata(const TaskTemplate* msg);
  static const ::flyteidl::core::TypedInterface& interface(const TaskTemplate* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& custom(const TaskTemplate* msg);
  static const ::flyteidl::core::Container& container(const TaskTemplate* msg);
  static const ::flyteidl::core::K8sPod& k8s_pod(const TaskTemplate* msg);
  static const ::flyteidl::core::Sql& sql(const TaskTemplate* msg);
  static const ::flyteidl::core::SecurityContext& security_context(const TaskTemplate* msg);
};

const ::flyteidl::core::Identifier&
TaskTemplate::_Internal::id(const TaskTemplate* msg) {
  return *msg->id_;
}
const ::flyteidl::core::TaskMetadata&
TaskTemplate::_Internal::metadata(const TaskTemplate* msg) {
  return *msg->metadata_;
}
const ::flyteidl::core::TypedInterface&
TaskTemplate::_Internal::interface(const TaskTemplate* msg) {
  return *msg->interface_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
TaskTemplate::_Internal::custom(const TaskTemplate* msg) {
  return *msg->custom_;
}
const ::flyteidl::core::Container&
TaskTemplate::_Internal::container(const TaskTemplate* msg) {
  return *msg->target_.container_;
}
const ::flyteidl::core::K8sPod&
TaskTemplate::_Internal::k8s_pod(const TaskTemplate* msg) {
  return *msg->target_.k8s_pod_;
}
const ::flyteidl::core::Sql&
TaskTemplate::_Internal::sql(const TaskTemplate* msg) {
  return *msg->target_.sql_;
}
const ::flyteidl::core::SecurityContext&
TaskTemplate::_Internal::security_context(const TaskTemplate* msg) {
  return *msg->security_context_;
}
void TaskTemplate::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void TaskTemplate::clear_interface() {
  if (GetArenaForAllocation() == nullptr && interface_ != nullptr) {
    delete interface_;
  }
  interface_ = nullptr;
}
void TaskTemplate::clear_custom() {
  if (GetArenaForAllocation() == nullptr && custom_ != nullptr) {
    delete custom_;
  }
  custom_ = nullptr;
}
void TaskTemplate::set_allocated_container(::flyteidl::core::Container* container) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target();
  if (container) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::Container>::GetOwningArena(container);
    if (message_arena != submessage_arena) {
      container = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, container, submessage_arena);
    }
    set_has_container();
    target_.container_ = container;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.TaskTemplate.container)
}
void TaskTemplate::set_allocated_k8s_pod(::flyteidl::core::K8sPod* k8s_pod) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target();
  if (k8s_pod) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::K8sPod>::GetOwningArena(k8s_pod);
    if (message_arena != submessage_arena) {
      k8s_pod = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, k8s_pod, submessage_arena);
    }
    set_has_k8s_pod();
    target_.k8s_pod_ = k8s_pod;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.TaskTemplate.k8s_pod)
}
void TaskTemplate::set_allocated_sql(::flyteidl::core::Sql* sql) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target();
  if (sql) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::Sql>::GetOwningArena(sql);
    if (message_arena != submessage_arena) {
      sql = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sql, submessage_arena);
    }
    set_has_sql();
    target_.sql_ = sql;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.TaskTemplate.sql)
}
void TaskTemplate::clear_security_context() {
  if (GetArenaForAllocation() == nullptr && security_context_ != nullptr) {
    delete security_context_;
  }
  security_context_ = nullptr;
}
TaskTemplate::TaskTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  config_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.TaskTemplate)
}
TaskTemplate::TaskTemplate(const TaskTemplate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  config_.MergeFrom(from.config_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::flyteidl::core::TaskMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_interface()) {
    interface_ = new ::flyteidl::core::TypedInterface(*from.interface_);
  } else {
    interface_ = nullptr;
  }
  if (from._internal_has_custom()) {
    custom_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.custom_);
  } else {
    custom_ = nullptr;
  }
  if (from._internal_has_security_context()) {
    security_context_ = new ::flyteidl::core::SecurityContext(*from.security_context_);
  } else {
    security_context_ = nullptr;
  }
  task_type_version_ = from.task_type_version_;
  clear_has_target();
  switch (from.target_case()) {
    case kContainer: {
      _internal_mutable_container()->::flyteidl::core::Container::MergeFrom(from._internal_container());
      break;
    }
    case kK8SPod: {
      _internal_mutable_k8s_pod()->::flyteidl::core::K8sPod::MergeFrom(from._internal_k8s_pod());
      break;
    }
    case kSql: {
      _internal_mutable_sql()->::flyteidl::core::Sql::MergeFrom(from._internal_sql());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.TaskTemplate)
}

inline void TaskTemplate::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&task_type_version_) -
    reinterpret_cast<char*>(&id_)) + sizeof(task_type_version_));
clear_has_target();
}

TaskTemplate::~TaskTemplate() {
  // @@protoc_insertion_point(destructor:flyteidl.core.TaskTemplate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskTemplate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete interface_;
  if (this != internal_default_instance()) delete custom_;
  if (this != internal_default_instance()) delete security_context_;
  if (has_target()) {
    clear_target();
  }
}

void TaskTemplate::ArenaDtor(void* object) {
  TaskTemplate* _this = reinterpret_cast< TaskTemplate* >(object);
  (void)_this;
  _this->config_. ~MapField();
}
inline void TaskTemplate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &TaskTemplate::ArenaDtor);
  }
}
void TaskTemplate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskTemplate::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.TaskTemplate)
  switch (target_case()) {
    case kContainer: {
      if (GetArenaForAllocation() == nullptr) {
        delete target_.container_;
      }
      break;
    }
    case kK8SPod: {
      if (GetArenaForAllocation() == nullptr) {
        delete target_.k8s_pod_;
      }
      break;
    }
    case kSql: {
      if (GetArenaForAllocation() == nullptr) {
        delete target_.sql_;
      }
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void TaskTemplate::InternalSwap(TaskTemplate* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata TaskTemplate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[5]);
}

// ===================================================================

class ContainerPort::_Internal {
 public:
};

ContainerPort::ContainerPort(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.ContainerPort)
}
ContainerPort::ContainerPort(const ContainerPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  container_port_ = from.container_port_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.ContainerPort)
}

inline void ContainerPort::SharedCtor() {
container_port_ = 0u;
}

ContainerPort::~ContainerPort() {
  // @@protoc_insertion_point(destructor:flyteidl.core.ContainerPort)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ContainerPort::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ContainerPort::ArenaDtor(void* object) {
  ContainerPort* _this = reinterpret_cast< ContainerPort* >(object);
  (void)_this;
}
void ContainerPort::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContainerPort::InternalSwap(ContainerPort* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerPort::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[6]);
}

// ===================================================================

class Container::_Internal {
 public:
  static const ::flyteidl::core::Resources& resources(const Container* msg);
  static const ::flyteidl::core::DataLoadingConfig& data_config(const Container* msg);
};

const ::flyteidl::core::Resources&
Container::_Internal::resources(const Container* msg) {
  return *msg->resources_;
}
const ::flyteidl::core::DataLoadingConfig&
Container::_Internal::data_config(const Container* msg) {
  return *msg->data_config_;
}
void Container::clear_env() {
  env_.Clear();
}
void Container::clear_config() {
  config_.Clear();
}
Container::Container(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  command_(arena),
  args_(arena),
  env_(arena),
  config_(arena),
  ports_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.Container)
}
Container::Container(const Container& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      command_(from.command_),
      args_(from.args_),
      env_(from.env_),
      config_(from.config_),
      ports_(from.ports_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image().empty()) {
    image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_resources()) {
    resources_ = new ::flyteidl::core::Resources(*from.resources_);
  } else {
    resources_ = nullptr;
  }
  if (from._internal_has_data_config()) {
    data_config_ = new ::flyteidl::core::DataLoadingConfig(*from.data_config_);
  } else {
    data_config_ = nullptr;
  }
  architecture_ = from.architecture_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Container)
}

inline void Container::SharedCtor() {
image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&resources_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&architecture_) -
    reinterpret_cast<char*>(&resources_)) + sizeof(architecture_));
}

Container::~Container() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Container)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Container::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete resources_;
  if (this != internal_default_instance()) delete data_config_;
}

void Container::ArenaDtor(void* object) {
  Container* _this = reinterpret_cast< Container* >(object);
  (void)_this;
}
void Container::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Container::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Container::InternalSwap(Container* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Container::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[7]);
}

// ===================================================================

class IOStrategy::_Internal {
 public:
};

IOStrategy::IOStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.IOStrategy)
}
IOStrategy::IOStrategy(const IOStrategy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&download_mode_, &from.download_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&upload_mode_) -
    reinterpret_cast<char*>(&download_mode_)) + sizeof(upload_mode_));
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.IOStrategy)
}

inline void IOStrategy::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&download_mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&upload_mode_) -
    reinterpret_cast<char*>(&download_mode_)) + sizeof(upload_mode_));
}

IOStrategy::~IOStrategy() {
  // @@protoc_insertion_point(destructor:flyteidl.core.IOStrategy)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IOStrategy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IOStrategy::ArenaDtor(void* object) {
  IOStrategy* _this = reinterpret_cast< IOStrategy* >(object);
  (void)_this;
}
void IOStrategy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IOStrategy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IOStrategy::InternalSwap(IOStrategy* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata IOStrategy::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[8]);
}

// ===================================================================

class DataLoadingConfig::_Internal {
 public:
  static const ::flyteidl::core::IOStrategy& io_strategy(const DataLoadingConfig* msg);
};

const ::flyteidl::core::IOStrategy&
DataLoadingConfig::_Internal::io_strategy(const DataLoadingConfig* msg) {
  return *msg->io_strategy_;
}
DataLoadingConfig::DataLoadingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.DataLoadingConfig)
}
DataLoadingConfig::DataLoadingConfig(const DataLoadingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  input_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    input_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_input_path().empty()) {
    input_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_input_path(), 
      GetArenaForAllocation());
  }
  output_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    output_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_output_path().empty()) {
    output_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_output_path(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_io_strategy()) {
    io_strategy_ = new ::flyteidl::core::IOStrategy(*from.io_strategy_);
  } else {
    io_strategy_ = nullptr;
  }
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(format_));
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.DataLoadingConfig)
}

inline void DataLoadingConfig::SharedCtor() {
input_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  input_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
output_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  output_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&io_strategy_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&io_strategy_)) + sizeof(format_));
}

DataLoadingConfig::~DataLoadingConfig() {
  // @@protoc_insertion_point(destructor:flyteidl.core.DataLoadingConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataLoadingConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  input_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete io_strategy_;
}

void DataLoadingConfig::ArenaDtor(void* object) {
  DataLoadingConfig* _this = reinterpret_cast< DataLoadingConfig* >(object);
  (void)_this;
}
void DataLoadingConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataLoadingConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataLoadingConfig::InternalSwap(DataLoadingConfig* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata DataLoadingConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[9]);
}

// ===================================================================

class K8sPod::_Internal {
 public:
  static const ::flyteidl::core::K8sObjectMetadata& metadata(const K8sPod* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& pod_spec(const K8sPod* msg);
};

const ::flyteidl::core::K8sObjectMetadata&
K8sPod::_Internal::metadata(const K8sPod* msg) {
  return *msg->metadata_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
K8sPod::_Internal::pod_spec(const K8sPod* msg) {
  return *msg->pod_spec_;
}
void K8sPod::clear_pod_spec() {
  if (GetArenaForAllocation() == nullptr && pod_spec_ != nullptr) {
    delete pod_spec_;
  }
  pod_spec_ = nullptr;
}
K8sPod::K8sPod(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.K8sPod)
}
K8sPod::K8sPod(const K8sPod& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::flyteidl::core::K8sObjectMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_pod_spec()) {
    pod_spec_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.pod_spec_);
  } else {
    pod_spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.K8sPod)
}

inline void K8sPod::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pod_spec_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(pod_spec_));
}

K8sPod::~K8sPod() {
  // @@protoc_insertion_point(destructor:flyteidl.core.K8sPod)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void K8sPod::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete pod_spec_;
}

void K8sPod::ArenaDtor(void* object) {
  K8sPod* _this = reinterpret_cast< K8sPod* >(object);
  (void)_this;
}
void K8sPod::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void K8sPod::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void K8sPod::InternalSwap(K8sPod* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata K8sPod::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[10]);
}

// ===================================================================

K8sObjectMetadata_LabelsEntry_DoNotUse::K8sObjectMetadata_LabelsEntry_DoNotUse() {}
K8sObjectMetadata_LabelsEntry_DoNotUse::K8sObjectMetadata_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void K8sObjectMetadata_LabelsEntry_DoNotUse::MergeFrom(const K8sObjectMetadata_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata K8sObjectMetadata_LabelsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[11]);
}

// ===================================================================

K8sObjectMetadata_AnnotationsEntry_DoNotUse::K8sObjectMetadata_AnnotationsEntry_DoNotUse() {}
K8sObjectMetadata_AnnotationsEntry_DoNotUse::K8sObjectMetadata_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void K8sObjectMetadata_AnnotationsEntry_DoNotUse::MergeFrom(const K8sObjectMetadata_AnnotationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata K8sObjectMetadata_AnnotationsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[12]);
}

// ===================================================================

class K8sObjectMetadata::_Internal {
 public:
};

K8sObjectMetadata::K8sObjectMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  labels_(arena),
  annotations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.K8sObjectMetadata)
}
K8sObjectMetadata::K8sObjectMetadata(const K8sObjectMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  annotations_.MergeFrom(from.annotations_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.K8sObjectMetadata)
}

inline void K8sObjectMetadata::SharedCtor() {
}

K8sObjectMetadata::~K8sObjectMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.core.K8sObjectMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void K8sObjectMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void K8sObjectMetadata::ArenaDtor(void* object) {
  K8sObjectMetadata* _this = reinterpret_cast< K8sObjectMetadata* >(object);
  (void)_this;
  _this->labels_. ~MapField();
  _this->annotations_. ~MapField();
}
inline void K8sObjectMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &K8sObjectMetadata::ArenaDtor);
  }
}
void K8sObjectMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void K8sObjectMetadata::InternalSwap(K8sObjectMetadata* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata K8sObjectMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[13]);
}

// ===================================================================

class Sql::_Internal {
 public:
};

Sql::Sql(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.Sql)
}
Sql::Sql(const Sql& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  statement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    statement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_statement().empty()) {
    statement_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_statement(), 
      GetArenaForAllocation());
  }
  dialect_ = from.dialect_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Sql)
}

inline void Sql::SharedCtor() {
statement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  statement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dialect_ = 0;
}

Sql::~Sql() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Sql)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Sql::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  statement_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Sql::ArenaDtor(void* object) {
  Sql* _this = reinterpret_cast< Sql* >(object);
  (void)_this;
}
void Sql::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Sql::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Sql::InternalSwap(Sql* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Sql::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_getter, &descriptor_table_flyteidl_2fcore_2ftasks_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2ftasks_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::core::Resources_ResourceEntry* Arena::CreateMaybeMessage< ::flyteidl::core::Resources_ResourceEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::Resources_ResourceEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::Resources* Arena::CreateMaybeMessage< ::flyteidl::core::Resources >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::Resources >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::RuntimeMetadata* Arena::CreateMaybeMessage< ::flyteidl::core::RuntimeMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::RuntimeMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::TaskMetadata* Arena::CreateMaybeMessage< ::flyteidl::core::TaskMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::TaskMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::TaskTemplate_ConfigEntry_DoNotUse* Arena::CreateMaybeMessage< ::flyteidl::core::TaskTemplate_ConfigEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::TaskTemplate_ConfigEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::TaskTemplate* Arena::CreateMaybeMessage< ::flyteidl::core::TaskTemplate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::TaskTemplate >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::ContainerPort* Arena::CreateMaybeMessage< ::flyteidl::core::ContainerPort >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::ContainerPort >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::Container* Arena::CreateMaybeMessage< ::flyteidl::core::Container >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::Container >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::IOStrategy* Arena::CreateMaybeMessage< ::flyteidl::core::IOStrategy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::IOStrategy >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::DataLoadingConfig* Arena::CreateMaybeMessage< ::flyteidl::core::DataLoadingConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::DataLoadingConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::K8sPod* Arena::CreateMaybeMessage< ::flyteidl::core::K8sPod >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::K8sPod >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::K8sObjectMetadata_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::flyteidl::core::K8sObjectMetadata_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::K8sObjectMetadata_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::K8sObjectMetadata_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage< ::flyteidl::core::K8sObjectMetadata_AnnotationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::K8sObjectMetadata_AnnotationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::K8sObjectMetadata* Arena::CreateMaybeMessage< ::flyteidl::core::K8sObjectMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::K8sObjectMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::Sql* Arena::CreateMaybeMessage< ::flyteidl::core::Sql >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::Sql >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
