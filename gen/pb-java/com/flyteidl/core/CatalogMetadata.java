// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/catalog.proto

package com.flyteidl.core;

/**
 * <pre>
 * Catalog artifact information with specific metadata
 * </pre>
 *
 * Protobuf type {@code flyteidl.core.CatalogMetadata}
 */
public final class CatalogMetadata extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:flyteidl.core.CatalogMetadata)
    CatalogMetadataOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CatalogMetadata.newBuilder() to construct.
  private CatalogMetadata(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CatalogMetadata() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new CatalogMetadata();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private CatalogMetadata(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.flyteidl.core.Identifier.Builder subBuilder = null;
            if (datasetId_ != null) {
              subBuilder = datasetId_.toBuilder();
            }
            datasetId_ = input.readMessage(com.flyteidl.core.Identifier.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(datasetId_);
              datasetId_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            com.flyteidl.core.CatalogArtifactTag.Builder subBuilder = null;
            if (artifactTag_ != null) {
              subBuilder = artifactTag_.toBuilder();
            }
            artifactTag_ = input.readMessage(com.flyteidl.core.CatalogArtifactTag.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(artifactTag_);
              artifactTag_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            com.flyteidl.core.TaskExecutionIdentifier.Builder subBuilder = null;
            if (sourceExecutionCase_ == 3) {
              subBuilder = ((com.flyteidl.core.TaskExecutionIdentifier) sourceExecution_).toBuilder();
            }
            sourceExecution_ =
                input.readMessage(com.flyteidl.core.TaskExecutionIdentifier.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.flyteidl.core.TaskExecutionIdentifier) sourceExecution_);
              sourceExecution_ = subBuilder.buildPartial();
            }
            sourceExecutionCase_ = 3;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.flyteidl.core.CatalogProto.internal_static_flyteidl_core_CatalogMetadata_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.flyteidl.core.CatalogProto.internal_static_flyteidl_core_CatalogMetadata_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.flyteidl.core.CatalogMetadata.class, com.flyteidl.core.CatalogMetadata.Builder.class);
  }

  private int sourceExecutionCase_ = 0;
  private java.lang.Object sourceExecution_;
  public enum SourceExecutionCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    SOURCE_TASK_EXECUTION(3),
    SOURCEEXECUTION_NOT_SET(0);
    private final int value;
    private SourceExecutionCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SourceExecutionCase valueOf(int value) {
      return forNumber(value);
    }

    public static SourceExecutionCase forNumber(int value) {
      switch (value) {
        case 3: return SOURCE_TASK_EXECUTION;
        case 0: return SOURCEEXECUTION_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public SourceExecutionCase
  getSourceExecutionCase() {
    return SourceExecutionCase.forNumber(
        sourceExecutionCase_);
  }

  public static final int DATASET_ID_FIELD_NUMBER = 1;
  private com.flyteidl.core.Identifier datasetId_;
  /**
   * <pre>
   * Dataset ID in the catalog
   * </pre>
   *
   * <code>.flyteidl.core.Identifier dataset_id = 1 [json_name = "datasetId"];</code>
   * @return Whether the datasetId field is set.
   */
  @java.lang.Override
  public boolean hasDatasetId() {
    return datasetId_ != null;
  }
  /**
   * <pre>
   * Dataset ID in the catalog
   * </pre>
   *
   * <code>.flyteidl.core.Identifier dataset_id = 1 [json_name = "datasetId"];</code>
   * @return The datasetId.
   */
  @java.lang.Override
  public com.flyteidl.core.Identifier getDatasetId() {
    return datasetId_ == null ? com.flyteidl.core.Identifier.getDefaultInstance() : datasetId_;
  }
  /**
   * <pre>
   * Dataset ID in the catalog
   * </pre>
   *
   * <code>.flyteidl.core.Identifier dataset_id = 1 [json_name = "datasetId"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.IdentifierOrBuilder getDatasetIdOrBuilder() {
    return getDatasetId();
  }

  public static final int ARTIFACT_TAG_FIELD_NUMBER = 2;
  private com.flyteidl.core.CatalogArtifactTag artifactTag_;
  /**
   * <pre>
   * Artifact tag in the catalog
   * </pre>
   *
   * <code>.flyteidl.core.CatalogArtifactTag artifact_tag = 2 [json_name = "artifactTag"];</code>
   * @return Whether the artifactTag field is set.
   */
  @java.lang.Override
  public boolean hasArtifactTag() {
    return artifactTag_ != null;
  }
  /**
   * <pre>
   * Artifact tag in the catalog
   * </pre>
   *
   * <code>.flyteidl.core.CatalogArtifactTag artifact_tag = 2 [json_name = "artifactTag"];</code>
   * @return The artifactTag.
   */
  @java.lang.Override
  public com.flyteidl.core.CatalogArtifactTag getArtifactTag() {
    return artifactTag_ == null ? com.flyteidl.core.CatalogArtifactTag.getDefaultInstance() : artifactTag_;
  }
  /**
   * <pre>
   * Artifact tag in the catalog
   * </pre>
   *
   * <code>.flyteidl.core.CatalogArtifactTag artifact_tag = 2 [json_name = "artifactTag"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.CatalogArtifactTagOrBuilder getArtifactTagOrBuilder() {
    return getArtifactTag();
  }

  public static final int SOURCE_TASK_EXECUTION_FIELD_NUMBER = 3;
  /**
   * <pre>
   * Today we only support TaskExecutionIdentifier as a source, as catalog caching only works for task executions
   * </pre>
   *
   * <code>.flyteidl.core.TaskExecutionIdentifier source_task_execution = 3 [json_name = "sourceTaskExecution"];</code>
   * @return Whether the sourceTaskExecution field is set.
   */
  @java.lang.Override
  public boolean hasSourceTaskExecution() {
    return sourceExecutionCase_ == 3;
  }
  /**
   * <pre>
   * Today we only support TaskExecutionIdentifier as a source, as catalog caching only works for task executions
   * </pre>
   *
   * <code>.flyteidl.core.TaskExecutionIdentifier source_task_execution = 3 [json_name = "sourceTaskExecution"];</code>
   * @return The sourceTaskExecution.
   */
  @java.lang.Override
  public com.flyteidl.core.TaskExecutionIdentifier getSourceTaskExecution() {
    if (sourceExecutionCase_ == 3) {
       return (com.flyteidl.core.TaskExecutionIdentifier) sourceExecution_;
    }
    return com.flyteidl.core.TaskExecutionIdentifier.getDefaultInstance();
  }
  /**
   * <pre>
   * Today we only support TaskExecutionIdentifier as a source, as catalog caching only works for task executions
   * </pre>
   *
   * <code>.flyteidl.core.TaskExecutionIdentifier source_task_execution = 3 [json_name = "sourceTaskExecution"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.TaskExecutionIdentifierOrBuilder getSourceTaskExecutionOrBuilder() {
    if (sourceExecutionCase_ == 3) {
       return (com.flyteidl.core.TaskExecutionIdentifier) sourceExecution_;
    }
    return com.flyteidl.core.TaskExecutionIdentifier.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (datasetId_ != null) {
      output.writeMessage(1, getDatasetId());
    }
    if (artifactTag_ != null) {
      output.writeMessage(2, getArtifactTag());
    }
    if (sourceExecutionCase_ == 3) {
      output.writeMessage(3, (com.flyteidl.core.TaskExecutionIdentifier) sourceExecution_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (datasetId_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getDatasetId());
    }
    if (artifactTag_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getArtifactTag());
    }
    if (sourceExecutionCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (com.flyteidl.core.TaskExecutionIdentifier) sourceExecution_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.flyteidl.core.CatalogMetadata)) {
      return super.equals(obj);
    }
    com.flyteidl.core.CatalogMetadata other = (com.flyteidl.core.CatalogMetadata) obj;

    if (hasDatasetId() != other.hasDatasetId()) return false;
    if (hasDatasetId()) {
      if (!getDatasetId()
          .equals(other.getDatasetId())) return false;
    }
    if (hasArtifactTag() != other.hasArtifactTag()) return false;
    if (hasArtifactTag()) {
      if (!getArtifactTag()
          .equals(other.getArtifactTag())) return false;
    }
    if (!getSourceExecutionCase().equals(other.getSourceExecutionCase())) return false;
    switch (sourceExecutionCase_) {
      case 3:
        if (!getSourceTaskExecution()
            .equals(other.getSourceTaskExecution())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasDatasetId()) {
      hash = (37 * hash) + DATASET_ID_FIELD_NUMBER;
      hash = (53 * hash) + getDatasetId().hashCode();
    }
    if (hasArtifactTag()) {
      hash = (37 * hash) + ARTIFACT_TAG_FIELD_NUMBER;
      hash = (53 * hash) + getArtifactTag().hashCode();
    }
    switch (sourceExecutionCase_) {
      case 3:
        hash = (37 * hash) + SOURCE_TASK_EXECUTION_FIELD_NUMBER;
        hash = (53 * hash) + getSourceTaskExecution().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.flyteidl.core.CatalogMetadata parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.core.CatalogMetadata parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.core.CatalogMetadata parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.core.CatalogMetadata parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.core.CatalogMetadata parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.core.CatalogMetadata parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.core.CatalogMetadata parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.flyteidl.core.CatalogMetadata parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.flyteidl.core.CatalogMetadata parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.flyteidl.core.CatalogMetadata parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.flyteidl.core.CatalogMetadata parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.flyteidl.core.CatalogMetadata parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.flyteidl.core.CatalogMetadata prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Catalog artifact information with specific metadata
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.CatalogMetadata}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:flyteidl.core.CatalogMetadata)
      com.flyteidl.core.CatalogMetadataOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.flyteidl.core.CatalogProto.internal_static_flyteidl_core_CatalogMetadata_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.flyteidl.core.CatalogProto.internal_static_flyteidl_core_CatalogMetadata_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.flyteidl.core.CatalogMetadata.class, com.flyteidl.core.CatalogMetadata.Builder.class);
    }

    // Construct using com.flyteidl.core.CatalogMetadata.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (datasetIdBuilder_ == null) {
        datasetId_ = null;
      } else {
        datasetId_ = null;
        datasetIdBuilder_ = null;
      }
      if (artifactTagBuilder_ == null) {
        artifactTag_ = null;
      } else {
        artifactTag_ = null;
        artifactTagBuilder_ = null;
      }
      sourceExecutionCase_ = 0;
      sourceExecution_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.flyteidl.core.CatalogProto.internal_static_flyteidl_core_CatalogMetadata_descriptor;
    }

    @java.lang.Override
    public com.flyteidl.core.CatalogMetadata getDefaultInstanceForType() {
      return com.flyteidl.core.CatalogMetadata.getDefaultInstance();
    }

    @java.lang.Override
    public com.flyteidl.core.CatalogMetadata build() {
      com.flyteidl.core.CatalogMetadata result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.flyteidl.core.CatalogMetadata buildPartial() {
      com.flyteidl.core.CatalogMetadata result = new com.flyteidl.core.CatalogMetadata(this);
      if (datasetIdBuilder_ == null) {
        result.datasetId_ = datasetId_;
      } else {
        result.datasetId_ = datasetIdBuilder_.build();
      }
      if (artifactTagBuilder_ == null) {
        result.artifactTag_ = artifactTag_;
      } else {
        result.artifactTag_ = artifactTagBuilder_.build();
      }
      if (sourceExecutionCase_ == 3) {
        if (sourceTaskExecutionBuilder_ == null) {
          result.sourceExecution_ = sourceExecution_;
        } else {
          result.sourceExecution_ = sourceTaskExecutionBuilder_.build();
        }
      }
      result.sourceExecutionCase_ = sourceExecutionCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.flyteidl.core.CatalogMetadata) {
        return mergeFrom((com.flyteidl.core.CatalogMetadata)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.flyteidl.core.CatalogMetadata other) {
      if (other == com.flyteidl.core.CatalogMetadata.getDefaultInstance()) return this;
      if (other.hasDatasetId()) {
        mergeDatasetId(other.getDatasetId());
      }
      if (other.hasArtifactTag()) {
        mergeArtifactTag(other.getArtifactTag());
      }
      switch (other.getSourceExecutionCase()) {
        case SOURCE_TASK_EXECUTION: {
          mergeSourceTaskExecution(other.getSourceTaskExecution());
          break;
        }
        case SOURCEEXECUTION_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.flyteidl.core.CatalogMetadata parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.flyteidl.core.CatalogMetadata) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int sourceExecutionCase_ = 0;
    private java.lang.Object sourceExecution_;
    public SourceExecutionCase
        getSourceExecutionCase() {
      return SourceExecutionCase.forNumber(
          sourceExecutionCase_);
    }

    public Builder clearSourceExecution() {
      sourceExecutionCase_ = 0;
      sourceExecution_ = null;
      onChanged();
      return this;
    }


    private com.flyteidl.core.Identifier datasetId_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.Identifier, com.flyteidl.core.Identifier.Builder, com.flyteidl.core.IdentifierOrBuilder> datasetIdBuilder_;
    /**
     * <pre>
     * Dataset ID in the catalog
     * </pre>
     *
     * <code>.flyteidl.core.Identifier dataset_id = 1 [json_name = "datasetId"];</code>
     * @return Whether the datasetId field is set.
     */
    public boolean hasDatasetId() {
      return datasetIdBuilder_ != null || datasetId_ != null;
    }
    /**
     * <pre>
     * Dataset ID in the catalog
     * </pre>
     *
     * <code>.flyteidl.core.Identifier dataset_id = 1 [json_name = "datasetId"];</code>
     * @return The datasetId.
     */
    public com.flyteidl.core.Identifier getDatasetId() {
      if (datasetIdBuilder_ == null) {
        return datasetId_ == null ? com.flyteidl.core.Identifier.getDefaultInstance() : datasetId_;
      } else {
        return datasetIdBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Dataset ID in the catalog
     * </pre>
     *
     * <code>.flyteidl.core.Identifier dataset_id = 1 [json_name = "datasetId"];</code>
     */
    public Builder setDatasetId(com.flyteidl.core.Identifier value) {
      if (datasetIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        datasetId_ = value;
        onChanged();
      } else {
        datasetIdBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Dataset ID in the catalog
     * </pre>
     *
     * <code>.flyteidl.core.Identifier dataset_id = 1 [json_name = "datasetId"];</code>
     */
    public Builder setDatasetId(
        com.flyteidl.core.Identifier.Builder builderForValue) {
      if (datasetIdBuilder_ == null) {
        datasetId_ = builderForValue.build();
        onChanged();
      } else {
        datasetIdBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Dataset ID in the catalog
     * </pre>
     *
     * <code>.flyteidl.core.Identifier dataset_id = 1 [json_name = "datasetId"];</code>
     */
    public Builder mergeDatasetId(com.flyteidl.core.Identifier value) {
      if (datasetIdBuilder_ == null) {
        if (datasetId_ != null) {
          datasetId_ =
            com.flyteidl.core.Identifier.newBuilder(datasetId_).mergeFrom(value).buildPartial();
        } else {
          datasetId_ = value;
        }
        onChanged();
      } else {
        datasetIdBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Dataset ID in the catalog
     * </pre>
     *
     * <code>.flyteidl.core.Identifier dataset_id = 1 [json_name = "datasetId"];</code>
     */
    public Builder clearDatasetId() {
      if (datasetIdBuilder_ == null) {
        datasetId_ = null;
        onChanged();
      } else {
        datasetId_ = null;
        datasetIdBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Dataset ID in the catalog
     * </pre>
     *
     * <code>.flyteidl.core.Identifier dataset_id = 1 [json_name = "datasetId"];</code>
     */
    public com.flyteidl.core.Identifier.Builder getDatasetIdBuilder() {
      
      onChanged();
      return getDatasetIdFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Dataset ID in the catalog
     * </pre>
     *
     * <code>.flyteidl.core.Identifier dataset_id = 1 [json_name = "datasetId"];</code>
     */
    public com.flyteidl.core.IdentifierOrBuilder getDatasetIdOrBuilder() {
      if (datasetIdBuilder_ != null) {
        return datasetIdBuilder_.getMessageOrBuilder();
      } else {
        return datasetId_ == null ?
            com.flyteidl.core.Identifier.getDefaultInstance() : datasetId_;
      }
    }
    /**
     * <pre>
     * Dataset ID in the catalog
     * </pre>
     *
     * <code>.flyteidl.core.Identifier dataset_id = 1 [json_name = "datasetId"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.Identifier, com.flyteidl.core.Identifier.Builder, com.flyteidl.core.IdentifierOrBuilder> 
        getDatasetIdFieldBuilder() {
      if (datasetIdBuilder_ == null) {
        datasetIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.Identifier, com.flyteidl.core.Identifier.Builder, com.flyteidl.core.IdentifierOrBuilder>(
                getDatasetId(),
                getParentForChildren(),
                isClean());
        datasetId_ = null;
      }
      return datasetIdBuilder_;
    }

    private com.flyteidl.core.CatalogArtifactTag artifactTag_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.CatalogArtifactTag, com.flyteidl.core.CatalogArtifactTag.Builder, com.flyteidl.core.CatalogArtifactTagOrBuilder> artifactTagBuilder_;
    /**
     * <pre>
     * Artifact tag in the catalog
     * </pre>
     *
     * <code>.flyteidl.core.CatalogArtifactTag artifact_tag = 2 [json_name = "artifactTag"];</code>
     * @return Whether the artifactTag field is set.
     */
    public boolean hasArtifactTag() {
      return artifactTagBuilder_ != null || artifactTag_ != null;
    }
    /**
     * <pre>
     * Artifact tag in the catalog
     * </pre>
     *
     * <code>.flyteidl.core.CatalogArtifactTag artifact_tag = 2 [json_name = "artifactTag"];</code>
     * @return The artifactTag.
     */
    public com.flyteidl.core.CatalogArtifactTag getArtifactTag() {
      if (artifactTagBuilder_ == null) {
        return artifactTag_ == null ? com.flyteidl.core.CatalogArtifactTag.getDefaultInstance() : artifactTag_;
      } else {
        return artifactTagBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Artifact tag in the catalog
     * </pre>
     *
     * <code>.flyteidl.core.CatalogArtifactTag artifact_tag = 2 [json_name = "artifactTag"];</code>
     */
    public Builder setArtifactTag(com.flyteidl.core.CatalogArtifactTag value) {
      if (artifactTagBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        artifactTag_ = value;
        onChanged();
      } else {
        artifactTagBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Artifact tag in the catalog
     * </pre>
     *
     * <code>.flyteidl.core.CatalogArtifactTag artifact_tag = 2 [json_name = "artifactTag"];</code>
     */
    public Builder setArtifactTag(
        com.flyteidl.core.CatalogArtifactTag.Builder builderForValue) {
      if (artifactTagBuilder_ == null) {
        artifactTag_ = builderForValue.build();
        onChanged();
      } else {
        artifactTagBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Artifact tag in the catalog
     * </pre>
     *
     * <code>.flyteidl.core.CatalogArtifactTag artifact_tag = 2 [json_name = "artifactTag"];</code>
     */
    public Builder mergeArtifactTag(com.flyteidl.core.CatalogArtifactTag value) {
      if (artifactTagBuilder_ == null) {
        if (artifactTag_ != null) {
          artifactTag_ =
            com.flyteidl.core.CatalogArtifactTag.newBuilder(artifactTag_).mergeFrom(value).buildPartial();
        } else {
          artifactTag_ = value;
        }
        onChanged();
      } else {
        artifactTagBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Artifact tag in the catalog
     * </pre>
     *
     * <code>.flyteidl.core.CatalogArtifactTag artifact_tag = 2 [json_name = "artifactTag"];</code>
     */
    public Builder clearArtifactTag() {
      if (artifactTagBuilder_ == null) {
        artifactTag_ = null;
        onChanged();
      } else {
        artifactTag_ = null;
        artifactTagBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Artifact tag in the catalog
     * </pre>
     *
     * <code>.flyteidl.core.CatalogArtifactTag artifact_tag = 2 [json_name = "artifactTag"];</code>
     */
    public com.flyteidl.core.CatalogArtifactTag.Builder getArtifactTagBuilder() {
      
      onChanged();
      return getArtifactTagFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Artifact tag in the catalog
     * </pre>
     *
     * <code>.flyteidl.core.CatalogArtifactTag artifact_tag = 2 [json_name = "artifactTag"];</code>
     */
    public com.flyteidl.core.CatalogArtifactTagOrBuilder getArtifactTagOrBuilder() {
      if (artifactTagBuilder_ != null) {
        return artifactTagBuilder_.getMessageOrBuilder();
      } else {
        return artifactTag_ == null ?
            com.flyteidl.core.CatalogArtifactTag.getDefaultInstance() : artifactTag_;
      }
    }
    /**
     * <pre>
     * Artifact tag in the catalog
     * </pre>
     *
     * <code>.flyteidl.core.CatalogArtifactTag artifact_tag = 2 [json_name = "artifactTag"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.CatalogArtifactTag, com.flyteidl.core.CatalogArtifactTag.Builder, com.flyteidl.core.CatalogArtifactTagOrBuilder> 
        getArtifactTagFieldBuilder() {
      if (artifactTagBuilder_ == null) {
        artifactTagBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.CatalogArtifactTag, com.flyteidl.core.CatalogArtifactTag.Builder, com.flyteidl.core.CatalogArtifactTagOrBuilder>(
                getArtifactTag(),
                getParentForChildren(),
                isClean());
        artifactTag_ = null;
      }
      return artifactTagBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.TaskExecutionIdentifier, com.flyteidl.core.TaskExecutionIdentifier.Builder, com.flyteidl.core.TaskExecutionIdentifierOrBuilder> sourceTaskExecutionBuilder_;
    /**
     * <pre>
     * Today we only support TaskExecutionIdentifier as a source, as catalog caching only works for task executions
     * </pre>
     *
     * <code>.flyteidl.core.TaskExecutionIdentifier source_task_execution = 3 [json_name = "sourceTaskExecution"];</code>
     * @return Whether the sourceTaskExecution field is set.
     */
    @java.lang.Override
    public boolean hasSourceTaskExecution() {
      return sourceExecutionCase_ == 3;
    }
    /**
     * <pre>
     * Today we only support TaskExecutionIdentifier as a source, as catalog caching only works for task executions
     * </pre>
     *
     * <code>.flyteidl.core.TaskExecutionIdentifier source_task_execution = 3 [json_name = "sourceTaskExecution"];</code>
     * @return The sourceTaskExecution.
     */
    @java.lang.Override
    public com.flyteidl.core.TaskExecutionIdentifier getSourceTaskExecution() {
      if (sourceTaskExecutionBuilder_ == null) {
        if (sourceExecutionCase_ == 3) {
          return (com.flyteidl.core.TaskExecutionIdentifier) sourceExecution_;
        }
        return com.flyteidl.core.TaskExecutionIdentifier.getDefaultInstance();
      } else {
        if (sourceExecutionCase_ == 3) {
          return sourceTaskExecutionBuilder_.getMessage();
        }
        return com.flyteidl.core.TaskExecutionIdentifier.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Today we only support TaskExecutionIdentifier as a source, as catalog caching only works for task executions
     * </pre>
     *
     * <code>.flyteidl.core.TaskExecutionIdentifier source_task_execution = 3 [json_name = "sourceTaskExecution"];</code>
     */
    public Builder setSourceTaskExecution(com.flyteidl.core.TaskExecutionIdentifier value) {
      if (sourceTaskExecutionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        sourceExecution_ = value;
        onChanged();
      } else {
        sourceTaskExecutionBuilder_.setMessage(value);
      }
      sourceExecutionCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Today we only support TaskExecutionIdentifier as a source, as catalog caching only works for task executions
     * </pre>
     *
     * <code>.flyteidl.core.TaskExecutionIdentifier source_task_execution = 3 [json_name = "sourceTaskExecution"];</code>
     */
    public Builder setSourceTaskExecution(
        com.flyteidl.core.TaskExecutionIdentifier.Builder builderForValue) {
      if (sourceTaskExecutionBuilder_ == null) {
        sourceExecution_ = builderForValue.build();
        onChanged();
      } else {
        sourceTaskExecutionBuilder_.setMessage(builderForValue.build());
      }
      sourceExecutionCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Today we only support TaskExecutionIdentifier as a source, as catalog caching only works for task executions
     * </pre>
     *
     * <code>.flyteidl.core.TaskExecutionIdentifier source_task_execution = 3 [json_name = "sourceTaskExecution"];</code>
     */
    public Builder mergeSourceTaskExecution(com.flyteidl.core.TaskExecutionIdentifier value) {
      if (sourceTaskExecutionBuilder_ == null) {
        if (sourceExecutionCase_ == 3 &&
            sourceExecution_ != com.flyteidl.core.TaskExecutionIdentifier.getDefaultInstance()) {
          sourceExecution_ = com.flyteidl.core.TaskExecutionIdentifier.newBuilder((com.flyteidl.core.TaskExecutionIdentifier) sourceExecution_)
              .mergeFrom(value).buildPartial();
        } else {
          sourceExecution_ = value;
        }
        onChanged();
      } else {
        if (sourceExecutionCase_ == 3) {
          sourceTaskExecutionBuilder_.mergeFrom(value);
        }
        sourceTaskExecutionBuilder_.setMessage(value);
      }
      sourceExecutionCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Today we only support TaskExecutionIdentifier as a source, as catalog caching only works for task executions
     * </pre>
     *
     * <code>.flyteidl.core.TaskExecutionIdentifier source_task_execution = 3 [json_name = "sourceTaskExecution"];</code>
     */
    public Builder clearSourceTaskExecution() {
      if (sourceTaskExecutionBuilder_ == null) {
        if (sourceExecutionCase_ == 3) {
          sourceExecutionCase_ = 0;
          sourceExecution_ = null;
          onChanged();
        }
      } else {
        if (sourceExecutionCase_ == 3) {
          sourceExecutionCase_ = 0;
          sourceExecution_ = null;
        }
        sourceTaskExecutionBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Today we only support TaskExecutionIdentifier as a source, as catalog caching only works for task executions
     * </pre>
     *
     * <code>.flyteidl.core.TaskExecutionIdentifier source_task_execution = 3 [json_name = "sourceTaskExecution"];</code>
     */
    public com.flyteidl.core.TaskExecutionIdentifier.Builder getSourceTaskExecutionBuilder() {
      return getSourceTaskExecutionFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Today we only support TaskExecutionIdentifier as a source, as catalog caching only works for task executions
     * </pre>
     *
     * <code>.flyteidl.core.TaskExecutionIdentifier source_task_execution = 3 [json_name = "sourceTaskExecution"];</code>
     */
    @java.lang.Override
    public com.flyteidl.core.TaskExecutionIdentifierOrBuilder getSourceTaskExecutionOrBuilder() {
      if ((sourceExecutionCase_ == 3) && (sourceTaskExecutionBuilder_ != null)) {
        return sourceTaskExecutionBuilder_.getMessageOrBuilder();
      } else {
        if (sourceExecutionCase_ == 3) {
          return (com.flyteidl.core.TaskExecutionIdentifier) sourceExecution_;
        }
        return com.flyteidl.core.TaskExecutionIdentifier.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Today we only support TaskExecutionIdentifier as a source, as catalog caching only works for task executions
     * </pre>
     *
     * <code>.flyteidl.core.TaskExecutionIdentifier source_task_execution = 3 [json_name = "sourceTaskExecution"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.TaskExecutionIdentifier, com.flyteidl.core.TaskExecutionIdentifier.Builder, com.flyteidl.core.TaskExecutionIdentifierOrBuilder> 
        getSourceTaskExecutionFieldBuilder() {
      if (sourceTaskExecutionBuilder_ == null) {
        if (!(sourceExecutionCase_ == 3)) {
          sourceExecution_ = com.flyteidl.core.TaskExecutionIdentifier.getDefaultInstance();
        }
        sourceTaskExecutionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.TaskExecutionIdentifier, com.flyteidl.core.TaskExecutionIdentifier.Builder, com.flyteidl.core.TaskExecutionIdentifierOrBuilder>(
                (com.flyteidl.core.TaskExecutionIdentifier) sourceExecution_,
                getParentForChildren(),
                isClean());
        sourceExecution_ = null;
      }
      sourceExecutionCase_ = 3;
      onChanged();;
      return sourceTaskExecutionBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:flyteidl.core.CatalogMetadata)
  }

  // @@protoc_insertion_point(class_scope:flyteidl.core.CatalogMetadata)
  private static final com.flyteidl.core.CatalogMetadata DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.flyteidl.core.CatalogMetadata();
  }

  public static com.flyteidl.core.CatalogMetadata getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CatalogMetadata>
      PARSER = new com.google.protobuf.AbstractParser<CatalogMetadata>() {
    @java.lang.Override
    public CatalogMetadata parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new CatalogMetadata(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CatalogMetadata> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CatalogMetadata> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.flyteidl.core.CatalogMetadata getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

