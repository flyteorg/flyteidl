// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/task_execution.proto

#include "flyteidl/admin/task_execution.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Sort_flyteidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UrlBlob_flyteidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2ftask_5fexecution_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Reason_flyteidl_2fadmin_2ftask_5fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2ftask_5fexecution_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TaskExecution_flyteidl_2fadmin_2ftask_5fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2ftask_5fexecution_2eproto ::google::protobuf::internal::SCCInfo<8> scc_info_TaskExecutionClosure_flyteidl_2fadmin_2ftask_5fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fexecution_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ExecutionError_flyteidl_2fcore_2fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fexecution_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TaskLog_flyteidl_2fcore_2fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NodeExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TaskExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fliterals_2eproto ::google::protobuf::internal::SCCInfo<9> scc_info_Literal_flyteidl_2fcore_2fliterals_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fevent_2fevent_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TaskExecutionMetadata_flyteidl_2fevent_2fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fstruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace flyteidl {
namespace admin {
class TaskExecutionGetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskExecutionGetRequest> _instance;
} _TaskExecutionGetRequest_default_instance_;
class TaskExecutionListRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskExecutionListRequest> _instance;
} _TaskExecutionListRequest_default_instance_;
class TaskExecutionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskExecution> _instance;
} _TaskExecution_default_instance_;
class TaskExecutionListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskExecutionList> _instance;
} _TaskExecutionList_default_instance_;
class TaskExecutionClosureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskExecutionClosure> _instance;
  ::google::protobuf::internal::ArenaStringPtr output_uri_;
  const ::flyteidl::core::ExecutionError* error_;
  const ::flyteidl::core::LiteralMap* output_data_;
} _TaskExecutionClosure_default_instance_;
class ReasonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Reason> _instance;
} _Reason_default_instance_;
class TaskExecutionGetDataRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskExecutionGetDataRequest> _instance;
} _TaskExecutionGetDataRequest_default_instance_;
class TaskExecutionGetDataResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskExecutionGetDataResponse> _instance;
} _TaskExecutionGetDataResponse_default_instance_;
}  // namespace admin
}  // namespace flyteidl
static void InitDefaultsTaskExecutionGetRequest_flyteidl_2fadmin_2ftask_5fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_TaskExecutionGetRequest_default_instance_;
    new (ptr) ::flyteidl::admin::TaskExecutionGetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::TaskExecutionGetRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TaskExecutionGetRequest_flyteidl_2fadmin_2ftask_5fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTaskExecutionGetRequest_flyteidl_2fadmin_2ftask_5fexecution_2eproto}, {
      &scc_info_TaskExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsTaskExecutionListRequest_flyteidl_2fadmin_2ftask_5fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_TaskExecutionListRequest_default_instance_;
    new (ptr) ::flyteidl::admin::TaskExecutionListRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::TaskExecutionListRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TaskExecutionListRequest_flyteidl_2fadmin_2ftask_5fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTaskExecutionListRequest_flyteidl_2fadmin_2ftask_5fexecution_2eproto}, {
      &scc_info_NodeExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_Sort_flyteidl_2fadmin_2fcommon_2eproto.base,}};

static void InitDefaultsTaskExecution_flyteidl_2fadmin_2ftask_5fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_TaskExecution_default_instance_;
    new (ptr) ::flyteidl::admin::TaskExecution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::TaskExecution::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TaskExecution_flyteidl_2fadmin_2ftask_5fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTaskExecution_flyteidl_2fadmin_2ftask_5fexecution_2eproto}, {
      &scc_info_TaskExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_TaskExecutionClosure_flyteidl_2fadmin_2ftask_5fexecution_2eproto.base,}};

static void InitDefaultsTaskExecutionList_flyteidl_2fadmin_2ftask_5fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_TaskExecutionList_default_instance_;
    new (ptr) ::flyteidl::admin::TaskExecutionList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::TaskExecutionList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TaskExecutionList_flyteidl_2fadmin_2ftask_5fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTaskExecutionList_flyteidl_2fadmin_2ftask_5fexecution_2eproto}, {
      &scc_info_TaskExecution_flyteidl_2fadmin_2ftask_5fexecution_2eproto.base,}};

static void InitDefaultsTaskExecutionClosure_flyteidl_2fadmin_2ftask_5fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_TaskExecutionClosure_default_instance_;
    new (ptr) ::flyteidl::admin::TaskExecutionClosure();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::TaskExecutionClosure::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<8> scc_info_TaskExecutionClosure_flyteidl_2fadmin_2ftask_5fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsTaskExecutionClosure_flyteidl_2fadmin_2ftask_5fexecution_2eproto}, {
      &scc_info_ExecutionError_flyteidl_2fcore_2fexecution_2eproto.base,
      &scc_info_Literal_flyteidl_2fcore_2fliterals_2eproto.base,
      &scc_info_TaskLog_flyteidl_2fcore_2fexecution_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,
      &scc_info_TaskExecutionMetadata_flyteidl_2fevent_2fevent_2eproto.base,
      &scc_info_Reason_flyteidl_2fadmin_2ftask_5fexecution_2eproto.base,}};

static void InitDefaultsReason_flyteidl_2fadmin_2ftask_5fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_Reason_default_instance_;
    new (ptr) ::flyteidl::admin::Reason();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::Reason::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Reason_flyteidl_2fadmin_2ftask_5fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReason_flyteidl_2fadmin_2ftask_5fexecution_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsTaskExecutionGetDataRequest_flyteidl_2fadmin_2ftask_5fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_TaskExecutionGetDataRequest_default_instance_;
    new (ptr) ::flyteidl::admin::TaskExecutionGetDataRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::TaskExecutionGetDataRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TaskExecutionGetDataRequest_flyteidl_2fadmin_2ftask_5fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTaskExecutionGetDataRequest_flyteidl_2fadmin_2ftask_5fexecution_2eproto}, {
      &scc_info_TaskExecutionIdentifier_flyteidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsTaskExecutionGetDataResponse_flyteidl_2fadmin_2ftask_5fexecution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_TaskExecutionGetDataResponse_default_instance_;
    new (ptr) ::flyteidl::admin::TaskExecutionGetDataResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::TaskExecutionGetDataResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TaskExecutionGetDataResponse_flyteidl_2fadmin_2ftask_5fexecution_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTaskExecutionGetDataResponse_flyteidl_2fadmin_2ftask_5fexecution_2eproto}, {
      &scc_info_UrlBlob_flyteidl_2fadmin_2fcommon_2eproto.base,
      &scc_info_Literal_flyteidl_2fcore_2fliterals_2eproto.base,}};

void InitDefaults_flyteidl_2fadmin_2ftask_5fexecution_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_TaskExecutionGetRequest_flyteidl_2fadmin_2ftask_5fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskExecutionListRequest_flyteidl_2fadmin_2ftask_5fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskExecution_flyteidl_2fadmin_2ftask_5fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskExecutionList_flyteidl_2fadmin_2ftask_5fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskExecutionClosure_flyteidl_2fadmin_2ftask_5fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Reason_flyteidl_2fadmin_2ftask_5fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskExecutionGetDataRequest_flyteidl_2fadmin_2ftask_5fexecution_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskExecutionGetDataResponse_flyteidl_2fadmin_2ftask_5fexecution_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fadmin_2ftask_5fexecution_2eproto[8];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fadmin_2ftask_5fexecution_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fadmin_2ftask_5fexecution_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fadmin_2ftask_5fexecution_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionGetRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionListRequest, node_execution_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionListRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionListRequest, token_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionListRequest, filters_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionListRequest, sort_by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecution, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecution, input_uri_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecution, closure_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecution, is_parent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionList, task_executions_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionList, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::admin::TaskExecutionClosureDefaultTypeInternal, output_uri_),
  offsetof(::flyteidl::admin::TaskExecutionClosureDefaultTypeInternal, error_),
  offsetof(::flyteidl::admin::TaskExecutionClosureDefaultTypeInternal, output_data_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, phase_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, logs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, started_at_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, duration_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, created_at_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, updated_at_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, custom_info_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, reason_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, task_type_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, metadata_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, event_version_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, reasons_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionClosure, output_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Reason, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Reason, occurred_at_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Reason, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionGetDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionGetDataRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionGetDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionGetDataResponse, inputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionGetDataResponse, outputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionGetDataResponse, full_inputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskExecutionGetDataResponse, full_outputs_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::admin::TaskExecutionGetRequest)},
  { 6, -1, sizeof(::flyteidl::admin::TaskExecutionListRequest)},
  { 16, -1, sizeof(::flyteidl::admin::TaskExecution)},
  { 25, -1, sizeof(::flyteidl::admin::TaskExecutionList)},
  { 32, -1, sizeof(::flyteidl::admin::TaskExecutionClosure)},
  { 53, -1, sizeof(::flyteidl::admin::Reason)},
  { 60, -1, sizeof(::flyteidl::admin::TaskExecutionGetDataRequest)},
  { 66, -1, sizeof(::flyteidl::admin::TaskExecutionGetDataResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_TaskExecutionGetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_TaskExecutionListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_TaskExecution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_TaskExecutionList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_TaskExecutionClosure_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_Reason_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_TaskExecutionGetDataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_TaskExecutionGetDataResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto = {
  {}, AddDescriptors_flyteidl_2fadmin_2ftask_5fexecution_2eproto, "flyteidl/admin/task_execution.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fadmin_2ftask_5fexecution_2eproto::offsets,
  file_level_metadata_flyteidl_2fadmin_2ftask_5fexecution_2eproto, 8, file_level_enum_descriptors_flyteidl_2fadmin_2ftask_5fexecution_2eproto, file_level_service_descriptors_flyteidl_2fadmin_2ftask_5fexecution_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fadmin_2ftask_5fexecution_2eproto[] =
  "\n#flyteidl/admin/task_execution.proto\022\016f"
  "lyteidl.admin\032\033flyteidl/admin/common.pro"
  "to\032\035flyteidl/core/execution.proto\032\036flyte"
  "idl/core/identifier.proto\032\034flyteidl/core"
  "/literals.proto\032\032flyteidl/event/event.pr"
  "oto\032\037google/protobuf/timestamp.proto\032\036go"
  "ogle/protobuf/duration.proto\032\034google/pro"
  "tobuf/struct.proto\"M\n\027TaskExecutionGetRe"
  "quest\0222\n\002id\030\001 \001(\0132&.flyteidl.core.TaskEx"
  "ecutionIdentifier\"\263\001\n\030TaskExecutionListR"
  "equest\022A\n\021node_execution_id\030\001 \001(\0132&.flyt"
  "eidl.core.NodeExecutionIdentifier\022\r\n\005lim"
  "it\030\002 \001(\r\022\r\n\005token\030\003 \001(\t\022\017\n\007filters\030\004 \001(\t"
  "\022%\n\007sort_by\030\005 \001(\0132\024.flyteidl.admin.Sort\""
  "\240\001\n\rTaskExecution\0222\n\002id\030\001 \001(\0132&.flyteidl"
  ".core.TaskExecutionIdentifier\022\021\n\tinput_u"
  "ri\030\002 \001(\t\0225\n\007closure\030\003 \001(\0132$.flyteidl.adm"
  "in.TaskExecutionClosure\022\021\n\tis_parent\030\004 \001"
  "(\010\"Z\n\021TaskExecutionList\0226\n\017task_executio"
  "ns\030\001 \003(\0132\035.flyteidl.admin.TaskExecution\022"
  "\r\n\005token\030\002 \001(\t\"\207\005\n\024TaskExecutionClosure\022"
  "\030\n\noutput_uri\030\001 \001(\tB\002\030\001H\000\022.\n\005error\030\002 \001(\013"
  "2\035.flyteidl.core.ExecutionErrorH\000\0224\n\013out"
  "put_data\030\014 \001(\0132\031.flyteidl.core.LiteralMa"
  "pB\002\030\001H\000\0221\n\005phase\030\003 \001(\0162\".flyteidl.core.T"
  "askExecution.Phase\022$\n\004logs\030\004 \003(\0132\026.flyte"
  "idl.core.TaskLog\022.\n\nstarted_at\030\005 \001(\0132\032.g"
  "oogle.protobuf.Timestamp\022+\n\010duration\030\006 \001"
  "(\0132\031.google.protobuf.Duration\022.\n\ncreated"
  "_at\030\007 \001(\0132\032.google.protobuf.Timestamp\022.\n"
  "\nupdated_at\030\010 \001(\0132\032.google.protobuf.Time"
  "stamp\022,\n\013custom_info\030\t \001(\0132\027.google.prot"
  "obuf.Struct\022\016\n\006reason\030\n \001(\t\022\021\n\ttask_type"
  "\030\013 \001(\t\0227\n\010metadata\030\020 \001(\0132%.flyteidl.even"
  "t.TaskExecutionMetadata\022\025\n\revent_version"
  "\030\021 \001(\005\022\'\n\007reasons\030\022 \003(\0132\026.flyteidl.admin"
  ".ReasonB\017\n\routput_result\"J\n\006Reason\022/\n\013oc"
  "curred_at\030\001 \001(\0132\032.google.protobuf.Timest"
  "amp\022\017\n\007message\030\002 \001(\t\"Q\n\033TaskExecutionGet"
  "DataRequest\0222\n\002id\030\001 \001(\0132&.flyteidl.core."
  "TaskExecutionIdentifier\"\332\001\n\034TaskExecutio"
  "nGetDataResponse\022+\n\006inputs\030\001 \001(\0132\027.flyte"
  "idl.admin.UrlBlobB\002\030\001\022,\n\007outputs\030\002 \001(\0132\027"
  ".flyteidl.admin.UrlBlobB\002\030\001\022.\n\013full_inpu"
  "ts\030\003 \001(\0132\031.flyteidl.core.LiteralMap\022/\n\014f"
  "ull_outputs\030\004 \001(\0132\031.flyteidl.core.Litera"
  "lMapB7Z5github.com/flyteorg/flyteidl/gen"
  "/pb-go/flyteidl/adminb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto = {
  false, InitDefaults_flyteidl_2fadmin_2ftask_5fexecution_2eproto, 
  descriptor_table_protodef_flyteidl_2fadmin_2ftask_5fexecution_2eproto,
  "flyteidl/admin/task_execution.proto", &assign_descriptors_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto, 1909,
};

void AddDescriptors_flyteidl_2fadmin_2ftask_5fexecution_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[8] =
  {
    ::AddDescriptors_flyteidl_2fadmin_2fcommon_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fexecution_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fidentifier_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fliterals_2eproto,
    ::AddDescriptors_flyteidl_2fevent_2fevent_2eproto,
    ::AddDescriptors_google_2fprotobuf_2ftimestamp_2eproto,
    ::AddDescriptors_google_2fprotobuf_2fduration_2eproto,
    ::AddDescriptors_google_2fprotobuf_2fstruct_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto, deps, 8);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fadmin_2ftask_5fexecution_2eproto = []() { AddDescriptors_flyteidl_2fadmin_2ftask_5fexecution_2eproto(); return true; }();
namespace flyteidl {
namespace admin {

// ===================================================================

void TaskExecutionGetRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_TaskExecutionGetRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::TaskExecutionIdentifier*>(
      ::flyteidl::core::TaskExecutionIdentifier::internal_default_instance());
}
class TaskExecutionGetRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::TaskExecutionIdentifier& id(const TaskExecutionGetRequest* msg);
};

const ::flyteidl::core::TaskExecutionIdentifier&
TaskExecutionGetRequest::HasBitSetters::id(const TaskExecutionGetRequest* msg) {
  return *msg->id_;
}
void TaskExecutionGetRequest::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskExecutionGetRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskExecutionGetRequest::TaskExecutionGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.TaskExecutionGetRequest)
}
TaskExecutionGetRequest::TaskExecutionGetRequest(const TaskExecutionGetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::TaskExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskExecutionGetRequest)
}

void TaskExecutionGetRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TaskExecutionGetRequest_flyteidl_2fadmin_2ftask_5fexecution_2eproto.base);
  id_ = nullptr;
}

TaskExecutionGetRequest::~TaskExecutionGetRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskExecutionGetRequest)
  SharedDtor();
}

void TaskExecutionGetRequest::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void TaskExecutionGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskExecutionGetRequest& TaskExecutionGetRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TaskExecutionGetRequest_flyteidl_2fadmin_2ftask_5fexecution_2eproto.base);
  return *internal_default_instance();
}


void TaskExecutionGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.TaskExecutionGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TaskExecutionGetRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TaskExecutionGetRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.TaskExecutionIdentifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::TaskExecutionIdentifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TaskExecutionGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.TaskExecutionGetRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.TaskExecutionIdentifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.TaskExecutionGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.TaskExecutionGetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TaskExecutionGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.TaskExecutionGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.TaskExecutionIdentifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.TaskExecutionGetRequest)
}

::google::protobuf::uint8* TaskExecutionGetRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.TaskExecutionGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.TaskExecutionIdentifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.TaskExecutionGetRequest)
  return target;
}

size_t TaskExecutionGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.TaskExecutionGetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.TaskExecutionIdentifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskExecutionGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.TaskExecutionGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskExecutionGetRequest* source =
      ::google::protobuf::DynamicCastToGenerated<TaskExecutionGetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.TaskExecutionGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.TaskExecutionGetRequest)
    MergeFrom(*source);
  }
}

void TaskExecutionGetRequest::MergeFrom(const TaskExecutionGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.TaskExecutionGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::TaskExecutionIdentifier::MergeFrom(from.id());
  }
}

void TaskExecutionGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.TaskExecutionGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskExecutionGetRequest::CopyFrom(const TaskExecutionGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.TaskExecutionGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskExecutionGetRequest::IsInitialized() const {
  return true;
}

void TaskExecutionGetRequest::Swap(TaskExecutionGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskExecutionGetRequest::InternalSwap(TaskExecutionGetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata TaskExecutionGetRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2ftask_5fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TaskExecutionListRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_TaskExecutionListRequest_default_instance_._instance.get_mutable()->node_execution_id_ = const_cast< ::flyteidl::core::NodeExecutionIdentifier*>(
      ::flyteidl::core::NodeExecutionIdentifier::internal_default_instance());
  ::flyteidl::admin::_TaskExecutionListRequest_default_instance_._instance.get_mutable()->sort_by_ = const_cast< ::flyteidl::admin::Sort*>(
      ::flyteidl::admin::Sort::internal_default_instance());
}
class TaskExecutionListRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::NodeExecutionIdentifier& node_execution_id(const TaskExecutionListRequest* msg);
  static const ::flyteidl::admin::Sort& sort_by(const TaskExecutionListRequest* msg);
};

const ::flyteidl::core::NodeExecutionIdentifier&
TaskExecutionListRequest::HasBitSetters::node_execution_id(const TaskExecutionListRequest* msg) {
  return *msg->node_execution_id_;
}
const ::flyteidl::admin::Sort&
TaskExecutionListRequest::HasBitSetters::sort_by(const TaskExecutionListRequest* msg) {
  return *msg->sort_by_;
}
void TaskExecutionListRequest::clear_node_execution_id() {
  if (GetArenaNoVirtual() == nullptr && node_execution_id_ != nullptr) {
    delete node_execution_id_;
  }
  node_execution_id_ = nullptr;
}
void TaskExecutionListRequest::clear_sort_by() {
  if (GetArenaNoVirtual() == nullptr && sort_by_ != nullptr) {
    delete sort_by_;
  }
  sort_by_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskExecutionListRequest::kNodeExecutionIdFieldNumber;
const int TaskExecutionListRequest::kLimitFieldNumber;
const int TaskExecutionListRequest::kTokenFieldNumber;
const int TaskExecutionListRequest::kFiltersFieldNumber;
const int TaskExecutionListRequest::kSortByFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskExecutionListRequest::TaskExecutionListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.TaskExecutionListRequest)
}
TaskExecutionListRequest::TaskExecutionListRequest(const TaskExecutionListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  filters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filters().size() > 0) {
    filters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filters_);
  }
  if (from.has_node_execution_id()) {
    node_execution_id_ = new ::flyteidl::core::NodeExecutionIdentifier(*from.node_execution_id_);
  } else {
    node_execution_id_ = nullptr;
  }
  if (from.has_sort_by()) {
    sort_by_ = new ::flyteidl::admin::Sort(*from.sort_by_);
  } else {
    sort_by_ = nullptr;
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskExecutionListRequest)
}

void TaskExecutionListRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TaskExecutionListRequest_flyteidl_2fadmin_2ftask_5fexecution_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_execution_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&node_execution_id_)) + sizeof(limit_));
}

TaskExecutionListRequest::~TaskExecutionListRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskExecutionListRequest)
  SharedDtor();
}

void TaskExecutionListRequest::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete node_execution_id_;
  if (this != internal_default_instance()) delete sort_by_;
}

void TaskExecutionListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskExecutionListRequest& TaskExecutionListRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TaskExecutionListRequest_flyteidl_2fadmin_2ftask_5fexecution_2eproto.base);
  return *internal_default_instance();
}


void TaskExecutionListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.TaskExecutionListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && node_execution_id_ != nullptr) {
    delete node_execution_id_;
  }
  node_execution_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sort_by_ != nullptr) {
    delete sort_by_;
  }
  sort_by_ = nullptr;
  limit_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TaskExecutionListRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TaskExecutionListRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.NodeExecutionIdentifier node_execution_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::NodeExecutionIdentifier::_InternalParse;
        object = msg->mutable_node_execution_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // uint32 limit = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string token = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.TaskExecutionListRequest.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string filters = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.TaskExecutionListRequest.filters");
        object = msg->mutable_filters();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.admin.Sort sort_by = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::Sort::_InternalParse;
        object = msg->mutable_sort_by();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TaskExecutionListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.TaskExecutionListRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.NodeExecutionIdentifier node_execution_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node_execution_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.TaskExecutionListRequest.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filters = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filters()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filters().data(), static_cast<int>(this->filters().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.TaskExecutionListRequest.filters"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.Sort sort_by = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sort_by()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.TaskExecutionListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.TaskExecutionListRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TaskExecutionListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.TaskExecutionListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.NodeExecutionIdentifier node_execution_id = 1;
  if (this->has_node_execution_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::node_execution_id(this), output);
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  // string token = 3;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.TaskExecutionListRequest.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  // string filters = 4;
  if (this->filters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filters().data(), static_cast<int>(this->filters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.TaskExecutionListRequest.filters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filters(), output);
  }

  // .flyteidl.admin.Sort sort_by = 5;
  if (this->has_sort_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::sort_by(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.TaskExecutionListRequest)
}

::google::protobuf::uint8* TaskExecutionListRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.TaskExecutionListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.NodeExecutionIdentifier node_execution_id = 1;
  if (this->has_node_execution_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::node_execution_id(this), target);
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  // string token = 3;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.TaskExecutionListRequest.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // string filters = 4;
  if (this->filters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filters().data(), static_cast<int>(this->filters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.TaskExecutionListRequest.filters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filters(), target);
  }

  // .flyteidl.admin.Sort sort_by = 5;
  if (this->has_sort_by()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::sort_by(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.TaskExecutionListRequest)
  return target;
}

size_t TaskExecutionListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.TaskExecutionListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 3;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string filters = 4;
  if (this->filters().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filters());
  }

  // .flyteidl.core.NodeExecutionIdentifier node_execution_id = 1;
  if (this->has_node_execution_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *node_execution_id_);
  }

  // .flyteidl.admin.Sort sort_by = 5;
  if (this->has_sort_by()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sort_by_);
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskExecutionListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.TaskExecutionListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskExecutionListRequest* source =
      ::google::protobuf::DynamicCastToGenerated<TaskExecutionListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.TaskExecutionListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.TaskExecutionListRequest)
    MergeFrom(*source);
  }
}

void TaskExecutionListRequest::MergeFrom(const TaskExecutionListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.TaskExecutionListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.filters().size() > 0) {

    filters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filters_);
  }
  if (from.has_node_execution_id()) {
    mutable_node_execution_id()->::flyteidl::core::NodeExecutionIdentifier::MergeFrom(from.node_execution_id());
  }
  if (from.has_sort_by()) {
    mutable_sort_by()->::flyteidl::admin::Sort::MergeFrom(from.sort_by());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void TaskExecutionListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.TaskExecutionListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskExecutionListRequest::CopyFrom(const TaskExecutionListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.TaskExecutionListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskExecutionListRequest::IsInitialized() const {
  return true;
}

void TaskExecutionListRequest::Swap(TaskExecutionListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskExecutionListRequest::InternalSwap(TaskExecutionListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filters_.Swap(&other->filters_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(node_execution_id_, other->node_execution_id_);
  swap(sort_by_, other->sort_by_);
  swap(limit_, other->limit_);
}

::google::protobuf::Metadata TaskExecutionListRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2ftask_5fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TaskExecution::InitAsDefaultInstance() {
  ::flyteidl::admin::_TaskExecution_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::TaskExecutionIdentifier*>(
      ::flyteidl::core::TaskExecutionIdentifier::internal_default_instance());
  ::flyteidl::admin::_TaskExecution_default_instance_._instance.get_mutable()->closure_ = const_cast< ::flyteidl::admin::TaskExecutionClosure*>(
      ::flyteidl::admin::TaskExecutionClosure::internal_default_instance());
}
class TaskExecution::HasBitSetters {
 public:
  static const ::flyteidl::core::TaskExecutionIdentifier& id(const TaskExecution* msg);
  static const ::flyteidl::admin::TaskExecutionClosure& closure(const TaskExecution* msg);
};

const ::flyteidl::core::TaskExecutionIdentifier&
TaskExecution::HasBitSetters::id(const TaskExecution* msg) {
  return *msg->id_;
}
const ::flyteidl::admin::TaskExecutionClosure&
TaskExecution::HasBitSetters::closure(const TaskExecution* msg) {
  return *msg->closure_;
}
void TaskExecution::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskExecution::kIdFieldNumber;
const int TaskExecution::kInputUriFieldNumber;
const int TaskExecution::kClosureFieldNumber;
const int TaskExecution::kIsParentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskExecution::TaskExecution()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.TaskExecution)
}
TaskExecution::TaskExecution(const TaskExecution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.input_uri().size() > 0) {
    input_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_uri_);
  }
  if (from.has_id()) {
    id_ = new ::flyteidl::core::TaskExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_closure()) {
    closure_ = new ::flyteidl::admin::TaskExecutionClosure(*from.closure_);
  } else {
    closure_ = nullptr;
  }
  is_parent_ = from.is_parent_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskExecution)
}

void TaskExecution::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TaskExecution_flyteidl_2fadmin_2ftask_5fexecution_2eproto.base);
  input_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_parent_) -
      reinterpret_cast<char*>(&id_)) + sizeof(is_parent_));
}

TaskExecution::~TaskExecution() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskExecution)
  SharedDtor();
}

void TaskExecution::SharedDtor() {
  input_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete closure_;
}

void TaskExecution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskExecution& TaskExecution::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TaskExecution_flyteidl_2fadmin_2ftask_5fexecution_2eproto.base);
  return *internal_default_instance();
}


void TaskExecution::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.TaskExecution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && closure_ != nullptr) {
    delete closure_;
  }
  closure_ = nullptr;
  is_parent_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TaskExecution::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TaskExecution*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.TaskExecutionIdentifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::TaskExecutionIdentifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string input_uri = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.TaskExecution.input_uri");
        object = msg->mutable_input_uri();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.admin.TaskExecutionClosure closure = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::TaskExecutionClosure::_InternalParse;
        object = msg->mutable_closure();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool is_parent = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_is_parent(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TaskExecution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.TaskExecution)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.TaskExecutionIdentifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string input_uri = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input_uri().data(), static_cast<int>(this->input_uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.TaskExecution.input_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.TaskExecutionClosure closure = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_closure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_parent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_parent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.TaskExecution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.TaskExecution)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TaskExecution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.TaskExecution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.TaskExecutionIdentifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  // string input_uri = 2;
  if (this->input_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_uri().data(), static_cast<int>(this->input_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.TaskExecution.input_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->input_uri(), output);
  }

  // .flyteidl.admin.TaskExecutionClosure closure = 3;
  if (this->has_closure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::closure(this), output);
  }

  // bool is_parent = 4;
  if (this->is_parent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_parent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.TaskExecution)
}

::google::protobuf::uint8* TaskExecution::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.TaskExecution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.TaskExecutionIdentifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  // string input_uri = 2;
  if (this->input_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_uri().data(), static_cast<int>(this->input_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.TaskExecution.input_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->input_uri(), target);
  }

  // .flyteidl.admin.TaskExecutionClosure closure = 3;
  if (this->has_closure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::closure(this), target);
  }

  // bool is_parent = 4;
  if (this->is_parent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_parent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.TaskExecution)
  return target;
}

size_t TaskExecution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.TaskExecution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input_uri = 2;
  if (this->input_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->input_uri());
  }

  // .flyteidl.core.TaskExecutionIdentifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .flyteidl.admin.TaskExecutionClosure closure = 3;
  if (this->has_closure()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *closure_);
  }

  // bool is_parent = 4;
  if (this->is_parent() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskExecution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.TaskExecution)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskExecution* source =
      ::google::protobuf::DynamicCastToGenerated<TaskExecution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.TaskExecution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.TaskExecution)
    MergeFrom(*source);
  }
}

void TaskExecution::MergeFrom(const TaskExecution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.TaskExecution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input_uri().size() > 0) {

    input_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_uri_);
  }
  if (from.has_id()) {
    mutable_id()->::flyteidl::core::TaskExecutionIdentifier::MergeFrom(from.id());
  }
  if (from.has_closure()) {
    mutable_closure()->::flyteidl::admin::TaskExecutionClosure::MergeFrom(from.closure());
  }
  if (from.is_parent() != 0) {
    set_is_parent(from.is_parent());
  }
}

void TaskExecution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.TaskExecution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskExecution::CopyFrom(const TaskExecution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.TaskExecution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskExecution::IsInitialized() const {
  return true;
}

void TaskExecution::Swap(TaskExecution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskExecution::InternalSwap(TaskExecution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  input_uri_.Swap(&other->input_uri_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(closure_, other->closure_);
  swap(is_parent_, other->is_parent_);
}

::google::protobuf::Metadata TaskExecution::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2ftask_5fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TaskExecutionList::InitAsDefaultInstance() {
}
class TaskExecutionList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskExecutionList::kTaskExecutionsFieldNumber;
const int TaskExecutionList::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskExecutionList::TaskExecutionList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.TaskExecutionList)
}
TaskExecutionList::TaskExecutionList(const TaskExecutionList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      task_executions_(from.task_executions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskExecutionList)
}

void TaskExecutionList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TaskExecutionList_flyteidl_2fadmin_2ftask_5fexecution_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TaskExecutionList::~TaskExecutionList() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskExecutionList)
  SharedDtor();
}

void TaskExecutionList::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TaskExecutionList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskExecutionList& TaskExecutionList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TaskExecutionList_flyteidl_2fadmin_2ftask_5fexecution_2eproto.base);
  return *internal_default_instance();
}


void TaskExecutionList::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.TaskExecutionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_executions_.Clear();
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TaskExecutionList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TaskExecutionList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .flyteidl.admin.TaskExecution task_executions = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::admin::TaskExecution::_InternalParse;
          object = msg->add_task_executions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.TaskExecutionList.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TaskExecutionList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.TaskExecutionList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .flyteidl.admin.TaskExecution task_executions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_task_executions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.TaskExecutionList.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.TaskExecutionList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.TaskExecutionList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TaskExecutionList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.TaskExecutionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.admin.TaskExecution task_executions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->task_executions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->task_executions(static_cast<int>(i)),
      output);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.TaskExecutionList.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.TaskExecutionList)
}

::google::protobuf::uint8* TaskExecutionList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.TaskExecutionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.admin.TaskExecution task_executions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->task_executions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->task_executions(static_cast<int>(i)), target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.TaskExecutionList.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.TaskExecutionList)
  return target;
}

size_t TaskExecutionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.TaskExecutionList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.admin.TaskExecution task_executions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->task_executions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->task_executions(static_cast<int>(i)));
    }
  }

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskExecutionList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.TaskExecutionList)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskExecutionList* source =
      ::google::protobuf::DynamicCastToGenerated<TaskExecutionList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.TaskExecutionList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.TaskExecutionList)
    MergeFrom(*source);
  }
}

void TaskExecutionList::MergeFrom(const TaskExecutionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.TaskExecutionList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_executions_.MergeFrom(from.task_executions_);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void TaskExecutionList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.TaskExecutionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskExecutionList::CopyFrom(const TaskExecutionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.TaskExecutionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskExecutionList::IsInitialized() const {
  return true;
}

void TaskExecutionList::Swap(TaskExecutionList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskExecutionList::InternalSwap(TaskExecutionList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&task_executions_)->InternalSwap(CastToBase(&other->task_executions_));
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata TaskExecutionList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2ftask_5fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TaskExecutionClosure::InitAsDefaultInstance() {
  ::flyteidl::admin::_TaskExecutionClosure_default_instance_.output_uri_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::flyteidl::admin::_TaskExecutionClosure_default_instance_.error_ = const_cast< ::flyteidl::core::ExecutionError*>(
      ::flyteidl::core::ExecutionError::internal_default_instance());
  ::flyteidl::admin::_TaskExecutionClosure_default_instance_.output_data_ = const_cast< ::flyteidl::core::LiteralMap*>(
      ::flyteidl::core::LiteralMap::internal_default_instance());
  ::flyteidl::admin::_TaskExecutionClosure_default_instance_._instance.get_mutable()->started_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::flyteidl::admin::_TaskExecutionClosure_default_instance_._instance.get_mutable()->duration_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::flyteidl::admin::_TaskExecutionClosure_default_instance_._instance.get_mutable()->created_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::flyteidl::admin::_TaskExecutionClosure_default_instance_._instance.get_mutable()->updated_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::flyteidl::admin::_TaskExecutionClosure_default_instance_._instance.get_mutable()->custom_info_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
  ::flyteidl::admin::_TaskExecutionClosure_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::flyteidl::event::TaskExecutionMetadata*>(
      ::flyteidl::event::TaskExecutionMetadata::internal_default_instance());
}
class TaskExecutionClosure::HasBitSetters {
 public:
  static const ::flyteidl::core::ExecutionError& error(const TaskExecutionClosure* msg);
  static const ::flyteidl::core::LiteralMap& output_data(const TaskExecutionClosure* msg);
  static const ::google::protobuf::Timestamp& started_at(const TaskExecutionClosure* msg);
  static const ::google::protobuf::Duration& duration(const TaskExecutionClosure* msg);
  static const ::google::protobuf::Timestamp& created_at(const TaskExecutionClosure* msg);
  static const ::google::protobuf::Timestamp& updated_at(const TaskExecutionClosure* msg);
  static const ::google::protobuf::Struct& custom_info(const TaskExecutionClosure* msg);
  static const ::flyteidl::event::TaskExecutionMetadata& metadata(const TaskExecutionClosure* msg);
};

const ::flyteidl::core::ExecutionError&
TaskExecutionClosure::HasBitSetters::error(const TaskExecutionClosure* msg) {
  return *msg->output_result_.error_;
}
const ::flyteidl::core::LiteralMap&
TaskExecutionClosure::HasBitSetters::output_data(const TaskExecutionClosure* msg) {
  return *msg->output_result_.output_data_;
}
const ::google::protobuf::Timestamp&
TaskExecutionClosure::HasBitSetters::started_at(const TaskExecutionClosure* msg) {
  return *msg->started_at_;
}
const ::google::protobuf::Duration&
TaskExecutionClosure::HasBitSetters::duration(const TaskExecutionClosure* msg) {
  return *msg->duration_;
}
const ::google::protobuf::Timestamp&
TaskExecutionClosure::HasBitSetters::created_at(const TaskExecutionClosure* msg) {
  return *msg->created_at_;
}
const ::google::protobuf::Timestamp&
TaskExecutionClosure::HasBitSetters::updated_at(const TaskExecutionClosure* msg) {
  return *msg->updated_at_;
}
const ::google::protobuf::Struct&
TaskExecutionClosure::HasBitSetters::custom_info(const TaskExecutionClosure* msg) {
  return *msg->custom_info_;
}
const ::flyteidl::event::TaskExecutionMetadata&
TaskExecutionClosure::HasBitSetters::metadata(const TaskExecutionClosure* msg) {
  return *msg->metadata_;
}
void TaskExecutionClosure::set_allocated_error(::flyteidl::core::ExecutionError* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_output_result();
  if (error) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    output_result_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionClosure.error)
}
void TaskExecutionClosure::clear_error() {
  if (has_error()) {
    delete output_result_.error_;
    clear_has_output_result();
  }
}
void TaskExecutionClosure::set_allocated_output_data(::flyteidl::core::LiteralMap* output_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_output_result();
  if (output_data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      output_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, output_data, submessage_arena);
    }
    set_has_output_data();
    output_result_.output_data_ = output_data;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionClosure.output_data)
}
void TaskExecutionClosure::clear_output_data() {
  if (has_output_data()) {
    delete output_result_.output_data_;
    clear_has_output_result();
  }
}
void TaskExecutionClosure::clear_logs() {
  logs_.Clear();
}
void TaskExecutionClosure::clear_started_at() {
  if (GetArenaNoVirtual() == nullptr && started_at_ != nullptr) {
    delete started_at_;
  }
  started_at_ = nullptr;
}
void TaskExecutionClosure::clear_duration() {
  if (GetArenaNoVirtual() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
}
void TaskExecutionClosure::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void TaskExecutionClosure::clear_updated_at() {
  if (GetArenaNoVirtual() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
}
void TaskExecutionClosure::clear_custom_info() {
  if (GetArenaNoVirtual() == nullptr && custom_info_ != nullptr) {
    delete custom_info_;
  }
  custom_info_ = nullptr;
}
void TaskExecutionClosure::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskExecutionClosure::kOutputUriFieldNumber;
const int TaskExecutionClosure::kErrorFieldNumber;
const int TaskExecutionClosure::kOutputDataFieldNumber;
const int TaskExecutionClosure::kPhaseFieldNumber;
const int TaskExecutionClosure::kLogsFieldNumber;
const int TaskExecutionClosure::kStartedAtFieldNumber;
const int TaskExecutionClosure::kDurationFieldNumber;
const int TaskExecutionClosure::kCreatedAtFieldNumber;
const int TaskExecutionClosure::kUpdatedAtFieldNumber;
const int TaskExecutionClosure::kCustomInfoFieldNumber;
const int TaskExecutionClosure::kReasonFieldNumber;
const int TaskExecutionClosure::kTaskTypeFieldNumber;
const int TaskExecutionClosure::kMetadataFieldNumber;
const int TaskExecutionClosure::kEventVersionFieldNumber;
const int TaskExecutionClosure::kReasonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskExecutionClosure::TaskExecutionClosure()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.TaskExecutionClosure)
}
TaskExecutionClosure::TaskExecutionClosure(const TaskExecutionClosure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      logs_(from.logs_),
      reasons_(from.reasons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reason().size() > 0) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  task_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.task_type().size() > 0) {
    task_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_type_);
  }
  if (from.has_started_at()) {
    started_at_ = new ::google::protobuf::Timestamp(*from.started_at_);
  } else {
    started_at_ = nullptr;
  }
  if (from.has_duration()) {
    duration_ = new ::google::protobuf::Duration(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  if (from.has_created_at()) {
    created_at_ = new ::google::protobuf::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from.has_updated_at()) {
    updated_at_ = new ::google::protobuf::Timestamp(*from.updated_at_);
  } else {
    updated_at_ = nullptr;
  }
  if (from.has_custom_info()) {
    custom_info_ = new ::google::protobuf::Struct(*from.custom_info_);
  } else {
    custom_info_ = nullptr;
  }
  if (from.has_metadata()) {
    metadata_ = new ::flyteidl::event::TaskExecutionMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  ::memcpy(&phase_, &from.phase_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_version_) -
    reinterpret_cast<char*>(&phase_)) + sizeof(event_version_));
  clear_has_output_result();
  switch (from.output_result_case()) {
    case kOutputUri: {
      set_output_uri(from.output_uri());
      break;
    }
    case kError: {
      mutable_error()->::flyteidl::core::ExecutionError::MergeFrom(from.error());
      break;
    }
    case kOutputData: {
      mutable_output_data()->::flyteidl::core::LiteralMap::MergeFrom(from.output_data());
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskExecutionClosure)
}

void TaskExecutionClosure::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TaskExecutionClosure_flyteidl_2fadmin_2ftask_5fexecution_2eproto.base);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&started_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_version_) -
      reinterpret_cast<char*>(&started_at_)) + sizeof(event_version_));
  clear_has_output_result();
}

TaskExecutionClosure::~TaskExecutionClosure() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskExecutionClosure)
  SharedDtor();
}

void TaskExecutionClosure::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete started_at_;
  if (this != internal_default_instance()) delete duration_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete updated_at_;
  if (this != internal_default_instance()) delete custom_info_;
  if (this != internal_default_instance()) delete metadata_;
  if (has_output_result()) {
    clear_output_result();
  }
}

void TaskExecutionClosure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskExecutionClosure& TaskExecutionClosure::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TaskExecutionClosure_flyteidl_2fadmin_2ftask_5fexecution_2eproto.base);
  return *internal_default_instance();
}


void TaskExecutionClosure::clear_output_result() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.admin.TaskExecutionClosure)
  switch (output_result_case()) {
    case kOutputUri: {
      output_result_.output_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kError: {
      delete output_result_.error_;
      break;
    }
    case kOutputData: {
      delete output_result_.output_data_;
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OUTPUT_RESULT_NOT_SET;
}


void TaskExecutionClosure::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.TaskExecutionClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logs_.Clear();
  reasons_.Clear();
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && started_at_ != nullptr) {
    delete started_at_;
  }
  started_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && custom_info_ != nullptr) {
    delete custom_info_;
  }
  custom_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  ::memset(&phase_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_version_) -
      reinterpret_cast<char*>(&phase_)) + sizeof(event_version_));
  clear_output_result();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TaskExecutionClosure::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TaskExecutionClosure*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string output_uri = 1 [deprecated = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.TaskExecutionClosure.output_uri");
        object = msg->mutable_output_uri();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.core.ExecutionError error = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ExecutionError::_InternalParse;
        object = msg->mutable_error();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.TaskExecution.Phase phase = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_phase(static_cast<::flyteidl::core::TaskExecution_Phase>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .flyteidl.core.TaskLog logs = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::core::TaskLog::_InternalParse;
          object = msg->add_logs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // .google.protobuf.Timestamp started_at = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_started_at();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Duration duration = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Duration::_InternalParse;
        object = msg->mutable_duration();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp created_at = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_created_at();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp updated_at = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_updated_at();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Struct custom_info = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Struct::_InternalParse;
        object = msg->mutable_custom_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string reason = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.TaskExecutionClosure.reason");
        object = msg->mutable_reason();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string task_type = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.TaskExecutionClosure.task_type");
        object = msg->mutable_task_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.core.LiteralMap output_data = 12 [deprecated = true];
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::LiteralMap::_InternalParse;
        object = msg->mutable_output_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.event.TaskExecutionMetadata metadata = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::event::TaskExecutionMetadata::_InternalParse;
        object = msg->mutable_metadata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 event_version = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_event_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .flyteidl.admin.Reason reasons = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::admin::Reason::_InternalParse;
          object = msg->add_reasons();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 402 && (ptr += 2));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TaskExecutionClosure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.TaskExecutionClosure)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string output_uri = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output_uri().data(), static_cast<int>(this->output_uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.TaskExecutionClosure.output_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.ExecutionError error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.TaskExecution.Phase phase = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_phase(static_cast< ::flyteidl::core::TaskExecution_Phase >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.core.TaskLog logs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp started_at = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_started_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration duration = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp created_at = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_created_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp updated_at = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_updated_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct custom_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_custom_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reason = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.TaskExecutionClosure.reason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string task_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->task_type().data(), static_cast<int>(this->task_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.TaskExecutionClosure.task_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.LiteralMap output_data = 12 [deprecated = true];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_output_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.event.TaskExecutionMetadata metadata = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 event_version = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.admin.Reason reasons = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (146 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_reasons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.TaskExecutionClosure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.TaskExecutionClosure)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TaskExecutionClosure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.TaskExecutionClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string output_uri = 1 [deprecated = true];
  if (has_output_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_uri().data(), static_cast<int>(this->output_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.TaskExecutionClosure.output_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->output_uri(), output);
  }

  // .flyteidl.core.ExecutionError error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::error(this), output);
  }

  // .flyteidl.core.TaskExecution.Phase phase = 3;
  if (this->phase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->phase(), output);
  }

  // repeated .flyteidl.core.TaskLog logs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->logs(static_cast<int>(i)),
      output);
  }

  // .google.protobuf.Timestamp started_at = 5;
  if (this->has_started_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::started_at(this), output);
  }

  // .google.protobuf.Duration duration = 6;
  if (this->has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::duration(this), output);
  }

  // .google.protobuf.Timestamp created_at = 7;
  if (this->has_created_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::created_at(this), output);
  }

  // .google.protobuf.Timestamp updated_at = 8;
  if (this->has_updated_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::updated_at(this), output);
  }

  // .google.protobuf.Struct custom_info = 9;
  if (this->has_custom_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::custom_info(this), output);
  }

  // string reason = 10;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.TaskExecutionClosure.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->reason(), output);
  }

  // string task_type = 11;
  if (this->task_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->task_type().data(), static_cast<int>(this->task_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.TaskExecutionClosure.task_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->task_type(), output);
  }

  // .flyteidl.core.LiteralMap output_data = 12 [deprecated = true];
  if (has_output_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::output_data(this), output);
  }

  // .flyteidl.event.TaskExecutionMetadata metadata = 16;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::metadata(this), output);
  }

  // int32 event_version = 17;
  if (this->event_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->event_version(), output);
  }

  // repeated .flyteidl.admin.Reason reasons = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reasons_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18,
      this->reasons(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.TaskExecutionClosure)
}

::google::protobuf::uint8* TaskExecutionClosure::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.TaskExecutionClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string output_uri = 1 [deprecated = true];
  if (has_output_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_uri().data(), static_cast<int>(this->output_uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.TaskExecutionClosure.output_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->output_uri(), target);
  }

  // .flyteidl.core.ExecutionError error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::error(this), target);
  }

  // .flyteidl.core.TaskExecution.Phase phase = 3;
  if (this->phase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->phase(), target);
  }

  // repeated .flyteidl.core.TaskLog logs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->logs(static_cast<int>(i)), target);
  }

  // .google.protobuf.Timestamp started_at = 5;
  if (this->has_started_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::started_at(this), target);
  }

  // .google.protobuf.Duration duration = 6;
  if (this->has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::duration(this), target);
  }

  // .google.protobuf.Timestamp created_at = 7;
  if (this->has_created_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::created_at(this), target);
  }

  // .google.protobuf.Timestamp updated_at = 8;
  if (this->has_updated_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::updated_at(this), target);
  }

  // .google.protobuf.Struct custom_info = 9;
  if (this->has_custom_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::custom_info(this), target);
  }

  // string reason = 10;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.TaskExecutionClosure.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->reason(), target);
  }

  // string task_type = 11;
  if (this->task_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->task_type().data(), static_cast<int>(this->task_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.TaskExecutionClosure.task_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->task_type(), target);
  }

  // .flyteidl.core.LiteralMap output_data = 12 [deprecated = true];
  if (has_output_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::output_data(this), target);
  }

  // .flyteidl.event.TaskExecutionMetadata metadata = 16;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::metadata(this), target);
  }

  // int32 event_version = 17;
  if (this->event_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->event_version(), target);
  }

  // repeated .flyteidl.admin.Reason reasons = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reasons_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->reasons(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.TaskExecutionClosure)
  return target;
}

size_t TaskExecutionClosure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.TaskExecutionClosure)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.core.TaskLog logs = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->logs(static_cast<int>(i)));
    }
  }

  // repeated .flyteidl.admin.Reason reasons = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->reasons_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->reasons(static_cast<int>(i)));
    }
  }

  // string reason = 10;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  // string task_type = 11;
  if (this->task_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->task_type());
  }

  // .google.protobuf.Timestamp started_at = 5;
  if (this->has_started_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *started_at_);
  }

  // .google.protobuf.Duration duration = 6;
  if (this->has_duration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  // .google.protobuf.Timestamp created_at = 7;
  if (this->has_created_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp updated_at = 8;
  if (this->has_updated_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *updated_at_);
  }

  // .google.protobuf.Struct custom_info = 9;
  if (this->has_custom_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *custom_info_);
  }

  // .flyteidl.event.TaskExecutionMetadata metadata = 16;
  if (this->has_metadata()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .flyteidl.core.TaskExecution.Phase phase = 3;
  if (this->phase() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
  }

  // int32 event_version = 17;
  if (this->event_version() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->event_version());
  }

  switch (output_result_case()) {
    // string output_uri = 1 [deprecated = true];
    case kOutputUri: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output_uri());
      break;
    }
    // .flyteidl.core.ExecutionError error = 2;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *output_result_.error_);
      break;
    }
    // .flyteidl.core.LiteralMap output_data = 12 [deprecated = true];
    case kOutputData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *output_result_.output_data_);
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskExecutionClosure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.TaskExecutionClosure)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskExecutionClosure* source =
      ::google::protobuf::DynamicCastToGenerated<TaskExecutionClosure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.TaskExecutionClosure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.TaskExecutionClosure)
    MergeFrom(*source);
  }
}

void TaskExecutionClosure::MergeFrom(const TaskExecutionClosure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.TaskExecutionClosure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logs_.MergeFrom(from.logs_);
  reasons_.MergeFrom(from.reasons_);
  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.task_type().size() > 0) {

    task_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_type_);
  }
  if (from.has_started_at()) {
    mutable_started_at()->::google::protobuf::Timestamp::MergeFrom(from.started_at());
  }
  if (from.has_duration()) {
    mutable_duration()->::google::protobuf::Duration::MergeFrom(from.duration());
  }
  if (from.has_created_at()) {
    mutable_created_at()->::google::protobuf::Timestamp::MergeFrom(from.created_at());
  }
  if (from.has_updated_at()) {
    mutable_updated_at()->::google::protobuf::Timestamp::MergeFrom(from.updated_at());
  }
  if (from.has_custom_info()) {
    mutable_custom_info()->::google::protobuf::Struct::MergeFrom(from.custom_info());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::flyteidl::event::TaskExecutionMetadata::MergeFrom(from.metadata());
  }
  if (from.phase() != 0) {
    set_phase(from.phase());
  }
  if (from.event_version() != 0) {
    set_event_version(from.event_version());
  }
  switch (from.output_result_case()) {
    case kOutputUri: {
      set_output_uri(from.output_uri());
      break;
    }
    case kError: {
      mutable_error()->::flyteidl::core::ExecutionError::MergeFrom(from.error());
      break;
    }
    case kOutputData: {
      mutable_output_data()->::flyteidl::core::LiteralMap::MergeFrom(from.output_data());
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
}

void TaskExecutionClosure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.TaskExecutionClosure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskExecutionClosure::CopyFrom(const TaskExecutionClosure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.TaskExecutionClosure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskExecutionClosure::IsInitialized() const {
  return true;
}

void TaskExecutionClosure::Swap(TaskExecutionClosure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskExecutionClosure::InternalSwap(TaskExecutionClosure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&logs_)->InternalSwap(CastToBase(&other->logs_));
  CastToBase(&reasons_)->InternalSwap(CastToBase(&other->reasons_));
  reason_.Swap(&other->reason_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  task_type_.Swap(&other->task_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(started_at_, other->started_at_);
  swap(duration_, other->duration_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(custom_info_, other->custom_info_);
  swap(metadata_, other->metadata_);
  swap(phase_, other->phase_);
  swap(event_version_, other->event_version_);
  swap(output_result_, other->output_result_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata TaskExecutionClosure::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2ftask_5fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Reason::InitAsDefaultInstance() {
  ::flyteidl::admin::_Reason_default_instance_._instance.get_mutable()->occurred_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class Reason::HasBitSetters {
 public:
  static const ::google::protobuf::Timestamp& occurred_at(const Reason* msg);
};

const ::google::protobuf::Timestamp&
Reason::HasBitSetters::occurred_at(const Reason* msg) {
  return *msg->occurred_at_;
}
void Reason::clear_occurred_at() {
  if (GetArenaNoVirtual() == nullptr && occurred_at_ != nullptr) {
    delete occurred_at_;
  }
  occurred_at_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reason::kOccurredAtFieldNumber;
const int Reason::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reason::Reason()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.Reason)
}
Reason::Reason(const Reason& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_occurred_at()) {
    occurred_at_ = new ::google::protobuf::Timestamp(*from.occurred_at_);
  } else {
    occurred_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Reason)
}

void Reason::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Reason_flyteidl_2fadmin_2ftask_5fexecution_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  occurred_at_ = nullptr;
}

Reason::~Reason() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Reason)
  SharedDtor();
}

void Reason::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete occurred_at_;
}

void Reason::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Reason& Reason::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Reason_flyteidl_2fadmin_2ftask_5fexecution_2eproto.base);
  return *internal_default_instance();
}


void Reason::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.Reason)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && occurred_at_ != nullptr) {
    delete occurred_at_;
  }
  occurred_at_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Reason::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Reason*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp occurred_at = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_occurred_at();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string message = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.Reason.message");
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Reason::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.Reason)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Timestamp occurred_at = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_occurred_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.Reason.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.Reason)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.Reason)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Reason::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.Reason)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp occurred_at = 1;
  if (this->has_occurred_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::occurred_at(this), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Reason.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.Reason)
}

::google::protobuf::uint8* Reason::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.Reason)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp occurred_at = 1;
  if (this->has_occurred_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::occurred_at(this), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Reason.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.Reason)
  return target;
}

size_t Reason::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.Reason)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // .google.protobuf.Timestamp occurred_at = 1;
  if (this->has_occurred_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *occurred_at_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Reason::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.Reason)
  GOOGLE_DCHECK_NE(&from, this);
  const Reason* source =
      ::google::protobuf::DynamicCastToGenerated<Reason>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.Reason)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.Reason)
    MergeFrom(*source);
  }
}

void Reason::MergeFrom(const Reason& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.Reason)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_occurred_at()) {
    mutable_occurred_at()->::google::protobuf::Timestamp::MergeFrom(from.occurred_at());
  }
}

void Reason::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.Reason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reason::CopyFrom(const Reason& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.Reason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reason::IsInitialized() const {
  return true;
}

void Reason::Swap(Reason* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Reason::InternalSwap(Reason* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(occurred_at_, other->occurred_at_);
}

::google::protobuf::Metadata Reason::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2ftask_5fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TaskExecutionGetDataRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_TaskExecutionGetDataRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::TaskExecutionIdentifier*>(
      ::flyteidl::core::TaskExecutionIdentifier::internal_default_instance());
}
class TaskExecutionGetDataRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::TaskExecutionIdentifier& id(const TaskExecutionGetDataRequest* msg);
};

const ::flyteidl::core::TaskExecutionIdentifier&
TaskExecutionGetDataRequest::HasBitSetters::id(const TaskExecutionGetDataRequest* msg) {
  return *msg->id_;
}
void TaskExecutionGetDataRequest::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskExecutionGetDataRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskExecutionGetDataRequest::TaskExecutionGetDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.TaskExecutionGetDataRequest)
}
TaskExecutionGetDataRequest::TaskExecutionGetDataRequest(const TaskExecutionGetDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::TaskExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskExecutionGetDataRequest)
}

void TaskExecutionGetDataRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TaskExecutionGetDataRequest_flyteidl_2fadmin_2ftask_5fexecution_2eproto.base);
  id_ = nullptr;
}

TaskExecutionGetDataRequest::~TaskExecutionGetDataRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskExecutionGetDataRequest)
  SharedDtor();
}

void TaskExecutionGetDataRequest::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void TaskExecutionGetDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskExecutionGetDataRequest& TaskExecutionGetDataRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TaskExecutionGetDataRequest_flyteidl_2fadmin_2ftask_5fexecution_2eproto.base);
  return *internal_default_instance();
}


void TaskExecutionGetDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.TaskExecutionGetDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TaskExecutionGetDataRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TaskExecutionGetDataRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.TaskExecutionIdentifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::TaskExecutionIdentifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TaskExecutionGetDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.TaskExecutionGetDataRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.TaskExecutionIdentifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.TaskExecutionGetDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.TaskExecutionGetDataRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TaskExecutionGetDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.TaskExecutionGetDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.TaskExecutionIdentifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.TaskExecutionGetDataRequest)
}

::google::protobuf::uint8* TaskExecutionGetDataRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.TaskExecutionGetDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.TaskExecutionIdentifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.TaskExecutionGetDataRequest)
  return target;
}

size_t TaskExecutionGetDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.TaskExecutionGetDataRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.TaskExecutionIdentifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskExecutionGetDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.TaskExecutionGetDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskExecutionGetDataRequest* source =
      ::google::protobuf::DynamicCastToGenerated<TaskExecutionGetDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.TaskExecutionGetDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.TaskExecutionGetDataRequest)
    MergeFrom(*source);
  }
}

void TaskExecutionGetDataRequest::MergeFrom(const TaskExecutionGetDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.TaskExecutionGetDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::TaskExecutionIdentifier::MergeFrom(from.id());
  }
}

void TaskExecutionGetDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.TaskExecutionGetDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskExecutionGetDataRequest::CopyFrom(const TaskExecutionGetDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.TaskExecutionGetDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskExecutionGetDataRequest::IsInitialized() const {
  return true;
}

void TaskExecutionGetDataRequest::Swap(TaskExecutionGetDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskExecutionGetDataRequest::InternalSwap(TaskExecutionGetDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata TaskExecutionGetDataRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2ftask_5fexecution_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TaskExecutionGetDataResponse::InitAsDefaultInstance() {
  ::flyteidl::admin::_TaskExecutionGetDataResponse_default_instance_._instance.get_mutable()->inputs_ = const_cast< ::flyteidl::admin::UrlBlob*>(
      ::flyteidl::admin::UrlBlob::internal_default_instance());
  ::flyteidl::admin::_TaskExecutionGetDataResponse_default_instance_._instance.get_mutable()->outputs_ = const_cast< ::flyteidl::admin::UrlBlob*>(
      ::flyteidl::admin::UrlBlob::internal_default_instance());
  ::flyteidl::admin::_TaskExecutionGetDataResponse_default_instance_._instance.get_mutable()->full_inputs_ = const_cast< ::flyteidl::core::LiteralMap*>(
      ::flyteidl::core::LiteralMap::internal_default_instance());
  ::flyteidl::admin::_TaskExecutionGetDataResponse_default_instance_._instance.get_mutable()->full_outputs_ = const_cast< ::flyteidl::core::LiteralMap*>(
      ::flyteidl::core::LiteralMap::internal_default_instance());
}
class TaskExecutionGetDataResponse::HasBitSetters {
 public:
  static const ::flyteidl::admin::UrlBlob& inputs(const TaskExecutionGetDataResponse* msg);
  static const ::flyteidl::admin::UrlBlob& outputs(const TaskExecutionGetDataResponse* msg);
  static const ::flyteidl::core::LiteralMap& full_inputs(const TaskExecutionGetDataResponse* msg);
  static const ::flyteidl::core::LiteralMap& full_outputs(const TaskExecutionGetDataResponse* msg);
};

const ::flyteidl::admin::UrlBlob&
TaskExecutionGetDataResponse::HasBitSetters::inputs(const TaskExecutionGetDataResponse* msg) {
  return *msg->inputs_;
}
const ::flyteidl::admin::UrlBlob&
TaskExecutionGetDataResponse::HasBitSetters::outputs(const TaskExecutionGetDataResponse* msg) {
  return *msg->outputs_;
}
const ::flyteidl::core::LiteralMap&
TaskExecutionGetDataResponse::HasBitSetters::full_inputs(const TaskExecutionGetDataResponse* msg) {
  return *msg->full_inputs_;
}
const ::flyteidl::core::LiteralMap&
TaskExecutionGetDataResponse::HasBitSetters::full_outputs(const TaskExecutionGetDataResponse* msg) {
  return *msg->full_outputs_;
}
void TaskExecutionGetDataResponse::clear_inputs() {
  if (GetArenaNoVirtual() == nullptr && inputs_ != nullptr) {
    delete inputs_;
  }
  inputs_ = nullptr;
}
void TaskExecutionGetDataResponse::clear_outputs() {
  if (GetArenaNoVirtual() == nullptr && outputs_ != nullptr) {
    delete outputs_;
  }
  outputs_ = nullptr;
}
void TaskExecutionGetDataResponse::clear_full_inputs() {
  if (GetArenaNoVirtual() == nullptr && full_inputs_ != nullptr) {
    delete full_inputs_;
  }
  full_inputs_ = nullptr;
}
void TaskExecutionGetDataResponse::clear_full_outputs() {
  if (GetArenaNoVirtual() == nullptr && full_outputs_ != nullptr) {
    delete full_outputs_;
  }
  full_outputs_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskExecutionGetDataResponse::kInputsFieldNumber;
const int TaskExecutionGetDataResponse::kOutputsFieldNumber;
const int TaskExecutionGetDataResponse::kFullInputsFieldNumber;
const int TaskExecutionGetDataResponse::kFullOutputsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskExecutionGetDataResponse::TaskExecutionGetDataResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.TaskExecutionGetDataResponse)
}
TaskExecutionGetDataResponse::TaskExecutionGetDataResponse(const TaskExecutionGetDataResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_inputs()) {
    inputs_ = new ::flyteidl::admin::UrlBlob(*from.inputs_);
  } else {
    inputs_ = nullptr;
  }
  if (from.has_outputs()) {
    outputs_ = new ::flyteidl::admin::UrlBlob(*from.outputs_);
  } else {
    outputs_ = nullptr;
  }
  if (from.has_full_inputs()) {
    full_inputs_ = new ::flyteidl::core::LiteralMap(*from.full_inputs_);
  } else {
    full_inputs_ = nullptr;
  }
  if (from.has_full_outputs()) {
    full_outputs_ = new ::flyteidl::core::LiteralMap(*from.full_outputs_);
  } else {
    full_outputs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskExecutionGetDataResponse)
}

void TaskExecutionGetDataResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TaskExecutionGetDataResponse_flyteidl_2fadmin_2ftask_5fexecution_2eproto.base);
  ::memset(&inputs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&full_outputs_) -
      reinterpret_cast<char*>(&inputs_)) + sizeof(full_outputs_));
}

TaskExecutionGetDataResponse::~TaskExecutionGetDataResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskExecutionGetDataResponse)
  SharedDtor();
}

void TaskExecutionGetDataResponse::SharedDtor() {
  if (this != internal_default_instance()) delete inputs_;
  if (this != internal_default_instance()) delete outputs_;
  if (this != internal_default_instance()) delete full_inputs_;
  if (this != internal_default_instance()) delete full_outputs_;
}

void TaskExecutionGetDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskExecutionGetDataResponse& TaskExecutionGetDataResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TaskExecutionGetDataResponse_flyteidl_2fadmin_2ftask_5fexecution_2eproto.base);
  return *internal_default_instance();
}


void TaskExecutionGetDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.TaskExecutionGetDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && inputs_ != nullptr) {
    delete inputs_;
  }
  inputs_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && outputs_ != nullptr) {
    delete outputs_;
  }
  outputs_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && full_inputs_ != nullptr) {
    delete full_inputs_;
  }
  full_inputs_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && full_outputs_ != nullptr) {
    delete full_outputs_;
  }
  full_outputs_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TaskExecutionGetDataResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TaskExecutionGetDataResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.admin.UrlBlob inputs = 1 [deprecated = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::UrlBlob::_InternalParse;
        object = msg->mutable_inputs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.UrlBlob outputs = 2 [deprecated = true];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::UrlBlob::_InternalParse;
        object = msg->mutable_outputs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.LiteralMap full_inputs = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::LiteralMap::_InternalParse;
        object = msg->mutable_full_inputs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.LiteralMap full_outputs = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::LiteralMap::_InternalParse;
        object = msg->mutable_full_outputs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TaskExecutionGetDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.TaskExecutionGetDataResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.admin.UrlBlob inputs = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.UrlBlob outputs = 2 [deprecated = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.LiteralMap full_inputs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_full_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.LiteralMap full_outputs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_full_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.TaskExecutionGetDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.TaskExecutionGetDataResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TaskExecutionGetDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.TaskExecutionGetDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.UrlBlob inputs = 1 [deprecated = true];
  if (this->has_inputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::inputs(this), output);
  }

  // .flyteidl.admin.UrlBlob outputs = 2 [deprecated = true];
  if (this->has_outputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::outputs(this), output);
  }

  // .flyteidl.core.LiteralMap full_inputs = 3;
  if (this->has_full_inputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::full_inputs(this), output);
  }

  // .flyteidl.core.LiteralMap full_outputs = 4;
  if (this->has_full_outputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::full_outputs(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.TaskExecutionGetDataResponse)
}

::google::protobuf::uint8* TaskExecutionGetDataResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.TaskExecutionGetDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.UrlBlob inputs = 1 [deprecated = true];
  if (this->has_inputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::inputs(this), target);
  }

  // .flyteidl.admin.UrlBlob outputs = 2 [deprecated = true];
  if (this->has_outputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::outputs(this), target);
  }

  // .flyteidl.core.LiteralMap full_inputs = 3;
  if (this->has_full_inputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::full_inputs(this), target);
  }

  // .flyteidl.core.LiteralMap full_outputs = 4;
  if (this->has_full_outputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::full_outputs(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.TaskExecutionGetDataResponse)
  return target;
}

size_t TaskExecutionGetDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.TaskExecutionGetDataResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.admin.UrlBlob inputs = 1 [deprecated = true];
  if (this->has_inputs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *inputs_);
  }

  // .flyteidl.admin.UrlBlob outputs = 2 [deprecated = true];
  if (this->has_outputs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *outputs_);
  }

  // .flyteidl.core.LiteralMap full_inputs = 3;
  if (this->has_full_inputs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *full_inputs_);
  }

  // .flyteidl.core.LiteralMap full_outputs = 4;
  if (this->has_full_outputs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *full_outputs_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskExecutionGetDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.TaskExecutionGetDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskExecutionGetDataResponse* source =
      ::google::protobuf::DynamicCastToGenerated<TaskExecutionGetDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.TaskExecutionGetDataResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.TaskExecutionGetDataResponse)
    MergeFrom(*source);
  }
}

void TaskExecutionGetDataResponse::MergeFrom(const TaskExecutionGetDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.TaskExecutionGetDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_inputs()) {
    mutable_inputs()->::flyteidl::admin::UrlBlob::MergeFrom(from.inputs());
  }
  if (from.has_outputs()) {
    mutable_outputs()->::flyteidl::admin::UrlBlob::MergeFrom(from.outputs());
  }
  if (from.has_full_inputs()) {
    mutable_full_inputs()->::flyteidl::core::LiteralMap::MergeFrom(from.full_inputs());
  }
  if (from.has_full_outputs()) {
    mutable_full_outputs()->::flyteidl::core::LiteralMap::MergeFrom(from.full_outputs());
  }
}

void TaskExecutionGetDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.TaskExecutionGetDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskExecutionGetDataResponse::CopyFrom(const TaskExecutionGetDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.TaskExecutionGetDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskExecutionGetDataResponse::IsInitialized() const {
  return true;
}

void TaskExecutionGetDataResponse::Swap(TaskExecutionGetDataResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskExecutionGetDataResponse::InternalSwap(TaskExecutionGetDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(inputs_, other->inputs_);
  swap(outputs_, other->outputs_);
  swap(full_inputs_, other->full_inputs_);
  swap(full_outputs_, other->full_outputs_);
}

::google::protobuf::Metadata TaskExecutionGetDataResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2ftask_5fexecution_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2ftask_5fexecution_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskExecutionGetRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskExecutionGetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::TaskExecutionGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskExecutionListRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskExecutionListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::TaskExecutionListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskExecution* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskExecution >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::TaskExecution >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskExecutionList* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskExecutionList >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::TaskExecutionList >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskExecutionClosure* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskExecutionClosure >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::TaskExecutionClosure >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Reason* Arena::CreateMaybeMessage< ::flyteidl::admin::Reason >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::Reason >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskExecutionGetDataRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskExecutionGetDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::TaskExecutionGetDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskExecutionGetDataResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskExecutionGetDataResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::TaskExecutionGetDataResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
