// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/plugins/dask.proto

package plugins

import (
	fmt "fmt"
	core "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Custom Proto for Dask Plugin.
type DaskJob struct {
	// Spec for the scheduler pod.
	Scheduler *DaskScheduler `protobuf:"bytes,1,opt,name=scheduler,proto3" json:"scheduler,omitempty"`
	// Spec of the default worker group.
	Workers              *DaskWorkerGroup `protobuf:"bytes,2,opt,name=workers,proto3" json:"workers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DaskJob) Reset()         { *m = DaskJob{} }
func (m *DaskJob) String() string { return proto.CompactTextString(m) }
func (*DaskJob) ProtoMessage()    {}
func (*DaskJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_d719e18eb4f4b89f, []int{0}
}

func (m *DaskJob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DaskJob.Unmarshal(m, b)
}
func (m *DaskJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DaskJob.Marshal(b, m, deterministic)
}
func (m *DaskJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DaskJob.Merge(m, src)
}
func (m *DaskJob) XXX_Size() int {
	return xxx_messageInfo_DaskJob.Size(m)
}
func (m *DaskJob) XXX_DiscardUnknown() {
	xxx_messageInfo_DaskJob.DiscardUnknown(m)
}

var xxx_messageInfo_DaskJob proto.InternalMessageInfo

func (m *DaskJob) GetScheduler() *DaskScheduler {
	if m != nil {
		return m.Scheduler
	}
	return nil
}

func (m *DaskJob) GetWorkers() *DaskWorkerGroup {
	if m != nil {
		return m.Workers
	}
	return nil
}

// Specification for the scheduler pod.
type DaskScheduler struct {
	// Optional image to use. If unset, will use the default image.
	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// Resources assigned to the scheduler pod.
	Resources            *core.Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DaskScheduler) Reset()         { *m = DaskScheduler{} }
func (m *DaskScheduler) String() string { return proto.CompactTextString(m) }
func (*DaskScheduler) ProtoMessage()    {}
func (*DaskScheduler) Descriptor() ([]byte, []int) {
	return fileDescriptor_d719e18eb4f4b89f, []int{1}
}

func (m *DaskScheduler) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DaskScheduler.Unmarshal(m, b)
}
func (m *DaskScheduler) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DaskScheduler.Marshal(b, m, deterministic)
}
func (m *DaskScheduler) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DaskScheduler.Merge(m, src)
}
func (m *DaskScheduler) XXX_Size() int {
	return xxx_messageInfo_DaskScheduler.Size(m)
}
func (m *DaskScheduler) XXX_DiscardUnknown() {
	xxx_messageInfo_DaskScheduler.DiscardUnknown(m)
}

var xxx_messageInfo_DaskScheduler proto.InternalMessageInfo

func (m *DaskScheduler) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *DaskScheduler) GetResources() *core.Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

type DaskWorkerGroup struct {
	// Number of workers in the group.
	NumberOfWorkers uint32 `protobuf:"varint,1,opt,name=number_of_workers,json=numberOfWorkers,proto3" json:"number_of_workers,omitempty"`
	// Optional image to use for the pods of the worker group. If unset, will use the default image.
	Image string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// Resources assigned to the all pods of the worker group.
	// As per https://kubernetes.dask.org/en/latest/kubecluster.html?highlight=limit#best-practices
	// it is advised to only set limits. If requests are not explicitly set, the plugin will make
	// sure to set requests==limits.
	// The plugin sets ` --memory-limit` as well as `--nthreads` for the workers according to the limit.
	Resources            *core.Resources `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DaskWorkerGroup) Reset()         { *m = DaskWorkerGroup{} }
func (m *DaskWorkerGroup) String() string { return proto.CompactTextString(m) }
func (*DaskWorkerGroup) ProtoMessage()    {}
func (*DaskWorkerGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_d719e18eb4f4b89f, []int{2}
}

func (m *DaskWorkerGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DaskWorkerGroup.Unmarshal(m, b)
}
func (m *DaskWorkerGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DaskWorkerGroup.Marshal(b, m, deterministic)
}
func (m *DaskWorkerGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DaskWorkerGroup.Merge(m, src)
}
func (m *DaskWorkerGroup) XXX_Size() int {
	return xxx_messageInfo_DaskWorkerGroup.Size(m)
}
func (m *DaskWorkerGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_DaskWorkerGroup.DiscardUnknown(m)
}

var xxx_messageInfo_DaskWorkerGroup proto.InternalMessageInfo

func (m *DaskWorkerGroup) GetNumberOfWorkers() uint32 {
	if m != nil {
		return m.NumberOfWorkers
	}
	return 0
}

func (m *DaskWorkerGroup) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *DaskWorkerGroup) GetResources() *core.Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func init() {
	proto.RegisterType((*DaskJob)(nil), "flyteidl.plugins.DaskJob")
	proto.RegisterType((*DaskScheduler)(nil), "flyteidl.plugins.DaskScheduler")
	proto.RegisterType((*DaskWorkerGroup)(nil), "flyteidl.plugins.DaskWorkerGroup")
}

func init() { proto.RegisterFile("flyteidl/plugins/dask.proto", fileDescriptor_d719e18eb4f4b89f) }

var fileDescriptor_d719e18eb4f4b89f = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x4f, 0x4b, 0xc4, 0x30,
	0x14, 0xc4, 0xe9, 0x8a, 0x2e, 0x8d, 0x2c, 0xab, 0xc1, 0x43, 0xd5, 0x83, 0xda, 0x93, 0x08, 0x26,
	0xa0, 0xa0, 0x88, 0x78, 0x11, 0x41, 0xf0, 0x22, 0xc4, 0x83, 0x20, 0xc8, 0xd2, 0x3f, 0x69, 0xb6,
	0xf4, 0xcf, 0x2b, 0x2f, 0x0d, 0xe2, 0x07, 0xf0, 0xe4, 0x97, 0x96, 0xa6, 0x66, 0x8b, 0x45, 0xc1,
	0x63, 0x98, 0xdf, 0xbc, 0x99, 0x30, 0x64, 0x3f, 0x2b, 0xdf, 0x5b, 0x99, 0xa7, 0x25, 0x6f, 0x4a,
	0xa3, 0xf2, 0x5a, 0xf3, 0x34, 0xd2, 0x05, 0x6b, 0x10, 0x5a, 0xa0, 0x5b, 0x4e, 0x64, 0xdf, 0xe2,
	0xde, 0xee, 0x0a, 0x4f, 0x00, 0x25, 0x6f, 0x23, 0x5d, 0xe8, 0x1e, 0x0e, 0x3f, 0x3c, 0x32, 0xbd,
	0x8b, 0x74, 0xf1, 0x00, 0x31, 0xbd, 0x21, 0xbe, 0x4e, 0x96, 0x32, 0x35, 0xa5, 0xc4, 0xc0, 0x3b,
	0xf4, 0x8e, 0x37, 0xcf, 0x0e, 0xd8, 0xf8, 0x18, 0xeb, 0xe8, 0x27, 0x87, 0x89, 0xc1, 0x41, 0xaf,
	0xc9, 0xf4, 0x0d, 0xb0, 0x90, 0xa8, 0x83, 0x89, 0x35, 0x1f, 0xfd, 0x6e, 0x7e, 0xb6, 0xd0, 0x3d,
	0x82, 0x69, 0x84, 0x73, 0x84, 0xaf, 0x64, 0xf6, 0xe3, 0x30, 0xdd, 0x21, 0xeb, 0x79, 0x15, 0x29,
	0x69, 0x8b, 0xf8, 0xa2, 0x7f, 0xd0, 0x0b, 0xe2, 0xa3, 0xd4, 0x60, 0x30, 0x91, 0x2e, 0x25, 0x18,
	0x52, 0xba, 0xdf, 0x31, 0xe1, 0x74, 0x31, 0xa0, 0xe1, 0xa7, 0x47, 0xe6, 0xa3, 0x6c, 0x7a, 0x42,
	0xb6, 0x6b, 0x53, 0xc5, 0x12, 0x17, 0x90, 0x2d, 0x5c, 0xf3, 0x2e, 0x6d, 0x26, 0xe6, 0xbd, 0xf0,
	0x98, 0xf5, 0xbc, 0x1e, 0xda, 0x4c, 0xfe, 0x6c, 0xb3, 0xf6, 0xef, 0x36, 0xb7, 0x57, 0x2f, 0x97,
	0x2a, 0x6f, 0x97, 0x26, 0x66, 0x09, 0x54, 0xdc, 0x1a, 0x00, 0x15, 0x5f, 0xad, 0xa4, 0x64, 0xcd,
	0x9b, 0xf8, 0x54, 0x01, 0x1f, 0xef, 0x1c, 0x6f, 0xd8, 0xd9, 0xce, 0xbf, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x4c, 0xea, 0xa6, 0xac, 0x02, 0x02, 0x00, 0x00,
}
