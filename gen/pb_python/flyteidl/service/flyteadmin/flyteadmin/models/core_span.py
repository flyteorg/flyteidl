# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyteadmin.models.core_node_execution_identifier import CoreNodeExecutionIdentifier  # noqa: F401,E501
from flyteadmin.models.core_span import CoreSpan  # noqa: F401,E501
from flyteadmin.models.core_task_execution_identifier import CoreTaskExecutionIdentifier  # noqa: F401,E501
from flyteadmin.models.core_workflow_execution_identifier import CoreWorkflowExecutionIdentifier  # noqa: F401,E501


class CoreSpan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_time': 'datetime',
        'end_time': 'datetime',
        'workflow_id': 'CoreWorkflowExecutionIdentifier',
        'node_id': 'CoreNodeExecutionIdentifier',
        'task_id': 'CoreTaskExecutionIdentifier',
        'operation_id': 'str',
        'spans': 'list[CoreSpan]'
    }

    attribute_map = {
        'start_time': 'start_time',
        'end_time': 'end_time',
        'workflow_id': 'workflow_id',
        'node_id': 'node_id',
        'task_id': 'task_id',
        'operation_id': 'operation_id',
        'spans': 'spans'
    }

    def __init__(self, start_time=None, end_time=None, workflow_id=None, node_id=None, task_id=None, operation_id=None, spans=None):  # noqa: E501
        """CoreSpan - a model defined in Swagger"""  # noqa: E501

        self._start_time = None
        self._end_time = None
        self._workflow_id = None
        self._node_id = None
        self._task_id = None
        self._operation_id = None
        self._spans = None
        self.discriminator = None

        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if workflow_id is not None:
            self.workflow_id = workflow_id
        if node_id is not None:
            self.node_id = node_id
        if task_id is not None:
            self.task_id = task_id
        if operation_id is not None:
            self.operation_id = operation_id
        if spans is not None:
            self.spans = spans

    @property
    def start_time(self):
        """Gets the start_time of this CoreSpan.  # noqa: E501

        start_time defines the instance this span began.  # noqa: E501

        :return: The start_time of this CoreSpan.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this CoreSpan.

        start_time defines the instance this span began.  # noqa: E501

        :param start_time: The start_time of this CoreSpan.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this CoreSpan.  # noqa: E501

        end_time defines the instance this span completed.  # noqa: E501

        :return: The end_time of this CoreSpan.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this CoreSpan.

        end_time defines the instance this span completed.  # noqa: E501

        :param end_time: The end_time of this CoreSpan.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def workflow_id(self):
        """Gets the workflow_id of this CoreSpan.  # noqa: E501

        workflow_id is the id of the workflow execution this Span represents.  # noqa: E501

        :return: The workflow_id of this CoreSpan.  # noqa: E501
        :rtype: CoreWorkflowExecutionIdentifier
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this CoreSpan.

        workflow_id is the id of the workflow execution this Span represents.  # noqa: E501

        :param workflow_id: The workflow_id of this CoreSpan.  # noqa: E501
        :type: CoreWorkflowExecutionIdentifier
        """

        self._workflow_id = workflow_id

    @property
    def node_id(self):
        """Gets the node_id of this CoreSpan.  # noqa: E501

        node_id is the id of the node execution this Span represents.  # noqa: E501

        :return: The node_id of this CoreSpan.  # noqa: E501
        :rtype: CoreNodeExecutionIdentifier
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this CoreSpan.

        node_id is the id of the node execution this Span represents.  # noqa: E501

        :param node_id: The node_id of this CoreSpan.  # noqa: E501
        :type: CoreNodeExecutionIdentifier
        """

        self._node_id = node_id

    @property
    def task_id(self):
        """Gets the task_id of this CoreSpan.  # noqa: E501

        task_id is the id of the task execution this Span represents.  # noqa: E501

        :return: The task_id of this CoreSpan.  # noqa: E501
        :rtype: CoreTaskExecutionIdentifier
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this CoreSpan.

        task_id is the id of the task execution this Span represents.  # noqa: E501

        :param task_id: The task_id of this CoreSpan.  # noqa: E501
        :type: CoreTaskExecutionIdentifier
        """

        self._task_id = task_id

    @property
    def operation_id(self):
        """Gets the operation_id of this CoreSpan.  # noqa: E501

        operation_id is the id of a unique operation that this Span represents.  # noqa: E501

        :return: The operation_id of this CoreSpan.  # noqa: E501
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this CoreSpan.

        operation_id is the id of a unique operation that this Span represents.  # noqa: E501

        :param operation_id: The operation_id of this CoreSpan.  # noqa: E501
        :type: str
        """

        self._operation_id = operation_id

    @property
    def spans(self):
        """Gets the spans of this CoreSpan.  # noqa: E501

        spans defines a collection of Spans that breakdown this execution.  # noqa: E501

        :return: The spans of this CoreSpan.  # noqa: E501
        :rtype: list[CoreSpan]
        """
        return self._spans

    @spans.setter
    def spans(self, spans):
        """Sets the spans of this CoreSpan.

        spans defines a collection of Spans that breakdown this execution.  # noqa: E501

        :param spans: The spans of this CoreSpan.  # noqa: E501
        :type: list[CoreSpan]
        """

        self._spans = spans

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoreSpan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreSpan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
