// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/types.proto

package com.flyteidl.core;

public interface StructuredDatasetTypeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:flyteidl.core.StructuredDatasetType)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * A list of ordered columns this schema comprises of.
   * </pre>
   *
   * <code>repeated .flyteidl.core.StructuredDatasetType.DatasetColumn columns = 1 [json_name = "columns"];</code>
   */
  java.util.List<com.flyteidl.core.StructuredDatasetType.DatasetColumn> 
      getColumnsList();
  /**
   * <pre>
   * A list of ordered columns this schema comprises of.
   * </pre>
   *
   * <code>repeated .flyteidl.core.StructuredDatasetType.DatasetColumn columns = 1 [json_name = "columns"];</code>
   */
  com.flyteidl.core.StructuredDatasetType.DatasetColumn getColumns(int index);
  /**
   * <pre>
   * A list of ordered columns this schema comprises of.
   * </pre>
   *
   * <code>repeated .flyteidl.core.StructuredDatasetType.DatasetColumn columns = 1 [json_name = "columns"];</code>
   */
  int getColumnsCount();
  /**
   * <pre>
   * A list of ordered columns this schema comprises of.
   * </pre>
   *
   * <code>repeated .flyteidl.core.StructuredDatasetType.DatasetColumn columns = 1 [json_name = "columns"];</code>
   */
  java.util.List<? extends com.flyteidl.core.StructuredDatasetType.DatasetColumnOrBuilder> 
      getColumnsOrBuilderList();
  /**
   * <pre>
   * A list of ordered columns this schema comprises of.
   * </pre>
   *
   * <code>repeated .flyteidl.core.StructuredDatasetType.DatasetColumn columns = 1 [json_name = "columns"];</code>
   */
  com.flyteidl.core.StructuredDatasetType.DatasetColumnOrBuilder getColumnsOrBuilder(
      int index);

  /**
   * <pre>
   * This is the storage format, the format of the bits at rest
   * parquet, feather, csv, etc.
   * For two types to be compatible, the format will need to be an exact match.
   * </pre>
   *
   * <code>string format = 2 [json_name = "format"];</code>
   * @return The format.
   */
  java.lang.String getFormat();
  /**
   * <pre>
   * This is the storage format, the format of the bits at rest
   * parquet, feather, csv, etc.
   * For two types to be compatible, the format will need to be an exact match.
   * </pre>
   *
   * <code>string format = 2 [json_name = "format"];</code>
   * @return The bytes for format.
   */
  com.google.protobuf.ByteString
      getFormatBytes();

  /**
   * <pre>
   * This is a string representing the type that the bytes in external_schema_bytes are formatted in.
   * This is an optional field that will not be used for type checking.
   * </pre>
   *
   * <code>string external_schema_type = 3 [json_name = "externalSchemaType"];</code>
   * @return The externalSchemaType.
   */
  java.lang.String getExternalSchemaType();
  /**
   * <pre>
   * This is a string representing the type that the bytes in external_schema_bytes are formatted in.
   * This is an optional field that will not be used for type checking.
   * </pre>
   *
   * <code>string external_schema_type = 3 [json_name = "externalSchemaType"];</code>
   * @return The bytes for externalSchemaType.
   */
  com.google.protobuf.ByteString
      getExternalSchemaTypeBytes();

  /**
   * <pre>
   * The serialized bytes of a third-party schema library like Arrow.
   * This is an optional field that will not be used for type checking.
   * </pre>
   *
   * <code>bytes external_schema_bytes = 4 [json_name = "externalSchemaBytes"];</code>
   * @return The externalSchemaBytes.
   */
  com.google.protobuf.ByteString getExternalSchemaBytes();
}
