// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/array_job.proto

package com.flyteidl.plugins;

public final class ArrayJobProto {
  private ArrayJobProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ArrayJobOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.plugins.ArrayJob)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Defines the minimum number of instances to bring up concurrently at any given point. Note that this is an
     * optimistic restriction and that, due to network partitioning or other failures, the actual number of currently
     * running instances might be more. This has to be a positive number if assigned. Default value is size.
     * </pre>
     *
     * <code>int64 parallelism = 1 [json_name = "parallelism"];</code>
     * @return The parallelism.
     */
    long getParallelism();

    /**
     * <pre>
     * Defines the number of instances to launch at most. This number should match the size of the input if the job
     * requires processing of all input data. This has to be a positive number.
     * In the case this is not defined, the back-end will determine the size at run-time by reading the inputs.
     * </pre>
     *
     * <code>int64 size = 2 [json_name = "size"];</code>
     * @return The size.
     */
    long getSize();

    /**
     * <pre>
     * An absolute number of the minimum number of successful completions of subtasks. As soon as this criteria is met,
     * the array job will be marked as successful and outputs will be computed. This has to be a non-negative number if
     * assigned. Default value is size (if specified).
     * </pre>
     *
     * <code>int64 min_successes = 3 [json_name = "minSuccesses"];</code>
     * @return Whether the minSuccesses field is set.
     */
    boolean hasMinSuccesses();
    /**
     * <pre>
     * An absolute number of the minimum number of successful completions of subtasks. As soon as this criteria is met,
     * the array job will be marked as successful and outputs will be computed. This has to be a non-negative number if
     * assigned. Default value is size (if specified).
     * </pre>
     *
     * <code>int64 min_successes = 3 [json_name = "minSuccesses"];</code>
     * @return The minSuccesses.
     */
    long getMinSuccesses();

    /**
     * <pre>
     * If the array job size is not known beforehand, the min_success_ratio can instead be used to determine when an array
     * job can be marked successful.
     * </pre>
     *
     * <code>float min_success_ratio = 4 [json_name = "minSuccessRatio"];</code>
     * @return Whether the minSuccessRatio field is set.
     */
    boolean hasMinSuccessRatio();
    /**
     * <pre>
     * If the array job size is not known beforehand, the min_success_ratio can instead be used to determine when an array
     * job can be marked successful.
     * </pre>
     *
     * <code>float min_success_ratio = 4 [json_name = "minSuccessRatio"];</code>
     * @return The minSuccessRatio.
     */
    float getMinSuccessRatio();

    public com.flyteidl.plugins.ArrayJobProto.ArrayJob.SuccessCriteriaCase getSuccessCriteriaCase();
  }
  /**
   * <pre>
   * Describes a job that can process independent pieces of data concurrently. Multiple copies of the runnable component
   * will be executed concurrently.
   * </pre>
   *
   * Protobuf type {@code flyteidl.plugins.ArrayJob}
   */
  public static final class ArrayJob extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.plugins.ArrayJob)
      ArrayJobOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ArrayJob.newBuilder() to construct.
    private ArrayJob(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ArrayJob() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ArrayJob();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.flyteidl.plugins.ArrayJobProto.internal_static_flyteidl_plugins_ArrayJob_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.flyteidl.plugins.ArrayJobProto.internal_static_flyteidl_plugins_ArrayJob_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.flyteidl.plugins.ArrayJobProto.ArrayJob.class, com.flyteidl.plugins.ArrayJobProto.ArrayJob.Builder.class);
    }

    private int successCriteriaCase_ = 0;
    private java.lang.Object successCriteria_;
    public enum SuccessCriteriaCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      MIN_SUCCESSES(3),
      MIN_SUCCESS_RATIO(4),
      SUCCESSCRITERIA_NOT_SET(0);
      private final int value;
      private SuccessCriteriaCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static SuccessCriteriaCase valueOf(int value) {
        return forNumber(value);
      }

      public static SuccessCriteriaCase forNumber(int value) {
        switch (value) {
          case 3: return MIN_SUCCESSES;
          case 4: return MIN_SUCCESS_RATIO;
          case 0: return SUCCESSCRITERIA_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public SuccessCriteriaCase
    getSuccessCriteriaCase() {
      return SuccessCriteriaCase.forNumber(
          successCriteriaCase_);
    }

    public static final int PARALLELISM_FIELD_NUMBER = 1;
    private long parallelism_;
    /**
     * <pre>
     * Defines the minimum number of instances to bring up concurrently at any given point. Note that this is an
     * optimistic restriction and that, due to network partitioning or other failures, the actual number of currently
     * running instances might be more. This has to be a positive number if assigned. Default value is size.
     * </pre>
     *
     * <code>int64 parallelism = 1 [json_name = "parallelism"];</code>
     * @return The parallelism.
     */
    @java.lang.Override
    public long getParallelism() {
      return parallelism_;
    }

    public static final int SIZE_FIELD_NUMBER = 2;
    private long size_;
    /**
     * <pre>
     * Defines the number of instances to launch at most. This number should match the size of the input if the job
     * requires processing of all input data. This has to be a positive number.
     * In the case this is not defined, the back-end will determine the size at run-time by reading the inputs.
     * </pre>
     *
     * <code>int64 size = 2 [json_name = "size"];</code>
     * @return The size.
     */
    @java.lang.Override
    public long getSize() {
      return size_;
    }

    public static final int MIN_SUCCESSES_FIELD_NUMBER = 3;
    /**
     * <pre>
     * An absolute number of the minimum number of successful completions of subtasks. As soon as this criteria is met,
     * the array job will be marked as successful and outputs will be computed. This has to be a non-negative number if
     * assigned. Default value is size (if specified).
     * </pre>
     *
     * <code>int64 min_successes = 3 [json_name = "minSuccesses"];</code>
     * @return Whether the minSuccesses field is set.
     */
    @java.lang.Override
    public boolean hasMinSuccesses() {
      return successCriteriaCase_ == 3;
    }
    /**
     * <pre>
     * An absolute number of the minimum number of successful completions of subtasks. As soon as this criteria is met,
     * the array job will be marked as successful and outputs will be computed. This has to be a non-negative number if
     * assigned. Default value is size (if specified).
     * </pre>
     *
     * <code>int64 min_successes = 3 [json_name = "minSuccesses"];</code>
     * @return The minSuccesses.
     */
    @java.lang.Override
    public long getMinSuccesses() {
      if (successCriteriaCase_ == 3) {
        return (java.lang.Long) successCriteria_;
      }
      return 0L;
    }

    public static final int MIN_SUCCESS_RATIO_FIELD_NUMBER = 4;
    /**
     * <pre>
     * If the array job size is not known beforehand, the min_success_ratio can instead be used to determine when an array
     * job can be marked successful.
     * </pre>
     *
     * <code>float min_success_ratio = 4 [json_name = "minSuccessRatio"];</code>
     * @return Whether the minSuccessRatio field is set.
     */
    @java.lang.Override
    public boolean hasMinSuccessRatio() {
      return successCriteriaCase_ == 4;
    }
    /**
     * <pre>
     * If the array job size is not known beforehand, the min_success_ratio can instead be used to determine when an array
     * job can be marked successful.
     * </pre>
     *
     * <code>float min_success_ratio = 4 [json_name = "minSuccessRatio"];</code>
     * @return The minSuccessRatio.
     */
    @java.lang.Override
    public float getMinSuccessRatio() {
      if (successCriteriaCase_ == 4) {
        return (java.lang.Float) successCriteria_;
      }
      return 0F;
    }

    public static com.flyteidl.plugins.ArrayJobProto.ArrayJob parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.flyteidl.plugins.ArrayJobProto.ArrayJob parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.flyteidl.plugins.ArrayJobProto.ArrayJob parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.flyteidl.plugins.ArrayJobProto.ArrayJob parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.flyteidl.plugins.ArrayJobProto.ArrayJob parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.flyteidl.plugins.ArrayJobProto.ArrayJob parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.flyteidl.plugins.ArrayJobProto.ArrayJob parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.flyteidl.plugins.ArrayJobProto.ArrayJob parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.flyteidl.plugins.ArrayJobProto.ArrayJob parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.flyteidl.plugins.ArrayJobProto.ArrayJob parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.flyteidl.plugins.ArrayJobProto.ArrayJob parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.flyteidl.plugins.ArrayJobProto.ArrayJob parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.flyteidl.plugins.ArrayJobProto.ArrayJob prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Describes a job that can process independent pieces of data concurrently. Multiple copies of the runnable component
     * will be executed concurrently.
     * </pre>
     *
     * Protobuf type {@code flyteidl.plugins.ArrayJob}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.plugins.ArrayJob)
        com.flyteidl.plugins.ArrayJobProto.ArrayJobOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.flyteidl.plugins.ArrayJobProto.internal_static_flyteidl_plugins_ArrayJob_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.flyteidl.plugins.ArrayJobProto.internal_static_flyteidl_plugins_ArrayJob_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.flyteidl.plugins.ArrayJobProto.ArrayJob.class, com.flyteidl.plugins.ArrayJobProto.ArrayJob.Builder.class);
      }

      // Construct using com.flyteidl.plugins.ArrayJobProto.ArrayJob.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        parallelism_ = 0L;

        size_ = 0L;

        successCriteriaCase_ = 0;
        successCriteria_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.flyteidl.plugins.ArrayJobProto.internal_static_flyteidl_plugins_ArrayJob_descriptor;
      }

      @java.lang.Override
      public com.flyteidl.plugins.ArrayJobProto.ArrayJob getDefaultInstanceForType() {
        return com.flyteidl.plugins.ArrayJobProto.ArrayJob.getDefaultInstance();
      }

      @java.lang.Override
      public com.flyteidl.plugins.ArrayJobProto.ArrayJob build() {
        com.flyteidl.plugins.ArrayJobProto.ArrayJob result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.flyteidl.plugins.ArrayJobProto.ArrayJob buildPartial() {
        com.flyteidl.plugins.ArrayJobProto.ArrayJob result = new com.flyteidl.plugins.ArrayJobProto.ArrayJob(this);
        result.parallelism_ = parallelism_;
        result.size_ = size_;
        if (successCriteriaCase_ == 3) {
          result.successCriteria_ = successCriteria_;
        }
        if (successCriteriaCase_ == 4) {
          result.successCriteria_ = successCriteria_;
        }
        result.successCriteriaCase_ = successCriteriaCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      private int successCriteriaCase_ = 0;
      private java.lang.Object successCriteria_;
      public SuccessCriteriaCase
          getSuccessCriteriaCase() {
        return SuccessCriteriaCase.forNumber(
            successCriteriaCase_);
      }

      public Builder clearSuccessCriteria() {
        successCriteriaCase_ = 0;
        successCriteria_ = null;
        onChanged();
        return this;
      }


      private long parallelism_ ;
      /**
       * <pre>
       * Defines the minimum number of instances to bring up concurrently at any given point. Note that this is an
       * optimistic restriction and that, due to network partitioning or other failures, the actual number of currently
       * running instances might be more. This has to be a positive number if assigned. Default value is size.
       * </pre>
       *
       * <code>int64 parallelism = 1 [json_name = "parallelism"];</code>
       * @return The parallelism.
       */
      @java.lang.Override
      public long getParallelism() {
        return parallelism_;
      }
      /**
       * <pre>
       * Defines the minimum number of instances to bring up concurrently at any given point. Note that this is an
       * optimistic restriction and that, due to network partitioning or other failures, the actual number of currently
       * running instances might be more. This has to be a positive number if assigned. Default value is size.
       * </pre>
       *
       * <code>int64 parallelism = 1 [json_name = "parallelism"];</code>
       * @param value The parallelism to set.
       * @return This builder for chaining.
       */
      public Builder setParallelism(long value) {
        
        parallelism_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Defines the minimum number of instances to bring up concurrently at any given point. Note that this is an
       * optimistic restriction and that, due to network partitioning or other failures, the actual number of currently
       * running instances might be more. This has to be a positive number if assigned. Default value is size.
       * </pre>
       *
       * <code>int64 parallelism = 1 [json_name = "parallelism"];</code>
       * @return This builder for chaining.
       */
      public Builder clearParallelism() {
        
        parallelism_ = 0L;
        onChanged();
        return this;
      }

      private long size_ ;
      /**
       * <pre>
       * Defines the number of instances to launch at most. This number should match the size of the input if the job
       * requires processing of all input data. This has to be a positive number.
       * In the case this is not defined, the back-end will determine the size at run-time by reading the inputs.
       * </pre>
       *
       * <code>int64 size = 2 [json_name = "size"];</code>
       * @return The size.
       */
      @java.lang.Override
      public long getSize() {
        return size_;
      }
      /**
       * <pre>
       * Defines the number of instances to launch at most. This number should match the size of the input if the job
       * requires processing of all input data. This has to be a positive number.
       * In the case this is not defined, the back-end will determine the size at run-time by reading the inputs.
       * </pre>
       *
       * <code>int64 size = 2 [json_name = "size"];</code>
       * @param value The size to set.
       * @return This builder for chaining.
       */
      public Builder setSize(long value) {
        
        size_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Defines the number of instances to launch at most. This number should match the size of the input if the job
       * requires processing of all input data. This has to be a positive number.
       * In the case this is not defined, the back-end will determine the size at run-time by reading the inputs.
       * </pre>
       *
       * <code>int64 size = 2 [json_name = "size"];</code>
       * @return This builder for chaining.
       */
      public Builder clearSize() {
        
        size_ = 0L;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * An absolute number of the minimum number of successful completions of subtasks. As soon as this criteria is met,
       * the array job will be marked as successful and outputs will be computed. This has to be a non-negative number if
       * assigned. Default value is size (if specified).
       * </pre>
       *
       * <code>int64 min_successes = 3 [json_name = "minSuccesses"];</code>
       * @return Whether the minSuccesses field is set.
       */
      public boolean hasMinSuccesses() {
        return successCriteriaCase_ == 3;
      }
      /**
       * <pre>
       * An absolute number of the minimum number of successful completions of subtasks. As soon as this criteria is met,
       * the array job will be marked as successful and outputs will be computed. This has to be a non-negative number if
       * assigned. Default value is size (if specified).
       * </pre>
       *
       * <code>int64 min_successes = 3 [json_name = "minSuccesses"];</code>
       * @return The minSuccesses.
       */
      public long getMinSuccesses() {
        if (successCriteriaCase_ == 3) {
          return (java.lang.Long) successCriteria_;
        }
        return 0L;
      }
      /**
       * <pre>
       * An absolute number of the minimum number of successful completions of subtasks. As soon as this criteria is met,
       * the array job will be marked as successful and outputs will be computed. This has to be a non-negative number if
       * assigned. Default value is size (if specified).
       * </pre>
       *
       * <code>int64 min_successes = 3 [json_name = "minSuccesses"];</code>
       * @param value The minSuccesses to set.
       * @return This builder for chaining.
       */
      public Builder setMinSuccesses(long value) {
        successCriteriaCase_ = 3;
        successCriteria_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * An absolute number of the minimum number of successful completions of subtasks. As soon as this criteria is met,
       * the array job will be marked as successful and outputs will be computed. This has to be a non-negative number if
       * assigned. Default value is size (if specified).
       * </pre>
       *
       * <code>int64 min_successes = 3 [json_name = "minSuccesses"];</code>
       * @return This builder for chaining.
       */
      public Builder clearMinSuccesses() {
        if (successCriteriaCase_ == 3) {
          successCriteriaCase_ = 0;
          successCriteria_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * If the array job size is not known beforehand, the min_success_ratio can instead be used to determine when an array
       * job can be marked successful.
       * </pre>
       *
       * <code>float min_success_ratio = 4 [json_name = "minSuccessRatio"];</code>
       * @return Whether the minSuccessRatio field is set.
       */
      public boolean hasMinSuccessRatio() {
        return successCriteriaCase_ == 4;
      }
      /**
       * <pre>
       * If the array job size is not known beforehand, the min_success_ratio can instead be used to determine when an array
       * job can be marked successful.
       * </pre>
       *
       * <code>float min_success_ratio = 4 [json_name = "minSuccessRatio"];</code>
       * @return The minSuccessRatio.
       */
      public float getMinSuccessRatio() {
        if (successCriteriaCase_ == 4) {
          return (java.lang.Float) successCriteria_;
        }
        return 0F;
      }
      /**
       * <pre>
       * If the array job size is not known beforehand, the min_success_ratio can instead be used to determine when an array
       * job can be marked successful.
       * </pre>
       *
       * <code>float min_success_ratio = 4 [json_name = "minSuccessRatio"];</code>
       * @param value The minSuccessRatio to set.
       * @return This builder for chaining.
       */
      public Builder setMinSuccessRatio(float value) {
        successCriteriaCase_ = 4;
        successCriteria_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If the array job size is not known beforehand, the min_success_ratio can instead be used to determine when an array
       * job can be marked successful.
       * </pre>
       *
       * <code>float min_success_ratio = 4 [json_name = "minSuccessRatio"];</code>
       * @return This builder for chaining.
       */
      public Builder clearMinSuccessRatio() {
        if (successCriteriaCase_ == 4) {
          successCriteriaCase_ = 0;
          successCriteria_ = null;
          onChanged();
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.plugins.ArrayJob)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.plugins.ArrayJob)
    private static final com.flyteidl.plugins.ArrayJobProto.ArrayJob DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.flyteidl.plugins.ArrayJobProto.ArrayJob();
    }

    public static com.flyteidl.plugins.ArrayJobProto.ArrayJob getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ArrayJob>
        PARSER = new com.google.protobuf.AbstractParser<ArrayJob>() {
      @java.lang.Override
      public ArrayJob parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(
                  builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ArrayJob> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ArrayJob> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.flyteidl.plugins.ArrayJobProto.ArrayJob getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_plugins_ArrayJob_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_plugins_ArrayJob_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n flyteidl/plugins/array_job.proto\022\020flyt" +
      "eidl.plugins\"\251\001\n\010ArrayJob\022 \n\013parallelism" +
      "\030\001 \001(\003R\013parallelism\022\022\n\004size\030\002 \001(\003R\004size\022" +
      "%\n\rmin_successes\030\003 \001(\003H\000R\014minSuccesses\022," +
      "\n\021min_success_ratio\030\004 \001(\002H\000R\017minSuccessR" +
      "atioB\022\n\020success_criteriaB\302\001\n\024com.flyteid" +
      "l.pluginsB\rArrayJobProtoH\002Z7github.com/f" +
      "lyteorg/flyteidl/gen/pb-go/flyteidl/plug" +
      "ins\370\001\000\242\002\003FPX\252\002\020Flyteidl.Plugins\312\002\020Flytei" +
      "dl\\Plugins\342\002\034Flyteidl\\Plugins\\GPBMetadat" +
      "a\352\002\021Flyteidl::Pluginsb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_flyteidl_plugins_ArrayJob_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_flyteidl_plugins_ArrayJob_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_plugins_ArrayJob_descriptor,
        new java.lang.String[] { "Parallelism", "Size", "MinSuccesses", "MinSuccessRatio", "SuccessCriteria", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
