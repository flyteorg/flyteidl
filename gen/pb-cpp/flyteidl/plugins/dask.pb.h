// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/dask.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fplugins_2fdask_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fplugins_2fdask_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/tasks.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fdask_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fplugins_2fdask_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fplugins_2fdask_2eproto();
namespace flyteidl {
namespace plugins {
class DaskJob;
class DaskJobDefaultTypeInternal;
extern DaskJobDefaultTypeInternal _DaskJob_default_instance_;
class DaskScheduler;
class DaskSchedulerDefaultTypeInternal;
extern DaskSchedulerDefaultTypeInternal _DaskScheduler_default_instance_;
class DaskWorkerGroup;
class DaskWorkerGroupDefaultTypeInternal;
extern DaskWorkerGroupDefaultTypeInternal _DaskWorkerGroup_default_instance_;
}  // namespace plugins
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::plugins::DaskJob* Arena::CreateMaybeMessage<::flyteidl::plugins::DaskJob>(Arena*);
template<> ::flyteidl::plugins::DaskScheduler* Arena::CreateMaybeMessage<::flyteidl::plugins::DaskScheduler>(Arena*);
template<> ::flyteidl::plugins::DaskWorkerGroup* Arena::CreateMaybeMessage<::flyteidl::plugins::DaskWorkerGroup>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace plugins {

// ===================================================================

class DaskJob final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.DaskJob) */ {
 public:
  DaskJob();
  virtual ~DaskJob();

  DaskJob(const DaskJob& from);

  inline DaskJob& operator=(const DaskJob& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DaskJob(DaskJob&& from) noexcept
    : DaskJob() {
    *this = ::std::move(from);
  }

  inline DaskJob& operator=(DaskJob&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DaskJob& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DaskJob* internal_default_instance() {
    return reinterpret_cast<const DaskJob*>(
               &_DaskJob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DaskJob* other);
  friend void swap(DaskJob& a, DaskJob& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DaskJob* New() const final {
    return CreateMaybeMessage<DaskJob>(nullptr);
  }

  DaskJob* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DaskJob>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DaskJob& from);
  void MergeFrom(const DaskJob& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DaskJob* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.plugins.DaskScheduler scheduler = 1;
  bool has_scheduler() const;
  void clear_scheduler();
  static const int kSchedulerFieldNumber = 1;
  const ::flyteidl::plugins::DaskScheduler& scheduler() const;
  ::flyteidl::plugins::DaskScheduler* release_scheduler();
  ::flyteidl::plugins::DaskScheduler* mutable_scheduler();
  void set_allocated_scheduler(::flyteidl::plugins::DaskScheduler* scheduler);

  // .flyteidl.plugins.DaskWorkerGroup workers = 2;
  bool has_workers() const;
  void clear_workers();
  static const int kWorkersFieldNumber = 2;
  const ::flyteidl::plugins::DaskWorkerGroup& workers() const;
  ::flyteidl::plugins::DaskWorkerGroup* release_workers();
  ::flyteidl::plugins::DaskWorkerGroup* mutable_workers();
  void set_allocated_workers(::flyteidl::plugins::DaskWorkerGroup* workers);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.DaskJob)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::plugins::DaskScheduler* scheduler_;
  ::flyteidl::plugins::DaskWorkerGroup* workers_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fdask_2eproto;
};
// -------------------------------------------------------------------

class DaskScheduler final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.DaskScheduler) */ {
 public:
  DaskScheduler();
  virtual ~DaskScheduler();

  DaskScheduler(const DaskScheduler& from);

  inline DaskScheduler& operator=(const DaskScheduler& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DaskScheduler(DaskScheduler&& from) noexcept
    : DaskScheduler() {
    *this = ::std::move(from);
  }

  inline DaskScheduler& operator=(DaskScheduler&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DaskScheduler& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DaskScheduler* internal_default_instance() {
    return reinterpret_cast<const DaskScheduler*>(
               &_DaskScheduler_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DaskScheduler* other);
  friend void swap(DaskScheduler& a, DaskScheduler& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DaskScheduler* New() const final {
    return CreateMaybeMessage<DaskScheduler>(nullptr);
  }

  DaskScheduler* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DaskScheduler>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DaskScheduler& from);
  void MergeFrom(const DaskScheduler& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DaskScheduler* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string image = 1;
  void clear_image();
  static const int kImageFieldNumber = 1;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  #if LANG_CXX11
  void set_image(::std::string&& value);
  #endif
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  // .flyteidl.core.Resources resources = 2;
  bool has_resources() const;
  void clear_resources();
  static const int kResourcesFieldNumber = 2;
  const ::flyteidl::core::Resources& resources() const;
  ::flyteidl::core::Resources* release_resources();
  ::flyteidl::core::Resources* mutable_resources();
  void set_allocated_resources(::flyteidl::core::Resources* resources);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.DaskScheduler)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  ::flyteidl::core::Resources* resources_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fdask_2eproto;
};
// -------------------------------------------------------------------

class DaskWorkerGroup final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.DaskWorkerGroup) */ {
 public:
  DaskWorkerGroup();
  virtual ~DaskWorkerGroup();

  DaskWorkerGroup(const DaskWorkerGroup& from);

  inline DaskWorkerGroup& operator=(const DaskWorkerGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DaskWorkerGroup(DaskWorkerGroup&& from) noexcept
    : DaskWorkerGroup() {
    *this = ::std::move(from);
  }

  inline DaskWorkerGroup& operator=(DaskWorkerGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DaskWorkerGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DaskWorkerGroup* internal_default_instance() {
    return reinterpret_cast<const DaskWorkerGroup*>(
               &_DaskWorkerGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(DaskWorkerGroup* other);
  friend void swap(DaskWorkerGroup& a, DaskWorkerGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DaskWorkerGroup* New() const final {
    return CreateMaybeMessage<DaskWorkerGroup>(nullptr);
  }

  DaskWorkerGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DaskWorkerGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DaskWorkerGroup& from);
  void MergeFrom(const DaskWorkerGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DaskWorkerGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string image = 2;
  void clear_image();
  static const int kImageFieldNumber = 2;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  #if LANG_CXX11
  void set_image(::std::string&& value);
  #endif
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  // .flyteidl.core.Resources resources = 3;
  bool has_resources() const;
  void clear_resources();
  static const int kResourcesFieldNumber = 3;
  const ::flyteidl::core::Resources& resources() const;
  ::flyteidl::core::Resources* release_resources();
  ::flyteidl::core::Resources* mutable_resources();
  void set_allocated_resources(::flyteidl::core::Resources* resources);

  // uint32 number_of_workers = 1;
  void clear_number_of_workers();
  static const int kNumberOfWorkersFieldNumber = 1;
  ::google::protobuf::uint32 number_of_workers() const;
  void set_number_of_workers(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.DaskWorkerGroup)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  ::flyteidl::core::Resources* resources_;
  ::google::protobuf::uint32 number_of_workers_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fdask_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DaskJob

// .flyteidl.plugins.DaskScheduler scheduler = 1;
inline bool DaskJob::has_scheduler() const {
  return this != internal_default_instance() && scheduler_ != nullptr;
}
inline void DaskJob::clear_scheduler() {
  if (GetArenaNoVirtual() == nullptr && scheduler_ != nullptr) {
    delete scheduler_;
  }
  scheduler_ = nullptr;
}
inline const ::flyteidl::plugins::DaskScheduler& DaskJob::scheduler() const {
  const ::flyteidl::plugins::DaskScheduler* p = scheduler_;
  // @@protoc_insertion_point(field_get:flyteidl.plugins.DaskJob.scheduler)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::plugins::DaskScheduler*>(
      &::flyteidl::plugins::_DaskScheduler_default_instance_);
}
inline ::flyteidl::plugins::DaskScheduler* DaskJob::release_scheduler() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.DaskJob.scheduler)
  
  ::flyteidl::plugins::DaskScheduler* temp = scheduler_;
  scheduler_ = nullptr;
  return temp;
}
inline ::flyteidl::plugins::DaskScheduler* DaskJob::mutable_scheduler() {
  
  if (scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::plugins::DaskScheduler>(GetArenaNoVirtual());
    scheduler_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.DaskJob.scheduler)
  return scheduler_;
}
inline void DaskJob::set_allocated_scheduler(::flyteidl::plugins::DaskScheduler* scheduler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scheduler_;
  }
  if (scheduler) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scheduler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scheduler, submessage_arena);
    }
    
  } else {
    
  }
  scheduler_ = scheduler;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.DaskJob.scheduler)
}

// .flyteidl.plugins.DaskWorkerGroup workers = 2;
inline bool DaskJob::has_workers() const {
  return this != internal_default_instance() && workers_ != nullptr;
}
inline void DaskJob::clear_workers() {
  if (GetArenaNoVirtual() == nullptr && workers_ != nullptr) {
    delete workers_;
  }
  workers_ = nullptr;
}
inline const ::flyteidl::plugins::DaskWorkerGroup& DaskJob::workers() const {
  const ::flyteidl::plugins::DaskWorkerGroup* p = workers_;
  // @@protoc_insertion_point(field_get:flyteidl.plugins.DaskJob.workers)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::plugins::DaskWorkerGroup*>(
      &::flyteidl::plugins::_DaskWorkerGroup_default_instance_);
}
inline ::flyteidl::plugins::DaskWorkerGroup* DaskJob::release_workers() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.DaskJob.workers)
  
  ::flyteidl::plugins::DaskWorkerGroup* temp = workers_;
  workers_ = nullptr;
  return temp;
}
inline ::flyteidl::plugins::DaskWorkerGroup* DaskJob::mutable_workers() {
  
  if (workers_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::plugins::DaskWorkerGroup>(GetArenaNoVirtual());
    workers_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.DaskJob.workers)
  return workers_;
}
inline void DaskJob::set_allocated_workers(::flyteidl::plugins::DaskWorkerGroup* workers) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete workers_;
  }
  if (workers) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      workers = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, workers, submessage_arena);
    }
    
  } else {
    
  }
  workers_ = workers;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.DaskJob.workers)
}

// -------------------------------------------------------------------

// DaskScheduler

// string image = 1;
inline void DaskScheduler::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DaskScheduler::image() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.DaskScheduler.image)
  return image_.GetNoArena();
}
inline void DaskScheduler::set_image(const ::std::string& value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.DaskScheduler.image)
}
#if LANG_CXX11
inline void DaskScheduler::set_image(::std::string&& value) {
  
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.DaskScheduler.image)
}
#endif
inline void DaskScheduler::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.DaskScheduler.image)
}
inline void DaskScheduler::set_image(const char* value, size_t size) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.DaskScheduler.image)
}
inline ::std::string* DaskScheduler::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.DaskScheduler.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DaskScheduler::release_image() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.DaskScheduler.image)
  
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DaskScheduler::set_allocated_image(::std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.DaskScheduler.image)
}

// .flyteidl.core.Resources resources = 2;
inline bool DaskScheduler::has_resources() const {
  return this != internal_default_instance() && resources_ != nullptr;
}
inline const ::flyteidl::core::Resources& DaskScheduler::resources() const {
  const ::flyteidl::core::Resources* p = resources_;
  // @@protoc_insertion_point(field_get:flyteidl.plugins.DaskScheduler.resources)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Resources*>(
      &::flyteidl::core::_Resources_default_instance_);
}
inline ::flyteidl::core::Resources* DaskScheduler::release_resources() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.DaskScheduler.resources)
  
  ::flyteidl::core::Resources* temp = resources_;
  resources_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Resources* DaskScheduler::mutable_resources() {
  
  if (resources_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Resources>(GetArenaNoVirtual());
    resources_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.DaskScheduler.resources)
  return resources_;
}
inline void DaskScheduler::set_allocated_resources(::flyteidl::core::Resources* resources) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(resources_);
  }
  if (resources) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resources = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resources, submessage_arena);
    }
    
  } else {
    
  }
  resources_ = resources;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.DaskScheduler.resources)
}

// -------------------------------------------------------------------

// DaskWorkerGroup

// uint32 number_of_workers = 1;
inline void DaskWorkerGroup::clear_number_of_workers() {
  number_of_workers_ = 0u;
}
inline ::google::protobuf::uint32 DaskWorkerGroup::number_of_workers() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.DaskWorkerGroup.number_of_workers)
  return number_of_workers_;
}
inline void DaskWorkerGroup::set_number_of_workers(::google::protobuf::uint32 value) {
  
  number_of_workers_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.plugins.DaskWorkerGroup.number_of_workers)
}

// string image = 2;
inline void DaskWorkerGroup::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DaskWorkerGroup::image() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.DaskWorkerGroup.image)
  return image_.GetNoArena();
}
inline void DaskWorkerGroup::set_image(const ::std::string& value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.DaskWorkerGroup.image)
}
#if LANG_CXX11
inline void DaskWorkerGroup::set_image(::std::string&& value) {
  
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.DaskWorkerGroup.image)
}
#endif
inline void DaskWorkerGroup::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.DaskWorkerGroup.image)
}
inline void DaskWorkerGroup::set_image(const char* value, size_t size) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.DaskWorkerGroup.image)
}
inline ::std::string* DaskWorkerGroup::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.DaskWorkerGroup.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DaskWorkerGroup::release_image() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.DaskWorkerGroup.image)
  
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DaskWorkerGroup::set_allocated_image(::std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.DaskWorkerGroup.image)
}

// .flyteidl.core.Resources resources = 3;
inline bool DaskWorkerGroup::has_resources() const {
  return this != internal_default_instance() && resources_ != nullptr;
}
inline const ::flyteidl::core::Resources& DaskWorkerGroup::resources() const {
  const ::flyteidl::core::Resources* p = resources_;
  // @@protoc_insertion_point(field_get:flyteidl.plugins.DaskWorkerGroup.resources)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Resources*>(
      &::flyteidl::core::_Resources_default_instance_);
}
inline ::flyteidl::core::Resources* DaskWorkerGroup::release_resources() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.DaskWorkerGroup.resources)
  
  ::flyteidl::core::Resources* temp = resources_;
  resources_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Resources* DaskWorkerGroup::mutable_resources() {
  
  if (resources_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Resources>(GetArenaNoVirtual());
    resources_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.DaskWorkerGroup.resources)
  return resources_;
}
inline void DaskWorkerGroup::set_allocated_resources(::flyteidl::core::Resources* resources) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(resources_);
  }
  if (resources) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resources = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resources, submessage_arena);
    }
    
  } else {
    
  }
  resources_ = resources;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.DaskWorkerGroup.resources)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace plugins
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fplugins_2fdask_2eproto
