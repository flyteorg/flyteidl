syntax = "proto3";

package flyteidl.core;

option go_package = "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core";

import "flyteidl/core/execution.proto";
import "flyteidl/core/identifier.proto";

// Error message to propagate detailed errors from container executions to the execution
// engine.
message ContainerError {
    // A simplified code for errors, so that we can provide a glossary of all possible errors.
    string code = 1;
    // A detailed error message.
    string message = 2;

    // Defines a generic error type that dictates the behavior of the retry strategy.
    enum Kind {
        NON_RECOVERABLE = 0;
        RECOVERABLE = 1;
    }

    // An abstract error kind for this error. Defaults to Non_Recoverable if not specified.
    Kind kind = 3;

    // Defines the origin of the error (system, user, unknown).
    ExecutionError.ErrorKind origin = 4;
}

// Defines the errors.pb file format the container can produce to communicate
// failure reasons to the execution engine.
message ErrorDocument {
    // The error raised during execution.
    ContainerError error = 1;
}

// Error returned if eviction of cached output fails and should be re-tried by the user.
message CacheEvictionError {
    // Defines codes for distinguishing between errors encountered during cache eviction.
    enum Code {
        // Indicates a generic internal error occurred.
        INTERNAL = 0;
        // Indicates no reservation could be acquired before deleting an artifact.
        RESERVATION_NOT_ACQUIRED = 1;
        // Indicates updating the database entry related to the node execution failed.
        DATABASE_UPDATE_FAILED = 2;
        // Indicates deleting the artifact from datacatalog failed.
        ARTIFACT_DELETE_FAILED = 3;
        // Indicates the reservation previously acquired could not be released for an artifact.
        RESERVATION_NOT_RELEASED = 4;

    }

    // Error code to match type of cache eviction error encountered.
    Code code = 1;
    // More detailed error message explaining the reason for the cache eviction failure.
    string message = 2;
    // ID of the node execution the cache eviction failed for.
    core.NodeExecutionIdentifier node_execution_id = 3;
    // Source of the node execution.
    oneof source {
        // ID of the task execution the cache eviction failed for (if the node execution was part of a task execution).
        core.TaskExecutionIdentifier task_execution_id = 4;
        // ID of the workflow execution the cache eviction failed for (if the node execution was part of a workflow execution).
        core.WorkflowExecutionIdentifier workflow_execution_id = 5;
    }
}

// List of :ref:`ref_flyteidl.core.CacheEvictionError` encountered during a cache eviction request.
message CacheEvictionErrorList {
    repeated CacheEvictionError errors = 1;
}