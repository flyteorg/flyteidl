// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/condition.proto

#include "flyteidl/core/condition.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace core {
constexpr ComparisonExpression::ComparisonExpression(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : left_value_(nullptr)
  , right_value_(nullptr)
  , operator__(0)
{}
struct ComparisonExpressionDefaultTypeInternal {
  constexpr ComparisonExpressionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ComparisonExpressionDefaultTypeInternal() {}
  union {
    ComparisonExpression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ComparisonExpressionDefaultTypeInternal _ComparisonExpression_default_instance_;
constexpr Operand::Operand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct OperandDefaultTypeInternal {
  constexpr OperandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperandDefaultTypeInternal() {}
  union {
    Operand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperandDefaultTypeInternal _Operand_default_instance_;
constexpr BooleanExpression::BooleanExpression(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct BooleanExpressionDefaultTypeInternal {
  constexpr BooleanExpressionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BooleanExpressionDefaultTypeInternal() {}
  union {
    BooleanExpression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BooleanExpressionDefaultTypeInternal _BooleanExpression_default_instance_;
constexpr ConjunctionExpression::ConjunctionExpression(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : left_expression_(nullptr)
  , right_expression_(nullptr)
  , operator__(0)
{}
struct ConjunctionExpressionDefaultTypeInternal {
  constexpr ConjunctionExpressionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConjunctionExpressionDefaultTypeInternal() {}
  union {
    ConjunctionExpression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConjunctionExpressionDefaultTypeInternal _ConjunctionExpression_default_instance_;
}  // namespace core
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fcore_2fcondition_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fcore_2fcondition_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fcore_2fcondition_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fcore_2fcondition_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ComparisonExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ComparisonExpression, operator__),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ComparisonExpression, left_value_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ComparisonExpression, right_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Operand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Operand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Operand, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::BooleanExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::BooleanExpression, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::BooleanExpression, expr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ConjunctionExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ConjunctionExpression, operator__),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ConjunctionExpression, left_expression_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ConjunctionExpression, right_expression_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::core::ComparisonExpression)},
  { 9, -1, -1, sizeof(::flyteidl::core::Operand)},
  { 18, -1, -1, sizeof(::flyteidl::core::BooleanExpression)},
  { 27, -1, -1, sizeof(::flyteidl::core::ConjunctionExpression)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_ComparisonExpression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_Operand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_BooleanExpression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_ConjunctionExpression_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fcore_2fcondition_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035flyteidl/core/condition.proto\022\rflyteid"
  "l.core\032\034flyteidl/core/literals.proto\"\217\002\n"
  "\024ComparisonExpression\022H\n\010operator\030\001 \001(\0162"
  ",.flyteidl.core.ComparisonExpression.Ope"
  "ratorR\010operator\0225\n\nleft_value\030\002 \001(\0132\026.fl"
  "yteidl.core.OperandR\tleftValue\0227\n\013right_"
  "value\030\003 \001(\0132\026.flyteidl.core.OperandR\nrig"
  "htValue\"=\n\010Operator\022\006\n\002EQ\020\000\022\007\n\003NEQ\020\001\022\006\n\002"
  "GT\020\002\022\007\n\003GTE\020\003\022\006\n\002LT\020\004\022\007\n\003LTE\020\005\"^\n\007Operan"
  "d\0228\n\tprimitive\030\001 \001(\0132\030.flyteidl.core.Pri"
  "mitiveH\000R\tprimitive\022\022\n\003var\030\002 \001(\tH\000R\003varB"
  "\005\n\003val\"\254\001\n\021BooleanExpression\022H\n\013conjunct"
  "ion\030\001 \001(\0132$.flyteidl.core.ConjunctionExp"
  "ressionH\000R\013conjunction\022E\n\ncomparison\030\002 \001"
  "(\0132#.flyteidl.core.ComparisonExpressionH"
  "\000R\ncomparisonB\006\n\004expr\"\245\002\n\025ConjunctionExp"
  "ression\022P\n\010operator\030\001 \001(\01624.flyteidl.cor"
  "e.ConjunctionExpression.LogicalOperatorR"
  "\010operator\022I\n\017left_expression\030\002 \001(\0132 .fly"
  "teidl.core.BooleanExpressionR\016leftExpres"
  "sion\022K\n\020right_expression\030\003 \001(\0132 .flyteid"
  "l.core.BooleanExpressionR\017rightExpressio"
  "n\"\"\n\017LogicalOperator\022\007\n\003AND\020\000\022\006\n\002OR\020\001B\261\001"
  "\n\021com.flyteidl.coreB\016ConditionProtoH\002Z4g"
  "ithub.com/flyteorg/flyteidl/gen/pb-go/fl"
  "yteidl/core\370\001\000\242\002\003FCX\252\002\rFlyteidl.Core\312\002\rF"
  "lyteidl\\Core\342\002\031Flyteidl\\Core\\GPBMetadata"
  "\352\002\016Flyteidl::Coreb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flyteidl_2fcore_2fcondition_2eproto_deps[1] = {
  &::descriptor_table_flyteidl_2fcore_2fliterals_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fcore_2fcondition_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fcore_2fcondition_2eproto = {
  false, false, 1105, descriptor_table_protodef_flyteidl_2fcore_2fcondition_2eproto, "flyteidl/core/condition.proto", 
  &descriptor_table_flyteidl_2fcore_2fcondition_2eproto_once, descriptor_table_flyteidl_2fcore_2fcondition_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_flyteidl_2fcore_2fcondition_2eproto::offsets,
  file_level_metadata_flyteidl_2fcore_2fcondition_2eproto, file_level_enum_descriptors_flyteidl_2fcore_2fcondition_2eproto, file_level_service_descriptors_flyteidl_2fcore_2fcondition_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fcore_2fcondition_2eproto_getter() {
  return &descriptor_table_flyteidl_2fcore_2fcondition_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fcore_2fcondition_2eproto(&descriptor_table_flyteidl_2fcore_2fcondition_2eproto);
namespace flyteidl {
namespace core {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComparisonExpression_Operator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fcore_2fcondition_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2fcondition_2eproto[0];
}
bool ComparisonExpression_Operator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ComparisonExpression_Operator ComparisonExpression::EQ;
constexpr ComparisonExpression_Operator ComparisonExpression::NEQ;
constexpr ComparisonExpression_Operator ComparisonExpression::GT;
constexpr ComparisonExpression_Operator ComparisonExpression::GTE;
constexpr ComparisonExpression_Operator ComparisonExpression::LT;
constexpr ComparisonExpression_Operator ComparisonExpression::LTE;
constexpr ComparisonExpression_Operator ComparisonExpression::Operator_MIN;
constexpr ComparisonExpression_Operator ComparisonExpression::Operator_MAX;
constexpr int ComparisonExpression::Operator_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConjunctionExpression_LogicalOperator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fcore_2fcondition_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2fcondition_2eproto[1];
}
bool ConjunctionExpression_LogicalOperator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ConjunctionExpression_LogicalOperator ConjunctionExpression::AND;
constexpr ConjunctionExpression_LogicalOperator ConjunctionExpression::OR;
constexpr ConjunctionExpression_LogicalOperator ConjunctionExpression::LogicalOperator_MIN;
constexpr ConjunctionExpression_LogicalOperator ConjunctionExpression::LogicalOperator_MAX;
constexpr int ConjunctionExpression::LogicalOperator_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ComparisonExpression::_Internal {
 public:
  static const ::flyteidl::core::Operand& left_value(const ComparisonExpression* msg);
  static const ::flyteidl::core::Operand& right_value(const ComparisonExpression* msg);
};

const ::flyteidl::core::Operand&
ComparisonExpression::_Internal::left_value(const ComparisonExpression* msg) {
  return *msg->left_value_;
}
const ::flyteidl::core::Operand&
ComparisonExpression::_Internal::right_value(const ComparisonExpression* msg) {
  return *msg->right_value_;
}
ComparisonExpression::ComparisonExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.ComparisonExpression)
}
ComparisonExpression::ComparisonExpression(const ComparisonExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_left_value()) {
    left_value_ = new ::flyteidl::core::Operand(*from.left_value_);
  } else {
    left_value_ = nullptr;
  }
  if (from._internal_has_right_value()) {
    right_value_ = new ::flyteidl::core::Operand(*from.right_value_);
  } else {
    right_value_ = nullptr;
  }
  operator__ = from.operator__;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.ComparisonExpression)
}

inline void ComparisonExpression::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&left_value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&operator__) -
    reinterpret_cast<char*>(&left_value_)) + sizeof(operator__));
}

ComparisonExpression::~ComparisonExpression() {
  // @@protoc_insertion_point(destructor:flyteidl.core.ComparisonExpression)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ComparisonExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete left_value_;
  if (this != internal_default_instance()) delete right_value_;
}

void ComparisonExpression::ArenaDtor(void* object) {
  ComparisonExpression* _this = reinterpret_cast< ComparisonExpression* >(object);
  (void)_this;
}
void ComparisonExpression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComparisonExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ComparisonExpression::InternalSwap(ComparisonExpression* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ComparisonExpression::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fcondition_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fcondition_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fcondition_2eproto[0]);
}

// ===================================================================

class Operand::_Internal {
 public:
  static const ::flyteidl::core::Primitive& primitive(const Operand* msg);
};

const ::flyteidl::core::Primitive&
Operand::_Internal::primitive(const Operand* msg) {
  return *msg->val_.primitive_;
}
void Operand::set_allocated_primitive(::flyteidl::core::Primitive* primitive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_val();
  if (primitive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(primitive));
    if (message_arena != submessage_arena) {
      primitive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, primitive, submessage_arena);
    }
    set_has_primitive();
    val_.primitive_ = primitive;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Operand.primitive)
}
void Operand::clear_primitive() {
  if (_internal_has_primitive()) {
    if (GetArenaForAllocation() == nullptr) {
      delete val_.primitive_;
    }
    clear_has_val();
  }
}
Operand::Operand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.Operand)
}
Operand::Operand(const Operand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_val();
  switch (from.val_case()) {
    case kPrimitive: {
      _internal_mutable_primitive()->::flyteidl::core::Primitive::MergeFrom(from._internal_primitive());
      break;
    }
    case kVar: {
      _internal_set_var(from._internal_var());
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Operand)
}

inline void Operand::SharedCtor() {
clear_has_val();
}

Operand::~Operand() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Operand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Operand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_val()) {
    clear_val();
  }
}

void Operand::ArenaDtor(void* object) {
  Operand* _this = reinterpret_cast< Operand* >(object);
  (void)_this;
}
void Operand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Operand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Operand::clear_val() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.Operand)
  switch (val_case()) {
    case kPrimitive: {
      if (GetArenaForAllocation() == nullptr) {
        delete val_.primitive_;
      }
      break;
    }
    case kVar: {
      val_.var_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VAL_NOT_SET;
}


void Operand::InternalSwap(Operand* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Operand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fcondition_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fcondition_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fcondition_2eproto[1]);
}

// ===================================================================

class BooleanExpression::_Internal {
 public:
  static const ::flyteidl::core::ConjunctionExpression& conjunction(const BooleanExpression* msg);
  static const ::flyteidl::core::ComparisonExpression& comparison(const BooleanExpression* msg);
};

const ::flyteidl::core::ConjunctionExpression&
BooleanExpression::_Internal::conjunction(const BooleanExpression* msg) {
  return *msg->expr_.conjunction_;
}
const ::flyteidl::core::ComparisonExpression&
BooleanExpression::_Internal::comparison(const BooleanExpression* msg) {
  return *msg->expr_.comparison_;
}
void BooleanExpression::set_allocated_conjunction(::flyteidl::core::ConjunctionExpression* conjunction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_expr();
  if (conjunction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::ConjunctionExpression>::GetOwningArena(conjunction);
    if (message_arena != submessage_arena) {
      conjunction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conjunction, submessage_arena);
    }
    set_has_conjunction();
    expr_.conjunction_ = conjunction;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.BooleanExpression.conjunction)
}
void BooleanExpression::set_allocated_comparison(::flyteidl::core::ComparisonExpression* comparison) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_expr();
  if (comparison) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::ComparisonExpression>::GetOwningArena(comparison);
    if (message_arena != submessage_arena) {
      comparison = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, comparison, submessage_arena);
    }
    set_has_comparison();
    expr_.comparison_ = comparison;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.BooleanExpression.comparison)
}
BooleanExpression::BooleanExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.BooleanExpression)
}
BooleanExpression::BooleanExpression(const BooleanExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_expr();
  switch (from.expr_case()) {
    case kConjunction: {
      _internal_mutable_conjunction()->::flyteidl::core::ConjunctionExpression::MergeFrom(from._internal_conjunction());
      break;
    }
    case kComparison: {
      _internal_mutable_comparison()->::flyteidl::core::ComparisonExpression::MergeFrom(from._internal_comparison());
      break;
    }
    case EXPR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.BooleanExpression)
}

inline void BooleanExpression::SharedCtor() {
clear_has_expr();
}

BooleanExpression::~BooleanExpression() {
  // @@protoc_insertion_point(destructor:flyteidl.core.BooleanExpression)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BooleanExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_expr()) {
    clear_expr();
  }
}

void BooleanExpression::ArenaDtor(void* object) {
  BooleanExpression* _this = reinterpret_cast< BooleanExpression* >(object);
  (void)_this;
}
void BooleanExpression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BooleanExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BooleanExpression::clear_expr() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.BooleanExpression)
  switch (expr_case()) {
    case kConjunction: {
      if (GetArenaForAllocation() == nullptr) {
        delete expr_.conjunction_;
      }
      break;
    }
    case kComparison: {
      if (GetArenaForAllocation() == nullptr) {
        delete expr_.comparison_;
      }
      break;
    }
    case EXPR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EXPR_NOT_SET;
}


void BooleanExpression::InternalSwap(BooleanExpression* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata BooleanExpression::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fcondition_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fcondition_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fcondition_2eproto[2]);
}

// ===================================================================

class ConjunctionExpression::_Internal {
 public:
  static const ::flyteidl::core::BooleanExpression& left_expression(const ConjunctionExpression* msg);
  static const ::flyteidl::core::BooleanExpression& right_expression(const ConjunctionExpression* msg);
};

const ::flyteidl::core::BooleanExpression&
ConjunctionExpression::_Internal::left_expression(const ConjunctionExpression* msg) {
  return *msg->left_expression_;
}
const ::flyteidl::core::BooleanExpression&
ConjunctionExpression::_Internal::right_expression(const ConjunctionExpression* msg) {
  return *msg->right_expression_;
}
ConjunctionExpression::ConjunctionExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.ConjunctionExpression)
}
ConjunctionExpression::ConjunctionExpression(const ConjunctionExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_left_expression()) {
    left_expression_ = new ::flyteidl::core::BooleanExpression(*from.left_expression_);
  } else {
    left_expression_ = nullptr;
  }
  if (from._internal_has_right_expression()) {
    right_expression_ = new ::flyteidl::core::BooleanExpression(*from.right_expression_);
  } else {
    right_expression_ = nullptr;
  }
  operator__ = from.operator__;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.ConjunctionExpression)
}

inline void ConjunctionExpression::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&left_expression_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&operator__) -
    reinterpret_cast<char*>(&left_expression_)) + sizeof(operator__));
}

ConjunctionExpression::~ConjunctionExpression() {
  // @@protoc_insertion_point(destructor:flyteidl.core.ConjunctionExpression)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConjunctionExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete left_expression_;
  if (this != internal_default_instance()) delete right_expression_;
}

void ConjunctionExpression::ArenaDtor(void* object) {
  ConjunctionExpression* _this = reinterpret_cast< ConjunctionExpression* >(object);
  (void)_this;
}
void ConjunctionExpression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConjunctionExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConjunctionExpression::InternalSwap(ConjunctionExpression* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ConjunctionExpression::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fcondition_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fcondition_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fcondition_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::core::ComparisonExpression* Arena::CreateMaybeMessage< ::flyteidl::core::ComparisonExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::ComparisonExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::Operand* Arena::CreateMaybeMessage< ::flyteidl::core::Operand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::Operand >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::BooleanExpression* Arena::CreateMaybeMessage< ::flyteidl::core::BooleanExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::BooleanExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::ConjunctionExpression* Arena::CreateMaybeMessage< ::flyteidl::core::ConjunctionExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::ConjunctionExpression >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
