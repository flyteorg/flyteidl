// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/condition.proto

package com.flyteidl.core;

/**
 * <pre>
 * Defines a conjunction expression of two boolean expressions.
 * </pre>
 *
 * Protobuf type {@code flyteidl.core.ConjunctionExpression}
 */
public final class ConjunctionExpression extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:flyteidl.core.ConjunctionExpression)
    ConjunctionExpressionOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ConjunctionExpression.newBuilder() to construct.
  private ConjunctionExpression(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ConjunctionExpression() {
    operator_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ConjunctionExpression();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ConjunctionExpression(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {
            int rawValue = input.readEnum();

            operator_ = rawValue;
            break;
          }
          case 18: {
            com.flyteidl.core.BooleanExpression.Builder subBuilder = null;
            if (leftExpression_ != null) {
              subBuilder = leftExpression_.toBuilder();
            }
            leftExpression_ = input.readMessage(com.flyteidl.core.BooleanExpression.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(leftExpression_);
              leftExpression_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            com.flyteidl.core.BooleanExpression.Builder subBuilder = null;
            if (rightExpression_ != null) {
              subBuilder = rightExpression_.toBuilder();
            }
            rightExpression_ = input.readMessage(com.flyteidl.core.BooleanExpression.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(rightExpression_);
              rightExpression_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.flyteidl.core.ConditionProto.internal_static_flyteidl_core_ConjunctionExpression_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.flyteidl.core.ConditionProto.internal_static_flyteidl_core_ConjunctionExpression_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.flyteidl.core.ConjunctionExpression.class, com.flyteidl.core.ConjunctionExpression.Builder.class);
  }

  /**
   * <pre>
   * Nested conditions. They can be conjoined using AND / OR
   * Order of evaluation is not important as the operators are Commutative
   * </pre>
   *
   * Protobuf enum {@code flyteidl.core.ConjunctionExpression.LogicalOperator}
   */
  public enum LogicalOperator
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Conjunction
     * </pre>
     *
     * <code>AND = 0;</code>
     */
    AND(0),
    /**
     * <code>OR = 1;</code>
     */
    OR(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Conjunction
     * </pre>
     *
     * <code>AND = 0;</code>
     */
    public static final int AND_VALUE = 0;
    /**
     * <code>OR = 1;</code>
     */
    public static final int OR_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static LogicalOperator valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static LogicalOperator forNumber(int value) {
      switch (value) {
        case 0: return AND;
        case 1: return OR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<LogicalOperator>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        LogicalOperator> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<LogicalOperator>() {
            public LogicalOperator findValueByNumber(int number) {
              return LogicalOperator.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.flyteidl.core.ConjunctionExpression.getDescriptor().getEnumTypes().get(0);
    }

    private static final LogicalOperator[] VALUES = values();

    public static LogicalOperator valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private LogicalOperator(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:flyteidl.core.ConjunctionExpression.LogicalOperator)
  }

  public static final int OPERATOR_FIELD_NUMBER = 1;
  private int operator_;
  /**
   * <code>.flyteidl.core.ConjunctionExpression.LogicalOperator operator = 1 [json_name = "operator"];</code>
   * @return The enum numeric value on the wire for operator.
   */
  @java.lang.Override public int getOperatorValue() {
    return operator_;
  }
  /**
   * <code>.flyteidl.core.ConjunctionExpression.LogicalOperator operator = 1 [json_name = "operator"];</code>
   * @return The operator.
   */
  @java.lang.Override public com.flyteidl.core.ConjunctionExpression.LogicalOperator getOperator() {
    @SuppressWarnings("deprecation")
    com.flyteidl.core.ConjunctionExpression.LogicalOperator result = com.flyteidl.core.ConjunctionExpression.LogicalOperator.valueOf(operator_);
    return result == null ? com.flyteidl.core.ConjunctionExpression.LogicalOperator.UNRECOGNIZED : result;
  }

  public static final int LEFT_EXPRESSION_FIELD_NUMBER = 2;
  private com.flyteidl.core.BooleanExpression leftExpression_;
  /**
   * <code>.flyteidl.core.BooleanExpression left_expression = 2 [json_name = "leftExpression"];</code>
   * @return Whether the leftExpression field is set.
   */
  @java.lang.Override
  public boolean hasLeftExpression() {
    return leftExpression_ != null;
  }
  /**
   * <code>.flyteidl.core.BooleanExpression left_expression = 2 [json_name = "leftExpression"];</code>
   * @return The leftExpression.
   */
  @java.lang.Override
  public com.flyteidl.core.BooleanExpression getLeftExpression() {
    return leftExpression_ == null ? com.flyteidl.core.BooleanExpression.getDefaultInstance() : leftExpression_;
  }
  /**
   * <code>.flyteidl.core.BooleanExpression left_expression = 2 [json_name = "leftExpression"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.BooleanExpressionOrBuilder getLeftExpressionOrBuilder() {
    return getLeftExpression();
  }

  public static final int RIGHT_EXPRESSION_FIELD_NUMBER = 3;
  private com.flyteidl.core.BooleanExpression rightExpression_;
  /**
   * <code>.flyteidl.core.BooleanExpression right_expression = 3 [json_name = "rightExpression"];</code>
   * @return Whether the rightExpression field is set.
   */
  @java.lang.Override
  public boolean hasRightExpression() {
    return rightExpression_ != null;
  }
  /**
   * <code>.flyteidl.core.BooleanExpression right_expression = 3 [json_name = "rightExpression"];</code>
   * @return The rightExpression.
   */
  @java.lang.Override
  public com.flyteidl.core.BooleanExpression getRightExpression() {
    return rightExpression_ == null ? com.flyteidl.core.BooleanExpression.getDefaultInstance() : rightExpression_;
  }
  /**
   * <code>.flyteidl.core.BooleanExpression right_expression = 3 [json_name = "rightExpression"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.BooleanExpressionOrBuilder getRightExpressionOrBuilder() {
    return getRightExpression();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (operator_ != com.flyteidl.core.ConjunctionExpression.LogicalOperator.AND.getNumber()) {
      output.writeEnum(1, operator_);
    }
    if (leftExpression_ != null) {
      output.writeMessage(2, getLeftExpression());
    }
    if (rightExpression_ != null) {
      output.writeMessage(3, getRightExpression());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (operator_ != com.flyteidl.core.ConjunctionExpression.LogicalOperator.AND.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, operator_);
    }
    if (leftExpression_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getLeftExpression());
    }
    if (rightExpression_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getRightExpression());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.flyteidl.core.ConjunctionExpression)) {
      return super.equals(obj);
    }
    com.flyteidl.core.ConjunctionExpression other = (com.flyteidl.core.ConjunctionExpression) obj;

    if (operator_ != other.operator_) return false;
    if (hasLeftExpression() != other.hasLeftExpression()) return false;
    if (hasLeftExpression()) {
      if (!getLeftExpression()
          .equals(other.getLeftExpression())) return false;
    }
    if (hasRightExpression() != other.hasRightExpression()) return false;
    if (hasRightExpression()) {
      if (!getRightExpression()
          .equals(other.getRightExpression())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + OPERATOR_FIELD_NUMBER;
    hash = (53 * hash) + operator_;
    if (hasLeftExpression()) {
      hash = (37 * hash) + LEFT_EXPRESSION_FIELD_NUMBER;
      hash = (53 * hash) + getLeftExpression().hashCode();
    }
    if (hasRightExpression()) {
      hash = (37 * hash) + RIGHT_EXPRESSION_FIELD_NUMBER;
      hash = (53 * hash) + getRightExpression().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.flyteidl.core.ConjunctionExpression parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.core.ConjunctionExpression parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.core.ConjunctionExpression parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.core.ConjunctionExpression parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.core.ConjunctionExpression parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.core.ConjunctionExpression parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.core.ConjunctionExpression parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.flyteidl.core.ConjunctionExpression parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.flyteidl.core.ConjunctionExpression parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.flyteidl.core.ConjunctionExpression parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.flyteidl.core.ConjunctionExpression parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.flyteidl.core.ConjunctionExpression parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.flyteidl.core.ConjunctionExpression prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Defines a conjunction expression of two boolean expressions.
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.ConjunctionExpression}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:flyteidl.core.ConjunctionExpression)
      com.flyteidl.core.ConjunctionExpressionOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.flyteidl.core.ConditionProto.internal_static_flyteidl_core_ConjunctionExpression_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.flyteidl.core.ConditionProto.internal_static_flyteidl_core_ConjunctionExpression_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.flyteidl.core.ConjunctionExpression.class, com.flyteidl.core.ConjunctionExpression.Builder.class);
    }

    // Construct using com.flyteidl.core.ConjunctionExpression.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      operator_ = 0;

      if (leftExpressionBuilder_ == null) {
        leftExpression_ = null;
      } else {
        leftExpression_ = null;
        leftExpressionBuilder_ = null;
      }
      if (rightExpressionBuilder_ == null) {
        rightExpression_ = null;
      } else {
        rightExpression_ = null;
        rightExpressionBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.flyteidl.core.ConditionProto.internal_static_flyteidl_core_ConjunctionExpression_descriptor;
    }

    @java.lang.Override
    public com.flyteidl.core.ConjunctionExpression getDefaultInstanceForType() {
      return com.flyteidl.core.ConjunctionExpression.getDefaultInstance();
    }

    @java.lang.Override
    public com.flyteidl.core.ConjunctionExpression build() {
      com.flyteidl.core.ConjunctionExpression result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.flyteidl.core.ConjunctionExpression buildPartial() {
      com.flyteidl.core.ConjunctionExpression result = new com.flyteidl.core.ConjunctionExpression(this);
      result.operator_ = operator_;
      if (leftExpressionBuilder_ == null) {
        result.leftExpression_ = leftExpression_;
      } else {
        result.leftExpression_ = leftExpressionBuilder_.build();
      }
      if (rightExpressionBuilder_ == null) {
        result.rightExpression_ = rightExpression_;
      } else {
        result.rightExpression_ = rightExpressionBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.flyteidl.core.ConjunctionExpression) {
        return mergeFrom((com.flyteidl.core.ConjunctionExpression)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.flyteidl.core.ConjunctionExpression other) {
      if (other == com.flyteidl.core.ConjunctionExpression.getDefaultInstance()) return this;
      if (other.operator_ != 0) {
        setOperatorValue(other.getOperatorValue());
      }
      if (other.hasLeftExpression()) {
        mergeLeftExpression(other.getLeftExpression());
      }
      if (other.hasRightExpression()) {
        mergeRightExpression(other.getRightExpression());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.flyteidl.core.ConjunctionExpression parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.flyteidl.core.ConjunctionExpression) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private int operator_ = 0;
    /**
     * <code>.flyteidl.core.ConjunctionExpression.LogicalOperator operator = 1 [json_name = "operator"];</code>
     * @return The enum numeric value on the wire for operator.
     */
    @java.lang.Override public int getOperatorValue() {
      return operator_;
    }
    /**
     * <code>.flyteidl.core.ConjunctionExpression.LogicalOperator operator = 1 [json_name = "operator"];</code>
     * @param value The enum numeric value on the wire for operator to set.
     * @return This builder for chaining.
     */
    public Builder setOperatorValue(int value) {
      
      operator_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>.flyteidl.core.ConjunctionExpression.LogicalOperator operator = 1 [json_name = "operator"];</code>
     * @return The operator.
     */
    @java.lang.Override
    public com.flyteidl.core.ConjunctionExpression.LogicalOperator getOperator() {
      @SuppressWarnings("deprecation")
      com.flyteidl.core.ConjunctionExpression.LogicalOperator result = com.flyteidl.core.ConjunctionExpression.LogicalOperator.valueOf(operator_);
      return result == null ? com.flyteidl.core.ConjunctionExpression.LogicalOperator.UNRECOGNIZED : result;
    }
    /**
     * <code>.flyteidl.core.ConjunctionExpression.LogicalOperator operator = 1 [json_name = "operator"];</code>
     * @param value The operator to set.
     * @return This builder for chaining.
     */
    public Builder setOperator(com.flyteidl.core.ConjunctionExpression.LogicalOperator value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      operator_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>.flyteidl.core.ConjunctionExpression.LogicalOperator operator = 1 [json_name = "operator"];</code>
     * @return This builder for chaining.
     */
    public Builder clearOperator() {
      
      operator_ = 0;
      onChanged();
      return this;
    }

    private com.flyteidl.core.BooleanExpression leftExpression_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.BooleanExpression, com.flyteidl.core.BooleanExpression.Builder, com.flyteidl.core.BooleanExpressionOrBuilder> leftExpressionBuilder_;
    /**
     * <code>.flyteidl.core.BooleanExpression left_expression = 2 [json_name = "leftExpression"];</code>
     * @return Whether the leftExpression field is set.
     */
    public boolean hasLeftExpression() {
      return leftExpressionBuilder_ != null || leftExpression_ != null;
    }
    /**
     * <code>.flyteidl.core.BooleanExpression left_expression = 2 [json_name = "leftExpression"];</code>
     * @return The leftExpression.
     */
    public com.flyteidl.core.BooleanExpression getLeftExpression() {
      if (leftExpressionBuilder_ == null) {
        return leftExpression_ == null ? com.flyteidl.core.BooleanExpression.getDefaultInstance() : leftExpression_;
      } else {
        return leftExpressionBuilder_.getMessage();
      }
    }
    /**
     * <code>.flyteidl.core.BooleanExpression left_expression = 2 [json_name = "leftExpression"];</code>
     */
    public Builder setLeftExpression(com.flyteidl.core.BooleanExpression value) {
      if (leftExpressionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        leftExpression_ = value;
        onChanged();
      } else {
        leftExpressionBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.flyteidl.core.BooleanExpression left_expression = 2 [json_name = "leftExpression"];</code>
     */
    public Builder setLeftExpression(
        com.flyteidl.core.BooleanExpression.Builder builderForValue) {
      if (leftExpressionBuilder_ == null) {
        leftExpression_ = builderForValue.build();
        onChanged();
      } else {
        leftExpressionBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.flyteidl.core.BooleanExpression left_expression = 2 [json_name = "leftExpression"];</code>
     */
    public Builder mergeLeftExpression(com.flyteidl.core.BooleanExpression value) {
      if (leftExpressionBuilder_ == null) {
        if (leftExpression_ != null) {
          leftExpression_ =
            com.flyteidl.core.BooleanExpression.newBuilder(leftExpression_).mergeFrom(value).buildPartial();
        } else {
          leftExpression_ = value;
        }
        onChanged();
      } else {
        leftExpressionBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.flyteidl.core.BooleanExpression left_expression = 2 [json_name = "leftExpression"];</code>
     */
    public Builder clearLeftExpression() {
      if (leftExpressionBuilder_ == null) {
        leftExpression_ = null;
        onChanged();
      } else {
        leftExpression_ = null;
        leftExpressionBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.flyteidl.core.BooleanExpression left_expression = 2 [json_name = "leftExpression"];</code>
     */
    public com.flyteidl.core.BooleanExpression.Builder getLeftExpressionBuilder() {
      
      onChanged();
      return getLeftExpressionFieldBuilder().getBuilder();
    }
    /**
     * <code>.flyteidl.core.BooleanExpression left_expression = 2 [json_name = "leftExpression"];</code>
     */
    public com.flyteidl.core.BooleanExpressionOrBuilder getLeftExpressionOrBuilder() {
      if (leftExpressionBuilder_ != null) {
        return leftExpressionBuilder_.getMessageOrBuilder();
      } else {
        return leftExpression_ == null ?
            com.flyteidl.core.BooleanExpression.getDefaultInstance() : leftExpression_;
      }
    }
    /**
     * <code>.flyteidl.core.BooleanExpression left_expression = 2 [json_name = "leftExpression"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.BooleanExpression, com.flyteidl.core.BooleanExpression.Builder, com.flyteidl.core.BooleanExpressionOrBuilder> 
        getLeftExpressionFieldBuilder() {
      if (leftExpressionBuilder_ == null) {
        leftExpressionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.BooleanExpression, com.flyteidl.core.BooleanExpression.Builder, com.flyteidl.core.BooleanExpressionOrBuilder>(
                getLeftExpression(),
                getParentForChildren(),
                isClean());
        leftExpression_ = null;
      }
      return leftExpressionBuilder_;
    }

    private com.flyteidl.core.BooleanExpression rightExpression_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.BooleanExpression, com.flyteidl.core.BooleanExpression.Builder, com.flyteidl.core.BooleanExpressionOrBuilder> rightExpressionBuilder_;
    /**
     * <code>.flyteidl.core.BooleanExpression right_expression = 3 [json_name = "rightExpression"];</code>
     * @return Whether the rightExpression field is set.
     */
    public boolean hasRightExpression() {
      return rightExpressionBuilder_ != null || rightExpression_ != null;
    }
    /**
     * <code>.flyteidl.core.BooleanExpression right_expression = 3 [json_name = "rightExpression"];</code>
     * @return The rightExpression.
     */
    public com.flyteidl.core.BooleanExpression getRightExpression() {
      if (rightExpressionBuilder_ == null) {
        return rightExpression_ == null ? com.flyteidl.core.BooleanExpression.getDefaultInstance() : rightExpression_;
      } else {
        return rightExpressionBuilder_.getMessage();
      }
    }
    /**
     * <code>.flyteidl.core.BooleanExpression right_expression = 3 [json_name = "rightExpression"];</code>
     */
    public Builder setRightExpression(com.flyteidl.core.BooleanExpression value) {
      if (rightExpressionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        rightExpression_ = value;
        onChanged();
      } else {
        rightExpressionBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.flyteidl.core.BooleanExpression right_expression = 3 [json_name = "rightExpression"];</code>
     */
    public Builder setRightExpression(
        com.flyteidl.core.BooleanExpression.Builder builderForValue) {
      if (rightExpressionBuilder_ == null) {
        rightExpression_ = builderForValue.build();
        onChanged();
      } else {
        rightExpressionBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.flyteidl.core.BooleanExpression right_expression = 3 [json_name = "rightExpression"];</code>
     */
    public Builder mergeRightExpression(com.flyteidl.core.BooleanExpression value) {
      if (rightExpressionBuilder_ == null) {
        if (rightExpression_ != null) {
          rightExpression_ =
            com.flyteidl.core.BooleanExpression.newBuilder(rightExpression_).mergeFrom(value).buildPartial();
        } else {
          rightExpression_ = value;
        }
        onChanged();
      } else {
        rightExpressionBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.flyteidl.core.BooleanExpression right_expression = 3 [json_name = "rightExpression"];</code>
     */
    public Builder clearRightExpression() {
      if (rightExpressionBuilder_ == null) {
        rightExpression_ = null;
        onChanged();
      } else {
        rightExpression_ = null;
        rightExpressionBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.flyteidl.core.BooleanExpression right_expression = 3 [json_name = "rightExpression"];</code>
     */
    public com.flyteidl.core.BooleanExpression.Builder getRightExpressionBuilder() {
      
      onChanged();
      return getRightExpressionFieldBuilder().getBuilder();
    }
    /**
     * <code>.flyteidl.core.BooleanExpression right_expression = 3 [json_name = "rightExpression"];</code>
     */
    public com.flyteidl.core.BooleanExpressionOrBuilder getRightExpressionOrBuilder() {
      if (rightExpressionBuilder_ != null) {
        return rightExpressionBuilder_.getMessageOrBuilder();
      } else {
        return rightExpression_ == null ?
            com.flyteidl.core.BooleanExpression.getDefaultInstance() : rightExpression_;
      }
    }
    /**
     * <code>.flyteidl.core.BooleanExpression right_expression = 3 [json_name = "rightExpression"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.BooleanExpression, com.flyteidl.core.BooleanExpression.Builder, com.flyteidl.core.BooleanExpressionOrBuilder> 
        getRightExpressionFieldBuilder() {
      if (rightExpressionBuilder_ == null) {
        rightExpressionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.BooleanExpression, com.flyteidl.core.BooleanExpression.Builder, com.flyteidl.core.BooleanExpressionOrBuilder>(
                getRightExpression(),
                getParentForChildren(),
                isClean());
        rightExpression_ = null;
      }
      return rightExpressionBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:flyteidl.core.ConjunctionExpression)
  }

  // @@protoc_insertion_point(class_scope:flyteidl.core.ConjunctionExpression)
  private static final com.flyteidl.core.ConjunctionExpression DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.flyteidl.core.ConjunctionExpression();
  }

  public static com.flyteidl.core.ConjunctionExpression getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ConjunctionExpression>
      PARSER = new com.google.protobuf.AbstractParser<ConjunctionExpression>() {
    @java.lang.Override
    public ConjunctionExpression parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ConjunctionExpression(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ConjunctionExpression> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ConjunctionExpression> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.flyteidl.core.ConjunctionExpression getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

