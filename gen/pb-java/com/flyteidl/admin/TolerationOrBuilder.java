// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/cluster_assignment.proto

package com.flyteidl.admin;

public interface TolerationOrBuilder extends
    // @@protoc_insertion_point(interface_extends:flyteidl.admin.Toleration)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * A toleration selector is similar to that of an affinity but the only valid operators are EQUALS AND EXISTS.
   * </pre>
   *
   * <code>repeated .flyteidl.admin.Selector selectors = 1 [json_name = "selectors"];</code>
   */
  java.util.List<com.flyteidl.admin.Selector> 
      getSelectorsList();
  /**
   * <pre>
   * A toleration selector is similar to that of an affinity but the only valid operators are EQUALS AND EXISTS.
   * </pre>
   *
   * <code>repeated .flyteidl.admin.Selector selectors = 1 [json_name = "selectors"];</code>
   */
  com.flyteidl.admin.Selector getSelectors(int index);
  /**
   * <pre>
   * A toleration selector is similar to that of an affinity but the only valid operators are EQUALS AND EXISTS.
   * </pre>
   *
   * <code>repeated .flyteidl.admin.Selector selectors = 1 [json_name = "selectors"];</code>
   */
  int getSelectorsCount();
  /**
   * <pre>
   * A toleration selector is similar to that of an affinity but the only valid operators are EQUALS AND EXISTS.
   * </pre>
   *
   * <code>repeated .flyteidl.admin.Selector selectors = 1 [json_name = "selectors"];</code>
   */
  java.util.List<? extends com.flyteidl.admin.SelectorOrBuilder> 
      getSelectorsOrBuilderList();
  /**
   * <pre>
   * A toleration selector is similar to that of an affinity but the only valid operators are EQUALS AND EXISTS.
   * </pre>
   *
   * <code>repeated .flyteidl.admin.Selector selectors = 1 [json_name = "selectors"];</code>
   */
  com.flyteidl.admin.SelectorOrBuilder getSelectorsOrBuilder(
      int index);
}
