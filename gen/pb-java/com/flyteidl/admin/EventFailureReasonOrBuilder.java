// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/event.proto

package com.flyteidl.admin;

public interface EventFailureReasonOrBuilder extends
    // @@protoc_insertion_point(interface_extends:flyteidl.admin.EventFailureReason)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>.flyteidl.admin.EventErrorAlreadyInTerminalState already_in_terminal_state = 1 [json_name = "alreadyInTerminalState"];</code>
   * @return Whether the alreadyInTerminalState field is set.
   */
  boolean hasAlreadyInTerminalState();
  /**
   * <code>.flyteidl.admin.EventErrorAlreadyInTerminalState already_in_terminal_state = 1 [json_name = "alreadyInTerminalState"];</code>
   * @return The alreadyInTerminalState.
   */
  com.flyteidl.admin.EventErrorAlreadyInTerminalState getAlreadyInTerminalState();
  /**
   * <code>.flyteidl.admin.EventErrorAlreadyInTerminalState already_in_terminal_state = 1 [json_name = "alreadyInTerminalState"];</code>
   */
  com.flyteidl.admin.EventErrorAlreadyInTerminalStateOrBuilder getAlreadyInTerminalStateOrBuilder();

  /**
   * <code>.flyteidl.admin.EventErrorIncompatibleCluster incompatible_cluster = 2 [json_name = "incompatibleCluster"];</code>
   * @return Whether the incompatibleCluster field is set.
   */
  boolean hasIncompatibleCluster();
  /**
   * <code>.flyteidl.admin.EventErrorIncompatibleCluster incompatible_cluster = 2 [json_name = "incompatibleCluster"];</code>
   * @return The incompatibleCluster.
   */
  com.flyteidl.admin.EventErrorIncompatibleCluster getIncompatibleCluster();
  /**
   * <code>.flyteidl.admin.EventErrorIncompatibleCluster incompatible_cluster = 2 [json_name = "incompatibleCluster"];</code>
   */
  com.flyteidl.admin.EventErrorIncompatibleClusterOrBuilder getIncompatibleClusterOrBuilder();

  public com.flyteidl.admin.EventFailureReason.ReasonCase getReasonCase();
}
