// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/security.proto

package com.flyteidl.core;

/**
 * <pre>
 * SecurityContext holds security attributes that apply to tasks.
 * </pre>
 *
 * Protobuf type {@code flyteidl.core.SecurityContext}
 */
public final class SecurityContext extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:flyteidl.core.SecurityContext)
    SecurityContextOrBuilder {
private static final long serialVersionUID = 0L;
  // Use SecurityContext.newBuilder() to construct.
  private SecurityContext(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SecurityContext() {
    secrets_ = java.util.Collections.emptyList();
    tokens_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new SecurityContext();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private SecurityContext(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.flyteidl.core.Identity.Builder subBuilder = null;
            if (runAs_ != null) {
              subBuilder = runAs_.toBuilder();
            }
            runAs_ = input.readMessage(com.flyteidl.core.Identity.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(runAs_);
              runAs_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              secrets_ = new java.util.ArrayList<com.flyteidl.core.Secret>();
              mutable_bitField0_ |= 0x00000001;
            }
            secrets_.add(
                input.readMessage(com.flyteidl.core.Secret.parser(), extensionRegistry));
            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              tokens_ = new java.util.ArrayList<com.flyteidl.core.OAuth2TokenRequest>();
              mutable_bitField0_ |= 0x00000002;
            }
            tokens_.add(
                input.readMessage(com.flyteidl.core.OAuth2TokenRequest.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        secrets_ = java.util.Collections.unmodifiableList(secrets_);
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        tokens_ = java.util.Collections.unmodifiableList(tokens_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_SecurityContext_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_SecurityContext_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.flyteidl.core.SecurityContext.class, com.flyteidl.core.SecurityContext.Builder.class);
  }

  public static final int RUN_AS_FIELD_NUMBER = 1;
  private com.flyteidl.core.Identity runAs_;
  /**
   * <pre>
   * run_as encapsulates the identity a pod should run as. If the task fills in multiple fields here, it'll be up to the
   * backend plugin to choose the appropriate identity for the execution engine the task will run on.
   * </pre>
   *
   * <code>.flyteidl.core.Identity run_as = 1 [json_name = "runAs"];</code>
   * @return Whether the runAs field is set.
   */
  @java.lang.Override
  public boolean hasRunAs() {
    return runAs_ != null;
  }
  /**
   * <pre>
   * run_as encapsulates the identity a pod should run as. If the task fills in multiple fields here, it'll be up to the
   * backend plugin to choose the appropriate identity for the execution engine the task will run on.
   * </pre>
   *
   * <code>.flyteidl.core.Identity run_as = 1 [json_name = "runAs"];</code>
   * @return The runAs.
   */
  @java.lang.Override
  public com.flyteidl.core.Identity getRunAs() {
    return runAs_ == null ? com.flyteidl.core.Identity.getDefaultInstance() : runAs_;
  }
  /**
   * <pre>
   * run_as encapsulates the identity a pod should run as. If the task fills in multiple fields here, it'll be up to the
   * backend plugin to choose the appropriate identity for the execution engine the task will run on.
   * </pre>
   *
   * <code>.flyteidl.core.Identity run_as = 1 [json_name = "runAs"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.IdentityOrBuilder getRunAsOrBuilder() {
    return getRunAs();
  }

  public static final int SECRETS_FIELD_NUMBER = 2;
  private java.util.List<com.flyteidl.core.Secret> secrets_;
  /**
   * <pre>
   * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
   * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
   * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
   * to the secret) and to pass it to the remote execution engine.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
   */
  @java.lang.Override
  public java.util.List<com.flyteidl.core.Secret> getSecretsList() {
    return secrets_;
  }
  /**
   * <pre>
   * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
   * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
   * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
   * to the secret) and to pass it to the remote execution engine.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.flyteidl.core.SecretOrBuilder> 
      getSecretsOrBuilderList() {
    return secrets_;
  }
  /**
   * <pre>
   * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
   * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
   * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
   * to the secret) and to pass it to the remote execution engine.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
   */
  @java.lang.Override
  public int getSecretsCount() {
    return secrets_.size();
  }
  /**
   * <pre>
   * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
   * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
   * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
   * to the secret) and to pass it to the remote execution engine.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.Secret getSecrets(int index) {
    return secrets_.get(index);
  }
  /**
   * <pre>
   * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
   * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
   * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
   * to the secret) and to pass it to the remote execution engine.
   * </pre>
   *
   * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.SecretOrBuilder getSecretsOrBuilder(
      int index) {
    return secrets_.get(index);
  }

  public static final int TOKENS_FIELD_NUMBER = 3;
  private java.util.List<com.flyteidl.core.OAuth2TokenRequest> tokens_;
  /**
   * <pre>
   * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
   * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
   * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
   * to the secret) and to pass it to the remote execution engine.
   * </pre>
   *
   * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
   */
  @java.lang.Override
  public java.util.List<com.flyteidl.core.OAuth2TokenRequest> getTokensList() {
    return tokens_;
  }
  /**
   * <pre>
   * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
   * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
   * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
   * to the secret) and to pass it to the remote execution engine.
   * </pre>
   *
   * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.flyteidl.core.OAuth2TokenRequestOrBuilder> 
      getTokensOrBuilderList() {
    return tokens_;
  }
  /**
   * <pre>
   * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
   * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
   * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
   * to the secret) and to pass it to the remote execution engine.
   * </pre>
   *
   * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
   */
  @java.lang.Override
  public int getTokensCount() {
    return tokens_.size();
  }
  /**
   * <pre>
   * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
   * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
   * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
   * to the secret) and to pass it to the remote execution engine.
   * </pre>
   *
   * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.OAuth2TokenRequest getTokens(int index) {
    return tokens_.get(index);
  }
  /**
   * <pre>
   * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
   * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
   * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
   * to the secret) and to pass it to the remote execution engine.
   * </pre>
   *
   * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.OAuth2TokenRequestOrBuilder getTokensOrBuilder(
      int index) {
    return tokens_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (runAs_ != null) {
      output.writeMessage(1, getRunAs());
    }
    for (int i = 0; i < secrets_.size(); i++) {
      output.writeMessage(2, secrets_.get(i));
    }
    for (int i = 0; i < tokens_.size(); i++) {
      output.writeMessage(3, tokens_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (runAs_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getRunAs());
    }
    for (int i = 0; i < secrets_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, secrets_.get(i));
    }
    for (int i = 0; i < tokens_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, tokens_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.flyteidl.core.SecurityContext)) {
      return super.equals(obj);
    }
    com.flyteidl.core.SecurityContext other = (com.flyteidl.core.SecurityContext) obj;

    if (hasRunAs() != other.hasRunAs()) return false;
    if (hasRunAs()) {
      if (!getRunAs()
          .equals(other.getRunAs())) return false;
    }
    if (!getSecretsList()
        .equals(other.getSecretsList())) return false;
    if (!getTokensList()
        .equals(other.getTokensList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasRunAs()) {
      hash = (37 * hash) + RUN_AS_FIELD_NUMBER;
      hash = (53 * hash) + getRunAs().hashCode();
    }
    if (getSecretsCount() > 0) {
      hash = (37 * hash) + SECRETS_FIELD_NUMBER;
      hash = (53 * hash) + getSecretsList().hashCode();
    }
    if (getTokensCount() > 0) {
      hash = (37 * hash) + TOKENS_FIELD_NUMBER;
      hash = (53 * hash) + getTokensList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.flyteidl.core.SecurityContext parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.core.SecurityContext parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.core.SecurityContext parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.core.SecurityContext parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.core.SecurityContext parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.core.SecurityContext parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.core.SecurityContext parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.flyteidl.core.SecurityContext parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.flyteidl.core.SecurityContext parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.flyteidl.core.SecurityContext parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.flyteidl.core.SecurityContext parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.flyteidl.core.SecurityContext parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.flyteidl.core.SecurityContext prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * SecurityContext holds security attributes that apply to tasks.
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.SecurityContext}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:flyteidl.core.SecurityContext)
      com.flyteidl.core.SecurityContextOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_SecurityContext_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_SecurityContext_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.flyteidl.core.SecurityContext.class, com.flyteidl.core.SecurityContext.Builder.class);
    }

    // Construct using com.flyteidl.core.SecurityContext.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getSecretsFieldBuilder();
        getTokensFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (runAsBuilder_ == null) {
        runAs_ = null;
      } else {
        runAs_ = null;
        runAsBuilder_ = null;
      }
      if (secretsBuilder_ == null) {
        secrets_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        secretsBuilder_.clear();
      }
      if (tokensBuilder_ == null) {
        tokens_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        tokensBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_SecurityContext_descriptor;
    }

    @java.lang.Override
    public com.flyteidl.core.SecurityContext getDefaultInstanceForType() {
      return com.flyteidl.core.SecurityContext.getDefaultInstance();
    }

    @java.lang.Override
    public com.flyteidl.core.SecurityContext build() {
      com.flyteidl.core.SecurityContext result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.flyteidl.core.SecurityContext buildPartial() {
      com.flyteidl.core.SecurityContext result = new com.flyteidl.core.SecurityContext(this);
      int from_bitField0_ = bitField0_;
      if (runAsBuilder_ == null) {
        result.runAs_ = runAs_;
      } else {
        result.runAs_ = runAsBuilder_.build();
      }
      if (secretsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          secrets_ = java.util.Collections.unmodifiableList(secrets_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.secrets_ = secrets_;
      } else {
        result.secrets_ = secretsBuilder_.build();
      }
      if (tokensBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          tokens_ = java.util.Collections.unmodifiableList(tokens_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.tokens_ = tokens_;
      } else {
        result.tokens_ = tokensBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.flyteidl.core.SecurityContext) {
        return mergeFrom((com.flyteidl.core.SecurityContext)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.flyteidl.core.SecurityContext other) {
      if (other == com.flyteidl.core.SecurityContext.getDefaultInstance()) return this;
      if (other.hasRunAs()) {
        mergeRunAs(other.getRunAs());
      }
      if (secretsBuilder_ == null) {
        if (!other.secrets_.isEmpty()) {
          if (secrets_.isEmpty()) {
            secrets_ = other.secrets_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureSecretsIsMutable();
            secrets_.addAll(other.secrets_);
          }
          onChanged();
        }
      } else {
        if (!other.secrets_.isEmpty()) {
          if (secretsBuilder_.isEmpty()) {
            secretsBuilder_.dispose();
            secretsBuilder_ = null;
            secrets_ = other.secrets_;
            bitField0_ = (bitField0_ & ~0x00000001);
            secretsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getSecretsFieldBuilder() : null;
          } else {
            secretsBuilder_.addAllMessages(other.secrets_);
          }
        }
      }
      if (tokensBuilder_ == null) {
        if (!other.tokens_.isEmpty()) {
          if (tokens_.isEmpty()) {
            tokens_ = other.tokens_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureTokensIsMutable();
            tokens_.addAll(other.tokens_);
          }
          onChanged();
        }
      } else {
        if (!other.tokens_.isEmpty()) {
          if (tokensBuilder_.isEmpty()) {
            tokensBuilder_.dispose();
            tokensBuilder_ = null;
            tokens_ = other.tokens_;
            bitField0_ = (bitField0_ & ~0x00000002);
            tokensBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getTokensFieldBuilder() : null;
          } else {
            tokensBuilder_.addAllMessages(other.tokens_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.flyteidl.core.SecurityContext parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.flyteidl.core.SecurityContext) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.flyteidl.core.Identity runAs_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.Identity, com.flyteidl.core.Identity.Builder, com.flyteidl.core.IdentityOrBuilder> runAsBuilder_;
    /**
     * <pre>
     * run_as encapsulates the identity a pod should run as. If the task fills in multiple fields here, it'll be up to the
     * backend plugin to choose the appropriate identity for the execution engine the task will run on.
     * </pre>
     *
     * <code>.flyteidl.core.Identity run_as = 1 [json_name = "runAs"];</code>
     * @return Whether the runAs field is set.
     */
    public boolean hasRunAs() {
      return runAsBuilder_ != null || runAs_ != null;
    }
    /**
     * <pre>
     * run_as encapsulates the identity a pod should run as. If the task fills in multiple fields here, it'll be up to the
     * backend plugin to choose the appropriate identity for the execution engine the task will run on.
     * </pre>
     *
     * <code>.flyteidl.core.Identity run_as = 1 [json_name = "runAs"];</code>
     * @return The runAs.
     */
    public com.flyteidl.core.Identity getRunAs() {
      if (runAsBuilder_ == null) {
        return runAs_ == null ? com.flyteidl.core.Identity.getDefaultInstance() : runAs_;
      } else {
        return runAsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * run_as encapsulates the identity a pod should run as. If the task fills in multiple fields here, it'll be up to the
     * backend plugin to choose the appropriate identity for the execution engine the task will run on.
     * </pre>
     *
     * <code>.flyteidl.core.Identity run_as = 1 [json_name = "runAs"];</code>
     */
    public Builder setRunAs(com.flyteidl.core.Identity value) {
      if (runAsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        runAs_ = value;
        onChanged();
      } else {
        runAsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * run_as encapsulates the identity a pod should run as. If the task fills in multiple fields here, it'll be up to the
     * backend plugin to choose the appropriate identity for the execution engine the task will run on.
     * </pre>
     *
     * <code>.flyteidl.core.Identity run_as = 1 [json_name = "runAs"];</code>
     */
    public Builder setRunAs(
        com.flyteidl.core.Identity.Builder builderForValue) {
      if (runAsBuilder_ == null) {
        runAs_ = builderForValue.build();
        onChanged();
      } else {
        runAsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * run_as encapsulates the identity a pod should run as. If the task fills in multiple fields here, it'll be up to the
     * backend plugin to choose the appropriate identity for the execution engine the task will run on.
     * </pre>
     *
     * <code>.flyteidl.core.Identity run_as = 1 [json_name = "runAs"];</code>
     */
    public Builder mergeRunAs(com.flyteidl.core.Identity value) {
      if (runAsBuilder_ == null) {
        if (runAs_ != null) {
          runAs_ =
            com.flyteidl.core.Identity.newBuilder(runAs_).mergeFrom(value).buildPartial();
        } else {
          runAs_ = value;
        }
        onChanged();
      } else {
        runAsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * run_as encapsulates the identity a pod should run as. If the task fills in multiple fields here, it'll be up to the
     * backend plugin to choose the appropriate identity for the execution engine the task will run on.
     * </pre>
     *
     * <code>.flyteidl.core.Identity run_as = 1 [json_name = "runAs"];</code>
     */
    public Builder clearRunAs() {
      if (runAsBuilder_ == null) {
        runAs_ = null;
        onChanged();
      } else {
        runAs_ = null;
        runAsBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * run_as encapsulates the identity a pod should run as. If the task fills in multiple fields here, it'll be up to the
     * backend plugin to choose the appropriate identity for the execution engine the task will run on.
     * </pre>
     *
     * <code>.flyteidl.core.Identity run_as = 1 [json_name = "runAs"];</code>
     */
    public com.flyteidl.core.Identity.Builder getRunAsBuilder() {
      
      onChanged();
      return getRunAsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * run_as encapsulates the identity a pod should run as. If the task fills in multiple fields here, it'll be up to the
     * backend plugin to choose the appropriate identity for the execution engine the task will run on.
     * </pre>
     *
     * <code>.flyteidl.core.Identity run_as = 1 [json_name = "runAs"];</code>
     */
    public com.flyteidl.core.IdentityOrBuilder getRunAsOrBuilder() {
      if (runAsBuilder_ != null) {
        return runAsBuilder_.getMessageOrBuilder();
      } else {
        return runAs_ == null ?
            com.flyteidl.core.Identity.getDefaultInstance() : runAs_;
      }
    }
    /**
     * <pre>
     * run_as encapsulates the identity a pod should run as. If the task fills in multiple fields here, it'll be up to the
     * backend plugin to choose the appropriate identity for the execution engine the task will run on.
     * </pre>
     *
     * <code>.flyteidl.core.Identity run_as = 1 [json_name = "runAs"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.Identity, com.flyteidl.core.Identity.Builder, com.flyteidl.core.IdentityOrBuilder> 
        getRunAsFieldBuilder() {
      if (runAsBuilder_ == null) {
        runAsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.Identity, com.flyteidl.core.Identity.Builder, com.flyteidl.core.IdentityOrBuilder>(
                getRunAs(),
                getParentForChildren(),
                isClean());
        runAs_ = null;
      }
      return runAsBuilder_;
    }

    private java.util.List<com.flyteidl.core.Secret> secrets_ =
      java.util.Collections.emptyList();
    private void ensureSecretsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        secrets_ = new java.util.ArrayList<com.flyteidl.core.Secret>(secrets_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.flyteidl.core.Secret, com.flyteidl.core.Secret.Builder, com.flyteidl.core.SecretOrBuilder> secretsBuilder_;

    /**
     * <pre>
     * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
     */
    public java.util.List<com.flyteidl.core.Secret> getSecretsList() {
      if (secretsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(secrets_);
      } else {
        return secretsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
     */
    public int getSecretsCount() {
      if (secretsBuilder_ == null) {
        return secrets_.size();
      } else {
        return secretsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
     */
    public com.flyteidl.core.Secret getSecrets(int index) {
      if (secretsBuilder_ == null) {
        return secrets_.get(index);
      } else {
        return secretsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
     */
    public Builder setSecrets(
        int index, com.flyteidl.core.Secret value) {
      if (secretsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSecretsIsMutable();
        secrets_.set(index, value);
        onChanged();
      } else {
        secretsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
     */
    public Builder setSecrets(
        int index, com.flyteidl.core.Secret.Builder builderForValue) {
      if (secretsBuilder_ == null) {
        ensureSecretsIsMutable();
        secrets_.set(index, builderForValue.build());
        onChanged();
      } else {
        secretsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
     */
    public Builder addSecrets(com.flyteidl.core.Secret value) {
      if (secretsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSecretsIsMutable();
        secrets_.add(value);
        onChanged();
      } else {
        secretsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
     */
    public Builder addSecrets(
        int index, com.flyteidl.core.Secret value) {
      if (secretsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSecretsIsMutable();
        secrets_.add(index, value);
        onChanged();
      } else {
        secretsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
     */
    public Builder addSecrets(
        com.flyteidl.core.Secret.Builder builderForValue) {
      if (secretsBuilder_ == null) {
        ensureSecretsIsMutable();
        secrets_.add(builderForValue.build());
        onChanged();
      } else {
        secretsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
     */
    public Builder addSecrets(
        int index, com.flyteidl.core.Secret.Builder builderForValue) {
      if (secretsBuilder_ == null) {
        ensureSecretsIsMutable();
        secrets_.add(index, builderForValue.build());
        onChanged();
      } else {
        secretsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
     */
    public Builder addAllSecrets(
        java.lang.Iterable<? extends com.flyteidl.core.Secret> values) {
      if (secretsBuilder_ == null) {
        ensureSecretsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, secrets_);
        onChanged();
      } else {
        secretsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
     */
    public Builder clearSecrets() {
      if (secretsBuilder_ == null) {
        secrets_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        secretsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
     */
    public Builder removeSecrets(int index) {
      if (secretsBuilder_ == null) {
        ensureSecretsIsMutable();
        secrets_.remove(index);
        onChanged();
      } else {
        secretsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
     */
    public com.flyteidl.core.Secret.Builder getSecretsBuilder(
        int index) {
      return getSecretsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
     */
    public com.flyteidl.core.SecretOrBuilder getSecretsOrBuilder(
        int index) {
      if (secretsBuilder_ == null) {
        return secrets_.get(index);  } else {
        return secretsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
     */
    public java.util.List<? extends com.flyteidl.core.SecretOrBuilder> 
         getSecretsOrBuilderList() {
      if (secretsBuilder_ != null) {
        return secretsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(secrets_);
      }
    }
    /**
     * <pre>
     * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
     */
    public com.flyteidl.core.Secret.Builder addSecretsBuilder() {
      return getSecretsFieldBuilder().addBuilder(
          com.flyteidl.core.Secret.getDefaultInstance());
    }
    /**
     * <pre>
     * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
     */
    public com.flyteidl.core.Secret.Builder addSecretsBuilder(
        int index) {
      return getSecretsFieldBuilder().addBuilder(
          index, com.flyteidl.core.Secret.getDefaultInstance());
    }
    /**
     * <pre>
     * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
     */
    public java.util.List<com.flyteidl.core.Secret.Builder> 
         getSecretsBuilderList() {
      return getSecretsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.flyteidl.core.Secret, com.flyteidl.core.Secret.Builder, com.flyteidl.core.SecretOrBuilder> 
        getSecretsFieldBuilder() {
      if (secretsBuilder_ == null) {
        secretsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.flyteidl.core.Secret, com.flyteidl.core.Secret.Builder, com.flyteidl.core.SecretOrBuilder>(
                secrets_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        secrets_ = null;
      }
      return secretsBuilder_;
    }

    private java.util.List<com.flyteidl.core.OAuth2TokenRequest> tokens_ =
      java.util.Collections.emptyList();
    private void ensureTokensIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        tokens_ = new java.util.ArrayList<com.flyteidl.core.OAuth2TokenRequest>(tokens_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.flyteidl.core.OAuth2TokenRequest, com.flyteidl.core.OAuth2TokenRequest.Builder, com.flyteidl.core.OAuth2TokenRequestOrBuilder> tokensBuilder_;

    /**
     * <pre>
     * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
     */
    public java.util.List<com.flyteidl.core.OAuth2TokenRequest> getTokensList() {
      if (tokensBuilder_ == null) {
        return java.util.Collections.unmodifiableList(tokens_);
      } else {
        return tokensBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
     */
    public int getTokensCount() {
      if (tokensBuilder_ == null) {
        return tokens_.size();
      } else {
        return tokensBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
     */
    public com.flyteidl.core.OAuth2TokenRequest getTokens(int index) {
      if (tokensBuilder_ == null) {
        return tokens_.get(index);
      } else {
        return tokensBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
     */
    public Builder setTokens(
        int index, com.flyteidl.core.OAuth2TokenRequest value) {
      if (tokensBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTokensIsMutable();
        tokens_.set(index, value);
        onChanged();
      } else {
        tokensBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
     */
    public Builder setTokens(
        int index, com.flyteidl.core.OAuth2TokenRequest.Builder builderForValue) {
      if (tokensBuilder_ == null) {
        ensureTokensIsMutable();
        tokens_.set(index, builderForValue.build());
        onChanged();
      } else {
        tokensBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
     */
    public Builder addTokens(com.flyteidl.core.OAuth2TokenRequest value) {
      if (tokensBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTokensIsMutable();
        tokens_.add(value);
        onChanged();
      } else {
        tokensBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
     */
    public Builder addTokens(
        int index, com.flyteidl.core.OAuth2TokenRequest value) {
      if (tokensBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTokensIsMutable();
        tokens_.add(index, value);
        onChanged();
      } else {
        tokensBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
     */
    public Builder addTokens(
        com.flyteidl.core.OAuth2TokenRequest.Builder builderForValue) {
      if (tokensBuilder_ == null) {
        ensureTokensIsMutable();
        tokens_.add(builderForValue.build());
        onChanged();
      } else {
        tokensBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
     */
    public Builder addTokens(
        int index, com.flyteidl.core.OAuth2TokenRequest.Builder builderForValue) {
      if (tokensBuilder_ == null) {
        ensureTokensIsMutable();
        tokens_.add(index, builderForValue.build());
        onChanged();
      } else {
        tokensBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
     */
    public Builder addAllTokens(
        java.lang.Iterable<? extends com.flyteidl.core.OAuth2TokenRequest> values) {
      if (tokensBuilder_ == null) {
        ensureTokensIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, tokens_);
        onChanged();
      } else {
        tokensBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
     */
    public Builder clearTokens() {
      if (tokensBuilder_ == null) {
        tokens_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        tokensBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
     */
    public Builder removeTokens(int index) {
      if (tokensBuilder_ == null) {
        ensureTokensIsMutable();
        tokens_.remove(index);
        onChanged();
      } else {
        tokensBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
     */
    public com.flyteidl.core.OAuth2TokenRequest.Builder getTokensBuilder(
        int index) {
      return getTokensFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
     */
    public com.flyteidl.core.OAuth2TokenRequestOrBuilder getTokensOrBuilder(
        int index) {
      if (tokensBuilder_ == null) {
        return tokens_.get(index);  } else {
        return tokensBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
     */
    public java.util.List<? extends com.flyteidl.core.OAuth2TokenRequestOrBuilder> 
         getTokensOrBuilderList() {
      if (tokensBuilder_ != null) {
        return tokensBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(tokens_);
      }
    }
    /**
     * <pre>
     * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
     */
    public com.flyteidl.core.OAuth2TokenRequest.Builder addTokensBuilder() {
      return getTokensFieldBuilder().addBuilder(
          com.flyteidl.core.OAuth2TokenRequest.getDefaultInstance());
    }
    /**
     * <pre>
     * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
     */
    public com.flyteidl.core.OAuth2TokenRequest.Builder addTokensBuilder(
        int index) {
      return getTokensFieldBuilder().addBuilder(
          index, com.flyteidl.core.OAuth2TokenRequest.getDefaultInstance());
    }
    /**
     * <pre>
     * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
     */
    public java.util.List<com.flyteidl.core.OAuth2TokenRequest.Builder> 
         getTokensBuilderList() {
      return getTokensFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.flyteidl.core.OAuth2TokenRequest, com.flyteidl.core.OAuth2TokenRequest.Builder, com.flyteidl.core.OAuth2TokenRequestOrBuilder> 
        getTokensFieldBuilder() {
      if (tokensBuilder_ == null) {
        tokensBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.flyteidl.core.OAuth2TokenRequest, com.flyteidl.core.OAuth2TokenRequest.Builder, com.flyteidl.core.OAuth2TokenRequestOrBuilder>(
                tokens_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        tokens_ = null;
      }
      return tokensBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:flyteidl.core.SecurityContext)
  }

  // @@protoc_insertion_point(class_scope:flyteidl.core.SecurityContext)
  private static final com.flyteidl.core.SecurityContext DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.flyteidl.core.SecurityContext();
  }

  public static com.flyteidl.core.SecurityContext getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SecurityContext>
      PARSER = new com.google.protobuf.AbstractParser<SecurityContext>() {
    @java.lang.Override
    public SecurityContext parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new SecurityContext(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<SecurityContext> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SecurityContext> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.flyteidl.core.SecurityContext getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

