// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/matchable_resource.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fadmin_2fmatchable_5fresource_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fadmin_2fmatchable_5fresource_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/admin/common.pb.h"
#include "flyteidl/admin/cluster_assignment.pb.h"
#include "flyteidl/core/execution.pb.h"
#include "flyteidl/core/security.pb.h"
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fmatchable_5fresource_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fadmin_2fmatchable_5fresource_2eproto();
namespace flyteidl {
namespace admin {
class ClusterResourceAttributes;
class ClusterResourceAttributesDefaultTypeInternal;
extern ClusterResourceAttributesDefaultTypeInternal _ClusterResourceAttributes_default_instance_;
class ClusterResourceAttributes_AttributesEntry_DoNotUse;
class ClusterResourceAttributes_AttributesEntry_DoNotUseDefaultTypeInternal;
extern ClusterResourceAttributes_AttributesEntry_DoNotUseDefaultTypeInternal _ClusterResourceAttributes_AttributesEntry_DoNotUse_default_instance_;
class ExecutionClusterLabel;
class ExecutionClusterLabelDefaultTypeInternal;
extern ExecutionClusterLabelDefaultTypeInternal _ExecutionClusterLabel_default_instance_;
class ExecutionQueueAttributes;
class ExecutionQueueAttributesDefaultTypeInternal;
extern ExecutionQueueAttributesDefaultTypeInternal _ExecutionQueueAttributes_default_instance_;
class ListMatchableAttributesRequest;
class ListMatchableAttributesRequestDefaultTypeInternal;
extern ListMatchableAttributesRequestDefaultTypeInternal _ListMatchableAttributesRequest_default_instance_;
class ListMatchableAttributesResponse;
class ListMatchableAttributesResponseDefaultTypeInternal;
extern ListMatchableAttributesResponseDefaultTypeInternal _ListMatchableAttributesResponse_default_instance_;
class MatchableAttributesConfiguration;
class MatchableAttributesConfigurationDefaultTypeInternal;
extern MatchableAttributesConfigurationDefaultTypeInternal _MatchableAttributesConfiguration_default_instance_;
class MatchingAttributes;
class MatchingAttributesDefaultTypeInternal;
extern MatchingAttributesDefaultTypeInternal _MatchingAttributes_default_instance_;
class PluginOverride;
class PluginOverrideDefaultTypeInternal;
extern PluginOverrideDefaultTypeInternal _PluginOverride_default_instance_;
class PluginOverrides;
class PluginOverridesDefaultTypeInternal;
extern PluginOverridesDefaultTypeInternal _PluginOverrides_default_instance_;
class TaskResourceAttributes;
class TaskResourceAttributesDefaultTypeInternal;
extern TaskResourceAttributesDefaultTypeInternal _TaskResourceAttributes_default_instance_;
class TaskResourceSpec;
class TaskResourceSpecDefaultTypeInternal;
extern TaskResourceSpecDefaultTypeInternal _TaskResourceSpec_default_instance_;
class WorkflowExecutionConfig;
class WorkflowExecutionConfigDefaultTypeInternal;
extern WorkflowExecutionConfigDefaultTypeInternal _WorkflowExecutionConfig_default_instance_;
}  // namespace admin
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::admin::ClusterResourceAttributes* Arena::CreateMaybeMessage<::flyteidl::admin::ClusterResourceAttributes>(Arena*);
template<> ::flyteidl::admin::ClusterResourceAttributes_AttributesEntry_DoNotUse* Arena::CreateMaybeMessage<::flyteidl::admin::ClusterResourceAttributes_AttributesEntry_DoNotUse>(Arena*);
template<> ::flyteidl::admin::ExecutionClusterLabel* Arena::CreateMaybeMessage<::flyteidl::admin::ExecutionClusterLabel>(Arena*);
template<> ::flyteidl::admin::ExecutionQueueAttributes* Arena::CreateMaybeMessage<::flyteidl::admin::ExecutionQueueAttributes>(Arena*);
template<> ::flyteidl::admin::ListMatchableAttributesRequest* Arena::CreateMaybeMessage<::flyteidl::admin::ListMatchableAttributesRequest>(Arena*);
template<> ::flyteidl::admin::ListMatchableAttributesResponse* Arena::CreateMaybeMessage<::flyteidl::admin::ListMatchableAttributesResponse>(Arena*);
template<> ::flyteidl::admin::MatchableAttributesConfiguration* Arena::CreateMaybeMessage<::flyteidl::admin::MatchableAttributesConfiguration>(Arena*);
template<> ::flyteidl::admin::MatchingAttributes* Arena::CreateMaybeMessage<::flyteidl::admin::MatchingAttributes>(Arena*);
template<> ::flyteidl::admin::PluginOverride* Arena::CreateMaybeMessage<::flyteidl::admin::PluginOverride>(Arena*);
template<> ::flyteidl::admin::PluginOverrides* Arena::CreateMaybeMessage<::flyteidl::admin::PluginOverrides>(Arena*);
template<> ::flyteidl::admin::TaskResourceAttributes* Arena::CreateMaybeMessage<::flyteidl::admin::TaskResourceAttributes>(Arena*);
template<> ::flyteidl::admin::TaskResourceSpec* Arena::CreateMaybeMessage<::flyteidl::admin::TaskResourceSpec>(Arena*);
template<> ::flyteidl::admin::WorkflowExecutionConfig* Arena::CreateMaybeMessage<::flyteidl::admin::WorkflowExecutionConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace admin {

enum PluginOverride_MissingPluginBehavior {
  PluginOverride_MissingPluginBehavior_FAIL = 0,
  PluginOverride_MissingPluginBehavior_USE_DEFAULT = 1,
  PluginOverride_MissingPluginBehavior_PluginOverride_MissingPluginBehavior_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  PluginOverride_MissingPluginBehavior_PluginOverride_MissingPluginBehavior_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool PluginOverride_MissingPluginBehavior_IsValid(int value);
const PluginOverride_MissingPluginBehavior PluginOverride_MissingPluginBehavior_MissingPluginBehavior_MIN = PluginOverride_MissingPluginBehavior_FAIL;
const PluginOverride_MissingPluginBehavior PluginOverride_MissingPluginBehavior_MissingPluginBehavior_MAX = PluginOverride_MissingPluginBehavior_USE_DEFAULT;
const int PluginOverride_MissingPluginBehavior_MissingPluginBehavior_ARRAYSIZE = PluginOverride_MissingPluginBehavior_MissingPluginBehavior_MAX + 1;

const ::google::protobuf::EnumDescriptor* PluginOverride_MissingPluginBehavior_descriptor();
inline const ::std::string& PluginOverride_MissingPluginBehavior_Name(PluginOverride_MissingPluginBehavior value) {
  return ::google::protobuf::internal::NameOfEnum(
    PluginOverride_MissingPluginBehavior_descriptor(), value);
}
inline bool PluginOverride_MissingPluginBehavior_Parse(
    const ::std::string& name, PluginOverride_MissingPluginBehavior* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PluginOverride_MissingPluginBehavior>(
    PluginOverride_MissingPluginBehavior_descriptor(), name, value);
}
enum MatchableResource {
  TASK_RESOURCE = 0,
  CLUSTER_RESOURCE = 1,
  EXECUTION_QUEUE = 2,
  EXECUTION_CLUSTER_LABEL = 3,
  QUALITY_OF_SERVICE_SPECIFICATION = 4,
  PLUGIN_OVERRIDE = 5,
  WORKFLOW_EXECUTION_CONFIG = 6,
  CLUSTER_ASSIGNMENT = 7,
  MatchableResource_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  MatchableResource_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool MatchableResource_IsValid(int value);
const MatchableResource MatchableResource_MIN = TASK_RESOURCE;
const MatchableResource MatchableResource_MAX = CLUSTER_ASSIGNMENT;
const int MatchableResource_ARRAYSIZE = MatchableResource_MAX + 1;

const ::google::protobuf::EnumDescriptor* MatchableResource_descriptor();
inline const ::std::string& MatchableResource_Name(MatchableResource value) {
  return ::google::protobuf::internal::NameOfEnum(
    MatchableResource_descriptor(), value);
}
inline bool MatchableResource_Parse(
    const ::std::string& name, MatchableResource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MatchableResource>(
    MatchableResource_descriptor(), name, value);
}
// ===================================================================

class TaskResourceSpec final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskResourceSpec) */ {
 public:
  TaskResourceSpec();
  virtual ~TaskResourceSpec();

  TaskResourceSpec(const TaskResourceSpec& from);

  inline TaskResourceSpec& operator=(const TaskResourceSpec& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskResourceSpec(TaskResourceSpec&& from) noexcept
    : TaskResourceSpec() {
    *this = ::std::move(from);
  }

  inline TaskResourceSpec& operator=(TaskResourceSpec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskResourceSpec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskResourceSpec* internal_default_instance() {
    return reinterpret_cast<const TaskResourceSpec*>(
               &_TaskResourceSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TaskResourceSpec* other);
  friend void swap(TaskResourceSpec& a, TaskResourceSpec& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskResourceSpec* New() const final {
    return CreateMaybeMessage<TaskResourceSpec>(nullptr);
  }

  TaskResourceSpec* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskResourceSpec>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskResourceSpec& from);
  void MergeFrom(const TaskResourceSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskResourceSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cpu = 1;
  void clear_cpu();
  static const int kCpuFieldNumber = 1;
  const ::std::string& cpu() const;
  void set_cpu(const ::std::string& value);
  #if LANG_CXX11
  void set_cpu(::std::string&& value);
  #endif
  void set_cpu(const char* value);
  void set_cpu(const char* value, size_t size);
  ::std::string* mutable_cpu();
  ::std::string* release_cpu();
  void set_allocated_cpu(::std::string* cpu);

  // string gpu = 2;
  void clear_gpu();
  static const int kGpuFieldNumber = 2;
  const ::std::string& gpu() const;
  void set_gpu(const ::std::string& value);
  #if LANG_CXX11
  void set_gpu(::std::string&& value);
  #endif
  void set_gpu(const char* value);
  void set_gpu(const char* value, size_t size);
  ::std::string* mutable_gpu();
  ::std::string* release_gpu();
  void set_allocated_gpu(::std::string* gpu);

  // string memory = 3;
  void clear_memory();
  static const int kMemoryFieldNumber = 3;
  const ::std::string& memory() const;
  void set_memory(const ::std::string& value);
  #if LANG_CXX11
  void set_memory(::std::string&& value);
  #endif
  void set_memory(const char* value);
  void set_memory(const char* value, size_t size);
  ::std::string* mutable_memory();
  ::std::string* release_memory();
  void set_allocated_memory(::std::string* memory);

  // string storage = 4;
  void clear_storage();
  static const int kStorageFieldNumber = 4;
  const ::std::string& storage() const;
  void set_storage(const ::std::string& value);
  #if LANG_CXX11
  void set_storage(::std::string&& value);
  #endif
  void set_storage(const char* value);
  void set_storage(const char* value, size_t size);
  ::std::string* mutable_storage();
  ::std::string* release_storage();
  void set_allocated_storage(::std::string* storage);

  // string ephemeral_storage = 5;
  void clear_ephemeral_storage();
  static const int kEphemeralStorageFieldNumber = 5;
  const ::std::string& ephemeral_storage() const;
  void set_ephemeral_storage(const ::std::string& value);
  #if LANG_CXX11
  void set_ephemeral_storage(::std::string&& value);
  #endif
  void set_ephemeral_storage(const char* value);
  void set_ephemeral_storage(const char* value, size_t size);
  ::std::string* mutable_ephemeral_storage();
  ::std::string* release_ephemeral_storage();
  void set_allocated_ephemeral_storage(::std::string* ephemeral_storage);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskResourceSpec)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cpu_;
  ::google::protobuf::internal::ArenaStringPtr gpu_;
  ::google::protobuf::internal::ArenaStringPtr memory_;
  ::google::protobuf::internal::ArenaStringPtr storage_;
  ::google::protobuf::internal::ArenaStringPtr ephemeral_storage_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// -------------------------------------------------------------------

class TaskResourceAttributes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskResourceAttributes) */ {
 public:
  TaskResourceAttributes();
  virtual ~TaskResourceAttributes();

  TaskResourceAttributes(const TaskResourceAttributes& from);

  inline TaskResourceAttributes& operator=(const TaskResourceAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskResourceAttributes(TaskResourceAttributes&& from) noexcept
    : TaskResourceAttributes() {
    *this = ::std::move(from);
  }

  inline TaskResourceAttributes& operator=(TaskResourceAttributes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskResourceAttributes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskResourceAttributes* internal_default_instance() {
    return reinterpret_cast<const TaskResourceAttributes*>(
               &_TaskResourceAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TaskResourceAttributes* other);
  friend void swap(TaskResourceAttributes& a, TaskResourceAttributes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskResourceAttributes* New() const final {
    return CreateMaybeMessage<TaskResourceAttributes>(nullptr);
  }

  TaskResourceAttributes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskResourceAttributes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskResourceAttributes& from);
  void MergeFrom(const TaskResourceAttributes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskResourceAttributes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.admin.TaskResourceSpec defaults = 1;
  bool has_defaults() const;
  void clear_defaults();
  static const int kDefaultsFieldNumber = 1;
  const ::flyteidl::admin::TaskResourceSpec& defaults() const;
  ::flyteidl::admin::TaskResourceSpec* release_defaults();
  ::flyteidl::admin::TaskResourceSpec* mutable_defaults();
  void set_allocated_defaults(::flyteidl::admin::TaskResourceSpec* defaults);

  // .flyteidl.admin.TaskResourceSpec limits = 2;
  bool has_limits() const;
  void clear_limits();
  static const int kLimitsFieldNumber = 2;
  const ::flyteidl::admin::TaskResourceSpec& limits() const;
  ::flyteidl::admin::TaskResourceSpec* release_limits();
  ::flyteidl::admin::TaskResourceSpec* mutable_limits();
  void set_allocated_limits(::flyteidl::admin::TaskResourceSpec* limits);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskResourceAttributes)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::admin::TaskResourceSpec* defaults_;
  ::flyteidl::admin::TaskResourceSpec* limits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// -------------------------------------------------------------------

class ClusterResourceAttributes_AttributesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ClusterResourceAttributes_AttributesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<ClusterResourceAttributes_AttributesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ClusterResourceAttributes_AttributesEntry_DoNotUse();
  ClusterResourceAttributes_AttributesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ClusterResourceAttributes_AttributesEntry_DoNotUse& other);
  static const ClusterResourceAttributes_AttributesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ClusterResourceAttributes_AttributesEntry_DoNotUse*>(&_ClusterResourceAttributes_AttributesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ClusterResourceAttributes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ClusterResourceAttributes) */ {
 public:
  ClusterResourceAttributes();
  virtual ~ClusterResourceAttributes();

  ClusterResourceAttributes(const ClusterResourceAttributes& from);

  inline ClusterResourceAttributes& operator=(const ClusterResourceAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClusterResourceAttributes(ClusterResourceAttributes&& from) noexcept
    : ClusterResourceAttributes() {
    *this = ::std::move(from);
  }

  inline ClusterResourceAttributes& operator=(ClusterResourceAttributes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ClusterResourceAttributes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClusterResourceAttributes* internal_default_instance() {
    return reinterpret_cast<const ClusterResourceAttributes*>(
               &_ClusterResourceAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ClusterResourceAttributes* other);
  friend void swap(ClusterResourceAttributes& a, ClusterResourceAttributes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClusterResourceAttributes* New() const final {
    return CreateMaybeMessage<ClusterResourceAttributes>(nullptr);
  }

  ClusterResourceAttributes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClusterResourceAttributes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClusterResourceAttributes& from);
  void MergeFrom(const ClusterResourceAttributes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterResourceAttributes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> attributes = 1;
  int attributes_size() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      attributes() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_attributes();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ClusterResourceAttributes)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      ClusterResourceAttributes_AttributesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > attributes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// -------------------------------------------------------------------

class ExecutionQueueAttributes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ExecutionQueueAttributes) */ {
 public:
  ExecutionQueueAttributes();
  virtual ~ExecutionQueueAttributes();

  ExecutionQueueAttributes(const ExecutionQueueAttributes& from);

  inline ExecutionQueueAttributes& operator=(const ExecutionQueueAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionQueueAttributes(ExecutionQueueAttributes&& from) noexcept
    : ExecutionQueueAttributes() {
    *this = ::std::move(from);
  }

  inline ExecutionQueueAttributes& operator=(ExecutionQueueAttributes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExecutionQueueAttributes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionQueueAttributes* internal_default_instance() {
    return reinterpret_cast<const ExecutionQueueAttributes*>(
               &_ExecutionQueueAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ExecutionQueueAttributes* other);
  friend void swap(ExecutionQueueAttributes& a, ExecutionQueueAttributes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionQueueAttributes* New() const final {
    return CreateMaybeMessage<ExecutionQueueAttributes>(nullptr);
  }

  ExecutionQueueAttributes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecutionQueueAttributes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecutionQueueAttributes& from);
  void MergeFrom(const ExecutionQueueAttributes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionQueueAttributes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string tags = 1;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 1;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_tags();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ExecutionQueueAttributes)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> tags_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// -------------------------------------------------------------------

class ExecutionClusterLabel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ExecutionClusterLabel) */ {
 public:
  ExecutionClusterLabel();
  virtual ~ExecutionClusterLabel();

  ExecutionClusterLabel(const ExecutionClusterLabel& from);

  inline ExecutionClusterLabel& operator=(const ExecutionClusterLabel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionClusterLabel(ExecutionClusterLabel&& from) noexcept
    : ExecutionClusterLabel() {
    *this = ::std::move(from);
  }

  inline ExecutionClusterLabel& operator=(ExecutionClusterLabel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExecutionClusterLabel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionClusterLabel* internal_default_instance() {
    return reinterpret_cast<const ExecutionClusterLabel*>(
               &_ExecutionClusterLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ExecutionClusterLabel* other);
  friend void swap(ExecutionClusterLabel& a, ExecutionClusterLabel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionClusterLabel* New() const final {
    return CreateMaybeMessage<ExecutionClusterLabel>(nullptr);
  }

  ExecutionClusterLabel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecutionClusterLabel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecutionClusterLabel& from);
  void MergeFrom(const ExecutionClusterLabel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionClusterLabel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ExecutionClusterLabel)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// -------------------------------------------------------------------

class PluginOverride final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.PluginOverride) */ {
 public:
  PluginOverride();
  virtual ~PluginOverride();

  PluginOverride(const PluginOverride& from);

  inline PluginOverride& operator=(const PluginOverride& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PluginOverride(PluginOverride&& from) noexcept
    : PluginOverride() {
    *this = ::std::move(from);
  }

  inline PluginOverride& operator=(PluginOverride&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PluginOverride& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PluginOverride* internal_default_instance() {
    return reinterpret_cast<const PluginOverride*>(
               &_PluginOverride_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(PluginOverride* other);
  friend void swap(PluginOverride& a, PluginOverride& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PluginOverride* New() const final {
    return CreateMaybeMessage<PluginOverride>(nullptr);
  }

  PluginOverride* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PluginOverride>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PluginOverride& from);
  void MergeFrom(const PluginOverride& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PluginOverride* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PluginOverride_MissingPluginBehavior MissingPluginBehavior;
  static const MissingPluginBehavior FAIL =
    PluginOverride_MissingPluginBehavior_FAIL;
  static const MissingPluginBehavior USE_DEFAULT =
    PluginOverride_MissingPluginBehavior_USE_DEFAULT;
  static inline bool MissingPluginBehavior_IsValid(int value) {
    return PluginOverride_MissingPluginBehavior_IsValid(value);
  }
  static const MissingPluginBehavior MissingPluginBehavior_MIN =
    PluginOverride_MissingPluginBehavior_MissingPluginBehavior_MIN;
  static const MissingPluginBehavior MissingPluginBehavior_MAX =
    PluginOverride_MissingPluginBehavior_MissingPluginBehavior_MAX;
  static const int MissingPluginBehavior_ARRAYSIZE =
    PluginOverride_MissingPluginBehavior_MissingPluginBehavior_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MissingPluginBehavior_descriptor() {
    return PluginOverride_MissingPluginBehavior_descriptor();
  }
  static inline const ::std::string& MissingPluginBehavior_Name(MissingPluginBehavior value) {
    return PluginOverride_MissingPluginBehavior_Name(value);
  }
  static inline bool MissingPluginBehavior_Parse(const ::std::string& name,
      MissingPluginBehavior* value) {
    return PluginOverride_MissingPluginBehavior_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string plugin_id = 2;
  int plugin_id_size() const;
  void clear_plugin_id();
  static const int kPluginIdFieldNumber = 2;
  const ::std::string& plugin_id(int index) const;
  ::std::string* mutable_plugin_id(int index);
  void set_plugin_id(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_plugin_id(int index, ::std::string&& value);
  #endif
  void set_plugin_id(int index, const char* value);
  void set_plugin_id(int index, const char* value, size_t size);
  ::std::string* add_plugin_id();
  void add_plugin_id(const ::std::string& value);
  #if LANG_CXX11
  void add_plugin_id(::std::string&& value);
  #endif
  void add_plugin_id(const char* value);
  void add_plugin_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& plugin_id() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_plugin_id();

  // string task_type = 1;
  void clear_task_type();
  static const int kTaskTypeFieldNumber = 1;
  const ::std::string& task_type() const;
  void set_task_type(const ::std::string& value);
  #if LANG_CXX11
  void set_task_type(::std::string&& value);
  #endif
  void set_task_type(const char* value);
  void set_task_type(const char* value, size_t size);
  ::std::string* mutable_task_type();
  ::std::string* release_task_type();
  void set_allocated_task_type(::std::string* task_type);

  // .flyteidl.admin.PluginOverride.MissingPluginBehavior missing_plugin_behavior = 4;
  void clear_missing_plugin_behavior();
  static const int kMissingPluginBehaviorFieldNumber = 4;
  ::flyteidl::admin::PluginOverride_MissingPluginBehavior missing_plugin_behavior() const;
  void set_missing_plugin_behavior(::flyteidl::admin::PluginOverride_MissingPluginBehavior value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.PluginOverride)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> plugin_id_;
  ::google::protobuf::internal::ArenaStringPtr task_type_;
  int missing_plugin_behavior_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// -------------------------------------------------------------------

class PluginOverrides final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.PluginOverrides) */ {
 public:
  PluginOverrides();
  virtual ~PluginOverrides();

  PluginOverrides(const PluginOverrides& from);

  inline PluginOverrides& operator=(const PluginOverrides& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PluginOverrides(PluginOverrides&& from) noexcept
    : PluginOverrides() {
    *this = ::std::move(from);
  }

  inline PluginOverrides& operator=(PluginOverrides&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PluginOverrides& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PluginOverrides* internal_default_instance() {
    return reinterpret_cast<const PluginOverrides*>(
               &_PluginOverrides_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(PluginOverrides* other);
  friend void swap(PluginOverrides& a, PluginOverrides& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PluginOverrides* New() const final {
    return CreateMaybeMessage<PluginOverrides>(nullptr);
  }

  PluginOverrides* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PluginOverrides>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PluginOverrides& from);
  void MergeFrom(const PluginOverrides& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PluginOverrides* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.admin.PluginOverride overrides = 1;
  int overrides_size() const;
  void clear_overrides();
  static const int kOverridesFieldNumber = 1;
  ::flyteidl::admin::PluginOverride* mutable_overrides(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::PluginOverride >*
      mutable_overrides();
  const ::flyteidl::admin::PluginOverride& overrides(int index) const;
  ::flyteidl::admin::PluginOverride* add_overrides();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::PluginOverride >&
      overrides() const;

  // @@protoc_insertion_point(class_scope:flyteidl.admin.PluginOverrides)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::PluginOverride > overrides_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// -------------------------------------------------------------------

class WorkflowExecutionConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.WorkflowExecutionConfig) */ {
 public:
  WorkflowExecutionConfig();
  virtual ~WorkflowExecutionConfig();

  WorkflowExecutionConfig(const WorkflowExecutionConfig& from);

  inline WorkflowExecutionConfig& operator=(const WorkflowExecutionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowExecutionConfig(WorkflowExecutionConfig&& from) noexcept
    : WorkflowExecutionConfig() {
    *this = ::std::move(from);
  }

  inline WorkflowExecutionConfig& operator=(WorkflowExecutionConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WorkflowExecutionConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowExecutionConfig* internal_default_instance() {
    return reinterpret_cast<const WorkflowExecutionConfig*>(
               &_WorkflowExecutionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(WorkflowExecutionConfig* other);
  friend void swap(WorkflowExecutionConfig& a, WorkflowExecutionConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowExecutionConfig* New() const final {
    return CreateMaybeMessage<WorkflowExecutionConfig>(nullptr);
  }

  WorkflowExecutionConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowExecutionConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WorkflowExecutionConfig& from);
  void MergeFrom(const WorkflowExecutionConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowExecutionConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.SecurityContext security_context = 2;
  bool has_security_context() const;
  void clear_security_context();
  static const int kSecurityContextFieldNumber = 2;
  const ::flyteidl::core::SecurityContext& security_context() const;
  ::flyteidl::core::SecurityContext* release_security_context();
  ::flyteidl::core::SecurityContext* mutable_security_context();
  void set_allocated_security_context(::flyteidl::core::SecurityContext* security_context);

  // .flyteidl.admin.RawOutputDataConfig raw_output_data_config = 3;
  bool has_raw_output_data_config() const;
  void clear_raw_output_data_config();
  static const int kRawOutputDataConfigFieldNumber = 3;
  const ::flyteidl::admin::RawOutputDataConfig& raw_output_data_config() const;
  ::flyteidl::admin::RawOutputDataConfig* release_raw_output_data_config();
  ::flyteidl::admin::RawOutputDataConfig* mutable_raw_output_data_config();
  void set_allocated_raw_output_data_config(::flyteidl::admin::RawOutputDataConfig* raw_output_data_config);

  // .flyteidl.admin.Labels labels = 4;
  bool has_labels() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 4;
  const ::flyteidl::admin::Labels& labels() const;
  ::flyteidl::admin::Labels* release_labels();
  ::flyteidl::admin::Labels* mutable_labels();
  void set_allocated_labels(::flyteidl::admin::Labels* labels);

  // .flyteidl.admin.Annotations annotations = 5;
  bool has_annotations() const;
  void clear_annotations();
  static const int kAnnotationsFieldNumber = 5;
  const ::flyteidl::admin::Annotations& annotations() const;
  ::flyteidl::admin::Annotations* release_annotations();
  ::flyteidl::admin::Annotations* mutable_annotations();
  void set_allocated_annotations(::flyteidl::admin::Annotations* annotations);

  // .google.protobuf.BoolValue interruptible = 6;
  bool has_interruptible() const;
  void clear_interruptible();
  static const int kInterruptibleFieldNumber = 6;
  const ::google::protobuf::BoolValue& interruptible() const;
  ::google::protobuf::BoolValue* release_interruptible();
  ::google::protobuf::BoolValue* mutable_interruptible();
  void set_allocated_interruptible(::google::protobuf::BoolValue* interruptible);

  // int32 max_parallelism = 1;
  void clear_max_parallelism();
  static const int kMaxParallelismFieldNumber = 1;
  ::google::protobuf::int32 max_parallelism() const;
  void set_max_parallelism(::google::protobuf::int32 value);

  // bool overwrite_cache = 7;
  void clear_overwrite_cache();
  static const int kOverwriteCacheFieldNumber = 7;
  bool overwrite_cache() const;
  void set_overwrite_cache(bool value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.WorkflowExecutionConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::SecurityContext* security_context_;
  ::flyteidl::admin::RawOutputDataConfig* raw_output_data_config_;
  ::flyteidl::admin::Labels* labels_;
  ::flyteidl::admin::Annotations* annotations_;
  ::google::protobuf::BoolValue* interruptible_;
  ::google::protobuf::int32 max_parallelism_;
  bool overwrite_cache_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// -------------------------------------------------------------------

class MatchingAttributes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.MatchingAttributes) */ {
 public:
  MatchingAttributes();
  virtual ~MatchingAttributes();

  MatchingAttributes(const MatchingAttributes& from);

  inline MatchingAttributes& operator=(const MatchingAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatchingAttributes(MatchingAttributes&& from) noexcept
    : MatchingAttributes() {
    *this = ::std::move(from);
  }

  inline MatchingAttributes& operator=(MatchingAttributes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MatchingAttributes& default_instance();

  enum TargetCase {
    kTaskResourceAttributes = 1,
    kClusterResourceAttributes = 2,
    kExecutionQueueAttributes = 3,
    kExecutionClusterLabel = 4,
    kQualityOfService = 5,
    kPluginOverrides = 6,
    kWorkflowExecutionConfig = 7,
    kClusterAssignment = 8,
    TARGET_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchingAttributes* internal_default_instance() {
    return reinterpret_cast<const MatchingAttributes*>(
               &_MatchingAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(MatchingAttributes* other);
  friend void swap(MatchingAttributes& a, MatchingAttributes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatchingAttributes* New() const final {
    return CreateMaybeMessage<MatchingAttributes>(nullptr);
  }

  MatchingAttributes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MatchingAttributes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MatchingAttributes& from);
  void MergeFrom(const MatchingAttributes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchingAttributes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.admin.TaskResourceAttributes task_resource_attributes = 1;
  bool has_task_resource_attributes() const;
  void clear_task_resource_attributes();
  static const int kTaskResourceAttributesFieldNumber = 1;
  const ::flyteidl::admin::TaskResourceAttributes& task_resource_attributes() const;
  ::flyteidl::admin::TaskResourceAttributes* release_task_resource_attributes();
  ::flyteidl::admin::TaskResourceAttributes* mutable_task_resource_attributes();
  void set_allocated_task_resource_attributes(::flyteidl::admin::TaskResourceAttributes* task_resource_attributes);

  // .flyteidl.admin.ClusterResourceAttributes cluster_resource_attributes = 2;
  bool has_cluster_resource_attributes() const;
  void clear_cluster_resource_attributes();
  static const int kClusterResourceAttributesFieldNumber = 2;
  const ::flyteidl::admin::ClusterResourceAttributes& cluster_resource_attributes() const;
  ::flyteidl::admin::ClusterResourceAttributes* release_cluster_resource_attributes();
  ::flyteidl::admin::ClusterResourceAttributes* mutable_cluster_resource_attributes();
  void set_allocated_cluster_resource_attributes(::flyteidl::admin::ClusterResourceAttributes* cluster_resource_attributes);

  // .flyteidl.admin.ExecutionQueueAttributes execution_queue_attributes = 3;
  bool has_execution_queue_attributes() const;
  void clear_execution_queue_attributes();
  static const int kExecutionQueueAttributesFieldNumber = 3;
  const ::flyteidl::admin::ExecutionQueueAttributes& execution_queue_attributes() const;
  ::flyteidl::admin::ExecutionQueueAttributes* release_execution_queue_attributes();
  ::flyteidl::admin::ExecutionQueueAttributes* mutable_execution_queue_attributes();
  void set_allocated_execution_queue_attributes(::flyteidl::admin::ExecutionQueueAttributes* execution_queue_attributes);

  // .flyteidl.admin.ExecutionClusterLabel execution_cluster_label = 4;
  bool has_execution_cluster_label() const;
  void clear_execution_cluster_label();
  static const int kExecutionClusterLabelFieldNumber = 4;
  const ::flyteidl::admin::ExecutionClusterLabel& execution_cluster_label() const;
  ::flyteidl::admin::ExecutionClusterLabel* release_execution_cluster_label();
  ::flyteidl::admin::ExecutionClusterLabel* mutable_execution_cluster_label();
  void set_allocated_execution_cluster_label(::flyteidl::admin::ExecutionClusterLabel* execution_cluster_label);

  // .flyteidl.core.QualityOfService quality_of_service = 5;
  bool has_quality_of_service() const;
  void clear_quality_of_service();
  static const int kQualityOfServiceFieldNumber = 5;
  const ::flyteidl::core::QualityOfService& quality_of_service() const;
  ::flyteidl::core::QualityOfService* release_quality_of_service();
  ::flyteidl::core::QualityOfService* mutable_quality_of_service();
  void set_allocated_quality_of_service(::flyteidl::core::QualityOfService* quality_of_service);

  // .flyteidl.admin.PluginOverrides plugin_overrides = 6;
  bool has_plugin_overrides() const;
  void clear_plugin_overrides();
  static const int kPluginOverridesFieldNumber = 6;
  const ::flyteidl::admin::PluginOverrides& plugin_overrides() const;
  ::flyteidl::admin::PluginOverrides* release_plugin_overrides();
  ::flyteidl::admin::PluginOverrides* mutable_plugin_overrides();
  void set_allocated_plugin_overrides(::flyteidl::admin::PluginOverrides* plugin_overrides);

  // .flyteidl.admin.WorkflowExecutionConfig workflow_execution_config = 7;
  bool has_workflow_execution_config() const;
  void clear_workflow_execution_config();
  static const int kWorkflowExecutionConfigFieldNumber = 7;
  const ::flyteidl::admin::WorkflowExecutionConfig& workflow_execution_config() const;
  ::flyteidl::admin::WorkflowExecutionConfig* release_workflow_execution_config();
  ::flyteidl::admin::WorkflowExecutionConfig* mutable_workflow_execution_config();
  void set_allocated_workflow_execution_config(::flyteidl::admin::WorkflowExecutionConfig* workflow_execution_config);

  // .flyteidl.admin.ClusterAssignment cluster_assignment = 8;
  bool has_cluster_assignment() const;
  void clear_cluster_assignment();
  static const int kClusterAssignmentFieldNumber = 8;
  const ::flyteidl::admin::ClusterAssignment& cluster_assignment() const;
  ::flyteidl::admin::ClusterAssignment* release_cluster_assignment();
  ::flyteidl::admin::ClusterAssignment* mutable_cluster_assignment();
  void set_allocated_cluster_assignment(::flyteidl::admin::ClusterAssignment* cluster_assignment);

  void clear_target();
  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.admin.MatchingAttributes)
 private:
  class HasBitSetters;
  void set_has_task_resource_attributes();
  void set_has_cluster_resource_attributes();
  void set_has_execution_queue_attributes();
  void set_has_execution_cluster_label();
  void set_has_quality_of_service();
  void set_has_plugin_overrides();
  void set_has_workflow_execution_config();
  void set_has_cluster_assignment();

  inline bool has_target() const;
  inline void clear_has_target();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TargetUnion {
    TargetUnion() {}
    ::flyteidl::admin::TaskResourceAttributes* task_resource_attributes_;
    ::flyteidl::admin::ClusterResourceAttributes* cluster_resource_attributes_;
    ::flyteidl::admin::ExecutionQueueAttributes* execution_queue_attributes_;
    ::flyteidl::admin::ExecutionClusterLabel* execution_cluster_label_;
    ::flyteidl::core::QualityOfService* quality_of_service_;
    ::flyteidl::admin::PluginOverrides* plugin_overrides_;
    ::flyteidl::admin::WorkflowExecutionConfig* workflow_execution_config_;
    ::flyteidl::admin::ClusterAssignment* cluster_assignment_;
  } target_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// -------------------------------------------------------------------

class MatchableAttributesConfiguration final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.MatchableAttributesConfiguration) */ {
 public:
  MatchableAttributesConfiguration();
  virtual ~MatchableAttributesConfiguration();

  MatchableAttributesConfiguration(const MatchableAttributesConfiguration& from);

  inline MatchableAttributesConfiguration& operator=(const MatchableAttributesConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatchableAttributesConfiguration(MatchableAttributesConfiguration&& from) noexcept
    : MatchableAttributesConfiguration() {
    *this = ::std::move(from);
  }

  inline MatchableAttributesConfiguration& operator=(MatchableAttributesConfiguration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MatchableAttributesConfiguration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchableAttributesConfiguration* internal_default_instance() {
    return reinterpret_cast<const MatchableAttributesConfiguration*>(
               &_MatchableAttributesConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(MatchableAttributesConfiguration* other);
  friend void swap(MatchableAttributesConfiguration& a, MatchableAttributesConfiguration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatchableAttributesConfiguration* New() const final {
    return CreateMaybeMessage<MatchableAttributesConfiguration>(nullptr);
  }

  MatchableAttributesConfiguration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MatchableAttributesConfiguration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MatchableAttributesConfiguration& from);
  void MergeFrom(const MatchableAttributesConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchableAttributesConfiguration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string domain = 2;
  void clear_domain();
  static const int kDomainFieldNumber = 2;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string project = 3;
  void clear_project();
  static const int kProjectFieldNumber = 3;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  #if LANG_CXX11
  void set_project(::std::string&& value);
  #endif
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);

  // string workflow = 4;
  void clear_workflow();
  static const int kWorkflowFieldNumber = 4;
  const ::std::string& workflow() const;
  void set_workflow(const ::std::string& value);
  #if LANG_CXX11
  void set_workflow(::std::string&& value);
  #endif
  void set_workflow(const char* value);
  void set_workflow(const char* value, size_t size);
  ::std::string* mutable_workflow();
  ::std::string* release_workflow();
  void set_allocated_workflow(::std::string* workflow);

  // string launch_plan = 5;
  void clear_launch_plan();
  static const int kLaunchPlanFieldNumber = 5;
  const ::std::string& launch_plan() const;
  void set_launch_plan(const ::std::string& value);
  #if LANG_CXX11
  void set_launch_plan(::std::string&& value);
  #endif
  void set_launch_plan(const char* value);
  void set_launch_plan(const char* value, size_t size);
  ::std::string* mutable_launch_plan();
  ::std::string* release_launch_plan();
  void set_allocated_launch_plan(::std::string* launch_plan);

  // .flyteidl.admin.MatchingAttributes attributes = 1;
  bool has_attributes() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 1;
  const ::flyteidl::admin::MatchingAttributes& attributes() const;
  ::flyteidl::admin::MatchingAttributes* release_attributes();
  ::flyteidl::admin::MatchingAttributes* mutable_attributes();
  void set_allocated_attributes(::flyteidl::admin::MatchingAttributes* attributes);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.MatchableAttributesConfiguration)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::google::protobuf::internal::ArenaStringPtr workflow_;
  ::google::protobuf::internal::ArenaStringPtr launch_plan_;
  ::flyteidl::admin::MatchingAttributes* attributes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// -------------------------------------------------------------------

class ListMatchableAttributesRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ListMatchableAttributesRequest) */ {
 public:
  ListMatchableAttributesRequest();
  virtual ~ListMatchableAttributesRequest();

  ListMatchableAttributesRequest(const ListMatchableAttributesRequest& from);

  inline ListMatchableAttributesRequest& operator=(const ListMatchableAttributesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListMatchableAttributesRequest(ListMatchableAttributesRequest&& from) noexcept
    : ListMatchableAttributesRequest() {
    *this = ::std::move(from);
  }

  inline ListMatchableAttributesRequest& operator=(ListMatchableAttributesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListMatchableAttributesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListMatchableAttributesRequest* internal_default_instance() {
    return reinterpret_cast<const ListMatchableAttributesRequest*>(
               &_ListMatchableAttributesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ListMatchableAttributesRequest* other);
  friend void swap(ListMatchableAttributesRequest& a, ListMatchableAttributesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListMatchableAttributesRequest* New() const final {
    return CreateMaybeMessage<ListMatchableAttributesRequest>(nullptr);
  }

  ListMatchableAttributesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListMatchableAttributesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListMatchableAttributesRequest& from);
  void MergeFrom(const ListMatchableAttributesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMatchableAttributesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.admin.MatchableResource resource_type = 1;
  void clear_resource_type();
  static const int kResourceTypeFieldNumber = 1;
  ::flyteidl::admin::MatchableResource resource_type() const;
  void set_resource_type(::flyteidl::admin::MatchableResource value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ListMatchableAttributesRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int resource_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// -------------------------------------------------------------------

class ListMatchableAttributesResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ListMatchableAttributesResponse) */ {
 public:
  ListMatchableAttributesResponse();
  virtual ~ListMatchableAttributesResponse();

  ListMatchableAttributesResponse(const ListMatchableAttributesResponse& from);

  inline ListMatchableAttributesResponse& operator=(const ListMatchableAttributesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListMatchableAttributesResponse(ListMatchableAttributesResponse&& from) noexcept
    : ListMatchableAttributesResponse() {
    *this = ::std::move(from);
  }

  inline ListMatchableAttributesResponse& operator=(ListMatchableAttributesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListMatchableAttributesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListMatchableAttributesResponse* internal_default_instance() {
    return reinterpret_cast<const ListMatchableAttributesResponse*>(
               &_ListMatchableAttributesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(ListMatchableAttributesResponse* other);
  friend void swap(ListMatchableAttributesResponse& a, ListMatchableAttributesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListMatchableAttributesResponse* New() const final {
    return CreateMaybeMessage<ListMatchableAttributesResponse>(nullptr);
  }

  ListMatchableAttributesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListMatchableAttributesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListMatchableAttributesResponse& from);
  void MergeFrom(const ListMatchableAttributesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMatchableAttributesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.admin.MatchableAttributesConfiguration configurations = 1;
  int configurations_size() const;
  void clear_configurations();
  static const int kConfigurationsFieldNumber = 1;
  ::flyteidl::admin::MatchableAttributesConfiguration* mutable_configurations(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::MatchableAttributesConfiguration >*
      mutable_configurations();
  const ::flyteidl::admin::MatchableAttributesConfiguration& configurations(int index) const;
  ::flyteidl::admin::MatchableAttributesConfiguration* add_configurations();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::MatchableAttributesConfiguration >&
      configurations() const;

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ListMatchableAttributesResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::MatchableAttributesConfiguration > configurations_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskResourceSpec

// string cpu = 1;
inline void TaskResourceSpec::clear_cpu() {
  cpu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskResourceSpec::cpu() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskResourceSpec.cpu)
  return cpu_.GetNoArena();
}
inline void TaskResourceSpec::set_cpu(const ::std::string& value) {
  
  cpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskResourceSpec.cpu)
}
#if LANG_CXX11
inline void TaskResourceSpec::set_cpu(::std::string&& value) {
  
  cpu_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.TaskResourceSpec.cpu)
}
#endif
inline void TaskResourceSpec::set_cpu(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.TaskResourceSpec.cpu)
}
inline void TaskResourceSpec::set_cpu(const char* value, size_t size) {
  
  cpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.TaskResourceSpec.cpu)
}
inline ::std::string* TaskResourceSpec::mutable_cpu() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskResourceSpec.cpu)
  return cpu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskResourceSpec::release_cpu() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskResourceSpec.cpu)
  
  return cpu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskResourceSpec::set_allocated_cpu(::std::string* cpu) {
  if (cpu != nullptr) {
    
  } else {
    
  }
  cpu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpu);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskResourceSpec.cpu)
}

// string gpu = 2;
inline void TaskResourceSpec::clear_gpu() {
  gpu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskResourceSpec::gpu() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskResourceSpec.gpu)
  return gpu_.GetNoArena();
}
inline void TaskResourceSpec::set_gpu(const ::std::string& value) {
  
  gpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskResourceSpec.gpu)
}
#if LANG_CXX11
inline void TaskResourceSpec::set_gpu(::std::string&& value) {
  
  gpu_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.TaskResourceSpec.gpu)
}
#endif
inline void TaskResourceSpec::set_gpu(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.TaskResourceSpec.gpu)
}
inline void TaskResourceSpec::set_gpu(const char* value, size_t size) {
  
  gpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.TaskResourceSpec.gpu)
}
inline ::std::string* TaskResourceSpec::mutable_gpu() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskResourceSpec.gpu)
  return gpu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskResourceSpec::release_gpu() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskResourceSpec.gpu)
  
  return gpu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskResourceSpec::set_allocated_gpu(::std::string* gpu) {
  if (gpu != nullptr) {
    
  } else {
    
  }
  gpu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gpu);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskResourceSpec.gpu)
}

// string memory = 3;
inline void TaskResourceSpec::clear_memory() {
  memory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskResourceSpec::memory() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskResourceSpec.memory)
  return memory_.GetNoArena();
}
inline void TaskResourceSpec::set_memory(const ::std::string& value) {
  
  memory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskResourceSpec.memory)
}
#if LANG_CXX11
inline void TaskResourceSpec::set_memory(::std::string&& value) {
  
  memory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.TaskResourceSpec.memory)
}
#endif
inline void TaskResourceSpec::set_memory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  memory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.TaskResourceSpec.memory)
}
inline void TaskResourceSpec::set_memory(const char* value, size_t size) {
  
  memory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.TaskResourceSpec.memory)
}
inline ::std::string* TaskResourceSpec::mutable_memory() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskResourceSpec.memory)
  return memory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskResourceSpec::release_memory() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskResourceSpec.memory)
  
  return memory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskResourceSpec::set_allocated_memory(::std::string* memory) {
  if (memory != nullptr) {
    
  } else {
    
  }
  memory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), memory);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskResourceSpec.memory)
}

// string storage = 4;
inline void TaskResourceSpec::clear_storage() {
  storage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskResourceSpec::storage() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskResourceSpec.storage)
  return storage_.GetNoArena();
}
inline void TaskResourceSpec::set_storage(const ::std::string& value) {
  
  storage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskResourceSpec.storage)
}
#if LANG_CXX11
inline void TaskResourceSpec::set_storage(::std::string&& value) {
  
  storage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.TaskResourceSpec.storage)
}
#endif
inline void TaskResourceSpec::set_storage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  storage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.TaskResourceSpec.storage)
}
inline void TaskResourceSpec::set_storage(const char* value, size_t size) {
  
  storage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.TaskResourceSpec.storage)
}
inline ::std::string* TaskResourceSpec::mutable_storage() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskResourceSpec.storage)
  return storage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskResourceSpec::release_storage() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskResourceSpec.storage)
  
  return storage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskResourceSpec::set_allocated_storage(::std::string* storage) {
  if (storage != nullptr) {
    
  } else {
    
  }
  storage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storage);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskResourceSpec.storage)
}

// string ephemeral_storage = 5;
inline void TaskResourceSpec::clear_ephemeral_storage() {
  ephemeral_storage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskResourceSpec::ephemeral_storage() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskResourceSpec.ephemeral_storage)
  return ephemeral_storage_.GetNoArena();
}
inline void TaskResourceSpec::set_ephemeral_storage(const ::std::string& value) {
  
  ephemeral_storage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskResourceSpec.ephemeral_storage)
}
#if LANG_CXX11
inline void TaskResourceSpec::set_ephemeral_storage(::std::string&& value) {
  
  ephemeral_storage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.TaskResourceSpec.ephemeral_storage)
}
#endif
inline void TaskResourceSpec::set_ephemeral_storage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ephemeral_storage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.TaskResourceSpec.ephemeral_storage)
}
inline void TaskResourceSpec::set_ephemeral_storage(const char* value, size_t size) {
  
  ephemeral_storage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.TaskResourceSpec.ephemeral_storage)
}
inline ::std::string* TaskResourceSpec::mutable_ephemeral_storage() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskResourceSpec.ephemeral_storage)
  return ephemeral_storage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskResourceSpec::release_ephemeral_storage() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskResourceSpec.ephemeral_storage)
  
  return ephemeral_storage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskResourceSpec::set_allocated_ephemeral_storage(::std::string* ephemeral_storage) {
  if (ephemeral_storage != nullptr) {
    
  } else {
    
  }
  ephemeral_storage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ephemeral_storage);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskResourceSpec.ephemeral_storage)
}

// -------------------------------------------------------------------

// TaskResourceAttributes

// .flyteidl.admin.TaskResourceSpec defaults = 1;
inline bool TaskResourceAttributes::has_defaults() const {
  return this != internal_default_instance() && defaults_ != nullptr;
}
inline void TaskResourceAttributes::clear_defaults() {
  if (GetArenaNoVirtual() == nullptr && defaults_ != nullptr) {
    delete defaults_;
  }
  defaults_ = nullptr;
}
inline const ::flyteidl::admin::TaskResourceSpec& TaskResourceAttributes::defaults() const {
  const ::flyteidl::admin::TaskResourceSpec* p = defaults_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskResourceAttributes.defaults)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::TaskResourceSpec*>(
      &::flyteidl::admin::_TaskResourceSpec_default_instance_);
}
inline ::flyteidl::admin::TaskResourceSpec* TaskResourceAttributes::release_defaults() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskResourceAttributes.defaults)
  
  ::flyteidl::admin::TaskResourceSpec* temp = defaults_;
  defaults_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::TaskResourceSpec* TaskResourceAttributes::mutable_defaults() {
  
  if (defaults_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::TaskResourceSpec>(GetArenaNoVirtual());
    defaults_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskResourceAttributes.defaults)
  return defaults_;
}
inline void TaskResourceAttributes::set_allocated_defaults(::flyteidl::admin::TaskResourceSpec* defaults) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete defaults_;
  }
  if (defaults) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      defaults = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, defaults, submessage_arena);
    }
    
  } else {
    
  }
  defaults_ = defaults;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskResourceAttributes.defaults)
}

// .flyteidl.admin.TaskResourceSpec limits = 2;
inline bool TaskResourceAttributes::has_limits() const {
  return this != internal_default_instance() && limits_ != nullptr;
}
inline void TaskResourceAttributes::clear_limits() {
  if (GetArenaNoVirtual() == nullptr && limits_ != nullptr) {
    delete limits_;
  }
  limits_ = nullptr;
}
inline const ::flyteidl::admin::TaskResourceSpec& TaskResourceAttributes::limits() const {
  const ::flyteidl::admin::TaskResourceSpec* p = limits_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskResourceAttributes.limits)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::TaskResourceSpec*>(
      &::flyteidl::admin::_TaskResourceSpec_default_instance_);
}
inline ::flyteidl::admin::TaskResourceSpec* TaskResourceAttributes::release_limits() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskResourceAttributes.limits)
  
  ::flyteidl::admin::TaskResourceSpec* temp = limits_;
  limits_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::TaskResourceSpec* TaskResourceAttributes::mutable_limits() {
  
  if (limits_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::TaskResourceSpec>(GetArenaNoVirtual());
    limits_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskResourceAttributes.limits)
  return limits_;
}
inline void TaskResourceAttributes::set_allocated_limits(::flyteidl::admin::TaskResourceSpec* limits) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete limits_;
  }
  if (limits) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      limits = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, limits, submessage_arena);
    }
    
  } else {
    
  }
  limits_ = limits;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskResourceAttributes.limits)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ClusterResourceAttributes

// map<string, string> attributes = 1;
inline int ClusterResourceAttributes::attributes_size() const {
  return attributes_.size();
}
inline void ClusterResourceAttributes::clear_attributes() {
  attributes_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
ClusterResourceAttributes::attributes() const {
  // @@protoc_insertion_point(field_map:flyteidl.admin.ClusterResourceAttributes.attributes)
  return attributes_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
ClusterResourceAttributes::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_map:flyteidl.admin.ClusterResourceAttributes.attributes)
  return attributes_.MutableMap();
}

// -------------------------------------------------------------------

// ExecutionQueueAttributes

// repeated string tags = 1;
inline int ExecutionQueueAttributes::tags_size() const {
  return tags_.size();
}
inline void ExecutionQueueAttributes::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& ExecutionQueueAttributes::tags(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionQueueAttributes.tags)
  return tags_.Get(index);
}
inline ::std::string* ExecutionQueueAttributes::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionQueueAttributes.tags)
  return tags_.Mutable(index);
}
inline void ExecutionQueueAttributes::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.ExecutionQueueAttributes.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ExecutionQueueAttributes::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.ExecutionQueueAttributes.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ExecutionQueueAttributes::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.ExecutionQueueAttributes.tags)
}
inline void ExecutionQueueAttributes::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.ExecutionQueueAttributes.tags)
}
inline ::std::string* ExecutionQueueAttributes::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:flyteidl.admin.ExecutionQueueAttributes.tags)
  return tags_.Add();
}
inline void ExecutionQueueAttributes::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.admin.ExecutionQueueAttributes.tags)
}
#if LANG_CXX11
inline void ExecutionQueueAttributes::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.admin.ExecutionQueueAttributes.tags)
}
#endif
inline void ExecutionQueueAttributes::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.admin.ExecutionQueueAttributes.tags)
}
inline void ExecutionQueueAttributes::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.admin.ExecutionQueueAttributes.tags)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ExecutionQueueAttributes::tags() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.ExecutionQueueAttributes.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
ExecutionQueueAttributes::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.ExecutionQueueAttributes.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// ExecutionClusterLabel

// string value = 1;
inline void ExecutionClusterLabel::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecutionClusterLabel::value() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionClusterLabel.value)
  return value_.GetNoArena();
}
inline void ExecutionClusterLabel::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.ExecutionClusterLabel.value)
}
#if LANG_CXX11
inline void ExecutionClusterLabel::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.ExecutionClusterLabel.value)
}
#endif
inline void ExecutionClusterLabel::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.ExecutionClusterLabel.value)
}
inline void ExecutionClusterLabel::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.ExecutionClusterLabel.value)
}
inline ::std::string* ExecutionClusterLabel::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionClusterLabel.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionClusterLabel::release_value() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionClusterLabel.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionClusterLabel::set_allocated_value(::std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionClusterLabel.value)
}

// -------------------------------------------------------------------

// PluginOverride

// string task_type = 1;
inline void PluginOverride::clear_task_type() {
  task_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PluginOverride::task_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.PluginOverride.task_type)
  return task_type_.GetNoArena();
}
inline void PluginOverride::set_task_type(const ::std::string& value) {
  
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.PluginOverride.task_type)
}
#if LANG_CXX11
inline void PluginOverride::set_task_type(::std::string&& value) {
  
  task_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.PluginOverride.task_type)
}
#endif
inline void PluginOverride::set_task_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.PluginOverride.task_type)
}
inline void PluginOverride::set_task_type(const char* value, size_t size) {
  
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.PluginOverride.task_type)
}
inline ::std::string* PluginOverride::mutable_task_type() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.PluginOverride.task_type)
  return task_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PluginOverride::release_task_type() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.PluginOverride.task_type)
  
  return task_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PluginOverride::set_allocated_task_type(::std::string* task_type) {
  if (task_type != nullptr) {
    
  } else {
    
  }
  task_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_type);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.PluginOverride.task_type)
}

// repeated string plugin_id = 2;
inline int PluginOverride::plugin_id_size() const {
  return plugin_id_.size();
}
inline void PluginOverride::clear_plugin_id() {
  plugin_id_.Clear();
}
inline const ::std::string& PluginOverride::plugin_id(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.PluginOverride.plugin_id)
  return plugin_id_.Get(index);
}
inline ::std::string* PluginOverride::mutable_plugin_id(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.PluginOverride.plugin_id)
  return plugin_id_.Mutable(index);
}
inline void PluginOverride::set_plugin_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.PluginOverride.plugin_id)
  plugin_id_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PluginOverride::set_plugin_id(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.PluginOverride.plugin_id)
  plugin_id_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PluginOverride::set_plugin_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  plugin_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.PluginOverride.plugin_id)
}
inline void PluginOverride::set_plugin_id(int index, const char* value, size_t size) {
  plugin_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.PluginOverride.plugin_id)
}
inline ::std::string* PluginOverride::add_plugin_id() {
  // @@protoc_insertion_point(field_add_mutable:flyteidl.admin.PluginOverride.plugin_id)
  return plugin_id_.Add();
}
inline void PluginOverride::add_plugin_id(const ::std::string& value) {
  plugin_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.admin.PluginOverride.plugin_id)
}
#if LANG_CXX11
inline void PluginOverride::add_plugin_id(::std::string&& value) {
  plugin_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.admin.PluginOverride.plugin_id)
}
#endif
inline void PluginOverride::add_plugin_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  plugin_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.admin.PluginOverride.plugin_id)
}
inline void PluginOverride::add_plugin_id(const char* value, size_t size) {
  plugin_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.admin.PluginOverride.plugin_id)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
PluginOverride::plugin_id() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.PluginOverride.plugin_id)
  return plugin_id_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
PluginOverride::mutable_plugin_id() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.PluginOverride.plugin_id)
  return &plugin_id_;
}

// .flyteidl.admin.PluginOverride.MissingPluginBehavior missing_plugin_behavior = 4;
inline void PluginOverride::clear_missing_plugin_behavior() {
  missing_plugin_behavior_ = 0;
}
inline ::flyteidl::admin::PluginOverride_MissingPluginBehavior PluginOverride::missing_plugin_behavior() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.PluginOverride.missing_plugin_behavior)
  return static_cast< ::flyteidl::admin::PluginOverride_MissingPluginBehavior >(missing_plugin_behavior_);
}
inline void PluginOverride::set_missing_plugin_behavior(::flyteidl::admin::PluginOverride_MissingPluginBehavior value) {
  
  missing_plugin_behavior_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.PluginOverride.missing_plugin_behavior)
}

// -------------------------------------------------------------------

// PluginOverrides

// repeated .flyteidl.admin.PluginOverride overrides = 1;
inline int PluginOverrides::overrides_size() const {
  return overrides_.size();
}
inline void PluginOverrides::clear_overrides() {
  overrides_.Clear();
}
inline ::flyteidl::admin::PluginOverride* PluginOverrides::mutable_overrides(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.PluginOverrides.overrides)
  return overrides_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::PluginOverride >*
PluginOverrides::mutable_overrides() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.PluginOverrides.overrides)
  return &overrides_;
}
inline const ::flyteidl::admin::PluginOverride& PluginOverrides::overrides(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.PluginOverrides.overrides)
  return overrides_.Get(index);
}
inline ::flyteidl::admin::PluginOverride* PluginOverrides::add_overrides() {
  // @@protoc_insertion_point(field_add:flyteidl.admin.PluginOverrides.overrides)
  return overrides_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::PluginOverride >&
PluginOverrides::overrides() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.PluginOverrides.overrides)
  return overrides_;
}

// -------------------------------------------------------------------

// WorkflowExecutionConfig

// int32 max_parallelism = 1;
inline void WorkflowExecutionConfig::clear_max_parallelism() {
  max_parallelism_ = 0;
}
inline ::google::protobuf::int32 WorkflowExecutionConfig::max_parallelism() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowExecutionConfig.max_parallelism)
  return max_parallelism_;
}
inline void WorkflowExecutionConfig::set_max_parallelism(::google::protobuf::int32 value) {
  
  max_parallelism_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.WorkflowExecutionConfig.max_parallelism)
}

// .flyteidl.core.SecurityContext security_context = 2;
inline bool WorkflowExecutionConfig::has_security_context() const {
  return this != internal_default_instance() && security_context_ != nullptr;
}
inline const ::flyteidl::core::SecurityContext& WorkflowExecutionConfig::security_context() const {
  const ::flyteidl::core::SecurityContext* p = security_context_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowExecutionConfig.security_context)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::SecurityContext*>(
      &::flyteidl::core::_SecurityContext_default_instance_);
}
inline ::flyteidl::core::SecurityContext* WorkflowExecutionConfig::release_security_context() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowExecutionConfig.security_context)
  
  ::flyteidl::core::SecurityContext* temp = security_context_;
  security_context_ = nullptr;
  return temp;
}
inline ::flyteidl::core::SecurityContext* WorkflowExecutionConfig::mutable_security_context() {
  
  if (security_context_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::SecurityContext>(GetArenaNoVirtual());
    security_context_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowExecutionConfig.security_context)
  return security_context_;
}
inline void WorkflowExecutionConfig::set_allocated_security_context(::flyteidl::core::SecurityContext* security_context) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(security_context_);
  }
  if (security_context) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      security_context = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, security_context, submessage_arena);
    }
    
  } else {
    
  }
  security_context_ = security_context;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowExecutionConfig.security_context)
}

// .flyteidl.admin.RawOutputDataConfig raw_output_data_config = 3;
inline bool WorkflowExecutionConfig::has_raw_output_data_config() const {
  return this != internal_default_instance() && raw_output_data_config_ != nullptr;
}
inline const ::flyteidl::admin::RawOutputDataConfig& WorkflowExecutionConfig::raw_output_data_config() const {
  const ::flyteidl::admin::RawOutputDataConfig* p = raw_output_data_config_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowExecutionConfig.raw_output_data_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::RawOutputDataConfig*>(
      &::flyteidl::admin::_RawOutputDataConfig_default_instance_);
}
inline ::flyteidl::admin::RawOutputDataConfig* WorkflowExecutionConfig::release_raw_output_data_config() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowExecutionConfig.raw_output_data_config)
  
  ::flyteidl::admin::RawOutputDataConfig* temp = raw_output_data_config_;
  raw_output_data_config_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::RawOutputDataConfig* WorkflowExecutionConfig::mutable_raw_output_data_config() {
  
  if (raw_output_data_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::RawOutputDataConfig>(GetArenaNoVirtual());
    raw_output_data_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowExecutionConfig.raw_output_data_config)
  return raw_output_data_config_;
}
inline void WorkflowExecutionConfig::set_allocated_raw_output_data_config(::flyteidl::admin::RawOutputDataConfig* raw_output_data_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(raw_output_data_config_);
  }
  if (raw_output_data_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      raw_output_data_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, raw_output_data_config, submessage_arena);
    }
    
  } else {
    
  }
  raw_output_data_config_ = raw_output_data_config;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowExecutionConfig.raw_output_data_config)
}

// .flyteidl.admin.Labels labels = 4;
inline bool WorkflowExecutionConfig::has_labels() const {
  return this != internal_default_instance() && labels_ != nullptr;
}
inline const ::flyteidl::admin::Labels& WorkflowExecutionConfig::labels() const {
  const ::flyteidl::admin::Labels* p = labels_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowExecutionConfig.labels)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::Labels*>(
      &::flyteidl::admin::_Labels_default_instance_);
}
inline ::flyteidl::admin::Labels* WorkflowExecutionConfig::release_labels() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowExecutionConfig.labels)
  
  ::flyteidl::admin::Labels* temp = labels_;
  labels_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Labels* WorkflowExecutionConfig::mutable_labels() {
  
  if (labels_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Labels>(GetArenaNoVirtual());
    labels_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowExecutionConfig.labels)
  return labels_;
}
inline void WorkflowExecutionConfig::set_allocated_labels(::flyteidl::admin::Labels* labels) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(labels_);
  }
  if (labels) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      labels = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, labels, submessage_arena);
    }
    
  } else {
    
  }
  labels_ = labels;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowExecutionConfig.labels)
}

// .flyteidl.admin.Annotations annotations = 5;
inline bool WorkflowExecutionConfig::has_annotations() const {
  return this != internal_default_instance() && annotations_ != nullptr;
}
inline const ::flyteidl::admin::Annotations& WorkflowExecutionConfig::annotations() const {
  const ::flyteidl::admin::Annotations* p = annotations_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowExecutionConfig.annotations)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::Annotations*>(
      &::flyteidl::admin::_Annotations_default_instance_);
}
inline ::flyteidl::admin::Annotations* WorkflowExecutionConfig::release_annotations() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowExecutionConfig.annotations)
  
  ::flyteidl::admin::Annotations* temp = annotations_;
  annotations_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Annotations* WorkflowExecutionConfig::mutable_annotations() {
  
  if (annotations_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Annotations>(GetArenaNoVirtual());
    annotations_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowExecutionConfig.annotations)
  return annotations_;
}
inline void WorkflowExecutionConfig::set_allocated_annotations(::flyteidl::admin::Annotations* annotations) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(annotations_);
  }
  if (annotations) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      annotations = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, annotations, submessage_arena);
    }
    
  } else {
    
  }
  annotations_ = annotations;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowExecutionConfig.annotations)
}

// .google.protobuf.BoolValue interruptible = 6;
inline bool WorkflowExecutionConfig::has_interruptible() const {
  return this != internal_default_instance() && interruptible_ != nullptr;
}
inline const ::google::protobuf::BoolValue& WorkflowExecutionConfig::interruptible() const {
  const ::google::protobuf::BoolValue* p = interruptible_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowExecutionConfig.interruptible)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* WorkflowExecutionConfig::release_interruptible() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowExecutionConfig.interruptible)
  
  ::google::protobuf::BoolValue* temp = interruptible_;
  interruptible_ = nullptr;
  return temp;
}
inline ::google::protobuf::BoolValue* WorkflowExecutionConfig::mutable_interruptible() {
  
  if (interruptible_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::BoolValue>(GetArenaNoVirtual());
    interruptible_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowExecutionConfig.interruptible)
  return interruptible_;
}
inline void WorkflowExecutionConfig::set_allocated_interruptible(::google::protobuf::BoolValue* interruptible) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(interruptible_);
  }
  if (interruptible) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(interruptible)->GetArena();
    if (message_arena != submessage_arena) {
      interruptible = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interruptible, submessage_arena);
    }
    
  } else {
    
  }
  interruptible_ = interruptible;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowExecutionConfig.interruptible)
}

// bool overwrite_cache = 7;
inline void WorkflowExecutionConfig::clear_overwrite_cache() {
  overwrite_cache_ = false;
}
inline bool WorkflowExecutionConfig::overwrite_cache() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowExecutionConfig.overwrite_cache)
  return overwrite_cache_;
}
inline void WorkflowExecutionConfig::set_overwrite_cache(bool value) {
  
  overwrite_cache_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.WorkflowExecutionConfig.overwrite_cache)
}

// -------------------------------------------------------------------

// MatchingAttributes

// .flyteidl.admin.TaskResourceAttributes task_resource_attributes = 1;
inline bool MatchingAttributes::has_task_resource_attributes() const {
  return target_case() == kTaskResourceAttributes;
}
inline void MatchingAttributes::set_has_task_resource_attributes() {
  _oneof_case_[0] = kTaskResourceAttributes;
}
inline void MatchingAttributes::clear_task_resource_attributes() {
  if (has_task_resource_attributes()) {
    delete target_.task_resource_attributes_;
    clear_has_target();
  }
}
inline ::flyteidl::admin::TaskResourceAttributes* MatchingAttributes::release_task_resource_attributes() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchingAttributes.task_resource_attributes)
  if (has_task_resource_attributes()) {
    clear_has_target();
      ::flyteidl::admin::TaskResourceAttributes* temp = target_.task_resource_attributes_;
    target_.task_resource_attributes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::TaskResourceAttributes& MatchingAttributes::task_resource_attributes() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchingAttributes.task_resource_attributes)
  return has_task_resource_attributes()
      ? *target_.task_resource_attributes_
      : *reinterpret_cast< ::flyteidl::admin::TaskResourceAttributes*>(&::flyteidl::admin::_TaskResourceAttributes_default_instance_);
}
inline ::flyteidl::admin::TaskResourceAttributes* MatchingAttributes::mutable_task_resource_attributes() {
  if (!has_task_resource_attributes()) {
    clear_target();
    set_has_task_resource_attributes();
    target_.task_resource_attributes_ = CreateMaybeMessage< ::flyteidl::admin::TaskResourceAttributes >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchingAttributes.task_resource_attributes)
  return target_.task_resource_attributes_;
}

// .flyteidl.admin.ClusterResourceAttributes cluster_resource_attributes = 2;
inline bool MatchingAttributes::has_cluster_resource_attributes() const {
  return target_case() == kClusterResourceAttributes;
}
inline void MatchingAttributes::set_has_cluster_resource_attributes() {
  _oneof_case_[0] = kClusterResourceAttributes;
}
inline void MatchingAttributes::clear_cluster_resource_attributes() {
  if (has_cluster_resource_attributes()) {
    delete target_.cluster_resource_attributes_;
    clear_has_target();
  }
}
inline ::flyteidl::admin::ClusterResourceAttributes* MatchingAttributes::release_cluster_resource_attributes() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchingAttributes.cluster_resource_attributes)
  if (has_cluster_resource_attributes()) {
    clear_has_target();
      ::flyteidl::admin::ClusterResourceAttributes* temp = target_.cluster_resource_attributes_;
    target_.cluster_resource_attributes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::ClusterResourceAttributes& MatchingAttributes::cluster_resource_attributes() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchingAttributes.cluster_resource_attributes)
  return has_cluster_resource_attributes()
      ? *target_.cluster_resource_attributes_
      : *reinterpret_cast< ::flyteidl::admin::ClusterResourceAttributes*>(&::flyteidl::admin::_ClusterResourceAttributes_default_instance_);
}
inline ::flyteidl::admin::ClusterResourceAttributes* MatchingAttributes::mutable_cluster_resource_attributes() {
  if (!has_cluster_resource_attributes()) {
    clear_target();
    set_has_cluster_resource_attributes();
    target_.cluster_resource_attributes_ = CreateMaybeMessage< ::flyteidl::admin::ClusterResourceAttributes >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchingAttributes.cluster_resource_attributes)
  return target_.cluster_resource_attributes_;
}

// .flyteidl.admin.ExecutionQueueAttributes execution_queue_attributes = 3;
inline bool MatchingAttributes::has_execution_queue_attributes() const {
  return target_case() == kExecutionQueueAttributes;
}
inline void MatchingAttributes::set_has_execution_queue_attributes() {
  _oneof_case_[0] = kExecutionQueueAttributes;
}
inline void MatchingAttributes::clear_execution_queue_attributes() {
  if (has_execution_queue_attributes()) {
    delete target_.execution_queue_attributes_;
    clear_has_target();
  }
}
inline ::flyteidl::admin::ExecutionQueueAttributes* MatchingAttributes::release_execution_queue_attributes() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchingAttributes.execution_queue_attributes)
  if (has_execution_queue_attributes()) {
    clear_has_target();
      ::flyteidl::admin::ExecutionQueueAttributes* temp = target_.execution_queue_attributes_;
    target_.execution_queue_attributes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::ExecutionQueueAttributes& MatchingAttributes::execution_queue_attributes() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchingAttributes.execution_queue_attributes)
  return has_execution_queue_attributes()
      ? *target_.execution_queue_attributes_
      : *reinterpret_cast< ::flyteidl::admin::ExecutionQueueAttributes*>(&::flyteidl::admin::_ExecutionQueueAttributes_default_instance_);
}
inline ::flyteidl::admin::ExecutionQueueAttributes* MatchingAttributes::mutable_execution_queue_attributes() {
  if (!has_execution_queue_attributes()) {
    clear_target();
    set_has_execution_queue_attributes();
    target_.execution_queue_attributes_ = CreateMaybeMessage< ::flyteidl::admin::ExecutionQueueAttributes >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchingAttributes.execution_queue_attributes)
  return target_.execution_queue_attributes_;
}

// .flyteidl.admin.ExecutionClusterLabel execution_cluster_label = 4;
inline bool MatchingAttributes::has_execution_cluster_label() const {
  return target_case() == kExecutionClusterLabel;
}
inline void MatchingAttributes::set_has_execution_cluster_label() {
  _oneof_case_[0] = kExecutionClusterLabel;
}
inline void MatchingAttributes::clear_execution_cluster_label() {
  if (has_execution_cluster_label()) {
    delete target_.execution_cluster_label_;
    clear_has_target();
  }
}
inline ::flyteidl::admin::ExecutionClusterLabel* MatchingAttributes::release_execution_cluster_label() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchingAttributes.execution_cluster_label)
  if (has_execution_cluster_label()) {
    clear_has_target();
      ::flyteidl::admin::ExecutionClusterLabel* temp = target_.execution_cluster_label_;
    target_.execution_cluster_label_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::ExecutionClusterLabel& MatchingAttributes::execution_cluster_label() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchingAttributes.execution_cluster_label)
  return has_execution_cluster_label()
      ? *target_.execution_cluster_label_
      : *reinterpret_cast< ::flyteidl::admin::ExecutionClusterLabel*>(&::flyteidl::admin::_ExecutionClusterLabel_default_instance_);
}
inline ::flyteidl::admin::ExecutionClusterLabel* MatchingAttributes::mutable_execution_cluster_label() {
  if (!has_execution_cluster_label()) {
    clear_target();
    set_has_execution_cluster_label();
    target_.execution_cluster_label_ = CreateMaybeMessage< ::flyteidl::admin::ExecutionClusterLabel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchingAttributes.execution_cluster_label)
  return target_.execution_cluster_label_;
}

// .flyteidl.core.QualityOfService quality_of_service = 5;
inline bool MatchingAttributes::has_quality_of_service() const {
  return target_case() == kQualityOfService;
}
inline void MatchingAttributes::set_has_quality_of_service() {
  _oneof_case_[0] = kQualityOfService;
}
inline ::flyteidl::core::QualityOfService* MatchingAttributes::release_quality_of_service() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchingAttributes.quality_of_service)
  if (has_quality_of_service()) {
    clear_has_target();
      ::flyteidl::core::QualityOfService* temp = target_.quality_of_service_;
    target_.quality_of_service_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::QualityOfService& MatchingAttributes::quality_of_service() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchingAttributes.quality_of_service)
  return has_quality_of_service()
      ? *target_.quality_of_service_
      : *reinterpret_cast< ::flyteidl::core::QualityOfService*>(&::flyteidl::core::_QualityOfService_default_instance_);
}
inline ::flyteidl::core::QualityOfService* MatchingAttributes::mutable_quality_of_service() {
  if (!has_quality_of_service()) {
    clear_target();
    set_has_quality_of_service();
    target_.quality_of_service_ = CreateMaybeMessage< ::flyteidl::core::QualityOfService >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchingAttributes.quality_of_service)
  return target_.quality_of_service_;
}

// .flyteidl.admin.PluginOverrides plugin_overrides = 6;
inline bool MatchingAttributes::has_plugin_overrides() const {
  return target_case() == kPluginOverrides;
}
inline void MatchingAttributes::set_has_plugin_overrides() {
  _oneof_case_[0] = kPluginOverrides;
}
inline void MatchingAttributes::clear_plugin_overrides() {
  if (has_plugin_overrides()) {
    delete target_.plugin_overrides_;
    clear_has_target();
  }
}
inline ::flyteidl::admin::PluginOverrides* MatchingAttributes::release_plugin_overrides() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchingAttributes.plugin_overrides)
  if (has_plugin_overrides()) {
    clear_has_target();
      ::flyteidl::admin::PluginOverrides* temp = target_.plugin_overrides_;
    target_.plugin_overrides_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::PluginOverrides& MatchingAttributes::plugin_overrides() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchingAttributes.plugin_overrides)
  return has_plugin_overrides()
      ? *target_.plugin_overrides_
      : *reinterpret_cast< ::flyteidl::admin::PluginOverrides*>(&::flyteidl::admin::_PluginOverrides_default_instance_);
}
inline ::flyteidl::admin::PluginOverrides* MatchingAttributes::mutable_plugin_overrides() {
  if (!has_plugin_overrides()) {
    clear_target();
    set_has_plugin_overrides();
    target_.plugin_overrides_ = CreateMaybeMessage< ::flyteidl::admin::PluginOverrides >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchingAttributes.plugin_overrides)
  return target_.plugin_overrides_;
}

// .flyteidl.admin.WorkflowExecutionConfig workflow_execution_config = 7;
inline bool MatchingAttributes::has_workflow_execution_config() const {
  return target_case() == kWorkflowExecutionConfig;
}
inline void MatchingAttributes::set_has_workflow_execution_config() {
  _oneof_case_[0] = kWorkflowExecutionConfig;
}
inline void MatchingAttributes::clear_workflow_execution_config() {
  if (has_workflow_execution_config()) {
    delete target_.workflow_execution_config_;
    clear_has_target();
  }
}
inline ::flyteidl::admin::WorkflowExecutionConfig* MatchingAttributes::release_workflow_execution_config() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchingAttributes.workflow_execution_config)
  if (has_workflow_execution_config()) {
    clear_has_target();
      ::flyteidl::admin::WorkflowExecutionConfig* temp = target_.workflow_execution_config_;
    target_.workflow_execution_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::WorkflowExecutionConfig& MatchingAttributes::workflow_execution_config() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchingAttributes.workflow_execution_config)
  return has_workflow_execution_config()
      ? *target_.workflow_execution_config_
      : *reinterpret_cast< ::flyteidl::admin::WorkflowExecutionConfig*>(&::flyteidl::admin::_WorkflowExecutionConfig_default_instance_);
}
inline ::flyteidl::admin::WorkflowExecutionConfig* MatchingAttributes::mutable_workflow_execution_config() {
  if (!has_workflow_execution_config()) {
    clear_target();
    set_has_workflow_execution_config();
    target_.workflow_execution_config_ = CreateMaybeMessage< ::flyteidl::admin::WorkflowExecutionConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchingAttributes.workflow_execution_config)
  return target_.workflow_execution_config_;
}

// .flyteidl.admin.ClusterAssignment cluster_assignment = 8;
inline bool MatchingAttributes::has_cluster_assignment() const {
  return target_case() == kClusterAssignment;
}
inline void MatchingAttributes::set_has_cluster_assignment() {
  _oneof_case_[0] = kClusterAssignment;
}
inline ::flyteidl::admin::ClusterAssignment* MatchingAttributes::release_cluster_assignment() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchingAttributes.cluster_assignment)
  if (has_cluster_assignment()) {
    clear_has_target();
      ::flyteidl::admin::ClusterAssignment* temp = target_.cluster_assignment_;
    target_.cluster_assignment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::ClusterAssignment& MatchingAttributes::cluster_assignment() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchingAttributes.cluster_assignment)
  return has_cluster_assignment()
      ? *target_.cluster_assignment_
      : *reinterpret_cast< ::flyteidl::admin::ClusterAssignment*>(&::flyteidl::admin::_ClusterAssignment_default_instance_);
}
inline ::flyteidl::admin::ClusterAssignment* MatchingAttributes::mutable_cluster_assignment() {
  if (!has_cluster_assignment()) {
    clear_target();
    set_has_cluster_assignment();
    target_.cluster_assignment_ = CreateMaybeMessage< ::flyteidl::admin::ClusterAssignment >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchingAttributes.cluster_assignment)
  return target_.cluster_assignment_;
}

inline bool MatchingAttributes::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void MatchingAttributes::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
inline MatchingAttributes::TargetCase MatchingAttributes::target_case() const {
  return MatchingAttributes::TargetCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MatchableAttributesConfiguration

// .flyteidl.admin.MatchingAttributes attributes = 1;
inline bool MatchableAttributesConfiguration::has_attributes() const {
  return this != internal_default_instance() && attributes_ != nullptr;
}
inline void MatchableAttributesConfiguration::clear_attributes() {
  if (GetArenaNoVirtual() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
}
inline const ::flyteidl::admin::MatchingAttributes& MatchableAttributesConfiguration::attributes() const {
  const ::flyteidl::admin::MatchingAttributes* p = attributes_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchableAttributesConfiguration.attributes)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::MatchingAttributes*>(
      &::flyteidl::admin::_MatchingAttributes_default_instance_);
}
inline ::flyteidl::admin::MatchingAttributes* MatchableAttributesConfiguration::release_attributes() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchableAttributesConfiguration.attributes)
  
  ::flyteidl::admin::MatchingAttributes* temp = attributes_;
  attributes_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::MatchingAttributes* MatchableAttributesConfiguration::mutable_attributes() {
  
  if (attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::MatchingAttributes>(GetArenaNoVirtual());
    attributes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchableAttributesConfiguration.attributes)
  return attributes_;
}
inline void MatchableAttributesConfiguration::set_allocated_attributes(::flyteidl::admin::MatchingAttributes* attributes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attributes_;
  }
  if (attributes) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attributes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.MatchableAttributesConfiguration.attributes)
}

// string domain = 2;
inline void MatchableAttributesConfiguration::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MatchableAttributesConfiguration::domain() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchableAttributesConfiguration.domain)
  return domain_.GetNoArena();
}
inline void MatchableAttributesConfiguration::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.MatchableAttributesConfiguration.domain)
}
#if LANG_CXX11
inline void MatchableAttributesConfiguration::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.MatchableAttributesConfiguration.domain)
}
#endif
inline void MatchableAttributesConfiguration::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.MatchableAttributesConfiguration.domain)
}
inline void MatchableAttributesConfiguration::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.MatchableAttributesConfiguration.domain)
}
inline ::std::string* MatchableAttributesConfiguration::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchableAttributesConfiguration.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchableAttributesConfiguration::release_domain() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchableAttributesConfiguration.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchableAttributesConfiguration::set_allocated_domain(::std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.MatchableAttributesConfiguration.domain)
}

// string project = 3;
inline void MatchableAttributesConfiguration::clear_project() {
  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MatchableAttributesConfiguration::project() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchableAttributesConfiguration.project)
  return project_.GetNoArena();
}
inline void MatchableAttributesConfiguration::set_project(const ::std::string& value) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.MatchableAttributesConfiguration.project)
}
#if LANG_CXX11
inline void MatchableAttributesConfiguration::set_project(::std::string&& value) {
  
  project_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.MatchableAttributesConfiguration.project)
}
#endif
inline void MatchableAttributesConfiguration::set_project(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.MatchableAttributesConfiguration.project)
}
inline void MatchableAttributesConfiguration::set_project(const char* value, size_t size) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.MatchableAttributesConfiguration.project)
}
inline ::std::string* MatchableAttributesConfiguration::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchableAttributesConfiguration.project)
  return project_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchableAttributesConfiguration::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchableAttributesConfiguration.project)
  
  return project_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchableAttributesConfiguration::set_allocated_project(::std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.MatchableAttributesConfiguration.project)
}

// string workflow = 4;
inline void MatchableAttributesConfiguration::clear_workflow() {
  workflow_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MatchableAttributesConfiguration::workflow() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchableAttributesConfiguration.workflow)
  return workflow_.GetNoArena();
}
inline void MatchableAttributesConfiguration::set_workflow(const ::std::string& value) {
  
  workflow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.MatchableAttributesConfiguration.workflow)
}
#if LANG_CXX11
inline void MatchableAttributesConfiguration::set_workflow(::std::string&& value) {
  
  workflow_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.MatchableAttributesConfiguration.workflow)
}
#endif
inline void MatchableAttributesConfiguration::set_workflow(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workflow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.MatchableAttributesConfiguration.workflow)
}
inline void MatchableAttributesConfiguration::set_workflow(const char* value, size_t size) {
  
  workflow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.MatchableAttributesConfiguration.workflow)
}
inline ::std::string* MatchableAttributesConfiguration::mutable_workflow() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchableAttributesConfiguration.workflow)
  return workflow_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchableAttributesConfiguration::release_workflow() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchableAttributesConfiguration.workflow)
  
  return workflow_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchableAttributesConfiguration::set_allocated_workflow(::std::string* workflow) {
  if (workflow != nullptr) {
    
  } else {
    
  }
  workflow_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), workflow);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.MatchableAttributesConfiguration.workflow)
}

// string launch_plan = 5;
inline void MatchableAttributesConfiguration::clear_launch_plan() {
  launch_plan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MatchableAttributesConfiguration::launch_plan() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.MatchableAttributesConfiguration.launch_plan)
  return launch_plan_.GetNoArena();
}
inline void MatchableAttributesConfiguration::set_launch_plan(const ::std::string& value) {
  
  launch_plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.MatchableAttributesConfiguration.launch_plan)
}
#if LANG_CXX11
inline void MatchableAttributesConfiguration::set_launch_plan(::std::string&& value) {
  
  launch_plan_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.MatchableAttributesConfiguration.launch_plan)
}
#endif
inline void MatchableAttributesConfiguration::set_launch_plan(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  launch_plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.MatchableAttributesConfiguration.launch_plan)
}
inline void MatchableAttributesConfiguration::set_launch_plan(const char* value, size_t size) {
  
  launch_plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.MatchableAttributesConfiguration.launch_plan)
}
inline ::std::string* MatchableAttributesConfiguration::mutable_launch_plan() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.MatchableAttributesConfiguration.launch_plan)
  return launch_plan_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchableAttributesConfiguration::release_launch_plan() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.MatchableAttributesConfiguration.launch_plan)
  
  return launch_plan_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchableAttributesConfiguration::set_allocated_launch_plan(::std::string* launch_plan) {
  if (launch_plan != nullptr) {
    
  } else {
    
  }
  launch_plan_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), launch_plan);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.MatchableAttributesConfiguration.launch_plan)
}

// -------------------------------------------------------------------

// ListMatchableAttributesRequest

// .flyteidl.admin.MatchableResource resource_type = 1;
inline void ListMatchableAttributesRequest::clear_resource_type() {
  resource_type_ = 0;
}
inline ::flyteidl::admin::MatchableResource ListMatchableAttributesRequest::resource_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ListMatchableAttributesRequest.resource_type)
  return static_cast< ::flyteidl::admin::MatchableResource >(resource_type_);
}
inline void ListMatchableAttributesRequest::set_resource_type(::flyteidl::admin::MatchableResource value) {
  
  resource_type_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.ListMatchableAttributesRequest.resource_type)
}

// -------------------------------------------------------------------

// ListMatchableAttributesResponse

// repeated .flyteidl.admin.MatchableAttributesConfiguration configurations = 1;
inline int ListMatchableAttributesResponse::configurations_size() const {
  return configurations_.size();
}
inline void ListMatchableAttributesResponse::clear_configurations() {
  configurations_.Clear();
}
inline ::flyteidl::admin::MatchableAttributesConfiguration* ListMatchableAttributesResponse::mutable_configurations(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ListMatchableAttributesResponse.configurations)
  return configurations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::MatchableAttributesConfiguration >*
ListMatchableAttributesResponse::mutable_configurations() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.ListMatchableAttributesResponse.configurations)
  return &configurations_;
}
inline const ::flyteidl::admin::MatchableAttributesConfiguration& ListMatchableAttributesResponse::configurations(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ListMatchableAttributesResponse.configurations)
  return configurations_.Get(index);
}
inline ::flyteidl::admin::MatchableAttributesConfiguration* ListMatchableAttributesResponse::add_configurations() {
  // @@protoc_insertion_point(field_add:flyteidl.admin.ListMatchableAttributesResponse.configurations)
  return configurations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::MatchableAttributesConfiguration >&
ListMatchableAttributesResponse::configurations() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.ListMatchableAttributesResponse.configurations)
  return configurations_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::flyteidl::admin::PluginOverride_MissingPluginBehavior> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::admin::PluginOverride_MissingPluginBehavior>() {
  return ::flyteidl::admin::PluginOverride_MissingPluginBehavior_descriptor();
}
template <> struct is_proto_enum< ::flyteidl::admin::MatchableResource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::admin::MatchableResource>() {
  return ::flyteidl::admin::MatchableResource_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fadmin_2fmatchable_5fresource_2eproto
