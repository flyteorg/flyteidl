// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/ray.proto

package flyteidl.core;

public final class Ray {
  private Ray() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface RayJobOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.RayJob)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * RayClusterSpec is the cluster template to run the job
     * </pre>
     *
     * <code>.flyteidl.core.RayCluster ray_cluster = 1;</code>
     */
    boolean hasRayCluster();
    /**
     * <pre>
     * RayClusterSpec is the cluster template to run the job
     * </pre>
     *
     * <code>.flyteidl.core.RayCluster ray_cluster = 1;</code>
     */
    flyteidl.core.Ray.RayCluster getRayCluster();
    /**
     * <pre>
     * RayClusterSpec is the cluster template to run the job
     * </pre>
     *
     * <code>.flyteidl.core.RayCluster ray_cluster = 1;</code>
     */
    flyteidl.core.Ray.RayClusterOrBuilder getRayClusterOrBuilder();

    /**
     * <pre>
     * runtime_env is base64 encoded.
     * Ray runtime environments: https://docs.ray.io/en/latest/ray-core/handling-dependencies.html#runtime-environments
     * </pre>
     *
     * <code>string runtime_env = 2;</code>
     */
    java.lang.String getRuntimeEnv();
    /**
     * <pre>
     * runtime_env is base64 encoded.
     * Ray runtime environments: https://docs.ray.io/en/latest/ray-core/handling-dependencies.html#runtime-environments
     * </pre>
     *
     * <code>string runtime_env = 2;</code>
     */
    com.google.protobuf.ByteString
        getRuntimeEnvBytes();

    /**
     * <pre>
     * shutdown_after_job_finishes will determine whether to delete the ray cluster once rayJob succeed or failed.
     * </pre>
     *
     * <code>bool shutdown_after_job_finishes = 3;</code>
     */
    boolean getShutdownAfterJobFinishes();

    /**
     * <pre>
     * ttl_seconds_after_finished is the TTL to clean up RayCluster.
     * It's only working when ShutdownAfterJobFinishes set to true.
     * </pre>
     *
     * <code>int32 ttl_seconds_after_finished = 4;</code>
     */
    int getTtlSecondsAfterFinished();
  }
  /**
   * <pre>
   * RayJobSpec defines the desired state of RayJob
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.RayJob}
   */
  public  static final class RayJob extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.RayJob)
      RayJobOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RayJob.newBuilder() to construct.
    private RayJob(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RayJob() {
      runtimeEnv_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RayJob(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              flyteidl.core.Ray.RayCluster.Builder subBuilder = null;
              if (rayCluster_ != null) {
                subBuilder = rayCluster_.toBuilder();
              }
              rayCluster_ = input.readMessage(flyteidl.core.Ray.RayCluster.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(rayCluster_);
                rayCluster_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              runtimeEnv_ = s;
              break;
            }
            case 24: {

              shutdownAfterJobFinishes_ = input.readBool();
              break;
            }
            case 32: {

              ttlSecondsAfterFinished_ = input.readInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.core.Ray.internal_static_flyteidl_core_RayJob_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.core.Ray.internal_static_flyteidl_core_RayJob_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.core.Ray.RayJob.class, flyteidl.core.Ray.RayJob.Builder.class);
    }

    public static final int RAY_CLUSTER_FIELD_NUMBER = 1;
    private flyteidl.core.Ray.RayCluster rayCluster_;
    /**
     * <pre>
     * RayClusterSpec is the cluster template to run the job
     * </pre>
     *
     * <code>.flyteidl.core.RayCluster ray_cluster = 1;</code>
     */
    public boolean hasRayCluster() {
      return rayCluster_ != null;
    }
    /**
     * <pre>
     * RayClusterSpec is the cluster template to run the job
     * </pre>
     *
     * <code>.flyteidl.core.RayCluster ray_cluster = 1;</code>
     */
    public flyteidl.core.Ray.RayCluster getRayCluster() {
      return rayCluster_ == null ? flyteidl.core.Ray.RayCluster.getDefaultInstance() : rayCluster_;
    }
    /**
     * <pre>
     * RayClusterSpec is the cluster template to run the job
     * </pre>
     *
     * <code>.flyteidl.core.RayCluster ray_cluster = 1;</code>
     */
    public flyteidl.core.Ray.RayClusterOrBuilder getRayClusterOrBuilder() {
      return getRayCluster();
    }

    public static final int RUNTIME_ENV_FIELD_NUMBER = 2;
    private volatile java.lang.Object runtimeEnv_;
    /**
     * <pre>
     * runtime_env is base64 encoded.
     * Ray runtime environments: https://docs.ray.io/en/latest/ray-core/handling-dependencies.html#runtime-environments
     * </pre>
     *
     * <code>string runtime_env = 2;</code>
     */
    public java.lang.String getRuntimeEnv() {
      java.lang.Object ref = runtimeEnv_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        runtimeEnv_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * runtime_env is base64 encoded.
     * Ray runtime environments: https://docs.ray.io/en/latest/ray-core/handling-dependencies.html#runtime-environments
     * </pre>
     *
     * <code>string runtime_env = 2;</code>
     */
    public com.google.protobuf.ByteString
        getRuntimeEnvBytes() {
      java.lang.Object ref = runtimeEnv_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        runtimeEnv_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SHUTDOWN_AFTER_JOB_FINISHES_FIELD_NUMBER = 3;
    private boolean shutdownAfterJobFinishes_;
    /**
     * <pre>
     * shutdown_after_job_finishes will determine whether to delete the ray cluster once rayJob succeed or failed.
     * </pre>
     *
     * <code>bool shutdown_after_job_finishes = 3;</code>
     */
    public boolean getShutdownAfterJobFinishes() {
      return shutdownAfterJobFinishes_;
    }

    public static final int TTL_SECONDS_AFTER_FINISHED_FIELD_NUMBER = 4;
    private int ttlSecondsAfterFinished_;
    /**
     * <pre>
     * ttl_seconds_after_finished is the TTL to clean up RayCluster.
     * It's only working when ShutdownAfterJobFinishes set to true.
     * </pre>
     *
     * <code>int32 ttl_seconds_after_finished = 4;</code>
     */
    public int getTtlSecondsAfterFinished() {
      return ttlSecondsAfterFinished_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (rayCluster_ != null) {
        output.writeMessage(1, getRayCluster());
      }
      if (!getRuntimeEnvBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, runtimeEnv_);
      }
      if (shutdownAfterJobFinishes_ != false) {
        output.writeBool(3, shutdownAfterJobFinishes_);
      }
      if (ttlSecondsAfterFinished_ != 0) {
        output.writeInt32(4, ttlSecondsAfterFinished_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (rayCluster_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getRayCluster());
      }
      if (!getRuntimeEnvBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, runtimeEnv_);
      }
      if (shutdownAfterJobFinishes_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, shutdownAfterJobFinishes_);
      }
      if (ttlSecondsAfterFinished_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, ttlSecondsAfterFinished_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.core.Ray.RayJob)) {
        return super.equals(obj);
      }
      flyteidl.core.Ray.RayJob other = (flyteidl.core.Ray.RayJob) obj;

      if (hasRayCluster() != other.hasRayCluster()) return false;
      if (hasRayCluster()) {
        if (!getRayCluster()
            .equals(other.getRayCluster())) return false;
      }
      if (!getRuntimeEnv()
          .equals(other.getRuntimeEnv())) return false;
      if (getShutdownAfterJobFinishes()
          != other.getShutdownAfterJobFinishes()) return false;
      if (getTtlSecondsAfterFinished()
          != other.getTtlSecondsAfterFinished()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasRayCluster()) {
        hash = (37 * hash) + RAY_CLUSTER_FIELD_NUMBER;
        hash = (53 * hash) + getRayCluster().hashCode();
      }
      hash = (37 * hash) + RUNTIME_ENV_FIELD_NUMBER;
      hash = (53 * hash) + getRuntimeEnv().hashCode();
      hash = (37 * hash) + SHUTDOWN_AFTER_JOB_FINISHES_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getShutdownAfterJobFinishes());
      hash = (37 * hash) + TTL_SECONDS_AFTER_FINISHED_FIELD_NUMBER;
      hash = (53 * hash) + getTtlSecondsAfterFinished();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.core.Ray.RayJob parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Ray.RayJob parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Ray.RayJob parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Ray.RayJob parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Ray.RayJob parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Ray.RayJob parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Ray.RayJob parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Ray.RayJob parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Ray.RayJob parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.core.Ray.RayJob parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Ray.RayJob parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Ray.RayJob parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.core.Ray.RayJob prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * RayJobSpec defines the desired state of RayJob
     * </pre>
     *
     * Protobuf type {@code flyteidl.core.RayJob}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.RayJob)
        flyteidl.core.Ray.RayJobOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.core.Ray.internal_static_flyteidl_core_RayJob_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.core.Ray.internal_static_flyteidl_core_RayJob_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.core.Ray.RayJob.class, flyteidl.core.Ray.RayJob.Builder.class);
      }

      // Construct using flyteidl.core.Ray.RayJob.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (rayClusterBuilder_ == null) {
          rayCluster_ = null;
        } else {
          rayCluster_ = null;
          rayClusterBuilder_ = null;
        }
        runtimeEnv_ = "";

        shutdownAfterJobFinishes_ = false;

        ttlSecondsAfterFinished_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.core.Ray.internal_static_flyteidl_core_RayJob_descriptor;
      }

      @java.lang.Override
      public flyteidl.core.Ray.RayJob getDefaultInstanceForType() {
        return flyteidl.core.Ray.RayJob.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.core.Ray.RayJob build() {
        flyteidl.core.Ray.RayJob result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.core.Ray.RayJob buildPartial() {
        flyteidl.core.Ray.RayJob result = new flyteidl.core.Ray.RayJob(this);
        if (rayClusterBuilder_ == null) {
          result.rayCluster_ = rayCluster_;
        } else {
          result.rayCluster_ = rayClusterBuilder_.build();
        }
        result.runtimeEnv_ = runtimeEnv_;
        result.shutdownAfterJobFinishes_ = shutdownAfterJobFinishes_;
        result.ttlSecondsAfterFinished_ = ttlSecondsAfterFinished_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.core.Ray.RayJob) {
          return mergeFrom((flyteidl.core.Ray.RayJob)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.core.Ray.RayJob other) {
        if (other == flyteidl.core.Ray.RayJob.getDefaultInstance()) return this;
        if (other.hasRayCluster()) {
          mergeRayCluster(other.getRayCluster());
        }
        if (!other.getRuntimeEnv().isEmpty()) {
          runtimeEnv_ = other.runtimeEnv_;
          onChanged();
        }
        if (other.getShutdownAfterJobFinishes() != false) {
          setShutdownAfterJobFinishes(other.getShutdownAfterJobFinishes());
        }
        if (other.getTtlSecondsAfterFinished() != 0) {
          setTtlSecondsAfterFinished(other.getTtlSecondsAfterFinished());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.core.Ray.RayJob parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.core.Ray.RayJob) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private flyteidl.core.Ray.RayCluster rayCluster_;
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Ray.RayCluster, flyteidl.core.Ray.RayCluster.Builder, flyteidl.core.Ray.RayClusterOrBuilder> rayClusterBuilder_;
      /**
       * <pre>
       * RayClusterSpec is the cluster template to run the job
       * </pre>
       *
       * <code>.flyteidl.core.RayCluster ray_cluster = 1;</code>
       */
      public boolean hasRayCluster() {
        return rayClusterBuilder_ != null || rayCluster_ != null;
      }
      /**
       * <pre>
       * RayClusterSpec is the cluster template to run the job
       * </pre>
       *
       * <code>.flyteidl.core.RayCluster ray_cluster = 1;</code>
       */
      public flyteidl.core.Ray.RayCluster getRayCluster() {
        if (rayClusterBuilder_ == null) {
          return rayCluster_ == null ? flyteidl.core.Ray.RayCluster.getDefaultInstance() : rayCluster_;
        } else {
          return rayClusterBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * RayClusterSpec is the cluster template to run the job
       * </pre>
       *
       * <code>.flyteidl.core.RayCluster ray_cluster = 1;</code>
       */
      public Builder setRayCluster(flyteidl.core.Ray.RayCluster value) {
        if (rayClusterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          rayCluster_ = value;
          onChanged();
        } else {
          rayClusterBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * RayClusterSpec is the cluster template to run the job
       * </pre>
       *
       * <code>.flyteidl.core.RayCluster ray_cluster = 1;</code>
       */
      public Builder setRayCluster(
          flyteidl.core.Ray.RayCluster.Builder builderForValue) {
        if (rayClusterBuilder_ == null) {
          rayCluster_ = builderForValue.build();
          onChanged();
        } else {
          rayClusterBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * RayClusterSpec is the cluster template to run the job
       * </pre>
       *
       * <code>.flyteidl.core.RayCluster ray_cluster = 1;</code>
       */
      public Builder mergeRayCluster(flyteidl.core.Ray.RayCluster value) {
        if (rayClusterBuilder_ == null) {
          if (rayCluster_ != null) {
            rayCluster_ =
              flyteidl.core.Ray.RayCluster.newBuilder(rayCluster_).mergeFrom(value).buildPartial();
          } else {
            rayCluster_ = value;
          }
          onChanged();
        } else {
          rayClusterBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * RayClusterSpec is the cluster template to run the job
       * </pre>
       *
       * <code>.flyteidl.core.RayCluster ray_cluster = 1;</code>
       */
      public Builder clearRayCluster() {
        if (rayClusterBuilder_ == null) {
          rayCluster_ = null;
          onChanged();
        } else {
          rayCluster_ = null;
          rayClusterBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * RayClusterSpec is the cluster template to run the job
       * </pre>
       *
       * <code>.flyteidl.core.RayCluster ray_cluster = 1;</code>
       */
      public flyteidl.core.Ray.RayCluster.Builder getRayClusterBuilder() {
        
        onChanged();
        return getRayClusterFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * RayClusterSpec is the cluster template to run the job
       * </pre>
       *
       * <code>.flyteidl.core.RayCluster ray_cluster = 1;</code>
       */
      public flyteidl.core.Ray.RayClusterOrBuilder getRayClusterOrBuilder() {
        if (rayClusterBuilder_ != null) {
          return rayClusterBuilder_.getMessageOrBuilder();
        } else {
          return rayCluster_ == null ?
              flyteidl.core.Ray.RayCluster.getDefaultInstance() : rayCluster_;
        }
      }
      /**
       * <pre>
       * RayClusterSpec is the cluster template to run the job
       * </pre>
       *
       * <code>.flyteidl.core.RayCluster ray_cluster = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Ray.RayCluster, flyteidl.core.Ray.RayCluster.Builder, flyteidl.core.Ray.RayClusterOrBuilder> 
          getRayClusterFieldBuilder() {
        if (rayClusterBuilder_ == null) {
          rayClusterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Ray.RayCluster, flyteidl.core.Ray.RayCluster.Builder, flyteidl.core.Ray.RayClusterOrBuilder>(
                  getRayCluster(),
                  getParentForChildren(),
                  isClean());
          rayCluster_ = null;
        }
        return rayClusterBuilder_;
      }

      private java.lang.Object runtimeEnv_ = "";
      /**
       * <pre>
       * runtime_env is base64 encoded.
       * Ray runtime environments: https://docs.ray.io/en/latest/ray-core/handling-dependencies.html#runtime-environments
       * </pre>
       *
       * <code>string runtime_env = 2;</code>
       */
      public java.lang.String getRuntimeEnv() {
        java.lang.Object ref = runtimeEnv_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          runtimeEnv_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * runtime_env is base64 encoded.
       * Ray runtime environments: https://docs.ray.io/en/latest/ray-core/handling-dependencies.html#runtime-environments
       * </pre>
       *
       * <code>string runtime_env = 2;</code>
       */
      public com.google.protobuf.ByteString
          getRuntimeEnvBytes() {
        java.lang.Object ref = runtimeEnv_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          runtimeEnv_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * runtime_env is base64 encoded.
       * Ray runtime environments: https://docs.ray.io/en/latest/ray-core/handling-dependencies.html#runtime-environments
       * </pre>
       *
       * <code>string runtime_env = 2;</code>
       */
      public Builder setRuntimeEnv(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        runtimeEnv_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * runtime_env is base64 encoded.
       * Ray runtime environments: https://docs.ray.io/en/latest/ray-core/handling-dependencies.html#runtime-environments
       * </pre>
       *
       * <code>string runtime_env = 2;</code>
       */
      public Builder clearRuntimeEnv() {
        
        runtimeEnv_ = getDefaultInstance().getRuntimeEnv();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * runtime_env is base64 encoded.
       * Ray runtime environments: https://docs.ray.io/en/latest/ray-core/handling-dependencies.html#runtime-environments
       * </pre>
       *
       * <code>string runtime_env = 2;</code>
       */
      public Builder setRuntimeEnvBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        runtimeEnv_ = value;
        onChanged();
        return this;
      }

      private boolean shutdownAfterJobFinishes_ ;
      /**
       * <pre>
       * shutdown_after_job_finishes will determine whether to delete the ray cluster once rayJob succeed or failed.
       * </pre>
       *
       * <code>bool shutdown_after_job_finishes = 3;</code>
       */
      public boolean getShutdownAfterJobFinishes() {
        return shutdownAfterJobFinishes_;
      }
      /**
       * <pre>
       * shutdown_after_job_finishes will determine whether to delete the ray cluster once rayJob succeed or failed.
       * </pre>
       *
       * <code>bool shutdown_after_job_finishes = 3;</code>
       */
      public Builder setShutdownAfterJobFinishes(boolean value) {
        
        shutdownAfterJobFinishes_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * shutdown_after_job_finishes will determine whether to delete the ray cluster once rayJob succeed or failed.
       * </pre>
       *
       * <code>bool shutdown_after_job_finishes = 3;</code>
       */
      public Builder clearShutdownAfterJobFinishes() {
        
        shutdownAfterJobFinishes_ = false;
        onChanged();
        return this;
      }

      private int ttlSecondsAfterFinished_ ;
      /**
       * <pre>
       * ttl_seconds_after_finished is the TTL to clean up RayCluster.
       * It's only working when ShutdownAfterJobFinishes set to true.
       * </pre>
       *
       * <code>int32 ttl_seconds_after_finished = 4;</code>
       */
      public int getTtlSecondsAfterFinished() {
        return ttlSecondsAfterFinished_;
      }
      /**
       * <pre>
       * ttl_seconds_after_finished is the TTL to clean up RayCluster.
       * It's only working when ShutdownAfterJobFinishes set to true.
       * </pre>
       *
       * <code>int32 ttl_seconds_after_finished = 4;</code>
       */
      public Builder setTtlSecondsAfterFinished(int value) {
        
        ttlSecondsAfterFinished_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ttl_seconds_after_finished is the TTL to clean up RayCluster.
       * It's only working when ShutdownAfterJobFinishes set to true.
       * </pre>
       *
       * <code>int32 ttl_seconds_after_finished = 4;</code>
       */
      public Builder clearTtlSecondsAfterFinished() {
        
        ttlSecondsAfterFinished_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.RayJob)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.RayJob)
    private static final flyteidl.core.Ray.RayJob DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.core.Ray.RayJob();
    }

    public static flyteidl.core.Ray.RayJob getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RayJob>
        PARSER = new com.google.protobuf.AbstractParser<RayJob>() {
      @java.lang.Override
      public RayJob parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RayJob(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RayJob> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RayJob> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.core.Ray.RayJob getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RayClusterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.RayCluster)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Required field. This field indicates ray cluster configuration
     * </pre>
     *
     * <code>.flyteidl.core.ClusterSpec cluster_spec = 1;</code>
     */
    boolean hasClusterSpec();
    /**
     * <pre>
     * Required field. This field indicates ray cluster configuration
     * </pre>
     *
     * <code>.flyteidl.core.ClusterSpec cluster_spec = 1;</code>
     */
    flyteidl.core.Ray.ClusterSpec getClusterSpec();
    /**
     * <pre>
     * Required field. This field indicates ray cluster configuration
     * </pre>
     *
     * <code>.flyteidl.core.ClusterSpec cluster_spec = 1;</code>
     */
    flyteidl.core.Ray.ClusterSpecOrBuilder getClusterSpecOrBuilder();
  }
  /**
   * <pre>
   * Define Ray cluster spec
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.RayCluster}
   */
  public  static final class RayCluster extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.RayCluster)
      RayClusterOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RayCluster.newBuilder() to construct.
    private RayCluster(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RayCluster() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RayCluster(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              flyteidl.core.Ray.ClusterSpec.Builder subBuilder = null;
              if (clusterSpec_ != null) {
                subBuilder = clusterSpec_.toBuilder();
              }
              clusterSpec_ = input.readMessage(flyteidl.core.Ray.ClusterSpec.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(clusterSpec_);
                clusterSpec_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.core.Ray.internal_static_flyteidl_core_RayCluster_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.core.Ray.internal_static_flyteidl_core_RayCluster_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.core.Ray.RayCluster.class, flyteidl.core.Ray.RayCluster.Builder.class);
    }

    public static final int CLUSTER_SPEC_FIELD_NUMBER = 1;
    private flyteidl.core.Ray.ClusterSpec clusterSpec_;
    /**
     * <pre>
     * Required field. This field indicates ray cluster configuration
     * </pre>
     *
     * <code>.flyteidl.core.ClusterSpec cluster_spec = 1;</code>
     */
    public boolean hasClusterSpec() {
      return clusterSpec_ != null;
    }
    /**
     * <pre>
     * Required field. This field indicates ray cluster configuration
     * </pre>
     *
     * <code>.flyteidl.core.ClusterSpec cluster_spec = 1;</code>
     */
    public flyteidl.core.Ray.ClusterSpec getClusterSpec() {
      return clusterSpec_ == null ? flyteidl.core.Ray.ClusterSpec.getDefaultInstance() : clusterSpec_;
    }
    /**
     * <pre>
     * Required field. This field indicates ray cluster configuration
     * </pre>
     *
     * <code>.flyteidl.core.ClusterSpec cluster_spec = 1;</code>
     */
    public flyteidl.core.Ray.ClusterSpecOrBuilder getClusterSpecOrBuilder() {
      return getClusterSpec();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (clusterSpec_ != null) {
        output.writeMessage(1, getClusterSpec());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (clusterSpec_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getClusterSpec());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.core.Ray.RayCluster)) {
        return super.equals(obj);
      }
      flyteidl.core.Ray.RayCluster other = (flyteidl.core.Ray.RayCluster) obj;

      if (hasClusterSpec() != other.hasClusterSpec()) return false;
      if (hasClusterSpec()) {
        if (!getClusterSpec()
            .equals(other.getClusterSpec())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasClusterSpec()) {
        hash = (37 * hash) + CLUSTER_SPEC_FIELD_NUMBER;
        hash = (53 * hash) + getClusterSpec().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.core.Ray.RayCluster parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Ray.RayCluster parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Ray.RayCluster parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Ray.RayCluster parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Ray.RayCluster parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Ray.RayCluster parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Ray.RayCluster parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Ray.RayCluster parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Ray.RayCluster parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.core.Ray.RayCluster parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Ray.RayCluster parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Ray.RayCluster parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.core.Ray.RayCluster prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Define Ray cluster spec
     * </pre>
     *
     * Protobuf type {@code flyteidl.core.RayCluster}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.RayCluster)
        flyteidl.core.Ray.RayClusterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.core.Ray.internal_static_flyteidl_core_RayCluster_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.core.Ray.internal_static_flyteidl_core_RayCluster_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.core.Ray.RayCluster.class, flyteidl.core.Ray.RayCluster.Builder.class);
      }

      // Construct using flyteidl.core.Ray.RayCluster.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (clusterSpecBuilder_ == null) {
          clusterSpec_ = null;
        } else {
          clusterSpec_ = null;
          clusterSpecBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.core.Ray.internal_static_flyteidl_core_RayCluster_descriptor;
      }

      @java.lang.Override
      public flyteidl.core.Ray.RayCluster getDefaultInstanceForType() {
        return flyteidl.core.Ray.RayCluster.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.core.Ray.RayCluster build() {
        flyteidl.core.Ray.RayCluster result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.core.Ray.RayCluster buildPartial() {
        flyteidl.core.Ray.RayCluster result = new flyteidl.core.Ray.RayCluster(this);
        if (clusterSpecBuilder_ == null) {
          result.clusterSpec_ = clusterSpec_;
        } else {
          result.clusterSpec_ = clusterSpecBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.core.Ray.RayCluster) {
          return mergeFrom((flyteidl.core.Ray.RayCluster)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.core.Ray.RayCluster other) {
        if (other == flyteidl.core.Ray.RayCluster.getDefaultInstance()) return this;
        if (other.hasClusterSpec()) {
          mergeClusterSpec(other.getClusterSpec());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.core.Ray.RayCluster parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.core.Ray.RayCluster) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private flyteidl.core.Ray.ClusterSpec clusterSpec_;
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Ray.ClusterSpec, flyteidl.core.Ray.ClusterSpec.Builder, flyteidl.core.Ray.ClusterSpecOrBuilder> clusterSpecBuilder_;
      /**
       * <pre>
       * Required field. This field indicates ray cluster configuration
       * </pre>
       *
       * <code>.flyteidl.core.ClusterSpec cluster_spec = 1;</code>
       */
      public boolean hasClusterSpec() {
        return clusterSpecBuilder_ != null || clusterSpec_ != null;
      }
      /**
       * <pre>
       * Required field. This field indicates ray cluster configuration
       * </pre>
       *
       * <code>.flyteidl.core.ClusterSpec cluster_spec = 1;</code>
       */
      public flyteidl.core.Ray.ClusterSpec getClusterSpec() {
        if (clusterSpecBuilder_ == null) {
          return clusterSpec_ == null ? flyteidl.core.Ray.ClusterSpec.getDefaultInstance() : clusterSpec_;
        } else {
          return clusterSpecBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Required field. This field indicates ray cluster configuration
       * </pre>
       *
       * <code>.flyteidl.core.ClusterSpec cluster_spec = 1;</code>
       */
      public Builder setClusterSpec(flyteidl.core.Ray.ClusterSpec value) {
        if (clusterSpecBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          clusterSpec_ = value;
          onChanged();
        } else {
          clusterSpecBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Required field. This field indicates ray cluster configuration
       * </pre>
       *
       * <code>.flyteidl.core.ClusterSpec cluster_spec = 1;</code>
       */
      public Builder setClusterSpec(
          flyteidl.core.Ray.ClusterSpec.Builder builderForValue) {
        if (clusterSpecBuilder_ == null) {
          clusterSpec_ = builderForValue.build();
          onChanged();
        } else {
          clusterSpecBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Required field. This field indicates ray cluster configuration
       * </pre>
       *
       * <code>.flyteidl.core.ClusterSpec cluster_spec = 1;</code>
       */
      public Builder mergeClusterSpec(flyteidl.core.Ray.ClusterSpec value) {
        if (clusterSpecBuilder_ == null) {
          if (clusterSpec_ != null) {
            clusterSpec_ =
              flyteidl.core.Ray.ClusterSpec.newBuilder(clusterSpec_).mergeFrom(value).buildPartial();
          } else {
            clusterSpec_ = value;
          }
          onChanged();
        } else {
          clusterSpecBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Required field. This field indicates ray cluster configuration
       * </pre>
       *
       * <code>.flyteidl.core.ClusterSpec cluster_spec = 1;</code>
       */
      public Builder clearClusterSpec() {
        if (clusterSpecBuilder_ == null) {
          clusterSpec_ = null;
          onChanged();
        } else {
          clusterSpec_ = null;
          clusterSpecBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Required field. This field indicates ray cluster configuration
       * </pre>
       *
       * <code>.flyteidl.core.ClusterSpec cluster_spec = 1;</code>
       */
      public flyteidl.core.Ray.ClusterSpec.Builder getClusterSpecBuilder() {
        
        onChanged();
        return getClusterSpecFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Required field. This field indicates ray cluster configuration
       * </pre>
       *
       * <code>.flyteidl.core.ClusterSpec cluster_spec = 1;</code>
       */
      public flyteidl.core.Ray.ClusterSpecOrBuilder getClusterSpecOrBuilder() {
        if (clusterSpecBuilder_ != null) {
          return clusterSpecBuilder_.getMessageOrBuilder();
        } else {
          return clusterSpec_ == null ?
              flyteidl.core.Ray.ClusterSpec.getDefaultInstance() : clusterSpec_;
        }
      }
      /**
       * <pre>
       * Required field. This field indicates ray cluster configuration
       * </pre>
       *
       * <code>.flyteidl.core.ClusterSpec cluster_spec = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Ray.ClusterSpec, flyteidl.core.Ray.ClusterSpec.Builder, flyteidl.core.Ray.ClusterSpecOrBuilder> 
          getClusterSpecFieldBuilder() {
        if (clusterSpecBuilder_ == null) {
          clusterSpecBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Ray.ClusterSpec, flyteidl.core.Ray.ClusterSpec.Builder, flyteidl.core.Ray.ClusterSpecOrBuilder>(
                  getClusterSpec(),
                  getParentForChildren(),
                  isClean());
          clusterSpec_ = null;
        }
        return clusterSpecBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.RayCluster)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.RayCluster)
    private static final flyteidl.core.Ray.RayCluster DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.core.Ray.RayCluster();
    }

    public static flyteidl.core.Ray.RayCluster getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RayCluster>
        PARSER = new com.google.protobuf.AbstractParser<RayCluster>() {
      @java.lang.Override
      public RayCluster parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RayCluster(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RayCluster> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RayCluster> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.core.Ray.RayCluster getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ClusterSpecOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.ClusterSpec)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The head group configuration
     * </pre>
     *
     * <code>.flyteidl.core.HeadGroupSpec head_group_spec = 1;</code>
     */
    boolean hasHeadGroupSpec();
    /**
     * <pre>
     * The head group configuration
     * </pre>
     *
     * <code>.flyteidl.core.HeadGroupSpec head_group_spec = 1;</code>
     */
    flyteidl.core.Ray.HeadGroupSpec getHeadGroupSpec();
    /**
     * <pre>
     * The head group configuration
     * </pre>
     *
     * <code>.flyteidl.core.HeadGroupSpec head_group_spec = 1;</code>
     */
    flyteidl.core.Ray.HeadGroupSpecOrBuilder getHeadGroupSpecOrBuilder();

    /**
     * <pre>
     * The worker group configurations
     * </pre>
     *
     * <code>repeated .flyteidl.core.WorkerGroupSpec worker_group_spec = 2;</code>
     */
    java.util.List<flyteidl.core.Ray.WorkerGroupSpec> 
        getWorkerGroupSpecList();
    /**
     * <pre>
     * The worker group configurations
     * </pre>
     *
     * <code>repeated .flyteidl.core.WorkerGroupSpec worker_group_spec = 2;</code>
     */
    flyteidl.core.Ray.WorkerGroupSpec getWorkerGroupSpec(int index);
    /**
     * <pre>
     * The worker group configurations
     * </pre>
     *
     * <code>repeated .flyteidl.core.WorkerGroupSpec worker_group_spec = 2;</code>
     */
    int getWorkerGroupSpecCount();
    /**
     * <pre>
     * The worker group configurations
     * </pre>
     *
     * <code>repeated .flyteidl.core.WorkerGroupSpec worker_group_spec = 2;</code>
     */
    java.util.List<? extends flyteidl.core.Ray.WorkerGroupSpecOrBuilder> 
        getWorkerGroupSpecOrBuilderList();
    /**
     * <pre>
     * The worker group configurations
     * </pre>
     *
     * <code>repeated .flyteidl.core.WorkerGroupSpec worker_group_spec = 2;</code>
     */
    flyteidl.core.Ray.WorkerGroupSpecOrBuilder getWorkerGroupSpecOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code flyteidl.core.ClusterSpec}
   */
  public  static final class ClusterSpec extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.ClusterSpec)
      ClusterSpecOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ClusterSpec.newBuilder() to construct.
    private ClusterSpec(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ClusterSpec() {
      workerGroupSpec_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ClusterSpec(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              flyteidl.core.Ray.HeadGroupSpec.Builder subBuilder = null;
              if (headGroupSpec_ != null) {
                subBuilder = headGroupSpec_.toBuilder();
              }
              headGroupSpec_ = input.readMessage(flyteidl.core.Ray.HeadGroupSpec.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(headGroupSpec_);
                headGroupSpec_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                workerGroupSpec_ = new java.util.ArrayList<flyteidl.core.Ray.WorkerGroupSpec>();
                mutable_bitField0_ |= 0x00000002;
              }
              workerGroupSpec_.add(
                  input.readMessage(flyteidl.core.Ray.WorkerGroupSpec.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          workerGroupSpec_ = java.util.Collections.unmodifiableList(workerGroupSpec_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.core.Ray.internal_static_flyteidl_core_ClusterSpec_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.core.Ray.internal_static_flyteidl_core_ClusterSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.core.Ray.ClusterSpec.class, flyteidl.core.Ray.ClusterSpec.Builder.class);
    }

    private int bitField0_;
    public static final int HEAD_GROUP_SPEC_FIELD_NUMBER = 1;
    private flyteidl.core.Ray.HeadGroupSpec headGroupSpec_;
    /**
     * <pre>
     * The head group configuration
     * </pre>
     *
     * <code>.flyteidl.core.HeadGroupSpec head_group_spec = 1;</code>
     */
    public boolean hasHeadGroupSpec() {
      return headGroupSpec_ != null;
    }
    /**
     * <pre>
     * The head group configuration
     * </pre>
     *
     * <code>.flyteidl.core.HeadGroupSpec head_group_spec = 1;</code>
     */
    public flyteidl.core.Ray.HeadGroupSpec getHeadGroupSpec() {
      return headGroupSpec_ == null ? flyteidl.core.Ray.HeadGroupSpec.getDefaultInstance() : headGroupSpec_;
    }
    /**
     * <pre>
     * The head group configuration
     * </pre>
     *
     * <code>.flyteidl.core.HeadGroupSpec head_group_spec = 1;</code>
     */
    public flyteidl.core.Ray.HeadGroupSpecOrBuilder getHeadGroupSpecOrBuilder() {
      return getHeadGroupSpec();
    }

    public static final int WORKER_GROUP_SPEC_FIELD_NUMBER = 2;
    private java.util.List<flyteidl.core.Ray.WorkerGroupSpec> workerGroupSpec_;
    /**
     * <pre>
     * The worker group configurations
     * </pre>
     *
     * <code>repeated .flyteidl.core.WorkerGroupSpec worker_group_spec = 2;</code>
     */
    public java.util.List<flyteidl.core.Ray.WorkerGroupSpec> getWorkerGroupSpecList() {
      return workerGroupSpec_;
    }
    /**
     * <pre>
     * The worker group configurations
     * </pre>
     *
     * <code>repeated .flyteidl.core.WorkerGroupSpec worker_group_spec = 2;</code>
     */
    public java.util.List<? extends flyteidl.core.Ray.WorkerGroupSpecOrBuilder> 
        getWorkerGroupSpecOrBuilderList() {
      return workerGroupSpec_;
    }
    /**
     * <pre>
     * The worker group configurations
     * </pre>
     *
     * <code>repeated .flyteidl.core.WorkerGroupSpec worker_group_spec = 2;</code>
     */
    public int getWorkerGroupSpecCount() {
      return workerGroupSpec_.size();
    }
    /**
     * <pre>
     * The worker group configurations
     * </pre>
     *
     * <code>repeated .flyteidl.core.WorkerGroupSpec worker_group_spec = 2;</code>
     */
    public flyteidl.core.Ray.WorkerGroupSpec getWorkerGroupSpec(int index) {
      return workerGroupSpec_.get(index);
    }
    /**
     * <pre>
     * The worker group configurations
     * </pre>
     *
     * <code>repeated .flyteidl.core.WorkerGroupSpec worker_group_spec = 2;</code>
     */
    public flyteidl.core.Ray.WorkerGroupSpecOrBuilder getWorkerGroupSpecOrBuilder(
        int index) {
      return workerGroupSpec_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (headGroupSpec_ != null) {
        output.writeMessage(1, getHeadGroupSpec());
      }
      for (int i = 0; i < workerGroupSpec_.size(); i++) {
        output.writeMessage(2, workerGroupSpec_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (headGroupSpec_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHeadGroupSpec());
      }
      for (int i = 0; i < workerGroupSpec_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, workerGroupSpec_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.core.Ray.ClusterSpec)) {
        return super.equals(obj);
      }
      flyteidl.core.Ray.ClusterSpec other = (flyteidl.core.Ray.ClusterSpec) obj;

      if (hasHeadGroupSpec() != other.hasHeadGroupSpec()) return false;
      if (hasHeadGroupSpec()) {
        if (!getHeadGroupSpec()
            .equals(other.getHeadGroupSpec())) return false;
      }
      if (!getWorkerGroupSpecList()
          .equals(other.getWorkerGroupSpecList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasHeadGroupSpec()) {
        hash = (37 * hash) + HEAD_GROUP_SPEC_FIELD_NUMBER;
        hash = (53 * hash) + getHeadGroupSpec().hashCode();
      }
      if (getWorkerGroupSpecCount() > 0) {
        hash = (37 * hash) + WORKER_GROUP_SPEC_FIELD_NUMBER;
        hash = (53 * hash) + getWorkerGroupSpecList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.core.Ray.ClusterSpec parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Ray.ClusterSpec parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Ray.ClusterSpec parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Ray.ClusterSpec parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Ray.ClusterSpec parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Ray.ClusterSpec parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Ray.ClusterSpec parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Ray.ClusterSpec parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Ray.ClusterSpec parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.core.Ray.ClusterSpec parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Ray.ClusterSpec parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Ray.ClusterSpec parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.core.Ray.ClusterSpec prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code flyteidl.core.ClusterSpec}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.ClusterSpec)
        flyteidl.core.Ray.ClusterSpecOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.core.Ray.internal_static_flyteidl_core_ClusterSpec_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.core.Ray.internal_static_flyteidl_core_ClusterSpec_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.core.Ray.ClusterSpec.class, flyteidl.core.Ray.ClusterSpec.Builder.class);
      }

      // Construct using flyteidl.core.Ray.ClusterSpec.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getWorkerGroupSpecFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (headGroupSpecBuilder_ == null) {
          headGroupSpec_ = null;
        } else {
          headGroupSpec_ = null;
          headGroupSpecBuilder_ = null;
        }
        if (workerGroupSpecBuilder_ == null) {
          workerGroupSpec_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          workerGroupSpecBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.core.Ray.internal_static_flyteidl_core_ClusterSpec_descriptor;
      }

      @java.lang.Override
      public flyteidl.core.Ray.ClusterSpec getDefaultInstanceForType() {
        return flyteidl.core.Ray.ClusterSpec.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.core.Ray.ClusterSpec build() {
        flyteidl.core.Ray.ClusterSpec result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.core.Ray.ClusterSpec buildPartial() {
        flyteidl.core.Ray.ClusterSpec result = new flyteidl.core.Ray.ClusterSpec(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (headGroupSpecBuilder_ == null) {
          result.headGroupSpec_ = headGroupSpec_;
        } else {
          result.headGroupSpec_ = headGroupSpecBuilder_.build();
        }
        if (workerGroupSpecBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            workerGroupSpec_ = java.util.Collections.unmodifiableList(workerGroupSpec_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.workerGroupSpec_ = workerGroupSpec_;
        } else {
          result.workerGroupSpec_ = workerGroupSpecBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.core.Ray.ClusterSpec) {
          return mergeFrom((flyteidl.core.Ray.ClusterSpec)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.core.Ray.ClusterSpec other) {
        if (other == flyteidl.core.Ray.ClusterSpec.getDefaultInstance()) return this;
        if (other.hasHeadGroupSpec()) {
          mergeHeadGroupSpec(other.getHeadGroupSpec());
        }
        if (workerGroupSpecBuilder_ == null) {
          if (!other.workerGroupSpec_.isEmpty()) {
            if (workerGroupSpec_.isEmpty()) {
              workerGroupSpec_ = other.workerGroupSpec_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureWorkerGroupSpecIsMutable();
              workerGroupSpec_.addAll(other.workerGroupSpec_);
            }
            onChanged();
          }
        } else {
          if (!other.workerGroupSpec_.isEmpty()) {
            if (workerGroupSpecBuilder_.isEmpty()) {
              workerGroupSpecBuilder_.dispose();
              workerGroupSpecBuilder_ = null;
              workerGroupSpec_ = other.workerGroupSpec_;
              bitField0_ = (bitField0_ & ~0x00000002);
              workerGroupSpecBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getWorkerGroupSpecFieldBuilder() : null;
            } else {
              workerGroupSpecBuilder_.addAllMessages(other.workerGroupSpec_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.core.Ray.ClusterSpec parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.core.Ray.ClusterSpec) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private flyteidl.core.Ray.HeadGroupSpec headGroupSpec_;
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Ray.HeadGroupSpec, flyteidl.core.Ray.HeadGroupSpec.Builder, flyteidl.core.Ray.HeadGroupSpecOrBuilder> headGroupSpecBuilder_;
      /**
       * <pre>
       * The head group configuration
       * </pre>
       *
       * <code>.flyteidl.core.HeadGroupSpec head_group_spec = 1;</code>
       */
      public boolean hasHeadGroupSpec() {
        return headGroupSpecBuilder_ != null || headGroupSpec_ != null;
      }
      /**
       * <pre>
       * The head group configuration
       * </pre>
       *
       * <code>.flyteidl.core.HeadGroupSpec head_group_spec = 1;</code>
       */
      public flyteidl.core.Ray.HeadGroupSpec getHeadGroupSpec() {
        if (headGroupSpecBuilder_ == null) {
          return headGroupSpec_ == null ? flyteidl.core.Ray.HeadGroupSpec.getDefaultInstance() : headGroupSpec_;
        } else {
          return headGroupSpecBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The head group configuration
       * </pre>
       *
       * <code>.flyteidl.core.HeadGroupSpec head_group_spec = 1;</code>
       */
      public Builder setHeadGroupSpec(flyteidl.core.Ray.HeadGroupSpec value) {
        if (headGroupSpecBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          headGroupSpec_ = value;
          onChanged();
        } else {
          headGroupSpecBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The head group configuration
       * </pre>
       *
       * <code>.flyteidl.core.HeadGroupSpec head_group_spec = 1;</code>
       */
      public Builder setHeadGroupSpec(
          flyteidl.core.Ray.HeadGroupSpec.Builder builderForValue) {
        if (headGroupSpecBuilder_ == null) {
          headGroupSpec_ = builderForValue.build();
          onChanged();
        } else {
          headGroupSpecBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The head group configuration
       * </pre>
       *
       * <code>.flyteidl.core.HeadGroupSpec head_group_spec = 1;</code>
       */
      public Builder mergeHeadGroupSpec(flyteidl.core.Ray.HeadGroupSpec value) {
        if (headGroupSpecBuilder_ == null) {
          if (headGroupSpec_ != null) {
            headGroupSpec_ =
              flyteidl.core.Ray.HeadGroupSpec.newBuilder(headGroupSpec_).mergeFrom(value).buildPartial();
          } else {
            headGroupSpec_ = value;
          }
          onChanged();
        } else {
          headGroupSpecBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The head group configuration
       * </pre>
       *
       * <code>.flyteidl.core.HeadGroupSpec head_group_spec = 1;</code>
       */
      public Builder clearHeadGroupSpec() {
        if (headGroupSpecBuilder_ == null) {
          headGroupSpec_ = null;
          onChanged();
        } else {
          headGroupSpec_ = null;
          headGroupSpecBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The head group configuration
       * </pre>
       *
       * <code>.flyteidl.core.HeadGroupSpec head_group_spec = 1;</code>
       */
      public flyteidl.core.Ray.HeadGroupSpec.Builder getHeadGroupSpecBuilder() {
        
        onChanged();
        return getHeadGroupSpecFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The head group configuration
       * </pre>
       *
       * <code>.flyteidl.core.HeadGroupSpec head_group_spec = 1;</code>
       */
      public flyteidl.core.Ray.HeadGroupSpecOrBuilder getHeadGroupSpecOrBuilder() {
        if (headGroupSpecBuilder_ != null) {
          return headGroupSpecBuilder_.getMessageOrBuilder();
        } else {
          return headGroupSpec_ == null ?
              flyteidl.core.Ray.HeadGroupSpec.getDefaultInstance() : headGroupSpec_;
        }
      }
      /**
       * <pre>
       * The head group configuration
       * </pre>
       *
       * <code>.flyteidl.core.HeadGroupSpec head_group_spec = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Ray.HeadGroupSpec, flyteidl.core.Ray.HeadGroupSpec.Builder, flyteidl.core.Ray.HeadGroupSpecOrBuilder> 
          getHeadGroupSpecFieldBuilder() {
        if (headGroupSpecBuilder_ == null) {
          headGroupSpecBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Ray.HeadGroupSpec, flyteidl.core.Ray.HeadGroupSpec.Builder, flyteidl.core.Ray.HeadGroupSpecOrBuilder>(
                  getHeadGroupSpec(),
                  getParentForChildren(),
                  isClean());
          headGroupSpec_ = null;
        }
        return headGroupSpecBuilder_;
      }

      private java.util.List<flyteidl.core.Ray.WorkerGroupSpec> workerGroupSpec_ =
        java.util.Collections.emptyList();
      private void ensureWorkerGroupSpecIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          workerGroupSpec_ = new java.util.ArrayList<flyteidl.core.Ray.WorkerGroupSpec>(workerGroupSpec_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          flyteidl.core.Ray.WorkerGroupSpec, flyteidl.core.Ray.WorkerGroupSpec.Builder, flyteidl.core.Ray.WorkerGroupSpecOrBuilder> workerGroupSpecBuilder_;

      /**
       * <pre>
       * The worker group configurations
       * </pre>
       *
       * <code>repeated .flyteidl.core.WorkerGroupSpec worker_group_spec = 2;</code>
       */
      public java.util.List<flyteidl.core.Ray.WorkerGroupSpec> getWorkerGroupSpecList() {
        if (workerGroupSpecBuilder_ == null) {
          return java.util.Collections.unmodifiableList(workerGroupSpec_);
        } else {
          return workerGroupSpecBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The worker group configurations
       * </pre>
       *
       * <code>repeated .flyteidl.core.WorkerGroupSpec worker_group_spec = 2;</code>
       */
      public int getWorkerGroupSpecCount() {
        if (workerGroupSpecBuilder_ == null) {
          return workerGroupSpec_.size();
        } else {
          return workerGroupSpecBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The worker group configurations
       * </pre>
       *
       * <code>repeated .flyteidl.core.WorkerGroupSpec worker_group_spec = 2;</code>
       */
      public flyteidl.core.Ray.WorkerGroupSpec getWorkerGroupSpec(int index) {
        if (workerGroupSpecBuilder_ == null) {
          return workerGroupSpec_.get(index);
        } else {
          return workerGroupSpecBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The worker group configurations
       * </pre>
       *
       * <code>repeated .flyteidl.core.WorkerGroupSpec worker_group_spec = 2;</code>
       */
      public Builder setWorkerGroupSpec(
          int index, flyteidl.core.Ray.WorkerGroupSpec value) {
        if (workerGroupSpecBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureWorkerGroupSpecIsMutable();
          workerGroupSpec_.set(index, value);
          onChanged();
        } else {
          workerGroupSpecBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The worker group configurations
       * </pre>
       *
       * <code>repeated .flyteidl.core.WorkerGroupSpec worker_group_spec = 2;</code>
       */
      public Builder setWorkerGroupSpec(
          int index, flyteidl.core.Ray.WorkerGroupSpec.Builder builderForValue) {
        if (workerGroupSpecBuilder_ == null) {
          ensureWorkerGroupSpecIsMutable();
          workerGroupSpec_.set(index, builderForValue.build());
          onChanged();
        } else {
          workerGroupSpecBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The worker group configurations
       * </pre>
       *
       * <code>repeated .flyteidl.core.WorkerGroupSpec worker_group_spec = 2;</code>
       */
      public Builder addWorkerGroupSpec(flyteidl.core.Ray.WorkerGroupSpec value) {
        if (workerGroupSpecBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureWorkerGroupSpecIsMutable();
          workerGroupSpec_.add(value);
          onChanged();
        } else {
          workerGroupSpecBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The worker group configurations
       * </pre>
       *
       * <code>repeated .flyteidl.core.WorkerGroupSpec worker_group_spec = 2;</code>
       */
      public Builder addWorkerGroupSpec(
          int index, flyteidl.core.Ray.WorkerGroupSpec value) {
        if (workerGroupSpecBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureWorkerGroupSpecIsMutable();
          workerGroupSpec_.add(index, value);
          onChanged();
        } else {
          workerGroupSpecBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The worker group configurations
       * </pre>
       *
       * <code>repeated .flyteidl.core.WorkerGroupSpec worker_group_spec = 2;</code>
       */
      public Builder addWorkerGroupSpec(
          flyteidl.core.Ray.WorkerGroupSpec.Builder builderForValue) {
        if (workerGroupSpecBuilder_ == null) {
          ensureWorkerGroupSpecIsMutable();
          workerGroupSpec_.add(builderForValue.build());
          onChanged();
        } else {
          workerGroupSpecBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The worker group configurations
       * </pre>
       *
       * <code>repeated .flyteidl.core.WorkerGroupSpec worker_group_spec = 2;</code>
       */
      public Builder addWorkerGroupSpec(
          int index, flyteidl.core.Ray.WorkerGroupSpec.Builder builderForValue) {
        if (workerGroupSpecBuilder_ == null) {
          ensureWorkerGroupSpecIsMutable();
          workerGroupSpec_.add(index, builderForValue.build());
          onChanged();
        } else {
          workerGroupSpecBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The worker group configurations
       * </pre>
       *
       * <code>repeated .flyteidl.core.WorkerGroupSpec worker_group_spec = 2;</code>
       */
      public Builder addAllWorkerGroupSpec(
          java.lang.Iterable<? extends flyteidl.core.Ray.WorkerGroupSpec> values) {
        if (workerGroupSpecBuilder_ == null) {
          ensureWorkerGroupSpecIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, workerGroupSpec_);
          onChanged();
        } else {
          workerGroupSpecBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The worker group configurations
       * </pre>
       *
       * <code>repeated .flyteidl.core.WorkerGroupSpec worker_group_spec = 2;</code>
       */
      public Builder clearWorkerGroupSpec() {
        if (workerGroupSpecBuilder_ == null) {
          workerGroupSpec_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          workerGroupSpecBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The worker group configurations
       * </pre>
       *
       * <code>repeated .flyteidl.core.WorkerGroupSpec worker_group_spec = 2;</code>
       */
      public Builder removeWorkerGroupSpec(int index) {
        if (workerGroupSpecBuilder_ == null) {
          ensureWorkerGroupSpecIsMutable();
          workerGroupSpec_.remove(index);
          onChanged();
        } else {
          workerGroupSpecBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The worker group configurations
       * </pre>
       *
       * <code>repeated .flyteidl.core.WorkerGroupSpec worker_group_spec = 2;</code>
       */
      public flyteidl.core.Ray.WorkerGroupSpec.Builder getWorkerGroupSpecBuilder(
          int index) {
        return getWorkerGroupSpecFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The worker group configurations
       * </pre>
       *
       * <code>repeated .flyteidl.core.WorkerGroupSpec worker_group_spec = 2;</code>
       */
      public flyteidl.core.Ray.WorkerGroupSpecOrBuilder getWorkerGroupSpecOrBuilder(
          int index) {
        if (workerGroupSpecBuilder_ == null) {
          return workerGroupSpec_.get(index);  } else {
          return workerGroupSpecBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The worker group configurations
       * </pre>
       *
       * <code>repeated .flyteidl.core.WorkerGroupSpec worker_group_spec = 2;</code>
       */
      public java.util.List<? extends flyteidl.core.Ray.WorkerGroupSpecOrBuilder> 
           getWorkerGroupSpecOrBuilderList() {
        if (workerGroupSpecBuilder_ != null) {
          return workerGroupSpecBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(workerGroupSpec_);
        }
      }
      /**
       * <pre>
       * The worker group configurations
       * </pre>
       *
       * <code>repeated .flyteidl.core.WorkerGroupSpec worker_group_spec = 2;</code>
       */
      public flyteidl.core.Ray.WorkerGroupSpec.Builder addWorkerGroupSpecBuilder() {
        return getWorkerGroupSpecFieldBuilder().addBuilder(
            flyteidl.core.Ray.WorkerGroupSpec.getDefaultInstance());
      }
      /**
       * <pre>
       * The worker group configurations
       * </pre>
       *
       * <code>repeated .flyteidl.core.WorkerGroupSpec worker_group_spec = 2;</code>
       */
      public flyteidl.core.Ray.WorkerGroupSpec.Builder addWorkerGroupSpecBuilder(
          int index) {
        return getWorkerGroupSpecFieldBuilder().addBuilder(
            index, flyteidl.core.Ray.WorkerGroupSpec.getDefaultInstance());
      }
      /**
       * <pre>
       * The worker group configurations
       * </pre>
       *
       * <code>repeated .flyteidl.core.WorkerGroupSpec worker_group_spec = 2;</code>
       */
      public java.util.List<flyteidl.core.Ray.WorkerGroupSpec.Builder> 
           getWorkerGroupSpecBuilderList() {
        return getWorkerGroupSpecFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          flyteidl.core.Ray.WorkerGroupSpec, flyteidl.core.Ray.WorkerGroupSpec.Builder, flyteidl.core.Ray.WorkerGroupSpecOrBuilder> 
          getWorkerGroupSpecFieldBuilder() {
        if (workerGroupSpecBuilder_ == null) {
          workerGroupSpecBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              flyteidl.core.Ray.WorkerGroupSpec, flyteidl.core.Ray.WorkerGroupSpec.Builder, flyteidl.core.Ray.WorkerGroupSpecOrBuilder>(
                  workerGroupSpec_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          workerGroupSpec_ = null;
        }
        return workerGroupSpecBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.ClusterSpec)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.ClusterSpec)
    private static final flyteidl.core.Ray.ClusterSpec DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.core.Ray.ClusterSpec();
    }

    public static flyteidl.core.Ray.ClusterSpec getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ClusterSpec>
        PARSER = new com.google.protobuf.AbstractParser<ClusterSpec>() {
      @java.lang.Override
      public ClusterSpec parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ClusterSpec(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ClusterSpec> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ClusterSpec> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.core.Ray.ClusterSpec getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface HeadGroupSpecOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.HeadGroupSpec)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Optional. The ray start params of head node group
     * </pre>
     *
     * <code>map&lt;string, string&gt; ray_start_params = 1;</code>
     */
    int getRayStartParamsCount();
    /**
     * <pre>
     * Optional. The ray start params of head node group
     * </pre>
     *
     * <code>map&lt;string, string&gt; ray_start_params = 1;</code>
     */
    boolean containsRayStartParams(
        java.lang.String key);
    /**
     * Use {@link #getRayStartParamsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getRayStartParams();
    /**
     * <pre>
     * Optional. The ray start params of head node group
     * </pre>
     *
     * <code>map&lt;string, string&gt; ray_start_params = 1;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getRayStartParamsMap();
    /**
     * <pre>
     * Optional. The ray start params of head node group
     * </pre>
     *
     * <code>map&lt;string, string&gt; ray_start_params = 1;</code>
     */

    java.lang.String getRayStartParamsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <pre>
     * Optional. The ray start params of head node group
     * </pre>
     *
     * <code>map&lt;string, string&gt; ray_start_params = 1;</code>
     */

    java.lang.String getRayStartParamsOrThrow(
        java.lang.String key);
  }
  /**
   * Protobuf type {@code flyteidl.core.HeadGroupSpec}
   */
  public  static final class HeadGroupSpec extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.HeadGroupSpec)
      HeadGroupSpecOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use HeadGroupSpec.newBuilder() to construct.
    private HeadGroupSpec(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private HeadGroupSpec() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private HeadGroupSpec(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                rayStartParams_ = com.google.protobuf.MapField.newMapField(
                    RayStartParamsDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              rayStartParams__ = input.readMessage(
                  RayStartParamsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              rayStartParams_.getMutableMap().put(
                  rayStartParams__.getKey(), rayStartParams__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.core.Ray.internal_static_flyteidl_core_HeadGroupSpec_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetRayStartParams();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.core.Ray.internal_static_flyteidl_core_HeadGroupSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.core.Ray.HeadGroupSpec.class, flyteidl.core.Ray.HeadGroupSpec.Builder.class);
    }

    public static final int RAY_START_PARAMS_FIELD_NUMBER = 1;
    private static final class RayStartParamsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  flyteidl.core.Ray.internal_static_flyteidl_core_HeadGroupSpec_RayStartParamsEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> rayStartParams_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetRayStartParams() {
      if (rayStartParams_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            RayStartParamsDefaultEntryHolder.defaultEntry);
      }
      return rayStartParams_;
    }

    public int getRayStartParamsCount() {
      return internalGetRayStartParams().getMap().size();
    }
    /**
     * <pre>
     * Optional. The ray start params of head node group
     * </pre>
     *
     * <code>map&lt;string, string&gt; ray_start_params = 1;</code>
     */

    public boolean containsRayStartParams(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetRayStartParams().getMap().containsKey(key);
    }
    /**
     * Use {@link #getRayStartParamsMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getRayStartParams() {
      return getRayStartParamsMap();
    }
    /**
     * <pre>
     * Optional. The ray start params of head node group
     * </pre>
     *
     * <code>map&lt;string, string&gt; ray_start_params = 1;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getRayStartParamsMap() {
      return internalGetRayStartParams().getMap();
    }
    /**
     * <pre>
     * Optional. The ray start params of head node group
     * </pre>
     *
     * <code>map&lt;string, string&gt; ray_start_params = 1;</code>
     */

    public java.lang.String getRayStartParamsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetRayStartParams().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Optional. The ray start params of head node group
     * </pre>
     *
     * <code>map&lt;string, string&gt; ray_start_params = 1;</code>
     */

    public java.lang.String getRayStartParamsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetRayStartParams().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetRayStartParams(),
          RayStartParamsDefaultEntryHolder.defaultEntry,
          1);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetRayStartParams().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        rayStartParams__ = RayStartParamsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, rayStartParams__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.core.Ray.HeadGroupSpec)) {
        return super.equals(obj);
      }
      flyteidl.core.Ray.HeadGroupSpec other = (flyteidl.core.Ray.HeadGroupSpec) obj;

      if (!internalGetRayStartParams().equals(
          other.internalGetRayStartParams())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (!internalGetRayStartParams().getMap().isEmpty()) {
        hash = (37 * hash) + RAY_START_PARAMS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetRayStartParams().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.core.Ray.HeadGroupSpec parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Ray.HeadGroupSpec parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Ray.HeadGroupSpec parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Ray.HeadGroupSpec parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Ray.HeadGroupSpec parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Ray.HeadGroupSpec parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Ray.HeadGroupSpec parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Ray.HeadGroupSpec parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Ray.HeadGroupSpec parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.core.Ray.HeadGroupSpec parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Ray.HeadGroupSpec parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Ray.HeadGroupSpec parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.core.Ray.HeadGroupSpec prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code flyteidl.core.HeadGroupSpec}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.HeadGroupSpec)
        flyteidl.core.Ray.HeadGroupSpecOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.core.Ray.internal_static_flyteidl_core_HeadGroupSpec_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetRayStartParams();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetMutableRayStartParams();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.core.Ray.internal_static_flyteidl_core_HeadGroupSpec_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.core.Ray.HeadGroupSpec.class, flyteidl.core.Ray.HeadGroupSpec.Builder.class);
      }

      // Construct using flyteidl.core.Ray.HeadGroupSpec.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        internalGetMutableRayStartParams().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.core.Ray.internal_static_flyteidl_core_HeadGroupSpec_descriptor;
      }

      @java.lang.Override
      public flyteidl.core.Ray.HeadGroupSpec getDefaultInstanceForType() {
        return flyteidl.core.Ray.HeadGroupSpec.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.core.Ray.HeadGroupSpec build() {
        flyteidl.core.Ray.HeadGroupSpec result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.core.Ray.HeadGroupSpec buildPartial() {
        flyteidl.core.Ray.HeadGroupSpec result = new flyteidl.core.Ray.HeadGroupSpec(this);
        int from_bitField0_ = bitField0_;
        result.rayStartParams_ = internalGetRayStartParams();
        result.rayStartParams_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.core.Ray.HeadGroupSpec) {
          return mergeFrom((flyteidl.core.Ray.HeadGroupSpec)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.core.Ray.HeadGroupSpec other) {
        if (other == flyteidl.core.Ray.HeadGroupSpec.getDefaultInstance()) return this;
        internalGetMutableRayStartParams().mergeFrom(
            other.internalGetRayStartParams());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.core.Ray.HeadGroupSpec parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.core.Ray.HeadGroupSpec) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> rayStartParams_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetRayStartParams() {
        if (rayStartParams_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              RayStartParamsDefaultEntryHolder.defaultEntry);
        }
        return rayStartParams_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableRayStartParams() {
        onChanged();;
        if (rayStartParams_ == null) {
          rayStartParams_ = com.google.protobuf.MapField.newMapField(
              RayStartParamsDefaultEntryHolder.defaultEntry);
        }
        if (!rayStartParams_.isMutable()) {
          rayStartParams_ = rayStartParams_.copy();
        }
        return rayStartParams_;
      }

      public int getRayStartParamsCount() {
        return internalGetRayStartParams().getMap().size();
      }
      /**
       * <pre>
       * Optional. The ray start params of head node group
       * </pre>
       *
       * <code>map&lt;string, string&gt; ray_start_params = 1;</code>
       */

      public boolean containsRayStartParams(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetRayStartParams().getMap().containsKey(key);
      }
      /**
       * Use {@link #getRayStartParamsMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getRayStartParams() {
        return getRayStartParamsMap();
      }
      /**
       * <pre>
       * Optional. The ray start params of head node group
       * </pre>
       *
       * <code>map&lt;string, string&gt; ray_start_params = 1;</code>
       */

      public java.util.Map<java.lang.String, java.lang.String> getRayStartParamsMap() {
        return internalGetRayStartParams().getMap();
      }
      /**
       * <pre>
       * Optional. The ray start params of head node group
       * </pre>
       *
       * <code>map&lt;string, string&gt; ray_start_params = 1;</code>
       */

      public java.lang.String getRayStartParamsOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetRayStartParams().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * Optional. The ray start params of head node group
       * </pre>
       *
       * <code>map&lt;string, string&gt; ray_start_params = 1;</code>
       */

      public java.lang.String getRayStartParamsOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetRayStartParams().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearRayStartParams() {
        internalGetMutableRayStartParams().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * Optional. The ray start params of head node group
       * </pre>
       *
       * <code>map&lt;string, string&gt; ray_start_params = 1;</code>
       */

      public Builder removeRayStartParams(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableRayStartParams().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableRayStartParams() {
        return internalGetMutableRayStartParams().getMutableMap();
      }
      /**
       * <pre>
       * Optional. The ray start params of head node group
       * </pre>
       *
       * <code>map&lt;string, string&gt; ray_start_params = 1;</code>
       */
      public Builder putRayStartParams(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableRayStartParams().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * Optional. The ray start params of head node group
       * </pre>
       *
       * <code>map&lt;string, string&gt; ray_start_params = 1;</code>
       */

      public Builder putAllRayStartParams(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableRayStartParams().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.HeadGroupSpec)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.HeadGroupSpec)
    private static final flyteidl.core.Ray.HeadGroupSpec DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.core.Ray.HeadGroupSpec();
    }

    public static flyteidl.core.Ray.HeadGroupSpec getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<HeadGroupSpec>
        PARSER = new com.google.protobuf.AbstractParser<HeadGroupSpec>() {
      @java.lang.Override
      public HeadGroupSpec parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new HeadGroupSpec(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<HeadGroupSpec> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<HeadGroupSpec> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.core.Ray.HeadGroupSpec getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface WorkerGroupSpecOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.WorkerGroupSpec)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Required. Group name of the current worker group
     * </pre>
     *
     * <code>string group_name = 1;</code>
     */
    java.lang.String getGroupName();
    /**
     * <pre>
     * Required. Group name of the current worker group
     * </pre>
     *
     * <code>string group_name = 1;</code>
     */
    com.google.protobuf.ByteString
        getGroupNameBytes();

    /**
     * <pre>
     * Required. Desired replicas of the worker group
     * </pre>
     *
     * <code>int32 replicas = 2;</code>
     */
    int getReplicas();

    /**
     * <pre>
     * Optional. Min replicas of the worker group
     * </pre>
     *
     * <code>int32 min_replicas = 3;</code>
     */
    int getMinReplicas();

    /**
     * <pre>
     * Optional. Max replicas of the worker group
     * </pre>
     *
     * <code>int32 max_replicas = 4;</code>
     */
    int getMaxReplicas();

    /**
     * <pre>
     * Optional. The ray start params of worker node group
     * </pre>
     *
     * <code>map&lt;string, string&gt; ray_start_params = 5;</code>
     */
    int getRayStartParamsCount();
    /**
     * <pre>
     * Optional. The ray start params of worker node group
     * </pre>
     *
     * <code>map&lt;string, string&gt; ray_start_params = 5;</code>
     */
    boolean containsRayStartParams(
        java.lang.String key);
    /**
     * Use {@link #getRayStartParamsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getRayStartParams();
    /**
     * <pre>
     * Optional. The ray start params of worker node group
     * </pre>
     *
     * <code>map&lt;string, string&gt; ray_start_params = 5;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getRayStartParamsMap();
    /**
     * <pre>
     * Optional. The ray start params of worker node group
     * </pre>
     *
     * <code>map&lt;string, string&gt; ray_start_params = 5;</code>
     */

    java.lang.String getRayStartParamsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <pre>
     * Optional. The ray start params of worker node group
     * </pre>
     *
     * <code>map&lt;string, string&gt; ray_start_params = 5;</code>
     */

    java.lang.String getRayStartParamsOrThrow(
        java.lang.String key);
  }
  /**
   * Protobuf type {@code flyteidl.core.WorkerGroupSpec}
   */
  public  static final class WorkerGroupSpec extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.WorkerGroupSpec)
      WorkerGroupSpecOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use WorkerGroupSpec.newBuilder() to construct.
    private WorkerGroupSpec(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private WorkerGroupSpec() {
      groupName_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private WorkerGroupSpec(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              groupName_ = s;
              break;
            }
            case 16: {

              replicas_ = input.readInt32();
              break;
            }
            case 24: {

              minReplicas_ = input.readInt32();
              break;
            }
            case 32: {

              maxReplicas_ = input.readInt32();
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) != 0)) {
                rayStartParams_ = com.google.protobuf.MapField.newMapField(
                    RayStartParamsDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000010;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              rayStartParams__ = input.readMessage(
                  RayStartParamsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              rayStartParams_.getMutableMap().put(
                  rayStartParams__.getKey(), rayStartParams__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.core.Ray.internal_static_flyteidl_core_WorkerGroupSpec_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 5:
          return internalGetRayStartParams();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.core.Ray.internal_static_flyteidl_core_WorkerGroupSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.core.Ray.WorkerGroupSpec.class, flyteidl.core.Ray.WorkerGroupSpec.Builder.class);
    }

    private int bitField0_;
    public static final int GROUP_NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object groupName_;
    /**
     * <pre>
     * Required. Group name of the current worker group
     * </pre>
     *
     * <code>string group_name = 1;</code>
     */
    public java.lang.String getGroupName() {
      java.lang.Object ref = groupName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        groupName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Required. Group name of the current worker group
     * </pre>
     *
     * <code>string group_name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getGroupNameBytes() {
      java.lang.Object ref = groupName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        groupName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int REPLICAS_FIELD_NUMBER = 2;
    private int replicas_;
    /**
     * <pre>
     * Required. Desired replicas of the worker group
     * </pre>
     *
     * <code>int32 replicas = 2;</code>
     */
    public int getReplicas() {
      return replicas_;
    }

    public static final int MIN_REPLICAS_FIELD_NUMBER = 3;
    private int minReplicas_;
    /**
     * <pre>
     * Optional. Min replicas of the worker group
     * </pre>
     *
     * <code>int32 min_replicas = 3;</code>
     */
    public int getMinReplicas() {
      return minReplicas_;
    }

    public static final int MAX_REPLICAS_FIELD_NUMBER = 4;
    private int maxReplicas_;
    /**
     * <pre>
     * Optional. Max replicas of the worker group
     * </pre>
     *
     * <code>int32 max_replicas = 4;</code>
     */
    public int getMaxReplicas() {
      return maxReplicas_;
    }

    public static final int RAY_START_PARAMS_FIELD_NUMBER = 5;
    private static final class RayStartParamsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  flyteidl.core.Ray.internal_static_flyteidl_core_WorkerGroupSpec_RayStartParamsEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> rayStartParams_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetRayStartParams() {
      if (rayStartParams_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            RayStartParamsDefaultEntryHolder.defaultEntry);
      }
      return rayStartParams_;
    }

    public int getRayStartParamsCount() {
      return internalGetRayStartParams().getMap().size();
    }
    /**
     * <pre>
     * Optional. The ray start params of worker node group
     * </pre>
     *
     * <code>map&lt;string, string&gt; ray_start_params = 5;</code>
     */

    public boolean containsRayStartParams(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetRayStartParams().getMap().containsKey(key);
    }
    /**
     * Use {@link #getRayStartParamsMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getRayStartParams() {
      return getRayStartParamsMap();
    }
    /**
     * <pre>
     * Optional. The ray start params of worker node group
     * </pre>
     *
     * <code>map&lt;string, string&gt; ray_start_params = 5;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getRayStartParamsMap() {
      return internalGetRayStartParams().getMap();
    }
    /**
     * <pre>
     * Optional. The ray start params of worker node group
     * </pre>
     *
     * <code>map&lt;string, string&gt; ray_start_params = 5;</code>
     */

    public java.lang.String getRayStartParamsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetRayStartParams().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Optional. The ray start params of worker node group
     * </pre>
     *
     * <code>map&lt;string, string&gt; ray_start_params = 5;</code>
     */

    public java.lang.String getRayStartParamsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetRayStartParams().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getGroupNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, groupName_);
      }
      if (replicas_ != 0) {
        output.writeInt32(2, replicas_);
      }
      if (minReplicas_ != 0) {
        output.writeInt32(3, minReplicas_);
      }
      if (maxReplicas_ != 0) {
        output.writeInt32(4, maxReplicas_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetRayStartParams(),
          RayStartParamsDefaultEntryHolder.defaultEntry,
          5);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getGroupNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, groupName_);
      }
      if (replicas_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, replicas_);
      }
      if (minReplicas_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, minReplicas_);
      }
      if (maxReplicas_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, maxReplicas_);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetRayStartParams().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        rayStartParams__ = RayStartParamsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, rayStartParams__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.core.Ray.WorkerGroupSpec)) {
        return super.equals(obj);
      }
      flyteidl.core.Ray.WorkerGroupSpec other = (flyteidl.core.Ray.WorkerGroupSpec) obj;

      if (!getGroupName()
          .equals(other.getGroupName())) return false;
      if (getReplicas()
          != other.getReplicas()) return false;
      if (getMinReplicas()
          != other.getMinReplicas()) return false;
      if (getMaxReplicas()
          != other.getMaxReplicas()) return false;
      if (!internalGetRayStartParams().equals(
          other.internalGetRayStartParams())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + GROUP_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getGroupName().hashCode();
      hash = (37 * hash) + REPLICAS_FIELD_NUMBER;
      hash = (53 * hash) + getReplicas();
      hash = (37 * hash) + MIN_REPLICAS_FIELD_NUMBER;
      hash = (53 * hash) + getMinReplicas();
      hash = (37 * hash) + MAX_REPLICAS_FIELD_NUMBER;
      hash = (53 * hash) + getMaxReplicas();
      if (!internalGetRayStartParams().getMap().isEmpty()) {
        hash = (37 * hash) + RAY_START_PARAMS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetRayStartParams().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.core.Ray.WorkerGroupSpec parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Ray.WorkerGroupSpec parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Ray.WorkerGroupSpec parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Ray.WorkerGroupSpec parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Ray.WorkerGroupSpec parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Ray.WorkerGroupSpec parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Ray.WorkerGroupSpec parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Ray.WorkerGroupSpec parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Ray.WorkerGroupSpec parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.core.Ray.WorkerGroupSpec parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Ray.WorkerGroupSpec parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Ray.WorkerGroupSpec parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.core.Ray.WorkerGroupSpec prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code flyteidl.core.WorkerGroupSpec}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.WorkerGroupSpec)
        flyteidl.core.Ray.WorkerGroupSpecOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.core.Ray.internal_static_flyteidl_core_WorkerGroupSpec_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 5:
            return internalGetRayStartParams();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 5:
            return internalGetMutableRayStartParams();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.core.Ray.internal_static_flyteidl_core_WorkerGroupSpec_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.core.Ray.WorkerGroupSpec.class, flyteidl.core.Ray.WorkerGroupSpec.Builder.class);
      }

      // Construct using flyteidl.core.Ray.WorkerGroupSpec.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        groupName_ = "";

        replicas_ = 0;

        minReplicas_ = 0;

        maxReplicas_ = 0;

        internalGetMutableRayStartParams().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.core.Ray.internal_static_flyteidl_core_WorkerGroupSpec_descriptor;
      }

      @java.lang.Override
      public flyteidl.core.Ray.WorkerGroupSpec getDefaultInstanceForType() {
        return flyteidl.core.Ray.WorkerGroupSpec.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.core.Ray.WorkerGroupSpec build() {
        flyteidl.core.Ray.WorkerGroupSpec result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.core.Ray.WorkerGroupSpec buildPartial() {
        flyteidl.core.Ray.WorkerGroupSpec result = new flyteidl.core.Ray.WorkerGroupSpec(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.groupName_ = groupName_;
        result.replicas_ = replicas_;
        result.minReplicas_ = minReplicas_;
        result.maxReplicas_ = maxReplicas_;
        result.rayStartParams_ = internalGetRayStartParams();
        result.rayStartParams_.makeImmutable();
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.core.Ray.WorkerGroupSpec) {
          return mergeFrom((flyteidl.core.Ray.WorkerGroupSpec)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.core.Ray.WorkerGroupSpec other) {
        if (other == flyteidl.core.Ray.WorkerGroupSpec.getDefaultInstance()) return this;
        if (!other.getGroupName().isEmpty()) {
          groupName_ = other.groupName_;
          onChanged();
        }
        if (other.getReplicas() != 0) {
          setReplicas(other.getReplicas());
        }
        if (other.getMinReplicas() != 0) {
          setMinReplicas(other.getMinReplicas());
        }
        if (other.getMaxReplicas() != 0) {
          setMaxReplicas(other.getMaxReplicas());
        }
        internalGetMutableRayStartParams().mergeFrom(
            other.internalGetRayStartParams());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.core.Ray.WorkerGroupSpec parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.core.Ray.WorkerGroupSpec) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object groupName_ = "";
      /**
       * <pre>
       * Required. Group name of the current worker group
       * </pre>
       *
       * <code>string group_name = 1;</code>
       */
      public java.lang.String getGroupName() {
        java.lang.Object ref = groupName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          groupName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Required. Group name of the current worker group
       * </pre>
       *
       * <code>string group_name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getGroupNameBytes() {
        java.lang.Object ref = groupName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          groupName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Required. Group name of the current worker group
       * </pre>
       *
       * <code>string group_name = 1;</code>
       */
      public Builder setGroupName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        groupName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Required. Group name of the current worker group
       * </pre>
       *
       * <code>string group_name = 1;</code>
       */
      public Builder clearGroupName() {
        
        groupName_ = getDefaultInstance().getGroupName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Required. Group name of the current worker group
       * </pre>
       *
       * <code>string group_name = 1;</code>
       */
      public Builder setGroupNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        groupName_ = value;
        onChanged();
        return this;
      }

      private int replicas_ ;
      /**
       * <pre>
       * Required. Desired replicas of the worker group
       * </pre>
       *
       * <code>int32 replicas = 2;</code>
       */
      public int getReplicas() {
        return replicas_;
      }
      /**
       * <pre>
       * Required. Desired replicas of the worker group
       * </pre>
       *
       * <code>int32 replicas = 2;</code>
       */
      public Builder setReplicas(int value) {
        
        replicas_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Required. Desired replicas of the worker group
       * </pre>
       *
       * <code>int32 replicas = 2;</code>
       */
      public Builder clearReplicas() {
        
        replicas_ = 0;
        onChanged();
        return this;
      }

      private int minReplicas_ ;
      /**
       * <pre>
       * Optional. Min replicas of the worker group
       * </pre>
       *
       * <code>int32 min_replicas = 3;</code>
       */
      public int getMinReplicas() {
        return minReplicas_;
      }
      /**
       * <pre>
       * Optional. Min replicas of the worker group
       * </pre>
       *
       * <code>int32 min_replicas = 3;</code>
       */
      public Builder setMinReplicas(int value) {
        
        minReplicas_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optional. Min replicas of the worker group
       * </pre>
       *
       * <code>int32 min_replicas = 3;</code>
       */
      public Builder clearMinReplicas() {
        
        minReplicas_ = 0;
        onChanged();
        return this;
      }

      private int maxReplicas_ ;
      /**
       * <pre>
       * Optional. Max replicas of the worker group
       * </pre>
       *
       * <code>int32 max_replicas = 4;</code>
       */
      public int getMaxReplicas() {
        return maxReplicas_;
      }
      /**
       * <pre>
       * Optional. Max replicas of the worker group
       * </pre>
       *
       * <code>int32 max_replicas = 4;</code>
       */
      public Builder setMaxReplicas(int value) {
        
        maxReplicas_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optional. Max replicas of the worker group
       * </pre>
       *
       * <code>int32 max_replicas = 4;</code>
       */
      public Builder clearMaxReplicas() {
        
        maxReplicas_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> rayStartParams_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetRayStartParams() {
        if (rayStartParams_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              RayStartParamsDefaultEntryHolder.defaultEntry);
        }
        return rayStartParams_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableRayStartParams() {
        onChanged();;
        if (rayStartParams_ == null) {
          rayStartParams_ = com.google.protobuf.MapField.newMapField(
              RayStartParamsDefaultEntryHolder.defaultEntry);
        }
        if (!rayStartParams_.isMutable()) {
          rayStartParams_ = rayStartParams_.copy();
        }
        return rayStartParams_;
      }

      public int getRayStartParamsCount() {
        return internalGetRayStartParams().getMap().size();
      }
      /**
       * <pre>
       * Optional. The ray start params of worker node group
       * </pre>
       *
       * <code>map&lt;string, string&gt; ray_start_params = 5;</code>
       */

      public boolean containsRayStartParams(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetRayStartParams().getMap().containsKey(key);
      }
      /**
       * Use {@link #getRayStartParamsMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getRayStartParams() {
        return getRayStartParamsMap();
      }
      /**
       * <pre>
       * Optional. The ray start params of worker node group
       * </pre>
       *
       * <code>map&lt;string, string&gt; ray_start_params = 5;</code>
       */

      public java.util.Map<java.lang.String, java.lang.String> getRayStartParamsMap() {
        return internalGetRayStartParams().getMap();
      }
      /**
       * <pre>
       * Optional. The ray start params of worker node group
       * </pre>
       *
       * <code>map&lt;string, string&gt; ray_start_params = 5;</code>
       */

      public java.lang.String getRayStartParamsOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetRayStartParams().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * Optional. The ray start params of worker node group
       * </pre>
       *
       * <code>map&lt;string, string&gt; ray_start_params = 5;</code>
       */

      public java.lang.String getRayStartParamsOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetRayStartParams().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearRayStartParams() {
        internalGetMutableRayStartParams().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * Optional. The ray start params of worker node group
       * </pre>
       *
       * <code>map&lt;string, string&gt; ray_start_params = 5;</code>
       */

      public Builder removeRayStartParams(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableRayStartParams().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableRayStartParams() {
        return internalGetMutableRayStartParams().getMutableMap();
      }
      /**
       * <pre>
       * Optional. The ray start params of worker node group
       * </pre>
       *
       * <code>map&lt;string, string&gt; ray_start_params = 5;</code>
       */
      public Builder putRayStartParams(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableRayStartParams().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * Optional. The ray start params of worker node group
       * </pre>
       *
       * <code>map&lt;string, string&gt; ray_start_params = 5;</code>
       */

      public Builder putAllRayStartParams(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableRayStartParams().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.WorkerGroupSpec)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.WorkerGroupSpec)
    private static final flyteidl.core.Ray.WorkerGroupSpec DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.core.Ray.WorkerGroupSpec();
    }

    public static flyteidl.core.Ray.WorkerGroupSpec getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<WorkerGroupSpec>
        PARSER = new com.google.protobuf.AbstractParser<WorkerGroupSpec>() {
      @java.lang.Override
      public WorkerGroupSpec parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new WorkerGroupSpec(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<WorkerGroupSpec> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<WorkerGroupSpec> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.core.Ray.WorkerGroupSpec getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_RayJob_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_RayJob_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_RayCluster_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_RayCluster_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_ClusterSpec_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_ClusterSpec_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_HeadGroupSpec_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_HeadGroupSpec_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_HeadGroupSpec_RayStartParamsEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_HeadGroupSpec_RayStartParamsEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_WorkerGroupSpec_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_WorkerGroupSpec_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_WorkerGroupSpec_RayStartParamsEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_WorkerGroupSpec_RayStartParamsEntry_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\032flyteidl/plugins/ray.proto\022\rflyteidl.c" +
      "ore\032\037google/protobuf/timestamp.proto\"\226\001\n" +
      "\006RayJob\022.\n\013ray_cluster\030\001 \001(\0132\031.flyteidl." +
      "core.RayCluster\022\023\n\013runtime_env\030\002 \001(\t\022#\n\033" +
      "shutdown_after_job_finishes\030\003 \001(\010\022\"\n\032ttl" +
      "_seconds_after_finished\030\004 \001(\005\">\n\nRayClus" +
      "ter\0220\n\014cluster_spec\030\001 \001(\0132\032.flyteidl.cor" +
      "e.ClusterSpec\"\177\n\013ClusterSpec\0225\n\017head_gro" +
      "up_spec\030\001 \001(\0132\034.flyteidl.core.HeadGroupS" +
      "pec\0229\n\021worker_group_spec\030\002 \003(\0132\036.flyteid" +
      "l.core.WorkerGroupSpec\"\222\001\n\rHeadGroupSpec" +
      "\022J\n\020ray_start_params\030\001 \003(\01320.flyteidl.co" +
      "re.HeadGroupSpec.RayStartParamsEntry\0325\n\023" +
      "RayStartParamsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005valu" +
      "e\030\002 \001(\t:\0028\001\"\350\001\n\017WorkerGroupSpec\022\022\n\ngroup" +
      "_name\030\001 \001(\t\022\020\n\010replicas\030\002 \001(\005\022\024\n\014min_rep" +
      "licas\030\003 \001(\005\022\024\n\014max_replicas\030\004 \001(\005\022L\n\020ray" +
      "_start_params\030\005 \003(\01322.flyteidl.core.Work" +
      "erGroupSpec.RayStartParamsEntry\0325\n\023RaySt" +
      "artParamsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001" +
      "(\t:\0028\001B6Z4github.com/flyteorg/flyteidl/g" +
      "en/pb-go/flyteidl/coreb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.TimestampProto.getDescriptor(),
        }, assigner);
    internal_static_flyteidl_core_RayJob_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_flyteidl_core_RayJob_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_RayJob_descriptor,
        new java.lang.String[] { "RayCluster", "RuntimeEnv", "ShutdownAfterJobFinishes", "TtlSecondsAfterFinished", });
    internal_static_flyteidl_core_RayCluster_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_flyteidl_core_RayCluster_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_RayCluster_descriptor,
        new java.lang.String[] { "ClusterSpec", });
    internal_static_flyteidl_core_ClusterSpec_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_flyteidl_core_ClusterSpec_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_ClusterSpec_descriptor,
        new java.lang.String[] { "HeadGroupSpec", "WorkerGroupSpec", });
    internal_static_flyteidl_core_HeadGroupSpec_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_flyteidl_core_HeadGroupSpec_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_HeadGroupSpec_descriptor,
        new java.lang.String[] { "RayStartParams", });
    internal_static_flyteidl_core_HeadGroupSpec_RayStartParamsEntry_descriptor =
      internal_static_flyteidl_core_HeadGroupSpec_descriptor.getNestedTypes().get(0);
    internal_static_flyteidl_core_HeadGroupSpec_RayStartParamsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_HeadGroupSpec_RayStartParamsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_flyteidl_core_WorkerGroupSpec_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_flyteidl_core_WorkerGroupSpec_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_WorkerGroupSpec_descriptor,
        new java.lang.String[] { "GroupName", "Replicas", "MinReplicas", "MaxReplicas", "RayStartParams", });
    internal_static_flyteidl_core_WorkerGroupSpec_RayStartParamsEntry_descriptor =
      internal_static_flyteidl_core_WorkerGroupSpec_descriptor.getNestedTypes().get(0);
    internal_static_flyteidl_core_WorkerGroupSpec_RayStartParamsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_WorkerGroupSpec_RayStartParamsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    com.google.protobuf.TimestampProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
