// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/plugins/mpi.proto

package plugins

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Custom proto for plugin that enables distributed training using https://github.com/kubeflow/mpi-operator
type DistributedMPITrainingTask struct {
	// number of worker,launcher replicas spawned in the cluster for this job
	Workers              int32    `protobuf:"varint,1,opt,name=workers,proto3" json:"workers,omitempty"`
	LauncherReplicas     int32    `protobuf:"varint,2,opt,name=launcher_replicas,json=launcherReplicas,proto3" json:"launcher_replicas,omitempty"`
	Slots                int32    `protobuf:"varint,3,opt,name=slots,proto3" json:"slots,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DistributedMPITrainingTask) Reset()         { *m = DistributedMPITrainingTask{} }
func (m *DistributedMPITrainingTask) String() string { return proto.CompactTextString(m) }
func (*DistributedMPITrainingTask) ProtoMessage()    {}
func (*DistributedMPITrainingTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_13cf3fae00e5b069, []int{0}
}

func (m *DistributedMPITrainingTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributedMPITrainingTask.Unmarshal(m, b)
}
func (m *DistributedMPITrainingTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributedMPITrainingTask.Marshal(b, m, deterministic)
}
func (m *DistributedMPITrainingTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributedMPITrainingTask.Merge(m, src)
}
func (m *DistributedMPITrainingTask) XXX_Size() int {
	return xxx_messageInfo_DistributedMPITrainingTask.Size(m)
}
func (m *DistributedMPITrainingTask) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributedMPITrainingTask.DiscardUnknown(m)
}

var xxx_messageInfo_DistributedMPITrainingTask proto.InternalMessageInfo

func (m *DistributedMPITrainingTask) GetWorkers() int32 {
	if m != nil {
		return m.Workers
	}
	return 0
}

func (m *DistributedMPITrainingTask) GetLauncherReplicas() int32 {
	if m != nil {
		return m.LauncherReplicas
	}
	return 0
}

func (m *DistributedMPITrainingTask) GetSlots() int32 {
	if m != nil {
		return m.Slots
	}
	return 0
}

func init() {
	proto.RegisterType((*DistributedMPITrainingTask)(nil), "flyteidl.plugins.DistributedMPITrainingTask")
}

func init() { proto.RegisterFile("flyteidl/plugins/mpi.proto", fileDescriptor_13cf3fae00e5b069) }

var fileDescriptor_13cf3fae00e5b069 = []byte{
	// 195 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4a, 0xcb, 0xa9, 0x2c,
	0x49, 0xcd, 0x4c, 0xc9, 0xd1, 0x2f, 0xc8, 0x29, 0x4d, 0xcf, 0xcc, 0x2b, 0xd6, 0xcf, 0x2d, 0xc8,
	0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x80, 0xc9, 0xe9, 0x41, 0xe5, 0x94, 0x2a, 0xb9,
	0xa4, 0x5c, 0x32, 0x8b, 0x4b, 0x8a, 0x32, 0x93, 0x4a, 0x4b, 0x52, 0x53, 0x7c, 0x03, 0x3c, 0x43,
	0x8a, 0x12, 0x33, 0xf3, 0x32, 0xf3, 0xd2, 0x43, 0x12, 0x8b, 0xb3, 0x85, 0x24, 0xb8, 0xd8, 0xcb,
	0xf3, 0x8b, 0xb2, 0x53, 0x8b, 0x8a, 0x25, 0x18, 0x15, 0x18, 0x35, 0x58, 0x83, 0x60, 0x5c, 0x21,
	0x6d, 0x2e, 0xc1, 0x9c, 0xc4, 0xd2, 0xbc, 0xe4, 0x8c, 0xd4, 0xa2, 0xf8, 0xa2, 0xd4, 0x82, 0x9c,
	0xcc, 0xe4, 0xc4, 0x62, 0x09, 0x26, 0xb0, 0x1a, 0x01, 0x98, 0x44, 0x10, 0x54, 0x5c, 0x48, 0x84,
	0x8b, 0xb5, 0x38, 0x27, 0xbf, 0xa4, 0x58, 0x82, 0x19, 0xac, 0x00, 0xc2, 0x71, 0xb2, 0x8c, 0x32,
	0x4f, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x07, 0xbb, 0x2c, 0xbf, 0x28,
	0x5d, 0x1f, 0xee, 0xfc, 0xf4, 0xd4, 0x3c, 0xfd, 0x82, 0x24, 0xdd, 0xf4, 0x7c, 0x7d, 0x74, 0x1f,
	0x25, 0xb1, 0x81, 0xbd, 0x63, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x39, 0x61, 0x5a, 0xb3, 0xec,
	0x00, 0x00, 0x00,
}
