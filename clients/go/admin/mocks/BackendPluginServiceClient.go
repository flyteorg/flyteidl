// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	service "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/service"
)

// BackendPluginServiceClient is an autogenerated mock type for the BackendPluginServiceClient type
type BackendPluginServiceClient struct {
	mock.Mock
}

type BackendPluginServiceClient_CreateTask struct {
	*mock.Call
}

func (_m BackendPluginServiceClient_CreateTask) Return(_a0 *service.TaskCreateResponse, _a1 error) *BackendPluginServiceClient_CreateTask {
	return &BackendPluginServiceClient_CreateTask{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *BackendPluginServiceClient) OnCreateTask(ctx context.Context, in *service.TaskCreateRequest, opts ...grpc.CallOption) *BackendPluginServiceClient_CreateTask {
	c_call := _m.On("CreateTask", ctx, in, opts)
	return &BackendPluginServiceClient_CreateTask{Call: c_call}
}

func (_m *BackendPluginServiceClient) OnCreateTaskMatch(matchers ...interface{}) *BackendPluginServiceClient_CreateTask {
	c_call := _m.On("CreateTask", matchers...)
	return &BackendPluginServiceClient_CreateTask{Call: c_call}
}

// CreateTask provides a mock function with given fields: ctx, in, opts
func (_m *BackendPluginServiceClient) CreateTask(ctx context.Context, in *service.TaskCreateRequest, opts ...grpc.CallOption) (*service.TaskCreateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *service.TaskCreateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *service.TaskCreateRequest, ...grpc.CallOption) *service.TaskCreateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.TaskCreateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *service.TaskCreateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type BackendPluginServiceClient_DeleteTask struct {
	*mock.Call
}

func (_m BackendPluginServiceClient_DeleteTask) Return(_a0 *service.TaskDeleteResponse, _a1 error) *BackendPluginServiceClient_DeleteTask {
	return &BackendPluginServiceClient_DeleteTask{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *BackendPluginServiceClient) OnDeleteTask(ctx context.Context, in *service.TaskDeleteRequest, opts ...grpc.CallOption) *BackendPluginServiceClient_DeleteTask {
	c_call := _m.On("DeleteTask", ctx, in, opts)
	return &BackendPluginServiceClient_DeleteTask{Call: c_call}
}

func (_m *BackendPluginServiceClient) OnDeleteTaskMatch(matchers ...interface{}) *BackendPluginServiceClient_DeleteTask {
	c_call := _m.On("DeleteTask", matchers...)
	return &BackendPluginServiceClient_DeleteTask{Call: c_call}
}

// DeleteTask provides a mock function with given fields: ctx, in, opts
func (_m *BackendPluginServiceClient) DeleteTask(ctx context.Context, in *service.TaskDeleteRequest, opts ...grpc.CallOption) (*service.TaskDeleteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *service.TaskDeleteResponse
	if rf, ok := ret.Get(0).(func(context.Context, *service.TaskDeleteRequest, ...grpc.CallOption) *service.TaskDeleteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.TaskDeleteResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *service.TaskDeleteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type BackendPluginServiceClient_GetTask struct {
	*mock.Call
}

func (_m BackendPluginServiceClient_GetTask) Return(_a0 *service.TaskCreateResponse, _a1 error) *BackendPluginServiceClient_GetTask {
	return &BackendPluginServiceClient_GetTask{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *BackendPluginServiceClient) OnGetTask(ctx context.Context, in *service.TaskGetRequest, opts ...grpc.CallOption) *BackendPluginServiceClient_GetTask {
	c_call := _m.On("GetTask", ctx, in, opts)
	return &BackendPluginServiceClient_GetTask{Call: c_call}
}

func (_m *BackendPluginServiceClient) OnGetTaskMatch(matchers ...interface{}) *BackendPluginServiceClient_GetTask {
	c_call := _m.On("GetTask", matchers...)
	return &BackendPluginServiceClient_GetTask{Call: c_call}
}

// GetTask provides a mock function with given fields: ctx, in, opts
func (_m *BackendPluginServiceClient) GetTask(ctx context.Context, in *service.TaskGetRequest, opts ...grpc.CallOption) (*service.TaskCreateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *service.TaskCreateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *service.TaskGetRequest, ...grpc.CallOption) *service.TaskCreateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.TaskCreateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *service.TaskGetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
