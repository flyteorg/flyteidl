// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/service/admin.proto

package service

import (
	context "context"
	fmt "fmt"
	admin "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/admin"
	_ "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("flyteidl/service/admin.proto", fileDescriptor_5cfa31da1d67295d) }

var fileDescriptor_5cfa31da1d67295d = []byte{
	// 2179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x9a, 0xdf, 0x6f, 0x1d, 0x47,
	0x15, 0xc7, 0x35, 0x36, 0x02, 0x31, 0x4d, 0x62, 0x7b, 0x9a, 0x60, 0x67, 0x63, 0x27, 0xe9, 0xba,
	0x8e, 0x7f, 0xdf, 0x75, 0x93, 0xb4, 0x51, 0x42, 0x7f, 0xb9, 0xb5, 0x73, 0x65, 0x48, 0x93, 0x62,
	0x52, 0x90, 0x2c, 0xa4, 0xab, 0xf5, 0xdd, 0x89, 0xb3, 0xc9, 0xbd, 0x77, 0x6f, 0x77, 0xc7, 0x2e,
	0x96, 0x65, 0xf1, 0x43, 0x08, 0x51, 0x21, 0xf1, 0xc0, 0x0f, 0x41, 0x21, 0xa2, 0x14, 0x8a, 0xf8,
	0x59, 0x5e, 0x40, 0x45, 0xbc, 0x54, 0x42, 0x80, 0xc4, 0x0b, 0x2f, 0xf0, 0xce, 0x0b, 0x7d, 0xe6,
	0x6f, 0x40, 0x7b, 0x76, 0x66, 0xef, 0xce, 0xce, 0xce, 0xee, 0xac, 0x49, 0x79, 0xe2, 0xcd, 0xbe,
	0xe7, 0x3b, 0x33, 0x9f, 0x73, 0xe6, 0xcc, 0x99, 0xd9, 0xdd, 0xc1, 0x93, 0x77, 0x3a, 0xfb, 0x8c,
	0xfa, 0x5e, 0xc7, 0x89, 0x68, 0xb8, 0xe7, 0xb7, 0xa9, 0xe3, 0x7a, 0x5d, 0xbf, 0xd7, 0xe8, 0x87,
	0x01, 0x0b, 0xc8, 0xa8, 0xb0, 0x36, 0xb8, 0xd5, 0x9a, 0xdc, 0x09, 0x82, 0x9d, 0x0e, 0x75, 0xdc,
	0xbe, 0xef, 0xb8, 0xbd, 0x5e, 0xc0, 0x5c, 0xe6, 0x07, 0xbd, 0x28, 0xd1, 0x5b, 0x83, 0xde, 0xa0,
	0x17, 0xa7, 0x1f, 0x06, 0xf7, 0x68, 0x9b, 0x71, 0x6b, 0xa3, 0xd8, 0xda, 0xf2, 0x82, 0xae, 0xeb,
	0xf7, 0x5a, 0x2e, 0x63, 0xa1, 0xbf, 0xbd, 0xcb, 0xa8, 0xe8, 0x6d, 0x56, 0xa3, 0x57, 0x84, 0xa7,
	0x73, 0x42, 0xe6, 0x46, 0xf7, 0xb9, 0x69, 0x2a, 0x67, 0x7a, 0x2d, 0x08, 0xef, 0xdf, 0xe9, 0x04,
	0xaf, 0x71, 0xf3, 0x9c, 0xc6, 0xac, 0x8e, 0x71, 0x3e, 0xa7, 0xec, 0xb8, 0xbb, 0xbd, 0xf6, 0xdd,
	0x56, 0xbf, 0xe3, 0xf2, 0x60, 0x59, 0x56, 0x4e, 0x41, 0xf7, 0x68, 0x4f, 0xb8, 0x7e, 0x36, 0x6f,
	0xfb, 0x3c, 0x6d, 0xef, 0xc6, 0x91, 0xd3, 0xb8, 0xda, 0x75, 0x59, 0xfb, 0xae, 0xbb, 0xdd, 0xa1,
	0xad, 0x90, 0x46, 0xc1, 0x6e, 0xd8, 0xa6, 0x5c, 0x38, 0x9d, 0x13, 0xf6, 0x02, 0x8f, 0xb6, 0xf2,
	0xbd, 0x4d, 0x17, 0xc4, 0x43, 0x11, 0xe5, 0xe7, 0x6a, 0x8f, 0x86, 0xd1, 0xc0, 0x7a, 0x26, 0x67,
	0x6d, 0x07, 0xdd, 0xae, 0x96, 0xd6, 0xa3, 0x51, 0x3b, 0xf4, 0xfb, 0x71, 0xe7, 0x2d, 0xda, 0x63,
	0x3e, 0xdb, 0x57, 0xdc, 0x6e, 0x07, 0x21, 0x75, 0x7c, 0x2f, 0xb6, 0xde, 0xf1, 0x69, 0xa8, 0x8c,
	0x02, 0xf6, 0x2e, 0x65, 0xa1, 0xdf, 0xe6, 0x11, 0xbf, 0xf8, 0x95, 0x9b, 0xf8, 0xd8, 0x6a, 0xdc,
	0xff, 0xa7, 0x93, 0xdc, 0x23, 0x5d, 0x8c, 0x5f, 0x0c, 0xa9, 0xcb, 0xe8, 0x6d, 0x37, 0xba, 0x4f,
	0x1e, 0x4b, 0xd3, 0xa9, 0x91, 0xa4, 0x6c, 0xfc, 0x6b, 0x62, 0xdf, 0xa4, 0xaf, 0xee, 0xd2, 0x88,
	0x59, 0x76, 0x99, 0x24, 0xea, 0x07, 0xbd, 0x88, 0xda, 0x13, 0x5f, 0xfe, 0xc7, 0xfb, 0xdf, 0x1a,
	0x22, 0xf6, 0x71, 0x48, 0xe9, 0xbd, 0x27, 0x20, 0x58, 0xd1, 0x35, 0xb4, 0x40, 0xbe, 0x86, 0xf0,
	0x47, 0x9a, 0x94, 0xc1, 0x60, 0xe7, 0xf3, 0x3d, 0xdd, 0xda, 0x8e, 0x53, 0xb1, 0x49, 0x99, 0x18,
	0xeb, 0x64, 0xd1, 0x58, 0xf6, 0x3a, 0xf4, 0xfe, 0x1c, 0x79, 0x46, 0xea, 0xdd, 0x39, 0xf0, 0xbd,
	0x06, 0xcf, 0xe6, 0x43, 0xf8, 0x27, 0x59, 0x02, 0xc9, 0xdf, 0x3d, 0xb7, 0x4b, 0x93, 0xbf, 0xf8,
	0x94, 0x1c, 0x92, 0xef, 0x22, 0xfc, 0xc8, 0x0d, 0x3f, 0x02, 0x96, 0x0d, 0x2f, 0x22, 0x2b, 0xf9,
	0xc1, 0x6e, 0xba, 0x5d, 0xea, 0xad, 0x43, 0xe8, 0x37, 0xd2, 0x20, 0xc7, 0x2d, 0x04, 0xde, 0xbc,
	0x71, 0x0b, 0x7b, 0x11, 0x98, 0x67, 0xc8, 0x74, 0x96, 0xb9, 0xe5, 0x7b, 0x91, 0x73, 0x30, 0x60,
	0xe6, 0xc0, 0xe4, 0x37, 0x08, 0x7f, 0x54, 0x90, 0x45, 0x64, 0x3a, 0x3f, 0xca, 0x26, 0xcf, 0xde,
	0x2c, 0xca, 0x44, 0x51, 0xa4, 0x60, 0xe4, 0x6d, 0x18, 0xf9, 0x73, 0x64, 0xa5, 0x6e, 0xb4, 0xb6,
	0xe6, 0xc8, 0x05, 0xb3, 0x36, 0xe4, 0x10, 0x9f, 0x48, 0x32, 0xe0, 0xb3, 0x7c, 0xa9, 0x93, 0x99,
	0x3c, 0x8f, 0xb0, 0xc8, 0xc9, 0x74, 0xa1, 0x4a, 0xc6, 0x13, 0x6a, 0x12, 0x9c, 0xf8, 0x98, 0x3d,
	0x26, 0x80, 0x44, 0x4d, 0x81, 0xa4, 0xfa, 0x36, 0xc2, 0x8f, 0x34, 0x29, 0x4b, 0x07, 0xaf, 0x4e,
	0xac, 0x09, 0xdd, 0xb8, 0xf6, 0x06, 0x8c, 0xf4, 0x22, 0x59, 0x55, 0x46, 0xaa, 0x9d, 0x60, 0x6f,
	0x22, 0x3c, 0x12, 0x4f, 0x81, 0xe8, 0xfb, 0x03, 0x4f, 0x32, 0x07, 0xd8, 0xe7, 0xc9, 0x6c, 0x9e,
	0x5d, 0x97, 0x68, 0xef, 0x21, 0x7c, 0x3c, 0x4b, 0x68, 0x98, 0x6c, 0x93, 0xba, 0xe8, 0x01, 0xc5,
	0x3d, 0xa0, 0xf0, 0xc8, 0xe5, 0xa3, 0x44, 0x70, 0x6b, 0x89, 0x2c, 0x98, 0xb7, 0x23, 0x5f, 0x45,
	0x78, 0x34, 0x49, 0x95, 0x1b, 0xb0, 0x75, 0xbc, 0xdc, 0x71, 0x7b, 0x64, 0x36, 0x8f, 0x37, 0xb0,
	0xc9, 0xd9, 0x37, 0x57, 0x2d, 0xe4, 0xf9, 0x77, 0x0e, 0x7c, 0x3a, 0x6d, 0x9f, 0x14, 0x6c, 0x99,
	0x9d, 0x0a, 0x52, 0xf0, 0x07, 0x08, 0x1f, 0x6f, 0x52, 0x96, 0xa1, 0xa8, 0x4e, 0x42, 0x4b, 0x3f,
	0xbc, 0x7d, 0x03, 0x06, 0xbc, 0x4e, 0xd6, 0x8a, 0x06, 0xac, 0x9d, 0x89, 0x3f, 0x46, 0xf8, 0xd1,
	0x26, 0x65, 0xab, 0x6d, 0xe6, 0xef, 0x95, 0x46, 0x2a, 0xaf, 0x30, 0x41, 0xbd, 0x0e, 0xa8, 0xcf,
	0x93, 0x67, 0x05, 0xaa, 0x0b, 0x9d, 0xb4, 0x6a, 0x12, 0x93, 0x07, 0x08, 0x9f, 0x8a, 0x13, 0x28,
	0xcf, 0x10, 0x91, 0xc5, 0x2a, 0xcc, 0x6c, 0x72, 0x9e, 0xd5, 0xa3, 0x42, 0x7a, 0x3e, 0x05, 0xb8,
	0x2b, 0xa4, 0x51, 0x8a, 0xab, 0xae, 0x95, 0xb7, 0x11, 0x1e, 0x8b, 0x3b, 0x18, 0x74, 0xf7, 0x81,
	0xaf, 0xe7, 0x8b, 0x80, 0x9a, 0x59, 0x11, 0x19, 0x46, 0xdd, 0x92, 0xfe, 0x2b, 0x2f, 0x3a, 0xd9,
	0xf8, 0x19, 0x2d, 0xea, 0xaa, 0xb8, 0xf5, 0x01, 0xe6, 0x1e, 0xb9, 0x72, 0xc4, 0x8c, 0xdc, 0x72,
	0xc8, 0x72, 0xad, 0xa6, 0xe4, 0x5d, 0x84, 0x47, 0x5f, 0xe9, 0x7b, 0xc6, 0x8b, 0x3b, 0xd1, 0x1a,
	0x2c, 0x6e, 0x21, 0xe4, 0x8b, 0xfb, 0x16, 0x78, 0xb6, 0x61, 0x3d, 0x94, 0xb5, 0x16, 0x17, 0x83,
	0x2f, 0x21, 0x3c, 0x92, 0x14, 0x90, 0x75, 0x71, 0x3e, 0x24, 0xca, 0x4e, 0x97, 0x9a, 0xe4, 0x9a,
	0x34, 0x5b, 0xa9, 0xe3, 0xd4, 0x53, 0x40, 0x3d, 0x6e, 0x13, 0x41, 0x9d, 0x9e, 0x45, 0xa1, 0x20,
	0x7d, 0x03, 0xe1, 0xb1, 0x4d, 0x9a, 0x78, 0x32, 0xa0, 0x98, 0xd3, 0xf6, 0x2e, 0xb4, 0xb5, 0x39,
	0x2e, 0x00, 0xc7, 0x79, 0xfb, 0x8c, 0xca, 0xe1, 0x84, 0xbc, 0xd3, 0x18, 0xe8, 0xeb, 0x08, 0x8f,
	0x6e, 0xd2, 0x76, 0xb0, 0x47, 0xc3, 0x01, 0xcf, 0x6c, 0x09, 0x0f, 0x48, 0x6b, 0xe3, 0xcc, 0x00,
	0xce, 0x39, 0xdb, 0x2a, 0xc4, 0x81, 0x3e, 0x63, 0x9a, 0xef, 0x20, 0x7c, 0xac, 0x49, 0xd9, 0x80,
	0x64, 0x51, 0xb7, 0xa7, 0xa5, 0x92, 0x4c, 0xe5, 0x3e, 0xad, 0xa5, 0xb1, 0x9f, 0x81, 0xf1, 0xaf,
	0x90, 0x27, 0x0b, 0xc6, 0x37, 0x28, 0x82, 0x6f, 0x23, 0x3c, 0x92, 0xa4, 0xa7, 0x49, 0xea, 0xc8,
	0x19, 0x3f, 0x5b, 0xa9, 0xe3, 0x31, 0x7a, 0x1e, 0x18, 0xaf, 0x59, 0x47, 0x63, 0x8c, 0xc3, 0xf7,
	0x07, 0x84, 0x47, 0xb3, 0xe1, 0x5b, 0x73, 0x99, 0x4b, 0x1c, 0x93, 0x10, 0xc6, 0x4a, 0x01, 0xbc,
	0x62, 0xde, 0x80, 0x93, 0xbf, 0x00, 0xe4, 0x4f, 0x93, 0x6b, 0x82, 0xdc, 0x73, 0x99, 0x5b, 0x33,
	0xc4, 0xaf, 0x23, 0x7c, 0x22, 0xae, 0x68, 0xe9, 0x20, 0x86, 0x05, 0x72, 0x4a, 0x1b, 0x5e, 0xa8,
	0x8f, 0x97, 0x00, 0x6d, 0x99, 0x2c, 0xd6, 0x08, 0x2a, 0x79, 0x07, 0x61, 0x72, 0x9b, 0x86, 0x5d,
	0xbf, 0x27, 0xcd, 0xf8, 0xbc, 0x76, 0xa8, 0x54, 0x2c, 0xa8, 0x16, 0x4c, 0xa4, 0xf2, 0xbc, 0x2f,
	0x1c, 0x7d, 0xde, 0xff, 0x9e, 0xcc, 0xfb, 0xcd, 0xc0, 0xa3, 0x25, 0x8b, 0x58, 0x32, 0x67, 0x96,
	0xcd, 0x54, 0xa9, 0xd0, 0xde, 0x03, 0xbc, 0x3e, 0xe9, 0x09, 0x3c, 0xf9, 0x39, 0x3c, 0x61, 0x4c,
	0xff, 0x6d, 0xe5, 0x81, 0x25, 0x4b, 0x96, 0x5e, 0x32, 0x0c, 0x2a, 0x36, 0xf4, 0xee, 0x7b, 0x87,
	0xe4, 0x9f, 0x08, 0x93, 0x78, 0x0a, 0x25, 0x9a, 0x48, 0xad, 0x95, 0x92, 0x3d, 0x9b, 0x19, 0x8f,
	0x55, 0x2a, 0xed, 0x03, 0xf0, 0x6d, 0x97, 0x44, 0x5a, 0xdf, 0xd2, 0xb3, 0xba, 0xc6, 0xc3, 0x62,
	0x7b, 0xea, 0x67, 0xb1, 0x39, 0xc9, 0xf8, 0x9f, 0x7e, 0x08, 0x9f, 0x56, 0x1d, 0xbc, 0x1e, 0x84,
	0xf0, 0x18, 0xee, 0x94, 0xd2, 0x73, 0x55, 0x4d, 0x77, 0x7f, 0x3b, 0x0c, 0xfe, 0xfe, 0x7a, 0x98,
	0xfc, 0x62, 0x58, 0x78, 0xdc, 0xbe, 0xeb, 0x77, 0xbc, 0x90, 0xe6, 0xdf, 0x9c, 0x44, 0xce, 0x81,
	0xfc, 0x43, 0x4b, 0xcc, 0x8d, 0xf4, 0x8b, 0x26, 0x2a, 0xb5, 0x9b, 0xa6, 0x01, 0xab, 0xdd, 0x92,
	0x67, 0x8e, 0x49, 0x3b, 0x91, 0x5a, 0x45, 0x6a, 0xfe, 0xe0, 0x5f, 0xea, 0x83, 0xd0, 0x94, 0xc0,
	0x0a, 0x89, 0x96, 0x4a, 0x08, 0xc4, 0xc1, 0xa4, 0x48, 0x13, 0x52, 0x16, 0xee, 0xb7, 0x5c, 0xc6,
	0x68, 0xb7, 0xcf, 0x0e, 0xc9, 0xbf, 0x11, 0x3e, 0x99, 0x5f, 0xdd, 0x50, 0xd9, 0x17, 0xab, 0x56,
	0x78, 0xb6, 0xaa, 0x2f, 0x99, 0x89, 0x79, 0x4d, 0x52, 0x16, 0x06, 0x54, 0xf4, 0xff, 0xd1, 0xca,
	0xff, 0x02, 0x1e, 0xd9, 0xa4, 0x3b, 0x7e, 0xc4, 0x68, 0xf8, 0x72, 0xd2, 0xa1, 0xba, 0xd9, 0x72,
	0x83, 0xd0, 0x69, 0x37, 0x5b, 0x45, 0xc7, 0x1d, 0x3c, 0x03, 0x0e, 0x9e, 0xb2, 0x47, 0x85, 0x83,
	0x1c, 0x1d, 0x4e, 0x69, 0xaf, 0xe2, 0xe3, 0xc9, 0xde, 0x2c, 0x86, 0x1f, 0xd7, 0x74, 0x6b, 0xcd,
	0x68, 0x0c, 0xb9, 0xad, 0xfd, 0x3c, 0x8c, 0x66, 0x59, 0xa7, 0xf2, 0xa3, 0xc5, 0x8e, 0x43, 0x09,
	0xbf, 0x83, 0x8f, 0xc5, 0x4b, 0x94, 0x37, 0x8f, 0x88, 0xad, 0xe9, 0xb8, 0xf4, 0xed, 0x92, 0x68,
	0x2d, 0xde, 0xf4, 0x11, 0xc5, 0x3b, 0xf2, 0x06, 0xc2, 0x8f, 0xca, 0x2f, 0x85, 0xd6, 0xf7, 0x68,
	0x8f, 0x91, 0xe5, 0xca, 0x4d, 0x1f, 0x74, 0x62, 0xe8, 0x86, 0xa9, 0x9c, 0x07, 0x60, 0x1a, 0x80,
	0xa6, 0xec, 0x89, 0x74, 0x8f, 0x8b, 0xcd, 0x91, 0xfc, 0xc2, 0xe8, 0xf5, 0xf4, 0x80, 0x0e, 0xb9,
	0x09, 0x5c, 0xf3, 0xa5, 0x69, 0x2b, 0x31, 0x2d, 0x98, 0x48, 0x75, 0x6f, 0x0e, 0x38, 0x4f, 0x9c,
	0x83, 0x39, 0x96, 0xb8, 0xce, 0x6a, 0x58, 0xc0, 0x64, 0xc6, 0x52, 0x24, 0xad, 0x60, 0x49, 0xdf,
	0xce, 0x7e, 0x71, 0x18, 0xb6, 0x77, 0xa9, 0x0b, 0x75, 0x7b, 0x97, 0xcc, 0x65, 0xdb, 0xbb, 0x24,
	0xb4, 0x7f, 0x32, 0x04, 0xc3, 0x3f, 0x18, 0x22, 0x6f, 0x0c, 0x49, 0x6f, 0x41, 0x73, 0xeb, 0xdc,
	0xb8, 0xf6, 0xd7, 0x28, 0xf6, 0xc6, 0xd5, 0xbd, 0xa2, 0x9c, 0x17, 0xd6, 0xef, 0xa2, 0x82, 0xad,
	0x56, 0xe8, 0xc2, 0x92, 0xac, 0xd6, 0xe0, 0xef, 0x0d, 0x25, 0x87, 0x11, 0x29, 0x76, 0x05, 0x87,
	0x11, 0xc9, 0x5e, 0xba, 0x3b, 0x2b, 0x4a, 0xfb, 0x77, 0x08, 0x66, 0xe2, 0x1d, 0x44, 0x7e, 0x89,
	0xb4, 0x33, 0x61, 0x3c, 0x0d, 0xa6, 0x73, 0x60, 0x36, 0x01, 0xfa, 0xe8, 0x93, 0x07, 0xc3, 0xb0,
	0x3d, 0x49, 0xfe, 0x14, 0x6f, 0x4f, 0xf9, 0x0c, 0x2d, 0xdd, 0x9e, 0x8a, 0xc5, 0x7c, 0xc9, 0xfc,
	0x3c, 0x49, 0xda, 0xb7, 0x86, 0xc8, 0x0f, 0x87, 0xa4, 0x1d, 0xea, 0xff, 0x99, 0x9b, 0xcf, 0xdc,
	0x7f, 0x21, 0x3c, 0x25, 0x6d, 0x66, 0x6b, 0xd0, 0xe5, 0x6a, 0xfa, 0xd1, 0x8f, 0x5c, 0xd6, 0x6c,
	0x23, 0x79, 0xa1, 0xfc, 0x58, 0xfb, 0x64, 0xcd, 0x56, 0x7c, 0xe6, 0x5e, 0x81, 0x89, 0xbb, 0x65,
	0x7d, 0x22, 0xb7, 0x33, 0xa9, 0x5f, 0x46, 0x9d, 0x03, 0xf9, 0xc3, 0x24, 0x0f, 0x4e, 0xe6, 0x47,
	0x1e, 0x9c, 0xb8, 0x44, 0xfe, 0x11, 0x61, 0xab, 0x49, 0x99, 0xce, 0xc5, 0x27, 0x0c, 0x61, 0x33,
	0x65, 0xf3, 0x62, 0x9d, 0x26, 0xdc, 0xb9, 0xa7, 0xc1, 0xb9, 0xa7, 0x06, 0xef, 0xd8, 0x4b, 0x9c,
	0x53, 0xdf, 0x11, 0xfe, 0x0d, 0xe1, 0xa9, 0x35, 0xda, 0xa1, 0xff, 0xfd, 0x4c, 0x25, 0xbd, 0xd4,
	0x9d, 0x29, 0xd1, 0x8a, 0x3b, 0xf3, 0x1c, 0x38, 0x73, 0x75, 0xe1, 0x48, 0xce, 0xc4, 0x73, 0xf2,
	0x2e, 0xc2, 0xe3, 0x52, 0xe6, 0x65, 0x3c, 0x69, 0x68, 0x98, 0x74, 0xd9, 0xe6, 0x18, 0xeb, 0x39,
	0xfd, 0x35, 0xa0, 0xbf, 0x6c, 0x39, 0x79, 0xfa, 0x8a, 0x04, 0x8b, 0xc1, 0xdf, 0x4c, 0x0e, 0xdc,
	0x2a, 0xf5, 0x62, 0x25, 0x45, 0x26, 0x81, 0x96, 0xcc, 0xc4, 0x9c, 0x77, 0x09, 0x78, 0x2f, 0x90,
	0xc7, 0xcb, 0x78, 0x05, 0x24, 0xf9, 0x15, 0xc2, 0xe3, 0x52, 0xaa, 0xd4, 0x0a, 0xad, 0x9c, 0x1e,
	0x8e, 0xb1, 0x9e, 0xa3, 0xf2, 0xef, 0x59, 0x0b, 0x46, 0xa8, 0x71, 0x3c, 0xdf, 0x47, 0x78, 0x22,
	0x99, 0x1e, 0x71, 0x4a, 0xcc, 0xe0, 0x6a, 0x5f, 0x4f, 0xe9, 0x52, 0x61, 0xc5, 0xbc, 0x01, 0x07,
	0xa6, 0x00, 0xdc, 0xb2, 0xb6, 0x94, 0x0f, 0x70, 0x47, 0xa8, 0x36, 0xd2, 0x6f, 0xa2, 0x23, 0x70,
	0xf3, 0xf7, 0x08, 0x9f, 0xca, 0x7c, 0xef, 0xcc, 0xf8, 0xb8, 0x54, 0x8d, 0x9c, 0x49, 0x9c, 0x65,
	0x43, 0x35, 0xf7, 0x6e, 0x15, 0xbc, 0xfb, 0x38, 0xb9, 0x5a, 0xea, 0x9d, 0xb2, 0x42, 0x07, 0xef,
	0x26, 0x0e, 0xc9, 0x9f, 0x10, 0x9e, 0x48, 0x26, 0xf9, 0x68, 0x13, 0x24, 0x27, 0xd4, 0x8a, 0x79,
	0x03, 0xee, 0xc2, 0x1a, 0xb8, 0xf0, 0xec, 0xc2, 0xd1, 0x5d, 0x88, 0xe3, 0xff, 0x23, 0x84, 0xc7,
	0xe3, 0x83, 0xd4, 0x4b, 0xe2, 0x42, 0x49, 0xd9, 0xa2, 0xd0, 0x08, 0xb5, 0x8b, 0x42, 0xab, 0xe7,
	0x2e, 0x3c, 0x0e, 0x2e, 0x9c, 0x25, 0x93, 0xc2, 0x85, 0xc1, 0xb5, 0x96, 0x81, 0x0f, 0x71, 0x65,
	0x81, 0xaf, 0x55, 0x83, 0x8f, 0x4b, 0x3e, 0x8d, 0xd4, 0x87, 0xdb, 0xcc, 0xb7, 0xa7, 0xec, 0x19,
	0xf2, 0x5c, 0x85, 0x4e, 0x4d, 0x85, 0xf8, 0xa8, 0xe0, 0x25, 0xf7, 0x54, 0xfc, 0x38, 0x84, 0xe2,
	0x86, 0x4d, 0x8b, 0xed, 0xf7, 0xe3, 0x33, 0x84, 0xba, 0x09, 0xfd, 0x0c, 0xe1, 0x13, 0x4d, 0x9a,
	0x01, 0xdc, 0x57, 0x2f, 0x0d, 0x64, 0x8c, 0x99, 0xb4, 0x3d, 0x53, 0x22, 0xb3, 0x3f, 0x05, 0x64,
	0x9f, 0x24, 0x1b, 0xa6, 0x64, 0xd5, 0x2f, 0x8c, 0xdf, 0x43, 0x78, 0x2c, 0x59, 0xe8, 0x59, 0xd8,
	0xb9, 0x12, 0x0a, 0xb9, 0x8e, 0xcc, 0x1b, 0x28, 0xf9, 0xe4, 0xde, 0x06, 0xfa, 0x9b, 0xd6, 0xc3,
	0xa3, 0x8f, 0xf3, 0xb5, 0x83, 0x71, 0x93, 0xb2, 0xcf, 0x24, 0x67, 0x37, 0xf5, 0x8e, 0xcf, 0xc0,
	0xa6, 0xbd, 0xe3, 0x93, 0x95, 0x70, 0xd4, 0x71, 0x40, 0x1d, 0x23, 0x23, 0x02, 0x95, 0x9f, 0x0d,
	0xc9, 0x9f, 0x93, 0x4d, 0x6d, 0x6d, 0x70, 0x7f, 0x89, 0x47, 0xac, 0xfa, 0x8b, 0xb8, 0x82, 0xa6,
	0x74, 0x62, 0xef, 0xc0, 0xb0, 0x2e, 0x69, 0xa5, 0xa7, 0xf1, 0xfc, 0x3d, 0x29, 0x88, 0x13, 0x1c,
	0x4f, 0x6b, 0x86, 0x4a, 0xfe, 0x66, 0xfe, 0xcd, 0xa1, 0x64, 0x91, 0xe7, 0x11, 0xfc, 0xa2, 0x32,
	0xab, 0x70, 0x66, 0x57, 0xd3, 0x8c, 0x91, 0xda, 0x7e, 0x2b, 0x79, 0x2a, 0xfb, 0x3e, 0x22, 0xb7,
	0xca, 0x7d, 0xab, 0xed, 0xd8, 0x56, 0x93, 0xac, 0x3f, 0x94, 0x2e, 0xc9, 0x5f, 0x92, 0x8b, 0x04,
	0xe9, 0xe3, 0xd2, 0x4b, 0xc9, 0xe5, 0x32, 0x72, 0xd1, 0xe4, 0x4b, 0x0e, 0x17, 0x8b, 0xb0, 0x5c,
	0xaa, 0xd5, 0x86, 0x67, 0x9d, 0x72, 0xf7, 0x8b, 0x5f, 0x6f, 0xab, 0xf7, 0x29, 0xe3, 0x85, 0xab,
	0x5b, 0x57, 0x76, 0x7c, 0x76, 0x77, 0x77, 0xbb, 0xd1, 0x0e, 0xba, 0x0e, 0x70, 0x04, 0xe1, 0x8e,
	0x93, 0xde, 0x9c, 0xdb, 0xa1, 0x3d, 0xa7, 0xbf, 0xbd, 0xbc, 0x13, 0x38, 0xf9, 0xab, 0x9c, 0xdb,
	0x1f, 0x86, 0x8b, 0x74, 0x97, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x01, 0x50, 0xd6, 0xe5,
	0x29, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdminServiceClient interface {
	// Create and upload a :ref:`ref_flyteidl.admin.Task` definition
	CreateTask(ctx context.Context, in *admin.TaskCreateRequest, opts ...grpc.CallOption) (*admin.TaskCreateResponse, error)
	// Fetch a :ref:`ref_flyteidl.admin.Task` definition.
	GetTask(ctx context.Context, in *admin.ObjectGetRequest, opts ...grpc.CallOption) (*admin.Task, error)
	// Fetch a list of :ref:`ref_flyteidl.admin.NamedEntityIdentifier` of task objects.
	ListTaskIds(ctx context.Context, in *admin.NamedEntityIdentifierListRequest, opts ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error)
	// Fetch a list of :ref:`ref_flyteidl.admin.Task` definitions.
	ListTasks(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption) (*admin.TaskList, error)
	// Create and upload a :ref:`ref_flyteidl.admin.Workflow` definition
	CreateWorkflow(ctx context.Context, in *admin.WorkflowCreateRequest, opts ...grpc.CallOption) (*admin.WorkflowCreateResponse, error)
	// Fetch a :ref:`ref_flyteidl.admin.Workflow` definition.
	GetWorkflow(ctx context.Context, in *admin.ObjectGetRequest, opts ...grpc.CallOption) (*admin.Workflow, error)
	// Fetch a list of :ref:`ref_flyteidl.admin.NamedEntityIdentifier` of workflow objects.
	ListWorkflowIds(ctx context.Context, in *admin.NamedEntityIdentifierListRequest, opts ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error)
	// Fetch a list of :ref:`ref_flyteidl.admin.Workflow` definitions.
	ListWorkflows(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption) (*admin.WorkflowList, error)
	// Create and upload a :ref:`ref_flyteidl.admin.LaunchPlan` definition
	CreateLaunchPlan(ctx context.Context, in *admin.LaunchPlanCreateRequest, opts ...grpc.CallOption) (*admin.LaunchPlanCreateResponse, error)
	// Fetch a :ref:`ref_flyteidl.admin.LaunchPlan` definition.
	GetLaunchPlan(ctx context.Context, in *admin.ObjectGetRequest, opts ...grpc.CallOption) (*admin.LaunchPlan, error)
	// Fetch the active version of a :ref:`ref_flyteidl.admin.LaunchPlan`.
	GetActiveLaunchPlan(ctx context.Context, in *admin.ActiveLaunchPlanRequest, opts ...grpc.CallOption) (*admin.LaunchPlan, error)
	// List active versions of :ref:`ref_flyteidl.admin.LaunchPlan`.
	ListActiveLaunchPlans(ctx context.Context, in *admin.ActiveLaunchPlanListRequest, opts ...grpc.CallOption) (*admin.LaunchPlanList, error)
	// Fetch a list of :ref:`ref_flyteidl.admin.NamedEntityIdentifier` of launch plan objects.
	ListLaunchPlanIds(ctx context.Context, in *admin.NamedEntityIdentifierListRequest, opts ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error)
	// Fetch a list of :ref:`ref_flyteidl.admin.LaunchPlan` definitions.
	ListLaunchPlans(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption) (*admin.LaunchPlanList, error)
	// Updates the status of a registered :ref:`ref_flyteidl.admin.LaunchPlan`.
	UpdateLaunchPlan(ctx context.Context, in *admin.LaunchPlanUpdateRequest, opts ...grpc.CallOption) (*admin.LaunchPlanUpdateResponse, error)
	// Triggers the creation of a :ref:`ref_flyteidl.admin.Execution`
	CreateExecution(ctx context.Context, in *admin.ExecutionCreateRequest, opts ...grpc.CallOption) (*admin.ExecutionCreateResponse, error)
	// Triggers the creation of an identical :ref:`ref_flyteidl.admin.Execution`
	RelaunchExecution(ctx context.Context, in *admin.ExecutionRelaunchRequest, opts ...grpc.CallOption) (*admin.ExecutionCreateResponse, error)
	// Recreates a previously-run workflow execution that will only start executing from the last known failure point.
	// In Recover mode, users cannot change any input parameters or update the version of the execution.
	// This is extremely useful to recover from system errors and byzantine faults like - Loss of K8s cluster, bugs in platform or instability, machine failures,
	// downstream system failures (downstream services), or simply to recover executions that failed because of retry exhaustion and should complete if tried again.
	// See :ref:`ref_flyteidl.admin.ExecutionRecoverRequest` for more details.
	RecoverExecution(ctx context.Context, in *admin.ExecutionRecoverRequest, opts ...grpc.CallOption) (*admin.ExecutionCreateResponse, error)
	// Fetches a :ref:`ref_flyteidl.admin.Execution`.
	GetExecution(ctx context.Context, in *admin.WorkflowExecutionGetRequest, opts ...grpc.CallOption) (*admin.Execution, error)
	// Update execution belonging to project domain :ref:`ref_flyteidl.admin.Execution`.
	UpdateExecution(ctx context.Context, in *admin.ExecutionUpdateRequest, opts ...grpc.CallOption) (*admin.ExecutionUpdateResponse, error)
	// Fetches input and output data for a :ref:`ref_flyteidl.admin.Execution`.
	GetExecutionData(ctx context.Context, in *admin.WorkflowExecutionGetDataRequest, opts ...grpc.CallOption) (*admin.WorkflowExecutionGetDataResponse, error)
	// Fetch a list of :ref:`ref_flyteidl.admin.Execution`.
	ListExecutions(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption) (*admin.ExecutionList, error)
	// Terminates an in-progress :ref:`ref_flyteidl.admin.Execution`.
	TerminateExecution(ctx context.Context, in *admin.ExecutionTerminateRequest, opts ...grpc.CallOption) (*admin.ExecutionTerminateResponse, error)
	// Fetches a :ref:`ref_flyteidl.admin.NodeExecution`.
	GetNodeExecution(ctx context.Context, in *admin.NodeExecutionGetRequest, opts ...grpc.CallOption) (*admin.NodeExecution, error)
	// Fetch a list of :ref:`ref_flyteidl.admin.NodeExecution`.
	ListNodeExecutions(ctx context.Context, in *admin.NodeExecutionListRequest, opts ...grpc.CallOption) (*admin.NodeExecutionList, error)
	// Fetch a list of :ref:`ref_flyteidl.admin.NodeExecution` launched by the reference :ref:`ref_flyteidl.admin.TaskExecution`.
	ListNodeExecutionsForTask(ctx context.Context, in *admin.NodeExecutionForTaskListRequest, opts ...grpc.CallOption) (*admin.NodeExecutionList, error)
	// Fetches input and output data for a :ref:`ref_flyteidl.admin.NodeExecution`.
	GetNodeExecutionData(ctx context.Context, in *admin.NodeExecutionGetDataRequest, opts ...grpc.CallOption) (*admin.NodeExecutionGetDataResponse, error)
	// Registers a :ref:`ref_flyteidl.admin.Project` with the Flyte deployment.
	RegisterProject(ctx context.Context, in *admin.ProjectRegisterRequest, opts ...grpc.CallOption) (*admin.ProjectRegisterResponse, error)
	// Updates an existing :ref:`ref_flyteidl.admin.Project`
	// flyteidl.admin.Project should be passed but the domains property should be empty;
	// it will be ignored in the handler as domains cannot be updated via this API.
	UpdateProject(ctx context.Context, in *admin.Project, opts ...grpc.CallOption) (*admin.ProjectUpdateResponse, error)
	// Fetches a list of :ref:`ref_flyteidl.admin.Project`
	ListProjects(ctx context.Context, in *admin.ProjectListRequest, opts ...grpc.CallOption) (*admin.Projects, error)
	// Indicates a :ref:`ref_flyteidl.event.WorkflowExecutionEvent` has occurred.
	CreateWorkflowEvent(ctx context.Context, in *admin.WorkflowExecutionEventRequest, opts ...grpc.CallOption) (*admin.WorkflowExecutionEventResponse, error)
	// Indicates a :ref:`ref_flyteidl.event.NodeExecutionEvent` has occurred.
	CreateNodeEvent(ctx context.Context, in *admin.NodeExecutionEventRequest, opts ...grpc.CallOption) (*admin.NodeExecutionEventResponse, error)
	// Indicates a :ref:`ref_flyteidl.event.TaskExecutionEvent` has occurred.
	CreateTaskEvent(ctx context.Context, in *admin.TaskExecutionEventRequest, opts ...grpc.CallOption) (*admin.TaskExecutionEventResponse, error)
	// Fetches a :ref:`ref_flyteidl.admin.TaskExecution`.
	GetTaskExecution(ctx context.Context, in *admin.TaskExecutionGetRequest, opts ...grpc.CallOption) (*admin.TaskExecution, error)
	// Fetches a list of :ref:`ref_flyteidl.admin.TaskExecution`.
	ListTaskExecutions(ctx context.Context, in *admin.TaskExecutionListRequest, opts ...grpc.CallOption) (*admin.TaskExecutionList, error)
	// Fetches input and output data for a :ref:`ref_flyteidl.admin.TaskExecution`.
	GetTaskExecutionData(ctx context.Context, in *admin.TaskExecutionGetDataRequest, opts ...grpc.CallOption) (*admin.TaskExecutionGetDataResponse, error)
	// Creates or updates custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.
	UpdateProjectDomainAttributes(ctx context.Context, in *admin.ProjectDomainAttributesUpdateRequest, opts ...grpc.CallOption) (*admin.ProjectDomainAttributesUpdateResponse, error)
	// Fetches custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.
	GetProjectDomainAttributes(ctx context.Context, in *admin.ProjectDomainAttributesGetRequest, opts ...grpc.CallOption) (*admin.ProjectDomainAttributesGetResponse, error)
	// Deletes custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.
	DeleteProjectDomainAttributes(ctx context.Context, in *admin.ProjectDomainAttributesDeleteRequest, opts ...grpc.CallOption) (*admin.ProjectDomainAttributesDeleteResponse, error)
	// Creates or updates custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` at the project level
	UpdateProjectAttributes(ctx context.Context, in *admin.ProjectAttributesUpdateRequest, opts ...grpc.CallOption) (*admin.ProjectAttributesUpdateResponse, error)
	// Fetches custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.
	GetProjectAttributes(ctx context.Context, in *admin.ProjectAttributesGetRequest, opts ...grpc.CallOption) (*admin.ProjectAttributesGetResponse, error)
	// Deletes custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.
	DeleteProjectAttributes(ctx context.Context, in *admin.ProjectAttributesDeleteRequest, opts ...grpc.CallOption) (*admin.ProjectAttributesDeleteResponse, error)
	// Creates or updates custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project, domain and workflow.
	UpdateWorkflowAttributes(ctx context.Context, in *admin.WorkflowAttributesUpdateRequest, opts ...grpc.CallOption) (*admin.WorkflowAttributesUpdateResponse, error)
	// Fetches custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project, domain and workflow.
	GetWorkflowAttributes(ctx context.Context, in *admin.WorkflowAttributesGetRequest, opts ...grpc.CallOption) (*admin.WorkflowAttributesGetResponse, error)
	// Deletes custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project, domain and workflow.
	DeleteWorkflowAttributes(ctx context.Context, in *admin.WorkflowAttributesDeleteRequest, opts ...grpc.CallOption) (*admin.WorkflowAttributesDeleteResponse, error)
	// Lists custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a specific resource type.
	ListMatchableAttributes(ctx context.Context, in *admin.ListMatchableAttributesRequest, opts ...grpc.CallOption) (*admin.ListMatchableAttributesResponse, error)
	// Returns a list of :ref:`ref_flyteidl.admin.NamedEntity` objects.
	ListNamedEntities(ctx context.Context, in *admin.NamedEntityListRequest, opts ...grpc.CallOption) (*admin.NamedEntityList, error)
	// Returns a :ref:`ref_flyteidl.admin.NamedEntity` object.
	GetNamedEntity(ctx context.Context, in *admin.NamedEntityGetRequest, opts ...grpc.CallOption) (*admin.NamedEntity, error)
	// Updates a :ref:`ref_flyteidl.admin.NamedEntity` object.
	UpdateNamedEntity(ctx context.Context, in *admin.NamedEntityUpdateRequest, opts ...grpc.CallOption) (*admin.NamedEntityUpdateResponse, error)
	GetVersion(ctx context.Context, in *admin.GetVersionRequest, opts ...grpc.CallOption) (*admin.GetVersionResponse, error)
	// Fetch a :ref:`ref_flyteidl.admin.DescriptionEntity` object.
	GetDescriptionEntity(ctx context.Context, in *admin.ObjectGetRequest, opts ...grpc.CallOption) (*admin.DescriptionEntity, error)
	// Fetch a list of :ref:`ref_flyteidl.admin.DescriptionEntity` definitions.
	ListDescriptionEntities(ctx context.Context, in *admin.DescriptionEntityListRequest, opts ...grpc.CallOption) (*admin.DescriptionEntityList, error)
	// Fetches runtime metrics for a :ref:`ref_flyteidl.admin.Execution`.
	GetExecutionMetrics(ctx context.Context, in *admin.WorkflowExecutionGetMetricsRequest, opts ...grpc.CallOption) (*admin.WorkflowExecutionGetMetricsResponse, error)
}

type adminServiceClient struct {
	cc *grpc.ClientConn
}

func NewAdminServiceClient(cc *grpc.ClientConn) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) CreateTask(ctx context.Context, in *admin.TaskCreateRequest, opts ...grpc.CallOption) (*admin.TaskCreateResponse, error) {
	out := new(admin.TaskCreateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetTask(ctx context.Context, in *admin.ObjectGetRequest, opts ...grpc.CallOption) (*admin.Task, error) {
	out := new(admin.Task)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListTaskIds(ctx context.Context, in *admin.NamedEntityIdentifierListRequest, opts ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error) {
	out := new(admin.NamedEntityIdentifierList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListTaskIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListTasks(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption) (*admin.TaskList, error) {
	out := new(admin.TaskList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateWorkflow(ctx context.Context, in *admin.WorkflowCreateRequest, opts ...grpc.CallOption) (*admin.WorkflowCreateResponse, error) {
	out := new(admin.WorkflowCreateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/CreateWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetWorkflow(ctx context.Context, in *admin.ObjectGetRequest, opts ...grpc.CallOption) (*admin.Workflow, error) {
	out := new(admin.Workflow)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListWorkflowIds(ctx context.Context, in *admin.NamedEntityIdentifierListRequest, opts ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error) {
	out := new(admin.NamedEntityIdentifierList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListWorkflowIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListWorkflows(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption) (*admin.WorkflowList, error) {
	out := new(admin.WorkflowList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateLaunchPlan(ctx context.Context, in *admin.LaunchPlanCreateRequest, opts ...grpc.CallOption) (*admin.LaunchPlanCreateResponse, error) {
	out := new(admin.LaunchPlanCreateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/CreateLaunchPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetLaunchPlan(ctx context.Context, in *admin.ObjectGetRequest, opts ...grpc.CallOption) (*admin.LaunchPlan, error) {
	out := new(admin.LaunchPlan)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetLaunchPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetActiveLaunchPlan(ctx context.Context, in *admin.ActiveLaunchPlanRequest, opts ...grpc.CallOption) (*admin.LaunchPlan, error) {
	out := new(admin.LaunchPlan)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetActiveLaunchPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListActiveLaunchPlans(ctx context.Context, in *admin.ActiveLaunchPlanListRequest, opts ...grpc.CallOption) (*admin.LaunchPlanList, error) {
	out := new(admin.LaunchPlanList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListActiveLaunchPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListLaunchPlanIds(ctx context.Context, in *admin.NamedEntityIdentifierListRequest, opts ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error) {
	out := new(admin.NamedEntityIdentifierList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListLaunchPlanIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListLaunchPlans(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption) (*admin.LaunchPlanList, error) {
	out := new(admin.LaunchPlanList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListLaunchPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateLaunchPlan(ctx context.Context, in *admin.LaunchPlanUpdateRequest, opts ...grpc.CallOption) (*admin.LaunchPlanUpdateResponse, error) {
	out := new(admin.LaunchPlanUpdateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/UpdateLaunchPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateExecution(ctx context.Context, in *admin.ExecutionCreateRequest, opts ...grpc.CallOption) (*admin.ExecutionCreateResponse, error) {
	out := new(admin.ExecutionCreateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/CreateExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RelaunchExecution(ctx context.Context, in *admin.ExecutionRelaunchRequest, opts ...grpc.CallOption) (*admin.ExecutionCreateResponse, error) {
	out := new(admin.ExecutionCreateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/RelaunchExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RecoverExecution(ctx context.Context, in *admin.ExecutionRecoverRequest, opts ...grpc.CallOption) (*admin.ExecutionCreateResponse, error) {
	out := new(admin.ExecutionCreateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/RecoverExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetExecution(ctx context.Context, in *admin.WorkflowExecutionGetRequest, opts ...grpc.CallOption) (*admin.Execution, error) {
	out := new(admin.Execution)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateExecution(ctx context.Context, in *admin.ExecutionUpdateRequest, opts ...grpc.CallOption) (*admin.ExecutionUpdateResponse, error) {
	out := new(admin.ExecutionUpdateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/UpdateExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetExecutionData(ctx context.Context, in *admin.WorkflowExecutionGetDataRequest, opts ...grpc.CallOption) (*admin.WorkflowExecutionGetDataResponse, error) {
	out := new(admin.WorkflowExecutionGetDataResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetExecutionData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListExecutions(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption) (*admin.ExecutionList, error) {
	out := new(admin.ExecutionList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListExecutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) TerminateExecution(ctx context.Context, in *admin.ExecutionTerminateRequest, opts ...grpc.CallOption) (*admin.ExecutionTerminateResponse, error) {
	out := new(admin.ExecutionTerminateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/TerminateExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetNodeExecution(ctx context.Context, in *admin.NodeExecutionGetRequest, opts ...grpc.CallOption) (*admin.NodeExecution, error) {
	out := new(admin.NodeExecution)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetNodeExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListNodeExecutions(ctx context.Context, in *admin.NodeExecutionListRequest, opts ...grpc.CallOption) (*admin.NodeExecutionList, error) {
	out := new(admin.NodeExecutionList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListNodeExecutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListNodeExecutionsForTask(ctx context.Context, in *admin.NodeExecutionForTaskListRequest, opts ...grpc.CallOption) (*admin.NodeExecutionList, error) {
	out := new(admin.NodeExecutionList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListNodeExecutionsForTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetNodeExecutionData(ctx context.Context, in *admin.NodeExecutionGetDataRequest, opts ...grpc.CallOption) (*admin.NodeExecutionGetDataResponse, error) {
	out := new(admin.NodeExecutionGetDataResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetNodeExecutionData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RegisterProject(ctx context.Context, in *admin.ProjectRegisterRequest, opts ...grpc.CallOption) (*admin.ProjectRegisterResponse, error) {
	out := new(admin.ProjectRegisterResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/RegisterProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateProject(ctx context.Context, in *admin.Project, opts ...grpc.CallOption) (*admin.ProjectUpdateResponse, error) {
	out := new(admin.ProjectUpdateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/UpdateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListProjects(ctx context.Context, in *admin.ProjectListRequest, opts ...grpc.CallOption) (*admin.Projects, error) {
	out := new(admin.Projects)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateWorkflowEvent(ctx context.Context, in *admin.WorkflowExecutionEventRequest, opts ...grpc.CallOption) (*admin.WorkflowExecutionEventResponse, error) {
	out := new(admin.WorkflowExecutionEventResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/CreateWorkflowEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateNodeEvent(ctx context.Context, in *admin.NodeExecutionEventRequest, opts ...grpc.CallOption) (*admin.NodeExecutionEventResponse, error) {
	out := new(admin.NodeExecutionEventResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/CreateNodeEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateTaskEvent(ctx context.Context, in *admin.TaskExecutionEventRequest, opts ...grpc.CallOption) (*admin.TaskExecutionEventResponse, error) {
	out := new(admin.TaskExecutionEventResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/CreateTaskEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetTaskExecution(ctx context.Context, in *admin.TaskExecutionGetRequest, opts ...grpc.CallOption) (*admin.TaskExecution, error) {
	out := new(admin.TaskExecution)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetTaskExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListTaskExecutions(ctx context.Context, in *admin.TaskExecutionListRequest, opts ...grpc.CallOption) (*admin.TaskExecutionList, error) {
	out := new(admin.TaskExecutionList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListTaskExecutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetTaskExecutionData(ctx context.Context, in *admin.TaskExecutionGetDataRequest, opts ...grpc.CallOption) (*admin.TaskExecutionGetDataResponse, error) {
	out := new(admin.TaskExecutionGetDataResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetTaskExecutionData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateProjectDomainAttributes(ctx context.Context, in *admin.ProjectDomainAttributesUpdateRequest, opts ...grpc.CallOption) (*admin.ProjectDomainAttributesUpdateResponse, error) {
	out := new(admin.ProjectDomainAttributesUpdateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/UpdateProjectDomainAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetProjectDomainAttributes(ctx context.Context, in *admin.ProjectDomainAttributesGetRequest, opts ...grpc.CallOption) (*admin.ProjectDomainAttributesGetResponse, error) {
	out := new(admin.ProjectDomainAttributesGetResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetProjectDomainAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteProjectDomainAttributes(ctx context.Context, in *admin.ProjectDomainAttributesDeleteRequest, opts ...grpc.CallOption) (*admin.ProjectDomainAttributesDeleteResponse, error) {
	out := new(admin.ProjectDomainAttributesDeleteResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/DeleteProjectDomainAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateProjectAttributes(ctx context.Context, in *admin.ProjectAttributesUpdateRequest, opts ...grpc.CallOption) (*admin.ProjectAttributesUpdateResponse, error) {
	out := new(admin.ProjectAttributesUpdateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/UpdateProjectAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetProjectAttributes(ctx context.Context, in *admin.ProjectAttributesGetRequest, opts ...grpc.CallOption) (*admin.ProjectAttributesGetResponse, error) {
	out := new(admin.ProjectAttributesGetResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetProjectAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteProjectAttributes(ctx context.Context, in *admin.ProjectAttributesDeleteRequest, opts ...grpc.CallOption) (*admin.ProjectAttributesDeleteResponse, error) {
	out := new(admin.ProjectAttributesDeleteResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/DeleteProjectAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateWorkflowAttributes(ctx context.Context, in *admin.WorkflowAttributesUpdateRequest, opts ...grpc.CallOption) (*admin.WorkflowAttributesUpdateResponse, error) {
	out := new(admin.WorkflowAttributesUpdateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/UpdateWorkflowAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetWorkflowAttributes(ctx context.Context, in *admin.WorkflowAttributesGetRequest, opts ...grpc.CallOption) (*admin.WorkflowAttributesGetResponse, error) {
	out := new(admin.WorkflowAttributesGetResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetWorkflowAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteWorkflowAttributes(ctx context.Context, in *admin.WorkflowAttributesDeleteRequest, opts ...grpc.CallOption) (*admin.WorkflowAttributesDeleteResponse, error) {
	out := new(admin.WorkflowAttributesDeleteResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/DeleteWorkflowAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListMatchableAttributes(ctx context.Context, in *admin.ListMatchableAttributesRequest, opts ...grpc.CallOption) (*admin.ListMatchableAttributesResponse, error) {
	out := new(admin.ListMatchableAttributesResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListMatchableAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListNamedEntities(ctx context.Context, in *admin.NamedEntityListRequest, opts ...grpc.CallOption) (*admin.NamedEntityList, error) {
	out := new(admin.NamedEntityList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListNamedEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetNamedEntity(ctx context.Context, in *admin.NamedEntityGetRequest, opts ...grpc.CallOption) (*admin.NamedEntity, error) {
	out := new(admin.NamedEntity)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetNamedEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateNamedEntity(ctx context.Context, in *admin.NamedEntityUpdateRequest, opts ...grpc.CallOption) (*admin.NamedEntityUpdateResponse, error) {
	out := new(admin.NamedEntityUpdateResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/UpdateNamedEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetVersion(ctx context.Context, in *admin.GetVersionRequest, opts ...grpc.CallOption) (*admin.GetVersionResponse, error) {
	out := new(admin.GetVersionResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDescriptionEntity(ctx context.Context, in *admin.ObjectGetRequest, opts ...grpc.CallOption) (*admin.DescriptionEntity, error) {
	out := new(admin.DescriptionEntity)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetDescriptionEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListDescriptionEntities(ctx context.Context, in *admin.DescriptionEntityListRequest, opts ...grpc.CallOption) (*admin.DescriptionEntityList, error) {
	out := new(admin.DescriptionEntityList)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/ListDescriptionEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetExecutionMetrics(ctx context.Context, in *admin.WorkflowExecutionGetMetricsRequest, opts ...grpc.CallOption) (*admin.WorkflowExecutionGetMetricsResponse, error) {
	out := new(admin.WorkflowExecutionGetMetricsResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.AdminService/GetExecutionMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
type AdminServiceServer interface {
	// Create and upload a :ref:`ref_flyteidl.admin.Task` definition
	CreateTask(context.Context, *admin.TaskCreateRequest) (*admin.TaskCreateResponse, error)
	// Fetch a :ref:`ref_flyteidl.admin.Task` definition.
	GetTask(context.Context, *admin.ObjectGetRequest) (*admin.Task, error)
	// Fetch a list of :ref:`ref_flyteidl.admin.NamedEntityIdentifier` of task objects.
	ListTaskIds(context.Context, *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error)
	// Fetch a list of :ref:`ref_flyteidl.admin.Task` definitions.
	ListTasks(context.Context, *admin.ResourceListRequest) (*admin.TaskList, error)
	// Create and upload a :ref:`ref_flyteidl.admin.Workflow` definition
	CreateWorkflow(context.Context, *admin.WorkflowCreateRequest) (*admin.WorkflowCreateResponse, error)
	// Fetch a :ref:`ref_flyteidl.admin.Workflow` definition.
	GetWorkflow(context.Context, *admin.ObjectGetRequest) (*admin.Workflow, error)
	// Fetch a list of :ref:`ref_flyteidl.admin.NamedEntityIdentifier` of workflow objects.
	ListWorkflowIds(context.Context, *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error)
	// Fetch a list of :ref:`ref_flyteidl.admin.Workflow` definitions.
	ListWorkflows(context.Context, *admin.ResourceListRequest) (*admin.WorkflowList, error)
	// Create and upload a :ref:`ref_flyteidl.admin.LaunchPlan` definition
	CreateLaunchPlan(context.Context, *admin.LaunchPlanCreateRequest) (*admin.LaunchPlanCreateResponse, error)
	// Fetch a :ref:`ref_flyteidl.admin.LaunchPlan` definition.
	GetLaunchPlan(context.Context, *admin.ObjectGetRequest) (*admin.LaunchPlan, error)
	// Fetch the active version of a :ref:`ref_flyteidl.admin.LaunchPlan`.
	GetActiveLaunchPlan(context.Context, *admin.ActiveLaunchPlanRequest) (*admin.LaunchPlan, error)
	// List active versions of :ref:`ref_flyteidl.admin.LaunchPlan`.
	ListActiveLaunchPlans(context.Context, *admin.ActiveLaunchPlanListRequest) (*admin.LaunchPlanList, error)
	// Fetch a list of :ref:`ref_flyteidl.admin.NamedEntityIdentifier` of launch plan objects.
	ListLaunchPlanIds(context.Context, *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error)
	// Fetch a list of :ref:`ref_flyteidl.admin.LaunchPlan` definitions.
	ListLaunchPlans(context.Context, *admin.ResourceListRequest) (*admin.LaunchPlanList, error)
	// Updates the status of a registered :ref:`ref_flyteidl.admin.LaunchPlan`.
	UpdateLaunchPlan(context.Context, *admin.LaunchPlanUpdateRequest) (*admin.LaunchPlanUpdateResponse, error)
	// Triggers the creation of a :ref:`ref_flyteidl.admin.Execution`
	CreateExecution(context.Context, *admin.ExecutionCreateRequest) (*admin.ExecutionCreateResponse, error)
	// Triggers the creation of an identical :ref:`ref_flyteidl.admin.Execution`
	RelaunchExecution(context.Context, *admin.ExecutionRelaunchRequest) (*admin.ExecutionCreateResponse, error)
	// Recreates a previously-run workflow execution that will only start executing from the last known failure point.
	// In Recover mode, users cannot change any input parameters or update the version of the execution.
	// This is extremely useful to recover from system errors and byzantine faults like - Loss of K8s cluster, bugs in platform or instability, machine failures,
	// downstream system failures (downstream services), or simply to recover executions that failed because of retry exhaustion and should complete if tried again.
	// See :ref:`ref_flyteidl.admin.ExecutionRecoverRequest` for more details.
	RecoverExecution(context.Context, *admin.ExecutionRecoverRequest) (*admin.ExecutionCreateResponse, error)
	// Fetches a :ref:`ref_flyteidl.admin.Execution`.
	GetExecution(context.Context, *admin.WorkflowExecutionGetRequest) (*admin.Execution, error)
	// Update execution belonging to project domain :ref:`ref_flyteidl.admin.Execution`.
	UpdateExecution(context.Context, *admin.ExecutionUpdateRequest) (*admin.ExecutionUpdateResponse, error)
	// Fetches input and output data for a :ref:`ref_flyteidl.admin.Execution`.
	GetExecutionData(context.Context, *admin.WorkflowExecutionGetDataRequest) (*admin.WorkflowExecutionGetDataResponse, error)
	// Fetch a list of :ref:`ref_flyteidl.admin.Execution`.
	ListExecutions(context.Context, *admin.ResourceListRequest) (*admin.ExecutionList, error)
	// Terminates an in-progress :ref:`ref_flyteidl.admin.Execution`.
	TerminateExecution(context.Context, *admin.ExecutionTerminateRequest) (*admin.ExecutionTerminateResponse, error)
	// Fetches a :ref:`ref_flyteidl.admin.NodeExecution`.
	GetNodeExecution(context.Context, *admin.NodeExecutionGetRequest) (*admin.NodeExecution, error)
	// Fetch a list of :ref:`ref_flyteidl.admin.NodeExecution`.
	ListNodeExecutions(context.Context, *admin.NodeExecutionListRequest) (*admin.NodeExecutionList, error)
	// Fetch a list of :ref:`ref_flyteidl.admin.NodeExecution` launched by the reference :ref:`ref_flyteidl.admin.TaskExecution`.
	ListNodeExecutionsForTask(context.Context, *admin.NodeExecutionForTaskListRequest) (*admin.NodeExecutionList, error)
	// Fetches input and output data for a :ref:`ref_flyteidl.admin.NodeExecution`.
	GetNodeExecutionData(context.Context, *admin.NodeExecutionGetDataRequest) (*admin.NodeExecutionGetDataResponse, error)
	// Registers a :ref:`ref_flyteidl.admin.Project` with the Flyte deployment.
	RegisterProject(context.Context, *admin.ProjectRegisterRequest) (*admin.ProjectRegisterResponse, error)
	// Updates an existing :ref:`ref_flyteidl.admin.Project`
	// flyteidl.admin.Project should be passed but the domains property should be empty;
	// it will be ignored in the handler as domains cannot be updated via this API.
	UpdateProject(context.Context, *admin.Project) (*admin.ProjectUpdateResponse, error)
	// Fetches a list of :ref:`ref_flyteidl.admin.Project`
	ListProjects(context.Context, *admin.ProjectListRequest) (*admin.Projects, error)
	// Indicates a :ref:`ref_flyteidl.event.WorkflowExecutionEvent` has occurred.
	CreateWorkflowEvent(context.Context, *admin.WorkflowExecutionEventRequest) (*admin.WorkflowExecutionEventResponse, error)
	// Indicates a :ref:`ref_flyteidl.event.NodeExecutionEvent` has occurred.
	CreateNodeEvent(context.Context, *admin.NodeExecutionEventRequest) (*admin.NodeExecutionEventResponse, error)
	// Indicates a :ref:`ref_flyteidl.event.TaskExecutionEvent` has occurred.
	CreateTaskEvent(context.Context, *admin.TaskExecutionEventRequest) (*admin.TaskExecutionEventResponse, error)
	// Fetches a :ref:`ref_flyteidl.admin.TaskExecution`.
	GetTaskExecution(context.Context, *admin.TaskExecutionGetRequest) (*admin.TaskExecution, error)
	// Fetches a list of :ref:`ref_flyteidl.admin.TaskExecution`.
	ListTaskExecutions(context.Context, *admin.TaskExecutionListRequest) (*admin.TaskExecutionList, error)
	// Fetches input and output data for a :ref:`ref_flyteidl.admin.TaskExecution`.
	GetTaskExecutionData(context.Context, *admin.TaskExecutionGetDataRequest) (*admin.TaskExecutionGetDataResponse, error)
	// Creates or updates custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.
	UpdateProjectDomainAttributes(context.Context, *admin.ProjectDomainAttributesUpdateRequest) (*admin.ProjectDomainAttributesUpdateResponse, error)
	// Fetches custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.
	GetProjectDomainAttributes(context.Context, *admin.ProjectDomainAttributesGetRequest) (*admin.ProjectDomainAttributesGetResponse, error)
	// Deletes custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.
	DeleteProjectDomainAttributes(context.Context, *admin.ProjectDomainAttributesDeleteRequest) (*admin.ProjectDomainAttributesDeleteResponse, error)
	// Creates or updates custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` at the project level
	UpdateProjectAttributes(context.Context, *admin.ProjectAttributesUpdateRequest) (*admin.ProjectAttributesUpdateResponse, error)
	// Fetches custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.
	GetProjectAttributes(context.Context, *admin.ProjectAttributesGetRequest) (*admin.ProjectAttributesGetResponse, error)
	// Deletes custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.
	DeleteProjectAttributes(context.Context, *admin.ProjectAttributesDeleteRequest) (*admin.ProjectAttributesDeleteResponse, error)
	// Creates or updates custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project, domain and workflow.
	UpdateWorkflowAttributes(context.Context, *admin.WorkflowAttributesUpdateRequest) (*admin.WorkflowAttributesUpdateResponse, error)
	// Fetches custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project, domain and workflow.
	GetWorkflowAttributes(context.Context, *admin.WorkflowAttributesGetRequest) (*admin.WorkflowAttributesGetResponse, error)
	// Deletes custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project, domain and workflow.
	DeleteWorkflowAttributes(context.Context, *admin.WorkflowAttributesDeleteRequest) (*admin.WorkflowAttributesDeleteResponse, error)
	// Lists custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a specific resource type.
	ListMatchableAttributes(context.Context, *admin.ListMatchableAttributesRequest) (*admin.ListMatchableAttributesResponse, error)
	// Returns a list of :ref:`ref_flyteidl.admin.NamedEntity` objects.
	ListNamedEntities(context.Context, *admin.NamedEntityListRequest) (*admin.NamedEntityList, error)
	// Returns a :ref:`ref_flyteidl.admin.NamedEntity` object.
	GetNamedEntity(context.Context, *admin.NamedEntityGetRequest) (*admin.NamedEntity, error)
	// Updates a :ref:`ref_flyteidl.admin.NamedEntity` object.
	UpdateNamedEntity(context.Context, *admin.NamedEntityUpdateRequest) (*admin.NamedEntityUpdateResponse, error)
	GetVersion(context.Context, *admin.GetVersionRequest) (*admin.GetVersionResponse, error)
	// Fetch a :ref:`ref_flyteidl.admin.DescriptionEntity` object.
	GetDescriptionEntity(context.Context, *admin.ObjectGetRequest) (*admin.DescriptionEntity, error)
	// Fetch a list of :ref:`ref_flyteidl.admin.DescriptionEntity` definitions.
	ListDescriptionEntities(context.Context, *admin.DescriptionEntityListRequest) (*admin.DescriptionEntityList, error)
	// Fetches runtime metrics for a :ref:`ref_flyteidl.admin.Execution`.
	GetExecutionMetrics(context.Context, *admin.WorkflowExecutionGetMetricsRequest) (*admin.WorkflowExecutionGetMetricsResponse, error)
}

// UnimplementedAdminServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (*UnimplementedAdminServiceServer) CreateTask(ctx context.Context, req *admin.TaskCreateRequest) (*admin.TaskCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (*UnimplementedAdminServiceServer) GetTask(ctx context.Context, req *admin.ObjectGetRequest) (*admin.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (*UnimplementedAdminServiceServer) ListTaskIds(ctx context.Context, req *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskIds not implemented")
}
func (*UnimplementedAdminServiceServer) ListTasks(ctx context.Context, req *admin.ResourceListRequest) (*admin.TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (*UnimplementedAdminServiceServer) CreateWorkflow(ctx context.Context, req *admin.WorkflowCreateRequest) (*admin.WorkflowCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkflow not implemented")
}
func (*UnimplementedAdminServiceServer) GetWorkflow(ctx context.Context, req *admin.ObjectGetRequest) (*admin.Workflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (*UnimplementedAdminServiceServer) ListWorkflowIds(ctx context.Context, req *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflowIds not implemented")
}
func (*UnimplementedAdminServiceServer) ListWorkflows(ctx context.Context, req *admin.ResourceListRequest) (*admin.WorkflowList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}
func (*UnimplementedAdminServiceServer) CreateLaunchPlan(ctx context.Context, req *admin.LaunchPlanCreateRequest) (*admin.LaunchPlanCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLaunchPlan not implemented")
}
func (*UnimplementedAdminServiceServer) GetLaunchPlan(ctx context.Context, req *admin.ObjectGetRequest) (*admin.LaunchPlan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLaunchPlan not implemented")
}
func (*UnimplementedAdminServiceServer) GetActiveLaunchPlan(ctx context.Context, req *admin.ActiveLaunchPlanRequest) (*admin.LaunchPlan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveLaunchPlan not implemented")
}
func (*UnimplementedAdminServiceServer) ListActiveLaunchPlans(ctx context.Context, req *admin.ActiveLaunchPlanListRequest) (*admin.LaunchPlanList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActiveLaunchPlans not implemented")
}
func (*UnimplementedAdminServiceServer) ListLaunchPlanIds(ctx context.Context, req *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLaunchPlanIds not implemented")
}
func (*UnimplementedAdminServiceServer) ListLaunchPlans(ctx context.Context, req *admin.ResourceListRequest) (*admin.LaunchPlanList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLaunchPlans not implemented")
}
func (*UnimplementedAdminServiceServer) UpdateLaunchPlan(ctx context.Context, req *admin.LaunchPlanUpdateRequest) (*admin.LaunchPlanUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLaunchPlan not implemented")
}
func (*UnimplementedAdminServiceServer) CreateExecution(ctx context.Context, req *admin.ExecutionCreateRequest) (*admin.ExecutionCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExecution not implemented")
}
func (*UnimplementedAdminServiceServer) RelaunchExecution(ctx context.Context, req *admin.ExecutionRelaunchRequest) (*admin.ExecutionCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelaunchExecution not implemented")
}
func (*UnimplementedAdminServiceServer) RecoverExecution(ctx context.Context, req *admin.ExecutionRecoverRequest) (*admin.ExecutionCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverExecution not implemented")
}
func (*UnimplementedAdminServiceServer) GetExecution(ctx context.Context, req *admin.WorkflowExecutionGetRequest) (*admin.Execution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecution not implemented")
}
func (*UnimplementedAdminServiceServer) UpdateExecution(ctx context.Context, req *admin.ExecutionUpdateRequest) (*admin.ExecutionUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExecution not implemented")
}
func (*UnimplementedAdminServiceServer) GetExecutionData(ctx context.Context, req *admin.WorkflowExecutionGetDataRequest) (*admin.WorkflowExecutionGetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecutionData not implemented")
}
func (*UnimplementedAdminServiceServer) ListExecutions(ctx context.Context, req *admin.ResourceListRequest) (*admin.ExecutionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExecutions not implemented")
}
func (*UnimplementedAdminServiceServer) TerminateExecution(ctx context.Context, req *admin.ExecutionTerminateRequest) (*admin.ExecutionTerminateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateExecution not implemented")
}
func (*UnimplementedAdminServiceServer) GetNodeExecution(ctx context.Context, req *admin.NodeExecutionGetRequest) (*admin.NodeExecution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeExecution not implemented")
}
func (*UnimplementedAdminServiceServer) ListNodeExecutions(ctx context.Context, req *admin.NodeExecutionListRequest) (*admin.NodeExecutionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodeExecutions not implemented")
}
func (*UnimplementedAdminServiceServer) ListNodeExecutionsForTask(ctx context.Context, req *admin.NodeExecutionForTaskListRequest) (*admin.NodeExecutionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodeExecutionsForTask not implemented")
}
func (*UnimplementedAdminServiceServer) GetNodeExecutionData(ctx context.Context, req *admin.NodeExecutionGetDataRequest) (*admin.NodeExecutionGetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeExecutionData not implemented")
}
func (*UnimplementedAdminServiceServer) RegisterProject(ctx context.Context, req *admin.ProjectRegisterRequest) (*admin.ProjectRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterProject not implemented")
}
func (*UnimplementedAdminServiceServer) UpdateProject(ctx context.Context, req *admin.Project) (*admin.ProjectUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (*UnimplementedAdminServiceServer) ListProjects(ctx context.Context, req *admin.ProjectListRequest) (*admin.Projects, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (*UnimplementedAdminServiceServer) CreateWorkflowEvent(ctx context.Context, req *admin.WorkflowExecutionEventRequest) (*admin.WorkflowExecutionEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkflowEvent not implemented")
}
func (*UnimplementedAdminServiceServer) CreateNodeEvent(ctx context.Context, req *admin.NodeExecutionEventRequest) (*admin.NodeExecutionEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNodeEvent not implemented")
}
func (*UnimplementedAdminServiceServer) CreateTaskEvent(ctx context.Context, req *admin.TaskExecutionEventRequest) (*admin.TaskExecutionEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskEvent not implemented")
}
func (*UnimplementedAdminServiceServer) GetTaskExecution(ctx context.Context, req *admin.TaskExecutionGetRequest) (*admin.TaskExecution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskExecution not implemented")
}
func (*UnimplementedAdminServiceServer) ListTaskExecutions(ctx context.Context, req *admin.TaskExecutionListRequest) (*admin.TaskExecutionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskExecutions not implemented")
}
func (*UnimplementedAdminServiceServer) GetTaskExecutionData(ctx context.Context, req *admin.TaskExecutionGetDataRequest) (*admin.TaskExecutionGetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskExecutionData not implemented")
}
func (*UnimplementedAdminServiceServer) UpdateProjectDomainAttributes(ctx context.Context, req *admin.ProjectDomainAttributesUpdateRequest) (*admin.ProjectDomainAttributesUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectDomainAttributes not implemented")
}
func (*UnimplementedAdminServiceServer) GetProjectDomainAttributes(ctx context.Context, req *admin.ProjectDomainAttributesGetRequest) (*admin.ProjectDomainAttributesGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectDomainAttributes not implemented")
}
func (*UnimplementedAdminServiceServer) DeleteProjectDomainAttributes(ctx context.Context, req *admin.ProjectDomainAttributesDeleteRequest) (*admin.ProjectDomainAttributesDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectDomainAttributes not implemented")
}
func (*UnimplementedAdminServiceServer) UpdateProjectAttributes(ctx context.Context, req *admin.ProjectAttributesUpdateRequest) (*admin.ProjectAttributesUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectAttributes not implemented")
}
func (*UnimplementedAdminServiceServer) GetProjectAttributes(ctx context.Context, req *admin.ProjectAttributesGetRequest) (*admin.ProjectAttributesGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectAttributes not implemented")
}
func (*UnimplementedAdminServiceServer) DeleteProjectAttributes(ctx context.Context, req *admin.ProjectAttributesDeleteRequest) (*admin.ProjectAttributesDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectAttributes not implemented")
}
func (*UnimplementedAdminServiceServer) UpdateWorkflowAttributes(ctx context.Context, req *admin.WorkflowAttributesUpdateRequest) (*admin.WorkflowAttributesUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkflowAttributes not implemented")
}
func (*UnimplementedAdminServiceServer) GetWorkflowAttributes(ctx context.Context, req *admin.WorkflowAttributesGetRequest) (*admin.WorkflowAttributesGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowAttributes not implemented")
}
func (*UnimplementedAdminServiceServer) DeleteWorkflowAttributes(ctx context.Context, req *admin.WorkflowAttributesDeleteRequest) (*admin.WorkflowAttributesDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkflowAttributes not implemented")
}
func (*UnimplementedAdminServiceServer) ListMatchableAttributes(ctx context.Context, req *admin.ListMatchableAttributesRequest) (*admin.ListMatchableAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMatchableAttributes not implemented")
}
func (*UnimplementedAdminServiceServer) ListNamedEntities(ctx context.Context, req *admin.NamedEntityListRequest) (*admin.NamedEntityList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamedEntities not implemented")
}
func (*UnimplementedAdminServiceServer) GetNamedEntity(ctx context.Context, req *admin.NamedEntityGetRequest) (*admin.NamedEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamedEntity not implemented")
}
func (*UnimplementedAdminServiceServer) UpdateNamedEntity(ctx context.Context, req *admin.NamedEntityUpdateRequest) (*admin.NamedEntityUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamedEntity not implemented")
}
func (*UnimplementedAdminServiceServer) GetVersion(ctx context.Context, req *admin.GetVersionRequest) (*admin.GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (*UnimplementedAdminServiceServer) GetDescriptionEntity(ctx context.Context, req *admin.ObjectGetRequest) (*admin.DescriptionEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDescriptionEntity not implemented")
}
func (*UnimplementedAdminServiceServer) ListDescriptionEntities(ctx context.Context, req *admin.DescriptionEntityListRequest) (*admin.DescriptionEntityList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDescriptionEntities not implemented")
}
func (*UnimplementedAdminServiceServer) GetExecutionMetrics(ctx context.Context, req *admin.WorkflowExecutionGetMetricsRequest) (*admin.WorkflowExecutionGetMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecutionMetrics not implemented")
}

func RegisterAdminServiceServer(s *grpc.Server, srv AdminServiceServer) {
	s.RegisterService(&_AdminService_serviceDesc, srv)
}

func _AdminService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.TaskCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateTask(ctx, req.(*admin.TaskCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ObjectGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetTask(ctx, req.(*admin.ObjectGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListTaskIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NamedEntityIdentifierListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListTaskIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListTaskIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListTaskIds(ctx, req.(*admin.NamedEntityIdentifierListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListTasks(ctx, req.(*admin.ResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.WorkflowCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/CreateWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateWorkflow(ctx, req.(*admin.WorkflowCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ObjectGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetWorkflow(ctx, req.(*admin.ObjectGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListWorkflowIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NamedEntityIdentifierListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListWorkflowIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListWorkflowIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListWorkflowIds(ctx, req.(*admin.NamedEntityIdentifierListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListWorkflows(ctx, req.(*admin.ResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateLaunchPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.LaunchPlanCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateLaunchPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/CreateLaunchPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateLaunchPlan(ctx, req.(*admin.LaunchPlanCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetLaunchPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ObjectGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetLaunchPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetLaunchPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetLaunchPlan(ctx, req.(*admin.ObjectGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetActiveLaunchPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ActiveLaunchPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetActiveLaunchPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetActiveLaunchPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetActiveLaunchPlan(ctx, req.(*admin.ActiveLaunchPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListActiveLaunchPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ActiveLaunchPlanListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListActiveLaunchPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListActiveLaunchPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListActiveLaunchPlans(ctx, req.(*admin.ActiveLaunchPlanListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListLaunchPlanIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NamedEntityIdentifierListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListLaunchPlanIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListLaunchPlanIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListLaunchPlanIds(ctx, req.(*admin.NamedEntityIdentifierListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListLaunchPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListLaunchPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListLaunchPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListLaunchPlans(ctx, req.(*admin.ResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateLaunchPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.LaunchPlanUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateLaunchPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/UpdateLaunchPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateLaunchPlan(ctx, req.(*admin.LaunchPlanUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ExecutionCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/CreateExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateExecution(ctx, req.(*admin.ExecutionCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RelaunchExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ExecutionRelaunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RelaunchExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/RelaunchExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RelaunchExecution(ctx, req.(*admin.ExecutionRelaunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RecoverExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ExecutionRecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RecoverExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/RecoverExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RecoverExecution(ctx, req.(*admin.ExecutionRecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.WorkflowExecutionGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetExecution(ctx, req.(*admin.WorkflowExecutionGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ExecutionUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/UpdateExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateExecution(ctx, req.(*admin.ExecutionUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetExecutionData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.WorkflowExecutionGetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetExecutionData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetExecutionData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetExecutionData(ctx, req.(*admin.WorkflowExecutionGetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListExecutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListExecutions(ctx, req.(*admin.ResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_TerminateExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ExecutionTerminateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).TerminateExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/TerminateExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).TerminateExecution(ctx, req.(*admin.ExecutionTerminateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetNodeExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NodeExecutionGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetNodeExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetNodeExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetNodeExecution(ctx, req.(*admin.NodeExecutionGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListNodeExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NodeExecutionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListNodeExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListNodeExecutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListNodeExecutions(ctx, req.(*admin.NodeExecutionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListNodeExecutionsForTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NodeExecutionForTaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListNodeExecutionsForTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListNodeExecutionsForTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListNodeExecutionsForTask(ctx, req.(*admin.NodeExecutionForTaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetNodeExecutionData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NodeExecutionGetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetNodeExecutionData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetNodeExecutionData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetNodeExecutionData(ctx, req.(*admin.NodeExecutionGetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RegisterProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ProjectRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RegisterProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/RegisterProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RegisterProject(ctx, req.(*admin.ProjectRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/UpdateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateProject(ctx, req.(*admin.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ProjectListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListProjects(ctx, req.(*admin.ProjectListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateWorkflowEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.WorkflowExecutionEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateWorkflowEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/CreateWorkflowEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateWorkflowEvent(ctx, req.(*admin.WorkflowExecutionEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateNodeEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NodeExecutionEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateNodeEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/CreateNodeEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateNodeEvent(ctx, req.(*admin.NodeExecutionEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateTaskEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.TaskExecutionEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateTaskEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/CreateTaskEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateTaskEvent(ctx, req.(*admin.TaskExecutionEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetTaskExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.TaskExecutionGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetTaskExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetTaskExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetTaskExecution(ctx, req.(*admin.TaskExecutionGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListTaskExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.TaskExecutionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListTaskExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListTaskExecutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListTaskExecutions(ctx, req.(*admin.TaskExecutionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetTaskExecutionData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.TaskExecutionGetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetTaskExecutionData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetTaskExecutionData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetTaskExecutionData(ctx, req.(*admin.TaskExecutionGetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateProjectDomainAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ProjectDomainAttributesUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateProjectDomainAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/UpdateProjectDomainAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateProjectDomainAttributes(ctx, req.(*admin.ProjectDomainAttributesUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetProjectDomainAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ProjectDomainAttributesGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetProjectDomainAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetProjectDomainAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetProjectDomainAttributes(ctx, req.(*admin.ProjectDomainAttributesGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteProjectDomainAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ProjectDomainAttributesDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteProjectDomainAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/DeleteProjectDomainAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteProjectDomainAttributes(ctx, req.(*admin.ProjectDomainAttributesDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateProjectAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ProjectAttributesUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateProjectAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/UpdateProjectAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateProjectAttributes(ctx, req.(*admin.ProjectAttributesUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetProjectAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ProjectAttributesGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetProjectAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetProjectAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetProjectAttributes(ctx, req.(*admin.ProjectAttributesGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteProjectAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ProjectAttributesDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteProjectAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/DeleteProjectAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteProjectAttributes(ctx, req.(*admin.ProjectAttributesDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateWorkflowAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.WorkflowAttributesUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateWorkflowAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/UpdateWorkflowAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateWorkflowAttributes(ctx, req.(*admin.WorkflowAttributesUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetWorkflowAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.WorkflowAttributesGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetWorkflowAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetWorkflowAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetWorkflowAttributes(ctx, req.(*admin.WorkflowAttributesGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteWorkflowAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.WorkflowAttributesDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteWorkflowAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/DeleteWorkflowAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteWorkflowAttributes(ctx, req.(*admin.WorkflowAttributesDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListMatchableAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ListMatchableAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListMatchableAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListMatchableAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListMatchableAttributes(ctx, req.(*admin.ListMatchableAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListNamedEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NamedEntityListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListNamedEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListNamedEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListNamedEntities(ctx, req.(*admin.NamedEntityListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetNamedEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NamedEntityGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetNamedEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetNamedEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetNamedEntity(ctx, req.(*admin.NamedEntityGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateNamedEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.NamedEntityUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateNamedEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/UpdateNamedEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateNamedEntity(ctx, req.(*admin.NamedEntityUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetVersion(ctx, req.(*admin.GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDescriptionEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.ObjectGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDescriptionEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetDescriptionEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDescriptionEntity(ctx, req.(*admin.ObjectGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListDescriptionEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.DescriptionEntityListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListDescriptionEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/ListDescriptionEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListDescriptionEntities(ctx, req.(*admin.DescriptionEntityListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetExecutionMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(admin.WorkflowExecutionGetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetExecutionMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.AdminService/GetExecutionMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetExecutionMetrics(ctx, req.(*admin.WorkflowExecutionGetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdminService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flyteidl.service.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _AdminService_CreateTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _AdminService_GetTask_Handler,
		},
		{
			MethodName: "ListTaskIds",
			Handler:    _AdminService_ListTaskIds_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _AdminService_ListTasks_Handler,
		},
		{
			MethodName: "CreateWorkflow",
			Handler:    _AdminService_CreateWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _AdminService_GetWorkflow_Handler,
		},
		{
			MethodName: "ListWorkflowIds",
			Handler:    _AdminService_ListWorkflowIds_Handler,
		},
		{
			MethodName: "ListWorkflows",
			Handler:    _AdminService_ListWorkflows_Handler,
		},
		{
			MethodName: "CreateLaunchPlan",
			Handler:    _AdminService_CreateLaunchPlan_Handler,
		},
		{
			MethodName: "GetLaunchPlan",
			Handler:    _AdminService_GetLaunchPlan_Handler,
		},
		{
			MethodName: "GetActiveLaunchPlan",
			Handler:    _AdminService_GetActiveLaunchPlan_Handler,
		},
		{
			MethodName: "ListActiveLaunchPlans",
			Handler:    _AdminService_ListActiveLaunchPlans_Handler,
		},
		{
			MethodName: "ListLaunchPlanIds",
			Handler:    _AdminService_ListLaunchPlanIds_Handler,
		},
		{
			MethodName: "ListLaunchPlans",
			Handler:    _AdminService_ListLaunchPlans_Handler,
		},
		{
			MethodName: "UpdateLaunchPlan",
			Handler:    _AdminService_UpdateLaunchPlan_Handler,
		},
		{
			MethodName: "CreateExecution",
			Handler:    _AdminService_CreateExecution_Handler,
		},
		{
			MethodName: "RelaunchExecution",
			Handler:    _AdminService_RelaunchExecution_Handler,
		},
		{
			MethodName: "RecoverExecution",
			Handler:    _AdminService_RecoverExecution_Handler,
		},
		{
			MethodName: "GetExecution",
			Handler:    _AdminService_GetExecution_Handler,
		},
		{
			MethodName: "UpdateExecution",
			Handler:    _AdminService_UpdateExecution_Handler,
		},
		{
			MethodName: "GetExecutionData",
			Handler:    _AdminService_GetExecutionData_Handler,
		},
		{
			MethodName: "ListExecutions",
			Handler:    _AdminService_ListExecutions_Handler,
		},
		{
			MethodName: "TerminateExecution",
			Handler:    _AdminService_TerminateExecution_Handler,
		},
		{
			MethodName: "GetNodeExecution",
			Handler:    _AdminService_GetNodeExecution_Handler,
		},
		{
			MethodName: "ListNodeExecutions",
			Handler:    _AdminService_ListNodeExecutions_Handler,
		},
		{
			MethodName: "ListNodeExecutionsForTask",
			Handler:    _AdminService_ListNodeExecutionsForTask_Handler,
		},
		{
			MethodName: "GetNodeExecutionData",
			Handler:    _AdminService_GetNodeExecutionData_Handler,
		},
		{
			MethodName: "RegisterProject",
			Handler:    _AdminService_RegisterProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _AdminService_UpdateProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _AdminService_ListProjects_Handler,
		},
		{
			MethodName: "CreateWorkflowEvent",
			Handler:    _AdminService_CreateWorkflowEvent_Handler,
		},
		{
			MethodName: "CreateNodeEvent",
			Handler:    _AdminService_CreateNodeEvent_Handler,
		},
		{
			MethodName: "CreateTaskEvent",
			Handler:    _AdminService_CreateTaskEvent_Handler,
		},
		{
			MethodName: "GetTaskExecution",
			Handler:    _AdminService_GetTaskExecution_Handler,
		},
		{
			MethodName: "ListTaskExecutions",
			Handler:    _AdminService_ListTaskExecutions_Handler,
		},
		{
			MethodName: "GetTaskExecutionData",
			Handler:    _AdminService_GetTaskExecutionData_Handler,
		},
		{
			MethodName: "UpdateProjectDomainAttributes",
			Handler:    _AdminService_UpdateProjectDomainAttributes_Handler,
		},
		{
			MethodName: "GetProjectDomainAttributes",
			Handler:    _AdminService_GetProjectDomainAttributes_Handler,
		},
		{
			MethodName: "DeleteProjectDomainAttributes",
			Handler:    _AdminService_DeleteProjectDomainAttributes_Handler,
		},
		{
			MethodName: "UpdateProjectAttributes",
			Handler:    _AdminService_UpdateProjectAttributes_Handler,
		},
		{
			MethodName: "GetProjectAttributes",
			Handler:    _AdminService_GetProjectAttributes_Handler,
		},
		{
			MethodName: "DeleteProjectAttributes",
			Handler:    _AdminService_DeleteProjectAttributes_Handler,
		},
		{
			MethodName: "UpdateWorkflowAttributes",
			Handler:    _AdminService_UpdateWorkflowAttributes_Handler,
		},
		{
			MethodName: "GetWorkflowAttributes",
			Handler:    _AdminService_GetWorkflowAttributes_Handler,
		},
		{
			MethodName: "DeleteWorkflowAttributes",
			Handler:    _AdminService_DeleteWorkflowAttributes_Handler,
		},
		{
			MethodName: "ListMatchableAttributes",
			Handler:    _AdminService_ListMatchableAttributes_Handler,
		},
		{
			MethodName: "ListNamedEntities",
			Handler:    _AdminService_ListNamedEntities_Handler,
		},
		{
			MethodName: "GetNamedEntity",
			Handler:    _AdminService_GetNamedEntity_Handler,
		},
		{
			MethodName: "UpdateNamedEntity",
			Handler:    _AdminService_UpdateNamedEntity_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _AdminService_GetVersion_Handler,
		},
		{
			MethodName: "GetDescriptionEntity",
			Handler:    _AdminService_GetDescriptionEntity_Handler,
		},
		{
			MethodName: "ListDescriptionEntities",
			Handler:    _AdminService_ListDescriptionEntities_Handler,
		},
		{
			MethodName: "GetExecutionMetrics",
			Handler:    _AdminService_GetExecutionMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flyteidl/service/admin.proto",
}
